{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslPlainServer.java",
  "functionName": "evaluateResponse",
  "functionId": "evaluateResponse___response-byte[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslPlainServer.java",
  "functionStartLine": 75,
  "functionEndLine": 113,
  "numCommitsSeen": 3,
  "timeTaken": 1240,
  "changeHistory": [
    "ca0827a86235dbc4d7e00cc8426ebff9fcc2d421",
    "820f864a26d90e9f4a3584577df581dcac20f9b6",
    "de1f33dc35599d3169475d82f3052f1b04025add"
  ],
  "changeHistoryShort": {
    "ca0827a86235dbc4d7e00cc8426ebff9fcc2d421": "Ybodychange",
    "820f864a26d90e9f4a3584577df581dcac20f9b6": "Ybodychange",
    "de1f33dc35599d3169475d82f3052f1b04025add": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ca0827a86235dbc4d7e00cc8426ebff9fcc2d421": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12324. Better exception reporting in SaslPlainServer.   (Mike Yoder via stevel)\n",
      "commitDate": "11/09/15 7:58 AM",
      "commitName": "ca0827a86235dbc4d7e00cc8426ebff9fcc2d421",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/08/15 3:24 PM",
      "commitNameOld": "820f864a26d90e9f4a3584577df581dcac20f9b6",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 29.69,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public byte[] evaluateResponse(byte[] response) throws SaslException {\n     if (completed) {\n       throw new IllegalStateException(\"PLAIN authentication has completed\");\n     }\n     if (response \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Received null response\");\n     }\n     try {\n       String payload;\n       try {\n         payload \u003d new String(response, \"UTF-8\");\n       } catch (Exception e) {\n         throw new IllegalArgumentException(\"Received corrupt response\", e);\n       }\n       // [ authz, authn, password ]\n       String[] parts \u003d payload.split(\"\\u0000\", 3);\n       if (parts.length !\u003d 3) {\n         throw new IllegalArgumentException(\"Received corrupt response\");\n       }\n       if (parts[0].isEmpty()) { // authz \u003d authn\n         parts[0] \u003d parts[1];\n       }\n       \n       NameCallback nc \u003d new NameCallback(\"SASL PLAIN\");\n       nc.setName(parts[1]);\n       PasswordCallback pc \u003d new PasswordCallback(\"SASL PLAIN\", false);\n       pc.setPassword(parts[2].toCharArray());\n       AuthorizeCallback ac \u003d new AuthorizeCallback(parts[1], parts[0]);\n       cbh.handle(new Callback[]{nc, pc, ac});      \n       if (ac.isAuthorized()) {\n         authz \u003d ac.getAuthorizedID();\n       }\n     } catch (Exception e) {\n-      throw new SaslException(\"PLAIN auth failed: \" + e.getMessage(), e);\n+      throw new SaslException(\"PLAIN auth failed: \" + e.toString(), e);\n     } finally {\n       completed \u003d true;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] evaluateResponse(byte[] response) throws SaslException {\n    if (completed) {\n      throw new IllegalStateException(\"PLAIN authentication has completed\");\n    }\n    if (response \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Received null response\");\n    }\n    try {\n      String payload;\n      try {\n        payload \u003d new String(response, \"UTF-8\");\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Received corrupt response\", e);\n      }\n      // [ authz, authn, password ]\n      String[] parts \u003d payload.split(\"\\u0000\", 3);\n      if (parts.length !\u003d 3) {\n        throw new IllegalArgumentException(\"Received corrupt response\");\n      }\n      if (parts[0].isEmpty()) { // authz \u003d authn\n        parts[0] \u003d parts[1];\n      }\n      \n      NameCallback nc \u003d new NameCallback(\"SASL PLAIN\");\n      nc.setName(parts[1]);\n      PasswordCallback pc \u003d new PasswordCallback(\"SASL PLAIN\", false);\n      pc.setPassword(parts[2].toCharArray());\n      AuthorizeCallback ac \u003d new AuthorizeCallback(parts[1], parts[0]);\n      cbh.handle(new Callback[]{nc, pc, ac});      \n      if (ac.isAuthorized()) {\n        authz \u003d ac.getAuthorizedID();\n      }\n    } catch (Exception e) {\n      throw new SaslException(\"PLAIN auth failed: \" + e.toString(), e);\n    } finally {\n      completed \u003d true;\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslPlainServer.java",
      "extendedDetails": {}
    },
    "820f864a26d90e9f4a3584577df581dcac20f9b6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12318. Expose underlying LDAP exceptions in SaslPlainServer. Contributed by Mike Yoder.\n",
      "commitDate": "12/08/15 3:24 PM",
      "commitName": "820f864a26d90e9f4a3584577df581dcac20f9b6",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "09/11/12 12:40 PM",
      "commitNameOld": "de1f33dc35599d3169475d82f3052f1b04025add",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1006.07,
      "commitsBetweenForRepo": 7127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public byte[] evaluateResponse(byte[] response) throws SaslException {\n     if (completed) {\n       throw new IllegalStateException(\"PLAIN authentication has completed\");\n     }\n     if (response \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Received null response\");\n     }\n     try {\n       String payload;\n       try {\n         payload \u003d new String(response, \"UTF-8\");\n       } catch (Exception e) {\n         throw new IllegalArgumentException(\"Received corrupt response\", e);\n       }\n       // [ authz, authn, password ]\n       String[] parts \u003d payload.split(\"\\u0000\", 3);\n       if (parts.length !\u003d 3) {\n         throw new IllegalArgumentException(\"Received corrupt response\");\n       }\n       if (parts[0].isEmpty()) { // authz \u003d authn\n         parts[0] \u003d parts[1];\n       }\n       \n       NameCallback nc \u003d new NameCallback(\"SASL PLAIN\");\n       nc.setName(parts[1]);\n       PasswordCallback pc \u003d new PasswordCallback(\"SASL PLAIN\", false);\n       pc.setPassword(parts[2].toCharArray());\n       AuthorizeCallback ac \u003d new AuthorizeCallback(parts[1], parts[0]);\n       cbh.handle(new Callback[]{nc, pc, ac});      \n       if (ac.isAuthorized()) {\n         authz \u003d ac.getAuthorizedID();\n       }\n     } catch (Exception e) {\n-      throw new SaslException(\"PLAIN auth failed: \" + e.getMessage());\n+      throw new SaslException(\"PLAIN auth failed: \" + e.getMessage(), e);\n     } finally {\n       completed \u003d true;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] evaluateResponse(byte[] response) throws SaslException {\n    if (completed) {\n      throw new IllegalStateException(\"PLAIN authentication has completed\");\n    }\n    if (response \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Received null response\");\n    }\n    try {\n      String payload;\n      try {\n        payload \u003d new String(response, \"UTF-8\");\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Received corrupt response\", e);\n      }\n      // [ authz, authn, password ]\n      String[] parts \u003d payload.split(\"\\u0000\", 3);\n      if (parts.length !\u003d 3) {\n        throw new IllegalArgumentException(\"Received corrupt response\");\n      }\n      if (parts[0].isEmpty()) { // authz \u003d authn\n        parts[0] \u003d parts[1];\n      }\n      \n      NameCallback nc \u003d new NameCallback(\"SASL PLAIN\");\n      nc.setName(parts[1]);\n      PasswordCallback pc \u003d new PasswordCallback(\"SASL PLAIN\", false);\n      pc.setPassword(parts[2].toCharArray());\n      AuthorizeCallback ac \u003d new AuthorizeCallback(parts[1], parts[0]);\n      cbh.handle(new Callback[]{nc, pc, ac});      \n      if (ac.isAuthorized()) {\n        authz \u003d ac.getAuthorizedID();\n      }\n    } catch (Exception e) {\n      throw new SaslException(\"PLAIN auth failed: \" + e.getMessage(), e);\n    } finally {\n      completed \u003d true;\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslPlainServer.java",
      "extendedDetails": {}
    },
    "de1f33dc35599d3169475d82f3052f1b04025add": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9020. Add a SASL PLAIN server (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/12 12:40 PM",
      "commitName": "de1f33dc35599d3169475d82f3052f1b04025add",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,39 @@\n+  public byte[] evaluateResponse(byte[] response) throws SaslException {\n+    if (completed) {\n+      throw new IllegalStateException(\"PLAIN authentication has completed\");\n+    }\n+    if (response \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"Received null response\");\n+    }\n+    try {\n+      String payload;\n+      try {\n+        payload \u003d new String(response, \"UTF-8\");\n+      } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Received corrupt response\", e);\n+      }\n+      // [ authz, authn, password ]\n+      String[] parts \u003d payload.split(\"\\u0000\", 3);\n+      if (parts.length !\u003d 3) {\n+        throw new IllegalArgumentException(\"Received corrupt response\");\n+      }\n+      if (parts[0].isEmpty()) { // authz \u003d authn\n+        parts[0] \u003d parts[1];\n+      }\n+      \n+      NameCallback nc \u003d new NameCallback(\"SASL PLAIN\");\n+      nc.setName(parts[1]);\n+      PasswordCallback pc \u003d new PasswordCallback(\"SASL PLAIN\", false);\n+      pc.setPassword(parts[2].toCharArray());\n+      AuthorizeCallback ac \u003d new AuthorizeCallback(parts[1], parts[0]);\n+      cbh.handle(new Callback[]{nc, pc, ac});      \n+      if (ac.isAuthorized()) {\n+        authz \u003d ac.getAuthorizedID();\n+      }\n+    } catch (Exception e) {\n+      throw new SaslException(\"PLAIN auth failed: \" + e.getMessage());\n+    } finally {\n+      completed \u003d true;\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] evaluateResponse(byte[] response) throws SaslException {\n    if (completed) {\n      throw new IllegalStateException(\"PLAIN authentication has completed\");\n    }\n    if (response \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Received null response\");\n    }\n    try {\n      String payload;\n      try {\n        payload \u003d new String(response, \"UTF-8\");\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Received corrupt response\", e);\n      }\n      // [ authz, authn, password ]\n      String[] parts \u003d payload.split(\"\\u0000\", 3);\n      if (parts.length !\u003d 3) {\n        throw new IllegalArgumentException(\"Received corrupt response\");\n      }\n      if (parts[0].isEmpty()) { // authz \u003d authn\n        parts[0] \u003d parts[1];\n      }\n      \n      NameCallback nc \u003d new NameCallback(\"SASL PLAIN\");\n      nc.setName(parts[1]);\n      PasswordCallback pc \u003d new PasswordCallback(\"SASL PLAIN\", false);\n      pc.setPassword(parts[2].toCharArray());\n      AuthorizeCallback ac \u003d new AuthorizeCallback(parts[1], parts[0]);\n      cbh.handle(new Callback[]{nc, pc, ac});      \n      if (ac.isAuthorized()) {\n        authz \u003d ac.getAuthorizedID();\n      }\n    } catch (Exception e) {\n      throw new SaslException(\"PLAIN auth failed: \" + e.getMessage());\n    } finally {\n      completed \u003d true;\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslPlainServer.java"
    }
  }
}