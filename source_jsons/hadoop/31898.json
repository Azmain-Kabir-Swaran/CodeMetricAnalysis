{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowScanner.java",
  "functionName": "collectCells",
  "functionId": "collectCells___currentColumnCells-SortedSet__Cell____currentAggOp-AggregationOperation__cell-Cell__alreadySeenAggDim-Set__String____converter-ValueConverter__scannerContext-ScannerContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
  "functionStartLine": 262,
  "functionEndLine": 334,
  "numCommitsSeen": 34,
  "timeTaken": 7716,
  "changeHistory": [
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
    "10663b78c8596693322dc3636f173035195bf607",
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "55f5886ea24671ff3db87a64aaba2e76b3355455",
    "1a227744ac0ceff178171fc4ddbf3d27275bdc4f",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "9bdd455dced15c84430ea0a0a59410df924f02a7",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60"
  ],
  "changeHistoryShort": {
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b": "Ymultichange(Yfilerename,Ybodychange)",
    "10663b78c8596693322dc3636f173035195bf607": "Ymultichange(Yfilerename,Ybodychange)",
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c": "Ymultichange(Yfilerename,Ybodychange)",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "55f5886ea24671ff3db87a64aaba2e76b3355455": "Ybodychange",
    "1a227744ac0ceff178171fc4ddbf3d27275bdc4f": "Ymultichange(Yparameterchange,Ybodychange)",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ybodychange",
    "9bdd455dced15c84430ea0a0a59410df924f02a7": "Ybodychange",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": "Ybodychange",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": "Ymultichange(Yparameterchange,Ybodychange)",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7346. Add a profile to allow optional compilation for ATSv2 with HBase-2.0. Contributed by Haibo Chen and Rohith.\n",
      "commitDate": "05/03/18 10:25 PM",
      "commitName": "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7346. Add a profile to allow optional compilation for ATSv2 with HBase-2.0. Contributed by Haibo Chen and Rohith.\n",
          "commitDate": "05/03/18 10:25 PM",
          "commitName": "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "05/03/18 6:15 PM",
          "commitNameOld": "745190ecdca8f7dfc5eebffdd1c1aa4f86229120",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,73 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n-      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n-          cell.getTagsLength());\n+      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n       String aggDim \u003d HBaseTimelineServerUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n      String aggDim \u003d HBaseTimelineServerUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7346. Add a profile to allow optional compilation for ATSv2 with HBase-2.0. Contributed by Haibo Chen and Rohith.\n",
          "commitDate": "05/03/18 10:25 PM",
          "commitName": "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "05/03/18 6:15 PM",
          "commitNameOld": "745190ecdca8f7dfc5eebffdd1c1aa4f86229120",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,73 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n-      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n-          cell.getTagsLength());\n+      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n       String aggDim \u003d HBaseTimelineServerUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n      String aggDim \u003d HBaseTimelineServerUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "10663b78c8596693322dc3636f173035195bf607": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Revert \"yarn-7346.07.patch\"\n\nThis reverts commit 5e37ca5bb49f945e27f49a413d08baab562dfa9c.\n",
      "commitDate": "28/02/18 9:11 PM",
      "commitName": "10663b78c8596693322dc3636f173035195bf607",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert \"yarn-7346.07.patch\"\n\nThis reverts commit 5e37ca5bb49f945e27f49a413d08baab562dfa9c.\n",
          "commitDate": "28/02/18 9:11 PM",
          "commitName": "10663b78c8596693322dc3636f173035195bf607",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "28/02/18 9:10 PM",
          "commitNameOld": "d1274c3b71549cb000868500c293cafd880b3713",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n-      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n+      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n+          cell.getTagsLength());\n       String aggDim \u003d HBaseTimelineServerUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d HBaseTimelineServerUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"yarn-7346.07.patch\"\n\nThis reverts commit 5e37ca5bb49f945e27f49a413d08baab562dfa9c.\n",
          "commitDate": "28/02/18 9:11 PM",
          "commitName": "10663b78c8596693322dc3636f173035195bf607",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "28/02/18 9:10 PM",
          "commitNameOld": "d1274c3b71549cb000868500c293cafd880b3713",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n-      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n+      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n+          cell.getTagsLength());\n       String aggDim \u003d HBaseTimelineServerUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d HBaseTimelineServerUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "yarn-7346.07.patch\n",
      "commitDate": "28/02/18 9:04 PM",
      "commitName": "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "yarn-7346.07.patch\n",
          "commitDate": "28/02/18 9:04 PM",
          "commitName": "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "28/02/18 6:18 PM",
          "commitNameOld": "6e6945cd78d76c6beaec85c963f27e28bf96c0f2",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,73 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n-      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n-          cell.getTagsLength());\n+      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n       String aggDim \u003d HBaseTimelineServerUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n      String aggDim \u003d HBaseTimelineServerUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "yarn-7346.07.patch\n",
          "commitDate": "28/02/18 9:04 PM",
          "commitName": "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "28/02/18 6:18 PM",
          "commitNameOld": "6e6945cd78d76c6beaec85c963f27e28bf96c0f2",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,73 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n-      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n-          cell.getTagsLength());\n+      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n       String aggDim \u003d HBaseTimelineServerUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d HBaseTimelineServerUtils.convertCellAsTagList(cell);\n      String aggDim \u003d HBaseTimelineServerUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n-      String aggDim \u003d HBaseTimelineStorageUtils\n+      String aggDim \u003d HBaseTimelineServerUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d HBaseTimelineServerUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n-      String aggDim \u003d HBaseTimelineStorageUtils\n+      String aggDim \u003d HBaseTimelineServerUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d HBaseTimelineServerUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d HBaseTimelineStorageUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
      }
    },
    "55f5886ea24671ff3db87a64aaba2e76b3355455": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5925. Extract hbase-backend-exclusive utility methods from TimelineStorageUtil. Contributed by Haibo Chen.\n",
      "commitDate": "09/12/16 4:17 PM",
      "commitName": "55f5886ea24671ff3db87a64aaba2e76b3355455",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "1a227744ac0ceff178171fc4ddbf3d27275bdc4f",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 152.36,
      "commitsBetweenForRepo": 1107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n       ScannerContext scannerContext) throws IOException {\n \n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n-      String aggDim \u003d TimelineStorageUtils\n+      String aggDim \u003d HBaseTimelineStorageUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d HBaseTimelineStorageUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {}
    },
    "1a227744ac0ceff178171fc4ddbf3d27275bdc4f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5070. upgrade HBase version for first merge (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "1a227744ac0ceff178171fc4ddbf3d27275bdc4f",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5070. upgrade HBase version for first merge (Vrushali C via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "1a227744ac0ceff178171fc4ddbf3d27275bdc4f",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n-      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n-      throws IOException {\n+      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n+      ScannerContext scannerContext) throws IOException {\n+\n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n-      nextCell(limit);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n-            converter);\n+            (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n-            converter);\n+            (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n       String aggDim \u003d TimelineStorageUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d TimelineStorageUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {
            "oldValue": "[currentColumnCells-SortedSet\u003cCell\u003e, currentAggOp-AggregationOperation, cell-Cell, alreadySeenAggDim-Set\u003cString\u003e, converter-NumericValueConverter]",
            "newValue": "[currentColumnCells-SortedSet\u003cCell\u003e, currentAggOp-AggregationOperation, cell-Cell, alreadySeenAggDim-Set\u003cString\u003e, converter-ValueConverter, scannerContext-ScannerContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5070. upgrade HBase version for first merge (Vrushali C via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "1a227744ac0ceff178171fc4ddbf3d27275bdc4f",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n-      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n-      throws IOException {\n+      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n+      ScannerContext scannerContext) throws IOException {\n+\n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n-      nextCell(limit);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n-            converter);\n+            (NumericValueConverter) converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n-            converter);\n+            (NumericValueConverter) converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n             + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n       String aggDim \u003d TimelineStorageUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, ValueConverter converter,\n      ScannerContext scannerContext) throws IOException {\n\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            (NumericValueConverter) converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d TimelineStorageUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "69dc561b61bf694cfdf0d2059f4f3dcee30e0632",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n       throws IOException {\n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       nextCell(limit);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"In collect cells \"\n             + \" FlowSannerOperation\u003d\"\n             + this.action\n             + \" currentAggOp\u003d\"\n             + currentAggOp\n             + \" cell qualifier\u003d\"\n             + Bytes.toString(CellUtil.cloneQualifier(cell))\n             + \" cell value\u003d \"\n-            + (Number) converter.decodeValue(CellUtil.cloneValue(cell))\n+            + converter.decodeValue(CellUtil.cloneValue(cell))\n             + \" timestamp\u003d\" + cell.getTimestamp());\n       }\n \n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n       String aggDim \u003d TimelineStorageUtils\n           .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n         // but when this agg dim is not seen,\n         // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n      throws IOException {\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      nextCell(limit);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d TimelineStorageUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {}
    },
    "9bdd455dced15c84430ea0a0a59410df924f02a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4062. Add the flush and compaction functionality via coprocessors and scanners for flow run table (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9bdd455dced15c84430ea0a0a59410df924f02a7",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,74 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n       throws IOException {\n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       nextCell(limit);\n       return;\n     }\n \n     switch (currentAggOp) {\n-    case MIN:\n+    case GLOBAL_MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n-    case MAX:\n+    case GLOBAL_MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"In collect cells \"\n+            + \" FlowSannerOperation\u003d\"\n+            + this.action\n+            + \" currentAggOp\u003d\"\n+            + currentAggOp\n+            + \" cell qualifier\u003d\"\n+            + Bytes.toString(CellUtil.cloneQualifier(cell))\n+            + \" cell value\u003d \"\n+            + (Number) converter.decodeValue(CellUtil.cloneValue(cell))\n+            + \" timestamp\u003d\" + cell.getTimestamp());\n+      }\n+\n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n-      String aggDim \u003d getAggregationCompactionDimension(tags);\n-\n-      // If this agg dimension has already been seen, since they show up in\n-      // sorted order, we drop the rest which are older. In other words, this\n-      // cell is older than previously seen cells for that agg dim.\n+      String aggDim \u003d TimelineStorageUtils\n+          .getAggregationCompactionDimension(tags);\n       if (!alreadySeenAggDim.contains(aggDim)) {\n-        // Not seen this agg dim, hence consider this cell in our working set\n+        // if this agg dimension has already been seen,\n+        // since they show up in sorted order\n+        // we drop the rest which are older\n+        // in other words, this cell is older than previously seen cells\n+        // for that agg dim\n+        // but when this agg dim is not seen,\n+        // consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n      throws IOException {\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      nextCell(limit);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case GLOBAL_MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case GLOBAL_MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"In collect cells \"\n            + \" FlowSannerOperation\u003d\"\n            + this.action\n            + \" currentAggOp\u003d\"\n            + currentAggOp\n            + \" cell qualifier\u003d\"\n            + Bytes.toString(CellUtil.cloneQualifier(cell))\n            + \" cell value\u003d \"\n            + (Number) converter.decodeValue(CellUtil.cloneValue(cell))\n            + \" timestamp\u003d\" + cell.getTimestamp());\n      }\n\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d TimelineStorageUtils\n          .getAggregationCompactionDimension(tags);\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n        // but when this agg dim is not seen,\n        // consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {}
    },
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4409. Fix javadoc and checkstyle issues in timelineservice code (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,58 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n       Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n       throws IOException {\n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       nextCell(limit);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n         Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n             converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n         Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n             converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n       String aggDim \u003d getAggregationCompactionDimension(tags);\n-      if (alreadySeenAggDim.contains(aggDim)) {\n-        // if this agg dimension has already been seen,\n-        // since they show up in sorted order\n-        // we drop the rest which are older\n-        // in other words, this cell is older than previously seen cells\n-        // for that agg dim\n-      } else {\n-        // not seen this agg dim, hence consider this cell in our working set\n+\n+      // If this agg dimension has already been seen, since they show up in\n+      // sorted order, we drop the rest which are older. In other words, this\n+      // cell is older than previously seen cells for that agg dim.\n+      if (!alreadySeenAggDim.contains(aggDim)) {\n+        // Not seen this agg dim, hence consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n      throws IOException {\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      nextCell(limit);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d getAggregationCompactionDimension(tags);\n\n      // If this agg dimension has already been seen, since they show up in\n      // sorted order, we drop the rest which are older. In other words, this\n      // cell is older than previously seen cells for that agg dim.\n      if (!alreadySeenAggDim.contains(aggDim)) {\n        // Not seen this agg dim, hence consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {}
    },
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "b51d0fef56a59b15489f5b932025718b4e9613d2",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,60 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n-      Set\u003cString\u003e alreadySeenAggDim) throws IOException {\n+      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n+      throws IOException {\n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       nextCell(limit);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n-        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp);\n+        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n+            converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n-        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp);\n+        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n+            converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n       String aggDim \u003d getAggregationCompactionDimension(tags);\n       if (alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n       } else {\n         // not seen this agg dim, hence consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n      throws IOException {\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      nextCell(limit);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d getAggregationCompactionDimension(tags);\n      if (alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n      } else {\n        // not seen this agg dim, hence consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {
            "oldValue": "[currentColumnCells-SortedSet\u003cCell\u003e, currentAggOp-AggregationOperation, cell-Cell, alreadySeenAggDim-Set\u003cString\u003e]",
            "newValue": "[currentColumnCells-SortedSet\u003cCell\u003e, currentAggOp-AggregationOperation, cell-Cell, alreadySeenAggDim-Set\u003cString\u003e, converter-NumericValueConverter]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "b51d0fef56a59b15489f5b932025718b4e9613d2",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,60 @@\n   private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n       AggregationOperation currentAggOp, Cell cell,\n-      Set\u003cString\u003e alreadySeenAggDim) throws IOException {\n+      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n+      throws IOException {\n     if (currentAggOp \u003d\u003d null) {\n       // not a min/max/metric cell, so just return it as is\n       currentColumnCells.add(cell);\n       nextCell(limit);\n       return;\n     }\n \n     switch (currentAggOp) {\n     case MIN:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMinCell \u003d currentColumnCells.first();\n-        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp);\n+        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n+            converter);\n         if (!currentMinCell.equals(newMinCell)) {\n           currentColumnCells.remove(currentMinCell);\n           currentColumnCells.add(newMinCell);\n         }\n       }\n       break;\n     case MAX:\n       if (currentColumnCells.size() \u003d\u003d 0) {\n         currentColumnCells.add(cell);\n       } else {\n         Cell currentMaxCell \u003d currentColumnCells.first();\n-        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp);\n+        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n+            converter);\n         if (!currentMaxCell.equals(newMaxCell)) {\n           currentColumnCells.remove(currentMaxCell);\n           currentColumnCells.add(newMaxCell);\n         }\n       }\n       break;\n     case SUM:\n     case SUM_FINAL:\n       // only if this app has not been seen yet, add to current column cells\n       List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n           cell.getTagsLength());\n       String aggDim \u003d getAggregationCompactionDimension(tags);\n       if (alreadySeenAggDim.contains(aggDim)) {\n         // if this agg dimension has already been seen,\n         // since they show up in sorted order\n         // we drop the rest which are older\n         // in other words, this cell is older than previously seen cells\n         // for that agg dim\n       } else {\n         // not seen this agg dim, hence consider this cell in our working set\n         currentColumnCells.add(cell);\n         alreadySeenAggDim.add(aggDim);\n       }\n       break;\n     default:\n       break;\n     } // end of switch case\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim, NumericValueConverter converter)\n      throws IOException {\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      nextCell(limit);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp,\n            converter);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp,\n            converter);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d getAggregationCompactionDimension(tags);\n      if (alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n      } else {\n        // not seen this agg dim, hence consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3901. Populate flow run data in the flow_run \u0026 flow activity tables (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,57 @@\n+  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n+      AggregationOperation currentAggOp, Cell cell,\n+      Set\u003cString\u003e alreadySeenAggDim) throws IOException {\n+    if (currentAggOp \u003d\u003d null) {\n+      // not a min/max/metric cell, so just return it as is\n+      currentColumnCells.add(cell);\n+      nextCell(limit);\n+      return;\n+    }\n+\n+    switch (currentAggOp) {\n+    case MIN:\n+      if (currentColumnCells.size() \u003d\u003d 0) {\n+        currentColumnCells.add(cell);\n+      } else {\n+        Cell currentMinCell \u003d currentColumnCells.first();\n+        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp);\n+        if (!currentMinCell.equals(newMinCell)) {\n+          currentColumnCells.remove(currentMinCell);\n+          currentColumnCells.add(newMinCell);\n+        }\n+      }\n+      break;\n+    case MAX:\n+      if (currentColumnCells.size() \u003d\u003d 0) {\n+        currentColumnCells.add(cell);\n+      } else {\n+        Cell currentMaxCell \u003d currentColumnCells.first();\n+        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp);\n+        if (!currentMaxCell.equals(newMaxCell)) {\n+          currentColumnCells.remove(currentMaxCell);\n+          currentColumnCells.add(newMaxCell);\n+        }\n+      }\n+      break;\n+    case SUM:\n+    case SUM_FINAL:\n+      // only if this app has not been seen yet, add to current column cells\n+      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n+          cell.getTagsLength());\n+      String aggDim \u003d getAggregationCompactionDimension(tags);\n+      if (alreadySeenAggDim.contains(aggDim)) {\n+        // if this agg dimension has already been seen,\n+        // since they show up in sorted order\n+        // we drop the rest which are older\n+        // in other words, this cell is older than previously seen cells\n+        // for that agg dim\n+      } else {\n+        // not seen this agg dim, hence consider this cell in our working set\n+        currentColumnCells.add(cell);\n+        alreadySeenAggDim.add(aggDim);\n+      }\n+      break;\n+    default:\n+      break;\n+    } // end of switch case\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void collectCells(SortedSet\u003cCell\u003e currentColumnCells,\n      AggregationOperation currentAggOp, Cell cell,\n      Set\u003cString\u003e alreadySeenAggDim) throws IOException {\n    if (currentAggOp \u003d\u003d null) {\n      // not a min/max/metric cell, so just return it as is\n      currentColumnCells.add(cell);\n      nextCell(limit);\n      return;\n    }\n\n    switch (currentAggOp) {\n    case MIN:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMinCell \u003d currentColumnCells.first();\n        Cell newMinCell \u003d compareCellValues(currentMinCell, cell, currentAggOp);\n        if (!currentMinCell.equals(newMinCell)) {\n          currentColumnCells.remove(currentMinCell);\n          currentColumnCells.add(newMinCell);\n        }\n      }\n      break;\n    case MAX:\n      if (currentColumnCells.size() \u003d\u003d 0) {\n        currentColumnCells.add(cell);\n      } else {\n        Cell currentMaxCell \u003d currentColumnCells.first();\n        Cell newMaxCell \u003d compareCellValues(currentMaxCell, cell, currentAggOp);\n        if (!currentMaxCell.equals(newMaxCell)) {\n          currentColumnCells.remove(currentMaxCell);\n          currentColumnCells.add(newMaxCell);\n        }\n      }\n      break;\n    case SUM:\n    case SUM_FINAL:\n      // only if this app has not been seen yet, add to current column cells\n      List\u003cTag\u003e tags \u003d Tag.asList(cell.getTagsArray(), cell.getTagsOffset(),\n          cell.getTagsLength());\n      String aggDim \u003d getAggregationCompactionDimension(tags);\n      if (alreadySeenAggDim.contains(aggDim)) {\n        // if this agg dimension has already been seen,\n        // since they show up in sorted order\n        // we drop the rest which are older\n        // in other words, this cell is older than previously seen cells\n        // for that agg dim\n      } else {\n        // not seen this agg dim, hence consider this cell in our working set\n        currentColumnCells.add(cell);\n        alreadySeenAggDim.add(aggDim);\n      }\n      break;\n    default:\n      break;\n    } // end of switch case\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
    }
  }
}