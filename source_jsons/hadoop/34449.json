{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceLocalizationService.java",
  "functionName": "cleanUpFilesPerUserDir",
  "functionId": "cleanUpFilesPerUserDir___lfs-FileContext__del-DeletionService__userDirPath-Path",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
  "functionStartLine": 1604,
  "functionEndLine": 1627,
  "numCommitsSeen": 108,
  "timeTaken": 3553,
  "changeHistory": [
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
    "73e626ad91cd5c06a005068d8432fd16e06fe6a0",
    "af0d2fc3e343e5db82c2398d31de85c47b239e35",
    "6a482a88b8f56a4c5590e71ce6713d7f63830e92"
  ],
  "changeHistoryShort": {
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": "Ybodychange",
    "73e626ad91cd5c06a005068d8432fd16e06fe6a0": "Ybodychange",
    "af0d2fc3e343e5db82c2398d31de85c47b239e35": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "6a482a88b8f56a4c5590e71ce6713d7f63830e92": "Yintroduced"
  },
  "changeHistoryDetails": {
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
      "commitDate": "31/05/17 3:45 AM",
      "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "26/05/17 7:37 AM",
      "commitNameOld": "aea42930bbb9566ea6988f684dbd72a72a2bdadf",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 4.84,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n       Path userDirPath) throws IOException {\n     RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n-    FileDeletionTask dependentDeletionTask \u003d\n-        del.createFileDeletionTask(null, userDirPath, new Path[] {});\n+    FileDeletionTask dependentDeletionTask \u003d new FileDeletionTask(del, null,\n+        userDirPath, new ArrayList\u003cPath\u003e());\n     if (userDirStatus !\u003d null \u0026\u0026 userDirStatus.hasNext()) {\n       List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n       while (userDirStatus.hasNext()) {\n         FileStatus status \u003d userDirStatus.next();\n         String owner \u003d status.getOwner();\n-        FileDeletionTask deletionTask \u003d\n-            del.createFileDeletionTask(owner, null,\n-              new Path[] { status.getPath() });\n-        deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n+        List\u003cPath\u003e pathList \u003d new ArrayList\u003c\u003e();\n+        pathList.add(status.getPath());\n+        FileDeletionTask deletionTask \u003d new FileDeletionTask(del, owner, null,\n+            pathList);\n+        deletionTask.addDeletionTaskDependency(dependentDeletionTask);\n         deletionTasks.add(deletionTask);\n       }\n       for (FileDeletionTask task : deletionTasks) {\n-        del.scheduleFileDeletionTask(task);\n+        del.delete(task);\n       }\n     } else {\n-      del.scheduleFileDeletionTask(dependentDeletionTask);\n+      del.delete(dependentDeletionTask);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n      Path userDirPath) throws IOException {\n    RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n    FileDeletionTask dependentDeletionTask \u003d new FileDeletionTask(del, null,\n        userDirPath, new ArrayList\u003cPath\u003e());\n    if (userDirStatus !\u003d null \u0026\u0026 userDirStatus.hasNext()) {\n      List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n      while (userDirStatus.hasNext()) {\n        FileStatus status \u003d userDirStatus.next();\n        String owner \u003d status.getOwner();\n        List\u003cPath\u003e pathList \u003d new ArrayList\u003c\u003e();\n        pathList.add(status.getPath());\n        FileDeletionTask deletionTask \u003d new FileDeletionTask(del, owner, null,\n            pathList);\n        deletionTask.addDeletionTaskDependency(dependentDeletionTask);\n        deletionTasks.add(deletionTask);\n      }\n      for (FileDeletionTask task : deletionTasks) {\n        del.delete(task);\n      }\n    } else {\n      del.delete(dependentDeletionTask);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "73e626ad91cd5c06a005068d8432fd16e06fe6a0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2755. NM fails to clean up usercache_DEL_\u003ctimestamp\u003e dirs after YARN-661. Contributed by Siqi Li\n",
      "commitDate": "30/10/14 8:10 AM",
      "commitName": "73e626ad91cd5c06a005068d8432fd16e06fe6a0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "27/10/14 3:49 PM",
      "commitNameOld": "a16d022ca4313a41425c8e97841c841a2d6f2f54",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.68,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n       Path userDirPath) throws IOException {\n     RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n     FileDeletionTask dependentDeletionTask \u003d\n         del.createFileDeletionTask(null, userDirPath, new Path[] {});\n-    if (userDirStatus !\u003d null) {\n+    if (userDirStatus !\u003d null \u0026\u0026 userDirStatus.hasNext()) {\n       List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n       while (userDirStatus.hasNext()) {\n         FileStatus status \u003d userDirStatus.next();\n         String owner \u003d status.getOwner();\n         FileDeletionTask deletionTask \u003d\n             del.createFileDeletionTask(owner, null,\n               new Path[] { status.getPath() });\n         deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n         deletionTasks.add(deletionTask);\n       }\n       for (FileDeletionTask task : deletionTasks) {\n         del.scheduleFileDeletionTask(task);\n       }\n     } else {\n       del.scheduleFileDeletionTask(dependentDeletionTask);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n      Path userDirPath) throws IOException {\n    RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n    FileDeletionTask dependentDeletionTask \u003d\n        del.createFileDeletionTask(null, userDirPath, new Path[] {});\n    if (userDirStatus !\u003d null \u0026\u0026 userDirStatus.hasNext()) {\n      List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n      while (userDirStatus.hasNext()) {\n        FileStatus status \u003d userDirStatus.next();\n        String owner \u003d status.getOwner();\n        FileDeletionTask deletionTask \u003d\n            del.createFileDeletionTask(owner, null,\n              new Path[] { status.getPath() });\n        deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n        deletionTasks.add(deletionTask);\n      }\n      for (FileDeletionTask task : deletionTasks) {\n        del.scheduleFileDeletionTask(task);\n      }\n    } else {\n      del.scheduleFileDeletionTask(dependentDeletionTask);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "af0d2fc3e343e5db82c2398d31de85c47b239e35": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-661. Fixed NM to cleanup users\u0027 local directories correctly when starting up. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503942 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 4:31 PM",
      "commitName": "af0d2fc3e343e5db82c2398d31de85c47b239e35",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-661. Fixed NM to cleanup users\u0027 local directories correctly when starting up. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503942 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 4:31 PM",
          "commitName": "af0d2fc3e343e5db82c2398d31de85c47b239e35",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "19/06/13 8:41 PM",
          "commitNameOld": "3f809667bc397ea372efe4b8f1aae7e2729b8ca0",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 26.83,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,23 @@\n-  private void cleanUpFilesFromSubDir(FileContext lfs, DeletionService del,\n-      Path dirPath) throws IOException {\n-    RemoteIterator\u003cFileStatus\u003e fileStatus \u003d lfs.listStatus(dirPath);\n-    if (fileStatus !\u003d null) {\n-      while (fileStatus.hasNext()) {\n-        FileStatus status \u003d fileStatus.next();\n+  private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n+      Path userDirPath) throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n+    FileDeletionTask dependentDeletionTask \u003d\n+        del.createFileDeletionTask(null, userDirPath, new Path[] {});\n+    if (userDirStatus !\u003d null) {\n+      List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n+      while (userDirStatus.hasNext()) {\n+        FileStatus status \u003d userDirStatus.next();\n         String owner \u003d status.getOwner();\n-        del.delete(owner, status.getPath(), new Path[] {});\n+        FileDeletionTask deletionTask \u003d\n+            del.createFileDeletionTask(owner, null,\n+              new Path[] { status.getPath() });\n+        deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n+        deletionTasks.add(deletionTask);\n       }\n+      for (FileDeletionTask task : deletionTasks) {\n+        del.scheduleFileDeletionTask(task);\n+      }\n+    } else {\n+      del.scheduleFileDeletionTask(dependentDeletionTask);\n     }\n-    del.delete(null, dirPath, new Path[] {});\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n      Path userDirPath) throws IOException {\n    RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n    FileDeletionTask dependentDeletionTask \u003d\n        del.createFileDeletionTask(null, userDirPath, new Path[] {});\n    if (userDirStatus !\u003d null) {\n      List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n      while (userDirStatus.hasNext()) {\n        FileStatus status \u003d userDirStatus.next();\n        String owner \u003d status.getOwner();\n        FileDeletionTask deletionTask \u003d\n            del.createFileDeletionTask(owner, null,\n              new Path[] { status.getPath() });\n        deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n        deletionTasks.add(deletionTask);\n      }\n      for (FileDeletionTask task : deletionTasks) {\n        del.scheduleFileDeletionTask(task);\n      }\n    } else {\n      del.scheduleFileDeletionTask(dependentDeletionTask);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {
            "oldValue": "cleanUpFilesFromSubDir",
            "newValue": "cleanUpFilesPerUserDir"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-661. Fixed NM to cleanup users\u0027 local directories correctly when starting up. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503942 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 4:31 PM",
          "commitName": "af0d2fc3e343e5db82c2398d31de85c47b239e35",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "19/06/13 8:41 PM",
          "commitNameOld": "3f809667bc397ea372efe4b8f1aae7e2729b8ca0",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 26.83,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,23 @@\n-  private void cleanUpFilesFromSubDir(FileContext lfs, DeletionService del,\n-      Path dirPath) throws IOException {\n-    RemoteIterator\u003cFileStatus\u003e fileStatus \u003d lfs.listStatus(dirPath);\n-    if (fileStatus !\u003d null) {\n-      while (fileStatus.hasNext()) {\n-        FileStatus status \u003d fileStatus.next();\n+  private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n+      Path userDirPath) throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n+    FileDeletionTask dependentDeletionTask \u003d\n+        del.createFileDeletionTask(null, userDirPath, new Path[] {});\n+    if (userDirStatus !\u003d null) {\n+      List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n+      while (userDirStatus.hasNext()) {\n+        FileStatus status \u003d userDirStatus.next();\n         String owner \u003d status.getOwner();\n-        del.delete(owner, status.getPath(), new Path[] {});\n+        FileDeletionTask deletionTask \u003d\n+            del.createFileDeletionTask(owner, null,\n+              new Path[] { status.getPath() });\n+        deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n+        deletionTasks.add(deletionTask);\n       }\n+      for (FileDeletionTask task : deletionTasks) {\n+        del.scheduleFileDeletionTask(task);\n+      }\n+    } else {\n+      del.scheduleFileDeletionTask(dependentDeletionTask);\n     }\n-    del.delete(null, dirPath, new Path[] {});\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n      Path userDirPath) throws IOException {\n    RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n    FileDeletionTask dependentDeletionTask \u003d\n        del.createFileDeletionTask(null, userDirPath, new Path[] {});\n    if (userDirStatus !\u003d null) {\n      List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n      while (userDirStatus.hasNext()) {\n        FileStatus status \u003d userDirStatus.next();\n        String owner \u003d status.getOwner();\n        FileDeletionTask deletionTask \u003d\n            del.createFileDeletionTask(owner, null,\n              new Path[] { status.getPath() });\n        deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n        deletionTasks.add(deletionTask);\n      }\n      for (FileDeletionTask task : deletionTasks) {\n        del.scheduleFileDeletionTask(task);\n      }\n    } else {\n      del.scheduleFileDeletionTask(dependentDeletionTask);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {
            "oldValue": "[lfs-FileContext, del-DeletionService, dirPath-Path]",
            "newValue": "[lfs-FileContext, del-DeletionService, userDirPath-Path]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-661. Fixed NM to cleanup users\u0027 local directories correctly when starting up. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503942 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 4:31 PM",
          "commitName": "af0d2fc3e343e5db82c2398d31de85c47b239e35",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "19/06/13 8:41 PM",
          "commitNameOld": "3f809667bc397ea372efe4b8f1aae7e2729b8ca0",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 26.83,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,23 @@\n-  private void cleanUpFilesFromSubDir(FileContext lfs, DeletionService del,\n-      Path dirPath) throws IOException {\n-    RemoteIterator\u003cFileStatus\u003e fileStatus \u003d lfs.listStatus(dirPath);\n-    if (fileStatus !\u003d null) {\n-      while (fileStatus.hasNext()) {\n-        FileStatus status \u003d fileStatus.next();\n+  private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n+      Path userDirPath) throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n+    FileDeletionTask dependentDeletionTask \u003d\n+        del.createFileDeletionTask(null, userDirPath, new Path[] {});\n+    if (userDirStatus !\u003d null) {\n+      List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n+      while (userDirStatus.hasNext()) {\n+        FileStatus status \u003d userDirStatus.next();\n         String owner \u003d status.getOwner();\n-        del.delete(owner, status.getPath(), new Path[] {});\n+        FileDeletionTask deletionTask \u003d\n+            del.createFileDeletionTask(owner, null,\n+              new Path[] { status.getPath() });\n+        deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n+        deletionTasks.add(deletionTask);\n       }\n+      for (FileDeletionTask task : deletionTasks) {\n+        del.scheduleFileDeletionTask(task);\n+      }\n+    } else {\n+      del.scheduleFileDeletionTask(dependentDeletionTask);\n     }\n-    del.delete(null, dirPath, new Path[] {});\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanUpFilesPerUserDir(FileContext lfs, DeletionService del,\n      Path userDirPath) throws IOException {\n    RemoteIterator\u003cFileStatus\u003e userDirStatus \u003d lfs.listStatus(userDirPath);\n    FileDeletionTask dependentDeletionTask \u003d\n        del.createFileDeletionTask(null, userDirPath, new Path[] {});\n    if (userDirStatus !\u003d null) {\n      List\u003cFileDeletionTask\u003e deletionTasks \u003d new ArrayList\u003cFileDeletionTask\u003e();\n      while (userDirStatus.hasNext()) {\n        FileStatus status \u003d userDirStatus.next();\n        String owner \u003d status.getOwner();\n        FileDeletionTask deletionTask \u003d\n            del.createFileDeletionTask(owner, null,\n              new Path[] { status.getPath() });\n        deletionTask.addFileDeletionTaskDependency(dependentDeletionTask);\n        deletionTasks.add(deletionTask);\n      }\n      for (FileDeletionTask task : deletionTasks) {\n        del.scheduleFileDeletionTask(task);\n      }\n    } else {\n      del.scheduleFileDeletionTask(dependentDeletionTask);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "6a482a88b8f56a4c5590e71ce6713d7f63830e92": {
      "type": "Yintroduced",
      "commitMessage": "YARN-71. Fix the NodeManager to clean up local-dirs on restart. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 11:23 AM",
      "commitName": "6a482a88b8f56a4c5590e71ce6713d7f63830e92",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,12 @@\n+  private void cleanUpFilesFromSubDir(FileContext lfs, DeletionService del,\n+      Path dirPath) throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e fileStatus \u003d lfs.listStatus(dirPath);\n+    if (fileStatus !\u003d null) {\n+      while (fileStatus.hasNext()) {\n+        FileStatus status \u003d fileStatus.next();\n+        String owner \u003d status.getOwner();\n+        del.delete(owner, status.getPath(), new Path[] {});\n+      }\n+    }\n+    del.delete(null, dirPath, new Path[] {});\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void cleanUpFilesFromSubDir(FileContext lfs, DeletionService del,\n      Path dirPath) throws IOException {\n    RemoteIterator\u003cFileStatus\u003e fileStatus \u003d lfs.listStatus(dirPath);\n    if (fileStatus !\u003d null) {\n      while (fileStatus.hasNext()) {\n        FileStatus status \u003d fileStatus.next();\n        String owner \u003d status.getOwner();\n        del.delete(owner, status.getPath(), new Path[] {});\n      }\n    }\n    del.delete(null, dirPath, new Path[] {});\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
    }
  }
}