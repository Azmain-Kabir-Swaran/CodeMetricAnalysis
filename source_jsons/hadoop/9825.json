{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JspHelper.java",
  "functionName": "getUGI",
  "functionId": "getUGI___context-ServletContext__request-HttpServletRequest__conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
  "functionStartLine": 92,
  "functionEndLine": 95,
  "numCommitsSeen": 65,
  "timeTaken": 5076,
  "changeHistory": [
    "78e3821b819b441d1faf4bc66c659cdeddc6006c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "78e3821b819b441d1faf4bc66c659cdeddc6006c": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "78e3821b819b441d1faf4bc66c659cdeddc6006c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/09/11 8:02 AM",
      "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/09/11 12:30 PM",
      "commitNameOld": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 11.81,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,4 @@\n   public static UserGroupInformation getUGI(ServletContext context,\n       HttpServletRequest request, Configuration conf) throws IOException {\n-    UserGroupInformation ugi \u003d null;\n-    if(UserGroupInformation.isSecurityEnabled()) {\n-      String user \u003d request.getRemoteUser();\n-      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n-      if (tokenString !\u003d null) {\n-        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n-          new Token\u003cDelegationTokenIdentifier\u003e();\n-        token.decodeFromUrlString(tokenString);\n-        String serviceAddress \u003d getNNServiceAddress(context, request);\n-        if (serviceAddress !\u003d null) {\n-          LOG.info(\"Setting service in token: \"\n-              + new Text(serviceAddress));\n-          token.setService(new Text(serviceAddress));\n-        }\n-        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n-            .getIdentifier());\n-        DataInputStream in \u003d new DataInputStream(buf);\n-        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n-        id.readFields(in);\n-        ugi \u003d id.getUser();\n-        ugi.addToken(token);\n-        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n-      } else {\n-        if(user \u003d\u003d null) {\n-          throw new IOException(\"Security enabled but user not \" +\n-                                \"authenticated by filter\");\n-        }\n-        ugi \u003d UserGroupInformation.createRemoteUser(user);\n-        // This is not necessarily true, could have been auth\u0027ed by user-facing\n-        // filter\n-        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n-      }\n-    } else { // Security\u0027s not on, pull from url\n-      String user \u003d request.getParameter(\"ugi\");\n-      \n-      if(user \u003d\u003d null) { // not specified in request\n-        ugi \u003d getDefaultWebUser(conf);\n-      } else {\n-        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n-      }\n-      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n-    }\n-    \n-    if(LOG.isDebugEnabled())\n-      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n-    return ugi;\n+    return getUGI(context, request, conf, AuthenticationMethod.KERBEROS_SSL, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf) throws IOException {\n    return getUGI(context, request, conf, AuthenticationMethod.KERBEROS_SSL, true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    if(UserGroupInformation.isSecurityEnabled()) {\n      String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n      }\n    } else { // Security\u0027s not on, pull from url\n      String user \u003d request.getParameter(\"ugi\");\n      \n      if(user \u003d\u003d null) { // not specified in request\n        ugi \u003d getDefaultWebUser(conf);\n      } else {\n        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n      }\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    if(UserGroupInformation.isSecurityEnabled()) {\n      String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n      }\n    } else { // Security\u0027s not on, pull from url\n      String user \u003d request.getParameter(\"ugi\");\n      \n      if(user \u003d\u003d null) { // not specified in request\n        ugi \u003d getDefaultWebUser(conf);\n      } else {\n        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n      }\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,49 @@\n+  public static UserGroupInformation getUGI(ServletContext context,\n+      HttpServletRequest request, Configuration conf) throws IOException {\n+    UserGroupInformation ugi \u003d null;\n+    if(UserGroupInformation.isSecurityEnabled()) {\n+      String user \u003d request.getRemoteUser();\n+      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n+      if (tokenString !\u003d null) {\n+        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n+          new Token\u003cDelegationTokenIdentifier\u003e();\n+        token.decodeFromUrlString(tokenString);\n+        String serviceAddress \u003d getNNServiceAddress(context, request);\n+        if (serviceAddress !\u003d null) {\n+          LOG.info(\"Setting service in token: \"\n+              + new Text(serviceAddress));\n+          token.setService(new Text(serviceAddress));\n+        }\n+        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n+            .getIdentifier());\n+        DataInputStream in \u003d new DataInputStream(buf);\n+        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n+        id.readFields(in);\n+        ugi \u003d id.getUser();\n+        ugi.addToken(token);\n+        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n+      } else {\n+        if(user \u003d\u003d null) {\n+          throw new IOException(\"Security enabled but user not \" +\n+                                \"authenticated by filter\");\n+        }\n+        ugi \u003d UserGroupInformation.createRemoteUser(user);\n+        // This is not necessarily true, could have been auth\u0027ed by user-facing\n+        // filter\n+        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n+      }\n+    } else { // Security\u0027s not on, pull from url\n+      String user \u003d request.getParameter(\"ugi\");\n+      \n+      if(user \u003d\u003d null) { // not specified in request\n+        ugi \u003d getDefaultWebUser(conf);\n+      } else {\n+        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n+      }\n+      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n+    }\n+    \n+    if(LOG.isDebugEnabled())\n+      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n+    return ugi;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGI(ServletContext context,\n      HttpServletRequest request, Configuration conf) throws IOException {\n    UserGroupInformation ugi \u003d null;\n    if(UserGroupInformation.isSecurityEnabled()) {\n      String user \u003d request.getRemoteUser();\n      String tokenString \u003d request.getParameter(DELEGATION_PARAMETER_NAME);\n      if (tokenString !\u003d null) {\n        Token\u003cDelegationTokenIdentifier\u003e token \u003d \n          new Token\u003cDelegationTokenIdentifier\u003e();\n        token.decodeFromUrlString(tokenString);\n        String serviceAddress \u003d getNNServiceAddress(context, request);\n        if (serviceAddress !\u003d null) {\n          LOG.info(\"Setting service in token: \"\n              + new Text(serviceAddress));\n          token.setService(new Text(serviceAddress));\n        }\n        ByteArrayInputStream buf \u003d new ByteArrayInputStream(token\n            .getIdentifier());\n        DataInputStream in \u003d new DataInputStream(buf);\n        DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n        id.readFields(in);\n        ugi \u003d id.getUser();\n        ugi.addToken(token);\n        ugi.setAuthenticationMethod(AuthenticationMethod.TOKEN);\n      } else {\n        if(user \u003d\u003d null) {\n          throw new IOException(\"Security enabled but user not \" +\n                                \"authenticated by filter\");\n        }\n        ugi \u003d UserGroupInformation.createRemoteUser(user);\n        // This is not necessarily true, could have been auth\u0027ed by user-facing\n        // filter\n        ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS_SSL);\n      }\n    } else { // Security\u0027s not on, pull from url\n      String user \u003d request.getParameter(\"ugi\");\n      \n      if(user \u003d\u003d null) { // not specified in request\n        ugi \u003d getDefaultWebUser(conf);\n      } else {\n        ugi \u003d UserGroupInformation.createRemoteUser(user.split(\",\")[0]);\n      }\n      ugi.setAuthenticationMethod(AuthenticationMethod.SIMPLE);\n    }\n    \n    if(LOG.isDebugEnabled())\n      LOG.debug(\"getUGI is returning: \" + ugi.getShortUserName());\n    return ugi;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/JspHelper.java"
    }
  }
}