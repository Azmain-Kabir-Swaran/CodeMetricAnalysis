{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpFSFileSystem.java",
  "functionName": "listStatusBatch",
  "functionId": "listStatusBatch___f-Path__token-byte[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
  "functionStartLine": 769,
  "functionEndLine": 795,
  "numCommitsSeen": 51,
  "timeTaken": 1399,
  "changeHistory": [
    "8a40953058d50d421d62b71067a13b626b3cba1f"
  ],
  "changeHistoryShort": {
    "8a40953058d50d421d62b71067a13b626b3cba1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a40953058d50d421d62b71067a13b626b3cba1f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10823. Implement HttpFSFileSystem#listStatusIterator.\n",
      "commitDate": "16/09/16 3:37 PM",
      "commitName": "8a40953058d50d421d62b71067a13b626b3cba1f",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,27 @@\n+  public DirectoryEntries listStatusBatch(Path f, byte[] token) throws\n+      FileNotFoundException, IOException {\n+    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n+    params.put(OP_PARAM, Operation.LISTSTATUS_BATCH.toString());\n+    if (token !\u003d null) {\n+      params.put(START_AFTER_PARAM, new String(token, Charsets.UTF_8));\n+    }\n+    HttpURLConnection conn \u003d getConnection(\n+        Operation.LISTSTATUS_BATCH.getMethod(),\n+        params, f, true);\n+    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n+    // Parse the FileStatus array\n+    JSONObject json \u003d (JSONObject) HttpFSUtils.jsonParse(conn);\n+    JSONObject listing \u003d (JSONObject) json.get(DIRECTORY_LISTING_JSON);\n+    FileStatus[] statuses \u003d toFileStatuses(\n+        (JSONObject) listing.get(PARTIAL_LISTING_JSON), f);\n+    // New token is the last FileStatus entry\n+    byte[] newToken \u003d null;\n+    if (statuses.length \u003e 0) {\n+      newToken \u003d statuses[statuses.length - 1].getPath().getName().toString()\n+          .getBytes(Charsets.UTF_8);\n+    }\n+    // Parse the remainingEntries boolean into hasMore\n+    final long remainingEntries \u003d (Long) listing.get(REMAINING_ENTRIES_JSON);\n+    final boolean hasMore \u003d remainingEntries \u003e 0 ? true : false;\n+    return new DirectoryEntries(statuses, newToken, hasMore);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DirectoryEntries listStatusBatch(Path f, byte[] token) throws\n      FileNotFoundException, IOException {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, Operation.LISTSTATUS_BATCH.toString());\n    if (token !\u003d null) {\n      params.put(START_AFTER_PARAM, new String(token, Charsets.UTF_8));\n    }\n    HttpURLConnection conn \u003d getConnection(\n        Operation.LISTSTATUS_BATCH.getMethod(),\n        params, f, true);\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    // Parse the FileStatus array\n    JSONObject json \u003d (JSONObject) HttpFSUtils.jsonParse(conn);\n    JSONObject listing \u003d (JSONObject) json.get(DIRECTORY_LISTING_JSON);\n    FileStatus[] statuses \u003d toFileStatuses(\n        (JSONObject) listing.get(PARTIAL_LISTING_JSON), f);\n    // New token is the last FileStatus entry\n    byte[] newToken \u003d null;\n    if (statuses.length \u003e 0) {\n      newToken \u003d statuses[statuses.length - 1].getPath().getName().toString()\n          .getBytes(Charsets.UTF_8);\n    }\n    // Parse the remainingEntries boolean into hasMore\n    final long remainingEntries \u003d (Long) listing.get(REMAINING_ENTRIES_JSON);\n    final boolean hasMore \u003d remainingEntries \u003e 0 ? true : false;\n    return new DirectoryEntries(statuses, newToken, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java"
    }
  }
}