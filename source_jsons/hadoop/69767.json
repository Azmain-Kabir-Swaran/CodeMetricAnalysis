{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReadBufferManager.java",
  "functionName": "getBlock",
  "functionId": "getBlock___stream-AbfsInputStream(modifiers-final)__position-long(modifiers-final)__length-int(modifiers-final)__buffer-byte[](modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java",
  "functionStartLine": 148,
  "functionEndLine": 172,
  "numCommitsSeen": 3,
  "timeTaken": 1302,
  "changeHistory": [
    "53b993e6048ffaaf98e460690211fc08efb20cf2",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "53b993e6048ffaaf98e460690211fc08efb20cf2": "Yexceptionschange",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Ybodychange",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "53b993e6048ffaaf98e460690211fc08efb20cf2": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-16852: Report read-ahead error back\n\nContributed by Sneha Vijayarajan",
      "commitDate": "27/05/20 1:51 PM",
      "commitName": "53b993e6048ffaaf98e460690211fc08efb20cf2",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 618.04,
      "commitsBetweenForRepo": 3845,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n-  int getBlock(final AbfsInputStream stream, final long position, final int length, final byte[] buffer) {\n+  int getBlock(final AbfsInputStream stream, final long position, final int length, final byte[] buffer)\n+      throws IOException {\n     // not synchronized, so have to be careful with locking\n     if (LOGGER.isTraceEnabled()) {\n       LOGGER.trace(\"getBlock for file {}  position {}  thread {}\",\n           stream.getPath(), position, Thread.currentThread().getName());\n     }\n \n     waitForProcess(stream, position);\n \n     int bytesRead \u003d 0;\n     synchronized (this) {\n       bytesRead \u003d getBlockFromCompletedQueue(stream, position, length, buffer);\n     }\n     if (bytesRead \u003e 0) {\n       if (LOGGER.isTraceEnabled()) {\n         LOGGER.trace(\"Done read from Cache for {} position {} length {}\",\n             stream.getPath(), position, bytesRead);\n       }\n       return bytesRead;\n     }\n \n     // otherwise, just say we got nothing - calling thread can do its own read\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int getBlock(final AbfsInputStream stream, final long position, final int length, final byte[] buffer)\n      throws IOException {\n    // not synchronized, so have to be careful with locking\n    if (LOGGER.isTraceEnabled()) {\n      LOGGER.trace(\"getBlock for file {}  position {}  thread {}\",\n          stream.getPath(), position, Thread.currentThread().getName());\n    }\n\n    waitForProcess(stream, position);\n\n    int bytesRead \u003d 0;\n    synchronized (this) {\n      bytesRead \u003d getBlockFromCompletedQueue(stream, position, length, buffer);\n    }\n    if (bytesRead \u003e 0) {\n      if (LOGGER.isTraceEnabled()) {\n        LOGGER.trace(\"Done read from Cache for {} position {} length {}\",\n            stream.getPath(), position, bytesRead);\n      }\n      return bytesRead;\n    }\n\n    // otherwise, just say we got nothing - calling thread can do its own read\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IOException]"
      }
    },
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   int getBlock(final AbfsInputStream stream, final long position, final int length, final byte[] buffer) {\n     // not synchronized, so have to be careful with locking\n     if (LOGGER.isTraceEnabled()) {\n-      LOGGER.trace(\"getBlock for file \" + stream.getPath() + \" position \" + position + \" thread \" + Thread.currentThread().getName());\n+      LOGGER.trace(\"getBlock for file {}  position {}  thread {}\",\n+          stream.getPath(), position, Thread.currentThread().getName());\n     }\n \n     waitForProcess(stream, position);\n \n     int bytesRead \u003d 0;\n     synchronized (this) {\n       bytesRead \u003d getBlockFromCompletedQueue(stream, position, length, buffer);\n     }\n     if (bytesRead \u003e 0) {\n       if (LOGGER.isTraceEnabled()) {\n-        LOGGER.trace(\"Done read from Cache for \" + stream.getPath() + \" position \" + position + \" length \" + bytesRead);\n+        LOGGER.trace(\"Done read from Cache for {} position {} length {}\",\n+            stream.getPath(), position, bytesRead);\n       }\n       return bytesRead;\n     }\n \n-    // otherwise, just say we got nothing - calling thread can do it\u0027s own read\n+    // otherwise, just say we got nothing - calling thread can do its own read\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int getBlock(final AbfsInputStream stream, final long position, final int length, final byte[] buffer) {\n    // not synchronized, so have to be careful with locking\n    if (LOGGER.isTraceEnabled()) {\n      LOGGER.trace(\"getBlock for file {}  position {}  thread {}\",\n          stream.getPath(), position, Thread.currentThread().getName());\n    }\n\n    waitForProcess(stream, position);\n\n    int bytesRead \u003d 0;\n    synchronized (this) {\n      bytesRead \u003d getBlockFromCompletedQueue(stream, position, length, buffer);\n    }\n    if (bytesRead \u003e 0) {\n      if (LOGGER.isTraceEnabled()) {\n        LOGGER.trace(\"Done read from Cache for {} position {} length {}\",\n            stream.getPath(), position, bytesRead);\n      }\n      return bytesRead;\n    }\n\n    // otherwise, just say we got nothing - calling thread can do its own read\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java",
      "extendedDetails": {}
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,22 @@\n+  int getBlock(final AbfsInputStream stream, final long position, final int length, final byte[] buffer) {\n+    // not synchronized, so have to be careful with locking\n+    if (LOGGER.isTraceEnabled()) {\n+      LOGGER.trace(\"getBlock for file \" + stream.getPath() + \" position \" + position + \" thread \" + Thread.currentThread().getName());\n+    }\n+\n+    waitForProcess(stream, position);\n+\n+    int bytesRead \u003d 0;\n+    synchronized (this) {\n+      bytesRead \u003d getBlockFromCompletedQueue(stream, position, length, buffer);\n+    }\n+    if (bytesRead \u003e 0) {\n+      if (LOGGER.isTraceEnabled()) {\n+        LOGGER.trace(\"Done read from Cache for \" + stream.getPath() + \" position \" + position + \" length \" + bytesRead);\n+      }\n+      return bytesRead;\n+    }\n+\n+    // otherwise, just say we got nothing - calling thread can do it\u0027s own read\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  int getBlock(final AbfsInputStream stream, final long position, final int length, final byte[] buffer) {\n    // not synchronized, so have to be careful with locking\n    if (LOGGER.isTraceEnabled()) {\n      LOGGER.trace(\"getBlock for file \" + stream.getPath() + \" position \" + position + \" thread \" + Thread.currentThread().getName());\n    }\n\n    waitForProcess(stream, position);\n\n    int bytesRead \u003d 0;\n    synchronized (this) {\n      bytesRead \u003d getBlockFromCompletedQueue(stream, position, length, buffer);\n    }\n    if (bytesRead \u003e 0) {\n      if (LOGGER.isTraceEnabled()) {\n        LOGGER.trace(\"Done read from Cache for \" + stream.getPath() + \" position \" + position + \" length \" + bytesRead);\n      }\n      return bytesRead;\n    }\n\n    // otherwise, just say we got nothing - calling thread can do it\u0027s own read\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ReadBufferManager.java"
    }
  }
}