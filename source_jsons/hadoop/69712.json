{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsAclHelper.java",
  "functionName": "recalculateMask",
  "functionId": "recalculateMask___aclEntries-Map__String,String____isDefaultMask-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsAclHelper.java",
  "functionStartLine": 223,
  "functionEndLine": 244,
  "numCommitsSeen": 3,
  "timeTaken": 1085,
  "changeHistory": [
    "724c15007beb9ca36f2f37c829f1daa366d95bbf",
    "9c1e4e81399913f180131f4faa95604087c6d962"
  ],
  "changeHistoryShort": {
    "724c15007beb9ca36f2f37c829f1daa366d95bbf": "Ybodychange",
    "9c1e4e81399913f180131f4faa95604087c6d962": "Yintroduced"
  },
  "changeHistoryDetails": {
    "724c15007beb9ca36f2f37c829f1daa366d95bbf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15846. ABFS: fix mask related bugs in setAcl, modifyAclEntries and removeAclEntries.\n\nContributed by Junhua Gu.\n\n(cherry picked from commit 66715005f9e8f4f25faa352a06d142b75a029f0e)\n",
      "commitDate": "08/11/18 9:21 AM",
      "commitName": "724c15007beb9ca36f2f37c829f1daa366d95bbf",
      "commitAuthor": "Junhua Gu",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "9c1e4e81399913f180131f4faa95604087c6d962",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 51.89,
      "commitsBetweenForRepo": 506,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private static void recalculateMask(Map\u003cString, String\u003e aclEntries, boolean isDefaultMask) {\n-    FsAction umask \u003d FsAction.NONE;\n+    FsAction mask \u003d FsAction.NONE;\n     if (!isExtendAcl(aclEntries, isDefaultMask)) {\n       return;\n     }\n \n     for (Map.Entry\u003cString, String\u003e aclEntry : aclEntries.entrySet()) {\n       if (isDefaultMask) {\n         if ((isDefaultAce(aclEntry.getKey()) \u0026\u0026 isNamedAce(aclEntry.getKey()))\n             || aclEntry.getKey().equals(AbfsHttpConstants.DEFAULT_GROUP)) {\n-          umask \u003d umask.or(FsAction.getFsAction(aclEntry.getValue()));\n+          mask \u003d mask.or(FsAction.getFsAction(aclEntry.getValue()));\n         }\n       } else {\n         if ((!isDefaultAce(aclEntry.getKey()) \u0026\u0026 isNamedAce(aclEntry.getKey()))\n             || aclEntry.getKey().equals(AbfsHttpConstants.ACCESS_GROUP)) {\n-          umask \u003d umask.or(FsAction.getFsAction(aclEntry.getValue()));\n+          mask \u003d mask.or(FsAction.getFsAction(aclEntry.getValue()));\n         }\n       }\n     }\n \n-    aclEntries.put(isDefaultMask ? AbfsHttpConstants.DEFAULT_MASK : AbfsHttpConstants.ACCESS_MASK, umask.SYMBOL);\n+    aclEntries.put(isDefaultMask ? AbfsHttpConstants.DEFAULT_MASK : AbfsHttpConstants.ACCESS_MASK, mask.SYMBOL);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void recalculateMask(Map\u003cString, String\u003e aclEntries, boolean isDefaultMask) {\n    FsAction mask \u003d FsAction.NONE;\n    if (!isExtendAcl(aclEntries, isDefaultMask)) {\n      return;\n    }\n\n    for (Map.Entry\u003cString, String\u003e aclEntry : aclEntries.entrySet()) {\n      if (isDefaultMask) {\n        if ((isDefaultAce(aclEntry.getKey()) \u0026\u0026 isNamedAce(aclEntry.getKey()))\n            || aclEntry.getKey().equals(AbfsHttpConstants.DEFAULT_GROUP)) {\n          mask \u003d mask.or(FsAction.getFsAction(aclEntry.getValue()));\n        }\n      } else {\n        if ((!isDefaultAce(aclEntry.getKey()) \u0026\u0026 isNamedAce(aclEntry.getKey()))\n            || aclEntry.getKey().equals(AbfsHttpConstants.ACCESS_GROUP)) {\n          mask \u003d mask.or(FsAction.getFsAction(aclEntry.getValue()));\n        }\n      }\n    }\n\n    aclEntries.put(isDefaultMask ? AbfsHttpConstants.DEFAULT_MASK : AbfsHttpConstants.ACCESS_MASK, mask.SYMBOL);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsAclHelper.java",
      "extendedDetails": {}
    },
    "9c1e4e81399913f180131f4faa95604087c6d962": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15661. ABFS: Add support for ACL.\nContributed by Junhua Gu and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9c1e4e81399913f180131f4faa95604087c6d962",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,22 @@\n+  private static void recalculateMask(Map\u003cString, String\u003e aclEntries, boolean isDefaultMask) {\n+    FsAction umask \u003d FsAction.NONE;\n+    if (!isExtendAcl(aclEntries, isDefaultMask)) {\n+      return;\n+    }\n+\n+    for (Map.Entry\u003cString, String\u003e aclEntry : aclEntries.entrySet()) {\n+      if (isDefaultMask) {\n+        if ((isDefaultAce(aclEntry.getKey()) \u0026\u0026 isNamedAce(aclEntry.getKey()))\n+            || aclEntry.getKey().equals(AbfsHttpConstants.DEFAULT_GROUP)) {\n+          umask \u003d umask.or(FsAction.getFsAction(aclEntry.getValue()));\n+        }\n+      } else {\n+        if ((!isDefaultAce(aclEntry.getKey()) \u0026\u0026 isNamedAce(aclEntry.getKey()))\n+            || aclEntry.getKey().equals(AbfsHttpConstants.ACCESS_GROUP)) {\n+          umask \u003d umask.or(FsAction.getFsAction(aclEntry.getValue()));\n+        }\n+      }\n+    }\n+\n+    aclEntries.put(isDefaultMask ? AbfsHttpConstants.DEFAULT_MASK : AbfsHttpConstants.ACCESS_MASK, umask.SYMBOL);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void recalculateMask(Map\u003cString, String\u003e aclEntries, boolean isDefaultMask) {\n    FsAction umask \u003d FsAction.NONE;\n    if (!isExtendAcl(aclEntries, isDefaultMask)) {\n      return;\n    }\n\n    for (Map.Entry\u003cString, String\u003e aclEntry : aclEntries.entrySet()) {\n      if (isDefaultMask) {\n        if ((isDefaultAce(aclEntry.getKey()) \u0026\u0026 isNamedAce(aclEntry.getKey()))\n            || aclEntry.getKey().equals(AbfsHttpConstants.DEFAULT_GROUP)) {\n          umask \u003d umask.or(FsAction.getFsAction(aclEntry.getValue()));\n        }\n      } else {\n        if ((!isDefaultAce(aclEntry.getKey()) \u0026\u0026 isNamedAce(aclEntry.getKey()))\n            || aclEntry.getKey().equals(AbfsHttpConstants.ACCESS_GROUP)) {\n          umask \u003d umask.or(FsAction.getFsAction(aclEntry.getValue()));\n        }\n      }\n    }\n\n    aclEntries.put(isDefaultMask ? AbfsHttpConstants.DEFAULT_MASK : AbfsHttpConstants.ACCESS_MASK, umask.SYMBOL);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsAclHelper.java"
    }
  }
}