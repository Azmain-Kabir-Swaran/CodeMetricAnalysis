{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistCpSync.java",
  "functionName": "getAllDiffs",
  "functionId": "getAllDiffs",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
  "functionStartLine": 193,
  "functionEndLine": 253,
  "numCommitsSeen": 15,
  "timeTaken": 4255,
  "changeHistory": [
    "fccccc97034b29243a0509633849de55aa734859",
    "26172a94d6431e70d7fe15d66be9a7e195f79f60",
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
    "da8441d0fe9149bb845dcf701fdc86e786b6afba",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
    "75cb1d42abec54ef5484636e020949ceebe189e9",
    "ed70fa142cabdbc1065e4dbbc95e99c8850c4751"
  ],
  "changeHistoryShort": {
    "fccccc97034b29243a0509633849de55aa734859": "Ybodychange",
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": "Ybodychange",
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276": "Ybodychange",
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17": "Ybodychange",
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d": "Ybodychange",
    "da8441d0fe9149bb845dcf701fdc86e786b6afba": "Ybodychange",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "75cb1d42abec54ef5484636e020949ceebe189e9": "Ybodychange",
    "ed70fa142cabdbc1065e4dbbc95e99c8850c4751": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fccccc97034b29243a0509633849de55aa734859": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14869 Copy renamed files which are not excluded anymore by filter (#1530)\n\n\r\n",
      "commitDate": "06/12/19 4:11 AM",
      "commitName": "fccccc97034b29243a0509633849de55aa734859",
      "commitAuthor": "aasha",
      "commitDateOld": "31/03/17 8:04 PM",
      "commitNameOld": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 979.38,
      "commitsBetweenForRepo": 7594,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,61 @@\n   private boolean getAllDiffs() throws IOException {\n     Path ssDir \u003d isRdiff()?\n         context.getTargetPath() : context.getSourcePaths().get(0);\n \n     try {\n       DistributedFileSystem fs \u003d\n           (DistributedFileSystem) ssDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(context.getFromSnapshot());\n       final String to \u003d getSnapshotName(context.getToSnapshot());\n       SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n           from, to);\n       this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n       for (SnapshotDiffReport.DiffType type :\n           SnapshotDiffReport.DiffType.values()) {\n         diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n       }\n \n       for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n         // If the entry is the snapshot root, usually a item like \"M\\t.\"\n         // in the diff report. We don\u0027t need to handle it and cannot handle it,\n         // since its sourcepath is empty.\n         if (entry.getSourcePath().length \u003c\u003d 0) {\n           continue;\n         }\n         SnapshotDiffReport.DiffType dt \u003d entry.getType();\n         List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n+        final Path source \u003d\n+                new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n+        final Path relativeSource \u003d new Path(Path.SEPARATOR + source);\n         if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n             dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n             dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n-          final Path source \u003d\n-              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n-          list.add(new DiffInfo(source, null, dt));\n+          if (copyFilter.shouldCopy(relativeSource)) {\n+            list.add(new DiffInfo(source, null, dt));\n+          }\n         } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n-          final Path source \u003d\n-              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n           final Path target \u003d\n-              new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n-          list.add(new DiffInfo(source, target, dt));\n+                  new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n+          final Path relativeTarget \u003d new Path(Path.SEPARATOR + target);\n+          if (copyFilter.shouldCopy(relativeSource)) {\n+            if (copyFilter.shouldCopy(relativeTarget)) {\n+              list.add(new DiffInfo(source, target, dt));\n+            } else {\n+              list \u003d diffMap.get(SnapshotDiffReport.DiffType.DELETE);\n+              list.add(new DiffInfo(source, target,\n+                      SnapshotDiffReport.DiffType.DELETE));\n+            }\n+          } else if (copyFilter.shouldCopy(relativeTarget)) {\n+            list \u003d diffMap.get(SnapshotDiffReport.DiffType.CREATE);\n+            list.add(new DiffInfo(target, null,\n+                    SnapshotDiffReport.DiffType.CREATE));\n+          }\n         }\n       }\n       return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n     }\n     this.diffMap \u003d null;\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean getAllDiffs() throws IOException {\n    Path ssDir \u003d isRdiff()?\n        context.getTargetPath() : context.getSourcePaths().get(0);\n\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) ssDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(context.getFromSnapshot());\n      final String to \u003d getSnapshotName(context.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n          from, to);\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        SnapshotDiffReport.DiffType dt \u003d entry.getType();\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n        final Path source \u003d\n                new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n        final Path relativeSource \u003d new Path(Path.SEPARATOR + source);\n        if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          if (copyFilter.shouldCopy(relativeSource)) {\n            list.add(new DiffInfo(source, null, dt));\n          }\n        } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path target \u003d\n                  new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n          final Path relativeTarget \u003d new Path(Path.SEPARATOR + target);\n          if (copyFilter.shouldCopy(relativeSource)) {\n            if (copyFilter.shouldCopy(relativeTarget)) {\n              list.add(new DiffInfo(source, target, dt));\n            } else {\n              list \u003d diffMap.get(SnapshotDiffReport.DiffType.DELETE);\n              list.add(new DiffInfo(source, target,\n                      SnapshotDiffReport.DiffType.DELETE));\n            }\n          } else if (copyFilter.shouldCopy(relativeTarget)) {\n            list \u003d diffMap.get(SnapshotDiffReport.DiffType.CREATE);\n            list.add(new DiffInfo(target, null,\n                    SnapshotDiffReport.DiffType.CREATE));\n          }\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
      "commitDate": "31/03/17 8:04 PM",
      "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "15/11/16 10:57 AM",
      "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 136.34,
      "commitsBetweenForRepo": 740,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private boolean getAllDiffs() throws IOException {\n     Path ssDir \u003d isRdiff()?\n-        inputOptions.getTargetPath() : inputOptions.getSourcePaths().get(0);\n+        context.getTargetPath() : context.getSourcePaths().get(0);\n \n     try {\n       DistributedFileSystem fs \u003d\n           (DistributedFileSystem) ssDir.getFileSystem(conf);\n-      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n-      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n+      final String from \u003d getSnapshotName(context.getFromSnapshot());\n+      final String to \u003d getSnapshotName(context.getToSnapshot());\n       SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n           from, to);\n       this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n       for (SnapshotDiffReport.DiffType type :\n           SnapshotDiffReport.DiffType.values()) {\n         diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n       }\n \n       for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n         // If the entry is the snapshot root, usually a item like \"M\\t.\"\n         // in the diff report. We don\u0027t need to handle it and cannot handle it,\n         // since its sourcepath is empty.\n         if (entry.getSourcePath().length \u003c\u003d 0) {\n           continue;\n         }\n         SnapshotDiffReport.DiffType dt \u003d entry.getType();\n         List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n         if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n             dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n             dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n           final Path source \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n           list.add(new DiffInfo(source, null, dt));\n         } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n           final Path source \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n           final Path target \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n           list.add(new DiffInfo(source, target, dt));\n         }\n       }\n       return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n     }\n     this.diffMap \u003d null;\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean getAllDiffs() throws IOException {\n    Path ssDir \u003d isRdiff()?\n        context.getTargetPath() : context.getSourcePaths().get(0);\n\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) ssDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(context.getFromSnapshot());\n      final String to \u003d getSnapshotName(context.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n          from, to);\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        SnapshotDiffReport.DiffType dt \u003d entry.getType();\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n        if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, dt));\n        } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, dt));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
      "commitDate": "19/10/16 5:37 PM",
      "commitName": "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "17/10/16 10:47 PM",
      "commitNameOld": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private boolean getAllDiffs() throws IOException {\n-    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n-    final Path sourceDir \u003d sourcePaths.get(0);\n+    Path ssDir \u003d isRdiff()?\n+        inputOptions.getTargetPath() : inputOptions.getSourcePaths().get(0);\n+\n     try {\n       DistributedFileSystem fs \u003d\n-          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n+          (DistributedFileSystem) ssDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n           from, to);\n-\n       this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n       for (SnapshotDiffReport.DiffType type :\n           SnapshotDiffReport.DiffType.values()) {\n         diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n       }\n \n       for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n         // If the entry is the snapshot root, usually a item like \"M\\t.\"\n         // in the diff report. We don\u0027t need to handle it and cannot handle it,\n         // since its sourcepath is empty.\n         if (entry.getSourcePath().length \u003c\u003d 0) {\n           continue;\n         }\n-        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n-\n-        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n-            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n-            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+        SnapshotDiffReport.DiffType dt \u003d entry.getType();\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n+        if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n           final Path source \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n-          list.add(new DiffInfo(source, null, entry.getType()));\n-        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          list.add(new DiffInfo(source, null, dt));\n+        } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n           final Path source \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n           final Path target \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n-          list.add(new DiffInfo(source, target, entry.getType()));\n+          list.add(new DiffInfo(source, target, dt));\n         }\n       }\n       return true;\n     } catch (IOException e) {\n-      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n+      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n     }\n     this.diffMap \u003d null;\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean getAllDiffs() throws IOException {\n    Path ssDir \u003d isRdiff()?\n        inputOptions.getTargetPath() : inputOptions.getSourcePaths().get(0);\n\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) ssDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n          from, to);\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        SnapshotDiffReport.DiffType dt \u003d entry.getType();\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n        if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, dt));\n        } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, dt));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\"\n\nThis reverts commit 412c4c9a342b73bf1c1a7f43ea91245cbf94d02d.\n",
      "commitDate": "17/10/16 10:47 PM",
      "commitName": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "17/10/16 11:04 AM",
      "commitNameOld": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private boolean getAllDiffs() throws IOException {\n-    Path ssDir \u003d isRdiff()?\n-        inputOptions.getTargetPath() : inputOptions.getSourcePaths().get(0);\n-\n+    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    final Path sourceDir \u003d sourcePaths.get(0);\n     try {\n       DistributedFileSystem fs \u003d\n-          (DistributedFileSystem) ssDir.getFileSystem(conf);\n+          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n           from, to);\n+\n       this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n       for (SnapshotDiffReport.DiffType type :\n           SnapshotDiffReport.DiffType.values()) {\n         diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n       }\n \n       for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n         // If the entry is the snapshot root, usually a item like \"M\\t.\"\n         // in the diff report. We don\u0027t need to handle it and cannot handle it,\n         // since its sourcepath is empty.\n         if (entry.getSourcePath().length \u003c\u003d 0) {\n           continue;\n         }\n-        SnapshotDiffReport.DiffType dt \u003d entry.getType();\n-        List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n-        if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n-            dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n-            dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n+\n+        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n           final Path source \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n-          list.add(new DiffInfo(source, null, dt));\n-        } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          list.add(new DiffInfo(source, null, entry.getType()));\n+        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n           final Path source \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n           final Path target \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n-          list.add(new DiffInfo(source, target, dt));\n+          list.add(new DiffInfo(source, target, entry.getType()));\n         }\n       }\n       return true;\n     } catch (IOException e) {\n-      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n+      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n     this.diffMap \u003d null;\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean getAllDiffs() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    final Path sourceDir \u003d sourcePaths.get(0);\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n\n        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, entry.getType()));\n        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, entry.getType()));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
      "commitDate": "17/10/16 11:04 AM",
      "commitName": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "26/04/16 4:08 PM",
      "commitNameOld": "959a28dd1216dfac78d05b438828e8503108d963",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 173.79,
      "commitsBetweenForRepo": 1276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private boolean getAllDiffs() throws IOException {\n-    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n-    final Path sourceDir \u003d sourcePaths.get(0);\n+    Path ssDir \u003d isRdiff()?\n+        inputOptions.getTargetPath() : inputOptions.getSourcePaths().get(0);\n+\n     try {\n       DistributedFileSystem fs \u003d\n-          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n+          (DistributedFileSystem) ssDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n           from, to);\n-\n       this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n       for (SnapshotDiffReport.DiffType type :\n           SnapshotDiffReport.DiffType.values()) {\n         diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n       }\n \n       for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n         // If the entry is the snapshot root, usually a item like \"M\\t.\"\n         // in the diff report. We don\u0027t need to handle it and cannot handle it,\n         // since its sourcepath is empty.\n         if (entry.getSourcePath().length \u003c\u003d 0) {\n           continue;\n         }\n-        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n-\n-        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n-            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n-            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+        SnapshotDiffReport.DiffType dt \u003d entry.getType();\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n+        if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n           final Path source \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n-          list.add(new DiffInfo(source, null, entry.getType()));\n-        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          list.add(new DiffInfo(source, null, dt));\n+        } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n           final Path source \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n           final Path target \u003d\n               new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n-          list.add(new DiffInfo(source, target, entry.getType()));\n+          list.add(new DiffInfo(source, target, dt));\n         }\n       }\n       return true;\n     } catch (IOException e) {\n-      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n+      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n     }\n     this.diffMap \u003d null;\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean getAllDiffs() throws IOException {\n    Path ssDir \u003d isRdiff()?\n        inputOptions.getTargetPath() : inputOptions.getSourcePaths().get(0);\n\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) ssDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(ssDir,\n          from, to);\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        SnapshotDiffReport.DiffType dt \u003d entry.getType();\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(dt);\n        if (dt \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            dt \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            dt \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, dt));\n        } else if (dt \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, dt));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + ssDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "da8441d0fe9149bb845dcf701fdc86e786b6afba": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9167. Update pom.xml in other modules to depend on hdfs-client instead of hdfs. Contributed by Mingliang Liu.\n",
      "commitDate": "13/10/15 3:24 PM",
      "commitName": "da8441d0fe9149bb845dcf701fdc86e786b6afba",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "20/08/15 8:02 AM",
      "commitNameOld": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 54.31,
      "commitsBetweenForRepo": 370,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private boolean getAllDiffs() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     final Path sourceDir \u003d sourcePaths.get(0);\n     try {\n       DistributedFileSystem fs \u003d\n           (DistributedFileSystem) sourceDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n       SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n           from, to);\n \n       this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n       for (SnapshotDiffReport.DiffType type :\n           SnapshotDiffReport.DiffType.values()) {\n         diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n       }\n \n       for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n         // If the entry is the snapshot root, usually a item like \"M\\t.\"\n         // in the diff report. We don\u0027t need to handle it and cannot handle it,\n         // since its sourcepath is empty.\n         if (entry.getSourcePath().length \u003c\u003d 0) {\n           continue;\n         }\n         List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n \n         if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n             entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n             entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n           final Path source \u003d\n-              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n           list.add(new DiffInfo(source, null, entry.getType()));\n         } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n           final Path source \u003d\n-              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n           final Path target \u003d\n-              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n+              new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n           list.add(new DiffInfo(source, target, entry.getType()));\n         }\n       }\n       return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n     this.diffMap \u003d null;\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean getAllDiffs() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    final Path sourceDir \u003d sourcePaths.get(0);\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n\n        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, entry.getType()));\n        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtilClient.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, entry.getType()));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
      "commitDate": "20/08/15 8:02 AM",
      "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,47 @@\n-  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n-      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n+  private boolean getAllDiffs() throws IOException {\n+    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    final Path sourceDir \u003d sourcePaths.get(0);\n     try {\n+      DistributedFileSystem fs \u003d\n+          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n           from, to);\n-      return DiffInfo.getDiffs(sourceDiff, targetDir);\n+\n+      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n+      for (SnapshotDiffReport.DiffType type :\n+          SnapshotDiffReport.DiffType.values()) {\n+        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n+      }\n+\n+      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n+        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n+        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n+        // since its sourcepath is empty.\n+        if (entry.getSourcePath().length \u003c\u003d 0) {\n+          continue;\n+        }\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n+\n+        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          list.add(new DiffInfo(source, null, entry.getType()));\n+        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          final Path target \u003d\n+              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n+          list.add(new DiffInfo(source, target, entry.getType()));\n+        }\n+      }\n+      return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n-    return null;\n+    this.diffMap \u003d null;\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean getAllDiffs() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    final Path sourceDir \u003d sourcePaths.get(0);\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n\n        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, entry.getType()));\n        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, entry.getType()));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "getDiffs",
            "newValue": "getAllDiffs"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,47 @@\n-  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n-      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n+  private boolean getAllDiffs() throws IOException {\n+    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    final Path sourceDir \u003d sourcePaths.get(0);\n     try {\n+      DistributedFileSystem fs \u003d\n+          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n           from, to);\n-      return DiffInfo.getDiffs(sourceDiff, targetDir);\n+\n+      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n+      for (SnapshotDiffReport.DiffType type :\n+          SnapshotDiffReport.DiffType.values()) {\n+        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n+      }\n+\n+      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n+        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n+        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n+        // since its sourcepath is empty.\n+        if (entry.getSourcePath().length \u003c\u003d 0) {\n+          continue;\n+        }\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n+\n+        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          list.add(new DiffInfo(source, null, entry.getType()));\n+        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          final Path target \u003d\n+              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n+          list.add(new DiffInfo(source, target, entry.getType()));\n+        }\n+      }\n+      return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n-    return null;\n+    this.diffMap \u003d null;\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean getAllDiffs() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    final Path sourceDir \u003d sourcePaths.get(0);\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n\n        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, entry.getType()));\n        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, entry.getType()));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "[inputOptions-DistCpOptions, fs-DistributedFileSystem, sourceDir-Path, targetDir-Path]",
            "newValue": "[]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,47 @@\n-  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n-      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n+  private boolean getAllDiffs() throws IOException {\n+    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    final Path sourceDir \u003d sourcePaths.get(0);\n     try {\n+      DistributedFileSystem fs \u003d\n+          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n           from, to);\n-      return DiffInfo.getDiffs(sourceDiff, targetDir);\n+\n+      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n+      for (SnapshotDiffReport.DiffType type :\n+          SnapshotDiffReport.DiffType.values()) {\n+        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n+      }\n+\n+      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n+        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n+        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n+        // since its sourcepath is empty.\n+        if (entry.getSourcePath().length \u003c\u003d 0) {\n+          continue;\n+        }\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n+\n+        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          list.add(new DiffInfo(source, null, entry.getType()));\n+        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          final Path target \u003d\n+              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n+          list.add(new DiffInfo(source, target, entry.getType()));\n+        }\n+      }\n+      return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n-    return null;\n+    this.diffMap \u003d null;\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean getAllDiffs() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    final Path sourceDir \u003d sourcePaths.get(0);\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n\n        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, entry.getType()));\n        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, entry.getType()));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "DiffInfo[]",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,47 @@\n-  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n-      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n+  private boolean getAllDiffs() throws IOException {\n+    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    final Path sourceDir \u003d sourcePaths.get(0);\n     try {\n+      DistributedFileSystem fs \u003d\n+          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n           from, to);\n-      return DiffInfo.getDiffs(sourceDiff, targetDir);\n+\n+      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n+      for (SnapshotDiffReport.DiffType type :\n+          SnapshotDiffReport.DiffType.values()) {\n+        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n+      }\n+\n+      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n+        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n+        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n+        // since its sourcepath is empty.\n+        if (entry.getSourcePath().length \u003c\u003d 0) {\n+          continue;\n+        }\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n+\n+        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          list.add(new DiffInfo(source, null, entry.getType()));\n+        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          final Path target \u003d\n+              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n+          list.add(new DiffInfo(source, target, entry.getType()));\n+        }\n+      }\n+      return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n-    return null;\n+    this.diffMap \u003d null;\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean getAllDiffs() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    final Path sourceDir \u003d sourcePaths.get(0);\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n\n        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, entry.getType()));\n        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, entry.getType()));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,47 @@\n-  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n-      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n+  private boolean getAllDiffs() throws IOException {\n+    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    final Path sourceDir \u003d sourcePaths.get(0);\n     try {\n+      DistributedFileSystem fs \u003d\n+          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n           from, to);\n-      return DiffInfo.getDiffs(sourceDiff, targetDir);\n+\n+      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n+      for (SnapshotDiffReport.DiffType type :\n+          SnapshotDiffReport.DiffType.values()) {\n+        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n+      }\n+\n+      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n+        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n+        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n+        // since its sourcepath is empty.\n+        if (entry.getSourcePath().length \u003c\u003d 0) {\n+          continue;\n+        }\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n+\n+        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          list.add(new DiffInfo(source, null, entry.getType()));\n+        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          final Path target \u003d\n+              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n+          list.add(new DiffInfo(source, target, entry.getType()));\n+        }\n+      }\n+      return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n-    return null;\n+    this.diffMap \u003d null;\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean getAllDiffs() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    final Path sourceDir \u003d sourcePaths.get(0);\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n\n        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, entry.getType()));\n        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, entry.getType()));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,47 @@\n-  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n-      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n+  private boolean getAllDiffs() throws IOException {\n+    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    final Path sourceDir \u003d sourcePaths.get(0);\n     try {\n+      DistributedFileSystem fs \u003d\n+          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n       final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n       final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n-      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n+      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n           from, to);\n-      return DiffInfo.getDiffs(sourceDiff, targetDir);\n+\n+      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n+      for (SnapshotDiffReport.DiffType type :\n+          SnapshotDiffReport.DiffType.values()) {\n+        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n+      }\n+\n+      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n+        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n+        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n+        // since its sourcepath is empty.\n+        if (entry.getSourcePath().length \u003c\u003d 0) {\n+          continue;\n+        }\n+        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n+\n+        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n+            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          list.add(new DiffInfo(source, null, entry.getType()));\n+        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n+          final Path source \u003d\n+              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n+          final Path target \u003d\n+              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n+          list.add(new DiffInfo(source, target, entry.getType()));\n+        }\n+      }\n+      return true;\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n-    return null;\n+    this.diffMap \u003d null;\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean getAllDiffs() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    final Path sourceDir \u003d sourcePaths.get(0);\n    try {\n      DistributedFileSystem fs \u003d\n          (DistributedFileSystem) sourceDir.getFileSystem(conf);\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport report \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n\n      this.diffMap \u003d new EnumMap\u003c\u003e(SnapshotDiffReport.DiffType.class);\n      for (SnapshotDiffReport.DiffType type :\n          SnapshotDiffReport.DiffType.values()) {\n        diffMap.put(type, new ArrayList\u003cDiffInfo\u003e());\n      }\n\n      for (SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {\n        // If the entry is the snapshot root, usually a item like \"M\\t.\"\n        // in the diff report. We don\u0027t need to handle it and cannot handle it,\n        // since its sourcepath is empty.\n        if (entry.getSourcePath().length \u003c\u003d 0) {\n          continue;\n        }\n        List\u003cDiffInfo\u003e list \u003d diffMap.get(entry.getType());\n\n        if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE ||\n            entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.DELETE) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          list.add(new DiffInfo(source, null, entry.getType()));\n        } else if (entry.getType() \u003d\u003d SnapshotDiffReport.DiffType.RENAME) {\n          final Path source \u003d\n              new Path(DFSUtil.bytes2String(entry.getSourcePath()));\n          final Path target \u003d\n              new Path(DFSUtil.bytes2String(entry.getTargetPath()));\n          list.add(new DiffInfo(source, target, entry.getType()));\n        }\n      }\n      return true;\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    this.diffMap \u003d null;\n    return false;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {}
        }
      ]
    },
    "75cb1d42abec54ef5484636e020949ceebe189e9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8036. Use snapshot path as source when using snapshot diff report in DistCp. Contributed by Jing Zhao.\n",
      "commitDate": "01/04/15 4:50 PM",
      "commitName": "75cb1d42abec54ef5484636e020949ceebe189e9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "04/03/15 10:30 AM",
      "commitNameOld": "ed70fa142cabdbc1065e4dbbc95e99c8850c4751",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 28.22,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,13 @@\n   static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n       DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n     try {\n+      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n+      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n       SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n-          inputOptions.getFromSnapshot(), inputOptions.getToSnapshot());\n+          from, to);\n       return DiffInfo.getDiffs(sourceDiff, targetDir);\n     } catch (IOException e) {\n       DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n    try {\n      final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n      final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n          from, to);\n      return DiffInfo.getDiffs(sourceDiff, targetDir);\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    return null;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "ed70fa142cabdbc1065e4dbbc95e99c8850c4751": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7535. Utilize Snapshot diff report for distcp. Contributed by Jing Zhao.\n",
      "commitDate": "04/03/15 10:30 AM",
      "commitName": "ed70fa142cabdbc1065e4dbbc95e99c8850c4751",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,11 @@\n+  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n+      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n+    try {\n+      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n+          inputOptions.getFromSnapshot(), inputOptions.getToSnapshot());\n+      return DiffInfo.getDiffs(sourceDiff, targetDir);\n+    } catch (IOException e) {\n+      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static DiffInfo[] getDiffs(DistCpOptions inputOptions,\n      DistributedFileSystem fs, Path sourceDir, Path targetDir) {\n    try {\n      SnapshotDiffReport sourceDiff \u003d fs.getSnapshotDiffReport(sourceDir,\n          inputOptions.getFromSnapshot(), inputOptions.getToSnapshot());\n      return DiffInfo.getDiffs(sourceDiff, targetDir);\n    } catch (IOException e) {\n      DistCp.LOG.warn(\"Failed to compute snapshot diff on \" + sourceDir, e);\n    }\n    return null;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java"
    }
  }
}