{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PageBlobInputStream.java",
  "functionName": "read",
  "functionId": "read___outputBuffer-byte[]__offset-int__len-int",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/PageBlobInputStream.java",
  "functionStartLine": 275,
  "functionEndLine": 310,
  "numCommitsSeen": 5,
  "timeTaken": 6373,
  "changeHistory": [
    "5b11b9fd413470e134ecdc7c50468f8c7b39fa50",
    "c45784bc9031353b938f4756473937cca759b3dc",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40"
  ],
  "changeHistoryShort": {
    "5b11b9fd413470e134ecdc7c50468f8c7b39fa50": "Ybodychange",
    "c45784bc9031353b938f4756473937cca759b3dc": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5b11b9fd413470e134ecdc7c50468f8c7b39fa50": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. WASB: PageBlobInputStream.skip breaks HBASE replication.\nContributed by Thomas Marquardt\n",
      "commitDate": "07/05/18 3:54 AM",
      "commitName": "5b11b9fd413470e134ecdc7c50468f8c7b39fa50",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "28/11/17 3:52 AM",
      "commitNameOld": "0ea182d0faa35c726dcb37249d48786bfc8ca04c",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 159.96,
      "commitsBetweenForRepo": 1638,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public synchronized int read(byte[] outputBuffer, int offset, int len)\n       throws IOException {\n     // If len is zero return 0 per the InputStream contract\n     if (len \u003d\u003d 0) {\n       return 0;\n     }\n \n     int numberOfBytesRead \u003d 0;\n     while (len \u003e 0) {\n       if (!ensureDataInBuffer()) {\n         break;\n       }\n       int bytesRemainingInCurrentPage \u003d getBytesRemainingInCurrentPage();\n       int numBytesToRead \u003d Math.min(len, bytesRemainingInCurrentPage);\n-      System.arraycopy(currentBuffer, currentOffsetInBuffer, outputBuffer,\n+      System.arraycopy(currentBuffer, currentBufferOffset, outputBuffer,\n           offset, numBytesToRead);\n       numberOfBytesRead +\u003d numBytesToRead;\n       offset +\u003d numBytesToRead;\n       len -\u003d numBytesToRead;\n       if (numBytesToRead \u003d\u003d bytesRemainingInCurrentPage) {\n         // We\u0027ve finished this page, move on to the next.\n         advancePagesInBuffer(1);\n       } else {\n-        currentOffsetInBuffer +\u003d numBytesToRead;\n+        currentBufferOffset +\u003d numBytesToRead;\n       }\n     }\n \n     // if outputBuffer len is \u003e 0 and zero bytes were read, we reached\n     // an EOF\n     if (numberOfBytesRead \u003d\u003d 0) {\n       return -1;\n     }\n \n     filePosition +\u003d numberOfBytesRead;\n     return numberOfBytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(byte[] outputBuffer, int offset, int len)\n      throws IOException {\n    // If len is zero return 0 per the InputStream contract\n    if (len \u003d\u003d 0) {\n      return 0;\n    }\n\n    int numberOfBytesRead \u003d 0;\n    while (len \u003e 0) {\n      if (!ensureDataInBuffer()) {\n        break;\n      }\n      int bytesRemainingInCurrentPage \u003d getBytesRemainingInCurrentPage();\n      int numBytesToRead \u003d Math.min(len, bytesRemainingInCurrentPage);\n      System.arraycopy(currentBuffer, currentBufferOffset, outputBuffer,\n          offset, numBytesToRead);\n      numberOfBytesRead +\u003d numBytesToRead;\n      offset +\u003d numBytesToRead;\n      len -\u003d numBytesToRead;\n      if (numBytesToRead \u003d\u003d bytesRemainingInCurrentPage) {\n        // We\u0027ve finished this page, move on to the next.\n        advancePagesInBuffer(1);\n      } else {\n        currentBufferOffset +\u003d numBytesToRead;\n      }\n    }\n\n    // if outputBuffer len is \u003e 0 and zero bytes were read, we reached\n    // an EOF\n    if (numberOfBytesRead \u003d\u003d 0) {\n      return -1;\n    }\n\n    filePosition +\u003d numberOfBytesRead;\n    return numberOfBytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/PageBlobInputStream.java",
      "extendedDetails": {}
    },
    "c45784bc9031353b938f4756473937cca759b3dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12073. Azure FileSystem PageBlobInputStream does not return -1 on EOF. Contributed by Ivan Mitic.\n",
      "commitDate": "08/06/15 10:42 PM",
      "commitName": "c45784bc9031353b938f4756473937cca759b3dc",
      "commitAuthor": "cnauroth",
      "commitDateOld": "06/03/15 3:25 PM",
      "commitNameOld": "608ebd52bafecf980e9726d397c786a9c2422eba",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 94.26,
      "commitsBetweenForRepo": 874,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,36 @@\n   public synchronized int read(byte[] outputBuffer, int offset, int len)\n       throws IOException {\n+    // If len is zero return 0 per the InputStream contract\n+    if (len \u003d\u003d 0) {\n+      return 0;\n+    }\n+\n     int numberOfBytesRead \u003d 0;\n     while (len \u003e 0) {\n       if (!ensureDataInBuffer()) {\n-        filePosition +\u003d numberOfBytesRead;\n-        return numberOfBytesRead;\n+        break;\n       }\n       int bytesRemainingInCurrentPage \u003d getBytesRemainingInCurrentPage();\n       int numBytesToRead \u003d Math.min(len, bytesRemainingInCurrentPage);\n       System.arraycopy(currentBuffer, currentOffsetInBuffer, outputBuffer,\n           offset, numBytesToRead);\n       numberOfBytesRead +\u003d numBytesToRead;\n       offset +\u003d numBytesToRead;\n       len -\u003d numBytesToRead;\n       if (numBytesToRead \u003d\u003d bytesRemainingInCurrentPage) {\n         // We\u0027ve finished this page, move on to the next.\n         advancePagesInBuffer(1);\n       } else {\n         currentOffsetInBuffer +\u003d numBytesToRead;\n       }\n     }\n+\n+    // if outputBuffer len is \u003e 0 and zero bytes were read, we reached\n+    // an EOF\n+    if (numberOfBytesRead \u003d\u003d 0) {\n+      return -1;\n+    }\n+\n     filePosition +\u003d numberOfBytesRead;\n     return numberOfBytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(byte[] outputBuffer, int offset, int len)\n      throws IOException {\n    // If len is zero return 0 per the InputStream contract\n    if (len \u003d\u003d 0) {\n      return 0;\n    }\n\n    int numberOfBytesRead \u003d 0;\n    while (len \u003e 0) {\n      if (!ensureDataInBuffer()) {\n        break;\n      }\n      int bytesRemainingInCurrentPage \u003d getBytesRemainingInCurrentPage();\n      int numBytesToRead \u003d Math.min(len, bytesRemainingInCurrentPage);\n      System.arraycopy(currentBuffer, currentOffsetInBuffer, outputBuffer,\n          offset, numBytesToRead);\n      numberOfBytesRead +\u003d numBytesToRead;\n      offset +\u003d numBytesToRead;\n      len -\u003d numBytesToRead;\n      if (numBytesToRead \u003d\u003d bytesRemainingInCurrentPage) {\n        // We\u0027ve finished this page, move on to the next.\n        advancePagesInBuffer(1);\n      } else {\n        currentOffsetInBuffer +\u003d numBytesToRead;\n      }\n    }\n\n    // if outputBuffer len is \u003e 0 and zero bytes were read, we reached\n    // an EOF\n    if (numberOfBytesRead \u003d\u003d 0) {\n      return -1;\n    }\n\n    filePosition +\u003d numberOfBytesRead;\n    return numberOfBytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/PageBlobInputStream.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,25 @@\n+  public synchronized int read(byte[] outputBuffer, int offset, int len)\n+      throws IOException {\n+    int numberOfBytesRead \u003d 0;\n+    while (len \u003e 0) {\n+      if (!ensureDataInBuffer()) {\n+        filePosition +\u003d numberOfBytesRead;\n+        return numberOfBytesRead;\n+      }\n+      int bytesRemainingInCurrentPage \u003d getBytesRemainingInCurrentPage();\n+      int numBytesToRead \u003d Math.min(len, bytesRemainingInCurrentPage);\n+      System.arraycopy(currentBuffer, currentOffsetInBuffer, outputBuffer,\n+          offset, numBytesToRead);\n+      numberOfBytesRead +\u003d numBytesToRead;\n+      offset +\u003d numBytesToRead;\n+      len -\u003d numBytesToRead;\n+      if (numBytesToRead \u003d\u003d bytesRemainingInCurrentPage) {\n+        // We\u0027ve finished this page, move on to the next.\n+        advancePagesInBuffer(1);\n+      } else {\n+        currentOffsetInBuffer +\u003d numBytesToRead;\n+      }\n+    }\n+    filePosition +\u003d numberOfBytesRead;\n+    return numberOfBytesRead;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(byte[] outputBuffer, int offset, int len)\n      throws IOException {\n    int numberOfBytesRead \u003d 0;\n    while (len \u003e 0) {\n      if (!ensureDataInBuffer()) {\n        filePosition +\u003d numberOfBytesRead;\n        return numberOfBytesRead;\n      }\n      int bytesRemainingInCurrentPage \u003d getBytesRemainingInCurrentPage();\n      int numBytesToRead \u003d Math.min(len, bytesRemainingInCurrentPage);\n      System.arraycopy(currentBuffer, currentOffsetInBuffer, outputBuffer,\n          offset, numBytesToRead);\n      numberOfBytesRead +\u003d numBytesToRead;\n      offset +\u003d numBytesToRead;\n      len -\u003d numBytesToRead;\n      if (numBytesToRead \u003d\u003d bytesRemainingInCurrentPage) {\n        // We\u0027ve finished this page, move on to the next.\n        advancePagesInBuffer(1);\n      } else {\n        currentOffsetInBuffer +\u003d numBytesToRead;\n      }\n    }\n    filePosition +\u003d numberOfBytesRead;\n    return numberOfBytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/PageBlobInputStream.java"
    }
  }
}