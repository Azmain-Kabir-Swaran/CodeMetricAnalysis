{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcfsBasedProcessTree.java",
  "functionName": "constructProcessInfo",
  "functionId": "constructProcessInfo___pinfo-ProcessInfo__procfsDir-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
  "functionStartLine": 512,
  "functionEndLine": 564,
  "numCommitsSeen": 34,
  "timeTaken": 8569,
  "changeHistory": [
    "626b5103d44692adf3882af61bdafa40114c44f7",
    "77d5ce9069b9ad64673f04edac9b1b1beddfd403",
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
    "de6d05c8b00d978094b09bf1f92638049dc35a61",
    "ca2dc3e78507288f4e6a7b652de150c5e172b037",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "626b5103d44692adf3882af61bdafa40114c44f7": "Ybodychange",
    "77d5ce9069b9ad64673f04edac9b1b1beddfd403": "Ybodychange",
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1": "Ybodychange",
    "de6d05c8b00d978094b09bf1f92638049dc35a61": "Ybodychange",
    "ca2dc3e78507288f4e6a7b652de150c5e172b037": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "626b5103d44692adf3882af61bdafa40114c44f7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7688. Miscellaneous Improvements To ProcfsBasedProcessTree. Contributed by BELUGA BEHR.\n",
      "commitDate": "02/01/18 5:39 PM",
      "commitName": "626b5103d44692adf3882af61bdafa40114c44f7",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "01/05/17 4:01 AM",
      "commitNameOld": "4b5bd73ac53f7de4899b5b70078249ad20216048",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 246.61,
      "commitsBetweenForRepo": 1710,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,\n                                                     String procfsDir) {\n     ProcessInfo ret \u003d null;\n     // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n     BufferedReader in \u003d null;\n     InputStreamReader fReader \u003d null;\n     try {\n       File pidDir \u003d new File(procfsDir, pinfo.getPid());\n       fReader \u003d new InputStreamReader(\n           new FileInputStream(\n               new File(pidDir, PROCFS_STAT_FILE)), Charset.forName(\"UTF-8\"));\n       in \u003d new BufferedReader(fReader);\n     } catch (FileNotFoundException f) {\n       // The process vanished in the interim!\n       return ret;\n     }\n \n     ret \u003d pinfo;\n     try {\n       String str \u003d in.readLine(); // only one line\n       Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n       boolean mat \u003d m.find();\n       if (mat) {\n         String processName \u003d \"(\" + m.group(2) + \")\";\n         // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n         pinfo.updateProcessInfo(processName, m.group(3),\n                 Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                 Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                 Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n       } else {\n         LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n             + \" for process with pid \" + pinfo.getPid());\n         ret \u003d null;\n       }\n     } catch (IOException io) {\n-      LOG.warn(\"Error reading the stream \" + io);\n+      LOG.warn(\"Error reading the stream\", io);\n       ret \u003d null;\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n-          LOG.warn(\"Error closing the stream \" + in);\n+          LOG.warn(\"Error closing the stream\", i);\n         }\n       } catch (IOException i) {\n-        LOG.warn(\"Error closing the stream \" + fReader);\n+        LOG.warn(\"Error closing the stream\", i);\n       }\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,\n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    InputStreamReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, pinfo.getPid());\n      fReader \u003d new InputStreamReader(\n          new FileInputStream(\n              new File(pidDir, PROCFS_STAT_FILE)), Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        String processName \u003d \"(\" + m.group(2) + \")\";\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(processName, m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream\", io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream\", i);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream\", i);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "77d5ce9069b9ad64673f04edac9b1b1beddfd403": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3344. Fix warning - procfs stat file is not in the expected format. (Ravindra Kumar Naik and Akira Ajisaka via kasha)\n",
      "commitDate": "25/05/16 10:50 AM",
      "commitName": "77d5ce9069b9ad64673f04edac9b1b1beddfd403",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/05/16 10:27 AM",
      "commitNameOld": "c6b48391680c1b81a86aabc3ad4c725bfade6d2e",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 22.02,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,\n                                                     String procfsDir) {\n     ProcessInfo ret \u003d null;\n     // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n     BufferedReader in \u003d null;\n     InputStreamReader fReader \u003d null;\n     try {\n       File pidDir \u003d new File(procfsDir, pinfo.getPid());\n       fReader \u003d new InputStreamReader(\n           new FileInputStream(\n               new File(pidDir, PROCFS_STAT_FILE)), Charset.forName(\"UTF-8\"));\n       in \u003d new BufferedReader(fReader);\n     } catch (FileNotFoundException f) {\n       // The process vanished in the interim!\n       return ret;\n     }\n \n     ret \u003d pinfo;\n     try {\n       String str \u003d in.readLine(); // only one line\n       Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n       boolean mat \u003d m.find();\n       if (mat) {\n+        String processName \u003d \"(\" + m.group(2) + \")\";\n         // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n-        pinfo.updateProcessInfo(m.group(2), m.group(3),\n+        pinfo.updateProcessInfo(processName, m.group(3),\n                 Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                 Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                 Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n       } else {\n         LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n             + \" for process with pid \" + pinfo.getPid());\n         ret \u003d null;\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n       ret \u003d null;\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,\n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    InputStreamReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, pinfo.getPid());\n      fReader \u003d new InputStreamReader(\n          new FileInputStream(\n              new File(pidDir, PROCFS_STAT_FILE)), Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        String processName \u003d \"(\" + m.group(2) + \")\";\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(processName, m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2939. Fix new findbugs warnings in hadoop-yarn-common. (Li Lu via junping_du)\n",
      "commitDate": "22/12/14 3:06 AM",
      "commitName": "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
      "commitAuthor": "Junping Du",
      "commitDateOld": "17/04/14 11:05 AM",
      "commitNameOld": "36ed8c74eaa13c0cbff94f852bb5c1dd94d864ed",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 248.71,
      "commitsBetweenForRepo": 2030,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,52 @@\n   private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,\n                                                     String procfsDir) {\n     ProcessInfo ret \u003d null;\n     // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n     BufferedReader in \u003d null;\n-    FileReader fReader \u003d null;\n+    InputStreamReader fReader \u003d null;\n     try {\n       File pidDir \u003d new File(procfsDir, pinfo.getPid());\n-      fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n+      fReader \u003d new InputStreamReader(\n+          new FileInputStream(\n+              new File(pidDir, PROCFS_STAT_FILE)), Charset.forName(\"UTF-8\"));\n       in \u003d new BufferedReader(fReader);\n     } catch (FileNotFoundException f) {\n       // The process vanished in the interim!\n       return ret;\n     }\n \n     ret \u003d pinfo;\n     try {\n       String str \u003d in.readLine(); // only one line\n       Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n       boolean mat \u003d m.find();\n       if (mat) {\n         // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n         pinfo.updateProcessInfo(m.group(2), m.group(3),\n                 Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                 Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                 Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n       } else {\n         LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n             + \" for process with pid \" + pinfo.getPid());\n         ret \u003d null;\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n       ret \u003d null;\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,\n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    InputStreamReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, pinfo.getPid());\n      fReader \u003d new InputStreamReader(\n          new FileInputStream(\n              new File(pidDir, PROCFS_STAT_FILE)), Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "de6d05c8b00d978094b09bf1f92638049dc35a61": {
      "type": "Ybodychange",
      "commitMessage": "YARN-476. ProcfsBasedProcessTree info message confuses users. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469093 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/13 4:11 PM",
      "commitName": "de6d05c8b00d978094b09bf1f92638049dc35a61",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "06/03/13 11:15 AM",
      "commitNameOld": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 42.16,
      "commitsBetweenForRepo": 238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,50 @@\n   private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,\n                                                     String procfsDir) {\n     ProcessInfo ret \u003d null;\n     // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n     BufferedReader in \u003d null;\n     FileReader fReader \u003d null;\n     try {\n       File pidDir \u003d new File(procfsDir, pinfo.getPid());\n       fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n       in \u003d new BufferedReader(fReader);\n     } catch (FileNotFoundException f) {\n       // The process vanished in the interim!\n-      LOG.info(\"The process \" + pinfo.getPid()\n-          + \" may have finished in the interim.\");\n       return ret;\n     }\n \n     ret \u003d pinfo;\n     try {\n       String str \u003d in.readLine(); // only one line\n       Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n       boolean mat \u003d m.find();\n       if (mat) {\n         // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n         pinfo.updateProcessInfo(m.group(2), m.group(3),\n                 Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                 Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                 Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n       } else {\n         LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n             + \" for process with pid \" + pinfo.getPid());\n         ret \u003d null;\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n       ret \u003d null;\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,\n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, pinfo.getPid());\n      fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "ca2dc3e78507288f4e6a7b652de150c5e172b037": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4570. ProcfsBasedProcessTree#constructProcessInfo() prints a warning if procfsDir/\u003cpid\u003e/stat is not found. (Ahmed Radwan via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375687 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/12 10:46 AM",
      "commitName": "ca2dc3e78507288f4e6a7b652de150c5e172b037",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 13.52,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                     String procfsDir) {\n     ProcessInfo ret \u003d null;\n     // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n     BufferedReader in \u003d null;\n     FileReader fReader \u003d null;\n     try {\n       File pidDir \u003d new File(procfsDir, pinfo.getPid());\n       fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n       in \u003d new BufferedReader(fReader);\n     } catch (FileNotFoundException f) {\n       // The process vanished in the interim!\n-      LOG.warn(\"The process \" + pinfo.getPid()\n+      LOG.info(\"The process \" + pinfo.getPid()\n           + \" may have finished in the interim.\");\n       return ret;\n     }\n \n     ret \u003d pinfo;\n     try {\n       String str \u003d in.readLine(); // only one line\n       Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n       boolean mat \u003d m.find();\n       if (mat) {\n         // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n         pinfo.updateProcessInfo(m.group(2), m.group(3),\n                 Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                 Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                 Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n       } else {\n         LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n             + \" for process with pid \" + pinfo.getPid());\n         ret \u003d null;\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n       ret \u003d null;\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, pinfo.getPid());\n      fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.info(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, pinfo.getPid());\n      fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.warn(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
      }
    },
    "b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3583. Change pid to String and stime to BigInteger in order to handle integers larger than Long.MAX_VALUE.  Contributed by Zhihong Yu\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1245828 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/02/12 5:12 PM",
      "commitName": "b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "29/08/11 4:27 PM",
      "commitNameOld": "fb6ecb9b27798a923ca290ba5d23368e3a820a6c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 172.07,
      "commitsBetweenForRepo": 1095,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                     String procfsDir) {\n     ProcessInfo ret \u003d null;\n     // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n     BufferedReader in \u003d null;\n     FileReader fReader \u003d null;\n     try {\n-      File pidDir \u003d new File(procfsDir, String.valueOf(pinfo.getPid()));\n+      File pidDir \u003d new File(procfsDir, pinfo.getPid());\n       fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n       in \u003d new BufferedReader(fReader);\n     } catch (FileNotFoundException f) {\n       // The process vanished in the interim!\n       LOG.warn(\"The process \" + pinfo.getPid()\n           + \" may have finished in the interim.\");\n       return ret;\n     }\n \n     ret \u003d pinfo;\n     try {\n       String str \u003d in.readLine(); // only one line\n       Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n       boolean mat \u003d m.find();\n       if (mat) {\n         // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n-        pinfo.updateProcessInfo(m.group(2), Integer.parseInt(m.group(3)),\n+        pinfo.updateProcessInfo(m.group(2), m.group(3),\n                 Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n-                Long.parseLong(m.group(7)), Long.parseLong(m.group(8)),\n+                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                 Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n       } else {\n         LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n             + \" for process with pid \" + pinfo.getPid());\n         ret \u003d null;\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n       ret \u003d null;\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, pinfo.getPid());\n      fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.warn(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), m.group(3),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), new BigInteger(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, String.valueOf(pinfo.getPid()));\n      fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.warn(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), Integer.parseInt(m.group(3)),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), Long.parseLong(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,52 @@\n+  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n+                                                    String procfsDir) {\n+    ProcessInfo ret \u003d null;\n+    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n+    BufferedReader in \u003d null;\n+    FileReader fReader \u003d null;\n+    try {\n+      File pidDir \u003d new File(procfsDir, String.valueOf(pinfo.getPid()));\n+      fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n+      in \u003d new BufferedReader(fReader);\n+    } catch (FileNotFoundException f) {\n+      // The process vanished in the interim!\n+      LOG.warn(\"The process \" + pinfo.getPid()\n+          + \" may have finished in the interim.\");\n+      return ret;\n+    }\n+\n+    ret \u003d pinfo;\n+    try {\n+      String str \u003d in.readLine(); // only one line\n+      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n+      boolean mat \u003d m.find();\n+      if (mat) {\n+        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n+        pinfo.updateProcessInfo(m.group(2), Integer.parseInt(m.group(3)),\n+                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n+                Long.parseLong(m.group(7)), Long.parseLong(m.group(8)),\n+                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n+      } else {\n+        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n+            + \" for process with pid \" + pinfo.getPid());\n+        ret \u003d null;\n+      }\n+    } catch (IOException io) {\n+      LOG.warn(\"Error reading the stream \" + io);\n+      ret \u003d null;\n+    } finally {\n+      // Close the streams\n+      try {\n+        fReader.close();\n+        try {\n+          in.close();\n+        } catch (IOException i) {\n+          LOG.warn(\"Error closing the stream \" + in);\n+        }\n+      } catch (IOException i) {\n+        LOG.warn(\"Error closing the stream \" + fReader);\n+      }\n+    }\n+\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, \n                                                    String procfsDir) {\n    ProcessInfo ret \u003d null;\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    BufferedReader in \u003d null;\n    FileReader fReader \u003d null;\n    try {\n      File pidDir \u003d new File(procfsDir, String.valueOf(pinfo.getPid()));\n      fReader \u003d new FileReader(new File(pidDir, PROCFS_STAT_FILE));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      // The process vanished in the interim!\n      LOG.warn(\"The process \" + pinfo.getPid()\n          + \" may have finished in the interim.\");\n      return ret;\n    }\n\n    ret \u003d pinfo;\n    try {\n      String str \u003d in.readLine(); // only one line\n      Matcher m \u003d PROCFS_STAT_FILE_FORMAT.matcher(str);\n      boolean mat \u003d m.find();\n      if (mat) {\n        // Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)\n        pinfo.updateProcessInfo(m.group(2), Integer.parseInt(m.group(3)),\n                Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)),\n                Long.parseLong(m.group(7)), Long.parseLong(m.group(8)),\n                Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\n      } else {\n        LOG.warn(\"Unexpected: procfs stat file is not in the expected format\"\n            + \" for process with pid \" + pinfo.getPid());\n        ret \u003d null;\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n      ret \u003d null;\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
    }
  }
}