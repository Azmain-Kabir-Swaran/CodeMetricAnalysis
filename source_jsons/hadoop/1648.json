{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslDataTransferClient.java",
  "functionName": "handle",
  "functionId": "handle___callbacks-Callback[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
  "functionStartLine": 374,
  "functionEndLine": 400,
  "numCommitsSeen": 17,
  "timeTaken": 3304,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "3b54223c0f32d42a84436c670d80b791a8e9696d",
    "9b4a7900c7dfc0590316eedaa97144f938885651"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Yfilerename",
    "3b54223c0f32d42a84436c670d80b791a8e9696d": "Ymultichange(Ymovefromfile,Ybodychange)",
    "9b4a7900c7dfc0590316eedaa97144f938885651": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 3:32 PM",
      "commitNameOld": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 29.84,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n     public void handle(Callback[] callbacks) throws IOException,\n         UnsupportedCallbackException {\n       NameCallback nc \u003d null;\n       PasswordCallback pc \u003d null;\n       RealmCallback rc \u003d null;\n       for (Callback callback : callbacks) {\n-        if (callback instanceof RealmChoiceCallback) {\n-          continue;\n-        } else if (callback instanceof NameCallback) {\n+        if (callback instanceof NameCallback) {\n           nc \u003d (NameCallback) callback;\n         } else if (callback instanceof PasswordCallback) {\n           pc \u003d (PasswordCallback) callback;\n         } else if (callback instanceof RealmCallback) {\n           rc \u003d (RealmCallback) callback;\n-        } else {\n+        } else if (!(callback instanceof RealmChoiceCallback)) {\n           throw new UnsupportedCallbackException(callback,\n               \"Unrecognized SASL client callback\");\n         }\n       }\n       if (nc !\u003d null) {\n         nc.setName(userName);\n       }\n       if (pc !\u003d null) {\n         pc.setPassword(password);\n       }\n       if (rc !\u003d null) {\n         rc.setText(rc.getDefaultText());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(Callback[] callbacks) throws IOException,\n        UnsupportedCallbackException {\n      NameCallback nc \u003d null;\n      PasswordCallback pc \u003d null;\n      RealmCallback rc \u003d null;\n      for (Callback callback : callbacks) {\n        if (callback instanceof NameCallback) {\n          nc \u003d (NameCallback) callback;\n        } else if (callback instanceof PasswordCallback) {\n          pc \u003d (PasswordCallback) callback;\n        } else if (callback instanceof RealmCallback) {\n          rc \u003d (RealmCallback) callback;\n        } else if (!(callback instanceof RealmChoiceCallback)) {\n          throw new UnsupportedCallbackException(callback,\n              \"Unrecognized SASL client callback\");\n        }\n      }\n      if (nc !\u003d null) {\n        nc.setName(userName);\n      }\n      if (pc !\u003d null) {\n        pc.setPassword(password);\n      }\n      if (rc !\u003d null) {\n        rc.setText(rc.getDefaultText());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 1:26 PM",
      "commitNameOld": "c2d2c1802a11e3e11a953b23b0eccbf4d107de59",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void handle(Callback[] callbacks) throws IOException,\n        UnsupportedCallbackException {\n      NameCallback nc \u003d null;\n      PasswordCallback pc \u003d null;\n      RealmCallback rc \u003d null;\n      for (Callback callback : callbacks) {\n        if (callback instanceof RealmChoiceCallback) {\n          continue;\n        } else if (callback instanceof NameCallback) {\n          nc \u003d (NameCallback) callback;\n        } else if (callback instanceof PasswordCallback) {\n          pc \u003d (PasswordCallback) callback;\n        } else if (callback instanceof RealmCallback) {\n          rc \u003d (RealmCallback) callback;\n        } else {\n          throw new UnsupportedCallbackException(callback,\n              \"Unrecognized SASL client callback\");\n        }\n      }\n      if (nc !\u003d null) {\n        nc.setName(userName);\n      }\n      if (pc !\u003d null) {\n        pc.setPassword(password);\n      }\n      if (rc !\u003d null) {\n        rc.setText(rc.getDefaultText());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java"
      }
    },
    "3b54223c0f32d42a84436c670d80b791a8e9696d": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 11:10 AM",
      "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/07/14 11:10 AM",
          "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "14/07/14 10:51 AM",
          "commitNameOld": "425616861bd7e801fdcf0a113606ad81015b1861",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n     public void handle(Callback[] callbacks) throws IOException,\n         UnsupportedCallbackException {\n       NameCallback nc \u003d null;\n       PasswordCallback pc \u003d null;\n       RealmCallback rc \u003d null;\n       for (Callback callback : callbacks) {\n         if (callback instanceof RealmChoiceCallback) {\n           continue;\n         } else if (callback instanceof NameCallback) {\n           nc \u003d (NameCallback) callback;\n         } else if (callback instanceof PasswordCallback) {\n           pc \u003d (PasswordCallback) callback;\n         } else if (callback instanceof RealmCallback) {\n           rc \u003d (RealmCallback) callback;\n         } else {\n           throw new UnsupportedCallbackException(callback,\n               \"Unrecognized SASL client callback\");\n         }\n       }\n       if (nc !\u003d null) {\n         nc.setName(userName);\n       }\n       if (pc !\u003d null) {\n-        pc.setPassword(encryptionKeyToPassword(encryptionKey));\n+        pc.setPassword(password);\n       }\n       if (rc !\u003d null) {\n         rc.setText(rc.getDefaultText());\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void handle(Callback[] callbacks) throws IOException,\n        UnsupportedCallbackException {\n      NameCallback nc \u003d null;\n      PasswordCallback pc \u003d null;\n      RealmCallback rc \u003d null;\n      for (Callback callback : callbacks) {\n        if (callback instanceof RealmChoiceCallback) {\n          continue;\n        } else if (callback instanceof NameCallback) {\n          nc \u003d (NameCallback) callback;\n        } else if (callback instanceof PasswordCallback) {\n          pc \u003d (PasswordCallback) callback;\n        } else if (callback instanceof RealmCallback) {\n          rc \u003d (RealmCallback) callback;\n        } else {\n          throw new UnsupportedCallbackException(callback,\n              \"Unrecognized SASL client callback\");\n        }\n      }\n      if (nc !\u003d null) {\n        nc.setName(userName);\n      }\n      if (pc !\u003d null) {\n        pc.setPassword(password);\n      }\n      if (rc !\u003d null) {\n        rc.setText(rc.getDefaultText());\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/DataTransferEncryptor.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
            "oldMethodName": "handle",
            "newMethodName": "handle"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/07/14 11:10 AM",
          "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "14/07/14 10:51 AM",
          "commitNameOld": "425616861bd7e801fdcf0a113606ad81015b1861",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n     public void handle(Callback[] callbacks) throws IOException,\n         UnsupportedCallbackException {\n       NameCallback nc \u003d null;\n       PasswordCallback pc \u003d null;\n       RealmCallback rc \u003d null;\n       for (Callback callback : callbacks) {\n         if (callback instanceof RealmChoiceCallback) {\n           continue;\n         } else if (callback instanceof NameCallback) {\n           nc \u003d (NameCallback) callback;\n         } else if (callback instanceof PasswordCallback) {\n           pc \u003d (PasswordCallback) callback;\n         } else if (callback instanceof RealmCallback) {\n           rc \u003d (RealmCallback) callback;\n         } else {\n           throw new UnsupportedCallbackException(callback,\n               \"Unrecognized SASL client callback\");\n         }\n       }\n       if (nc !\u003d null) {\n         nc.setName(userName);\n       }\n       if (pc !\u003d null) {\n-        pc.setPassword(encryptionKeyToPassword(encryptionKey));\n+        pc.setPassword(password);\n       }\n       if (rc !\u003d null) {\n         rc.setText(rc.getDefaultText());\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void handle(Callback[] callbacks) throws IOException,\n        UnsupportedCallbackException {\n      NameCallback nc \u003d null;\n      PasswordCallback pc \u003d null;\n      RealmCallback rc \u003d null;\n      for (Callback callback : callbacks) {\n        if (callback instanceof RealmChoiceCallback) {\n          continue;\n        } else if (callback instanceof NameCallback) {\n          nc \u003d (NameCallback) callback;\n        } else if (callback instanceof PasswordCallback) {\n          pc \u003d (PasswordCallback) callback;\n        } else if (callback instanceof RealmCallback) {\n          rc \u003d (RealmCallback) callback;\n        } else {\n          throw new UnsupportedCallbackException(callback,\n              \"Unrecognized SASL client callback\");\n        }\n      }\n      if (nc !\u003d null) {\n        nc.setName(userName);\n      }\n      if (pc !\u003d null) {\n        pc.setPassword(password);\n      }\n      if (rc !\u003d null) {\n        rc.setText(rc.getDefaultText());\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "9b4a7900c7dfc0590316eedaa97144f938885651": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3637. Add support for encrypting the DataTransferProtocol. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370354 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 9:40 AM",
      "commitName": "9b4a7900c7dfc0590316eedaa97144f938885651",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,29 @@\n+    public void handle(Callback[] callbacks) throws IOException,\n+        UnsupportedCallbackException {\n+      NameCallback nc \u003d null;\n+      PasswordCallback pc \u003d null;\n+      RealmCallback rc \u003d null;\n+      for (Callback callback : callbacks) {\n+        if (callback instanceof RealmChoiceCallback) {\n+          continue;\n+        } else if (callback instanceof NameCallback) {\n+          nc \u003d (NameCallback) callback;\n+        } else if (callback instanceof PasswordCallback) {\n+          pc \u003d (PasswordCallback) callback;\n+        } else if (callback instanceof RealmCallback) {\n+          rc \u003d (RealmCallback) callback;\n+        } else {\n+          throw new UnsupportedCallbackException(callback,\n+              \"Unrecognized SASL client callback\");\n+        }\n+      }\n+      if (nc !\u003d null) {\n+        nc.setName(userName);\n+      }\n+      if (pc !\u003d null) {\n+        pc.setPassword(encryptionKeyToPassword(encryptionKey));\n+      }\n+      if (rc !\u003d null) {\n+        rc.setText(rc.getDefaultText());\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(Callback[] callbacks) throws IOException,\n        UnsupportedCallbackException {\n      NameCallback nc \u003d null;\n      PasswordCallback pc \u003d null;\n      RealmCallback rc \u003d null;\n      for (Callback callback : callbacks) {\n        if (callback instanceof RealmChoiceCallback) {\n          continue;\n        } else if (callback instanceof NameCallback) {\n          nc \u003d (NameCallback) callback;\n        } else if (callback instanceof PasswordCallback) {\n          pc \u003d (PasswordCallback) callback;\n        } else if (callback instanceof RealmCallback) {\n          rc \u003d (RealmCallback) callback;\n        } else {\n          throw new UnsupportedCallbackException(callback,\n              \"Unrecognized SASL client callback\");\n        }\n      }\n      if (nc !\u003d null) {\n        nc.setName(userName);\n      }\n      if (pc !\u003d null) {\n        pc.setPassword(encryptionKeyToPassword(encryptionKey));\n      }\n      if (rc !\u003d null) {\n        rc.setText(rc.getDefaultText());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/DataTransferEncryptor.java"
    }
  }
}