{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterRpcClient.java",
  "functionName": "invokeMethod",
  "functionId": "invokeMethod___ugi-UserGroupInformation(modifiers-final)__namenodes-List__? extends FederationNamenodeContext__(modifiers-final)__protocol-Class__?__(modifiers-final)__method-Method(modifiers-final)__params-Object(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
  "functionStartLine": 395,
  "functionEndLine": 519,
  "numCommitsSeen": 32,
  "timeTaken": 6584,
  "changeHistory": [
    "263413e83840c7795a988e3939cd292d020c8d5f",
    "8e779a151e20528ceda1b5b44812412f4ae7f83d",
    "6c42d4050461ab71c88f123569649793dc53aebd",
    "7e63e37dc5cbe330082a6a42598ffb76e0770fc1",
    "f3cbf0eb9ace860cb2da77b09042e2056ef9255f",
    "01ff8178148790f7b0112058cf08d23d031b6868",
    "2be64eb201134502a92f7239bef8aa780771ca0b",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "8896d20b91520053a6bbfb680adb345cd24f4142",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7"
  ],
  "changeHistoryShort": {
    "263413e83840c7795a988e3939cd292d020c8d5f": "Ybodychange",
    "8e779a151e20528ceda1b5b44812412f4ae7f83d": "Ybodychange",
    "6c42d4050461ab71c88f123569649793dc53aebd": "Ymultichange(Yexceptionschange,Ybodychange)",
    "7e63e37dc5cbe330082a6a42598ffb76e0770fc1": "Ybodychange",
    "f3cbf0eb9ace860cb2da77b09042e2056ef9255f": "Ybodychange",
    "01ff8178148790f7b0112058cf08d23d031b6868": "Ybodychange",
    "2be64eb201134502a92f7239bef8aa780771ca0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "8896d20b91520053a6bbfb680adb345cd24f4142": "Ybodychange",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": "Ybodychange",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "263413e83840c7795a988e3939cd292d020c8d5f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15112. RBF: Do not return FileNotFoundException when a subcluster is unavailable.\n",
      "commitDate": "16/01/20 10:39 AM",
      "commitName": "263413e83840c7795a988e3939cd292d020c8d5f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "01/11/19 10:14 AM",
      "commitNameOld": "f18bbdd9d84cc1a23d33524f5cb61321cdb1b926",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 76.06,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,125 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Class\u003c?\u003e protocol, final Method method, final Object... params)\n           throws ConnectException, StandbyException, IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n           \" with params \" + Arrays.deepToString(params) + \" from \"\n           + router.getRouterId());\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       String nsId \u003d namenode.getNameserviceId();\n       String rpcAddress \u003d namenode.getRpcAddress();\n       try {\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n         ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n         final Object proxy \u003d client.getProxy();\n \n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n-        } else if (ioe instanceof ConnectException ||\n-            ioe instanceof ConnectTimeoutException) {\n+        } else if (isUnavailableException(ioe)) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           RemoteException re \u003d (RemoteException) ioe;\n           ioe \u003d re.unwrapRemoteException();\n           ioe \u003d getCleanException(ioe);\n           // RemoteException returned by NN\n           throw ioe;\n         } else if (ioe instanceof ConnectionNullException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n           }\n           LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n               ioe.getMessage());\n           // Throw StandbyException so that client can retry\n           StandbyException se \u003d new StandbyException(ioe.getMessage());\n           se.initCause(ioe);\n           throw se;\n         } else if (ioe instanceof NoNamenodesAvailableException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpNoNamenodes();\n           }\n           LOG.error(\"Cannot get available namenode for {} {} error: {}\",\n               nsId, rpcAddress, ioe.getMessage());\n           // Throw RetriableException so that client can retry\n           throw new RetriableException(ioe);\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.deepToString(params) + \" in \" + namenodes + \" from \" +\n         router.getRouterId();\n     LOG.error(msg);\n     int exConnect \u003d 0;\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nnKey \u003d namenode.getNamenodeKey();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n         LOG.error(\"{} at {} is in Standby: {}\",\n             nnKey, addr, ioe.getMessage());\n-      } else if (ioe instanceof ConnectException ||\n-          ioe instanceof ConnectTimeoutException) {\n+      } else if (isUnavailableException(ioe)) {\n         exConnect++;\n         LOG.error(\"{} at {} cannot be reached: {}\",\n             nnKey, addr, ioe.getMessage());\n       } else {\n         LOG.error(\"{} at {} error: \\\"{}\\\"\", nnKey, addr, ioe.getMessage());\n       }\n     }\n     if (exConnect \u003d\u003d ioes.size()) {\n       throw new ConnectException(msg);\n     } else {\n       throw new StandbyException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws ConnectException, StandbyException, IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.deepToString(params) + \" from \"\n          + router.getRouterId());\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      String nsId \u003d namenode.getNameserviceId();\n      String rpcAddress \u003d namenode.getRpcAddress();\n      try {\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (isUnavailableException(ioe)) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          RemoteException re \u003d (RemoteException) ioe;\n          ioe \u003d re.unwrapRemoteException();\n          ioe \u003d getCleanException(ioe);\n          // RemoteException returned by NN\n          throw ioe;\n        } else if (ioe instanceof ConnectionNullException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n              ioe.getMessage());\n          // Throw StandbyException so that client can retry\n          StandbyException se \u003d new StandbyException(ioe.getMessage());\n          se.initCause(ioe);\n          throw se;\n        } else if (ioe instanceof NoNamenodesAvailableException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpNoNamenodes();\n          }\n          LOG.error(\"Cannot get available namenode for {} {} error: {}\",\n              nsId, rpcAddress, ioe.getMessage());\n          // Throw RetriableException so that client can retry\n          throw new RetriableException(ioe);\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.deepToString(params) + \" in \" + namenodes + \" from \" +\n        router.getRouterId();\n    LOG.error(msg);\n    int exConnect \u003d 0;\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nnKey \u003d namenode.getNamenodeKey();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} at {} is in Standby: {}\",\n            nnKey, addr, ioe.getMessage());\n      } else if (isUnavailableException(ioe)) {\n        exConnect++;\n        LOG.error(\"{} at {} cannot be reached: {}\",\n            nnKey, addr, ioe.getMessage());\n      } else {\n        LOG.error(\"{} at {} error: \\\"{}\\\"\", nnKey, addr, ioe.getMessage());\n      }\n    }\n    if (exConnect \u003d\u003d ioes.size()) {\n      throw new ConnectException(msg);\n    } else {\n      throw new StandbyException(msg);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "8e779a151e20528ceda1b5b44812412f4ae7f83d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14721. RBF: ProxyOpComplete is not accurate in FederationRPCPerformanceMonitor. Contributed by xuzq.\n",
      "commitDate": "29/08/19 7:38 AM",
      "commitName": "8e779a151e20528ceda1b5b44812412f4ae7f83d",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "28/08/19 10:48 AM",
      "commitNameOld": "48cb58390655b87506fb8b620e4aafd11e38bb34",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,124 +1,127 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Class\u003c?\u003e protocol, final Method method, final Object... params)\n           throws ConnectException, StandbyException, IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n           \" with params \" + Arrays.deepToString(params) + \" from \"\n           + router.getRouterId());\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       String nsId \u003d namenode.getNameserviceId();\n       String rpcAddress \u003d namenode.getRpcAddress();\n       try {\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n         ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n         final Object proxy \u003d client.getProxy();\n \n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof ConnectException ||\n             ioe instanceof ConnectTimeoutException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n+          RemoteException re \u003d (RemoteException) ioe;\n+          ioe \u003d re.unwrapRemoteException();\n+          ioe \u003d getCleanException(ioe);\n           // RemoteException returned by NN\n-          throw (RemoteException) ioe;\n+          throw ioe;\n         } else if (ioe instanceof ConnectionNullException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n           }\n           LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n               ioe.getMessage());\n           // Throw StandbyException so that client can retry\n           StandbyException se \u003d new StandbyException(ioe.getMessage());\n           se.initCause(ioe);\n           throw se;\n         } else if (ioe instanceof NoNamenodesAvailableException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpNoNamenodes();\n           }\n           LOG.error(\"Cannot get available namenode for {} {} error: {}\",\n               nsId, rpcAddress, ioe.getMessage());\n           // Throw RetriableException so that client can retry\n           throw new RetriableException(ioe);\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.deepToString(params) + \" in \" + namenodes + \" from \" +\n         router.getRouterId();\n     LOG.error(msg);\n     int exConnect \u003d 0;\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nnKey \u003d namenode.getNamenodeKey();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n         LOG.error(\"{} at {} is in Standby: {}\",\n             nnKey, addr, ioe.getMessage());\n       } else if (ioe instanceof ConnectException ||\n           ioe instanceof ConnectTimeoutException) {\n         exConnect++;\n         LOG.error(\"{} at {} cannot be reached: {}\",\n             nnKey, addr, ioe.getMessage());\n       } else {\n         LOG.error(\"{} at {} error: \\\"{}\\\"\", nnKey, addr, ioe.getMessage());\n       }\n     }\n     if (exConnect \u003d\u003d ioes.size()) {\n       throw new ConnectException(msg);\n     } else {\n       throw new StandbyException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws ConnectException, StandbyException, IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.deepToString(params) + \" from \"\n          + router.getRouterId());\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      String nsId \u003d namenode.getNameserviceId();\n      String rpcAddress \u003d namenode.getRpcAddress();\n      try {\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof ConnectException ||\n            ioe instanceof ConnectTimeoutException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          RemoteException re \u003d (RemoteException) ioe;\n          ioe \u003d re.unwrapRemoteException();\n          ioe \u003d getCleanException(ioe);\n          // RemoteException returned by NN\n          throw ioe;\n        } else if (ioe instanceof ConnectionNullException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n              ioe.getMessage());\n          // Throw StandbyException so that client can retry\n          StandbyException se \u003d new StandbyException(ioe.getMessage());\n          se.initCause(ioe);\n          throw se;\n        } else if (ioe instanceof NoNamenodesAvailableException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpNoNamenodes();\n          }\n          LOG.error(\"Cannot get available namenode for {} {} error: {}\",\n              nsId, rpcAddress, ioe.getMessage());\n          // Throw RetriableException so that client can retry\n          throw new RetriableException(ioe);\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.deepToString(params) + \" in \" + namenodes + \" from \" +\n        router.getRouterId();\n    LOG.error(msg);\n    int exConnect \u003d 0;\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nnKey \u003d namenode.getNamenodeKey();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} at {} is in Standby: {}\",\n            nnKey, addr, ioe.getMessage());\n      } else if (ioe instanceof ConnectException ||\n          ioe instanceof ConnectTimeoutException) {\n        exConnect++;\n        LOG.error(\"{} at {} cannot be reached: {}\",\n            nnKey, addr, ioe.getMessage());\n      } else {\n        LOG.error(\"{} at {} error: \\\"{}\\\"\", nnKey, addr, ioe.getMessage());\n      }\n    }\n    if (exConnect \u003d\u003d ioes.size()) {\n      throw new ConnectException(msg);\n    } else {\n      throw new StandbyException(msg);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "6c42d4050461ab71c88f123569649793dc53aebd": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
      "commitAuthor": "Ayush Saxena",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "50aee18a84fcbca38be4272cfa0d33aadafe076d",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,109 +1,124 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Class\u003c?\u003e protocol, final Method method, final Object... params)\n-          throws IOException {\n+          throws ConnectException, StandbyException, IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n-          \" with params \" + Arrays.toString(params) + \" from \"\n+          \" with params \" + Arrays.deepToString(params) + \" from \"\n           + router.getRouterId());\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       String nsId \u003d namenode.getNameserviceId();\n       String rpcAddress \u003d namenode.getRpcAddress();\n       try {\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n         ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n         final Object proxy \u003d client.getProxy();\n \n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n+        } else if (ioe instanceof ConnectException ||\n+            ioe instanceof ConnectTimeoutException) {\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpFailureCommunicate();\n+          }\n+          failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n         } else if (ioe instanceof ConnectionNullException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n           }\n           LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n               ioe.getMessage());\n           // Throw StandbyException so that client can retry\n           StandbyException se \u003d new StandbyException(ioe.getMessage());\n           se.initCause(ioe);\n           throw se;\n         } else if (ioe instanceof NoNamenodesAvailableException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpNoNamenodes();\n           }\n-          LOG.error(\"Can not get available namenode for {} {} error: {}\",\n+          LOG.error(\"Cannot get available namenode for {} {} error: {}\",\n               nsId, rpcAddress, ioe.getMessage());\n           // Throw RetriableException so that client can retry\n           throw new RetriableException(ioe);\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n-        Arrays.toString(params);\n+        Arrays.deepToString(params) + \" in \" + namenodes + \" from \" +\n+        router.getRouterId();\n     LOG.error(msg);\n+    int exConnect \u003d 0;\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n-      String nsId \u003d namenode.getNameserviceId();\n-      String nnId \u003d namenode.getNamenodeId();\n+      String nnKey \u003d namenode.getNamenodeKey();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n-        LOG.error(\"{} {} at {} is in Standby: {}\", nsId, nnId, addr,\n-            ioe.getMessage());\n+        LOG.error(\"{} at {} is in Standby: {}\",\n+            nnKey, addr, ioe.getMessage());\n+      } else if (ioe instanceof ConnectException ||\n+          ioe instanceof ConnectTimeoutException) {\n+        exConnect++;\n+        LOG.error(\"{} at {} cannot be reached: {}\",\n+            nnKey, addr, ioe.getMessage());\n       } else {\n-        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n-            nsId, nnId, addr, ioe.getMessage());\n+        LOG.error(\"{} at {} error: \\\"{}\\\"\", nnKey, addr, ioe.getMessage());\n       }\n     }\n-    throw new StandbyException(msg);\n+    if (exConnect \u003d\u003d ioes.size()) {\n+      throw new ConnectException(msg);\n+    } else {\n+      throw new StandbyException(msg);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws ConnectException, StandbyException, IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.deepToString(params) + \" from \"\n          + router.getRouterId());\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      String nsId \u003d namenode.getNameserviceId();\n      String rpcAddress \u003d namenode.getRpcAddress();\n      try {\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof ConnectException ||\n            ioe instanceof ConnectTimeoutException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else if (ioe instanceof ConnectionNullException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n              ioe.getMessage());\n          // Throw StandbyException so that client can retry\n          StandbyException se \u003d new StandbyException(ioe.getMessage());\n          se.initCause(ioe);\n          throw se;\n        } else if (ioe instanceof NoNamenodesAvailableException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpNoNamenodes();\n          }\n          LOG.error(\"Cannot get available namenode for {} {} error: {}\",\n              nsId, rpcAddress, ioe.getMessage());\n          // Throw RetriableException so that client can retry\n          throw new RetriableException(ioe);\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.deepToString(params) + \" in \" + namenodes + \" from \" +\n        router.getRouterId();\n    LOG.error(msg);\n    int exConnect \u003d 0;\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nnKey \u003d namenode.getNamenodeKey();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} at {} is in Standby: {}\",\n            nnKey, addr, ioe.getMessage());\n      } else if (ioe instanceof ConnectException ||\n          ioe instanceof ConnectTimeoutException) {\n        exConnect++;\n        LOG.error(\"{} at {} cannot be reached: {}\",\n            nnKey, addr, ioe.getMessage());\n      } else {\n        LOG.error(\"{} at {} error: \\\"{}\\\"\", nnKey, addr, ioe.getMessage());\n      }\n    }\n    if (exConnect \u003d\u003d ioes.size()) {\n      throw new ConnectException(msg);\n    } else {\n      throw new StandbyException(msg);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[ConnectException, StandbyException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "50aee18a84fcbca38be4272cfa0d33aadafe076d",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,109 +1,124 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Class\u003c?\u003e protocol, final Method method, final Object... params)\n-          throws IOException {\n+          throws ConnectException, StandbyException, IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n-          \" with params \" + Arrays.toString(params) + \" from \"\n+          \" with params \" + Arrays.deepToString(params) + \" from \"\n           + router.getRouterId());\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       String nsId \u003d namenode.getNameserviceId();\n       String rpcAddress \u003d namenode.getRpcAddress();\n       try {\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n         ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n         final Object proxy \u003d client.getProxy();\n \n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n+        } else if (ioe instanceof ConnectException ||\n+            ioe instanceof ConnectTimeoutException) {\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpFailureCommunicate();\n+          }\n+          failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n         } else if (ioe instanceof ConnectionNullException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n           }\n           LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n               ioe.getMessage());\n           // Throw StandbyException so that client can retry\n           StandbyException se \u003d new StandbyException(ioe.getMessage());\n           se.initCause(ioe);\n           throw se;\n         } else if (ioe instanceof NoNamenodesAvailableException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpNoNamenodes();\n           }\n-          LOG.error(\"Can not get available namenode for {} {} error: {}\",\n+          LOG.error(\"Cannot get available namenode for {} {} error: {}\",\n               nsId, rpcAddress, ioe.getMessage());\n           // Throw RetriableException so that client can retry\n           throw new RetriableException(ioe);\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n-        Arrays.toString(params);\n+        Arrays.deepToString(params) + \" in \" + namenodes + \" from \" +\n+        router.getRouterId();\n     LOG.error(msg);\n+    int exConnect \u003d 0;\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n-      String nsId \u003d namenode.getNameserviceId();\n-      String nnId \u003d namenode.getNamenodeId();\n+      String nnKey \u003d namenode.getNamenodeKey();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n-        LOG.error(\"{} {} at {} is in Standby: {}\", nsId, nnId, addr,\n-            ioe.getMessage());\n+        LOG.error(\"{} at {} is in Standby: {}\",\n+            nnKey, addr, ioe.getMessage());\n+      } else if (ioe instanceof ConnectException ||\n+          ioe instanceof ConnectTimeoutException) {\n+        exConnect++;\n+        LOG.error(\"{} at {} cannot be reached: {}\",\n+            nnKey, addr, ioe.getMessage());\n       } else {\n-        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n-            nsId, nnId, addr, ioe.getMessage());\n+        LOG.error(\"{} at {} error: \\\"{}\\\"\", nnKey, addr, ioe.getMessage());\n       }\n     }\n-    throw new StandbyException(msg);\n+    if (exConnect \u003d\u003d ioes.size()) {\n+      throw new ConnectException(msg);\n+    } else {\n+      throw new StandbyException(msg);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws ConnectException, StandbyException, IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.deepToString(params) + \" from \"\n          + router.getRouterId());\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      String nsId \u003d namenode.getNameserviceId();\n      String rpcAddress \u003d namenode.getRpcAddress();\n      try {\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof ConnectException ||\n            ioe instanceof ConnectTimeoutException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else if (ioe instanceof ConnectionNullException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n              ioe.getMessage());\n          // Throw StandbyException so that client can retry\n          StandbyException se \u003d new StandbyException(ioe.getMessage());\n          se.initCause(ioe);\n          throw se;\n        } else if (ioe instanceof NoNamenodesAvailableException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpNoNamenodes();\n          }\n          LOG.error(\"Cannot get available namenode for {} {} error: {}\",\n              nsId, rpcAddress, ioe.getMessage());\n          // Throw RetriableException so that client can retry\n          throw new RetriableException(ioe);\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.deepToString(params) + \" in \" + namenodes + \" from \" +\n        router.getRouterId();\n    LOG.error(msg);\n    int exConnect \u003d 0;\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nnKey \u003d namenode.getNamenodeKey();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} at {} is in Standby: {}\",\n            nnKey, addr, ioe.getMessage());\n      } else if (ioe instanceof ConnectException ||\n          ioe instanceof ConnectTimeoutException) {\n        exConnect++;\n        LOG.error(\"{} at {} cannot be reached: {}\",\n            nnKey, addr, ioe.getMessage());\n      } else {\n        LOG.error(\"{} at {} error: \\\"{}\\\"\", nnKey, addr, ioe.getMessage());\n      }\n    }\n    if (exConnect \u003d\u003d ioes.size()) {\n      throw new ConnectException(msg);\n    } else {\n      throw new StandbyException(msg);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "7e63e37dc5cbe330082a6a42598ffb76e0770fc1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14230. RBF: Throw RetriableException instead of IOException when no namenodes available. Contributed by Fei Hui.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "7e63e37dc5cbe330082a6a42598ffb76e0770fc1",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "912b90f91e11a183e47d9271dec089e25f159dee",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,109 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Class\u003c?\u003e protocol, final Method method, final Object... params)\n           throws IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n           \" with params \" + Arrays.toString(params) + \" from \"\n           + router.getRouterId());\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       String nsId \u003d namenode.getNameserviceId();\n       String rpcAddress \u003d namenode.getRpcAddress();\n       try {\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n         ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n         final Object proxy \u003d client.getProxy();\n \n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n         } else if (ioe instanceof ConnectionNullException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n           }\n           LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n               ioe.getMessage());\n           // Throw StandbyException so that client can retry\n           StandbyException se \u003d new StandbyException(ioe.getMessage());\n           se.initCause(ioe);\n           throw se;\n+        } else if (ioe instanceof NoNamenodesAvailableException) {\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpNoNamenodes();\n+          }\n+          LOG.error(\"Can not get available namenode for {} {} error: {}\",\n+              nsId, rpcAddress, ioe.getMessage());\n+          // Throw RetriableException so that client can retry\n+          throw new RetriableException(ioe);\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.toString(params);\n     LOG.error(msg);\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nsId \u003d namenode.getNameserviceId();\n       String nnId \u003d namenode.getNamenodeId();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n         LOG.error(\"{} {} at {} is in Standby: {}\", nsId, nnId, addr,\n             ioe.getMessage());\n       } else {\n         LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n             nsId, nnId, addr, ioe.getMessage());\n       }\n     }\n     throw new StandbyException(msg);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \"\n          + router.getRouterId());\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      String nsId \u003d namenode.getNameserviceId();\n      String rpcAddress \u003d namenode.getRpcAddress();\n      try {\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else if (ioe instanceof ConnectionNullException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n              ioe.getMessage());\n          // Throw StandbyException so that client can retry\n          StandbyException se \u003d new StandbyException(ioe.getMessage());\n          se.initCause(ioe);\n          throw se;\n        } else if (ioe instanceof NoNamenodesAvailableException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpNoNamenodes();\n          }\n          LOG.error(\"Can not get available namenode for {} {} error: {}\",\n              nsId, rpcAddress, ioe.getMessage());\n          // Throw RetriableException so that client can retry\n          throw new RetriableException(ioe);\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby: {}\", nsId, nnId, addr,\n            ioe.getMessage());\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "f3cbf0eb9ace860cb2da77b09042e2056ef9255f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14161. RBF: Throw StandbyException instead of IOException so that client can retry when can not get connection. Contributed by Fei Hui.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "f3cbf0eb9ace860cb2da77b09042e2056ef9255f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "6f2c871b05b97ea0e18f3c431af8b0d606f88561",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,101 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Class\u003c?\u003e protocol, final Method method, final Object... params)\n           throws IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n           \" with params \" + Arrays.toString(params) + \" from \"\n           + router.getRouterId());\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n+      String nsId \u003d namenode.getNameserviceId();\n+      String rpcAddress \u003d namenode.getRpcAddress();\n       try {\n-        String nsId \u003d namenode.getNameserviceId();\n-        String rpcAddress \u003d namenode.getRpcAddress();\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n         ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n         final Object proxy \u003d client.getProxy();\n \n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n+        } else if (ioe instanceof ConnectionNullException) {\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpFailureCommunicate();\n+          }\n+          LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n+              ioe.getMessage());\n+          // Throw StandbyException so that client can retry\n+          StandbyException se \u003d new StandbyException(ioe.getMessage());\n+          se.initCause(ioe);\n+          throw se;\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.toString(params);\n     LOG.error(msg);\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nsId \u003d namenode.getNameserviceId();\n       String nnId \u003d namenode.getNamenodeId();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n-        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n+        LOG.error(\"{} {} at {} is in Standby: {}\", nsId, nnId, addr,\n+            ioe.getMessage());\n       } else {\n         LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n             nsId, nnId, addr, ioe.getMessage());\n       }\n     }\n     throw new StandbyException(msg);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \"\n          + router.getRouterId());\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      String nsId \u003d namenode.getNameserviceId();\n      String rpcAddress \u003d namenode.getRpcAddress();\n      try {\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else if (ioe instanceof ConnectionNullException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n          }\n          LOG.error(\"Get connection for {} {} error: {}\", nsId, rpcAddress,\n              ioe.getMessage());\n          // Throw StandbyException so that client can retry\n          StandbyException se \u003d new StandbyException(ioe.getMessage());\n          se.initCause(ioe);\n          throw se;\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby: {}\", nsId, nnId, addr,\n            ioe.getMessage());\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "01ff8178148790f7b0112058cf08d23d031b6868": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13750. RBF: Router ID in RouterRpcClient is always null. Contributed by Takanobu Asanuma.\n",
      "commitDate": "20/08/18 8:01 AM",
      "commitName": "01ff8178148790f7b0112058cf08d23d031b6868",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "01/05/18 11:49 PM",
      "commitNameOld": "37269261d1232bc71708f30c76193188258ef4bd",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 110.34,
      "commitsBetweenForRepo": 835,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,90 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Class\u003c?\u003e protocol, final Method method, final Object... params)\n           throws IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n-          \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n+          \" with params \" + Arrays.toString(params) + \" from \"\n+          + router.getRouterId());\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       try {\n         String nsId \u003d namenode.getNameserviceId();\n         String rpcAddress \u003d namenode.getRpcAddress();\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n         ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n         final Object proxy \u003d client.getProxy();\n \n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.toString(params);\n     LOG.error(msg);\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nsId \u003d namenode.getNameserviceId();\n       String nnId \u003d namenode.getNamenodeId();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n         LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n       } else {\n         LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n             nsId, nnId, addr, ioe.getMessage());\n       }\n     }\n     throw new StandbyException(msg);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \"\n          + router.getRouterId());\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      try {\n        String nsId \u003d namenode.getNameserviceId();\n        String rpcAddress \u003d namenode.getRpcAddress();\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "2be64eb201134502a92f7239bef8aa780771ca0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
      "commitDate": "03/04/18 12:08 AM",
      "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
          "commitDate": "03/04/18 12:08 AM",
          "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "20/03/18 8:32 PM",
          "commitNameOld": "2caba999bbb9d6e3ec56024a0a9d3d56a229edcf",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 13.15,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,89 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n-      final Method method, final Object... params) throws IOException {\n+      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n+          throws IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n           \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       try {\n         String nsId \u003d namenode.getNameserviceId();\n         String rpcAddress \u003d namenode.getRpcAddress();\n-        connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n-        ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n-        ClientProtocol proxy \u003d client.getProxy();\n+        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n+        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n+        final Object proxy \u003d client.getProxy();\n+\n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.toString(params);\n     LOG.error(msg);\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nsId \u003d namenode.getNameserviceId();\n       String nnId \u003d namenode.getNamenodeId();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n         LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n       } else {\n         LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n             nsId, nnId, addr, ioe.getMessage());\n       }\n     }\n     throw new StandbyException(msg);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      try {\n        String nsId \u003d namenode.getNameserviceId();\n        String rpcAddress \u003d namenode.getRpcAddress();\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), namenodes-List\u003c? extends FederationNamenodeContext\u003e(modifiers-final), method-Method(modifiers-final), params-Object(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), namenodes-List\u003c? extends FederationNamenodeContext\u003e(modifiers-final), protocol-Class\u003c?\u003e(modifiers-final), method-Method(modifiers-final), params-Object(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
          "commitDate": "03/04/18 12:08 AM",
          "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "20/03/18 8:32 PM",
          "commitNameOld": "2caba999bbb9d6e3ec56024a0a9d3d56a229edcf",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 13.15,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,89 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n-      final Method method, final Object... params) throws IOException {\n+      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n+          throws IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n           \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       try {\n         String nsId \u003d namenode.getNameserviceId();\n         String rpcAddress \u003d namenode.getRpcAddress();\n-        connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n-        ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n-        ClientProtocol proxy \u003d client.getProxy();\n+        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n+        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n+        final Object proxy \u003d client.getProxy();\n+\n         ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.toString(params);\n     LOG.error(msg);\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nsId \u003d namenode.getNameserviceId();\n       String nnId \u003d namenode.getNamenodeId();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n         LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n       } else {\n         LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n             nsId, nnId, addr, ioe.getMessage());\n       }\n     }\n     throw new StandbyException(msg);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Class\u003c?\u003e protocol, final Method method, final Object... params)\n          throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      try {\n        String nsId \u003d namenode.getNameserviceId();\n        String rpcAddress \u003d namenode.getRpcAddress();\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress, protocol);\n        ProxyAndInfo\u003c?\u003e client \u003d connection.getClient();\n        final Object proxy \u003d client.getProxy();\n\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Method method, final Object... params) throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      try {\n        String nsId \u003d namenode.getNameserviceId();\n        String rpcAddress \u003d namenode.getRpcAddress();\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n        ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n        ClientProtocol proxy \u003d client.getProxy();\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java"
      }
    },
    "8896d20b91520053a6bbfb680adb345cd24f4142": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13119. RBF: Manage unavailable clusters. Contributed by Yiqun Lin.\n",
      "commitDate": "19/02/18 5:37 PM",
      "commitName": "8896d20b91520053a6bbfb680adb345cd24f4142",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "12/01/18 4:25 PM",
      "commitNameOld": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 38.05,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Method method, final Object... params) throws IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n           \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n     }\n \n     Object ret \u003d null;\n     if (rpcMonitor !\u003d null) {\n       rpcMonitor.proxyOp();\n     }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       try {\n         String nsId \u003d namenode.getNameserviceId();\n         String rpcAddress \u003d namenode.getRpcAddress();\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n         ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n         ClientProtocol proxy \u003d client.getProxy();\n-        ret \u003d invoke(0, method, proxy, params);\n+        ret \u003d invoke(nsId, 0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n         if (this.rpcMonitor !\u003d null) {\n           this.rpcMonitor.proxyOpComplete(true);\n         }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureStandby();\n           }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpComplete(true);\n           }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpFailureCommunicate();\n             this.rpcMonitor.proxyOpComplete(false);\n           }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n     if (this.rpcMonitor !\u003d null) {\n       this.rpcMonitor.proxyOpComplete(false);\n     }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.toString(params);\n     LOG.error(msg);\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nsId \u003d namenode.getNameserviceId();\n       String nnId \u003d namenode.getNamenodeId();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n         LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n       } else {\n         LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n             nsId, nnId, addr, ioe.getMessage());\n       }\n     }\n     throw new StandbyException(msg);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Method method, final Object... params) throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      try {\n        String nsId \u003d namenode.getNameserviceId();\n        String rpcAddress \u003d namenode.getRpcAddress();\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n        ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n        ClientProtocol proxy \u003d client.getProxy();\n        ret \u003d invoke(nsId, 0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12335. Federation Metrics. Contributed by Inigo Goiri.\n\n(cherry picked from commit 3b19e77752afce87936f5c0d1e6d272fba798d7b)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "ca4f209b49e3aad6a80306f7342c9b6b560a79a7",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,87 @@\n   private Object invokeMethod(\n       final UserGroupInformation ugi,\n       final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n       final Method method, final Object... params) throws IOException {\n \n     if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n       throw new IOException(\"No namenodes to invoke \" + method.getName() +\n           \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n     }\n \n     Object ret \u003d null;\n+    if (rpcMonitor !\u003d null) {\n+      rpcMonitor.proxyOp();\n+    }\n     boolean failover \u003d false;\n     Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n     for (FederationNamenodeContext namenode : namenodes) {\n       ConnectionContext connection \u003d null;\n       try {\n         String nsId \u003d namenode.getNameserviceId();\n         String rpcAddress \u003d namenode.getRpcAddress();\n         connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n         ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n         ClientProtocol proxy \u003d client.getProxy();\n         ret \u003d invoke(0, method, proxy, params);\n         if (failover) {\n           // Success on alternate server, update\n           InetSocketAddress address \u003d client.getAddress();\n           namenodeResolver.updateActiveNamenode(nsId, address);\n         }\n+        if (this.rpcMonitor !\u003d null) {\n+          this.rpcMonitor.proxyOpComplete(true);\n+        }\n         return ret;\n       } catch (IOException ioe) {\n         ioes.put(namenode, ioe);\n         if (ioe instanceof StandbyException) {\n           // Fail over indicated by retry policy and/or NN\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpFailureStandby();\n+          }\n           failover \u003d true;\n         } else if (ioe instanceof RemoteException) {\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpComplete(true);\n+          }\n           // RemoteException returned by NN\n           throw (RemoteException) ioe;\n         } else {\n           // Other communication error, this is a failure\n           // Communication retries are handled by the retry policy\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpFailureCommunicate();\n+            this.rpcMonitor.proxyOpComplete(false);\n+          }\n           throw ioe;\n         }\n       } finally {\n         if (connection !\u003d null) {\n           connection.release();\n         }\n       }\n     }\n+    if (this.rpcMonitor !\u003d null) {\n+      this.rpcMonitor.proxyOpComplete(false);\n+    }\n \n     // All namenodes were unavailable or in standby\n     String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n         Arrays.toString(params);\n     LOG.error(msg);\n     for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n         ioes.entrySet()) {\n       FederationNamenodeContext namenode \u003d entry.getKey();\n       String nsId \u003d namenode.getNameserviceId();\n       String nnId \u003d namenode.getNamenodeId();\n       String addr \u003d namenode.getRpcAddress();\n       IOException ioe \u003d entry.getValue();\n       if (ioe instanceof StandbyException) {\n         LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n       } else {\n         LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n             nsId, nnId, addr, ioe.getMessage());\n       }\n     }\n     throw new StandbyException(msg);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Method method, final Object... params) throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n    }\n\n    Object ret \u003d null;\n    if (rpcMonitor !\u003d null) {\n      rpcMonitor.proxyOp();\n    }\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      try {\n        String nsId \u003d namenode.getNameserviceId();\n        String rpcAddress \u003d namenode.getRpcAddress();\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n        ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n        ClientProtocol proxy \u003d client.getProxy();\n        ret \u003d invoke(0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        if (this.rpcMonitor !\u003d null) {\n          this.rpcMonitor.proxyOpComplete(true);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureStandby();\n          }\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpComplete(true);\n          }\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpFailureCommunicate();\n            this.rpcMonitor.proxyOpComplete(false);\n          }\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n    if (this.rpcMonitor !\u003d null) {\n      this.rpcMonitor.proxyOpComplete(false);\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11546. Federation Router RPC server. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 8a9cdebebf26841a0f1e99fb08135f4597f2eba2)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "ca4f209b49e3aad6a80306f7342c9b6b560a79a7",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,68 @@\n+  private Object invokeMethod(\n+      final UserGroupInformation ugi,\n+      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n+      final Method method, final Object... params) throws IOException {\n+\n+    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n+      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n+          \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n+    }\n+\n+    Object ret \u003d null;\n+    boolean failover \u003d false;\n+    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n+    for (FederationNamenodeContext namenode : namenodes) {\n+      ConnectionContext connection \u003d null;\n+      try {\n+        String nsId \u003d namenode.getNameserviceId();\n+        String rpcAddress \u003d namenode.getRpcAddress();\n+        connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n+        ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n+        ClientProtocol proxy \u003d client.getProxy();\n+        ret \u003d invoke(0, method, proxy, params);\n+        if (failover) {\n+          // Success on alternate server, update\n+          InetSocketAddress address \u003d client.getAddress();\n+          namenodeResolver.updateActiveNamenode(nsId, address);\n+        }\n+        return ret;\n+      } catch (IOException ioe) {\n+        ioes.put(namenode, ioe);\n+        if (ioe instanceof StandbyException) {\n+          // Fail over indicated by retry policy and/or NN\n+          failover \u003d true;\n+        } else if (ioe instanceof RemoteException) {\n+          // RemoteException returned by NN\n+          throw (RemoteException) ioe;\n+        } else {\n+          // Other communication error, this is a failure\n+          // Communication retries are handled by the retry policy\n+          throw ioe;\n+        }\n+      } finally {\n+        if (connection !\u003d null) {\n+          connection.release();\n+        }\n+      }\n+    }\n+\n+    // All namenodes were unavailable or in standby\n+    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n+        Arrays.toString(params);\n+    LOG.error(msg);\n+    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n+        ioes.entrySet()) {\n+      FederationNamenodeContext namenode \u003d entry.getKey();\n+      String nsId \u003d namenode.getNameserviceId();\n+      String nnId \u003d namenode.getNamenodeId();\n+      String addr \u003d namenode.getRpcAddress();\n+      IOException ioe \u003d entry.getValue();\n+      if (ioe instanceof StandbyException) {\n+        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n+      } else {\n+        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n+            nsId, nnId, addr, ioe.getMessage());\n+      }\n+    }\n+    throw new StandbyException(msg);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invokeMethod(\n      final UserGroupInformation ugi,\n      final List\u003c? extends FederationNamenodeContext\u003e namenodes,\n      final Method method, final Object... params) throws IOException {\n\n    if (namenodes \u003d\u003d null || namenodes.isEmpty()) {\n      throw new IOException(\"No namenodes to invoke \" + method.getName() +\n          \" with params \" + Arrays.toString(params) + \" from \" + this.routerId);\n    }\n\n    Object ret \u003d null;\n    boolean failover \u003d false;\n    Map\u003cFederationNamenodeContext, IOException\u003e ioes \u003d new LinkedHashMap\u003c\u003e();\n    for (FederationNamenodeContext namenode : namenodes) {\n      ConnectionContext connection \u003d null;\n      try {\n        String nsId \u003d namenode.getNameserviceId();\n        String rpcAddress \u003d namenode.getRpcAddress();\n        connection \u003d this.getConnection(ugi, nsId, rpcAddress);\n        ProxyAndInfo\u003cClientProtocol\u003e client \u003d connection.getClient();\n        ClientProtocol proxy \u003d client.getProxy();\n        ret \u003d invoke(0, method, proxy, params);\n        if (failover) {\n          // Success on alternate server, update\n          InetSocketAddress address \u003d client.getAddress();\n          namenodeResolver.updateActiveNamenode(nsId, address);\n        }\n        return ret;\n      } catch (IOException ioe) {\n        ioes.put(namenode, ioe);\n        if (ioe instanceof StandbyException) {\n          // Fail over indicated by retry policy and/or NN\n          failover \u003d true;\n        } else if (ioe instanceof RemoteException) {\n          // RemoteException returned by NN\n          throw (RemoteException) ioe;\n        } else {\n          // Other communication error, this is a failure\n          // Communication retries are handled by the retry policy\n          throw ioe;\n        }\n      } finally {\n        if (connection !\u003d null) {\n          connection.release();\n        }\n      }\n    }\n\n    // All namenodes were unavailable or in standby\n    String msg \u003d \"No namenode available to invoke \" + method.getName() + \" \" +\n        Arrays.toString(params);\n    LOG.error(msg);\n    for (Entry\u003cFederationNamenodeContext, IOException\u003e entry :\n        ioes.entrySet()) {\n      FederationNamenodeContext namenode \u003d entry.getKey();\n      String nsId \u003d namenode.getNameserviceId();\n      String nnId \u003d namenode.getNamenodeId();\n      String addr \u003d namenode.getRpcAddress();\n      IOException ioe \u003d entry.getValue();\n      if (ioe instanceof StandbyException) {\n        LOG.error(\"{} {} at {} is in Standby\", nsId, nnId, addr);\n      } else {\n        LOG.error(\"{} {} at {} error: \\\"{}\\\"\",\n            nsId, nnId, addr, ioe.getMessage());\n      }\n    }\n    throw new StandbyException(msg);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java"
    }
  }
}