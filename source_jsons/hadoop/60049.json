{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SerializedExceptionPBImpl.java",
  "functionName": "instantiateExceptionImpl",
  "functionId": "instantiateExceptionImpl___message-String__cls-Class__? extends T____cause-Throwable",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/SerializedExceptionPBImpl.java",
  "functionStartLine": 161,
  "functionEndLine": 174,
  "numCommitsSeen": 6,
  "timeTaken": 2536,
  "changeHistory": [
    "b381f88c71d18497deb35039372b1e9715d2c038",
    "3ca3137179ef093e42cde06587c9ea785b10f32c"
  ],
  "changeHistoryShort": {
    "b381f88c71d18497deb35039372b1e9715d2c038": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange)",
    "3ca3137179ef093e42cde06587c9ea785b10f32c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b381f88c71d18497deb35039372b1e9715d2c038": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-3745. SerializedException should also try to instantiate internal\nexception with the default constructor. Contributed by Lavkesh Lahngir.\n",
      "commitDate": "25/06/15 5:08 AM",
      "commitName": "b381f88c71d18497deb35039372b1e9715d2c038",
      "commitAuthor": "Devaraj K",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3745. SerializedException should also try to instantiate internal\nexception with the default constructor. Contributed by Lavkesh Lahngir.\n",
          "commitDate": "25/06/15 5:08 AM",
          "commitName": "b381f88c71d18497deb35039372b1e9715d2c038",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "02/06/14 1:15 AM",
          "commitNameOld": "790cbbf3e22dc634b722562d68ae3f11c7d8327f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 388.16,
          "commitsBetweenForRepo": 3323,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,14 @@\n-  private static \u003cT extends Throwable\u003e T instantiateException(\n-      Class\u003c? extends T\u003e cls, String message, Throwable cause) {\n+  private static \u003cT extends Throwable\u003e T instantiateExceptionImpl(\n+      String message, Class\u003c? extends T\u003e cls, Throwable cause)\n+      throws NoSuchMethodException, InstantiationException,\n+      IllegalAccessException, InvocationTargetException {\n     Constructor\u003c? extends T\u003e cn;\n     T ex \u003d null;\n-    try {\n-      cn \u003d cls.getConstructor(String.class);\n-      cn.setAccessible(true);\n-      ex \u003d cn.newInstance(message);\n-      ex.initCause(cause);\n-    } catch (SecurityException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (NoSuchMethodException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (IllegalArgumentException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (InstantiationException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (IllegalAccessException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (InvocationTargetException e) {\n-      throw new YarnRuntimeException(e);\n-    }\n+    cn \u003d\n+        cls.getConstructor(message \u003d\u003d null ? new Class[0]\n+            : new Class[] {String.class});\n+    cn.setAccessible(true);\n+    ex \u003d message \u003d\u003d null ? cn.newInstance() : cn.newInstance(message);\n+    ex.initCause(cause);\n     return ex;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT extends Throwable\u003e T instantiateExceptionImpl(\n      String message, Class\u003c? extends T\u003e cls, Throwable cause)\n      throws NoSuchMethodException, InstantiationException,\n      IllegalAccessException, InvocationTargetException {\n    Constructor\u003c? extends T\u003e cn;\n    T ex \u003d null;\n    cn \u003d\n        cls.getConstructor(message \u003d\u003d null ? new Class[0]\n            : new Class[] {String.class});\n    cn.setAccessible(true);\n    ex \u003d message \u003d\u003d null ? cn.newInstance() : cn.newInstance(message);\n    ex.initCause(cause);\n    return ex;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/SerializedExceptionPBImpl.java",
          "extendedDetails": {
            "oldValue": "instantiateException",
            "newValue": "instantiateExceptionImpl"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3745. SerializedException should also try to instantiate internal\nexception with the default constructor. Contributed by Lavkesh Lahngir.\n",
          "commitDate": "25/06/15 5:08 AM",
          "commitName": "b381f88c71d18497deb35039372b1e9715d2c038",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "02/06/14 1:15 AM",
          "commitNameOld": "790cbbf3e22dc634b722562d68ae3f11c7d8327f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 388.16,
          "commitsBetweenForRepo": 3323,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,14 @@\n-  private static \u003cT extends Throwable\u003e T instantiateException(\n-      Class\u003c? extends T\u003e cls, String message, Throwable cause) {\n+  private static \u003cT extends Throwable\u003e T instantiateExceptionImpl(\n+      String message, Class\u003c? extends T\u003e cls, Throwable cause)\n+      throws NoSuchMethodException, InstantiationException,\n+      IllegalAccessException, InvocationTargetException {\n     Constructor\u003c? extends T\u003e cn;\n     T ex \u003d null;\n-    try {\n-      cn \u003d cls.getConstructor(String.class);\n-      cn.setAccessible(true);\n-      ex \u003d cn.newInstance(message);\n-      ex.initCause(cause);\n-    } catch (SecurityException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (NoSuchMethodException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (IllegalArgumentException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (InstantiationException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (IllegalAccessException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (InvocationTargetException e) {\n-      throw new YarnRuntimeException(e);\n-    }\n+    cn \u003d\n+        cls.getConstructor(message \u003d\u003d null ? new Class[0]\n+            : new Class[] {String.class});\n+    cn.setAccessible(true);\n+    ex \u003d message \u003d\u003d null ? cn.newInstance() : cn.newInstance(message);\n+    ex.initCause(cause);\n     return ex;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT extends Throwable\u003e T instantiateExceptionImpl(\n      String message, Class\u003c? extends T\u003e cls, Throwable cause)\n      throws NoSuchMethodException, InstantiationException,\n      IllegalAccessException, InvocationTargetException {\n    Constructor\u003c? extends T\u003e cn;\n    T ex \u003d null;\n    cn \u003d\n        cls.getConstructor(message \u003d\u003d null ? new Class[0]\n            : new Class[] {String.class});\n    cn.setAccessible(true);\n    ex \u003d message \u003d\u003d null ? cn.newInstance() : cn.newInstance(message);\n    ex.initCause(cause);\n    return ex;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/SerializedExceptionPBImpl.java",
          "extendedDetails": {
            "oldValue": "[cls-Class\u003c? extends T\u003e, message-String, cause-Throwable]",
            "newValue": "[message-String, cls-Class\u003c? extends T\u003e, cause-Throwable]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-3745. SerializedException should also try to instantiate internal\nexception with the default constructor. Contributed by Lavkesh Lahngir.\n",
          "commitDate": "25/06/15 5:08 AM",
          "commitName": "b381f88c71d18497deb35039372b1e9715d2c038",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "02/06/14 1:15 AM",
          "commitNameOld": "790cbbf3e22dc634b722562d68ae3f11c7d8327f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 388.16,
          "commitsBetweenForRepo": 3323,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,14 @@\n-  private static \u003cT extends Throwable\u003e T instantiateException(\n-      Class\u003c? extends T\u003e cls, String message, Throwable cause) {\n+  private static \u003cT extends Throwable\u003e T instantiateExceptionImpl(\n+      String message, Class\u003c? extends T\u003e cls, Throwable cause)\n+      throws NoSuchMethodException, InstantiationException,\n+      IllegalAccessException, InvocationTargetException {\n     Constructor\u003c? extends T\u003e cn;\n     T ex \u003d null;\n-    try {\n-      cn \u003d cls.getConstructor(String.class);\n-      cn.setAccessible(true);\n-      ex \u003d cn.newInstance(message);\n-      ex.initCause(cause);\n-    } catch (SecurityException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (NoSuchMethodException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (IllegalArgumentException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (InstantiationException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (IllegalAccessException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (InvocationTargetException e) {\n-      throw new YarnRuntimeException(e);\n-    }\n+    cn \u003d\n+        cls.getConstructor(message \u003d\u003d null ? new Class[0]\n+            : new Class[] {String.class});\n+    cn.setAccessible(true);\n+    ex \u003d message \u003d\u003d null ? cn.newInstance() : cn.newInstance(message);\n+    ex.initCause(cause);\n     return ex;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT extends Throwable\u003e T instantiateExceptionImpl(\n      String message, Class\u003c? extends T\u003e cls, Throwable cause)\n      throws NoSuchMethodException, InstantiationException,\n      IllegalAccessException, InvocationTargetException {\n    Constructor\u003c? extends T\u003e cn;\n    T ex \u003d null;\n    cn \u003d\n        cls.getConstructor(message \u003d\u003d null ? new Class[0]\n            : new Class[] {String.class});\n    cn.setAccessible(true);\n    ex \u003d message \u003d\u003d null ? cn.newInstance() : cn.newInstance(message);\n    ex.initCause(cause);\n    return ex;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/SerializedExceptionPBImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3745. SerializedException should also try to instantiate internal\nexception with the default constructor. Contributed by Lavkesh Lahngir.\n",
          "commitDate": "25/06/15 5:08 AM",
          "commitName": "b381f88c71d18497deb35039372b1e9715d2c038",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "02/06/14 1:15 AM",
          "commitNameOld": "790cbbf3e22dc634b722562d68ae3f11c7d8327f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 388.16,
          "commitsBetweenForRepo": 3323,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,14 @@\n-  private static \u003cT extends Throwable\u003e T instantiateException(\n-      Class\u003c? extends T\u003e cls, String message, Throwable cause) {\n+  private static \u003cT extends Throwable\u003e T instantiateExceptionImpl(\n+      String message, Class\u003c? extends T\u003e cls, Throwable cause)\n+      throws NoSuchMethodException, InstantiationException,\n+      IllegalAccessException, InvocationTargetException {\n     Constructor\u003c? extends T\u003e cn;\n     T ex \u003d null;\n-    try {\n-      cn \u003d cls.getConstructor(String.class);\n-      cn.setAccessible(true);\n-      ex \u003d cn.newInstance(message);\n-      ex.initCause(cause);\n-    } catch (SecurityException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (NoSuchMethodException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (IllegalArgumentException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (InstantiationException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (IllegalAccessException e) {\n-      throw new YarnRuntimeException(e);\n-    } catch (InvocationTargetException e) {\n-      throw new YarnRuntimeException(e);\n-    }\n+    cn \u003d\n+        cls.getConstructor(message \u003d\u003d null ? new Class[0]\n+            : new Class[] {String.class});\n+    cn.setAccessible(true);\n+    ex \u003d message \u003d\u003d null ? cn.newInstance() : cn.newInstance(message);\n+    ex.initCause(cause);\n     return ex;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT extends Throwable\u003e T instantiateExceptionImpl(\n      String message, Class\u003c? extends T\u003e cls, Throwable cause)\n      throws NoSuchMethodException, InstantiationException,\n      IllegalAccessException, InvocationTargetException {\n    Constructor\u003c? extends T\u003e cn;\n    T ex \u003d null;\n    cn \u003d\n        cls.getConstructor(message \u003d\u003d null ? new Class[0]\n            : new Class[] {String.class});\n    cn.setAccessible(true);\n    ex \u003d message \u003d\u003d null ? cn.newInstance() : cn.newInstance(message);\n    ex.initCause(cause);\n    return ex;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/SerializedExceptionPBImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "3ca3137179ef093e42cde06587c9ea785b10f32c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/13 8:41 PM",
      "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,24 @@\n+  private static \u003cT extends Throwable\u003e T instantiateException(\n+      Class\u003c? extends T\u003e cls, String message, Throwable cause) {\n+    Constructor\u003c? extends T\u003e cn;\n+    T ex \u003d null;\n+    try {\n+      cn \u003d cls.getConstructor(String.class);\n+      cn.setAccessible(true);\n+      ex \u003d cn.newInstance(message);\n+      ex.initCause(cause);\n+    } catch (SecurityException e) {\n+      throw new YarnRuntimeException(e);\n+    } catch (NoSuchMethodException e) {\n+      throw new YarnRuntimeException(e);\n+    } catch (IllegalArgumentException e) {\n+      throw new YarnRuntimeException(e);\n+    } catch (InstantiationException e) {\n+      throw new YarnRuntimeException(e);\n+    } catch (IllegalAccessException e) {\n+      throw new YarnRuntimeException(e);\n+    } catch (InvocationTargetException e) {\n+      throw new YarnRuntimeException(e);\n+    }\n+    return ex;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static \u003cT extends Throwable\u003e T instantiateException(\n      Class\u003c? extends T\u003e cls, String message, Throwable cause) {\n    Constructor\u003c? extends T\u003e cn;\n    T ex \u003d null;\n    try {\n      cn \u003d cls.getConstructor(String.class);\n      cn.setAccessible(true);\n      ex \u003d cn.newInstance(message);\n      ex.initCause(cause);\n    } catch (SecurityException e) {\n      throw new YarnRuntimeException(e);\n    } catch (NoSuchMethodException e) {\n      throw new YarnRuntimeException(e);\n    } catch (IllegalArgumentException e) {\n      throw new YarnRuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new YarnRuntimeException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnRuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new YarnRuntimeException(e);\n    }\n    return ex;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/SerializedExceptionPBImpl.java"
    }
  }
}