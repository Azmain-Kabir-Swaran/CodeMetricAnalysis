{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "createAMForJob",
  "functionId": "createAMForJob___jsonJob-Map",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 477,
  "functionEndLine": 524,
  "numCommitsSeen": 40,
  "timeTaken": 2908,
  "changeHistory": [
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
    "99880d0a16727c770da053464da87960c5b02065",
    "0ba8cda13549cc4a3946c440016f9d2a9e78740d",
    "147df300bf00b5f4ed250426b6ccdd69085466da",
    "3082552b3b991df846caf572b58e44308ddf8eeb",
    "475f933b41276b1bdeeec09e30369120f7eccdb8"
  ],
  "changeHistoryShort": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": "Ybodychange",
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a": "Ybodychange",
    "99880d0a16727c770da053464da87960c5b02065": "Ybodychange",
    "0ba8cda13549cc4a3946c440016f9d2a9e78740d": "Ybodychange",
    "147df300bf00b5f4ed250426b6ccdd69085466da": "Ybodychange",
    "3082552b3b991df846caf572b58e44308ddf8eeb": "Ybodychange",
    "475f933b41276b1bdeeec09e30369120f7eccdb8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
      "commitDate": "31/07/18 9:36 AM",
      "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "26/04/18 1:52 PM",
      "commitNameOld": "2adda92de1535c0472c0df33a145fa1814703f4f",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 95.82,
      "commitsBetweenForRepo": 689,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,48 @@\n   private void createAMForJob(Map jsonJob) throws YarnException {\n     long jobStartTime \u003d Long.parseLong(\n         jsonJob.get(SLSConfiguration.JOB_START_MS).toString());\n \n     long jobFinishTime \u003d 0;\n     if (jsonJob.containsKey(SLSConfiguration.JOB_END_MS)) {\n       jobFinishTime \u003d Long.parseLong(\n           jsonJob.get(SLSConfiguration.JOB_END_MS).toString());\n     }\n \n+    String jobLabelExpr \u003d null;\n+    if (jsonJob.containsKey(SLSConfiguration.JOB_LABEL_EXPR)) {\n+      jobLabelExpr \u003d jsonJob.get(SLSConfiguration.JOB_LABEL_EXPR).toString();\n+    }\n+\n     String user \u003d (String) jsonJob.get(SLSConfiguration.JOB_USER);\n     if (user \u003d\u003d null) {\n       user \u003d \"default\";\n     }\n \n     String queue \u003d jsonJob.get(SLSConfiguration.JOB_QUEUE_NAME).toString();\n     increaseQueueAppNum(queue);\n \n     String amType \u003d (String)jsonJob.get(SLSConfiguration.AM_TYPE);\n     if (amType \u003d\u003d null) {\n       amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n     }\n \n     int jobCount \u003d 1;\n     if (jsonJob.containsKey(SLSConfiguration.JOB_COUNT)) {\n       jobCount \u003d Integer.parseInt(\n           jsonJob.get(SLSConfiguration.JOB_COUNT).toString());\n     }\n     jobCount \u003d Math.max(jobCount, 1);\n \n     String oldAppId \u003d (String)jsonJob.get(SLSConfiguration.JOB_ID);\n     // Job id is generated automatically if this job configuration allows\n     // multiple job instances\n     if(jobCount \u003e 1) {\n       oldAppId \u003d null;\n     }\n \n     for (int i \u003d 0; i \u003c jobCount; i++) {\n       runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n-          getTaskContainers(jsonJob), getAMContainerResource(jsonJob));\n+          getTaskContainers(jsonJob), getAMContainerResource(jsonJob),\n+          jobLabelExpr);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(Map jsonJob) throws YarnException {\n    long jobStartTime \u003d Long.parseLong(\n        jsonJob.get(SLSConfiguration.JOB_START_MS).toString());\n\n    long jobFinishTime \u003d 0;\n    if (jsonJob.containsKey(SLSConfiguration.JOB_END_MS)) {\n      jobFinishTime \u003d Long.parseLong(\n          jsonJob.get(SLSConfiguration.JOB_END_MS).toString());\n    }\n\n    String jobLabelExpr \u003d null;\n    if (jsonJob.containsKey(SLSConfiguration.JOB_LABEL_EXPR)) {\n      jobLabelExpr \u003d jsonJob.get(SLSConfiguration.JOB_LABEL_EXPR).toString();\n    }\n\n    String user \u003d (String) jsonJob.get(SLSConfiguration.JOB_USER);\n    if (user \u003d\u003d null) {\n      user \u003d \"default\";\n    }\n\n    String queue \u003d jsonJob.get(SLSConfiguration.JOB_QUEUE_NAME).toString();\n    increaseQueueAppNum(queue);\n\n    String amType \u003d (String)jsonJob.get(SLSConfiguration.AM_TYPE);\n    if (amType \u003d\u003d null) {\n      amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n    }\n\n    int jobCount \u003d 1;\n    if (jsonJob.containsKey(SLSConfiguration.JOB_COUNT)) {\n      jobCount \u003d Integer.parseInt(\n          jsonJob.get(SLSConfiguration.JOB_COUNT).toString());\n    }\n    jobCount \u003d Math.max(jobCount, 1);\n\n    String oldAppId \u003d (String)jsonJob.get(SLSConfiguration.JOB_ID);\n    // Job id is generated automatically if this job configuration allows\n    // multiple job instances\n    if(jobCount \u003e 1) {\n      oldAppId \u003d null;\n    }\n\n    for (int i \u003d 0; i \u003c jobCount; i++) {\n      runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n          getTaskContainers(jsonJob), getAMContainerResource(jsonJob),\n          jobLabelExpr);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7798. Refactor SLS Reservation Creation. Contributed by Young Chen.\n",
      "commitDate": "25/01/18 1:06 PM",
      "commitName": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "09/11/17 12:09 PM",
      "commitNameOld": "ba8136615ab66c450884614557eddc6509d63b7c",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 77.04,
      "commitsBetweenForRepo": 408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void createAMForJob(Map jsonJob) throws YarnException {\n     long jobStartTime \u003d Long.parseLong(\n         jsonJob.get(SLSConfiguration.JOB_START_MS).toString());\n \n     long jobFinishTime \u003d 0;\n     if (jsonJob.containsKey(SLSConfiguration.JOB_END_MS)) {\n       jobFinishTime \u003d Long.parseLong(\n           jsonJob.get(SLSConfiguration.JOB_END_MS).toString());\n     }\n \n     String user \u003d (String) jsonJob.get(SLSConfiguration.JOB_USER);\n     if (user \u003d\u003d null) {\n       user \u003d \"default\";\n     }\n \n     String queue \u003d jsonJob.get(SLSConfiguration.JOB_QUEUE_NAME).toString();\n     increaseQueueAppNum(queue);\n \n     String amType \u003d (String)jsonJob.get(SLSConfiguration.AM_TYPE);\n     if (amType \u003d\u003d null) {\n       amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n     }\n \n     int jobCount \u003d 1;\n     if (jsonJob.containsKey(SLSConfiguration.JOB_COUNT)) {\n       jobCount \u003d Integer.parseInt(\n           jsonJob.get(SLSConfiguration.JOB_COUNT).toString());\n     }\n     jobCount \u003d Math.max(jobCount, 1);\n \n     String oldAppId \u003d (String)jsonJob.get(SLSConfiguration.JOB_ID);\n     // Job id is generated automatically if this job configuration allows\n     // multiple job instances\n     if(jobCount \u003e 1) {\n       oldAppId \u003d null;\n     }\n \n     for (int i \u003d 0; i \u003c jobCount; i++) {\n       runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n-          getTaskContainers(jsonJob), null, getAMContainerResource(jsonJob));\n+          getTaskContainers(jsonJob), getAMContainerResource(jsonJob));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(Map jsonJob) throws YarnException {\n    long jobStartTime \u003d Long.parseLong(\n        jsonJob.get(SLSConfiguration.JOB_START_MS).toString());\n\n    long jobFinishTime \u003d 0;\n    if (jsonJob.containsKey(SLSConfiguration.JOB_END_MS)) {\n      jobFinishTime \u003d Long.parseLong(\n          jsonJob.get(SLSConfiguration.JOB_END_MS).toString());\n    }\n\n    String user \u003d (String) jsonJob.get(SLSConfiguration.JOB_USER);\n    if (user \u003d\u003d null) {\n      user \u003d \"default\";\n    }\n\n    String queue \u003d jsonJob.get(SLSConfiguration.JOB_QUEUE_NAME).toString();\n    increaseQueueAppNum(queue);\n\n    String amType \u003d (String)jsonJob.get(SLSConfiguration.AM_TYPE);\n    if (amType \u003d\u003d null) {\n      amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n    }\n\n    int jobCount \u003d 1;\n    if (jsonJob.containsKey(SLSConfiguration.JOB_COUNT)) {\n      jobCount \u003d Integer.parseInt(\n          jsonJob.get(SLSConfiguration.JOB_COUNT).toString());\n    }\n    jobCount \u003d Math.max(jobCount, 1);\n\n    String oldAppId \u003d (String)jsonJob.get(SLSConfiguration.JOB_ID);\n    // Job id is generated automatically if this job configuration allows\n    // multiple job instances\n    if(jobCount \u003e 1) {\n      oldAppId \u003d null;\n    }\n\n    for (int i \u003d 0; i \u003c jobCount; i++) {\n      runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n          getTaskContainers(jsonJob), getAMContainerResource(jsonJob));\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "99880d0a16727c770da053464da87960c5b02065": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6505. Define the strings used in SLS JSON input file format. (Contributed by Gergely Novak)\n",
      "commitDate": "27/10/17 2:41 PM",
      "commitName": "99880d0a16727c770da053464da87960c5b02065",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "17/10/17 4:04 PM",
      "commitNameOld": "46eb1033a86ca53e7b94202567aef8af2417bdf8",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 9.94,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n   private void createAMForJob(Map jsonJob) throws YarnException {\n-    long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n+    long jobStartTime \u003d Long.parseLong(\n+        jsonJob.get(SLSConfiguration.JOB_START_MS).toString());\n \n     long jobFinishTime \u003d 0;\n-    if (jsonJob.containsKey(\"job.end.ms\")) {\n-      jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n+    if (jsonJob.containsKey(SLSConfiguration.JOB_END_MS)) {\n+      jobFinishTime \u003d Long.parseLong(\n+          jsonJob.get(SLSConfiguration.JOB_END_MS).toString());\n     }\n \n-    String user \u003d (String) jsonJob.get(\"job.user\");\n+    String user \u003d (String) jsonJob.get(SLSConfiguration.JOB_USER);\n     if (user \u003d\u003d null) {\n       user \u003d \"default\";\n     }\n \n-    String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n+    String queue \u003d jsonJob.get(SLSConfiguration.JOB_QUEUE_NAME).toString();\n     increaseQueueAppNum(queue);\n \n-    String amType \u003d (String)jsonJob.get(\"am.type\");\n+    String amType \u003d (String)jsonJob.get(SLSConfiguration.AM_TYPE);\n     if (amType \u003d\u003d null) {\n       amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n     }\n \n     int jobCount \u003d 1;\n-    if (jsonJob.containsKey(\"job.count\")) {\n-      jobCount \u003d Integer.parseInt(jsonJob.get(\"job.count\").toString());\n+    if (jsonJob.containsKey(SLSConfiguration.JOB_COUNT)) {\n+      jobCount \u003d Integer.parseInt(\n+          jsonJob.get(SLSConfiguration.JOB_COUNT).toString());\n     }\n     jobCount \u003d Math.max(jobCount, 1);\n \n-    String oldAppId \u003d (String)jsonJob.get(\"job.id\");\n+    String oldAppId \u003d (String)jsonJob.get(SLSConfiguration.JOB_ID);\n     // Job id is generated automatically if this job configuration allows\n     // multiple job instances\n     if(jobCount \u003e 1) {\n       oldAppId \u003d null;\n     }\n \n     for (int i \u003d 0; i \u003c jobCount; i++) {\n       runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n           getTaskContainers(jsonJob), null, getAMContainerResource(jsonJob));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(Map jsonJob) throws YarnException {\n    long jobStartTime \u003d Long.parseLong(\n        jsonJob.get(SLSConfiguration.JOB_START_MS).toString());\n\n    long jobFinishTime \u003d 0;\n    if (jsonJob.containsKey(SLSConfiguration.JOB_END_MS)) {\n      jobFinishTime \u003d Long.parseLong(\n          jsonJob.get(SLSConfiguration.JOB_END_MS).toString());\n    }\n\n    String user \u003d (String) jsonJob.get(SLSConfiguration.JOB_USER);\n    if (user \u003d\u003d null) {\n      user \u003d \"default\";\n    }\n\n    String queue \u003d jsonJob.get(SLSConfiguration.JOB_QUEUE_NAME).toString();\n    increaseQueueAppNum(queue);\n\n    String amType \u003d (String)jsonJob.get(SLSConfiguration.AM_TYPE);\n    if (amType \u003d\u003d null) {\n      amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n    }\n\n    int jobCount \u003d 1;\n    if (jsonJob.containsKey(SLSConfiguration.JOB_COUNT)) {\n      jobCount \u003d Integer.parseInt(\n          jsonJob.get(SLSConfiguration.JOB_COUNT).toString());\n    }\n    jobCount \u003d Math.max(jobCount, 1);\n\n    String oldAppId \u003d (String)jsonJob.get(SLSConfiguration.JOB_ID);\n    // Job id is generated automatically if this job configuration allows\n    // multiple job instances\n    if(jobCount \u003e 1) {\n      oldAppId \u003d null;\n    }\n\n    for (int i \u003d 0; i \u003c jobCount; i++) {\n      runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n          getTaskContainers(jsonJob), null, getAMContainerResource(jsonJob));\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "0ba8cda13549cc4a3946c440016f9d2a9e78740d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6685. Add job count in to SLS JSON input format. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "20/07/17 8:15 AM",
      "commitName": "0ba8cda13549cc4a3946c440016f9d2a9e78740d",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "30/06/17 5:03 PM",
      "commitNameOld": "147df300bf00b5f4ed250426b6ccdd69085466da",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 19.63,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,39 @@\n   private void createAMForJob(Map jsonJob) throws YarnException {\n     long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n \n     long jobFinishTime \u003d 0;\n     if (jsonJob.containsKey(\"job.end.ms\")) {\n       jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n     }\n \n     String user \u003d (String) jsonJob.get(\"job.user\");\n     if (user \u003d\u003d null) {\n       user \u003d \"default\";\n     }\n \n     String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n     increaseQueueAppNum(queue);\n \n-    String oldAppId \u003d (String)jsonJob.get(\"job.id\");\n-    if (oldAppId \u003d\u003d null) {\n-      oldAppId \u003d Integer.toString(AM_ID);\n-    }\n-\n     String amType \u003d (String)jsonJob.get(\"am.type\");\n     if (amType \u003d\u003d null) {\n       amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n     }\n \n-    runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n-        getTaskContainers(jsonJob), null, getAMContainerResource(jsonJob));\n+    int jobCount \u003d 1;\n+    if (jsonJob.containsKey(\"job.count\")) {\n+      jobCount \u003d Integer.parseInt(jsonJob.get(\"job.count\").toString());\n+    }\n+    jobCount \u003d Math.max(jobCount, 1);\n+\n+    String oldAppId \u003d (String)jsonJob.get(\"job.id\");\n+    // Job id is generated automatically if this job configuration allows\n+    // multiple job instances\n+    if(jobCount \u003e 1) {\n+      oldAppId \u003d null;\n+    }\n+\n+    for (int i \u003d 0; i \u003c jobCount; i++) {\n+      runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n+          getTaskContainers(jsonJob), null, getAMContainerResource(jsonJob));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(Map jsonJob) throws YarnException {\n    long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n\n    long jobFinishTime \u003d 0;\n    if (jsonJob.containsKey(\"job.end.ms\")) {\n      jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n    }\n\n    String user \u003d (String) jsonJob.get(\"job.user\");\n    if (user \u003d\u003d null) {\n      user \u003d \"default\";\n    }\n\n    String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n    increaseQueueAppNum(queue);\n\n    String amType \u003d (String)jsonJob.get(\"am.type\");\n    if (amType \u003d\u003d null) {\n      amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n    }\n\n    int jobCount \u003d 1;\n    if (jsonJob.containsKey(\"job.count\")) {\n      jobCount \u003d Integer.parseInt(jsonJob.get(\"job.count\").toString());\n    }\n    jobCount \u003d Math.max(jobCount, 1);\n\n    String oldAppId \u003d (String)jsonJob.get(\"job.id\");\n    // Job id is generated automatically if this job configuration allows\n    // multiple job instances\n    if(jobCount \u003e 1) {\n      oldAppId \u003d null;\n    }\n\n    for (int i \u003d 0; i \u003c jobCount; i++) {\n      runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n          getTaskContainers(jsonJob), null, getAMContainerResource(jsonJob));\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "147df300bf00b5f4ed250426b6ccdd69085466da": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "30/06/17 5:03 PM",
      "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "19/06/17 9:18 PM",
      "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 10.82,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private void createAMForJob(Map jsonJob) throws YarnException {\n     long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n \n     long jobFinishTime \u003d 0;\n     if (jsonJob.containsKey(\"job.end.ms\")) {\n       jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n     }\n \n     String user \u003d (String) jsonJob.get(\"job.user\");\n     if (user \u003d\u003d null) {\n       user \u003d \"default\";\n     }\n \n     String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n     increaseQueueAppNum(queue);\n \n     String oldAppId \u003d (String)jsonJob.get(\"job.id\");\n     if (oldAppId \u003d\u003d null) {\n       oldAppId \u003d Integer.toString(AM_ID);\n     }\n \n     String amType \u003d (String)jsonJob.get(\"am.type\");\n     if (amType \u003d\u003d null) {\n       amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n     }\n \n     runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n-        getTaskContainers(jsonJob), null);\n+        getTaskContainers(jsonJob), null, getAMContainerResource(jsonJob));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(Map jsonJob) throws YarnException {\n    long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n\n    long jobFinishTime \u003d 0;\n    if (jsonJob.containsKey(\"job.end.ms\")) {\n      jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n    }\n\n    String user \u003d (String) jsonJob.get(\"job.user\");\n    if (user \u003d\u003d null) {\n      user \u003d \"default\";\n    }\n\n    String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n    increaseQueueAppNum(queue);\n\n    String oldAppId \u003d (String)jsonJob.get(\"job.id\");\n    if (oldAppId \u003d\u003d null) {\n      oldAppId \u003d Integer.toString(AM_ID);\n    }\n\n    String amType \u003d (String)jsonJob.get(\"am.type\");\n    if (amType \u003d\u003d null) {\n      amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n    }\n\n    runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n        getTaskContainers(jsonJob), null, getAMContainerResource(jsonJob));\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "3082552b3b991df846caf572b58e44308ddf8eeb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6522. Make SLS JSON input file format simple and scalable (yufeigu via rkanter)\n",
      "commitDate": "04/05/17 5:21 PM",
      "commitName": "3082552b3b991df846caf572b58e44308ddf8eeb",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "25/04/17 4:26 PM",
      "commitNameOld": "475f933b41276b1bdeeec09e30369120f7eccdb8",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 9.04,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,29 @@\n   private void createAMForJob(Map jsonJob) throws YarnException {\n     long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n-    long jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n+\n+    long jobFinishTime \u003d 0;\n+    if (jsonJob.containsKey(\"job.end.ms\")) {\n+      jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n+    }\n \n     String user \u003d (String) jsonJob.get(\"job.user\");\n     if (user \u003d\u003d null) {\n       user \u003d \"default\";\n     }\n \n     String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n     increaseQueueAppNum(queue);\n \n-    String oldAppId \u003d jsonJob.get(\"job.id\").toString();\n-\n-    // tasks\n-    List tasks \u003d (List) jsonJob.get(\"job.tasks\");\n-    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n-      throw new YarnException(\"No task for the job!\");\n+    String oldAppId \u003d (String)jsonJob.get(\"job.id\");\n+    if (oldAppId \u003d\u003d null) {\n+      oldAppId \u003d Integer.toString(AM_ID);\n     }\n \n-    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n-    for (Object o : tasks) {\n-      Map jsonTask \u003d (Map) o;\n-      String hostname \u003d jsonTask.get(\"container.host\").toString();\n-      long taskStart \u003d Long.parseLong(jsonTask.get(\"container.start.ms\")\n-          .toString());\n-      long taskFinish \u003d Long.parseLong(jsonTask.get(\"container.end.ms\")\n-          .toString());\n-      long lifeTime \u003d taskFinish - taskStart;\n-\n-      // Set memory and vcores from job trace file\n-      Resource res \u003d getDefaultContainerResource();\n-      if (jsonTask.containsKey(\"container.memory\")) {\n-        int containerMemory \u003d\n-            Integer.parseInt(jsonTask.get(\"container.memory\").toString());\n-        res.setMemorySize(containerMemory);\n-      }\n-\n-      if (jsonTask.containsKey(\"container.vcores\")) {\n-        int containerVCores \u003d\n-            Integer.parseInt(jsonTask.get(\"container.vcores\").toString());\n-        res.setVirtualCores(containerVCores);\n-      }\n-\n-      int priority \u003d Integer.parseInt(jsonTask.get(\"container.priority\")\n-          .toString());\n-      String type \u003d jsonTask.get(\"container.type\").toString();\n-      containerList.add(\n-          new ContainerSimulator(res, lifeTime, hostname, priority, type));\n+    String amType \u003d (String)jsonJob.get(\"am.type\");\n+    if (amType \u003d\u003d null) {\n+      amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n     }\n \n-    // create a new AM\n-    String amType \u003d jsonJob.get(\"am.type\").toString();\n     runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n-        containerList, null);\n+        getTaskContainers(jsonJob), null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(Map jsonJob) throws YarnException {\n    long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n\n    long jobFinishTime \u003d 0;\n    if (jsonJob.containsKey(\"job.end.ms\")) {\n      jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n    }\n\n    String user \u003d (String) jsonJob.get(\"job.user\");\n    if (user \u003d\u003d null) {\n      user \u003d \"default\";\n    }\n\n    String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n    increaseQueueAppNum(queue);\n\n    String oldAppId \u003d (String)jsonJob.get(\"job.id\");\n    if (oldAppId \u003d\u003d null) {\n      oldAppId \u003d Integer.toString(AM_ID);\n    }\n\n    String amType \u003d (String)jsonJob.get(\"am.type\");\n    if (amType \u003d\u003d null) {\n      amType \u003d SLSUtils.DEFAULT_JOB_TYPE;\n    }\n\n    runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n        getTaskContainers(jsonJob), null);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "475f933b41276b1bdeeec09e30369120f7eccdb8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6423. Queue metrics doesn\u0027t work for Fair Scheduler in SLS (yufeigu via rkanter)\n",
      "commitDate": "25/04/17 4:26 PM",
      "commitName": "475f933b41276b1bdeeec09e30369120f7eccdb8",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,56 @@\n+  private void createAMForJob(Map jsonJob) throws YarnException {\n+    long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n+    long jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n+\n+    String user \u003d (String) jsonJob.get(\"job.user\");\n+    if (user \u003d\u003d null) {\n+      user \u003d \"default\";\n+    }\n+\n+    String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n+    increaseQueueAppNum(queue);\n+\n+    String oldAppId \u003d jsonJob.get(\"job.id\").toString();\n+\n+    // tasks\n+    List tasks \u003d (List) jsonJob.get(\"job.tasks\");\n+    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n+      throw new YarnException(\"No task for the job!\");\n+    }\n+\n+    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n+    for (Object o : tasks) {\n+      Map jsonTask \u003d (Map) o;\n+      String hostname \u003d jsonTask.get(\"container.host\").toString();\n+      long taskStart \u003d Long.parseLong(jsonTask.get(\"container.start.ms\")\n+          .toString());\n+      long taskFinish \u003d Long.parseLong(jsonTask.get(\"container.end.ms\")\n+          .toString());\n+      long lifeTime \u003d taskFinish - taskStart;\n+\n+      // Set memory and vcores from job trace file\n+      Resource res \u003d getDefaultContainerResource();\n+      if (jsonTask.containsKey(\"container.memory\")) {\n+        int containerMemory \u003d\n+            Integer.parseInt(jsonTask.get(\"container.memory\").toString());\n+        res.setMemorySize(containerMemory);\n+      }\n+\n+      if (jsonTask.containsKey(\"container.vcores\")) {\n+        int containerVCores \u003d\n+            Integer.parseInt(jsonTask.get(\"container.vcores\").toString());\n+        res.setVirtualCores(containerVCores);\n+      }\n+\n+      int priority \u003d Integer.parseInt(jsonTask.get(\"container.priority\")\n+          .toString());\n+      String type \u003d jsonTask.get(\"container.type\").toString();\n+      containerList.add(\n+          new ContainerSimulator(res, lifeTime, hostname, priority, type));\n+    }\n+\n+    // create a new AM\n+    String amType \u003d jsonJob.get(\"am.type\").toString();\n+    runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n+        containerList, null);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(Map jsonJob) throws YarnException {\n    long jobStartTime \u003d Long.parseLong(jsonJob.get(\"job.start.ms\").toString());\n    long jobFinishTime \u003d Long.parseLong(jsonJob.get(\"job.end.ms\").toString());\n\n    String user \u003d (String) jsonJob.get(\"job.user\");\n    if (user \u003d\u003d null) {\n      user \u003d \"default\";\n    }\n\n    String queue \u003d jsonJob.get(\"job.queue.name\").toString();\n    increaseQueueAppNum(queue);\n\n    String oldAppId \u003d jsonJob.get(\"job.id\").toString();\n\n    // tasks\n    List tasks \u003d (List) jsonJob.get(\"job.tasks\");\n    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n      throw new YarnException(\"No task for the job!\");\n    }\n\n    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n    for (Object o : tasks) {\n      Map jsonTask \u003d (Map) o;\n      String hostname \u003d jsonTask.get(\"container.host\").toString();\n      long taskStart \u003d Long.parseLong(jsonTask.get(\"container.start.ms\")\n          .toString());\n      long taskFinish \u003d Long.parseLong(jsonTask.get(\"container.end.ms\")\n          .toString());\n      long lifeTime \u003d taskFinish - taskStart;\n\n      // Set memory and vcores from job trace file\n      Resource res \u003d getDefaultContainerResource();\n      if (jsonTask.containsKey(\"container.memory\")) {\n        int containerMemory \u003d\n            Integer.parseInt(jsonTask.get(\"container.memory\").toString());\n        res.setMemorySize(containerMemory);\n      }\n\n      if (jsonTask.containsKey(\"container.vcores\")) {\n        int containerVCores \u003d\n            Integer.parseInt(jsonTask.get(\"container.vcores\").toString());\n        res.setVirtualCores(containerVCores);\n      }\n\n      int priority \u003d Integer.parseInt(jsonTask.get(\"container.priority\")\n          .toString());\n      String type \u003d jsonTask.get(\"container.type\").toString();\n      containerList.add(\n          new ContainerSimulator(res, lifeTime, hostname, priority, type));\n    }\n\n    // create a new AM\n    String amType \u003d jsonJob.get(\"am.type\").toString();\n    runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,\n        containerList, null);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}