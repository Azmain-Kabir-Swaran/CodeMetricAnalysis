{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "releaseContainers",
  "functionId": "releaseContainers___containers-List__ContainerId____attempt-SchedulerApplicationAttempt",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 767,
  "functionEndLine": 789,
  "numCommitsSeen": 115,
  "timeTaken": 3027,
  "changeHistory": [
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78"
  ],
  "changeHistoryShort": {
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ybodychange",
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1": "Ybodychange",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/08/16 3:52 PM",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,23 @@\n   protected void releaseContainers(List\u003cContainerId\u003e containers,\n       SchedulerApplicationAttempt attempt) {\n     for (ContainerId containerId : containers) {\n       RMContainer rmContainer \u003d getRMContainer(containerId);\n       if (rmContainer \u003d\u003d null) {\n         if (System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n             \u003c nmExpireInterval) {\n           LOG.info(containerId + \" doesn\u0027t exist. Add the container\"\n               + \" to the release request cache as it maybe on recovery.\");\n-          synchronized (attempt) {\n-            attempt.getPendingRelease().add(containerId);\n-          }\n+          attempt.getPendingRelease().add(containerId);\n         } else {\n           RMAuditLogger.logFailure(attempt.getUser(),\n             AuditConstants.RELEASE_CONTAINER,\n             \"Unauthorized access or invalid container\", \"Scheduler\",\n             \"Trying to release container not owned by app or with invalid id.\",\n             attempt.getApplicationId(), containerId, null);\n         }\n       }\n       completedContainer(rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(containerId,\n           SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void releaseContainers(List\u003cContainerId\u003e containers,\n      SchedulerApplicationAttempt attempt) {\n    for (ContainerId containerId : containers) {\n      RMContainer rmContainer \u003d getRMContainer(containerId);\n      if (rmContainer \u003d\u003d null) {\n        if (System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n            \u003c nmExpireInterval) {\n          LOG.info(containerId + \" doesn\u0027t exist. Add the container\"\n              + \" to the release request cache as it maybe on recovery.\");\n          attempt.getPendingRelease().add(containerId);\n        } else {\n          RMAuditLogger.logFailure(attempt.getUser(),\n            AuditConstants.RELEASE_CONTAINER,\n            \"Unauthorized access or invalid container\", \"Scheduler\",\n            \"Trying to release container not owned by app or with invalid id.\",\n            attempt.getApplicationId(), containerId, null);\n        }\n      }\n      completedContainer(rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(containerId,\n          SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5003. Add container resource to RM audit log. Contributed by Nathan Roberts\n",
      "commitDate": "03/05/16 1:03 PM",
      "commitName": "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "14/03/16 2:19 PM",
      "commitNameOld": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 49.95,
      "commitsBetweenForRepo": 297,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   protected void releaseContainers(List\u003cContainerId\u003e containers,\n       SchedulerApplicationAttempt attempt) {\n     for (ContainerId containerId : containers) {\n       RMContainer rmContainer \u003d getRMContainer(containerId);\n       if (rmContainer \u003d\u003d null) {\n         if (System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n             \u003c nmExpireInterval) {\n           LOG.info(containerId + \" doesn\u0027t exist. Add the container\"\n               + \" to the release request cache as it maybe on recovery.\");\n           synchronized (attempt) {\n             attempt.getPendingRelease().add(containerId);\n           }\n         } else {\n           RMAuditLogger.logFailure(attempt.getUser(),\n             AuditConstants.RELEASE_CONTAINER,\n             \"Unauthorized access or invalid container\", \"Scheduler\",\n             \"Trying to release container not owned by app or with invalid id.\",\n-            attempt.getApplicationId(), containerId);\n+            attempt.getApplicationId(), containerId, null);\n         }\n       }\n       completedContainer(rmContainer,\n         SchedulerUtils.createAbnormalContainerStatus(containerId,\n           SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void releaseContainers(List\u003cContainerId\u003e containers,\n      SchedulerApplicationAttempt attempt) {\n    for (ContainerId containerId : containers) {\n      RMContainer rmContainer \u003d getRMContainer(containerId);\n      if (rmContainer \u003d\u003d null) {\n        if (System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n            \u003c nmExpireInterval) {\n          LOG.info(containerId + \" doesn\u0027t exist. Add the container\"\n              + \" to the release request cache as it maybe on recovery.\");\n          synchronized (attempt) {\n            attempt.getPendingRelease().add(containerId);\n          }\n        } else {\n          RMAuditLogger.logFailure(attempt.getUser(),\n            AuditConstants.RELEASE_CONTAINER,\n            \"Unauthorized access or invalid container\", \"Scheduler\",\n            \"Trying to release container not owned by app or with invalid id.\",\n            attempt.getApplicationId(), containerId, null);\n        }\n      }\n      completedContainer(rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(containerId,\n          SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/14 1:33 PM",
      "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,25 @@\n+  protected void releaseContainers(List\u003cContainerId\u003e containers,\n+      SchedulerApplicationAttempt attempt) {\n+    for (ContainerId containerId : containers) {\n+      RMContainer rmContainer \u003d getRMContainer(containerId);\n+      if (rmContainer \u003d\u003d null) {\n+        if (System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n+            \u003c nmExpireInterval) {\n+          LOG.info(containerId + \" doesn\u0027t exist. Add the container\"\n+              + \" to the release request cache as it maybe on recovery.\");\n+          synchronized (attempt) {\n+            attempt.getPendingRelease().add(containerId);\n+          }\n+        } else {\n+          RMAuditLogger.logFailure(attempt.getUser(),\n+            AuditConstants.RELEASE_CONTAINER,\n+            \"Unauthorized access or invalid container\", \"Scheduler\",\n+            \"Trying to release container not owned by app or with invalid id.\",\n+            attempt.getApplicationId(), containerId);\n+        }\n+      }\n+      completedContainer(rmContainer,\n+        SchedulerUtils.createAbnormalContainerStatus(containerId,\n+          SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void releaseContainers(List\u003cContainerId\u003e containers,\n      SchedulerApplicationAttempt attempt) {\n    for (ContainerId containerId : containers) {\n      RMContainer rmContainer \u003d getRMContainer(containerId);\n      if (rmContainer \u003d\u003d null) {\n        if (System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()\n            \u003c nmExpireInterval) {\n          LOG.info(containerId + \" doesn\u0027t exist. Add the container\"\n              + \" to the release request cache as it maybe on recovery.\");\n          synchronized (attempt) {\n            attempt.getPendingRelease().add(containerId);\n          }\n        } else {\n          RMAuditLogger.logFailure(attempt.getUser(),\n            AuditConstants.RELEASE_CONTAINER,\n            \"Unauthorized access or invalid container\", \"Scheduler\",\n            \"Trying to release container not owned by app or with invalid id.\",\n            attempt.getApplicationId(), containerId);\n        }\n      }\n      completedContainer(rmContainer,\n        SchedulerUtils.createAbnormalContainerStatus(containerId,\n          SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}