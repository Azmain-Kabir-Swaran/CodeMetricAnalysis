{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Text.java",
  "functionName": "validateUTF8",
  "functionId": "validateUTF8___utf8-byte[]__start-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/Text.java",
  "functionStartLine": 543,
  "functionEndLine": 608,
  "numCommitsSeen": 26,
  "timeTaken": 1373,
  "changeHistory": [
    "bbd6a3277678a60d472e76a207f25a916220946c",
    "4840775e3d1485af3983f63ece2fc394b89563ef",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "bbd6a3277678a60d472e76a207f25a916220946c": "Ybodychange",
    "4840775e3d1485af3983f63ece2fc394b89563ef": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbd6a3277678a60d472e76a207f25a916220946c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10482. Fix various findbugs warnings in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "10/12/14 12:44 PM",
      "commitName": "bbd6a3277678a60d472e76a207f25a916220946c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/07/14 5:28 PM",
      "commitNameOld": "181c4664364ab68160f47102911eb06e125d4558",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 140.84,
      "commitsBetweenForRepo": 1298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,66 @@\n   public static void validateUTF8(byte[] utf8, int start, int len)\n     throws MalformedInputException {\n     int count \u003d start;\n     int leadByte \u003d 0;\n     int length \u003d 0;\n     int state \u003d LEAD_BYTE;\n     while (count \u003c start+len) {\n       int aByte \u003d utf8[count] \u0026 0xFF;\n \n       switch (state) {\n       case LEAD_BYTE:\n         leadByte \u003d aByte;\n         length \u003d bytesFromUTF8[aByte];\n \n         switch (length) {\n         case 0: // check for ASCII\n           if (leadByte \u003e 0x7F)\n             throw new MalformedInputException(count);\n           break;\n         case 1:\n           if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n             throw new MalformedInputException(count);\n           state \u003d TRAIL_BYTE_1;\n           break;\n         case 2:\n           if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n             throw new MalformedInputException(count);\n           state \u003d TRAIL_BYTE_1;\n           break;\n         case 3:\n           if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n             throw new MalformedInputException(count);\n           state \u003d TRAIL_BYTE_1;\n           break;\n         default:\n           // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n           // or if \u003c 0 we got a trail byte in the lead byte position\n           throw new MalformedInputException(count);\n         } // switch (length)\n         break;\n \n       case TRAIL_BYTE_1:\n         if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n           throw new MalformedInputException(count);\n         if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n           throw new MalformedInputException(count);\n         if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n           throw new MalformedInputException(count);\n         if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n           throw new MalformedInputException(count);\n         // falls through to regular trail-byte test!!\n       case TRAIL_BYTE:\n         if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n           throw new MalformedInputException(count);\n         if (--length \u003d\u003d 0) {\n           state \u003d LEAD_BYTE;\n         } else {\n           state \u003d TRAIL_BYTE;\n         }\n         break;\n+      default:\n+        break;\n       } // switch (state)\n       count++;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateUTF8(byte[] utf8, int start, int len)\n    throws MalformedInputException {\n    int count \u003d start;\n    int leadByte \u003d 0;\n    int length \u003d 0;\n    int state \u003d LEAD_BYTE;\n    while (count \u003c start+len) {\n      int aByte \u003d utf8[count] \u0026 0xFF;\n\n      switch (state) {\n      case LEAD_BYTE:\n        leadByte \u003d aByte;\n        length \u003d bytesFromUTF8[aByte];\n\n        switch (length) {\n        case 0: // check for ASCII\n          if (leadByte \u003e 0x7F)\n            throw new MalformedInputException(count);\n          break;\n        case 1:\n          if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 2:\n          if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 3:\n          if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        default:\n          // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n          // or if \u003c 0 we got a trail byte in the lead byte position\n          throw new MalformedInputException(count);\n        } // switch (length)\n        break;\n\n      case TRAIL_BYTE_1:\n        if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n          throw new MalformedInputException(count);\n        // falls through to regular trail-byte test!!\n      case TRAIL_BYTE:\n        if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n          throw new MalformedInputException(count);\n        if (--length \u003d\u003d 0) {\n          state \u003d LEAD_BYTE;\n        } else {\n          state \u003d TRAIL_BYTE;\n        }\n        break;\n      default:\n        break;\n      } // switch (state)\n      count++;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/Text.java",
      "extendedDetails": {}
    },
    "4840775e3d1485af3983f63ece2fc394b89563ef": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9323. Fix typos in API documentation. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449977 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 4:10 PM",
      "commitName": "4840775e3d1485af3983f63ece2fc394b89563ef",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 184.96,
      "commitsBetweenForRepo": 895,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   public static void validateUTF8(byte[] utf8, int start, int len)\n     throws MalformedInputException {\n     int count \u003d start;\n     int leadByte \u003d 0;\n     int length \u003d 0;\n     int state \u003d LEAD_BYTE;\n     while (count \u003c start+len) {\n-      int aByte \u003d ((int) utf8[count] \u0026 0xFF);\n+      int aByte \u003d utf8[count] \u0026 0xFF;\n \n       switch (state) {\n       case LEAD_BYTE:\n         leadByte \u003d aByte;\n         length \u003d bytesFromUTF8[aByte];\n \n         switch (length) {\n         case 0: // check for ASCII\n           if (leadByte \u003e 0x7F)\n             throw new MalformedInputException(count);\n           break;\n         case 1:\n           if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n             throw new MalformedInputException(count);\n           state \u003d TRAIL_BYTE_1;\n           break;\n         case 2:\n           if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n             throw new MalformedInputException(count);\n           state \u003d TRAIL_BYTE_1;\n           break;\n         case 3:\n           if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n             throw new MalformedInputException(count);\n           state \u003d TRAIL_BYTE_1;\n           break;\n         default:\n           // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n           // or if \u003c 0 we got a trail byte in the lead byte position\n           throw new MalformedInputException(count);\n         } // switch (length)\n         break;\n \n       case TRAIL_BYTE_1:\n         if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n           throw new MalformedInputException(count);\n         if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n           throw new MalformedInputException(count);\n         if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n           throw new MalformedInputException(count);\n         if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n           throw new MalformedInputException(count);\n         // falls through to regular trail-byte test!!\n       case TRAIL_BYTE:\n         if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n           throw new MalformedInputException(count);\n         if (--length \u003d\u003d 0) {\n           state \u003d LEAD_BYTE;\n         } else {\n           state \u003d TRAIL_BYTE;\n         }\n         break;\n       } // switch (state)\n       count++;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateUTF8(byte[] utf8, int start, int len)\n    throws MalformedInputException {\n    int count \u003d start;\n    int leadByte \u003d 0;\n    int length \u003d 0;\n    int state \u003d LEAD_BYTE;\n    while (count \u003c start+len) {\n      int aByte \u003d utf8[count] \u0026 0xFF;\n\n      switch (state) {\n      case LEAD_BYTE:\n        leadByte \u003d aByte;\n        length \u003d bytesFromUTF8[aByte];\n\n        switch (length) {\n        case 0: // check for ASCII\n          if (leadByte \u003e 0x7F)\n            throw new MalformedInputException(count);\n          break;\n        case 1:\n          if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 2:\n          if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 3:\n          if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        default:\n          // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n          // or if \u003c 0 we got a trail byte in the lead byte position\n          throw new MalformedInputException(count);\n        } // switch (length)\n        break;\n\n      case TRAIL_BYTE_1:\n        if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n          throw new MalformedInputException(count);\n        // falls through to regular trail-byte test!!\n      case TRAIL_BYTE:\n        if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n          throw new MalformedInputException(count);\n        if (--length \u003d\u003d 0) {\n          state \u003d LEAD_BYTE;\n        } else {\n          state \u003d TRAIL_BYTE;\n        }\n        break;\n      } // switch (state)\n      count++;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/Text.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void validateUTF8(byte[] utf8, int start, int len)\n    throws MalformedInputException {\n    int count \u003d start;\n    int leadByte \u003d 0;\n    int length \u003d 0;\n    int state \u003d LEAD_BYTE;\n    while (count \u003c start+len) {\n      int aByte \u003d ((int) utf8[count] \u0026 0xFF);\n\n      switch (state) {\n      case LEAD_BYTE:\n        leadByte \u003d aByte;\n        length \u003d bytesFromUTF8[aByte];\n\n        switch (length) {\n        case 0: // check for ASCII\n          if (leadByte \u003e 0x7F)\n            throw new MalformedInputException(count);\n          break;\n        case 1:\n          if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 2:\n          if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 3:\n          if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        default:\n          // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n          // or if \u003c 0 we got a trail byte in the lead byte position\n          throw new MalformedInputException(count);\n        } // switch (length)\n        break;\n\n      case TRAIL_BYTE_1:\n        if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n          throw new MalformedInputException(count);\n        // falls through to regular trail-byte test!!\n      case TRAIL_BYTE:\n        if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n          throw new MalformedInputException(count);\n        if (--length \u003d\u003d 0) {\n          state \u003d LEAD_BYTE;\n        } else {\n          state \u003d TRAIL_BYTE;\n        }\n        break;\n      } // switch (state)\n      count++;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/Text.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/Text.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/Text.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void validateUTF8(byte[] utf8, int start, int len)\n    throws MalformedInputException {\n    int count \u003d start;\n    int leadByte \u003d 0;\n    int length \u003d 0;\n    int state \u003d LEAD_BYTE;\n    while (count \u003c start+len) {\n      int aByte \u003d ((int) utf8[count] \u0026 0xFF);\n\n      switch (state) {\n      case LEAD_BYTE:\n        leadByte \u003d aByte;\n        length \u003d bytesFromUTF8[aByte];\n\n        switch (length) {\n        case 0: // check for ASCII\n          if (leadByte \u003e 0x7F)\n            throw new MalformedInputException(count);\n          break;\n        case 1:\n          if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 2:\n          if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 3:\n          if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        default:\n          // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n          // or if \u003c 0 we got a trail byte in the lead byte position\n          throw new MalformedInputException(count);\n        } // switch (length)\n        break;\n\n      case TRAIL_BYTE_1:\n        if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n          throw new MalformedInputException(count);\n        // falls through to regular trail-byte test!!\n      case TRAIL_BYTE:\n        if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n          throw new MalformedInputException(count);\n        if (--length \u003d\u003d 0) {\n          state \u003d LEAD_BYTE;\n        } else {\n          state \u003d TRAIL_BYTE;\n        }\n        break;\n      } // switch (state)\n      count++;\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/Text.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/Text.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/Text.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void validateUTF8(byte[] utf8, int start, int len)\n    throws MalformedInputException {\n    int count \u003d start;\n    int leadByte \u003d 0;\n    int length \u003d 0;\n    int state \u003d LEAD_BYTE;\n    while (count \u003c start+len) {\n      int aByte \u003d ((int) utf8[count] \u0026 0xFF);\n\n      switch (state) {\n      case LEAD_BYTE:\n        leadByte \u003d aByte;\n        length \u003d bytesFromUTF8[aByte];\n\n        switch (length) {\n        case 0: // check for ASCII\n          if (leadByte \u003e 0x7F)\n            throw new MalformedInputException(count);\n          break;\n        case 1:\n          if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 2:\n          if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 3:\n          if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        default:\n          // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n          // or if \u003c 0 we got a trail byte in the lead byte position\n          throw new MalformedInputException(count);\n        } // switch (length)\n        break;\n\n      case TRAIL_BYTE_1:\n        if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n          throw new MalformedInputException(count);\n        // falls through to regular trail-byte test!!\n      case TRAIL_BYTE:\n        if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n          throw new MalformedInputException(count);\n        if (--length \u003d\u003d 0) {\n          state \u003d LEAD_BYTE;\n        } else {\n          state \u003d TRAIL_BYTE;\n        }\n        break;\n      } // switch (state)\n      count++;\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/io/Text.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/Text.java",
        "newPath": "common/src/java/org/apache/hadoop/io/Text.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,64 @@\n+  public static void validateUTF8(byte[] utf8, int start, int len)\n+    throws MalformedInputException {\n+    int count \u003d start;\n+    int leadByte \u003d 0;\n+    int length \u003d 0;\n+    int state \u003d LEAD_BYTE;\n+    while (count \u003c start+len) {\n+      int aByte \u003d ((int) utf8[count] \u0026 0xFF);\n+\n+      switch (state) {\n+      case LEAD_BYTE:\n+        leadByte \u003d aByte;\n+        length \u003d bytesFromUTF8[aByte];\n+\n+        switch (length) {\n+        case 0: // check for ASCII\n+          if (leadByte \u003e 0x7F)\n+            throw new MalformedInputException(count);\n+          break;\n+        case 1:\n+          if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n+            throw new MalformedInputException(count);\n+          state \u003d TRAIL_BYTE_1;\n+          break;\n+        case 2:\n+          if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n+            throw new MalformedInputException(count);\n+          state \u003d TRAIL_BYTE_1;\n+          break;\n+        case 3:\n+          if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n+            throw new MalformedInputException(count);\n+          state \u003d TRAIL_BYTE_1;\n+          break;\n+        default:\n+          // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n+          // or if \u003c 0 we got a trail byte in the lead byte position\n+          throw new MalformedInputException(count);\n+        } // switch (length)\n+        break;\n+\n+      case TRAIL_BYTE_1:\n+        if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n+          throw new MalformedInputException(count);\n+        if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n+          throw new MalformedInputException(count);\n+        if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n+          throw new MalformedInputException(count);\n+        if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n+          throw new MalformedInputException(count);\n+        // falls through to regular trail-byte test!!\n+      case TRAIL_BYTE:\n+        if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n+          throw new MalformedInputException(count);\n+        if (--length \u003d\u003d 0) {\n+          state \u003d LEAD_BYTE;\n+        } else {\n+          state \u003d TRAIL_BYTE;\n+        }\n+        break;\n+      } // switch (state)\n+      count++;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateUTF8(byte[] utf8, int start, int len)\n    throws MalformedInputException {\n    int count \u003d start;\n    int leadByte \u003d 0;\n    int length \u003d 0;\n    int state \u003d LEAD_BYTE;\n    while (count \u003c start+len) {\n      int aByte \u003d ((int) utf8[count] \u0026 0xFF);\n\n      switch (state) {\n      case LEAD_BYTE:\n        leadByte \u003d aByte;\n        length \u003d bytesFromUTF8[aByte];\n\n        switch (length) {\n        case 0: // check for ASCII\n          if (leadByte \u003e 0x7F)\n            throw new MalformedInputException(count);\n          break;\n        case 1:\n          if (leadByte \u003c 0xC2 || leadByte \u003e 0xDF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 2:\n          if (leadByte \u003c 0xE0 || leadByte \u003e 0xEF)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        case 3:\n          if (leadByte \u003c 0xF0 || leadByte \u003e 0xF4)\n            throw new MalformedInputException(count);\n          state \u003d TRAIL_BYTE_1;\n          break;\n        default:\n          // too long! Longest valid UTF-8 is 4 bytes (lead + three)\n          // or if \u003c 0 we got a trail byte in the lead byte position\n          throw new MalformedInputException(count);\n        } // switch (length)\n        break;\n\n      case TRAIL_BYTE_1:\n        if (leadByte \u003d\u003d 0xF0 \u0026\u0026 aByte \u003c 0x90)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xF4 \u0026\u0026 aByte \u003e 0x8F)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xE0 \u0026\u0026 aByte \u003c 0xA0)\n          throw new MalformedInputException(count);\n        if (leadByte \u003d\u003d 0xED \u0026\u0026 aByte \u003e 0x9F)\n          throw new MalformedInputException(count);\n        // falls through to regular trail-byte test!!\n      case TRAIL_BYTE:\n        if (aByte \u003c 0x80 || aByte \u003e 0xBF)\n          throw new MalformedInputException(count);\n        if (--length \u003d\u003d 0) {\n          state \u003d LEAD_BYTE;\n        } else {\n          state \u003d TRAIL_BYTE;\n        }\n        break;\n      } // switch (state)\n      count++;\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/Text.java"
    }
  }
}