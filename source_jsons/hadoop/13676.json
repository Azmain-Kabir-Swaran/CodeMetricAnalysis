{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyDefault.java",
  "functionName": "chooseFavouredNodes",
  "functionId": "chooseFavouredNodes___src-String__numOfReplicas-int__favoredNodes-List__DatanodeDescriptor____favoriteAndExcludedNodes-Set__Node____blocksize-long__maxNodesPerRack-int__results-List__DatanodeStorageInfo____avoidStaleNodes-boolean__storageTypes-EnumMap__StorageType,Integer__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
  "functionStartLine": 232,
  "functionEndLine": 254,
  "numCommitsSeen": 99,
  "timeTaken": 2171,
  "changeHistory": [
    "7d7acb004af5095983e99c86deedfc60a0355ff7",
    "588baab160e7c328dca1c45cf3541e79218406e8"
  ],
  "changeHistoryShort": {
    "7d7acb004af5095983e99c86deedfc60a0355ff7": "Ybodychange",
    "588baab160e7c328dca1c45cf3541e79218406e8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7d7acb004af5095983e99c86deedfc60a0355ff7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13736. BlockPlacementPolicyDefault can not choose favored nodes when \u0027dfs.namenode.block-placement-policy.default.prefer-local-node\u0027 set to false. Contributed by hu xiaodong.\n",
      "commitDate": "01/11/19 10:20 AM",
      "commitName": "7d7acb004af5095983e99c86deedfc60a0355ff7",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "19/06/19 10:06 AM",
      "commitNameOld": "f5ecc0bc080cb8a64c6d4632fc1c121f93d95c5e",
      "commitAuthorOld": "David Mollitor",
      "daysBetweenCommits": 135.01,
      "commitsBetweenForRepo": 1074,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   protected void chooseFavouredNodes(String src, int numOfReplicas,\n       List\u003cDatanodeDescriptor\u003e favoredNodes,\n       Set\u003cNode\u003e favoriteAndExcludedNodes, long blocksize, int maxNodesPerRack,\n       List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n       EnumMap\u003cStorageType, Integer\u003e storageTypes)\n       throws NotEnoughReplicasException {\n     for (int i \u003d 0; i \u003c favoredNodes.size() \u0026\u0026 results.size() \u003c numOfReplicas;\n         i++) {\n       DatanodeDescriptor favoredNode \u003d favoredNodes.get(i);\n       // Choose a single node which is local to favoredNode.\n       // \u0027results\u0027 is updated within chooseLocalNode\n-      final DatanodeStorageInfo target \u003d\n-          chooseLocalStorage(favoredNode, favoriteAndExcludedNodes, blocksize,\n-            maxNodesPerRack, results, avoidStaleNodes, storageTypes, false);\n+      final DatanodeStorageInfo target \u003d chooseLocalOrFavoredStorage(\n+          favoredNode, true, favoriteAndExcludedNodes, blocksize,\n+          maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n+\n       if (target \u003d\u003d null) {\n         LOG.warn(\"Could not find a target for file \" + src\n             + \" with favored node \" + favoredNode);\n         continue;\n       }\n       favoriteAndExcludedNodes.add(target.getDatanodeDescriptor());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void chooseFavouredNodes(String src, int numOfReplicas,\n      List\u003cDatanodeDescriptor\u003e favoredNodes,\n      Set\u003cNode\u003e favoriteAndExcludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      EnumMap\u003cStorageType, Integer\u003e storageTypes)\n      throws NotEnoughReplicasException {\n    for (int i \u003d 0; i \u003c favoredNodes.size() \u0026\u0026 results.size() \u003c numOfReplicas;\n        i++) {\n      DatanodeDescriptor favoredNode \u003d favoredNodes.get(i);\n      // Choose a single node which is local to favoredNode.\n      // \u0027results\u0027 is updated within chooseLocalNode\n      final DatanodeStorageInfo target \u003d chooseLocalOrFavoredStorage(\n          favoredNode, true, favoriteAndExcludedNodes, blocksize,\n          maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n\n      if (target \u003d\u003d null) {\n        LOG.warn(\"Could not find a target for file \" + src\n            + \" with favored node \" + favoredNode);\n        continue;\n      }\n      favoriteAndExcludedNodes.add(target.getDatanodeDescriptor());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
      "extendedDetails": {}
    },
    "588baab160e7c328dca1c45cf3541e79218406e8": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9044. Give Priority to FavouredNodes , before selecting nodes from FavouredNode\u0027s Node Group (Contributed by J.Andreina)\n",
      "commitDate": "28/10/15 11:14 PM",
      "commitName": "588baab160e7c328dca1c45cf3541e79218406e8",
      "commitAuthor": "Vinayakumar B",
      "diff": "@@ -0,0 +1,22 @@\n+  protected void chooseFavouredNodes(String src, int numOfReplicas,\n+      List\u003cDatanodeDescriptor\u003e favoredNodes,\n+      Set\u003cNode\u003e favoriteAndExcludedNodes, long blocksize, int maxNodesPerRack,\n+      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n+      EnumMap\u003cStorageType, Integer\u003e storageTypes)\n+      throws NotEnoughReplicasException {\n+    for (int i \u003d 0; i \u003c favoredNodes.size() \u0026\u0026 results.size() \u003c numOfReplicas;\n+        i++) {\n+      DatanodeDescriptor favoredNode \u003d favoredNodes.get(i);\n+      // Choose a single node which is local to favoredNode.\n+      // \u0027results\u0027 is updated within chooseLocalNode\n+      final DatanodeStorageInfo target \u003d\n+          chooseLocalStorage(favoredNode, favoriteAndExcludedNodes, blocksize,\n+            maxNodesPerRack, results, avoidStaleNodes, storageTypes, false);\n+      if (target \u003d\u003d null) {\n+        LOG.warn(\"Could not find a target for file \" + src\n+            + \" with favored node \" + favoredNode);\n+        continue;\n+      }\n+      favoriteAndExcludedNodes.add(target.getDatanodeDescriptor());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void chooseFavouredNodes(String src, int numOfReplicas,\n      List\u003cDatanodeDescriptor\u003e favoredNodes,\n      Set\u003cNode\u003e favoriteAndExcludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      EnumMap\u003cStorageType, Integer\u003e storageTypes)\n      throws NotEnoughReplicasException {\n    for (int i \u003d 0; i \u003c favoredNodes.size() \u0026\u0026 results.size() \u003c numOfReplicas;\n        i++) {\n      DatanodeDescriptor favoredNode \u003d favoredNodes.get(i);\n      // Choose a single node which is local to favoredNode.\n      // \u0027results\u0027 is updated within chooseLocalNode\n      final DatanodeStorageInfo target \u003d\n          chooseLocalStorage(favoredNode, favoriteAndExcludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes, storageTypes, false);\n      if (target \u003d\u003d null) {\n        LOG.warn(\"Could not find a target for file \" + src\n            + \" with favored node \" + favoredNode);\n        continue;\n      }\n      favoriteAndExcludedNodes.add(target.getDatanodeDescriptor());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java"
    }
  }
}