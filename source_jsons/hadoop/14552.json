{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtil.java",
  "functionName": "bytes2byteArray",
  "functionId": "bytes2byteArray___bytes-byte[]__len-int__separator-byte",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
  "functionStartLine": 372,
  "functionEndLine": 375,
  "numCommitsSeen": 157,
  "timeTaken": 6868,
  "changeHistory": [
    "b1c7654ee40b372ed777525a42981c7cf55b5c72",
    "9f473cf903e586c556154abd56b3a3d820c6b028",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": "Ybodychange",
    "9f473cf903e586c556154abd56b3a3d820c6b028": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12594. snapshotDiff fails if the report exceeds the RPC response limit. Contributed by Shashikant Banerjee\n",
      "commitDate": "30/11/17 12:18 PM",
      "commitName": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "d8c81073320320a019fb3868be4f06f46aebea43",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 54.77,
      "commitsBetweenForRepo": 427,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,4 @@\n-  public static byte[][] bytes2byteArray(byte[] bytes,\n-                                         int len,\n-                                         byte separator) {\n-    Preconditions.checkPositionIndex(len, bytes.length);\n-    if (len \u003d\u003d 0) {\n-      return new byte[][]{null};\n-    }\n-    // Count the splits. Omit multiple separators and the last one by\n-    // peeking at prior byte.\n-    int splits \u003d 0;\n-    for (int i \u003d 1; i \u003c len; i++) {\n-      if (bytes[i-1] \u003d\u003d separator \u0026\u0026 bytes[i] !\u003d separator) {\n-        splits++;\n-      }\n-    }\n-    if (splits \u003d\u003d 0 \u0026\u0026 bytes[0] \u003d\u003d separator) {\n-      return new byte[][]{null};\n-    }\n-    splits++;\n-    byte[][] result \u003d new byte[splits][];\n-    int nextIndex \u003d 0;\n-    // Build the splits.\n-    for (int i \u003d 0; i \u003c splits; i++) {\n-      int startIndex \u003d nextIndex;\n-      // find next separator in the bytes.\n-      while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] !\u003d separator) {\n-        nextIndex++;\n-      }\n-      result[i] \u003d (nextIndex \u003e 0)\n-          ? Arrays.copyOfRange(bytes, startIndex, nextIndex)\n-          : DFSUtilClient.EMPTY_BYTES; // reuse empty bytes for root.\n-      do { // skip over separators.\n-        nextIndex++;\n-      } while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] \u003d\u003d separator);\n-    }\n-    return result;\n+  public static byte[][] bytes2byteArray(byte[] bytes, int len,\n+      byte separator) {\n+    return DFSUtilClient.bytes2byteArray(bytes, len, separator);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static byte[][] bytes2byteArray(byte[] bytes, int len,\n      byte separator) {\n    return DFSUtilClient.bytes2byteArray(bytes, len, separator);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "9f473cf903e586c556154abd56b3a3d820c6b028": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10655. Fix path related byte array conversion bugs. (daryn)\n",
      "commitDate": "01/08/16 8:14 AM",
      "commitName": "9f473cf903e586c556154abd56b3a3d820c6b028",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "21/07/16 11:14 AM",
      "commitNameOld": "bd3dcf46e263b6e6aa3fca6a5d9936cc49e3280f",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 10.87,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   public static byte[][] bytes2byteArray(byte[] bytes,\n                                          int len,\n                                          byte separator) {\n-    assert len \u003c\u003d bytes.length;\n-    int splits \u003d 0;\n+    Preconditions.checkPositionIndex(len, bytes.length);\n     if (len \u003d\u003d 0) {\n       return new byte[][]{null};\n     }\n-    // Count the splits. Omit multiple separators and the last one\n-    for (int i \u003d 0; i \u003c len; i++) {\n-      if (bytes[i] \u003d\u003d separator) {\n+    // Count the splits. Omit multiple separators and the last one by\n+    // peeking at prior byte.\n+    int splits \u003d 0;\n+    for (int i \u003d 1; i \u003c len; i++) {\n+      if (bytes[i-1] \u003d\u003d separator \u0026\u0026 bytes[i] !\u003d separator) {\n         splits++;\n       }\n     }\n-    int last \u003d len - 1;\n-    while (last \u003e -1 \u0026\u0026 bytes[last--] \u003d\u003d separator) {\n-      splits--;\n-    }\n     if (splits \u003d\u003d 0 \u0026\u0026 bytes[0] \u003d\u003d separator) {\n       return new byte[][]{null};\n     }\n     splits++;\n     byte[][] result \u003d new byte[splits][];\n-    int startIndex \u003d 0;\n     int nextIndex \u003d 0;\n-    int index \u003d 0;\n-    // Build the splits\n-    while (index \u003c splits) {\n+    // Build the splits.\n+    for (int i \u003d 0; i \u003c splits; i++) {\n+      int startIndex \u003d nextIndex;\n+      // find next separator in the bytes.\n       while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] !\u003d separator) {\n         nextIndex++;\n       }\n-      result[index] \u003d new byte[nextIndex - startIndex];\n-      System.arraycopy(bytes, startIndex, result[index], 0, nextIndex\n-              - startIndex);\n-      index++;\n-      startIndex \u003d nextIndex + 1;\n-      nextIndex \u003d startIndex;\n+      result[i] \u003d (nextIndex \u003e 0)\n+          ? Arrays.copyOfRange(bytes, startIndex, nextIndex)\n+          : DFSUtilClient.EMPTY_BYTES; // reuse empty bytes for root.\n+      do { // skip over separators.\n+        nextIndex++;\n+      } while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] \u003d\u003d separator);\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static byte[][] bytes2byteArray(byte[] bytes,\n                                         int len,\n                                         byte separator) {\n    Preconditions.checkPositionIndex(len, bytes.length);\n    if (len \u003d\u003d 0) {\n      return new byte[][]{null};\n    }\n    // Count the splits. Omit multiple separators and the last one by\n    // peeking at prior byte.\n    int splits \u003d 0;\n    for (int i \u003d 1; i \u003c len; i++) {\n      if (bytes[i-1] \u003d\u003d separator \u0026\u0026 bytes[i] !\u003d separator) {\n        splits++;\n      }\n    }\n    if (splits \u003d\u003d 0 \u0026\u0026 bytes[0] \u003d\u003d separator) {\n      return new byte[][]{null};\n    }\n    splits++;\n    byte[][] result \u003d new byte[splits][];\n    int nextIndex \u003d 0;\n    // Build the splits.\n    for (int i \u003d 0; i \u003c splits; i++) {\n      int startIndex \u003d nextIndex;\n      // find next separator in the bytes.\n      while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] !\u003d separator) {\n        nextIndex++;\n      }\n      result[i] \u003d (nextIndex \u003e 0)\n          ? Arrays.copyOfRange(bytes, startIndex, nextIndex)\n          : DFSUtilClient.EMPTY_BYTES; // reuse empty bytes for root.\n      do { // skip over separators.\n        nextIndex++;\n      } while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] \u003d\u003d separator);\n    }\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static byte[][] bytes2byteArray(byte[] bytes,\n                                         int len,\n                                         byte separator) {\n    assert len \u003c\u003d bytes.length;\n    int splits \u003d 0;\n    if (len \u003d\u003d 0) {\n      return new byte[][]{null};\n    }\n    // Count the splits. Omit multiple separators and the last one\n    for (int i \u003d 0; i \u003c len; i++) {\n      if (bytes[i] \u003d\u003d separator) {\n        splits++;\n      }\n    }\n    int last \u003d len - 1;\n    while (last \u003e -1 \u0026\u0026 bytes[last--] \u003d\u003d separator) {\n      splits--;\n    }\n    if (splits \u003d\u003d 0 \u0026\u0026 bytes[0] \u003d\u003d separator) {\n      return new byte[][]{null};\n    }\n    splits++;\n    byte[][] result \u003d new byte[splits][];\n    int startIndex \u003d 0;\n    int nextIndex \u003d 0;\n    int index \u003d 0;\n    // Build the splits\n    while (index \u003c splits) {\n      while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] !\u003d separator) {\n        nextIndex++;\n      }\n      result[index] \u003d new byte[nextIndex - startIndex];\n      System.arraycopy(bytes, startIndex, result[index], 0, nextIndex\n              - startIndex);\n      index++;\n      startIndex \u003d nextIndex + 1;\n      nextIndex \u003d startIndex;\n    }\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static byte[][] bytes2byteArray(byte[] bytes,\n                                         int len,\n                                         byte separator) {\n    assert len \u003c\u003d bytes.length;\n    int splits \u003d 0;\n    if (len \u003d\u003d 0) {\n      return new byte[][]{null};\n    }\n    // Count the splits. Omit multiple separators and the last one\n    for (int i \u003d 0; i \u003c len; i++) {\n      if (bytes[i] \u003d\u003d separator) {\n        splits++;\n      }\n    }\n    int last \u003d len - 1;\n    while (last \u003e -1 \u0026\u0026 bytes[last--] \u003d\u003d separator) {\n      splits--;\n    }\n    if (splits \u003d\u003d 0 \u0026\u0026 bytes[0] \u003d\u003d separator) {\n      return new byte[][]{null};\n    }\n    splits++;\n    byte[][] result \u003d new byte[splits][];\n    int startIndex \u003d 0;\n    int nextIndex \u003d 0;\n    int index \u003d 0;\n    // Build the splits\n    while (index \u003c splits) {\n      while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] !\u003d separator) {\n        nextIndex++;\n      }\n      result[index] \u003d new byte[nextIndex - startIndex];\n      System.arraycopy(bytes, startIndex, result[index], 0, nextIndex\n              - startIndex);\n      index++;\n      startIndex \u003d nextIndex + 1;\n      nextIndex \u003d startIndex;\n    }\n    return result;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSUtil.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,40 @@\n+  public static byte[][] bytes2byteArray(byte[] bytes,\n+                                         int len,\n+                                         byte separator) {\n+    assert len \u003c\u003d bytes.length;\n+    int splits \u003d 0;\n+    if (len \u003d\u003d 0) {\n+      return new byte[][]{null};\n+    }\n+    // Count the splits. Omit multiple separators and the last one\n+    for (int i \u003d 0; i \u003c len; i++) {\n+      if (bytes[i] \u003d\u003d separator) {\n+        splits++;\n+      }\n+    }\n+    int last \u003d len - 1;\n+    while (last \u003e -1 \u0026\u0026 bytes[last--] \u003d\u003d separator) {\n+      splits--;\n+    }\n+    if (splits \u003d\u003d 0 \u0026\u0026 bytes[0] \u003d\u003d separator) {\n+      return new byte[][]{null};\n+    }\n+    splits++;\n+    byte[][] result \u003d new byte[splits][];\n+    int startIndex \u003d 0;\n+    int nextIndex \u003d 0;\n+    int index \u003d 0;\n+    // Build the splits\n+    while (index \u003c splits) {\n+      while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] !\u003d separator) {\n+        nextIndex++;\n+      }\n+      result[index] \u003d new byte[nextIndex - startIndex];\n+      System.arraycopy(bytes, startIndex, result[index], 0, nextIndex\n+              - startIndex);\n+      index++;\n+      startIndex \u003d nextIndex + 1;\n+      nextIndex \u003d startIndex;\n+    }\n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static byte[][] bytes2byteArray(byte[] bytes,\n                                         int len,\n                                         byte separator) {\n    assert len \u003c\u003d bytes.length;\n    int splits \u003d 0;\n    if (len \u003d\u003d 0) {\n      return new byte[][]{null};\n    }\n    // Count the splits. Omit multiple separators and the last one\n    for (int i \u003d 0; i \u003c len; i++) {\n      if (bytes[i] \u003d\u003d separator) {\n        splits++;\n      }\n    }\n    int last \u003d len - 1;\n    while (last \u003e -1 \u0026\u0026 bytes[last--] \u003d\u003d separator) {\n      splits--;\n    }\n    if (splits \u003d\u003d 0 \u0026\u0026 bytes[0] \u003d\u003d separator) {\n      return new byte[][]{null};\n    }\n    splits++;\n    byte[][] result \u003d new byte[splits][];\n    int startIndex \u003d 0;\n    int nextIndex \u003d 0;\n    int index \u003d 0;\n    // Build the splits\n    while (index \u003c splits) {\n      while (nextIndex \u003c len \u0026\u0026 bytes[nextIndex] !\u003d separator) {\n        nextIndex++;\n      }\n      result[index] \u003d new byte[nextIndex - startIndex];\n      System.arraycopy(bytes, startIndex, result[index], 0, nextIndex\n              - startIndex);\n      index++;\n      startIndex \u003d nextIndex + 1;\n      nextIndex \u003d startIndex;\n    }\n    return result;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSUtil.java"
    }
  }
}