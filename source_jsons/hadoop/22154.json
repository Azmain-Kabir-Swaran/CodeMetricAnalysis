{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleSchedulerImpl.java",
  "functionName": "copySucceeded",
  "functionId": "copySucceeded___mapId-TaskAttemptID__host-MapHost__bytes-long__startMillis-long__endMillis-long__output-MapOutput__K,V__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
  "functionStartLine": 187,
  "functionEndLine": 225,
  "numCommitsSeen": 23,
  "timeTaken": 6717,
  "changeHistory": [
    "4d98936eec1b5d196053426c70d455cf8f83f84f",
    "b9edad64034a9c8a121ec2b37792c190ba561e26",
    "2c3da25fd718b3a9c1ed67f05b577975ae613f4e",
    "1a389305b27ac1efec4d7923b87de3e703bf70e1",
    "27d1c74a0c7831f8a83922ea2e87d1762ccf8021",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "4d98936eec1b5d196053426c70d455cf8f83f84f": "Ybodychange",
    "b9edad64034a9c8a121ec2b37792c190ba561e26": "Ymultichange(Yparameterchange,Ybodychange)",
    "2c3da25fd718b3a9c1ed67f05b577975ae613f4e": "Ybodychange",
    "1a389305b27ac1efec4d7923b87de3e703bf70e1": "Ymovefromfile",
    "27d1c74a0c7831f8a83922ea2e87d1762ccf8021": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d98936eec1b5d196053426c70d455cf8f83f84f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6957. shuffle hangs after a node manager connection timeout. Contributed by Jooseong Kim\n",
      "commitDate": "13/09/17 3:21 PM",
      "commitName": "4d98936eec1b5d196053426c70d455cf8f83f84f",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "05/01/17 5:56 PM",
      "commitNameOld": "0b8a7c18ddbe73b356b3c9baf4460659ccaee095",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 250.85,
      "commitsBetweenForRepo": 1532,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,39 @@\n   public synchronized void copySucceeded(TaskAttemptID mapId,\n                                          MapHost host,\n                                          long bytes,\n                                          long startMillis,\n                                          long endMillis,\n                                          MapOutput\u003cK,V\u003e output\n                                          ) throws IOException {\n     failureCounts.remove(mapId);\n     hostFailures.remove(host.getHostName());\n     int mapIndex \u003d mapId.getTaskID().getId();\n \n     if (!finishedMaps[mapIndex]) {\n       output.commit();\n       finishedMaps[mapIndex] \u003d true;\n       shuffledMapsCounter.increment(1);\n       if (--remainingMaps \u003d\u003d 0) {\n         notifyAll();\n       }\n \n       // update single copy task status\n       long copyMillis \u003d (endMillis - startMillis);\n       if (copyMillis \u003d\u003d 0) copyMillis \u003d 1;\n       float bytesPerMillis \u003d (float) bytes / copyMillis;\n       float transferRate \u003d bytesPerMillis * BYTES_PER_MILLIS_TO_MBS;\n       String individualProgress \u003d \"copy task(\" + mapId + \" succeeded\"\n           + \" at \" + mbpsFormat.format(transferRate) + \" MB/s)\";\n       // update the aggregated status\n       copyTimeTracker.add(startMillis, endMillis);\n \n       totalBytesShuffledTillNow +\u003d bytes;\n       updateStatus(individualProgress);\n       reduceShuffleBytes.increment(bytes);\n       lastProgressTime \u003d Time.monotonicNow();\n       LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n+    } else {\n+      LOG.warn(\"Aborting already-finished MapOutput for \" + mapId);\n+      output.abort();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId,\n                                         MapHost host,\n                                         long bytes,\n                                         long startMillis,\n                                         long endMillis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n\n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update single copy task status\n      long copyMillis \u003d (endMillis - startMillis);\n      if (copyMillis \u003d\u003d 0) copyMillis \u003d 1;\n      float bytesPerMillis \u003d (float) bytes / copyMillis;\n      float transferRate \u003d bytesPerMillis * BYTES_PER_MILLIS_TO_MBS;\n      String individualProgress \u003d \"copy task(\" + mapId + \" succeeded\"\n          + \" at \" + mbpsFormat.format(transferRate) + \" MB/s)\";\n      // update the aggregated status\n      copyTimeTracker.add(startMillis, endMillis);\n\n      totalBytesShuffledTillNow +\u003d bytes;\n      updateStatus(individualProgress);\n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d Time.monotonicNow();\n      LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n    } else {\n      LOG.warn(\"Aborting already-finished MapOutput for \" + mapId);\n      output.abort();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {}
    },
    "b9edad64034a9c8a121ec2b37792c190ba561e26": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5873. Shuffle bandwidth computation includes time spent waiting for maps. Contributed by Siqi Li\n",
      "commitDate": "15/10/14 8:52 AM",
      "commitName": "b9edad64034a9c8a121ec2b37792c190ba561e26",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-5873. Shuffle bandwidth computation includes time spent waiting for maps. Contributed by Siqi Li\n",
          "commitDate": "15/10/14 8:52 AM",
          "commitName": "b9edad64034a9c8a121ec2b37792c190ba561e26",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "18/09/14 3:00 PM",
          "commitNameOld": "2c3da25fd718b3a9c1ed67f05b577975ae613f4e",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 26.74,
          "commitsBetweenForRepo": 269,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,36 @@\n   public synchronized void copySucceeded(TaskAttemptID mapId,\n                                          MapHost host,\n                                          long bytes,\n-                                         long millis,\n+                                         long startMillis,\n+                                         long endMillis,\n                                          MapOutput\u003cK,V\u003e output\n                                          ) throws IOException {\n     failureCounts.remove(mapId);\n     hostFailures.remove(host.getHostName());\n     int mapIndex \u003d mapId.getTaskID().getId();\n \n     if (!finishedMaps[mapIndex]) {\n       output.commit();\n       finishedMaps[mapIndex] \u003d true;\n       shuffledMapsCounter.increment(1);\n       if (--remainingMaps \u003d\u003d 0) {\n         notifyAll();\n       }\n \n-      // update the status\n+      // update single copy task status\n+      long copyMillis \u003d (endMillis - startMillis);\n+      if (copyMillis \u003d\u003d 0) copyMillis \u003d 1;\n+      float bytesPerMillis \u003d (float) bytes / copyMillis;\n+      float transferRate \u003d bytesPerMillis * BYTES_PER_MILLIS_TO_MBS;\n+      String individualProgress \u003d \"copy task(\" + mapId + \" succeeded\"\n+          + \" at \" + mbpsFormat.format(transferRate) + \" MB/s)\";\n+      // update the aggregated status\n+      copyTimeTracker.add(startMillis, endMillis);\n+\n       totalBytesShuffledTillNow +\u003d bytes;\n-      updateStatus();\n+      updateStatus(individualProgress);\n       reduceShuffleBytes.increment(bytes);\n       lastProgressTime \u003d Time.monotonicNow();\n       LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId,\n                                         MapHost host,\n                                         long bytes,\n                                         long startMillis,\n                                         long endMillis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n\n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update single copy task status\n      long copyMillis \u003d (endMillis - startMillis);\n      if (copyMillis \u003d\u003d 0) copyMillis \u003d 1;\n      float bytesPerMillis \u003d (float) bytes / copyMillis;\n      float transferRate \u003d bytesPerMillis * BYTES_PER_MILLIS_TO_MBS;\n      String individualProgress \u003d \"copy task(\" + mapId + \" succeeded\"\n          + \" at \" + mbpsFormat.format(transferRate) + \" MB/s)\";\n      // update the aggregated status\n      copyTimeTracker.add(startMillis, endMillis);\n\n      totalBytesShuffledTillNow +\u003d bytes;\n      updateStatus(individualProgress);\n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d Time.monotonicNow();\n      LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
          "extendedDetails": {
            "oldValue": "[mapId-TaskAttemptID, host-MapHost, bytes-long, millis-long, output-MapOutput\u003cK,V\u003e]",
            "newValue": "[mapId-TaskAttemptID, host-MapHost, bytes-long, startMillis-long, endMillis-long, output-MapOutput\u003cK,V\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5873. Shuffle bandwidth computation includes time spent waiting for maps. Contributed by Siqi Li\n",
          "commitDate": "15/10/14 8:52 AM",
          "commitName": "b9edad64034a9c8a121ec2b37792c190ba561e26",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "18/09/14 3:00 PM",
          "commitNameOld": "2c3da25fd718b3a9c1ed67f05b577975ae613f4e",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 26.74,
          "commitsBetweenForRepo": 269,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,36 @@\n   public synchronized void copySucceeded(TaskAttemptID mapId,\n                                          MapHost host,\n                                          long bytes,\n-                                         long millis,\n+                                         long startMillis,\n+                                         long endMillis,\n                                          MapOutput\u003cK,V\u003e output\n                                          ) throws IOException {\n     failureCounts.remove(mapId);\n     hostFailures.remove(host.getHostName());\n     int mapIndex \u003d mapId.getTaskID().getId();\n \n     if (!finishedMaps[mapIndex]) {\n       output.commit();\n       finishedMaps[mapIndex] \u003d true;\n       shuffledMapsCounter.increment(1);\n       if (--remainingMaps \u003d\u003d 0) {\n         notifyAll();\n       }\n \n-      // update the status\n+      // update single copy task status\n+      long copyMillis \u003d (endMillis - startMillis);\n+      if (copyMillis \u003d\u003d 0) copyMillis \u003d 1;\n+      float bytesPerMillis \u003d (float) bytes / copyMillis;\n+      float transferRate \u003d bytesPerMillis * BYTES_PER_MILLIS_TO_MBS;\n+      String individualProgress \u003d \"copy task(\" + mapId + \" succeeded\"\n+          + \" at \" + mbpsFormat.format(transferRate) + \" MB/s)\";\n+      // update the aggregated status\n+      copyTimeTracker.add(startMillis, endMillis);\n+\n       totalBytesShuffledTillNow +\u003d bytes;\n-      updateStatus();\n+      updateStatus(individualProgress);\n       reduceShuffleBytes.increment(bytes);\n       lastProgressTime \u003d Time.monotonicNow();\n       LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId,\n                                         MapHost host,\n                                         long bytes,\n                                         long startMillis,\n                                         long endMillis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n\n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update single copy task status\n      long copyMillis \u003d (endMillis - startMillis);\n      if (copyMillis \u003d\u003d 0) copyMillis \u003d 1;\n      float bytesPerMillis \u003d (float) bytes / copyMillis;\n      float transferRate \u003d bytesPerMillis * BYTES_PER_MILLIS_TO_MBS;\n      String individualProgress \u003d \"copy task(\" + mapId + \" succeeded\"\n          + \" at \" + mbpsFormat.format(transferRate) + \" MB/s)\";\n      // update the aggregated status\n      copyTimeTracker.add(startMillis, endMillis);\n\n      totalBytesShuffledTillNow +\u003d bytes;\n      updateStatus(individualProgress);\n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d Time.monotonicNow();\n      LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "2c3da25fd718b3a9c1ed67f05b577975ae613f4e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5891. Improved shuffle error handling across NM restarts. Contributed by Junping Du\n",
      "commitDate": "18/09/14 3:00 PM",
      "commitName": "2c3da25fd718b3a9c1ed67f05b577975ae613f4e",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "18/08/14 10:57 AM",
      "commitNameOld": "f8e871d01b851cd5d8c57dd7e364b3e787521765",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 31.17,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public synchronized void copySucceeded(TaskAttemptID mapId,\n                                          MapHost host,\n                                          long bytes,\n                                          long millis,\n                                          MapOutput\u003cK,V\u003e output\n                                          ) throws IOException {\n     failureCounts.remove(mapId);\n     hostFailures.remove(host.getHostName());\n     int mapIndex \u003d mapId.getTaskID().getId();\n \n     if (!finishedMaps[mapIndex]) {\n       output.commit();\n       finishedMaps[mapIndex] \u003d true;\n       shuffledMapsCounter.increment(1);\n       if (--remainingMaps \u003d\u003d 0) {\n         notifyAll();\n       }\n \n       // update the status\n       totalBytesShuffledTillNow +\u003d bytes;\n       updateStatus();\n       reduceShuffleBytes.increment(bytes);\n-      lastProgressTime \u003d System.currentTimeMillis();\n+      lastProgressTime \u003d Time.monotonicNow();\n       LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId,\n                                         MapHost host,\n                                         long bytes,\n                                         long millis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n\n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update the status\n      totalBytesShuffledTillNow +\u003d bytes;\n      updateStatus();\n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d Time.monotonicNow();\n      LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {}
    },
    "1a389305b27ac1efec4d7923b87de3e703bf70e1": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-5192. Allow for alternate resolutions of TaskCompletionEvents. Contributed by Chris Douglas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493445 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/13 8:07 PM",
      "commitName": "1a389305b27ac1efec4d7923b87de3e703bf70e1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "15/06/13 4:09 PM",
      "commitNameOld": "29a370872435ee558fbeb9f64bf70da87f8cd27a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  public synchronized void copySucceeded(TaskAttemptID mapId, \n+  public synchronized void copySucceeded(TaskAttemptID mapId,\n                                          MapHost host,\n                                          long bytes,\n                                          long millis,\n                                          MapOutput\u003cK,V\u003e output\n                                          ) throws IOException {\n     failureCounts.remove(mapId);\n     hostFailures.remove(host.getHostName());\n     int mapIndex \u003d mapId.getTaskID().getId();\n-    \n+\n     if (!finishedMaps[mapIndex]) {\n       output.commit();\n       finishedMaps[mapIndex] \u003d true;\n       shuffledMapsCounter.increment(1);\n       if (--remainingMaps \u003d\u003d 0) {\n         notifyAll();\n       }\n \n       // update the status\n       totalBytesShuffledTillNow +\u003d bytes;\n       updateStatus();\n       reduceShuffleBytes.increment(bytes);\n       lastProgressTime \u003d System.currentTimeMillis();\n       LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId,\n                                         MapHost host,\n                                         long bytes,\n                                         long millis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n\n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update the status\n      totalBytesShuffledTillNow +\u003d bytes;\n      updateStatus();\n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d System.currentTimeMillis();\n      LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
        "oldMethodName": "copySucceeded",
        "newMethodName": "copySucceeded"
      }
    },
    "27d1c74a0c7831f8a83922ea2e87d1762ccf8021": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3927. Shuffle hang when set map.failures.percent (Bhallamudi Venkata Siva Kamesh via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1348846 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 6:54 AM",
      "commitName": "27d1c74a0c7831f8a83922ea2e87d1762ccf8021",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 291.57,
      "commitsBetweenForRepo": 2024,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,26 @@\n   public synchronized void copySucceeded(TaskAttemptID mapId, \n                                          MapHost host,\n                                          long bytes,\n                                          long millis,\n                                          MapOutput\u003cK,V\u003e output\n                                          ) throws IOException {\n     failureCounts.remove(mapId);\n     hostFailures.remove(host.getHostName());\n     int mapIndex \u003d mapId.getTaskID().getId();\n     \n     if (!finishedMaps[mapIndex]) {\n       output.commit();\n       finishedMaps[mapIndex] \u003d true;\n       shuffledMapsCounter.increment(1);\n       if (--remainingMaps \u003d\u003d 0) {\n         notifyAll();\n       }\n \n       // update the status\n       totalBytesShuffledTillNow +\u003d bytes;\n-      float mbs \u003d (float) totalBytesShuffledTillNow / (1024 * 1024);\n-      int mapsDone \u003d totalMaps - remainingMaps;\n-      long secsSinceStart \u003d \n-        (System.currentTimeMillis()-startTime)/1000+1;\n-\n-      float transferRate \u003d mbs/secsSinceStart;\n-      progress.set((float) mapsDone / totalMaps);\n-      String statusString \u003d mapsDone + \" / \" + totalMaps + \" copied.\";\n-      status.setStateString(statusString);\n-      progress.setStatus(\"copy(\" + mapsDone + \" of \" + totalMaps \n-          + \" at \" +\n-          mbpsFormat.format(transferRate) +  \" MB/s)\");\n-      \n+      updateStatus();\n       reduceShuffleBytes.increment(bytes);\n       lastProgressTime \u003d System.currentTimeMillis();\n-      LOG.debug(\"map \" + mapId + \" done \" + statusString);\n+      LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId, \n                                         MapHost host,\n                                         long bytes,\n                                         long millis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n    \n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update the status\n      totalBytesShuffledTillNow +\u003d bytes;\n      updateStatus();\n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d System.currentTimeMillis();\n      LOG.debug(\"map \" + mapId + \" done \" + status.getStateString());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId, \n                                         MapHost host,\n                                         long bytes,\n                                         long millis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n    \n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update the status\n      totalBytesShuffledTillNow +\u003d bytes;\n      float mbs \u003d (float) totalBytesShuffledTillNow / (1024 * 1024);\n      int mapsDone \u003d totalMaps - remainingMaps;\n      long secsSinceStart \u003d \n        (System.currentTimeMillis()-startTime)/1000+1;\n\n      float transferRate \u003d mbs/secsSinceStart;\n      progress.set((float) mapsDone / totalMaps);\n      String statusString \u003d mapsDone + \" / \" + totalMaps + \" copied.\";\n      status.setStateString(statusString);\n      progress.setStatus(\"copy(\" + mapsDone + \" of \" + totalMaps \n          + \" at \" +\n          mbpsFormat.format(transferRate) +  \" MB/s)\");\n      \n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d System.currentTimeMillis();\n      LOG.debug(\"map \" + mapId + \" done \" + statusString);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId, \n                                         MapHost host,\n                                         long bytes,\n                                         long millis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n    \n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update the status\n      totalBytesShuffledTillNow +\u003d bytes;\n      float mbs \u003d (float) totalBytesShuffledTillNow / (1024 * 1024);\n      int mapsDone \u003d totalMaps - remainingMaps;\n      long secsSinceStart \u003d \n        (System.currentTimeMillis()-startTime)/1000+1;\n\n      float transferRate \u003d mbs/secsSinceStart;\n      progress.set((float) mapsDone / totalMaps);\n      String statusString \u003d mapsDone + \" / \" + totalMaps + \" copied.\";\n      status.setStateString(statusString);\n      progress.setStatus(\"copy(\" + mapsDone + \" of \" + totalMaps \n          + \" at \" +\n          mbpsFormat.format(transferRate) +  \" MB/s)\");\n      \n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d System.currentTimeMillis();\n      LOG.debug(\"map \" + mapId + \" done \" + statusString);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,38 @@\n+  public synchronized void copySucceeded(TaskAttemptID mapId, \n+                                         MapHost host,\n+                                         long bytes,\n+                                         long millis,\n+                                         MapOutput\u003cK,V\u003e output\n+                                         ) throws IOException {\n+    failureCounts.remove(mapId);\n+    hostFailures.remove(host.getHostName());\n+    int mapIndex \u003d mapId.getTaskID().getId();\n+    \n+    if (!finishedMaps[mapIndex]) {\n+      output.commit();\n+      finishedMaps[mapIndex] \u003d true;\n+      shuffledMapsCounter.increment(1);\n+      if (--remainingMaps \u003d\u003d 0) {\n+        notifyAll();\n+      }\n+\n+      // update the status\n+      totalBytesShuffledTillNow +\u003d bytes;\n+      float mbs \u003d (float) totalBytesShuffledTillNow / (1024 * 1024);\n+      int mapsDone \u003d totalMaps - remainingMaps;\n+      long secsSinceStart \u003d \n+        (System.currentTimeMillis()-startTime)/1000+1;\n+\n+      float transferRate \u003d mbs/secsSinceStart;\n+      progress.set((float) mapsDone / totalMaps);\n+      String statusString \u003d mapsDone + \" / \" + totalMaps + \" copied.\";\n+      status.setStateString(statusString);\n+      progress.setStatus(\"copy(\" + mapsDone + \" of \" + totalMaps \n+          + \" at \" +\n+          mbpsFormat.format(transferRate) +  \" MB/s)\");\n+      \n+      reduceShuffleBytes.increment(bytes);\n+      lastProgressTime \u003d System.currentTimeMillis();\n+      LOG.debug(\"map \" + mapId + \" done \" + statusString);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copySucceeded(TaskAttemptID mapId, \n                                         MapHost host,\n                                         long bytes,\n                                         long millis,\n                                         MapOutput\u003cK,V\u003e output\n                                         ) throws IOException {\n    failureCounts.remove(mapId);\n    hostFailures.remove(host.getHostName());\n    int mapIndex \u003d mapId.getTaskID().getId();\n    \n    if (!finishedMaps[mapIndex]) {\n      output.commit();\n      finishedMaps[mapIndex] \u003d true;\n      shuffledMapsCounter.increment(1);\n      if (--remainingMaps \u003d\u003d 0) {\n        notifyAll();\n      }\n\n      // update the status\n      totalBytesShuffledTillNow +\u003d bytes;\n      float mbs \u003d (float) totalBytesShuffledTillNow / (1024 * 1024);\n      int mapsDone \u003d totalMaps - remainingMaps;\n      long secsSinceStart \u003d \n        (System.currentTimeMillis()-startTime)/1000+1;\n\n      float transferRate \u003d mbs/secsSinceStart;\n      progress.set((float) mapsDone / totalMaps);\n      String statusString \u003d mapsDone + \" / \" + totalMaps + \" copied.\";\n      status.setStateString(statusString);\n      progress.setStatus(\"copy(\" + mapsDone + \" of \" + totalMaps \n          + \" at \" +\n          mbpsFormat.format(transferRate) +  \" MB/s)\");\n      \n      reduceShuffleBytes.increment(bytes);\n      lastProgressTime \u003d System.currentTimeMillis();\n      LOG.debug(\"map \" + mapId + \" done \" + statusString);\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
    }
  }
}