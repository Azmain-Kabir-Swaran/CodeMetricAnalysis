{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "getAppStatistics",
  "functionId": "getAppStatistics___hsr-HttpServletRequest(annotations-@Context)__stateQueries-Set__String__(annotations-@QueryParam(RMWSConsts.STATES))__typeQueries-Set__String__(annotations-@QueryParam(RMWSConsts.APPLICATION_TYPES))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 943,
  "functionEndLine": 997,
  "numCommitsSeen": 169,
  "timeTaken": 6148,
  "changeHistory": [
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "4ea295016e20add7ab45ddc558acf77a8f1f5925"
  ],
  "changeHistoryShort": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": "Ymultichange(Ybodychange,Yparametermetachange)",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "4ea295016e20add7ab45ddc558acf77a8f1f5925": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "27/04/18 10:28 AM",
      "commitNameOld": "ef3ecc308dbea41c6a88bd4d16739c7bbc10cdda",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   public ApplicationStatisticsInfo getAppStatistics(\n       @Context HttpServletRequest hsr,\n       @QueryParam(RMWSConsts.STATES) Set\u003cString\u003e stateQueries,\n       @QueryParam(RMWSConsts.APPLICATION_TYPES) Set\u003cString\u003e typeQueries) {\n-    init();\n+    initForReadableEndpoints();\n \n     // parse the params and build the scoreboard\n     // converting state/type name to lowercase\n     Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n     Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n     // if no types, counts the applications of any types\n     if (types.size() \u003d\u003d 0) {\n       types.add(RMWSConsts.ANY);\n     } else if (types.size() !\u003d 1) {\n       throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n           + \", we temporarily support at most one applicationType\");\n     }\n     // if no states, returns the counts of all RMAppStates\n     if (states.size() \u003d\u003d 0) {\n       for (YarnApplicationState state : YarnApplicationState.values()) {\n         states.add(StringUtils.toLowerCase(state.toString()));\n       }\n     }\n     // in case we extend to multiple applicationTypes in the future\n     Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n         buildScoreboard(states, types);\n \n     // go through the apps in RM to count the numbers, ignoring the case of\n     // the state/type name\n     ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n     for (RMApp rmapp : apps.values()) {\n       YarnApplicationState state \u003d rmapp.createApplicationState();\n       String type \u003d StringUtils.toLowerCase(rmapp.getApplicationType().trim());\n       if (states.contains(StringUtils.toLowerCase(state.toString()))) {\n         if (types.contains(RMWSConsts.ANY)) {\n           countApp(scoreboard, state, RMWSConsts.ANY);\n         } else if (types.contains(type)) {\n           countApp(scoreboard, state, type);\n         }\n       }\n     }\n \n     // fill the response object\n     ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n     for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard : scoreboard\n         .entrySet()) {\n       for (Map.Entry\u003cString, Long\u003e statEntry : partScoreboard.getValue()\n           .entrySet()) {\n         StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n             partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n         appStatInfo.add(statItem);\n       }\n     }\n     return appStatInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationStatisticsInfo getAppStatistics(\n      @Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.STATES) Set\u003cString\u003e stateQueries,\n      @QueryParam(RMWSConsts.APPLICATION_TYPES) Set\u003cString\u003e typeQueries) {\n    initForReadableEndpoints();\n\n    // parse the params and build the scoreboard\n    // converting state/type name to lowercase\n    Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n    Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n    // if no types, counts the applications of any types\n    if (types.size() \u003d\u003d 0) {\n      types.add(RMWSConsts.ANY);\n    } else if (types.size() !\u003d 1) {\n      throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n          + \", we temporarily support at most one applicationType\");\n    }\n    // if no states, returns the counts of all RMAppStates\n    if (states.size() \u003d\u003d 0) {\n      for (YarnApplicationState state : YarnApplicationState.values()) {\n        states.add(StringUtils.toLowerCase(state.toString()));\n      }\n    }\n    // in case we extend to multiple applicationTypes in the future\n    Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n        buildScoreboard(states, types);\n\n    // go through the apps in RM to count the numbers, ignoring the case of\n    // the state/type name\n    ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n    for (RMApp rmapp : apps.values()) {\n      YarnApplicationState state \u003d rmapp.createApplicationState();\n      String type \u003d StringUtils.toLowerCase(rmapp.getApplicationType().trim());\n      if (states.contains(StringUtils.toLowerCase(state.toString()))) {\n        if (types.contains(RMWSConsts.ANY)) {\n          countApp(scoreboard, state, RMWSConsts.ANY);\n        } else if (types.contains(type)) {\n          countApp(scoreboard, state, type);\n        }\n      }\n    }\n\n    // fill the response object\n    ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard : scoreboard\n        .entrySet()) {\n      for (Map.Entry\u003cString, Long\u003e statEntry : partScoreboard.getValue()\n          .entrySet()) {\n        StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n            partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n        appStatInfo.add(statItem);\n      }\n    }\n    return appStatInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "07/06/17 1:41 PM",
      "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
      "commitAuthor": "Carlo Curino",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
          "commitDate": "07/06/17 1:41 PM",
          "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "08/12/16 2:23 AM",
          "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 181.43,
          "commitsBetweenForRepo": 954,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,55 @@\n   public ApplicationStatisticsInfo getAppStatistics(\n       @Context HttpServletRequest hsr,\n-      @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n-      @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n+      @QueryParam(RMWSConsts.STATES) Set\u003cString\u003e stateQueries,\n+      @QueryParam(RMWSConsts.APPLICATION_TYPES) Set\u003cString\u003e typeQueries) {\n     init();\n \n     // parse the params and build the scoreboard\n     // converting state/type name to lowercase\n     Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n     Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n     // if no types, counts the applications of any types\n     if (types.size() \u003d\u003d 0) {\n-      types.add(ANY);\n+      types.add(RMWSConsts.ANY);\n     } else if (types.size() !\u003d 1) {\n       throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n           + \", we temporarily support at most one applicationType\");\n     }\n     // if no states, returns the counts of all RMAppStates\n     if (states.size() \u003d\u003d 0) {\n       for (YarnApplicationState state : YarnApplicationState.values()) {\n         states.add(StringUtils.toLowerCase(state.toString()));\n       }\n     }\n     // in case we extend to multiple applicationTypes in the future\n     Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n         buildScoreboard(states, types);\n \n     // go through the apps in RM to count the numbers, ignoring the case of\n     // the state/type name\n     ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n     for (RMApp rmapp : apps.values()) {\n       YarnApplicationState state \u003d rmapp.createApplicationState();\n       String type \u003d StringUtils.toLowerCase(rmapp.getApplicationType().trim());\n-      if (states.contains(\n-          StringUtils.toLowerCase(state.toString()))) {\n-        if (types.contains(ANY)) {\n-          countApp(scoreboard, state, ANY);\n+      if (states.contains(StringUtils.toLowerCase(state.toString()))) {\n+        if (types.contains(RMWSConsts.ANY)) {\n+          countApp(scoreboard, state, RMWSConsts.ANY);\n         } else if (types.contains(type)) {\n           countApp(scoreboard, state, type);\n         }\n       }\n     }\n \n     // fill the response object\n     ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n-    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n-        : scoreboard.entrySet()) {\n-      for (Map.Entry\u003cString, Long\u003e statEntry\n-          : partScoreboard.getValue().entrySet()) {\n+    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard : scoreboard\n+        .entrySet()) {\n+      for (Map.Entry\u003cString, Long\u003e statEntry : partScoreboard.getValue()\n+          .entrySet()) {\n         StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n             partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n         appStatInfo.add(statItem);\n       }\n     }\n     return appStatInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ApplicationStatisticsInfo getAppStatistics(\n      @Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.STATES) Set\u003cString\u003e stateQueries,\n      @QueryParam(RMWSConsts.APPLICATION_TYPES) Set\u003cString\u003e typeQueries) {\n    init();\n\n    // parse the params and build the scoreboard\n    // converting state/type name to lowercase\n    Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n    Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n    // if no types, counts the applications of any types\n    if (types.size() \u003d\u003d 0) {\n      types.add(RMWSConsts.ANY);\n    } else if (types.size() !\u003d 1) {\n      throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n          + \", we temporarily support at most one applicationType\");\n    }\n    // if no states, returns the counts of all RMAppStates\n    if (states.size() \u003d\u003d 0) {\n      for (YarnApplicationState state : YarnApplicationState.values()) {\n        states.add(StringUtils.toLowerCase(state.toString()));\n      }\n    }\n    // in case we extend to multiple applicationTypes in the future\n    Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n        buildScoreboard(states, types);\n\n    // go through the apps in RM to count the numbers, ignoring the case of\n    // the state/type name\n    ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n    for (RMApp rmapp : apps.values()) {\n      YarnApplicationState state \u003d rmapp.createApplicationState();\n      String type \u003d StringUtils.toLowerCase(rmapp.getApplicationType().trim());\n      if (states.contains(StringUtils.toLowerCase(state.toString()))) {\n        if (types.contains(RMWSConsts.ANY)) {\n          countApp(scoreboard, state, RMWSConsts.ANY);\n        } else if (types.contains(type)) {\n          countApp(scoreboard, state, type);\n        }\n      }\n    }\n\n    // fill the response object\n    ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard : scoreboard\n        .entrySet()) {\n      for (Map.Entry\u003cString, Long\u003e statEntry : partScoreboard.getValue()\n          .entrySet()) {\n        StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n            partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n        appStatInfo.add(statItem);\n      }\n    }\n    return appStatInfo;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
          "commitDate": "07/06/17 1:41 PM",
          "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "08/12/16 2:23 AM",
          "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 181.43,
          "commitsBetweenForRepo": 954,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,55 @@\n   public ApplicationStatisticsInfo getAppStatistics(\n       @Context HttpServletRequest hsr,\n-      @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n-      @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n+      @QueryParam(RMWSConsts.STATES) Set\u003cString\u003e stateQueries,\n+      @QueryParam(RMWSConsts.APPLICATION_TYPES) Set\u003cString\u003e typeQueries) {\n     init();\n \n     // parse the params and build the scoreboard\n     // converting state/type name to lowercase\n     Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n     Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n     // if no types, counts the applications of any types\n     if (types.size() \u003d\u003d 0) {\n-      types.add(ANY);\n+      types.add(RMWSConsts.ANY);\n     } else if (types.size() !\u003d 1) {\n       throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n           + \", we temporarily support at most one applicationType\");\n     }\n     // if no states, returns the counts of all RMAppStates\n     if (states.size() \u003d\u003d 0) {\n       for (YarnApplicationState state : YarnApplicationState.values()) {\n         states.add(StringUtils.toLowerCase(state.toString()));\n       }\n     }\n     // in case we extend to multiple applicationTypes in the future\n     Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n         buildScoreboard(states, types);\n \n     // go through the apps in RM to count the numbers, ignoring the case of\n     // the state/type name\n     ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n     for (RMApp rmapp : apps.values()) {\n       YarnApplicationState state \u003d rmapp.createApplicationState();\n       String type \u003d StringUtils.toLowerCase(rmapp.getApplicationType().trim());\n-      if (states.contains(\n-          StringUtils.toLowerCase(state.toString()))) {\n-        if (types.contains(ANY)) {\n-          countApp(scoreboard, state, ANY);\n+      if (states.contains(StringUtils.toLowerCase(state.toString()))) {\n+        if (types.contains(RMWSConsts.ANY)) {\n+          countApp(scoreboard, state, RMWSConsts.ANY);\n         } else if (types.contains(type)) {\n           countApp(scoreboard, state, type);\n         }\n       }\n     }\n \n     // fill the response object\n     ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n-    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n-        : scoreboard.entrySet()) {\n-      for (Map.Entry\u003cString, Long\u003e statEntry\n-          : partScoreboard.getValue().entrySet()) {\n+    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard : scoreboard\n+        .entrySet()) {\n+      for (Map.Entry\u003cString, Long\u003e statEntry : partScoreboard.getValue()\n+          .entrySet()) {\n         StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n             partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n         appStatInfo.add(statItem);\n       }\n     }\n     return appStatInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ApplicationStatisticsInfo getAppStatistics(\n      @Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.STATES) Set\u003cString\u003e stateQueries,\n      @QueryParam(RMWSConsts.APPLICATION_TYPES) Set\u003cString\u003e typeQueries) {\n    init();\n\n    // parse the params and build the scoreboard\n    // converting state/type name to lowercase\n    Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n    Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n    // if no types, counts the applications of any types\n    if (types.size() \u003d\u003d 0) {\n      types.add(RMWSConsts.ANY);\n    } else if (types.size() !\u003d 1) {\n      throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n          + \", we temporarily support at most one applicationType\");\n    }\n    // if no states, returns the counts of all RMAppStates\n    if (states.size() \u003d\u003d 0) {\n      for (YarnApplicationState state : YarnApplicationState.values()) {\n        states.add(StringUtils.toLowerCase(state.toString()));\n      }\n    }\n    // in case we extend to multiple applicationTypes in the future\n    Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n        buildScoreboard(states, types);\n\n    // go through the apps in RM to count the numbers, ignoring the case of\n    // the state/type name\n    ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n    for (RMApp rmapp : apps.values()) {\n      YarnApplicationState state \u003d rmapp.createApplicationState();\n      String type \u003d StringUtils.toLowerCase(rmapp.getApplicationType().trim());\n      if (states.contains(StringUtils.toLowerCase(state.toString()))) {\n        if (types.contains(RMWSConsts.ANY)) {\n          countApp(scoreboard, state, RMWSConsts.ANY);\n        } else if (types.contains(type)) {\n          countApp(scoreboard, state, type);\n        }\n      }\n    }\n\n    // fill the response object\n    ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard : scoreboard\n        .entrySet()) {\n      for (Map.Entry\u003cString, Long\u003e statEntry : partScoreboard.getValue()\n          .entrySet()) {\n        StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n            partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n        appStatInfo.add(statItem);\n      }\n    }\n    return appStatInfo;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[hsr-HttpServletRequest(annotations-@Context), stateQueries-Set\u003cString\u003e(annotations-@QueryParam(\"states\")), typeQueries-Set\u003cString\u003e(annotations-@QueryParam(\"applicationTypes\"))]",
            "newValue": "[hsr-HttpServletRequest(annotations-@Context), stateQueries-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.STATES)), typeQueries-Set\u003cString\u003e(annotations-@QueryParam(RMWSConsts.APPLICATION_TYPES))]"
          }
        }
      ]
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "27/02/15 4:13 PM",
      "commitNameOld": "edcecedc1c39d54db0f86a1325b4db26c38d2d4d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   public ApplicationStatisticsInfo getAppStatistics(\n       @Context HttpServletRequest hsr,\n       @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n       @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n     init();\n \n     // parse the params and build the scoreboard\n     // converting state/type name to lowercase\n     Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n     Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n     // if no types, counts the applications of any types\n     if (types.size() \u003d\u003d 0) {\n       types.add(ANY);\n     } else if (types.size() !\u003d 1) {\n       throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n           + \", we temporarily support at most one applicationType\");\n     }\n     // if no states, returns the counts of all RMAppStates\n     if (states.size() \u003d\u003d 0) {\n       for (YarnApplicationState state : YarnApplicationState.values()) {\n-        states.add(state.toString().toLowerCase());\n+        states.add(StringUtils.toLowerCase(state.toString()));\n       }\n     }\n     // in case we extend to multiple applicationTypes in the future\n     Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n         buildScoreboard(states, types);\n \n     // go through the apps in RM to count the numbers, ignoring the case of\n     // the state/type name\n     ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n     for (RMApp rmapp : apps.values()) {\n       YarnApplicationState state \u003d rmapp.createApplicationState();\n-      String type \u003d rmapp.getApplicationType().trim().toLowerCase();\n-      if (states.contains(state.toString().toLowerCase())) {\n+      String type \u003d StringUtils.toLowerCase(rmapp.getApplicationType().trim());\n+      if (states.contains(\n+          StringUtils.toLowerCase(state.toString()))) {\n         if (types.contains(ANY)) {\n           countApp(scoreboard, state, ANY);\n         } else if (types.contains(type)) {\n           countApp(scoreboard, state, type);\n         }\n       }\n     }\n \n     // fill the response object\n     ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n     for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n         : scoreboard.entrySet()) {\n       for (Map.Entry\u003cString, Long\u003e statEntry\n           : partScoreboard.getValue().entrySet()) {\n         StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n             partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n         appStatInfo.add(statItem);\n       }\n     }\n     return appStatInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationStatisticsInfo getAppStatistics(\n      @Context HttpServletRequest hsr,\n      @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n      @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n    init();\n\n    // parse the params and build the scoreboard\n    // converting state/type name to lowercase\n    Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n    Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n    // if no types, counts the applications of any types\n    if (types.size() \u003d\u003d 0) {\n      types.add(ANY);\n    } else if (types.size() !\u003d 1) {\n      throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n          + \", we temporarily support at most one applicationType\");\n    }\n    // if no states, returns the counts of all RMAppStates\n    if (states.size() \u003d\u003d 0) {\n      for (YarnApplicationState state : YarnApplicationState.values()) {\n        states.add(StringUtils.toLowerCase(state.toString()));\n      }\n    }\n    // in case we extend to multiple applicationTypes in the future\n    Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n        buildScoreboard(states, types);\n\n    // go through the apps in RM to count the numbers, ignoring the case of\n    // the state/type name\n    ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n    for (RMApp rmapp : apps.values()) {\n      YarnApplicationState state \u003d rmapp.createApplicationState();\n      String type \u003d StringUtils.toLowerCase(rmapp.getApplicationType().trim());\n      if (states.contains(\n          StringUtils.toLowerCase(state.toString()))) {\n        if (types.contains(ANY)) {\n          countApp(scoreboard, state, ANY);\n        } else if (types.contains(type)) {\n          countApp(scoreboard, state, type);\n        }\n      }\n    }\n\n    // fill the response object\n    ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n        : scoreboard.entrySet()) {\n      for (Map.Entry\u003cString, Long\u003e statEntry\n          : partScoreboard.getValue().entrySet()) {\n        StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n            partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n        appStatInfo.add(statItem);\n      }\n    }\n    return appStatInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,55 @@\n   public ApplicationStatisticsInfo getAppStatistics(\n       @Context HttpServletRequest hsr,\n       @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n       @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n     init();\n \n     // parse the params and build the scoreboard\n     // converting state/type name to lowercase\n     Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n     Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n     // if no types, counts the applications of any types\n     if (types.size() \u003d\u003d 0) {\n       types.add(ANY);\n     } else if (types.size() !\u003d 1) {\n       throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n           + \", we temporarily support at most one applicationType\");\n     }\n     // if no states, returns the counts of all RMAppStates\n     if (states.size() \u003d\u003d 0) {\n       for (YarnApplicationState state : YarnApplicationState.values()) {\n-        states.add(state.toString().toLowerCase(Locale.ENGLISH));\n+        states.add(state.toString().toLowerCase());\n       }\n     }\n     // in case we extend to multiple applicationTypes in the future\n     Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n         buildScoreboard(states, types);\n \n     // go through the apps in RM to count the numbers, ignoring the case of\n     // the state/type name\n     ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n     for (RMApp rmapp : apps.values()) {\n       YarnApplicationState state \u003d rmapp.createApplicationState();\n-      String type \u003d\n-          rmapp.getApplicationType().trim().toLowerCase(Locale.ENGLISH);\n-      if (states.contains(state.toString().toLowerCase(Locale.ENGLISH))) {\n+      String type \u003d rmapp.getApplicationType().trim().toLowerCase();\n+      if (states.contains(state.toString().toLowerCase())) {\n         if (types.contains(ANY)) {\n           countApp(scoreboard, state, ANY);\n         } else if (types.contains(type)) {\n           countApp(scoreboard, state, type);\n         }\n       }\n     }\n \n     // fill the response object\n     ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n     for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n         : scoreboard.entrySet()) {\n       for (Map.Entry\u003cString, Long\u003e statEntry\n           : partScoreboard.getValue().entrySet()) {\n         StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n             partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n         appStatInfo.add(statItem);\n       }\n     }\n     return appStatInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationStatisticsInfo getAppStatistics(\n      @Context HttpServletRequest hsr,\n      @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n      @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n    init();\n\n    // parse the params and build the scoreboard\n    // converting state/type name to lowercase\n    Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n    Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n    // if no types, counts the applications of any types\n    if (types.size() \u003d\u003d 0) {\n      types.add(ANY);\n    } else if (types.size() !\u003d 1) {\n      throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n          + \", we temporarily support at most one applicationType\");\n    }\n    // if no states, returns the counts of all RMAppStates\n    if (states.size() \u003d\u003d 0) {\n      for (YarnApplicationState state : YarnApplicationState.values()) {\n        states.add(state.toString().toLowerCase());\n      }\n    }\n    // in case we extend to multiple applicationTypes in the future\n    Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n        buildScoreboard(states, types);\n\n    // go through the apps in RM to count the numbers, ignoring the case of\n    // the state/type name\n    ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n    for (RMApp rmapp : apps.values()) {\n      YarnApplicationState state \u003d rmapp.createApplicationState();\n      String type \u003d rmapp.getApplicationType().trim().toLowerCase();\n      if (states.contains(state.toString().toLowerCase())) {\n        if (types.contains(ANY)) {\n          countApp(scoreboard, state, ANY);\n        } else if (types.contains(type)) {\n          countApp(scoreboard, state, type);\n        }\n      }\n    }\n\n    // fill the response object\n    ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n        : scoreboard.entrySet()) {\n      for (Map.Entry\u003cString, Long\u003e statEntry\n          : partScoreboard.getValue().entrySet()) {\n        StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n            partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n        appStatInfo.add(statItem);\n      }\n    }\n    return appStatInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "06/02/15 1:47 PM",
      "commitNameOld": "da2fb2bc46bddf42d79c6d7664cbf0311973709e",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 12.26,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   public ApplicationStatisticsInfo getAppStatistics(\n       @Context HttpServletRequest hsr,\n       @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n       @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n     init();\n \n     // parse the params and build the scoreboard\n     // converting state/type name to lowercase\n     Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n     Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n     // if no types, counts the applications of any types\n     if (types.size() \u003d\u003d 0) {\n       types.add(ANY);\n     } else if (types.size() !\u003d 1) {\n       throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n           + \", we temporarily support at most one applicationType\");\n     }\n     // if no states, returns the counts of all RMAppStates\n     if (states.size() \u003d\u003d 0) {\n       for (YarnApplicationState state : YarnApplicationState.values()) {\n-        states.add(state.toString().toLowerCase());\n+        states.add(state.toString().toLowerCase(Locale.ENGLISH));\n       }\n     }\n     // in case we extend to multiple applicationTypes in the future\n     Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n         buildScoreboard(states, types);\n \n     // go through the apps in RM to count the numbers, ignoring the case of\n     // the state/type name\n     ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n     for (RMApp rmapp : apps.values()) {\n       YarnApplicationState state \u003d rmapp.createApplicationState();\n-      String type \u003d rmapp.getApplicationType().trim().toLowerCase();\n-      if (states.contains(state.toString().toLowerCase())) {\n+      String type \u003d\n+          rmapp.getApplicationType().trim().toLowerCase(Locale.ENGLISH);\n+      if (states.contains(state.toString().toLowerCase(Locale.ENGLISH))) {\n         if (types.contains(ANY)) {\n           countApp(scoreboard, state, ANY);\n         } else if (types.contains(type)) {\n           countApp(scoreboard, state, type);\n         }\n       }\n     }\n \n     // fill the response object\n     ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n     for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n         : scoreboard.entrySet()) {\n       for (Map.Entry\u003cString, Long\u003e statEntry\n           : partScoreboard.getValue().entrySet()) {\n         StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n             partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n         appStatInfo.add(statItem);\n       }\n     }\n     return appStatInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationStatisticsInfo getAppStatistics(\n      @Context HttpServletRequest hsr,\n      @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n      @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n    init();\n\n    // parse the params and build the scoreboard\n    // converting state/type name to lowercase\n    Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n    Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n    // if no types, counts the applications of any types\n    if (types.size() \u003d\u003d 0) {\n      types.add(ANY);\n    } else if (types.size() !\u003d 1) {\n      throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n          + \", we temporarily support at most one applicationType\");\n    }\n    // if no states, returns the counts of all RMAppStates\n    if (states.size() \u003d\u003d 0) {\n      for (YarnApplicationState state : YarnApplicationState.values()) {\n        states.add(state.toString().toLowerCase(Locale.ENGLISH));\n      }\n    }\n    // in case we extend to multiple applicationTypes in the future\n    Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n        buildScoreboard(states, types);\n\n    // go through the apps in RM to count the numbers, ignoring the case of\n    // the state/type name\n    ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n    for (RMApp rmapp : apps.values()) {\n      YarnApplicationState state \u003d rmapp.createApplicationState();\n      String type \u003d\n          rmapp.getApplicationType().trim().toLowerCase(Locale.ENGLISH);\n      if (states.contains(state.toString().toLowerCase(Locale.ENGLISH))) {\n        if (types.contains(ANY)) {\n          countApp(scoreboard, state, ANY);\n        } else if (types.contains(type)) {\n          countApp(scoreboard, state, type);\n        }\n      }\n    }\n\n    // fill the response object\n    ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n        : scoreboard.entrySet()) {\n      for (Map.Entry\u003cString, Long\u003e statEntry\n          : partScoreboard.getValue().entrySet()) {\n        StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n            partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n        appStatInfo.add(statItem);\n      }\n    }\n    return appStatInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "4ea295016e20add7ab45ddc558acf77a8f1f5925": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1001. Added a web-service to get statistics about per application-type per state for consumption by downstream projects. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/09/13 5:24 PM",
      "commitName": "4ea295016e20add7ab45ddc558acf77a8f1f5925",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,55 @@\n+  public ApplicationStatisticsInfo getAppStatistics(\n+      @Context HttpServletRequest hsr,\n+      @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n+      @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n+    init();\n+\n+    // parse the params and build the scoreboard\n+    // converting state/type name to lowercase\n+    Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n+    Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n+    // if no types, counts the applications of any types\n+    if (types.size() \u003d\u003d 0) {\n+      types.add(ANY);\n+    } else if (types.size() !\u003d 1) {\n+      throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n+          + \", we temporarily support at most one applicationType\");\n+    }\n+    // if no states, returns the counts of all RMAppStates\n+    if (states.size() \u003d\u003d 0) {\n+      for (YarnApplicationState state : YarnApplicationState.values()) {\n+        states.add(state.toString().toLowerCase());\n+      }\n+    }\n+    // in case we extend to multiple applicationTypes in the future\n+    Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n+        buildScoreboard(states, types);\n+\n+    // go through the apps in RM to count the numbers, ignoring the case of\n+    // the state/type name\n+    ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n+    for (RMApp rmapp : apps.values()) {\n+      YarnApplicationState state \u003d rmapp.createApplicationState();\n+      String type \u003d rmapp.getApplicationType().trim().toLowerCase();\n+      if (states.contains(state.toString().toLowerCase())) {\n+        if (types.contains(ANY)) {\n+          countApp(scoreboard, state, ANY);\n+        } else if (types.contains(type)) {\n+          countApp(scoreboard, state, type);\n+        }\n+      }\n+    }\n+\n+    // fill the response object\n+    ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n+    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n+        : scoreboard.entrySet()) {\n+      for (Map.Entry\u003cString, Long\u003e statEntry\n+          : partScoreboard.getValue().entrySet()) {\n+        StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n+            partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n+        appStatInfo.add(statItem);\n+      }\n+    }\n+    return appStatInfo;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationStatisticsInfo getAppStatistics(\n      @Context HttpServletRequest hsr,\n      @QueryParam(\"states\") Set\u003cString\u003e stateQueries,\n      @QueryParam(\"applicationTypes\") Set\u003cString\u003e typeQueries) {\n    init();\n\n    // parse the params and build the scoreboard\n    // converting state/type name to lowercase\n    Set\u003cString\u003e states \u003d parseQueries(stateQueries, true);\n    Set\u003cString\u003e types \u003d parseQueries(typeQueries, false);\n    // if no types, counts the applications of any types\n    if (types.size() \u003d\u003d 0) {\n      types.add(ANY);\n    } else if (types.size() !\u003d 1) {\n      throw new BadRequestException(\"# of applicationTypes \u003d \" + types.size()\n          + \", we temporarily support at most one applicationType\");\n    }\n    // if no states, returns the counts of all RMAppStates\n    if (states.size() \u003d\u003d 0) {\n      for (YarnApplicationState state : YarnApplicationState.values()) {\n        states.add(state.toString().toLowerCase());\n      }\n    }\n    // in case we extend to multiple applicationTypes in the future\n    Map\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e scoreboard \u003d\n        buildScoreboard(states, types);\n\n    // go through the apps in RM to count the numbers, ignoring the case of\n    // the state/type name\n    ConcurrentMap\u003cApplicationId, RMApp\u003e apps \u003d rm.getRMContext().getRMApps();\n    for (RMApp rmapp : apps.values()) {\n      YarnApplicationState state \u003d rmapp.createApplicationState();\n      String type \u003d rmapp.getApplicationType().trim().toLowerCase();\n      if (states.contains(state.toString().toLowerCase())) {\n        if (types.contains(ANY)) {\n          countApp(scoreboard, state, ANY);\n        } else if (types.contains(type)) {\n          countApp(scoreboard, state, type);\n        }\n      }\n    }\n\n    // fill the response object\n    ApplicationStatisticsInfo appStatInfo \u003d new ApplicationStatisticsInfo();\n    for (Map.Entry\u003cYarnApplicationState, Map\u003cString, Long\u003e\u003e partScoreboard\n        : scoreboard.entrySet()) {\n      for (Map.Entry\u003cString, Long\u003e statEntry\n          : partScoreboard.getValue().entrySet()) {\n        StatisticsItemInfo statItem \u003d new StatisticsItemInfo(\n            partScoreboard.getKey(), statEntry.getKey(), statEntry.getValue());\n        appStatInfo.add(statItem);\n      }\n    }\n    return appStatInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}