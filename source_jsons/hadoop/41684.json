{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 203,
  "functionEndLine": 236,
  "numCommitsSeen": 115,
  "timeTaken": 5572,
  "changeHistory": [
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
    "d3ce53e5073e35e162f1725836282e4268cd26a5",
    "bb34ae955496c1aa595dc1186153d605a41f5378",
    "8410d862d3a72740f461ef91dddb5325955e1ca5",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "a9c8ea71aa427ff5f25caec98be15bc880e578a7",
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78"
  ],
  "changeHistoryShort": {
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Ybodychange",
    "d3ce53e5073e35e162f1725836282e4268cd26a5": "Ybodychange",
    "bb34ae955496c1aa595dc1186153d605a41f5378": "Ybodychange",
    "8410d862d3a72740f461ef91dddb5325955e1ca5": "Ybodychange",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "a9c8ea71aa427ff5f25caec98be15bc880e578a7": "Ybodychange",
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb": "Ybodychange",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "26/08/19 10:51 AM",
      "commitNameOld": "d3ce53e5073e35e162f1725836282e4268cd26a5",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 48.89,
      "commitsBetweenForRepo": 410,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,34 @@\n   public void serviceInit(Configuration conf) throws Exception {\n+    migration \u003d\n+        conf.getBoolean(FairSchedulerConfiguration.MIGRATION_MODE, false);\n+\n     nmExpireInterval \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     nmHeartbeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     long configuredMaximumAllocationWaitTime \u003d\n         conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n           YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n     nodeTracker.setConfiguredMaxAllocationWaitTime(\n         configuredMaximumAllocationWaitTime);\n     maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n-    this.releaseCache \u003d new Timer(\"Pending Container Clear Timer\");\n+    if (!migration) {\n+      this.releaseCache \u003d new Timer(\"Pending Container Clear Timer\");\n+    }\n+\n     autoUpdateContainers \u003d\n         conf.getBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS,\n             YarnConfiguration.DEFAULT_RM_AUTO_UPDATE_CONTAINERS);\n \n     if (updateInterval \u003e 0) {\n       updateThread \u003d new UpdateThread();\n       updateThread.setName(\"SchedulerUpdateThread\");\n       updateThread.setUncaughtExceptionHandler(\n           new RMCriticalThreadUncaughtExceptionHandler(rmContext));\n       updateThread.setDaemon(true);\n     }\n     super.serviceInit(conf);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    migration \u003d\n        conf.getBoolean(FairSchedulerConfiguration.MIGRATION_MODE, false);\n\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    nmHeartbeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    long configuredMaximumAllocationWaitTime \u003d\n        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n    nodeTracker.setConfiguredMaxAllocationWaitTime(\n        configuredMaximumAllocationWaitTime);\n    maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n    if (!migration) {\n      this.releaseCache \u003d new Timer(\"Pending Container Clear Timer\");\n    }\n\n    autoUpdateContainers \u003d\n        conf.getBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS,\n            YarnConfiguration.DEFAULT_RM_AUTO_UPDATE_CONTAINERS);\n\n    if (updateInterval \u003e 0) {\n      updateThread \u003d new UpdateThread();\n      updateThread.setName(\"SchedulerUpdateThread\");\n      updateThread.setUncaughtExceptionHandler(\n          new RMCriticalThreadUncaughtExceptionHandler(rmContext));\n      updateThread.setDaemon(true);\n    }\n    super.serviceInit(conf);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "d3ce53e5073e35e162f1725836282e4268cd26a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9642. Fix Memory Leak in AbstractYarnScheduler caused by timer. Contributed by Bibin A Chundatt.\n",
      "commitDate": "26/08/19 10:51 AM",
      "commitName": "d3ce53e5073e35e162f1725836282e4268cd26a5",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "11/04/19 11:49 AM",
      "commitNameOld": "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 136.96,
      "commitsBetweenForRepo": 1028,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     nmExpireInterval \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     nmHeartbeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     long configuredMaximumAllocationWaitTime \u003d\n         conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n           YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n     nodeTracker.setConfiguredMaxAllocationWaitTime(\n         configuredMaximumAllocationWaitTime);\n     maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n-    createReleaseCache();\n+    this.releaseCache \u003d new Timer(\"Pending Container Clear Timer\");\n     autoUpdateContainers \u003d\n         conf.getBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS,\n             YarnConfiguration.DEFAULT_RM_AUTO_UPDATE_CONTAINERS);\n \n     if (updateInterval \u003e 0) {\n       updateThread \u003d new UpdateThread();\n       updateThread.setName(\"SchedulerUpdateThread\");\n       updateThread.setUncaughtExceptionHandler(\n           new RMCriticalThreadUncaughtExceptionHandler(rmContext));\n       updateThread.setDaemon(true);\n     }\n     super.serviceInit(conf);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    nmHeartbeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    long configuredMaximumAllocationWaitTime \u003d\n        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n    nodeTracker.setConfiguredMaxAllocationWaitTime(\n        configuredMaximumAllocationWaitTime);\n    maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n    this.releaseCache \u003d new Timer(\"Pending Container Clear Timer\");\n    autoUpdateContainers \u003d\n        conf.getBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS,\n            YarnConfiguration.DEFAULT_RM_AUTO_UPDATE_CONTAINERS);\n\n    if (updateInterval \u003e 0) {\n      updateThread \u003d new UpdateThread();\n      updateThread.setName(\"SchedulerUpdateThread\");\n      updateThread.setUncaughtExceptionHandler(\n          new RMCriticalThreadUncaughtExceptionHandler(rmContext));\n      updateThread.setDaemon(true);\n    }\n    super.serviceInit(conf);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "bb34ae955496c1aa595dc1186153d605a41f5378": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7146. Many RM unit tests failing with FairScheduler (rkanter)\n",
      "commitDate": "13/09/17 3:44 PM",
      "commitName": "bb34ae955496c1aa595dc1186153d605a41f5378",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,28 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     nmExpireInterval \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     nmHeartbeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     long configuredMaximumAllocationWaitTime \u003d\n         conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n           YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n     nodeTracker.setConfiguredMaxAllocationWaitTime(\n         configuredMaximumAllocationWaitTime);\n     maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n     createReleaseCache();\n     autoUpdateContainers \u003d\n         conf.getBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS,\n             YarnConfiguration.DEFAULT_RM_AUTO_UPDATE_CONTAINERS);\n+\n+    if (updateInterval \u003e 0) {\n+      updateThread \u003d new UpdateThread();\n+      updateThread.setName(\"SchedulerUpdateThread\");\n+      updateThread.setUncaughtExceptionHandler(\n+          new RMCriticalThreadUncaughtExceptionHandler(rmContext));\n+      updateThread.setDaemon(true);\n+    }\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    nmHeartbeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    long configuredMaximumAllocationWaitTime \u003d\n        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n    nodeTracker.setConfiguredMaxAllocationWaitTime(\n        configuredMaximumAllocationWaitTime);\n    maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n    createReleaseCache();\n    autoUpdateContainers \u003d\n        conf.getBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS,\n            YarnConfiguration.DEFAULT_RM_AUTO_UPDATE_CONTAINERS);\n\n    if (updateInterval \u003e 0) {\n      updateThread \u003d new UpdateThread();\n      updateThread.setName(\"SchedulerUpdateThread\");\n      updateThread.setUncaughtExceptionHandler(\n          new RMCriticalThreadUncaughtExceptionHandler(rmContext));\n      updateThread.setDaemon(true);\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "8410d862d3a72740f461ef91dddb5325955e1ca5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6979. Add flag to notify all types of container updates to NM via NodeHeartbeatResponse. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "20/08/17 7:54 AM",
      "commitName": "8410d862d3a72740f461ef91dddb5325955e1ca5",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/08/17 10:51 AM",
      "commitNameOld": "e2f6299f6f580d7a03f2377d19ac85f55fd4e73b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 5.88,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     nmExpireInterval \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     nmHeartbeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     long configuredMaximumAllocationWaitTime \u003d\n         conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n           YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n     nodeTracker.setConfiguredMaxAllocationWaitTime(\n         configuredMaximumAllocationWaitTime);\n     maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n     createReleaseCache();\n+    autoUpdateContainers \u003d\n+        conf.getBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS,\n+            YarnConfiguration.DEFAULT_RM_AUTO_UPDATE_CONTAINERS);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    nmHeartbeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    long configuredMaximumAllocationWaitTime \u003d\n        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n    nodeTracker.setConfiguredMaxAllocationWaitTime(\n        configuredMaximumAllocationWaitTime);\n    maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n    createReleaseCache();\n    autoUpdateContainers \u003d\n        conf.getBoolean(YarnConfiguration.RM_AUTO_UPDATE_CONTAINERS,\n            YarnConfiguration.DEFAULT_RM_AUTO_UPDATE_CONTAINERS);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "09/01/17 6:14 PM",
      "commitNameOld": "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 37.21,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,16 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     nmExpireInterval \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n+    nmHeartbeatInterval \u003d\n+        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n+            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     long configuredMaximumAllocationWaitTime \u003d\n         conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n           YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n     nodeTracker.setConfiguredMaxAllocationWaitTime(\n         configuredMaximumAllocationWaitTime);\n     maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n     createReleaseCache();\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    nmHeartbeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    long configuredMaximumAllocationWaitTime \u003d\n        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n    nodeTracker.setConfiguredMaxAllocationWaitTime(\n        configuredMaximumAllocationWaitTime);\n    maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n    createReleaseCache();\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "10/02/16 6:06 PM",
      "commitNameOld": "d16b17b4d299b4d58f879a2a15708bacd0938685",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 32.8,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,13 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     nmExpireInterval \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n-    configuredMaximumAllocationWaitTime \u003d\n+    long configuredMaximumAllocationWaitTime \u003d\n         conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n           YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n+    nodeTracker.setConfiguredMaxAllocationWaitTime(\n+        configuredMaximumAllocationWaitTime);\n     maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n     createReleaseCache();\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    long configuredMaximumAllocationWaitTime \u003d\n        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n    nodeTracker.setConfiguredMaxAllocationWaitTime(\n        configuredMaximumAllocationWaitTime);\n    maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n    createReleaseCache();\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "a9c8ea71aa427ff5f25caec98be15bc880e578a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3250. Support admin cli interface in for Application Priority. Contributed by Rohith Sharma K S\n",
      "commitDate": "27/08/15 1:25 PM",
      "commitName": "a9c8ea71aa427ff5f25caec98be15bc880e578a7",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/08/15 8:51 PM",
      "commitNameOld": "fa1d84ae2739a1e76f58b9c96d1378f9453cc0d2",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 16.69,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,11 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     nmExpireInterval \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     configuredMaximumAllocationWaitTime \u003d\n         conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n           YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n+    maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n     createReleaseCache();\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    configuredMaximumAllocationWaitTime \u003d\n        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n    maxClusterLevelAppPriority \u003d getMaxPriorityFromConf(conf);\n    createReleaseCache();\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2604. Scheduler should consider max-allocation-* in conjunction with the largest node. (Robert Kanter via kasha)\n",
      "commitDate": "21/11/14 10:32 AM",
      "commitName": "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/10/14 3:41 PM",
      "commitNameOld": "eb3e40b833b9d82c1556843f960194dc42e482f3",
      "commitAuthorOld": "carlo curino",
      "daysBetweenCommits": 48.83,
      "commitsBetweenForRepo": 442,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,10 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     nmExpireInterval \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n+    configuredMaximumAllocationWaitTime \u003d\n+        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n+          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n     createReleaseCache();\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    configuredMaximumAllocationWaitTime \u003d\n        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,\n          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);\n    createReleaseCache();\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/14 1:33 PM",
      "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,7 @@\n+  public void serviceInit(Configuration conf) throws Exception {\n+    nmExpireInterval \u003d\n+        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n+          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n+    createReleaseCache();\n+    super.serviceInit(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    nmExpireInterval \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    createReleaseCache();\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}