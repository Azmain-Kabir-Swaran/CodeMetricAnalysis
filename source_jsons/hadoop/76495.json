{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeIO.java",
  "functionName": "getShareDeleteFileDescriptor",
  "functionId": "getShareDeleteFileDescriptor___f-File__seekOffset-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/nativeio/NativeIO.java",
  "functionStartLine": 937,
  "functionEndLine": 961,
  "numCommitsSeen": 69,
  "timeTaken": 3549,
  "changeHistory": [
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
    "638801cce16fc1dc3259c541dc30a599faaddda1"
  ],
  "changeHistoryShort": {
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
      "commitDate": "14/12/16 11:18 AM",
      "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
          "commitDate": "14/12/16 11:18 AM",
          "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "31/07/15 3:01 PM",
          "commitNameOld": "21d10ccc6e463cf250414264c78acb4a6e7c83e3",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 501.89,
          "commitsBetweenForRepo": 3503,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public static FileInputStream getShareDeleteFileInputStream(File f, long seekOffset)\n-      throws IOException {\n+  public static FileDescriptor getShareDeleteFileDescriptor(\n+      File f, long seekOffset) throws IOException {\n     if (!Shell.WINDOWS) {\n       RandomAccessFile rf \u003d new RandomAccessFile(f, \"r\");\n       if (seekOffset \u003e 0) {\n         rf.seek(seekOffset);\n       }\n-      return new FileInputStream(rf.getFD());\n+      return rf.getFD();\n     } else {\n       // Use Windows native interface to create a FileInputStream that\n       // shares delete permission on the file opened, and set it to the\n       // given offset.\n       //\n       FileDescriptor fd \u003d NativeIO.Windows.createFile(\n           f.getAbsolutePath(),\n           NativeIO.Windows.GENERIC_READ,\n           NativeIO.Windows.FILE_SHARE_READ |\n               NativeIO.Windows.FILE_SHARE_WRITE |\n               NativeIO.Windows.FILE_SHARE_DELETE,\n           NativeIO.Windows.OPEN_EXISTING);\n       if (seekOffset \u003e 0)\n         NativeIO.Windows.setFilePointer(fd, seekOffset, NativeIO.Windows.FILE_BEGIN);\n-      return new FileInputStream(fd);\n+      return fd;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static FileDescriptor getShareDeleteFileDescriptor(\n      File f, long seekOffset) throws IOException {\n    if (!Shell.WINDOWS) {\n      RandomAccessFile rf \u003d new RandomAccessFile(f, \"r\");\n      if (seekOffset \u003e 0) {\n        rf.seek(seekOffset);\n      }\n      return rf.getFD();\n    } else {\n      // Use Windows native interface to create a FileInputStream that\n      // shares delete permission on the file opened, and set it to the\n      // given offset.\n      //\n      FileDescriptor fd \u003d NativeIO.Windows.createFile(\n          f.getAbsolutePath(),\n          NativeIO.Windows.GENERIC_READ,\n          NativeIO.Windows.FILE_SHARE_READ |\n              NativeIO.Windows.FILE_SHARE_WRITE |\n              NativeIO.Windows.FILE_SHARE_DELETE,\n          NativeIO.Windows.OPEN_EXISTING);\n      if (seekOffset \u003e 0)\n        NativeIO.Windows.setFilePointer(fd, seekOffset, NativeIO.Windows.FILE_BEGIN);\n      return fd;\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/nativeio/NativeIO.java",
          "extendedDetails": {
            "oldValue": "getShareDeleteFileInputStream",
            "newValue": "getShareDeleteFileDescriptor"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
          "commitDate": "14/12/16 11:18 AM",
          "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "31/07/15 3:01 PM",
          "commitNameOld": "21d10ccc6e463cf250414264c78acb4a6e7c83e3",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 501.89,
          "commitsBetweenForRepo": 3503,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public static FileInputStream getShareDeleteFileInputStream(File f, long seekOffset)\n-      throws IOException {\n+  public static FileDescriptor getShareDeleteFileDescriptor(\n+      File f, long seekOffset) throws IOException {\n     if (!Shell.WINDOWS) {\n       RandomAccessFile rf \u003d new RandomAccessFile(f, \"r\");\n       if (seekOffset \u003e 0) {\n         rf.seek(seekOffset);\n       }\n-      return new FileInputStream(rf.getFD());\n+      return rf.getFD();\n     } else {\n       // Use Windows native interface to create a FileInputStream that\n       // shares delete permission on the file opened, and set it to the\n       // given offset.\n       //\n       FileDescriptor fd \u003d NativeIO.Windows.createFile(\n           f.getAbsolutePath(),\n           NativeIO.Windows.GENERIC_READ,\n           NativeIO.Windows.FILE_SHARE_READ |\n               NativeIO.Windows.FILE_SHARE_WRITE |\n               NativeIO.Windows.FILE_SHARE_DELETE,\n           NativeIO.Windows.OPEN_EXISTING);\n       if (seekOffset \u003e 0)\n         NativeIO.Windows.setFilePointer(fd, seekOffset, NativeIO.Windows.FILE_BEGIN);\n-      return new FileInputStream(fd);\n+      return fd;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static FileDescriptor getShareDeleteFileDescriptor(\n      File f, long seekOffset) throws IOException {\n    if (!Shell.WINDOWS) {\n      RandomAccessFile rf \u003d new RandomAccessFile(f, \"r\");\n      if (seekOffset \u003e 0) {\n        rf.seek(seekOffset);\n      }\n      return rf.getFD();\n    } else {\n      // Use Windows native interface to create a FileInputStream that\n      // shares delete permission on the file opened, and set it to the\n      // given offset.\n      //\n      FileDescriptor fd \u003d NativeIO.Windows.createFile(\n          f.getAbsolutePath(),\n          NativeIO.Windows.GENERIC_READ,\n          NativeIO.Windows.FILE_SHARE_READ |\n              NativeIO.Windows.FILE_SHARE_WRITE |\n              NativeIO.Windows.FILE_SHARE_DELETE,\n          NativeIO.Windows.OPEN_EXISTING);\n      if (seekOffset \u003e 0)\n        NativeIO.Windows.setFilePointer(fd, seekOffset, NativeIO.Windows.FILE_BEGIN);\n      return fd;\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/nativeio/NativeIO.java",
          "extendedDetails": {
            "oldValue": "FileInputStream",
            "newValue": "FileDescriptor"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
          "commitDate": "14/12/16 11:18 AM",
          "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "31/07/15 3:01 PM",
          "commitNameOld": "21d10ccc6e463cf250414264c78acb4a6e7c83e3",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 501.89,
          "commitsBetweenForRepo": 3503,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public static FileInputStream getShareDeleteFileInputStream(File f, long seekOffset)\n-      throws IOException {\n+  public static FileDescriptor getShareDeleteFileDescriptor(\n+      File f, long seekOffset) throws IOException {\n     if (!Shell.WINDOWS) {\n       RandomAccessFile rf \u003d new RandomAccessFile(f, \"r\");\n       if (seekOffset \u003e 0) {\n         rf.seek(seekOffset);\n       }\n-      return new FileInputStream(rf.getFD());\n+      return rf.getFD();\n     } else {\n       // Use Windows native interface to create a FileInputStream that\n       // shares delete permission on the file opened, and set it to the\n       // given offset.\n       //\n       FileDescriptor fd \u003d NativeIO.Windows.createFile(\n           f.getAbsolutePath(),\n           NativeIO.Windows.GENERIC_READ,\n           NativeIO.Windows.FILE_SHARE_READ |\n               NativeIO.Windows.FILE_SHARE_WRITE |\n               NativeIO.Windows.FILE_SHARE_DELETE,\n           NativeIO.Windows.OPEN_EXISTING);\n       if (seekOffset \u003e 0)\n         NativeIO.Windows.setFilePointer(fd, seekOffset, NativeIO.Windows.FILE_BEGIN);\n-      return new FileInputStream(fd);\n+      return fd;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static FileDescriptor getShareDeleteFileDescriptor(\n      File f, long seekOffset) throws IOException {\n    if (!Shell.WINDOWS) {\n      RandomAccessFile rf \u003d new RandomAccessFile(f, \"r\");\n      if (seekOffset \u003e 0) {\n        rf.seek(seekOffset);\n      }\n      return rf.getFD();\n    } else {\n      // Use Windows native interface to create a FileInputStream that\n      // shares delete permission on the file opened, and set it to the\n      // given offset.\n      //\n      FileDescriptor fd \u003d NativeIO.Windows.createFile(\n          f.getAbsolutePath(),\n          NativeIO.Windows.GENERIC_READ,\n          NativeIO.Windows.FILE_SHARE_READ |\n              NativeIO.Windows.FILE_SHARE_WRITE |\n              NativeIO.Windows.FILE_SHARE_DELETE,\n          NativeIO.Windows.OPEN_EXISTING);\n      if (seekOffset \u003e 0)\n        NativeIO.Windows.setFilePointer(fd, seekOffset, NativeIO.Windows.FILE_BEGIN);\n      return fd;\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/nativeio/NativeIO.java",
          "extendedDetails": {}
        }
      ]
    },
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,25 @@\n+  public static FileInputStream getShareDeleteFileInputStream(File f, long seekOffset)\n+      throws IOException {\n+    if (!Shell.WINDOWS) {\n+      RandomAccessFile rf \u003d new RandomAccessFile(f, \"r\");\n+      if (seekOffset \u003e 0) {\n+        rf.seek(seekOffset);\n+      }\n+      return new FileInputStream(rf.getFD());\n+    } else {\n+      // Use Windows native interface to create a FileInputStream that\n+      // shares delete permission on the file opened, and set it to the\n+      // given offset.\n+      //\n+      FileDescriptor fd \u003d NativeIO.Windows.createFile(\n+          f.getAbsolutePath(),\n+          NativeIO.Windows.GENERIC_READ,\n+          NativeIO.Windows.FILE_SHARE_READ |\n+              NativeIO.Windows.FILE_SHARE_WRITE |\n+              NativeIO.Windows.FILE_SHARE_DELETE,\n+          NativeIO.Windows.OPEN_EXISTING);\n+      if (seekOffset \u003e 0)\n+        NativeIO.Windows.setFilePointer(fd, seekOffset, NativeIO.Windows.FILE_BEGIN);\n+      return new FileInputStream(fd);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static FileInputStream getShareDeleteFileInputStream(File f, long seekOffset)\n      throws IOException {\n    if (!Shell.WINDOWS) {\n      RandomAccessFile rf \u003d new RandomAccessFile(f, \"r\");\n      if (seekOffset \u003e 0) {\n        rf.seek(seekOffset);\n      }\n      return new FileInputStream(rf.getFD());\n    } else {\n      // Use Windows native interface to create a FileInputStream that\n      // shares delete permission on the file opened, and set it to the\n      // given offset.\n      //\n      FileDescriptor fd \u003d NativeIO.Windows.createFile(\n          f.getAbsolutePath(),\n          NativeIO.Windows.GENERIC_READ,\n          NativeIO.Windows.FILE_SHARE_READ |\n              NativeIO.Windows.FILE_SHARE_WRITE |\n              NativeIO.Windows.FILE_SHARE_DELETE,\n          NativeIO.Windows.OPEN_EXISTING);\n      if (seekOffset \u003e 0)\n        NativeIO.Windows.setFilePointer(fd, seekOffset, NativeIO.Windows.FILE_BEGIN);\n      return new FileInputStream(fd);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/nativeio/NativeIO.java"
    }
  }
}