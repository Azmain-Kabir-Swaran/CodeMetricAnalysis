{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZStandardCompressor.java",
  "functionName": "compress",
  "functionId": "compress___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zstd/ZStandardCompressor.java",
  "functionStartLine": 194,
  "functionEndLine": 241,
  "numCommitsSeen": 4,
  "timeTaken": 742,
  "changeHistory": [
    "a0a276162147e843a5a4e028abdca5b66f5118da"
  ],
  "changeHistoryShort": {
    "a0a276162147e843a5a4e028abdca5b66f5118da": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a0a276162147e843a5a4e028abdca5b66f5118da": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13578. Add Codec for ZStandard Compression. Contributed by churro morales\n",
      "commitDate": "04/01/17 6:46 AM",
      "commitName": "a0a276162147e843a5a4e028abdca5b66f5118da",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,48 @@\n+  public int compress(byte[] b, int off, int len) throws IOException {\n+    checkStream();\n+    if (b \u003d\u003d null) {\n+      throw new NullPointerException();\n+    }\n+    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+\n+    // Check if there is compressed data\n+    int n \u003d compressedDirectBuf.remaining();\n+    if (n \u003e 0) {\n+      n \u003d Math.min(n, len);\n+      compressedDirectBuf.get(b, off, n);\n+      return n;\n+    }\n+\n+    // Re-initialize the output direct buffer\n+    compressedDirectBuf.rewind();\n+    compressedDirectBuf.limit(directBufferSize);\n+\n+    // Compress data\n+    n \u003d deflateBytesDirect(\n+        uncompressedDirectBuf,\n+        uncompressedDirectBufOff,\n+        uncompressedDirectBufLen,\n+        compressedDirectBuf,\n+        directBufferSize\n+    );\n+    compressedDirectBuf.limit(n);\n+\n+    // Check if we have consumed all input buffer\n+    if (uncompressedDirectBufLen \u003c\u003d 0) {\n+      // consumed all input buffer\n+      keepUncompressedBuf \u003d false;\n+      uncompressedDirectBuf.clear();\n+      uncompressedDirectBufOff \u003d 0;\n+      uncompressedDirectBufLen \u003d 0;\n+    } else {\n+      //  did not consume all input buffer\n+      keepUncompressedBuf \u003d true;\n+    }\n+\n+    // Get at most \u0027len\u0027 bytes\n+    n \u003d Math.min(n, len);\n+    compressedDirectBuf.get(b, off, n);\n+    return n;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int compress(byte[] b, int off, int len) throws IOException {\n    checkStream();\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n      throw new ArrayIndexOutOfBoundsException();\n    }\n\n    // Check if there is compressed data\n    int n \u003d compressedDirectBuf.remaining();\n    if (n \u003e 0) {\n      n \u003d Math.min(n, len);\n      compressedDirectBuf.get(b, off, n);\n      return n;\n    }\n\n    // Re-initialize the output direct buffer\n    compressedDirectBuf.rewind();\n    compressedDirectBuf.limit(directBufferSize);\n\n    // Compress data\n    n \u003d deflateBytesDirect(\n        uncompressedDirectBuf,\n        uncompressedDirectBufOff,\n        uncompressedDirectBufLen,\n        compressedDirectBuf,\n        directBufferSize\n    );\n    compressedDirectBuf.limit(n);\n\n    // Check if we have consumed all input buffer\n    if (uncompressedDirectBufLen \u003c\u003d 0) {\n      // consumed all input buffer\n      keepUncompressedBuf \u003d false;\n      uncompressedDirectBuf.clear();\n      uncompressedDirectBufOff \u003d 0;\n      uncompressedDirectBufLen \u003d 0;\n    } else {\n      //  did not consume all input buffer\n      keepUncompressedBuf \u003d true;\n    }\n\n    // Get at most \u0027len\u0027 bytes\n    n \u003d Math.min(n, len);\n    compressedDirectBuf.get(b, off, n);\n    return n;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zstd/ZStandardCompressor.java"
    }
  }
}