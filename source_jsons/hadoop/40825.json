{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueMetrics.java",
  "functionName": "fillInValuesFromAvailableResources",
  "functionId": "fillInValuesFromAvailableResources___fromResource-Resource__targetResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java",
  "functionStartLine": 1232,
  "functionEndLine": 1253,
  "numCommitsSeen": 39,
  "timeTaken": 1535,
  "changeHistory": [
    "91ce09e7065bacd7b4f09696fff35b789c52bcd7"
  ],
  "changeHistoryShort": {
    "91ce09e7065bacd7b4f09696fff35b789c52bcd7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "91ce09e7065bacd7b4f09696fff35b789c52bcd7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9360. Do not expose innards of QueueMetrics object into FSLeafQueue#computeMaxAMResource. Contributed by Peter Bacsko\n",
      "commitDate": "15/07/19 1:47 AM",
      "commitName": "91ce09e7065bacd7b4f09696fff35b789c52bcd7",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,22 @@\n+  public void fillInValuesFromAvailableResources(Resource fromResource,\n+      Resource targetResource) {\n+    if (queueMetricsForCustomResources !\u003d null) {\n+      QueueMetricsCustomResource availableResources \u003d\n+          queueMetricsForCustomResources.getAvailable();\n+\n+      // We expect all custom resources contained in availableResources,\n+      // so we will loop through all of them.\n+      for (Map.Entry\u003cString, Long\u003e availableEntry : availableResources\n+          .getValues().entrySet()) {\n+        String resourceName \u003d availableEntry.getKey();\n+\n+        // We only update the value if fairshare is 0 for that resource.\n+        if (targetResource.getResourceValue(resourceName) \u003d\u003d 0) {\n+          Long availableValue \u003d availableEntry.getValue();\n+          long value \u003d Math.min(availableValue,\n+              fromResource.getResourceValue(resourceName));\n+          targetResource.setResourceValue(resourceName, value);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void fillInValuesFromAvailableResources(Resource fromResource,\n      Resource targetResource) {\n    if (queueMetricsForCustomResources !\u003d null) {\n      QueueMetricsCustomResource availableResources \u003d\n          queueMetricsForCustomResources.getAvailable();\n\n      // We expect all custom resources contained in availableResources,\n      // so we will loop through all of them.\n      for (Map.Entry\u003cString, Long\u003e availableEntry : availableResources\n          .getValues().entrySet()) {\n        String resourceName \u003d availableEntry.getKey();\n\n        // We only update the value if fairshare is 0 for that resource.\n        if (targetResource.getResourceValue(resourceName) \u003d\u003d 0) {\n          Long availableValue \u003d availableEntry.getValue();\n          long value \u003d Math.min(availableValue,\n              fromResource.getResourceValue(resourceName));\n          targetResource.setResourceValue(resourceName, value);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java"
    }
  }
}