{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Submitter.java",
  "functionName": "setupPipesJob",
  "functionId": "setupPipesJob___conf-JobConf",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Submitter.java",
  "functionStartLine": 282,
  "functionEndLine": 338,
  "numCommitsSeen": 9,
  "timeTaken": 4802,
  "changeHistory": [
    "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94",
    "735b50e8bd23f7fbeff3a08cf8f3fff8cbff7449",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94": "Ybodychange",
    "735b50e8bd23f7fbeff3a08cf8f3fff8cbff7449": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11393. Revert HADOOP_PREFIX, go back to HADOOP_HOME (aw)\n",
      "commitDate": "31/03/16 7:51 AM",
      "commitName": "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "27/03/15 11:28 PM",
      "commitNameOld": "27d49e6714ad7fc6038bc001e70ff5be3755f1ef",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 369.35,
      "commitsBetweenForRepo": 2801,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private static void setupPipesJob(JobConf conf) throws IOException {\n     // default map output types to Text\n     if (!getIsJavaMapper(conf)) {\n       conf.setMapRunnerClass(PipesMapRunner.class);\n       // Save the user\u0027s partitioner and hook in our\u0027s.\n       setJavaPartitioner(conf, conf.getPartitionerClass());\n       conf.setPartitionerClass(PipesPartitioner.class);\n     }\n     if (!getIsJavaReducer(conf)) {\n       conf.setReducerClass(PipesReducer.class);\n       if (!getIsJavaRecordWriter(conf)) {\n         conf.setOutputFormat(NullOutputFormat.class);\n       }\n     }\n     String textClassname \u003d Text.class.getName();\n     setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname);\n     setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname);\n     setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname);\n     setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname);\n     \n     // Use PipesNonJavaInputFormat if necessary to handle progress reporting\n     // from C++ RecordReaders ...\n     if (!getIsJavaRecordReader(conf) \u0026\u0026 !getIsJavaMapper(conf)) {\n       conf.setClass(Submitter.INPUT_FORMAT, \n                     conf.getInputFormat().getClass(), InputFormat.class);\n       conf.setInputFormat(PipesNonJavaInputFormat.class);\n     }\n     \n     String exec \u003d getExecutable(conf);\n     if (exec \u003d\u003d null) {\n       throw new IllegalArgumentException(\"No application program defined.\");\n     }\n     // add default debug script only when executable is expressed as\n     // \u003cpath\u003e#\u003cexecutable\u003e\n     if (exec.contains(\"#\")) {\n       // set default gdb commands for map and reduce task \n-      String defScript \u003d \"$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script\";\n+      String defScript \u003d \"$HADOOP_HOME/src/c++/pipes/debug/pipes-default-script\";\n       setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT,defScript);\n       setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);\n     }\n     URI[] fileCache \u003d DistributedCache.getCacheFiles(conf);\n     if (fileCache \u003d\u003d null) {\n       fileCache \u003d new URI[1];\n     } else {\n       URI[] tmp \u003d new URI[fileCache.length+1];\n       System.arraycopy(fileCache, 0, tmp, 1, fileCache.length);\n       fileCache \u003d tmp;\n     }\n     try {\n       fileCache[0] \u003d new URI(exec);\n     } catch (URISyntaxException e) {\n       IOException ie \u003d new IOException(\"Problem parsing execable URI \" + exec);\n       ie.initCause(e);\n       throw ie;\n     }\n     DistributedCache.setCacheFiles(fileCache, conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setupPipesJob(JobConf conf) throws IOException {\n    // default map output types to Text\n    if (!getIsJavaMapper(conf)) {\n      conf.setMapRunnerClass(PipesMapRunner.class);\n      // Save the user\u0027s partitioner and hook in our\u0027s.\n      setJavaPartitioner(conf, conf.getPartitionerClass());\n      conf.setPartitionerClass(PipesPartitioner.class);\n    }\n    if (!getIsJavaReducer(conf)) {\n      conf.setReducerClass(PipesReducer.class);\n      if (!getIsJavaRecordWriter(conf)) {\n        conf.setOutputFormat(NullOutputFormat.class);\n      }\n    }\n    String textClassname \u003d Text.class.getName();\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname);\n    \n    // Use PipesNonJavaInputFormat if necessary to handle progress reporting\n    // from C++ RecordReaders ...\n    if (!getIsJavaRecordReader(conf) \u0026\u0026 !getIsJavaMapper(conf)) {\n      conf.setClass(Submitter.INPUT_FORMAT, \n                    conf.getInputFormat().getClass(), InputFormat.class);\n      conf.setInputFormat(PipesNonJavaInputFormat.class);\n    }\n    \n    String exec \u003d getExecutable(conf);\n    if (exec \u003d\u003d null) {\n      throw new IllegalArgumentException(\"No application program defined.\");\n    }\n    // add default debug script only when executable is expressed as\n    // \u003cpath\u003e#\u003cexecutable\u003e\n    if (exec.contains(\"#\")) {\n      // set default gdb commands for map and reduce task \n      String defScript \u003d \"$HADOOP_HOME/src/c++/pipes/debug/pipes-default-script\";\n      setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT,defScript);\n      setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);\n    }\n    URI[] fileCache \u003d DistributedCache.getCacheFiles(conf);\n    if (fileCache \u003d\u003d null) {\n      fileCache \u003d new URI[1];\n    } else {\n      URI[] tmp \u003d new URI[fileCache.length+1];\n      System.arraycopy(fileCache, 0, tmp, 1, fileCache.length);\n      fileCache \u003d tmp;\n    }\n    try {\n      fileCache[0] \u003d new URI(exec);\n    } catch (URISyntaxException e) {\n      IOException ie \u003d new IOException(\"Problem parsing execable URI \" + exec);\n      ie.initCause(e);\n      throw ie;\n    }\n    DistributedCache.setCacheFiles(fileCache, conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Submitter.java",
      "extendedDetails": {}
    },
    "735b50e8bd23f7fbeff3a08cf8f3fff8cbff7449": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4493. Distibuted Cache Compatability Issues (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367713 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/12 12:20 PM",
      "commitName": "735b50e8bd23f7fbeff3a08cf8f3fff8cbff7449",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "02/02/12 12:37 AM",
      "commitNameOld": "cc74881acb839bbcab7e6d1346093eed3f35c780",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 180.45,
      "commitsBetweenForRepo": 1190,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,57 @@\n   private static void setupPipesJob(JobConf conf) throws IOException {\n     // default map output types to Text\n     if (!getIsJavaMapper(conf)) {\n       conf.setMapRunnerClass(PipesMapRunner.class);\n       // Save the user\u0027s partitioner and hook in our\u0027s.\n       setJavaPartitioner(conf, conf.getPartitionerClass());\n       conf.setPartitionerClass(PipesPartitioner.class);\n     }\n     if (!getIsJavaReducer(conf)) {\n       conf.setReducerClass(PipesReducer.class);\n       if (!getIsJavaRecordWriter(conf)) {\n         conf.setOutputFormat(NullOutputFormat.class);\n       }\n     }\n     String textClassname \u003d Text.class.getName();\n     setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname);\n     setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname);\n     setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname);\n     setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname);\n     \n     // Use PipesNonJavaInputFormat if necessary to handle progress reporting\n     // from C++ RecordReaders ...\n     if (!getIsJavaRecordReader(conf) \u0026\u0026 !getIsJavaMapper(conf)) {\n       conf.setClass(Submitter.INPUT_FORMAT, \n                     conf.getInputFormat().getClass(), InputFormat.class);\n       conf.setInputFormat(PipesNonJavaInputFormat.class);\n     }\n     \n     String exec \u003d getExecutable(conf);\n     if (exec \u003d\u003d null) {\n       throw new IllegalArgumentException(\"No application program defined.\");\n     }\n     // add default debug script only when executable is expressed as\n     // \u003cpath\u003e#\u003cexecutable\u003e\n     if (exec.contains(\"#\")) {\n-      DistributedCache.createSymlink(conf);\n       // set default gdb commands for map and reduce task \n       String defScript \u003d \"$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script\";\n       setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT,defScript);\n       setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);\n     }\n     URI[] fileCache \u003d DistributedCache.getCacheFiles(conf);\n     if (fileCache \u003d\u003d null) {\n       fileCache \u003d new URI[1];\n     } else {\n       URI[] tmp \u003d new URI[fileCache.length+1];\n       System.arraycopy(fileCache, 0, tmp, 1, fileCache.length);\n       fileCache \u003d tmp;\n     }\n     try {\n       fileCache[0] \u003d new URI(exec);\n     } catch (URISyntaxException e) {\n       IOException ie \u003d new IOException(\"Problem parsing execable URI \" + exec);\n       ie.initCause(e);\n       throw ie;\n     }\n     DistributedCache.setCacheFiles(fileCache, conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setupPipesJob(JobConf conf) throws IOException {\n    // default map output types to Text\n    if (!getIsJavaMapper(conf)) {\n      conf.setMapRunnerClass(PipesMapRunner.class);\n      // Save the user\u0027s partitioner and hook in our\u0027s.\n      setJavaPartitioner(conf, conf.getPartitionerClass());\n      conf.setPartitionerClass(PipesPartitioner.class);\n    }\n    if (!getIsJavaReducer(conf)) {\n      conf.setReducerClass(PipesReducer.class);\n      if (!getIsJavaRecordWriter(conf)) {\n        conf.setOutputFormat(NullOutputFormat.class);\n      }\n    }\n    String textClassname \u003d Text.class.getName();\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname);\n    \n    // Use PipesNonJavaInputFormat if necessary to handle progress reporting\n    // from C++ RecordReaders ...\n    if (!getIsJavaRecordReader(conf) \u0026\u0026 !getIsJavaMapper(conf)) {\n      conf.setClass(Submitter.INPUT_FORMAT, \n                    conf.getInputFormat().getClass(), InputFormat.class);\n      conf.setInputFormat(PipesNonJavaInputFormat.class);\n    }\n    \n    String exec \u003d getExecutable(conf);\n    if (exec \u003d\u003d null) {\n      throw new IllegalArgumentException(\"No application program defined.\");\n    }\n    // add default debug script only when executable is expressed as\n    // \u003cpath\u003e#\u003cexecutable\u003e\n    if (exec.contains(\"#\")) {\n      // set default gdb commands for map and reduce task \n      String defScript \u003d \"$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script\";\n      setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT,defScript);\n      setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);\n    }\n    URI[] fileCache \u003d DistributedCache.getCacheFiles(conf);\n    if (fileCache \u003d\u003d null) {\n      fileCache \u003d new URI[1];\n    } else {\n      URI[] tmp \u003d new URI[fileCache.length+1];\n      System.arraycopy(fileCache, 0, tmp, 1, fileCache.length);\n      fileCache \u003d tmp;\n    }\n    try {\n      fileCache[0] \u003d new URI(exec);\n    } catch (URISyntaxException e) {\n      IOException ie \u003d new IOException(\"Problem parsing execable URI \" + exec);\n      ie.initCause(e);\n      throw ie;\n    }\n    DistributedCache.setCacheFiles(fileCache, conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Submitter.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void setupPipesJob(JobConf conf) throws IOException {\n    // default map output types to Text\n    if (!getIsJavaMapper(conf)) {\n      conf.setMapRunnerClass(PipesMapRunner.class);\n      // Save the user\u0027s partitioner and hook in our\u0027s.\n      setJavaPartitioner(conf, conf.getPartitionerClass());\n      conf.setPartitionerClass(PipesPartitioner.class);\n    }\n    if (!getIsJavaReducer(conf)) {\n      conf.setReducerClass(PipesReducer.class);\n      if (!getIsJavaRecordWriter(conf)) {\n        conf.setOutputFormat(NullOutputFormat.class);\n      }\n    }\n    String textClassname \u003d Text.class.getName();\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname);\n    \n    // Use PipesNonJavaInputFormat if necessary to handle progress reporting\n    // from C++ RecordReaders ...\n    if (!getIsJavaRecordReader(conf) \u0026\u0026 !getIsJavaMapper(conf)) {\n      conf.setClass(Submitter.INPUT_FORMAT, \n                    conf.getInputFormat().getClass(), InputFormat.class);\n      conf.setInputFormat(PipesNonJavaInputFormat.class);\n    }\n    \n    String exec \u003d getExecutable(conf);\n    if (exec \u003d\u003d null) {\n      throw new IllegalArgumentException(\"No application program defined.\");\n    }\n    // add default debug script only when executable is expressed as\n    // \u003cpath\u003e#\u003cexecutable\u003e\n    if (exec.contains(\"#\")) {\n      DistributedCache.createSymlink(conf);\n      // set default gdb commands for map and reduce task \n      String defScript \u003d \"$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script\";\n      setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT,defScript);\n      setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);\n    }\n    URI[] fileCache \u003d DistributedCache.getCacheFiles(conf);\n    if (fileCache \u003d\u003d null) {\n      fileCache \u003d new URI[1];\n    } else {\n      URI[] tmp \u003d new URI[fileCache.length+1];\n      System.arraycopy(fileCache, 0, tmp, 1, fileCache.length);\n      fileCache \u003d tmp;\n    }\n    try {\n      fileCache[0] \u003d new URI(exec);\n    } catch (URISyntaxException e) {\n      IOException ie \u003d new IOException(\"Problem parsing execable URI \" + exec);\n      ie.initCause(e);\n      throw ie;\n    }\n    DistributedCache.setCacheFiles(fileCache, conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Submitter.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Submitter.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Submitter.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void setupPipesJob(JobConf conf) throws IOException {\n    // default map output types to Text\n    if (!getIsJavaMapper(conf)) {\n      conf.setMapRunnerClass(PipesMapRunner.class);\n      // Save the user\u0027s partitioner and hook in our\u0027s.\n      setJavaPartitioner(conf, conf.getPartitionerClass());\n      conf.setPartitionerClass(PipesPartitioner.class);\n    }\n    if (!getIsJavaReducer(conf)) {\n      conf.setReducerClass(PipesReducer.class);\n      if (!getIsJavaRecordWriter(conf)) {\n        conf.setOutputFormat(NullOutputFormat.class);\n      }\n    }\n    String textClassname \u003d Text.class.getName();\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname);\n    \n    // Use PipesNonJavaInputFormat if necessary to handle progress reporting\n    // from C++ RecordReaders ...\n    if (!getIsJavaRecordReader(conf) \u0026\u0026 !getIsJavaMapper(conf)) {\n      conf.setClass(Submitter.INPUT_FORMAT, \n                    conf.getInputFormat().getClass(), InputFormat.class);\n      conf.setInputFormat(PipesNonJavaInputFormat.class);\n    }\n    \n    String exec \u003d getExecutable(conf);\n    if (exec \u003d\u003d null) {\n      throw new IllegalArgumentException(\"No application program defined.\");\n    }\n    // add default debug script only when executable is expressed as\n    // \u003cpath\u003e#\u003cexecutable\u003e\n    if (exec.contains(\"#\")) {\n      DistributedCache.createSymlink(conf);\n      // set default gdb commands for map and reduce task \n      String defScript \u003d \"$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script\";\n      setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT,defScript);\n      setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);\n    }\n    URI[] fileCache \u003d DistributedCache.getCacheFiles(conf);\n    if (fileCache \u003d\u003d null) {\n      fileCache \u003d new URI[1];\n    } else {\n      URI[] tmp \u003d new URI[fileCache.length+1];\n      System.arraycopy(fileCache, 0, tmp, 1, fileCache.length);\n      fileCache \u003d tmp;\n    }\n    try {\n      fileCache[0] \u003d new URI(exec);\n    } catch (URISyntaxException e) {\n      IOException ie \u003d new IOException(\"Problem parsing execable URI \" + exec);\n      ie.initCause(e);\n      throw ie;\n    }\n    DistributedCache.setCacheFiles(fileCache, conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Submitter.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/pipes/Submitter.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/Submitter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,58 @@\n+  private static void setupPipesJob(JobConf conf) throws IOException {\n+    // default map output types to Text\n+    if (!getIsJavaMapper(conf)) {\n+      conf.setMapRunnerClass(PipesMapRunner.class);\n+      // Save the user\u0027s partitioner and hook in our\u0027s.\n+      setJavaPartitioner(conf, conf.getPartitionerClass());\n+      conf.setPartitionerClass(PipesPartitioner.class);\n+    }\n+    if (!getIsJavaReducer(conf)) {\n+      conf.setReducerClass(PipesReducer.class);\n+      if (!getIsJavaRecordWriter(conf)) {\n+        conf.setOutputFormat(NullOutputFormat.class);\n+      }\n+    }\n+    String textClassname \u003d Text.class.getName();\n+    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname);\n+    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname);\n+    setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname);\n+    setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname);\n+    \n+    // Use PipesNonJavaInputFormat if necessary to handle progress reporting\n+    // from C++ RecordReaders ...\n+    if (!getIsJavaRecordReader(conf) \u0026\u0026 !getIsJavaMapper(conf)) {\n+      conf.setClass(Submitter.INPUT_FORMAT, \n+                    conf.getInputFormat().getClass(), InputFormat.class);\n+      conf.setInputFormat(PipesNonJavaInputFormat.class);\n+    }\n+    \n+    String exec \u003d getExecutable(conf);\n+    if (exec \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"No application program defined.\");\n+    }\n+    // add default debug script only when executable is expressed as\n+    // \u003cpath\u003e#\u003cexecutable\u003e\n+    if (exec.contains(\"#\")) {\n+      DistributedCache.createSymlink(conf);\n+      // set default gdb commands for map and reduce task \n+      String defScript \u003d \"$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script\";\n+      setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT,defScript);\n+      setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);\n+    }\n+    URI[] fileCache \u003d DistributedCache.getCacheFiles(conf);\n+    if (fileCache \u003d\u003d null) {\n+      fileCache \u003d new URI[1];\n+    } else {\n+      URI[] tmp \u003d new URI[fileCache.length+1];\n+      System.arraycopy(fileCache, 0, tmp, 1, fileCache.length);\n+      fileCache \u003d tmp;\n+    }\n+    try {\n+      fileCache[0] \u003d new URI(exec);\n+    } catch (URISyntaxException e) {\n+      IOException ie \u003d new IOException(\"Problem parsing execable URI \" + exec);\n+      ie.initCause(e);\n+      throw ie;\n+    }\n+    DistributedCache.setCacheFiles(fileCache, conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setupPipesJob(JobConf conf) throws IOException {\n    // default map output types to Text\n    if (!getIsJavaMapper(conf)) {\n      conf.setMapRunnerClass(PipesMapRunner.class);\n      // Save the user\u0027s partitioner and hook in our\u0027s.\n      setJavaPartitioner(conf, conf.getPartitionerClass());\n      conf.setPartitionerClass(PipesPartitioner.class);\n    }\n    if (!getIsJavaReducer(conf)) {\n      conf.setReducerClass(PipesReducer.class);\n      if (!getIsJavaRecordWriter(conf)) {\n        conf.setOutputFormat(NullOutputFormat.class);\n      }\n    }\n    String textClassname \u003d Text.class.getName();\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname);\n    setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname);\n    \n    // Use PipesNonJavaInputFormat if necessary to handle progress reporting\n    // from C++ RecordReaders ...\n    if (!getIsJavaRecordReader(conf) \u0026\u0026 !getIsJavaMapper(conf)) {\n      conf.setClass(Submitter.INPUT_FORMAT, \n                    conf.getInputFormat().getClass(), InputFormat.class);\n      conf.setInputFormat(PipesNonJavaInputFormat.class);\n    }\n    \n    String exec \u003d getExecutable(conf);\n    if (exec \u003d\u003d null) {\n      throw new IllegalArgumentException(\"No application program defined.\");\n    }\n    // add default debug script only when executable is expressed as\n    // \u003cpath\u003e#\u003cexecutable\u003e\n    if (exec.contains(\"#\")) {\n      DistributedCache.createSymlink(conf);\n      // set default gdb commands for map and reduce task \n      String defScript \u003d \"$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script\";\n      setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT,defScript);\n      setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);\n    }\n    URI[] fileCache \u003d DistributedCache.getCacheFiles(conf);\n    if (fileCache \u003d\u003d null) {\n      fileCache \u003d new URI[1];\n    } else {\n      URI[] tmp \u003d new URI[fileCache.length+1];\n      System.arraycopy(fileCache, 0, tmp, 1, fileCache.length);\n      fileCache \u003d tmp;\n    }\n    try {\n      fileCache[0] \u003d new URI(exec);\n    } catch (URISyntaxException e) {\n      IOException ie \u003d new IOException(\"Problem parsing execable URI \" + exec);\n      ie.initCause(e);\n      throw ie;\n    }\n    DistributedCache.setCacheFiles(fileCache, conf);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/pipes/Submitter.java"
    }
  }
}