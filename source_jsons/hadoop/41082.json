{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueuePlacementPolicy.java",
  "functionName": "updateRuleSet",
  "functionId": "updateRuleSet___newRules-List__PlacementRule____newTerminalState-List__Boolean____fs-FairScheduler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueuePlacementPolicy.java",
  "functionStartLine": 99,
  "functionEndLine": 139,
  "numCommitsSeen": 8,
  "timeTaken": 4338,
  "changeHistory": [
    "2aa065d98f36527d7769c9c58a923a706036391d",
    "5257f50abb71905ef3068fd45541d00ce9e8f355"
  ],
  "changeHistoryShort": {
    "2aa065d98f36527d7769c9c58a923a706036391d": "Ybodychange",
    "5257f50abb71905ef3068fd45541d00ce9e8f355": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2aa065d98f36527d7769c9c58a923a706036391d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10082. FS-CS converter: disable terminal placement rule checking. Contributed by Peter Bacsko\n",
      "commitDate": "15/01/20 3:42 AM",
      "commitName": "2aa065d98f36527d7769c9c58a923a706036391d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "25/03/19 10:47 PM",
      "commitNameOld": "5257f50abb71905ef3068fd45541d00ce9e8f355",
      "commitAuthorOld": "yufei",
      "daysBetweenCommits": 295.25,
      "commitsBetweenForRepo": 1902,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,41 @@\n   private static void updateRuleSet(List\u003cPlacementRule\u003e newRules,\n                                     List\u003cBoolean\u003e newTerminalState,\n                                     FairScheduler fs)\n       throws AllocationConfigurationException {\n     if (newRules.isEmpty()) {\n       LOG.debug(\"Empty rule set defined, ignoring update\");\n       return;\n     }\n     LOG.debug(\"Placement rule order check\");\n     for (int i \u003d 0; i \u003c newTerminalState.size()-1; i++) {\n       if (newTerminalState.get(i)) {\n-        throw new AllocationConfigurationException(\"Rules after rule \"\n-            + (i+1) + \" in queue placement policy can never be reached\");\n+        String errorMsg \u003d \"Rules after rule \"\n+            + (i+1) + \" in queue placement policy can never be reached\";\n+        if (fs.isNoTerminalRuleCheck()) {\n+          LOG.warn(errorMsg);\n+        } else {\n+          throw new AllocationConfigurationException(errorMsg);\n+        }\n       }\n     }\n     if (!newTerminalState.get(newTerminalState.size()-1)) {\n       throw new AllocationConfigurationException(\n           \"Could get past last queue placement rule without assigning\");\n     }\n     // Set the scheduler in the rule to get queues etc\n     LOG.debug(\"Initialising new rule set\");\n     try {\n       for (PlacementRule rule: newRules){\n         rule.initialize(fs);\n       }\n     } catch (IOException ioe) {\n       // We should never throw as we pass in a FS object, however we still\n       // should consider any exception here a config error.\n       throw new AllocationConfigurationException(\n           \"Rule initialisation failed with exception\", ioe);\n     }\n     // Update the placement manager with the new rule list.\n     // We only get here when all rules are OK.\n     fs.getRMContext().getQueuePlacementManager().updateRules(newRules);\n     LOG.debug(\"PlacementManager active with new rule set\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateRuleSet(List\u003cPlacementRule\u003e newRules,\n                                    List\u003cBoolean\u003e newTerminalState,\n                                    FairScheduler fs)\n      throws AllocationConfigurationException {\n    if (newRules.isEmpty()) {\n      LOG.debug(\"Empty rule set defined, ignoring update\");\n      return;\n    }\n    LOG.debug(\"Placement rule order check\");\n    for (int i \u003d 0; i \u003c newTerminalState.size()-1; i++) {\n      if (newTerminalState.get(i)) {\n        String errorMsg \u003d \"Rules after rule \"\n            + (i+1) + \" in queue placement policy can never be reached\";\n        if (fs.isNoTerminalRuleCheck()) {\n          LOG.warn(errorMsg);\n        } else {\n          throw new AllocationConfigurationException(errorMsg);\n        }\n      }\n    }\n    if (!newTerminalState.get(newTerminalState.size()-1)) {\n      throw new AllocationConfigurationException(\n          \"Could get past last queue placement rule without assigning\");\n    }\n    // Set the scheduler in the rule to get queues etc\n    LOG.debug(\"Initialising new rule set\");\n    try {\n      for (PlacementRule rule: newRules){\n        rule.initialize(fs);\n      }\n    } catch (IOException ioe) {\n      // We should never throw as we pass in a FS object, however we still\n      // should consider any exception here a config error.\n      throw new AllocationConfigurationException(\n          \"Rule initialisation failed with exception\", ioe);\n    }\n    // Update the placement manager with the new rule list.\n    // We only get here when all rules are OK.\n    fs.getRMContext().getQueuePlacementManager().updateRules(newRules);\n    LOG.debug(\"PlacementManager active with new rule set\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueuePlacementPolicy.java",
      "extendedDetails": {}
    },
    "5257f50abb71905ef3068fd45541d00ce9e8f355": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8967. Change FairScheduler to use PlacementRule interface. Contributed by Wilfred Spiegelenburg.\n",
      "commitDate": "25/03/19 10:47 PM",
      "commitName": "5257f50abb71905ef3068fd45541d00ce9e8f355",
      "commitAuthor": "yufei",
      "diff": "@@ -0,0 +1,36 @@\n+  private static void updateRuleSet(List\u003cPlacementRule\u003e newRules,\n+                                    List\u003cBoolean\u003e newTerminalState,\n+                                    FairScheduler fs)\n+      throws AllocationConfigurationException {\n+    if (newRules.isEmpty()) {\n+      LOG.debug(\"Empty rule set defined, ignoring update\");\n+      return;\n+    }\n+    LOG.debug(\"Placement rule order check\");\n+    for (int i \u003d 0; i \u003c newTerminalState.size()-1; i++) {\n+      if (newTerminalState.get(i)) {\n+        throw new AllocationConfigurationException(\"Rules after rule \"\n+            + (i+1) + \" in queue placement policy can never be reached\");\n+      }\n+    }\n+    if (!newTerminalState.get(newTerminalState.size()-1)) {\n+      throw new AllocationConfigurationException(\n+          \"Could get past last queue placement rule without assigning\");\n+    }\n+    // Set the scheduler in the rule to get queues etc\n+    LOG.debug(\"Initialising new rule set\");\n+    try {\n+      for (PlacementRule rule: newRules){\n+        rule.initialize(fs);\n+      }\n+    } catch (IOException ioe) {\n+      // We should never throw as we pass in a FS object, however we still\n+      // should consider any exception here a config error.\n+      throw new AllocationConfigurationException(\n+          \"Rule initialisation failed with exception\", ioe);\n+    }\n+    // Update the placement manager with the new rule list.\n+    // We only get here when all rules are OK.\n+    fs.getRMContext().getQueuePlacementManager().updateRules(newRules);\n+    LOG.debug(\"PlacementManager active with new rule set\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateRuleSet(List\u003cPlacementRule\u003e newRules,\n                                    List\u003cBoolean\u003e newTerminalState,\n                                    FairScheduler fs)\n      throws AllocationConfigurationException {\n    if (newRules.isEmpty()) {\n      LOG.debug(\"Empty rule set defined, ignoring update\");\n      return;\n    }\n    LOG.debug(\"Placement rule order check\");\n    for (int i \u003d 0; i \u003c newTerminalState.size()-1; i++) {\n      if (newTerminalState.get(i)) {\n        throw new AllocationConfigurationException(\"Rules after rule \"\n            + (i+1) + \" in queue placement policy can never be reached\");\n      }\n    }\n    if (!newTerminalState.get(newTerminalState.size()-1)) {\n      throw new AllocationConfigurationException(\n          \"Could get past last queue placement rule without assigning\");\n    }\n    // Set the scheduler in the rule to get queues etc\n    LOG.debug(\"Initialising new rule set\");\n    try {\n      for (PlacementRule rule: newRules){\n        rule.initialize(fs);\n      }\n    } catch (IOException ioe) {\n      // We should never throw as we pass in a FS object, however we still\n      // should consider any exception here a config error.\n      throw new AllocationConfigurationException(\n          \"Rule initialisation failed with exception\", ioe);\n    }\n    // Update the placement manager with the new rule list.\n    // We only get here when all rules are OK.\n    fs.getRMContext().getQueuePlacementManager().updateRules(newRules);\n    LOG.debug(\"PlacementManager active with new rule set\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueuePlacementPolicy.java"
    }
  }
}