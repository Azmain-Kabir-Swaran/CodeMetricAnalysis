{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "internalQueueCall",
  "functionId": "internalQueueCall___call-Call__blocking-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 2867,
  "functionEndLine": 2890,
  "numCommitsSeen": 162,
  "timeTaken": 2113,
  "changeHistory": [
    "f96a2df38d889f29314c57f4d94227b2e419a11f",
    "ef3e1929dd64b264c6975224da696a5a605ff66a"
  ],
  "changeHistoryShort": {
    "f96a2df38d889f29314c57f4d94227b2e419a11f": "Ybodychange",
    "ef3e1929dd64b264c6975224da696a5a605ff66a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f96a2df38d889f29314c57f4d94227b2e419a11f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.\n",
      "commitDate": "23/05/19 10:28 AM",
      "commitName": "f96a2df38d889f29314c57f4d94227b2e419a11f",
      "commitAuthor": "Christopher Gregorian",
      "commitDateOld": "07/05/19 5:48 PM",
      "commitNameOld": "713e8a27aea03f302b7a7d58769c967958f6e46a",
      "commitAuthorOld": "Peter Bacsko",
      "daysBetweenCommits": 15.69,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n   private void internalQueueCall(Call call, boolean blocking)\n       throws IOException, InterruptedException {\n     try {\n       // queue the call, may be blocked if blocking is true.\n       if (blocking) {\n         callQueue.put(call);\n       } else {\n         callQueue.add(call);\n       }\n+      long deltaNanos \u003d Time.monotonicNowNanos() - call.timestampNanos;\n+      call.getProcessingDetails().set(Timing.ENQUEUE, deltaNanos,\n+          TimeUnit.NANOSECONDS);\n     } catch (CallQueueOverflowException cqe) {\n       // If rpc scheduler indicates back off based on performance degradation\n       // such as response time or rpc queue is full, we will ask the client\n       // to back off by throwing RetriableException. Whether the client will\n       // honor RetriableException and retry depends the client and its policy.\n       // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n       // RetriableException.\n       rpcMetrics.incrClientBackoff();\n       // unwrap retriable exception.\n       throw cqe.getCause();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalQueueCall(Call call, boolean blocking)\n      throws IOException, InterruptedException {\n    try {\n      // queue the call, may be blocked if blocking is true.\n      if (blocking) {\n        callQueue.put(call);\n      } else {\n        callQueue.add(call);\n      }\n      long deltaNanos \u003d Time.monotonicNowNanos() - call.timestampNanos;\n      call.getProcessingDetails().set(Timing.ENQUEUE, deltaNanos,\n          TimeUnit.NANOSECONDS);\n    } catch (CallQueueOverflowException cqe) {\n      // If rpc scheduler indicates back off based on performance degradation\n      // such as response time or rpc queue is full, we will ask the client\n      // to back off by throwing RetriableException. Whether the client will\n      // honor RetriableException and retry depends the client and its policy.\n      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n      // RetriableException.\n      rpcMetrics.incrClientBackoff();\n      // unwrap retriable exception.\n      throw cqe.getCause();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "ef3e1929dd64b264c6975224da696a5a605ff66a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14146. [SBN read] Handle exceptions from and prevent handler threads from blocking within internalQueueCall. Contributed by Chao Sun.\n",
      "commitDate": "24/12/18 9:34 AM",
      "commitName": "ef3e1929dd64b264c6975224da696a5a605ff66a",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,21 @@\n+  private void internalQueueCall(Call call, boolean blocking)\n+      throws IOException, InterruptedException {\n+    try {\n+      // queue the call, may be blocked if blocking is true.\n+      if (blocking) {\n+        callQueue.put(call);\n+      } else {\n+        callQueue.add(call);\n+      }\n+    } catch (CallQueueOverflowException cqe) {\n+      // If rpc scheduler indicates back off based on performance degradation\n+      // such as response time or rpc queue is full, we will ask the client\n+      // to back off by throwing RetriableException. Whether the client will\n+      // honor RetriableException and retry depends the client and its policy.\n+      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n+      // RetriableException.\n+      rpcMetrics.incrClientBackoff();\n+      // unwrap retriable exception.\n+      throw cqe.getCause();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalQueueCall(Call call, boolean blocking)\n      throws IOException, InterruptedException {\n    try {\n      // queue the call, may be blocked if blocking is true.\n      if (blocking) {\n        callQueue.put(call);\n      } else {\n        callQueue.add(call);\n      }\n    } catch (CallQueueOverflowException cqe) {\n      // If rpc scheduler indicates back off based on performance degradation\n      // such as response time or rpc queue is full, we will ask the client\n      // to back off by throwing RetriableException. Whether the client will\n      // honor RetriableException and retry depends the client and its policy.\n      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n      // RetriableException.\n      rpcMetrics.incrClientBackoff();\n      // unwrap retriable exception.\n      throw cqe.getCause();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}