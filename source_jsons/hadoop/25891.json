{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRClientService.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
  "functionStartLine": 116,
  "functionEndLine": 157,
  "numCommitsSeen": 56,
  "timeTaken": 9160,
  "changeHistory": [
    "823bb5dda88b2a9a1374c2a52af8d0e9b6bb801a",
    "7afe5b1a3165e284ae831cd307a526763399f66d",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
    "5d1b453b8591d87ffb564857015c26c99fb7437c",
    "0928502029ef141759008997335ea2cd836a7154",
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5",
    "c074cfd6f0ec695d85a73cddba1404c9db79342e",
    "48414b08277b86cdbc34ae36d7c4d204fd838294",
    "f340d6c894da452d91491f9fbfc0df9327ec083c",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "db8ac0ec3cbec046f9cf32644c16fd2a51dd85a2",
    "d19cfe01642f9582e1fe5d567beb480399c37a01",
    "66137cf17cb4abccd6065819d97edc63c6510477",
    "5f6adcf396b78934d7da2bba0d052038ff962f26",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "823bb5dda88b2a9a1374c2a52af8d0e9b6bb801a": "Ybodychange",
    "7afe5b1a3165e284ae831cd307a526763399f66d": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae": "Ybodychange",
    "5d1b453b8591d87ffb564857015c26c99fb7437c": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5": "Ybodychange",
    "c074cfd6f0ec695d85a73cddba1404c9db79342e": "Ybodychange",
    "48414b08277b86cdbc34ae36d7c4d204fd838294": "Ybodychange",
    "f340d6c894da452d91491f9fbfc0df9327ec083c": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ybodychange",
    "db8ac0ec3cbec046f9cf32644c16fd2a51dd85a2": "Ybodychange",
    "d19cfe01642f9582e1fe5d567beb480399c37a01": "Ybodychange",
    "66137cf17cb4abccd6065819d97edc63c6510477": "Ybodychange",
    "5f6adcf396b78934d7da2bba0d052038ff962f26": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "823bb5dda88b2a9a1374c2a52af8d0e9b6bb801a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4669. MRAM web UI does not work with HTTPS. (Contributed by Robert Kanter)\n",
      "commitDate": "23/10/18 3:28 PM",
      "commitName": "823bb5dda88b2a9a1374c2a52af8d0e9b6bb801a",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "02/10/17 8:14 PM",
      "commitNameOld": "453d48bdfbb67ed3e66c33c4aef239c3d7bdd3bc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 385.8,
      "commitsBetweenForRepo": 3515,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, appContext.getClientToAMTokenSecretManager(),\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.createSocketAddrForHost(appContext.getNMHostname(),\n         server.getListenerAddress().getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n-      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n-      // to gain access to keystore file for opening SSL listener. We can trust\n-      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n-      // running in user-land.\n+      HttpConfig.Policy httpPolicy \u003d conf.getBoolean(\n+          MRJobConfig.MR_AM_WEBAPP_HTTPS_ENABLED,\n+          MRJobConfig.DEFAULT_MR_AM_WEBAPP_HTTPS_ENABLED)\n+          ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY;\n+      boolean needsClientAuth \u003d conf.getBoolean(\n+          MRJobConfig.MR_AM_WEBAPP_HTTPS_CLIENT_AUTH,\n+          MRJobConfig.DEFAULT_MR_AM_WEBAPP_HTTPS_CLIENT_AUTH);\n       webApp \u003d\n           WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\")\n-            .withHttpPolicy(conf, Policy.HTTP_ONLY)\n+            .withHttpPolicy(conf, httpPolicy)\n             .withPortRange(conf, MRJobConfig.MR_AM_WEBAPP_PORT_RANGE)\n+            .needsClientAuth(needsClientAuth)\n             .start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, appContext.getClientToAMTokenSecretManager(),\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.createSocketAddrForHost(appContext.getNMHostname(),\n        server.getListenerAddress().getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      HttpConfig.Policy httpPolicy \u003d conf.getBoolean(\n          MRJobConfig.MR_AM_WEBAPP_HTTPS_ENABLED,\n          MRJobConfig.DEFAULT_MR_AM_WEBAPP_HTTPS_ENABLED)\n          ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY;\n      boolean needsClientAuth \u003d conf.getBoolean(\n          MRJobConfig.MR_AM_WEBAPP_HTTPS_CLIENT_AUTH,\n          MRJobConfig.DEFAULT_MR_AM_WEBAPP_HTTPS_CLIENT_AUTH);\n      webApp \u003d\n          WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\")\n            .withHttpPolicy(conf, httpPolicy)\n            .withPortRange(conf, MRJobConfig.MR_AM_WEBAPP_PORT_RANGE)\n            .needsClientAuth(needsClientAuth)\n            .start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "7afe5b1a3165e284ae831cd307a526763399f66d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6404. Allow AM to specify a port range for starting its webapp. Contributed by Varun Saxena.\n",
      "commitDate": "07/02/17 1:40 AM",
      "commitName": "7afe5b1a3165e284ae831cd307a526763399f66d",
      "commitAuthor": "Junping Du",
      "commitDateOld": "11/05/15 3:37 PM",
      "commitNameOld": "444836b3dcd3ee28238af7b5e753d644e8095788",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 637.46,
      "commitsBetweenForRepo": 4491,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, appContext.getClientToAMTokenSecretManager(),\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.createSocketAddrForHost(appContext.getNMHostname(),\n         server.getListenerAddress().getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n       // to gain access to keystore file for opening SSL listener. We can trust\n       // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n       // running in user-land.\n       webApp \u003d\n           WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\")\n-            .withHttpPolicy(conf, Policy.HTTP_ONLY).start(new AMWebApp());\n+            .withHttpPolicy(conf, Policy.HTTP_ONLY)\n+            .withPortRange(conf, MRJobConfig.MR_AM_WEBAPP_PORT_RANGE)\n+            .start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, appContext.getClientToAMTokenSecretManager(),\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.createSocketAddrForHost(appContext.getNMHostname(),\n        server.getListenerAddress().getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      webApp \u003d\n          WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\")\n            .withHttpPolicy(conf, Policy.HTTP_ONLY)\n            .withPortRange(conf, MRJobConfig.MR_AM_WEBAPP_PORT_RANGE)\n            .start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "27/02/14 11:23 AM",
      "commitNameOld": "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 154.03,
      "commitsBetweenForRepo": 1014,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, appContext.getClientToAMTokenSecretManager(),\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n-    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n+    this.bindAddress \u003d NetUtils.createSocketAddrForHost(appContext.getNMHostname(),\n+        server.getListenerAddress().getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n       // to gain access to keystore file for opening SSL listener. We can trust\n       // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n       // running in user-land.\n       webApp \u003d\n           WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\")\n             .withHttpPolicy(conf, Policy.HTTP_ONLY).start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, appContext.getClientToAMTokenSecretManager(),\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.createSocketAddrForHost(appContext.getNMHostname(),\n        server.getListenerAddress().getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      webApp \u003d\n          WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\")\n            .withHttpPolicy(conf, Policy.HTTP_ONLY).start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5770. Fixed MapReduce ApplicationMaster to correctly redirect to the YARN\u0027s web-app proxy with the correct scheme prefix. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1572711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/02/14 11:23 AM",
      "commitName": "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/10/13 3:52 PM",
      "commitNameOld": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 148.86,
      "commitsBetweenForRepo": 980,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, appContext.getClientToAMTokenSecretManager(),\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n-      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n-          start(new AMWebApp());\n+      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n+      // to gain access to keystore file for opening SSL listener. We can trust\n+      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n+      // running in user-land.\n+      webApp \u003d\n+          WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\")\n+            .withHttpPolicy(conf, Policy.HTTP_ONLY).start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, appContext.getClientToAMTokenSecretManager(),\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      webApp \u003d\n          WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\")\n            .withHttpPolicy(conf, Policy.HTTP_ONLY).start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "5d1b453b8591d87ffb564857015c26c99fb7437c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-610. ClientToken is no longer set in the environment of the Containers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 4:13 PM",
      "commitName": "5d1b453b8591d87ffb564857015c26c99fb7437c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,30 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n-    ClientToAMTokenSecretManager secretManager \u003d null;\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      String secretKeyStr \u003d\n-          System\n-              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n-      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n-      secretManager \u003d\n-          new ClientToAMTokenSecretManager(\n-            this.appContext.getApplicationAttemptId(), bytes);\n-    }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n-            conf, secretManager,\n+            conf, appContext.getClientToAMTokenSecretManager(),\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, appContext.getClientToAMTokenSecretManager(),\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/05/13 8:34 PM",
          "commitNameOld": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 31.51,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     ClientToAMTokenSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       secretManager \u003d\n           new ClientToAMTokenSecretManager(\n             this.appContext.getApplicationAttemptId(), bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    ClientToAMTokenSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      secretManager \u003d\n          new ClientToAMTokenSecretManager(\n            this.appContext.getApplicationAttemptId(), bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/05/13 8:34 PM",
          "commitNameOld": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 31.51,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     ClientToAMTokenSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       secretManager \u003d\n           new ClientToAMTokenSecretManager(\n             this.appContext.getApplicationAttemptId(), bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    ClientToAMTokenSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      secretManager \u003d\n          new ClientToAMTokenSecretManager(\n            this.appContext.getApplicationAttemptId(), bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/05/13 8:34 PM",
          "commitNameOld": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 31.51,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     ClientToAMTokenSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       secretManager \u003d\n           new ClientToAMTokenSecretManager(\n             this.appContext.getApplicationAttemptId(), bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    ClientToAMTokenSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      secretManager \u003d\n          new ClientToAMTokenSecretManager(\n            this.appContext.getApplicationAttemptId(), bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/05/13 8:34 PM",
          "commitNameOld": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 31.51,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     ClientToAMTokenSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       secretManager \u003d\n           new ClientToAMTokenSecretManager(\n             this.appContext.getApplicationAttemptId(), bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    ClientToAMTokenSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      secretManager \u003d\n          new ClientToAMTokenSecretManager(\n            this.appContext.getApplicationAttemptId(), bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
          "extendedDetails": {}
        }
      ]
    },
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-135. Client tokens should be per app-attempt, and should be unregistered on App-finish. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1433570 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/01/13 10:33 AM",
      "commitName": "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "04/01/13 12:15 PM",
      "commitNameOld": "e17cecf5505dddb92e2212147505c7c900184431",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 10.93,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     ClientToAMTokenSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       secretManager \u003d\n-          new ClientToAMTokenSecretManager(this.appContext.getApplicationID(),\n-            bytes);\n+          new ClientToAMTokenSecretManager(\n+            this.appContext.getApplicationAttemptId(), bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    ClientToAMTokenSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      secretManager \u003d\n          new ClientToAMTokenSecretManager(\n            this.appContext.getApplicationAttemptId(), bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "c074cfd6f0ec695d85a73cddba1404c9db79342e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-134. Fixes ClientToAMSecretManager creates keys without checking for validity of the appID. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1395841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/12 6:56 PM",
      "commitName": "c074cfd6f0ec695d85a73cddba1404c9db79342e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "08/05/12 8:07 AM",
      "commitNameOld": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 153.45,
      "commitsBetweenForRepo": 818,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d new InetSocketAddress(0);\n \n-    ClientToAMSecretManager secretManager \u003d null;\n+    ClientToAMTokenSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n-      secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n-      ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n-          this.appContext.getApplicationID());\n-      secretManager.setMasterKey(identifier, bytes);\n+      secretManager \u003d\n+          new ClientToAMTokenSecretManager(this.appContext.getApplicationID(),\n+            bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    ClientToAMTokenSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      secretManager \u003d\n          new ClientToAMTokenSecretManager(this.appContext.getApplicationID(),\n            bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "48414b08277b86cdbc34ae36d7c4d204fd838294": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4163. consistently set the bind address (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 11:35 AM",
      "commitName": "48414b08277b86cdbc34ae36d7c4d204fd838294",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "24/04/12 6:03 AM",
      "commitNameOld": "f340d6c894da452d91491f9fbfc0df9327ec083c",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 9.23,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,41 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n-    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n-    InetAddress hostNameResolved \u003d null;\n-    try {\n-      hostNameResolved \u003d InetAddress.getLocalHost();\n-    } catch (UnknownHostException e) {\n-      throw new YarnException(e);\n-    }\n+    InetSocketAddress address \u003d new InetSocketAddress(0);\n \n     ClientToAMSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n           this.appContext.getApplicationID());\n       secretManager.setMasterKey(identifier, bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                 MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n-    this.bindAddress \u003d\n-        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n-            + \":\" + server.getPort());\n+    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d new InetSocketAddress(0);\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n          this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d NetUtils.getConnectAddress(server);\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "f340d6c894da452d91491f9fbfc0df9327ec083c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4079. Allow MR AppMaster to limit ephemeral port range.(bobby via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329694 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/12 6:03 AM",
      "commitName": "f340d6c894da452d91491f9fbfc0df9327ec083c",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "14/03/12 3:02 PM",
      "commitNameOld": "7609243e582da9a7d008fc71569897715ced80cb",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 40.63,
      "commitsBetweenForRepo": 307,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     ClientToAMSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n           this.appContext.getApplicationID());\n       secretManager.setMasterKey(identifier, bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n-                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n+                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n+                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n          this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),\n                MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/10/11 6:51 PM",
      "commitNameOld": "68fa208b1cc991dec2577a07b3199a6935a71065",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 42.88,
      "commitsBetweenForRepo": 236,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     ClientToAMSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n           this.appContext.getApplicationID());\n       secretManager.setMasterKey(identifier, bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n-      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n+      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n          this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext, \"ws\").with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "db8ac0ec3cbec046f9cf32644c16fd2a51dd85a2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3257. Added authorization checks for the protocol between ResourceManager and ApplicatoinMaster. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189630 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/10/11 11:24 PM",
      "commitName": "db8ac0ec3cbec046f9cf32644c16fd2a51dd85a2",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/10/11 11:07 PM",
      "commitNameOld": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     ClientToAMSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n-      ApplicationTokenIdentifier identifier \u003d\n-          new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n+      ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n+          this.appContext.getApplicationID());\n       secretManager.setMasterKey(identifier, bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new MRAMPolicyProvider());\n     }\n \n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ClientTokenIdentifier identifier \u003d new ClientTokenIdentifier(\n          this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "d19cfe01642f9582e1fe5d567beb480399c37a01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2746. Yarn servers can\u0027t communicate with each other with hadoop.security.authorization set to true (acmurthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188522 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 11:07 PM",
      "commitName": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "05/10/11 4:43 AM",
      "commitNameOld": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 19.77,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,48 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     ClientToAMSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       ApplicationTokenIdentifier identifier \u003d\n           new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n       secretManager.setMasterKey(identifier, bytes);\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n+    \n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n+        false)) {\n+      refreshServiceAcls(conf, new MRAMPolicyProvider());\n+    }\n+\n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ApplicationTokenIdentifier identifier \u003d\n          new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new MRAMPolicyProvider());\n    }\n\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "66137cf17cb4abccd6065819d97edc63c6510477": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3013. Removed YarnConfiguration.YARN_SECURITY_INFO and its usage as it doesn\u0027t affect security any more. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:43 AM",
      "commitName": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/09/11 6:23 PM",
      "commitNameOld": "5f6adcf396b78934d7da2bba0d052038ff962f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 7.43,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,40 @@\n   public void start() {\n-    Configuration conf \u003d new Configuration(getConfig()); // Just for not messing up sec-info class config\n+    Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     ClientToAMSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       ApplicationTokenIdentifier identifier \u003d\n           new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n       secretManager.setMasterKey(identifier, bytes);\n-      conf.setClass(\n-          YarnConfiguration.YARN_SECURITY_INFO,\n-          SchedulerSecurityInfo.class, SecurityInfo.class); // Same for now.\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ApplicationTokenIdentifier identifier \u003d\n          new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "5f6adcf396b78934d7da2bba0d052038ff962f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3021. Change base urls for RM web-ui. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176681 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 6:23 PM",
      "commitName": "5f6adcf396b78934d7da2bba0d052038ff962f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 18.98,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public void start() {\n     Configuration conf \u003d new Configuration(getConfig()); // Just for not messing up sec-info class config\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     ClientToAMSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       ApplicationTokenIdentifier identifier \u003d\n           new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n       secretManager.setMasterKey(identifier, bytes);\n       conf.setClass(\n           YarnConfiguration.YARN_SECURITY_INFO,\n           SchedulerSecurityInfo.class, SecurityInfo.class); // Same for now.\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n             conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                 MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n-      webApp \u003d WebApps.$for(\"yarn\", AppContext.class, appContext).with(conf).\n+      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d new Configuration(getConfig()); // Just for not messing up sec-info class config\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ApplicationTokenIdentifier identifier \u003d\n          new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n      conf.setClass(\n          YarnConfiguration.YARN_SECURITY_INFO,\n          SchedulerSecurityInfo.class, SecurityInfo.class); // Same for now.\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"mapreduce\", AppContext.class, appContext).with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public void start() {\n     Configuration conf \u003d new Configuration(getConfig()); // Just for not messing up sec-info class config\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n \n     ClientToAMSecretManager secretManager \u003d null;\n     if (UserGroupInformation.isSecurityEnabled()) {\n       secretManager \u003d new ClientToAMSecretManager();\n       String secretKeyStr \u003d\n           System\n               .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n       byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n       ApplicationTokenIdentifier identifier \u003d\n           new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n       secretManager.setMasterKey(identifier, bytes);\n       conf.setClass(\n           YarnConfiguration.YARN_SECURITY_INFO,\n           SchedulerSecurityInfo.class, SecurityInfo.class); // Same for now.\n     }\n     server \u003d\n         rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n             conf, secretManager,\n-            conf.getInt(AMConstants.AM_JOB_CLIENT_THREADS, \n-                AMConstants.DEFAULT_AM_JOB_CLIENT_THREADS));\n+            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n+                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n     server.start();\n     this.bindAddress \u003d\n         NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n             + \":\" + server.getPort());\n     LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n     try {\n       webApp \u003d WebApps.$for(\"yarn\", AppContext.class, appContext).with(conf).\n           start(new AMWebApp());\n     } catch (Exception e) {\n       LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d new Configuration(getConfig()); // Just for not messing up sec-info class config\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ApplicationTokenIdentifier identifier \u003d\n          new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n      conf.setClass(\n          YarnConfiguration.YARN_SECURITY_INFO,\n          SchedulerSecurityInfo.class, SecurityInfo.class); // Same for now.\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT, \n                MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"yarn\", AppContext.class, appContext).with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    Configuration conf \u003d new Configuration(getConfig()); // Just for not messing up sec-info class config\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ApplicationTokenIdentifier identifier \u003d\n          new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n      conf.setClass(\n          YarnConfiguration.YARN_SECURITY_INFO,\n          SchedulerSecurityInfo.class, SecurityInfo.class); // Same for now.\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(AMConstants.AM_JOB_CLIENT_THREADS, \n                AMConstants.DEFAULT_AM_JOB_CLIENT_THREADS));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"yarn\", AppContext.class, appContext).with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,43 @@\n+  public void start() {\n+    Configuration conf \u003d new Configuration(getConfig()); // Just for not messing up sec-info class config\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n+    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n+    InetAddress hostNameResolved \u003d null;\n+    try {\n+      hostNameResolved \u003d InetAddress.getLocalHost();\n+    } catch (UnknownHostException e) {\n+      throw new YarnException(e);\n+    }\n+\n+    ClientToAMSecretManager secretManager \u003d null;\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      secretManager \u003d new ClientToAMSecretManager();\n+      String secretKeyStr \u003d\n+          System\n+              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n+      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n+      ApplicationTokenIdentifier identifier \u003d\n+          new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n+      secretManager.setMasterKey(identifier, bytes);\n+      conf.setClass(\n+          YarnConfiguration.YARN_SECURITY_INFO,\n+          SchedulerSecurityInfo.class, SecurityInfo.class); // Same for now.\n+    }\n+    server \u003d\n+        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n+            conf, secretManager,\n+            conf.getInt(AMConstants.AM_JOB_CLIENT_THREADS, \n+                AMConstants.DEFAULT_AM_JOB_CLIENT_THREADS));\n+    server.start();\n+    this.bindAddress \u003d\n+        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n+            + \":\" + server.getPort());\n+    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n+    try {\n+      webApp \u003d WebApps.$for(\"yarn\", AppContext.class, appContext).with(conf).\n+          start(new AMWebApp());\n+    } catch (Exception e) {\n+      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n+    }\n+    super.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d new Configuration(getConfig()); // Just for not messing up sec-info class config\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\"0.0.0.0:0\");\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n\n    ClientToAMSecretManager secretManager \u003d null;\n    if (UserGroupInformation.isSecurityEnabled()) {\n      secretManager \u003d new ClientToAMSecretManager();\n      String secretKeyStr \u003d\n          System\n              .getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);\n      byte[] bytes \u003d Base64.decodeBase64(secretKeyStr);\n      ApplicationTokenIdentifier identifier \u003d\n          new ApplicationTokenIdentifier(this.appContext.getApplicationID());\n      secretManager.setMasterKey(identifier, bytes);\n      conf.setClass(\n          YarnConfiguration.YARN_SECURITY_INFO,\n          SchedulerSecurityInfo.class, SecurityInfo.class); // Same for now.\n    }\n    server \u003d\n        rpc.getServer(MRClientProtocol.class, protocolHandler, address,\n            conf, secretManager,\n            conf.getInt(AMConstants.AM_JOB_CLIENT_THREADS, \n                AMConstants.DEFAULT_AM_JOB_CLIENT_THREADS));\n    server.start();\n    this.bindAddress \u003d\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n    LOG.info(\"Instantiated MRClientService at \" + this.bindAddress);\n    try {\n      webApp \u003d WebApps.$for(\"yarn\", AppContext.class, appContext).with(conf).\n          start(new AMWebApp());\n    } catch (Exception e) {\n      LOG.error(\"Webapps failed to start. Ignoring for now:\", e);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/client/MRClientService.java"
    }
  }
}