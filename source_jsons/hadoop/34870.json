{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "sendRequestsToResourceManagers",
  "functionId": "sendRequestsToResourceManagers___requests-Map__SubClusterId,AllocateRequest__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 1171,
  "functionEndLine": 1204,
  "numCommitsSeen": 32,
  "timeTaken": 4617,
  "changeHistory": [
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
    "3090922805699b8374a359e92323884a4177dc4e",
    "f1525825623a1307b5aa55c456b6afa3e0c61135",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e"
  ],
  "changeHistoryShort": {
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de": "Ymultichange(Yreturntypechange,Ybodychange)",
    "3090922805699b8374a359e92323884a4177dc4e": "Ymultichange(Yrename,Ybodychange)",
    "f1525825623a1307b5aa55c456b6afa3e0c61135": "Ybodychange",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7652. Handle AM register requests asynchronously in FederationInterceptor. Contributed by Botong Huang.\n",
      "commitDate": "09/10/18 10:29 AM",
      "commitName": "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7652. Handle AM register requests asynchronously in FederationInterceptor. Contributed by Botong Huang.\n",
          "commitDate": "09/10/18 10:29 AM",
          "commitName": "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "01/10/18 1:12 PM",
          "commitNameOld": "59d5af21b7a8f52e8c89cbc2d25fe3d449b2657a",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,34 @@\n-  private Registrations sendRequestsToResourceManagers(\n+  private void sendRequestsToResourceManagers(\n       Map\u003cSubClusterId, AllocateRequest\u003e requests)\n       throws YarnException, IOException {\n \n-    // Create new UAM instances for the sub-cluster that we have not seen\n-    // before\n-    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n+    // Create new UAM instances for the sub-cluster that we haven\u0027t seen before\n+    List\u003cSubClusterId\u003e newSubClusters \u003d\n+        registerAndAllocateWithNewSubClusters(requests);\n \n     // Now that all the registrations are done, send the allocation request\n     // to the sub-cluster RMs asynchronously and don\u0027t wait for the response.\n     // The responses will arrive asynchronously and will be added to the\n     // response sink, then merged and sent to the application master.\n     for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n       SubClusterId subClusterId \u003d entry.getKey();\n+      if (newSubClusters.contains(subClusterId)) {\n+        // For new sub-clusters, we have already sent the request right after\n+        // register in the async thread\n+        continue;\n+      }\n \n       if (subClusterId.equals(this.homeSubClusterId)) {\n         // Request for the home sub-cluster resource manager\n         this.homeHeartbeartHandler.allocateAsync(entry.getValue(),\n             new HeartbeatCallBack(this.homeSubClusterId, false));\n       } else {\n         if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n-          // TODO: This means that the registration for this sub-cluster RM\n-          // failed. For now, we ignore the resource requests and continue\n-          // but we need to fix this and handle this situation. One way would\n-          // be to send the request to another RM by consulting the policy.\n-          LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n-              subClusterId);\n-          continue;\n+          throw new YarnException(\"UAM not found for \" + this.attemptId\n+              + \" in sub-cluster \" + subClusterId);\n         }\n         this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n             new HeartbeatCallBack(subClusterId, true));\n       }\n     }\n-\n-    return registrations;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void sendRequestsToResourceManagers(\n      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n      throws YarnException, IOException {\n\n    // Create new UAM instances for the sub-cluster that we haven\u0027t seen before\n    List\u003cSubClusterId\u003e newSubClusters \u003d\n        registerAndAllocateWithNewSubClusters(requests);\n\n    // Now that all the registrations are done, send the allocation request\n    // to the sub-cluster RMs asynchronously and don\u0027t wait for the response.\n    // The responses will arrive asynchronously and will be added to the\n    // response sink, then merged and sent to the application master.\n    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n      SubClusterId subClusterId \u003d entry.getKey();\n      if (newSubClusters.contains(subClusterId)) {\n        // For new sub-clusters, we have already sent the request right after\n        // register in the async thread\n        continue;\n      }\n\n      if (subClusterId.equals(this.homeSubClusterId)) {\n        // Request for the home sub-cluster resource manager\n        this.homeHeartbeartHandler.allocateAsync(entry.getValue(),\n            new HeartbeatCallBack(this.homeSubClusterId, false));\n      } else {\n        if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n          throw new YarnException(\"UAM not found for \" + this.attemptId\n              + \" in sub-cluster \" + subClusterId);\n        }\n        this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n            new HeartbeatCallBack(subClusterId, true));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {
            "oldValue": "Registrations",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7652. Handle AM register requests asynchronously in FederationInterceptor. Contributed by Botong Huang.\n",
          "commitDate": "09/10/18 10:29 AM",
          "commitName": "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "01/10/18 1:12 PM",
          "commitNameOld": "59d5af21b7a8f52e8c89cbc2d25fe3d449b2657a",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,34 @@\n-  private Registrations sendRequestsToResourceManagers(\n+  private void sendRequestsToResourceManagers(\n       Map\u003cSubClusterId, AllocateRequest\u003e requests)\n       throws YarnException, IOException {\n \n-    // Create new UAM instances for the sub-cluster that we have not seen\n-    // before\n-    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n+    // Create new UAM instances for the sub-cluster that we haven\u0027t seen before\n+    List\u003cSubClusterId\u003e newSubClusters \u003d\n+        registerAndAllocateWithNewSubClusters(requests);\n \n     // Now that all the registrations are done, send the allocation request\n     // to the sub-cluster RMs asynchronously and don\u0027t wait for the response.\n     // The responses will arrive asynchronously and will be added to the\n     // response sink, then merged and sent to the application master.\n     for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n       SubClusterId subClusterId \u003d entry.getKey();\n+      if (newSubClusters.contains(subClusterId)) {\n+        // For new sub-clusters, we have already sent the request right after\n+        // register in the async thread\n+        continue;\n+      }\n \n       if (subClusterId.equals(this.homeSubClusterId)) {\n         // Request for the home sub-cluster resource manager\n         this.homeHeartbeartHandler.allocateAsync(entry.getValue(),\n             new HeartbeatCallBack(this.homeSubClusterId, false));\n       } else {\n         if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n-          // TODO: This means that the registration for this sub-cluster RM\n-          // failed. For now, we ignore the resource requests and continue\n-          // but we need to fix this and handle this situation. One way would\n-          // be to send the request to another RM by consulting the policy.\n-          LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n-              subClusterId);\n-          continue;\n+          throw new YarnException(\"UAM not found for \" + this.attemptId\n+              + \" in sub-cluster \" + subClusterId);\n         }\n         this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n             new HeartbeatCallBack(subClusterId, true));\n       }\n     }\n-\n-    return registrations;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void sendRequestsToResourceManagers(\n      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n      throws YarnException, IOException {\n\n    // Create new UAM instances for the sub-cluster that we haven\u0027t seen before\n    List\u003cSubClusterId\u003e newSubClusters \u003d\n        registerAndAllocateWithNewSubClusters(requests);\n\n    // Now that all the registrations are done, send the allocation request\n    // to the sub-cluster RMs asynchronously and don\u0027t wait for the response.\n    // The responses will arrive asynchronously and will be added to the\n    // response sink, then merged and sent to the application master.\n    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n      SubClusterId subClusterId \u003d entry.getKey();\n      if (newSubClusters.contains(subClusterId)) {\n        // For new sub-clusters, we have already sent the request right after\n        // register in the async thread\n        continue;\n      }\n\n      if (subClusterId.equals(this.homeSubClusterId)) {\n        // Request for the home sub-cluster resource manager\n        this.homeHeartbeartHandler.allocateAsync(entry.getValue(),\n            new HeartbeatCallBack(this.homeSubClusterId, false));\n      } else {\n        if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n          throw new YarnException(\"UAM not found for \" + this.attemptId\n              + \" in sub-cluster \" + subClusterId);\n        }\n        this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n            new HeartbeatCallBack(subClusterId, true));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {}
        }
      ]
    },
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
          "commitDate": "24/09/18 11:37 AM",
          "commitName": "3090922805699b8374a359e92323884a4177dc4e",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/18 11:46 AM",
          "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 11.99,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,36 @@\n-  private Registrations sendRequestsToSecondaryResourceManagers(\n+  private Registrations sendRequestsToResourceManagers(\n       Map\u003cSubClusterId, AllocateRequest\u003e requests)\n       throws YarnException, IOException {\n \n     // Create new UAM instances for the sub-cluster that we have not seen\n     // before\n     Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n \n     // Now that all the registrations are done, send the allocation request\n-    // to the sub-cluster RMs using the Unmanaged application masters\n-    // asynchronously and don\u0027t wait for the response. The responses will\n-    // arrive asynchronously and will be added to the response sink. These\n-    // responses will be sent to the application master in some future heart\n-    // beat response.\n+    // to the sub-cluster RMs asynchronously and don\u0027t wait for the response.\n+    // The responses will arrive asynchronously and will be added to the\n+    // response sink, then merged and sent to the application master.\n     for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n-      final SubClusterId subClusterId \u003d entry.getKey();\n+      SubClusterId subClusterId \u003d entry.getKey();\n \n       if (subClusterId.equals(this.homeSubClusterId)) {\n-        // Skip the request for the home sub-cluster resource manager.\n-        // It will be handled separately in the allocate() method\n-        continue;\n+        // Request for the home sub-cluster resource manager\n+        this.homeHeartbeartHandler.allocateAsync(entry.getValue(),\n+            new HeartbeatCallBack(this.homeSubClusterId, false));\n+      } else {\n+        if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n+          // TODO: This means that the registration for this sub-cluster RM\n+          // failed. For now, we ignore the resource requests and continue\n+          // but we need to fix this and handle this situation. One way would\n+          // be to send the request to another RM by consulting the policy.\n+          LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n+              subClusterId);\n+          continue;\n+        }\n+        this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n+            new HeartbeatCallBack(subClusterId, true));\n       }\n-\n-      if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n-        // TODO: This means that the registration for this sub-cluster RM\n-        // failed. For now, we ignore the resource requests and continue\n-        // but we need to fix this and handle this situation. One way would\n-        // be to send the request to another RM by consulting the policy.\n-        LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n-            subClusterId);\n-        continue;\n-      }\n-\n-      this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n-          new HeartbeatCallBack(subClusterId));\n     }\n \n     return registrations;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Registrations sendRequestsToResourceManagers(\n      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n      throws YarnException, IOException {\n\n    // Create new UAM instances for the sub-cluster that we have not seen\n    // before\n    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n\n    // Now that all the registrations are done, send the allocation request\n    // to the sub-cluster RMs asynchronously and don\u0027t wait for the response.\n    // The responses will arrive asynchronously and will be added to the\n    // response sink, then merged and sent to the application master.\n    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n      SubClusterId subClusterId \u003d entry.getKey();\n\n      if (subClusterId.equals(this.homeSubClusterId)) {\n        // Request for the home sub-cluster resource manager\n        this.homeHeartbeartHandler.allocateAsync(entry.getValue(),\n            new HeartbeatCallBack(this.homeSubClusterId, false));\n      } else {\n        if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n          // TODO: This means that the registration for this sub-cluster RM\n          // failed. For now, we ignore the resource requests and continue\n          // but we need to fix this and handle this situation. One way would\n          // be to send the request to another RM by consulting the policy.\n          LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n              subClusterId);\n          continue;\n        }\n        this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n            new HeartbeatCallBack(subClusterId, true));\n      }\n    }\n\n    return registrations;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {
            "oldValue": "sendRequestsToSecondaryResourceManagers",
            "newValue": "sendRequestsToResourceManagers"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
          "commitDate": "24/09/18 11:37 AM",
          "commitName": "3090922805699b8374a359e92323884a4177dc4e",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/18 11:46 AM",
          "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 11.99,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,36 @@\n-  private Registrations sendRequestsToSecondaryResourceManagers(\n+  private Registrations sendRequestsToResourceManagers(\n       Map\u003cSubClusterId, AllocateRequest\u003e requests)\n       throws YarnException, IOException {\n \n     // Create new UAM instances for the sub-cluster that we have not seen\n     // before\n     Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n \n     // Now that all the registrations are done, send the allocation request\n-    // to the sub-cluster RMs using the Unmanaged application masters\n-    // asynchronously and don\u0027t wait for the response. The responses will\n-    // arrive asynchronously and will be added to the response sink. These\n-    // responses will be sent to the application master in some future heart\n-    // beat response.\n+    // to the sub-cluster RMs asynchronously and don\u0027t wait for the response.\n+    // The responses will arrive asynchronously and will be added to the\n+    // response sink, then merged and sent to the application master.\n     for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n-      final SubClusterId subClusterId \u003d entry.getKey();\n+      SubClusterId subClusterId \u003d entry.getKey();\n \n       if (subClusterId.equals(this.homeSubClusterId)) {\n-        // Skip the request for the home sub-cluster resource manager.\n-        // It will be handled separately in the allocate() method\n-        continue;\n+        // Request for the home sub-cluster resource manager\n+        this.homeHeartbeartHandler.allocateAsync(entry.getValue(),\n+            new HeartbeatCallBack(this.homeSubClusterId, false));\n+      } else {\n+        if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n+          // TODO: This means that the registration for this sub-cluster RM\n+          // failed. For now, we ignore the resource requests and continue\n+          // but we need to fix this and handle this situation. One way would\n+          // be to send the request to another RM by consulting the policy.\n+          LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n+              subClusterId);\n+          continue;\n+        }\n+        this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n+            new HeartbeatCallBack(subClusterId, true));\n       }\n-\n-      if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n-        // TODO: This means that the registration for this sub-cluster RM\n-        // failed. For now, we ignore the resource requests and continue\n-        // but we need to fix this and handle this situation. One way would\n-        // be to send the request to another RM by consulting the policy.\n-        LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n-            subClusterId);\n-        continue;\n-      }\n-\n-      this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n-          new HeartbeatCallBack(subClusterId));\n     }\n \n     return registrations;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Registrations sendRequestsToResourceManagers(\n      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n      throws YarnException, IOException {\n\n    // Create new UAM instances for the sub-cluster that we have not seen\n    // before\n    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n\n    // Now that all the registrations are done, send the allocation request\n    // to the sub-cluster RMs asynchronously and don\u0027t wait for the response.\n    // The responses will arrive asynchronously and will be added to the\n    // response sink, then merged and sent to the application master.\n    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n      SubClusterId subClusterId \u003d entry.getKey();\n\n      if (subClusterId.equals(this.homeSubClusterId)) {\n        // Request for the home sub-cluster resource manager\n        this.homeHeartbeartHandler.allocateAsync(entry.getValue(),\n            new HeartbeatCallBack(this.homeSubClusterId, false));\n      } else {\n        if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n          // TODO: This means that the registration for this sub-cluster RM\n          // failed. For now, we ignore the resource requests and continue\n          // but we need to fix this and handle this situation. One way would\n          // be to send the request to another RM by consulting the policy.\n          LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n              subClusterId);\n          continue;\n        }\n        this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n            new HeartbeatCallBack(subClusterId, true));\n      }\n    }\n\n    return registrations;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1525825623a1307b5aa55c456b6afa3e0c61135": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
      "commitDate": "27/08/18 10:32 AM",
      "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/08/18 12:22 PM",
      "commitNameOld": "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,39 @@\n   private Registrations sendRequestsToSecondaryResourceManagers(\n       Map\u003cSubClusterId, AllocateRequest\u003e requests)\n       throws YarnException, IOException {\n \n     // Create new UAM instances for the sub-cluster that we have not seen\n     // before\n     Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n \n     // Now that all the registrations are done, send the allocation request\n     // to the sub-cluster RMs using the Unmanaged application masters\n     // asynchronously and don\u0027t wait for the response. The responses will\n     // arrive asynchronously and will be added to the response sink. These\n     // responses will be sent to the application master in some future heart\n     // beat response.\n     for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n       final SubClusterId subClusterId \u003d entry.getKey();\n \n       if (subClusterId.equals(this.homeSubClusterId)) {\n         // Skip the request for the home sub-cluster resource manager.\n         // It will be handled separately in the allocate() method\n         continue;\n       }\n \n       if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n         // TODO: This means that the registration for this sub-cluster RM\n         // failed. For now, we ignore the resource requests and continue\n         // but we need to fix this and handle this situation. One way would\n         // be to send the request to another RM by consulting the policy.\n         LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n             subClusterId);\n         continue;\n       }\n \n       this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n-          new AsyncCallback\u003cAllocateResponse\u003e() {\n-            @Override\n-            public void callback(AllocateResponse response) {\n-              synchronized (asyncResponseSink) {\n-                List\u003cAllocateResponse\u003e responses \u003d null;\n-                if (asyncResponseSink.containsKey(subClusterId)) {\n-                  responses \u003d asyncResponseSink.get(subClusterId);\n-                } else {\n-                  responses \u003d new ArrayList\u003c\u003e();\n-                  asyncResponseSink.put(subClusterId, responses);\n-                }\n-                responses.add(response);\n-              }\n-\n-              // Save the new AMRMToken for the UAM if present\n-              if (response.getAMRMToken() !\u003d null) {\n-                Token\u003cAMRMTokenIdentifier\u003e newToken \u003d ConverterUtils\n-                    .convertFromYarn(response.getAMRMToken(), (Text) null);\n-                // Update the token in registry or NMSS\n-                if (registryClient !\u003d null) {\n-                  registryClient\n-                      .writeAMRMTokenForUAM(\n-                          getApplicationContext().getApplicationAttemptId()\n-                              .getApplicationId(),\n-                          subClusterId.getId(), newToken);\n-                } else if (getNMStateStore() !\u003d null) {\n-                  try {\n-                    getNMStateStore().storeAMRMProxyAppContextEntry(\n-                        getApplicationContext().getApplicationAttemptId(),\n-                        NMSS_SECONDARY_SC_PREFIX + subClusterId.getId(),\n-                        newToken.encodeToUrlString()\n-                            .getBytes(STRING_TO_BYTE_FORMAT));\n-                  } catch (IOException e) {\n-                    LOG.error(\n-                        \"Error storing UAM token as AMRMProxy \"\n-                            + \"context entry in NMSS for \"\n-                            + getApplicationContext().getApplicationAttemptId(),\n-                        e);\n-                  }\n-                }\n-              }\n-\n-              // Notify policy of secondary sub-cluster responses\n-              try {\n-                policyInterpreter.notifyOfResponse(subClusterId, response);\n-              } catch (YarnException e) {\n-                LOG.warn(\n-                    \"notifyOfResponse for policy failed for home sub-cluster \"\n-                        + subClusterId,\n-                    e);\n-              }\n-            }\n-          });\n+          new HeartbeatCallBack(subClusterId));\n     }\n \n     return registrations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Registrations sendRequestsToSecondaryResourceManagers(\n      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n      throws YarnException, IOException {\n\n    // Create new UAM instances for the sub-cluster that we have not seen\n    // before\n    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n\n    // Now that all the registrations are done, send the allocation request\n    // to the sub-cluster RMs using the Unmanaged application masters\n    // asynchronously and don\u0027t wait for the response. The responses will\n    // arrive asynchronously and will be added to the response sink. These\n    // responses will be sent to the application master in some future heart\n    // beat response.\n    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n      final SubClusterId subClusterId \u003d entry.getKey();\n\n      if (subClusterId.equals(this.homeSubClusterId)) {\n        // Skip the request for the home sub-cluster resource manager.\n        // It will be handled separately in the allocate() method\n        continue;\n      }\n\n      if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n        // TODO: This means that the registration for this sub-cluster RM\n        // failed. For now, we ignore the resource requests and continue\n        // but we need to fix this and handle this situation. One way would\n        // be to send the request to another RM by consulting the policy.\n        LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n            subClusterId);\n        continue;\n      }\n\n      this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n          new HeartbeatCallBack(subClusterId));\n    }\n\n    return registrations;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6704. Add support for work preserving NM restart when FederationInterceptor is enabled in AMRMProxyService. (Botong Huang via Subru).\n",
      "commitDate": "08/12/17 3:39 PM",
      "commitName": "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "17/11/17 5:39 PM",
      "commitNameOld": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,91 @@\n   private Registrations sendRequestsToSecondaryResourceManagers(\n       Map\u003cSubClusterId, AllocateRequest\u003e requests)\n       throws YarnException, IOException {\n \n     // Create new UAM instances for the sub-cluster that we have not seen\n     // before\n     Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n \n     // Now that all the registrations are done, send the allocation request\n     // to the sub-cluster RMs using the Unmanaged application masters\n     // asynchronously and don\u0027t wait for the response. The responses will\n     // arrive asynchronously and will be added to the response sink. These\n     // responses will be sent to the application master in some future heart\n     // beat response.\n     for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n       final SubClusterId subClusterId \u003d entry.getKey();\n \n       if (subClusterId.equals(this.homeSubClusterId)) {\n         // Skip the request for the home sub-cluster resource manager.\n         // It will be handled separately in the allocate() method\n         continue;\n       }\n \n       if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n         // TODO: This means that the registration for this sub-cluster RM\n         // failed. For now, we ignore the resource requests and continue\n         // but we need to fix this and handle this situation. One way would\n         // be to send the request to another RM by consulting the policy.\n         LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n             subClusterId);\n         continue;\n       }\n \n       this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n           new AsyncCallback\u003cAllocateResponse\u003e() {\n             @Override\n             public void callback(AllocateResponse response) {\n               synchronized (asyncResponseSink) {\n                 List\u003cAllocateResponse\u003e responses \u003d null;\n                 if (asyncResponseSink.containsKey(subClusterId)) {\n                   responses \u003d asyncResponseSink.get(subClusterId);\n                 } else {\n                   responses \u003d new ArrayList\u003c\u003e();\n                   asyncResponseSink.put(subClusterId, responses);\n                 }\n                 responses.add(response);\n               }\n \n-              // Save the new AMRMToken for the UAM in registry if present\n+              // Save the new AMRMToken for the UAM if present\n               if (response.getAMRMToken() !\u003d null) {\n                 Token\u003cAMRMTokenIdentifier\u003e newToken \u003d ConverterUtils\n                     .convertFromYarn(response.getAMRMToken(), (Text) null);\n-                // Update the token in registry\n+                // Update the token in registry or NMSS\n                 if (registryClient !\u003d null) {\n                   registryClient\n                       .writeAMRMTokenForUAM(\n                           getApplicationContext().getApplicationAttemptId()\n                               .getApplicationId(),\n                           subClusterId.getId(), newToken);\n+                } else if (getNMStateStore() !\u003d null) {\n+                  try {\n+                    getNMStateStore().storeAMRMProxyAppContextEntry(\n+                        getApplicationContext().getApplicationAttemptId(),\n+                        NMSS_SECONDARY_SC_PREFIX + subClusterId.getId(),\n+                        newToken.encodeToUrlString()\n+                            .getBytes(STRING_TO_BYTE_FORMAT));\n+                  } catch (IOException e) {\n+                    LOG.error(\n+                        \"Error storing UAM token as AMRMProxy \"\n+                            + \"context entry in NMSS for \"\n+                            + getApplicationContext().getApplicationAttemptId(),\n+                        e);\n+                  }\n                 }\n               }\n \n               // Notify policy of secondary sub-cluster responses\n               try {\n                 policyInterpreter.notifyOfResponse(subClusterId, response);\n               } catch (YarnException e) {\n                 LOG.warn(\n                     \"notifyOfResponse for policy failed for home sub-cluster \"\n                         + subClusterId,\n                     e);\n               }\n             }\n           });\n     }\n \n     return registrations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Registrations sendRequestsToSecondaryResourceManagers(\n      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n      throws YarnException, IOException {\n\n    // Create new UAM instances for the sub-cluster that we have not seen\n    // before\n    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n\n    // Now that all the registrations are done, send the allocation request\n    // to the sub-cluster RMs using the Unmanaged application masters\n    // asynchronously and don\u0027t wait for the response. The responses will\n    // arrive asynchronously and will be added to the response sink. These\n    // responses will be sent to the application master in some future heart\n    // beat response.\n    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n      final SubClusterId subClusterId \u003d entry.getKey();\n\n      if (subClusterId.equals(this.homeSubClusterId)) {\n        // Skip the request for the home sub-cluster resource manager.\n        // It will be handled separately in the allocate() method\n        continue;\n      }\n\n      if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n        // TODO: This means that the registration for this sub-cluster RM\n        // failed. For now, we ignore the resource requests and continue\n        // but we need to fix this and handle this situation. One way would\n        // be to send the request to another RM by consulting the policy.\n        LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n            subClusterId);\n        continue;\n      }\n\n      this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n          new AsyncCallback\u003cAllocateResponse\u003e() {\n            @Override\n            public void callback(AllocateResponse response) {\n              synchronized (asyncResponseSink) {\n                List\u003cAllocateResponse\u003e responses \u003d null;\n                if (asyncResponseSink.containsKey(subClusterId)) {\n                  responses \u003d asyncResponseSink.get(subClusterId);\n                } else {\n                  responses \u003d new ArrayList\u003c\u003e();\n                  asyncResponseSink.put(subClusterId, responses);\n                }\n                responses.add(response);\n              }\n\n              // Save the new AMRMToken for the UAM if present\n              if (response.getAMRMToken() !\u003d null) {\n                Token\u003cAMRMTokenIdentifier\u003e newToken \u003d ConverterUtils\n                    .convertFromYarn(response.getAMRMToken(), (Text) null);\n                // Update the token in registry or NMSS\n                if (registryClient !\u003d null) {\n                  registryClient\n                      .writeAMRMTokenForUAM(\n                          getApplicationContext().getApplicationAttemptId()\n                              .getApplicationId(),\n                          subClusterId.getId(), newToken);\n                } else if (getNMStateStore() !\u003d null) {\n                  try {\n                    getNMStateStore().storeAMRMProxyAppContextEntry(\n                        getApplicationContext().getApplicationAttemptId(),\n                        NMSS_SECONDARY_SC_PREFIX + subClusterId.getId(),\n                        newToken.encodeToUrlString()\n                            .getBytes(STRING_TO_BYTE_FORMAT));\n                  } catch (IOException e) {\n                    LOG.error(\n                        \"Error storing UAM token as AMRMProxy \"\n                            + \"context entry in NMSS for \"\n                            + getApplicationContext().getApplicationAttemptId(),\n                        e);\n                  }\n                }\n              }\n\n              // Notify policy of secondary sub-cluster responses\n              try {\n                policyInterpreter.notifyOfResponse(subClusterId, response);\n              } catch (YarnException e) {\n                LOG.warn(\n                    \"notifyOfResponse for policy failed for home sub-cluster \"\n                        + subClusterId,\n                    e);\n              }\n            }\n          });\n    }\n\n    return registrations;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "28/09/17 1:04 PM",
      "commitNameOld": "ca669f9f8bc7abe5b7d4648c589aa1756bd336d1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 50.23,
      "commitsBetweenForRepo": 444,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,77 @@\n   private Registrations sendRequestsToSecondaryResourceManagers(\n       Map\u003cSubClusterId, AllocateRequest\u003e requests)\n       throws YarnException, IOException {\n \n     // Create new UAM instances for the sub-cluster that we have not seen\n     // before\n     Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n \n     // Now that all the registrations are done, send the allocation request\n     // to the sub-cluster RMs using the Unmanaged application masters\n     // asynchronously and don\u0027t wait for the response. The responses will\n     // arrive asynchronously and will be added to the response sink. These\n     // responses will be sent to the application master in some future heart\n     // beat response.\n     for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n       final SubClusterId subClusterId \u003d entry.getKey();\n \n       if (subClusterId.equals(this.homeSubClusterId)) {\n         // Skip the request for the home sub-cluster resource manager.\n         // It will be handled separately in the allocate() method\n         continue;\n       }\n \n       if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n         // TODO: This means that the registration for this sub-cluster RM\n         // failed. For now, we ignore the resource requests and continue\n         // but we need to fix this and handle this situation. One way would\n         // be to send the request to another RM by consulting the policy.\n         LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n             subClusterId);\n         continue;\n       }\n \n       this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n           new AsyncCallback\u003cAllocateResponse\u003e() {\n             @Override\n             public void callback(AllocateResponse response) {\n               synchronized (asyncResponseSink) {\n                 List\u003cAllocateResponse\u003e responses \u003d null;\n                 if (asyncResponseSink.containsKey(subClusterId)) {\n                   responses \u003d asyncResponseSink.get(subClusterId);\n                 } else {\n                   responses \u003d new ArrayList\u003c\u003e();\n                   asyncResponseSink.put(subClusterId, responses);\n                 }\n                 responses.add(response);\n               }\n \n+              // Save the new AMRMToken for the UAM in registry if present\n+              if (response.getAMRMToken() !\u003d null) {\n+                Token\u003cAMRMTokenIdentifier\u003e newToken \u003d ConverterUtils\n+                    .convertFromYarn(response.getAMRMToken(), (Text) null);\n+                // Update the token in registry\n+                if (registryClient !\u003d null) {\n+                  registryClient\n+                      .writeAMRMTokenForUAM(\n+                          getApplicationContext().getApplicationAttemptId()\n+                              .getApplicationId(),\n+                          subClusterId.getId(), newToken);\n+                }\n+              }\n+\n               // Notify policy of secondary sub-cluster responses\n               try {\n                 policyInterpreter.notifyOfResponse(subClusterId, response);\n               } catch (YarnException e) {\n                 LOG.warn(\n                     \"notifyOfResponse for policy failed for home sub-cluster \"\n                         + subClusterId,\n                     e);\n               }\n             }\n           });\n     }\n \n     return registrations;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Registrations sendRequestsToSecondaryResourceManagers(\n      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n      throws YarnException, IOException {\n\n    // Create new UAM instances for the sub-cluster that we have not seen\n    // before\n    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n\n    // Now that all the registrations are done, send the allocation request\n    // to the sub-cluster RMs using the Unmanaged application masters\n    // asynchronously and don\u0027t wait for the response. The responses will\n    // arrive asynchronously and will be added to the response sink. These\n    // responses will be sent to the application master in some future heart\n    // beat response.\n    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n      final SubClusterId subClusterId \u003d entry.getKey();\n\n      if (subClusterId.equals(this.homeSubClusterId)) {\n        // Skip the request for the home sub-cluster resource manager.\n        // It will be handled separately in the allocate() method\n        continue;\n      }\n\n      if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n        // TODO: This means that the registration for this sub-cluster RM\n        // failed. For now, we ignore the resource requests and continue\n        // but we need to fix this and handle this situation. One way would\n        // be to send the request to another RM by consulting the policy.\n        LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n            subClusterId);\n        continue;\n      }\n\n      this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n          new AsyncCallback\u003cAllocateResponse\u003e() {\n            @Override\n            public void callback(AllocateResponse response) {\n              synchronized (asyncResponseSink) {\n                List\u003cAllocateResponse\u003e responses \u003d null;\n                if (asyncResponseSink.containsKey(subClusterId)) {\n                  responses \u003d asyncResponseSink.get(subClusterId);\n                } else {\n                  responses \u003d new ArrayList\u003c\u003e();\n                  asyncResponseSink.put(subClusterId, responses);\n                }\n                responses.add(response);\n              }\n\n              // Save the new AMRMToken for the UAM in registry if present\n              if (response.getAMRMToken() !\u003d null) {\n                Token\u003cAMRMTokenIdentifier\u003e newToken \u003d ConverterUtils\n                    .convertFromYarn(response.getAMRMToken(), (Text) null);\n                // Update the token in registry\n                if (registryClient !\u003d null) {\n                  registryClient\n                      .writeAMRMTokenForUAM(\n                          getApplicationContext().getApplicationAttemptId()\n                              .getApplicationId(),\n                          subClusterId.getId(), newToken);\n                }\n              }\n\n              // Notify policy of secondary sub-cluster responses\n              try {\n                policyInterpreter.notifyOfResponse(subClusterId, response);\n              } catch (YarnException e) {\n                LOG.warn(\n                    \"notifyOfResponse for policy failed for home sub-cluster \"\n                        + subClusterId,\n                    e);\n              }\n            }\n          });\n    }\n\n    return registrations;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,63 @@\n+  private Registrations sendRequestsToSecondaryResourceManagers(\n+      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n+      throws YarnException, IOException {\n+\n+    // Create new UAM instances for the sub-cluster that we have not seen\n+    // before\n+    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n+\n+    // Now that all the registrations are done, send the allocation request\n+    // to the sub-cluster RMs using the Unmanaged application masters\n+    // asynchronously and don\u0027t wait for the response. The responses will\n+    // arrive asynchronously and will be added to the response sink. These\n+    // responses will be sent to the application master in some future heart\n+    // beat response.\n+    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n+      final SubClusterId subClusterId \u003d entry.getKey();\n+\n+      if (subClusterId.equals(this.homeSubClusterId)) {\n+        // Skip the request for the home sub-cluster resource manager.\n+        // It will be handled separately in the allocate() method\n+        continue;\n+      }\n+\n+      if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n+        // TODO: This means that the registration for this sub-cluster RM\n+        // failed. For now, we ignore the resource requests and continue\n+        // but we need to fix this and handle this situation. One way would\n+        // be to send the request to another RM by consulting the policy.\n+        LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n+            subClusterId);\n+        continue;\n+      }\n+\n+      this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n+          new AsyncCallback\u003cAllocateResponse\u003e() {\n+            @Override\n+            public void callback(AllocateResponse response) {\n+              synchronized (asyncResponseSink) {\n+                List\u003cAllocateResponse\u003e responses \u003d null;\n+                if (asyncResponseSink.containsKey(subClusterId)) {\n+                  responses \u003d asyncResponseSink.get(subClusterId);\n+                } else {\n+                  responses \u003d new ArrayList\u003c\u003e();\n+                  asyncResponseSink.put(subClusterId, responses);\n+                }\n+                responses.add(response);\n+              }\n+\n+              // Notify policy of secondary sub-cluster responses\n+              try {\n+                policyInterpreter.notifyOfResponse(subClusterId, response);\n+              } catch (YarnException e) {\n+                LOG.warn(\n+                    \"notifyOfResponse for policy failed for home sub-cluster \"\n+                        + subClusterId,\n+                    e);\n+              }\n+            }\n+          });\n+    }\n+\n+    return registrations;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Registrations sendRequestsToSecondaryResourceManagers(\n      Map\u003cSubClusterId, AllocateRequest\u003e requests)\n      throws YarnException, IOException {\n\n    // Create new UAM instances for the sub-cluster that we have not seen\n    // before\n    Registrations registrations \u003d registerWithNewSubClusters(requests.keySet());\n\n    // Now that all the registrations are done, send the allocation request\n    // to the sub-cluster RMs using the Unmanaged application masters\n    // asynchronously and don\u0027t wait for the response. The responses will\n    // arrive asynchronously and will be added to the response sink. These\n    // responses will be sent to the application master in some future heart\n    // beat response.\n    for (Entry\u003cSubClusterId, AllocateRequest\u003e entry : requests.entrySet()) {\n      final SubClusterId subClusterId \u003d entry.getKey();\n\n      if (subClusterId.equals(this.homeSubClusterId)) {\n        // Skip the request for the home sub-cluster resource manager.\n        // It will be handled separately in the allocate() method\n        continue;\n      }\n\n      if (!this.uamPool.hasUAMId(subClusterId.getId())) {\n        // TODO: This means that the registration for this sub-cluster RM\n        // failed. For now, we ignore the resource requests and continue\n        // but we need to fix this and handle this situation. One way would\n        // be to send the request to another RM by consulting the policy.\n        LOG.warn(\"Unmanaged AM registration not found for sub-cluster {}\",\n            subClusterId);\n        continue;\n      }\n\n      this.uamPool.allocateAsync(subClusterId.getId(), entry.getValue(),\n          new AsyncCallback\u003cAllocateResponse\u003e() {\n            @Override\n            public void callback(AllocateResponse response) {\n              synchronized (asyncResponseSink) {\n                List\u003cAllocateResponse\u003e responses \u003d null;\n                if (asyncResponseSink.containsKey(subClusterId)) {\n                  responses \u003d asyncResponseSink.get(subClusterId);\n                } else {\n                  responses \u003d new ArrayList\u003c\u003e();\n                  asyncResponseSink.put(subClusterId, responses);\n                }\n                responses.add(response);\n              }\n\n              // Notify policy of secondary sub-cluster responses\n              try {\n                policyInterpreter.notifyOfResponse(subClusterId, response);\n              } catch (YarnException e) {\n                LOG.warn(\n                    \"notifyOfResponse for policy failed for home sub-cluster \"\n                        + subClusterId,\n                    e);\n              }\n            }\n          });\n    }\n\n    return registrations;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}