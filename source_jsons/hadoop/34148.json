{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerScheduler.java",
  "functionName": "startPendingContainers",
  "functionId": "startPendingContainers___forceStartGuaranteedContaieners-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
  "functionStartLine": 386,
  "functionEndLine": 394,
  "numCommitsSeen": 42,
  "timeTaken": 4710,
  "changeHistory": [
    "df800f6cf3ea663daf4081ebe784808b08d9366d",
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8",
    "2ae72692fc370267141a1ee55ef372ff62302b54",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d"
  ],
  "changeHistoryShort": {
    "df800f6cf3ea663daf4081ebe784808b08d9366d": "Ybodychange",
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8": "Ybodychange",
    "2ae72692fc370267141a1ee55ef372ff62302b54": "Ymultichange(Yparameterchange,Ybodychange)",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ymultichange(Ymovefromfile,Ybodychange)",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df800f6cf3ea663daf4081ebe784808b08d9366d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7240. Add more states and transitions to stabilize the NM Container state machine. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "25/09/17 4:02 PM",
      "commitName": "df800f6cf3ea663daf4081ebe784808b08d9366d",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/09/17 8:51 AM",
      "commitNameOld": "4f8194430fc6a69d9cc99b78828fd7045d5683e8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 11.3,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,9 @@\n   private void startPendingContainers(boolean forceStartGuaranteedContaieners) {\n-    // Start pending guaranteed containers, if resources available.\n+    // Start guaranteed containers that are paused, if resources available.\n     boolean resourcesAvailable \u003d startContainers(\n-        queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n-    // Resume opportunistic containers, if resource available.\n-    if (resourcesAvailable) {\n-      List\u003cContainer\u003e pausedContainers \u003d new ArrayList\u003cContainer\u003e();\n-      Map\u003cContainerId, Container\u003e containers \u003d\n-          context.getContainers();\n-      for (Map.Entry\u003cContainerId, Container\u003eentry : containers.entrySet()) {\n-        ContainerId contId \u003d entry.getKey();\n-        // Find containers that were not already started and are in paused state\n-        if(false \u003d\u003d runningContainers.containsKey(contId)) {\n-          if(containers.get(contId).getContainerState()\n-              \u003d\u003d ContainerState.PAUSED) {\n-            pausedContainers.add(containers.get(contId));\n-          }\n-        }\n-      }\n-      resourcesAvailable \u003d startContainers(pausedContainers, false);\n-    }\n+          queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n     // Start opportunistic containers, if resources available.\n     if (resourcesAvailable) {\n       startContainers(queuedOpportunisticContainers.values(), false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startPendingContainers(boolean forceStartGuaranteedContaieners) {\n    // Start guaranteed containers that are paused, if resources available.\n    boolean resourcesAvailable \u003d startContainers(\n          queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n    // Start opportunistic containers, if resources available.\n    if (resourcesAvailable) {\n      startContainers(queuedOpportunisticContainers.values(), false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5216. Expose configurable preemption policy for OPPORTUNISTIC containers running on the NM. (Hitesh Sharma via asuresh)\n",
      "commitDate": "14/09/17 8:51 AM",
      "commitName": "4f8194430fc6a69d9cc99b78828fd7045d5683e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "12/09/17 4:10 PM",
      "commitNameOld": "2ae72692fc370267141a1ee55ef372ff62302b54",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.7,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,26 @@\n   private void startPendingContainers(boolean forceStartGuaranteedContaieners) {\n     // Start pending guaranteed containers, if resources available.\n     boolean resourcesAvailable \u003d startContainers(\n         queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n+    // Resume opportunistic containers, if resource available.\n+    if (resourcesAvailable) {\n+      List\u003cContainer\u003e pausedContainers \u003d new ArrayList\u003cContainer\u003e();\n+      Map\u003cContainerId, Container\u003e containers \u003d\n+          context.getContainers();\n+      for (Map.Entry\u003cContainerId, Container\u003eentry : containers.entrySet()) {\n+        ContainerId contId \u003d entry.getKey();\n+        // Find containers that were not already started and are in paused state\n+        if(false \u003d\u003d runningContainers.containsKey(contId)) {\n+          if(containers.get(contId).getContainerState()\n+              \u003d\u003d ContainerState.PAUSED) {\n+            pausedContainers.add(containers.get(contId));\n+          }\n+        }\n+      }\n+      resourcesAvailable \u003d startContainers(pausedContainers, false);\n+    }\n     // Start opportunistic containers, if resources available.\n     if (resourcesAvailable) {\n       startContainers(queuedOpportunisticContainers.values(), false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startPendingContainers(boolean forceStartGuaranteedContaieners) {\n    // Start pending guaranteed containers, if resources available.\n    boolean resourcesAvailable \u003d startContainers(\n        queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n    // Resume opportunistic containers, if resource available.\n    if (resourcesAvailable) {\n      List\u003cContainer\u003e pausedContainers \u003d new ArrayList\u003cContainer\u003e();\n      Map\u003cContainerId, Container\u003e containers \u003d\n          context.getContainers();\n      for (Map.Entry\u003cContainerId, Container\u003eentry : containers.entrySet()) {\n        ContainerId contId \u003d entry.getKey();\n        // Find containers that were not already started and are in paused state\n        if(false \u003d\u003d runningContainers.containsKey(contId)) {\n          if(containers.get(contId).getContainerState()\n              \u003d\u003d ContainerState.PAUSED) {\n            pausedContainers.add(containers.get(contId));\n          }\n        }\n      }\n      resourcesAvailable \u003d startContainers(pausedContainers, false);\n    }\n    // Start opportunistic containers, if resources available.\n    if (resourcesAvailable) {\n      startContainers(queuedOpportunisticContainers.values(), false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "2ae72692fc370267141a1ee55ef372ff62302b54": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7185. ContainerScheduler should only look at availableResource for GUARANTEED containers when OPPORTUNISTIC container queuing is enabled. (Wangda Tan via asuresh)\n",
      "commitDate": "12/09/17 4:10 PM",
      "commitName": "2ae72692fc370267141a1ee55ef372ff62302b54",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7185. ContainerScheduler should only look at availableResource for GUARANTEED containers when OPPORTUNISTIC container queuing is enabled. (Wangda Tan via asuresh)\n",
          "commitDate": "12/09/17 4:10 PM",
          "commitName": "2ae72692fc370267141a1ee55ef372ff62302b54",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "20/08/17 7:54 AM",
          "commitNameOld": "8410d862d3a72740f461ef91dddb5325955e1ca5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 23.34,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  private void startPendingContainers() {\n+  private void startPendingContainers(boolean forceStartGuaranteedContaieners) {\n     // Start pending guaranteed containers, if resources available.\n-    boolean resourcesAvailable \u003d\n-        startContainersFromQueue(queuedGuaranteedContainers.values());\n+    boolean resourcesAvailable \u003d startContainers(\n+        queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n     // Start opportunistic containers, if resources available.\n     if (resourcesAvailable) {\n-      startContainersFromQueue(queuedOpportunisticContainers.values());\n+      startContainers(queuedOpportunisticContainers.values(), false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startPendingContainers(boolean forceStartGuaranteedContaieners) {\n    // Start pending guaranteed containers, if resources available.\n    boolean resourcesAvailable \u003d startContainers(\n        queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n    // Start opportunistic containers, if resources available.\n    if (resourcesAvailable) {\n      startContainers(queuedOpportunisticContainers.values(), false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[forceStartGuaranteedContaieners-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7185. ContainerScheduler should only look at availableResource for GUARANTEED containers when OPPORTUNISTIC container queuing is enabled. (Wangda Tan via asuresh)\n",
          "commitDate": "12/09/17 4:10 PM",
          "commitName": "2ae72692fc370267141a1ee55ef372ff62302b54",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "20/08/17 7:54 AM",
          "commitNameOld": "8410d862d3a72740f461ef91dddb5325955e1ca5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 23.34,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  private void startPendingContainers() {\n+  private void startPendingContainers(boolean forceStartGuaranteedContaieners) {\n     // Start pending guaranteed containers, if resources available.\n-    boolean resourcesAvailable \u003d\n-        startContainersFromQueue(queuedGuaranteedContainers.values());\n+    boolean resourcesAvailable \u003d startContainers(\n+        queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n     // Start opportunistic containers, if resources available.\n     if (resourcesAvailable) {\n-      startContainersFromQueue(queuedOpportunisticContainers.values());\n+      startContainers(queuedOpportunisticContainers.values(), false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startPendingContainers(boolean forceStartGuaranteedContaieners) {\n    // Start pending guaranteed containers, if resources available.\n    boolean resourcesAvailable \u003d startContainers(\n        queuedGuaranteedContainers.values(), forceStartGuaranteedContaieners);\n    // Start opportunistic containers, if resources available.\n    if (resourcesAvailable) {\n      startContainers(queuedOpportunisticContainers.values(), false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,9 @@\n   private void startPendingContainers() {\n     // Start pending guaranteed containers, if resources available.\n     boolean resourcesAvailable \u003d\n-        startContainersFromQueue(queuedGuaranteedContainers);\n-\n+        startContainersFromQueue(queuedGuaranteedContainers.values());\n     // Start opportunistic containers, if resources available.\n     if (resourcesAvailable) {\n-      startContainersFromQueue(queuedOpportunisticContainers);\n+      startContainersFromQueue(queuedOpportunisticContainers.values());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startPendingContainers() {\n    // Start pending guaranteed containers, if resources available.\n    boolean resourcesAvailable \u003d\n        startContainersFromQueue(queuedGuaranteedContainers.values());\n    // Start opportunistic containers, if resources available.\n    if (resourcesAvailable) {\n      startContainersFromQueue(queuedOpportunisticContainers.values());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
            "oldMethodName": "startPendingContainers",
            "newMethodName": "startPendingContainers"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,9 @@\n   private void startPendingContainers() {\n     // Start pending guaranteed containers, if resources available.\n     boolean resourcesAvailable \u003d\n-        startContainersFromQueue(queuedGuaranteedContainers);\n-\n+        startContainersFromQueue(queuedGuaranteedContainers.values());\n     // Start opportunistic containers, if resources available.\n     if (resourcesAvailable) {\n-      startContainersFromQueue(queuedOpportunisticContainers);\n+      startContainersFromQueue(queuedOpportunisticContainers.values());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startPendingContainers() {\n    // Start pending guaranteed containers, if resources available.\n    boolean resourcesAvailable \u003d\n        startContainersFromQueue(queuedGuaranteedContainers.values());\n    // Start opportunistic containers, if resources available.\n    if (resourcesAvailable) {\n      startContainersFromQueue(queuedOpportunisticContainers.values());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
      "commitDate": "20/04/16 9:55 AM",
      "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,10 @@\n+  private void startPendingContainers() {\n+    // Start pending guaranteed containers, if resources available.\n+    boolean resourcesAvailable \u003d\n+        startContainersFromQueue(queuedGuaranteedContainers);\n+\n+    // Start opportunistic containers, if resources available.\n+    if (resourcesAvailable) {\n+      startContainersFromQueue(queuedOpportunisticContainers);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void startPendingContainers() {\n    // Start pending guaranteed containers, if resources available.\n    boolean resourcesAvailable \u003d\n        startContainersFromQueue(queuedGuaranteedContainers);\n\n    // Start opportunistic containers, if resources available.\n    if (resourcesAvailable) {\n      startContainersFromQueue(queuedOpportunisticContainers);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java"
    }
  }
}