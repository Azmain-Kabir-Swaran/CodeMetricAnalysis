{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSWebApp.java",
  "functionName": "printPageSimulate",
  "functionId": "printPageSimulate___request-HttpServletRequest__response-HttpServletResponse__timeunit-int__timeunitLabel-String",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
  "functionStartLine": 228,
  "functionEndLine": 257,
  "numCommitsSeen": 10,
  "timeTaken": 838,
  "changeHistory": [
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "07/03/17 1:47 PM",
      "commitNameOld": "1598fd3b7948b3592775e3be3227c4a336122bc9",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 22.06,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void printPageSimulate(HttpServletRequest request,\n                                  HttpServletResponse response, int timeunit,\n                                  String timeunitLabel)\n           throws IOException {\n     response.setContentType(\"text/html\");\n     response.setStatus(HttpServletResponse.SC_OK);\n \n     // queues {0}\n-    Set\u003cString\u003e queues \u003d wrapper.getQueueSet();\n+    Set\u003cString\u003e queues \u003d wrapper.getTracker().getQueueSet();\n     StringBuilder queueInfo \u003d new StringBuilder();\n \n     int i \u003d 0;\n     for (String queue : queues) {\n       queueInfo.append(\"legends[4][\").append(i).append(\"] \u003d \u0027queue.\")\n               .append(queue).append(\".allocated.memory\u0027;\");\n       queueInfo.append(\"legends[5][\").append(i).append(\"] \u003d \u0027queue.\")\n               .append(queue).append(\".allocated.vcores\u0027;\");\n       i ++;\n     }\n \n     // time unit label {1}\n     // time unit {2}\n     // ajax update time interval {3}\n     String simulateInfo \u003d MessageFormat.format(simulateTemplate,\n             queueInfo.toString(), timeunitLabel, \"\" + timeunit,\n             \"\" + ajaxUpdateTimeMS);\n     response.getWriter().println(simulateInfo);\n \n     ((Request) request).setHandled(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printPageSimulate(HttpServletRequest request,\n                                 HttpServletResponse response, int timeunit,\n                                 String timeunitLabel)\n          throws IOException {\n    response.setContentType(\"text/html\");\n    response.setStatus(HttpServletResponse.SC_OK);\n\n    // queues {0}\n    Set\u003cString\u003e queues \u003d wrapper.getTracker().getQueueSet();\n    StringBuilder queueInfo \u003d new StringBuilder();\n\n    int i \u003d 0;\n    for (String queue : queues) {\n      queueInfo.append(\"legends[4][\").append(i).append(\"] \u003d \u0027queue.\")\n              .append(queue).append(\".allocated.memory\u0027;\");\n      queueInfo.append(\"legends[5][\").append(i).append(\"] \u003d \u0027queue.\")\n              .append(queue).append(\".allocated.vcores\u0027;\");\n      i ++;\n    }\n\n    // time unit label {1}\n    // time unit {2}\n    // ajax update time interval {3}\n    String simulateInfo \u003d MessageFormat.format(simulateTemplate,\n            queueInfo.toString(), timeunitLabel, \"\" + timeunit,\n            \"\" + ajaxUpdateTimeMS);\n    response.getWriter().println(simulateInfo);\n\n    ((Request) request).setHandled(true);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,30 @@\n+  private void printPageSimulate(HttpServletRequest request,\n+                                 HttpServletResponse response, int timeunit,\n+                                 String timeunitLabel)\n+          throws IOException {\n+    response.setContentType(\"text/html\");\n+    response.setStatus(HttpServletResponse.SC_OK);\n+\n+    // queues {0}\n+    Set\u003cString\u003e queues \u003d wrapper.getQueueSet();\n+    StringBuilder queueInfo \u003d new StringBuilder();\n+\n+    int i \u003d 0;\n+    for (String queue : queues) {\n+      queueInfo.append(\"legends[4][\").append(i).append(\"] \u003d \u0027queue.\")\n+              .append(queue).append(\".allocated.memory\u0027;\");\n+      queueInfo.append(\"legends[5][\").append(i).append(\"] \u003d \u0027queue.\")\n+              .append(queue).append(\".allocated.vcores\u0027;\");\n+      i ++;\n+    }\n+\n+    // time unit label {1}\n+    // time unit {2}\n+    // ajax update time interval {3}\n+    String simulateInfo \u003d MessageFormat.format(simulateTemplate,\n+            queueInfo.toString(), timeunitLabel, \"\" + timeunit,\n+            \"\" + ajaxUpdateTimeMS);\n+    response.getWriter().println(simulateInfo);\n+\n+    ((Request) request).setHandled(true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printPageSimulate(HttpServletRequest request,\n                                 HttpServletResponse response, int timeunit,\n                                 String timeunitLabel)\n          throws IOException {\n    response.setContentType(\"text/html\");\n    response.setStatus(HttpServletResponse.SC_OK);\n\n    // queues {0}\n    Set\u003cString\u003e queues \u003d wrapper.getQueueSet();\n    StringBuilder queueInfo \u003d new StringBuilder();\n\n    int i \u003d 0;\n    for (String queue : queues) {\n      queueInfo.append(\"legends[4][\").append(i).append(\"] \u003d \u0027queue.\")\n              .append(queue).append(\".allocated.memory\u0027;\");\n      queueInfo.append(\"legends[5][\").append(i).append(\"] \u003d \u0027queue.\")\n              .append(queue).append(\".allocated.vcores\u0027;\");\n      i ++;\n    }\n\n    // time unit label {1}\n    // time unit {2}\n    // ajax update time interval {3}\n    String simulateInfo \u003d MessageFormat.format(simulateTemplate,\n            queueInfo.toString(), timeunitLabel, \"\" + timeunit,\n            \"\" + ajaxUpdateTimeMS);\n    response.getWriter().println(simulateInfo);\n\n    ((Request) request).setHandled(true);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java"
    }
  }
}