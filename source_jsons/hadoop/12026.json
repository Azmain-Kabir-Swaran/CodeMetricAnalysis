{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetImpl.java",
  "functionName": "initReplicaRecovery",
  "functionId": "initReplicaRecovery___bpid-String__map-ReplicaMap__block-Block__recoveryId-long__xceiverStopTimeout-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
  "functionStartLine": 2673,
  "functionEndLine": 2684,
  "numCommitsSeen": 243,
  "timeTaken": 11539,
  "changeHistory": [
    "8ae4729107d33c6001cf1fdc8837afb71ea6c0d3",
    "86c9862bec0248d671e657aa56094a2919b8ac14",
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
    "7723b139d55fc2c3954939559cb4914046a0f81c",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "bc13dfb1426944ce45293cb8f444239a7406762c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8ae4729107d33c6001cf1fdc8837afb71ea6c0d3": "Ybodychange",
    "86c9862bec0248d671e657aa56094a2919b8ac14": "Ybodychange",
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b": "Ybodychange",
    "7723b139d55fc2c3954939559cb4914046a0f81c": "Ymultichange(Yparameterchange,Ybodychange)",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "bc13dfb1426944ce45293cb8f444239a7406762c": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8ae4729107d33c6001cf1fdc8837afb71ea6c0d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10828. Fix usage of FsDatasetImpl object lock in ReplicaMap. (Arpit Agarwal)\n",
      "commitDate": "27/09/16 10:02 AM",
      "commitName": "8ae4729107d33c6001cf1fdc8837afb71ea6c0d3",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "13/09/16 12:54 PM",
      "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 13.88,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n       Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n     while (true) {\n       try {\n-        synchronized (map.getMutex()) {\n+        try (AutoCloseableLock lock \u003d map.getLock().acquire()) {\n           return initReplicaRecoveryImpl(bpid, map, block, recoveryId);\n         }\n       } catch (MustStopExistingWriter e) {\n         e.getReplicaInPipeline().stopWriter(xceiverStopTimeout);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n    while (true) {\n      try {\n        try (AutoCloseableLock lock \u003d map.getLock().acquire()) {\n          return initReplicaRecoveryImpl(bpid, map, block, recoveryId);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplicaInPipeline().stopWriter(xceiverStopTimeout);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "86c9862bec0248d671e657aa56094a2919b8ac14": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "13/09/16 12:54 PM",
      "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "10/09/16 6:22 PM",
      "commitNameOld": "a99bf26a0899bcc4307c3a242c8414eaef555aa7",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n       Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n     while (true) {\n       try {\n         synchronized (map.getMutex()) {\n           return initReplicaRecoveryImpl(bpid, map, block, recoveryId);\n         }\n       } catch (MustStopExistingWriter e) {\n-        e.getReplica().stopWriter(xceiverStopTimeout);\n+        e.getReplicaInPipeline().stopWriter(xceiverStopTimeout);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n    while (true) {\n      try {\n        synchronized (map.getMutex()) {\n          return initReplicaRecoveryImpl(bpid, map, block, recoveryId);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplicaInPipeline().stopWriter(xceiverStopTimeout);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8496. Calling stopWriter() with FSDatasetImpl lock held may block other threads (cmccabe)\n",
      "commitDate": "04/04/16 6:02 PM",
      "commitName": "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "18/03/16 8:24 AM",
      "commitNameOld": "63c966a3fbeb675959fc4101e65de9f57aecd17d",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 17.4,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,12 @@\n   static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n       Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n-    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n-    LOG.info(\"initReplicaRecovery: \" + block + \", recoveryId\u003d\" + recoveryId\n-        + \", replica\u003d\" + replica);\n-\n-    //check replica\n-    if (replica \u003d\u003d null) {\n-      return null;\n-    }\n-\n-    //stop writer if there is any\n-    if (replica instanceof ReplicaInPipeline) {\n-      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n-      rip.stopWriter(xceiverStopTimeout);\n-\n-      //check replica bytes on disk.\n-      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n-        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n-            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n+    while (true) {\n+      try {\n+        synchronized (map.getMutex()) {\n+          return initReplicaRecoveryImpl(bpid, map, block, recoveryId);\n+        }\n+      } catch (MustStopExistingWriter e) {\n+        e.getReplica().stopWriter(xceiverStopTimeout);\n       }\n-\n-      //check the replica\u0027s files\n-      checkReplicaFiles(rip);\n     }\n-\n-    //check generation stamp\n-    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n-      throw new IOException(\n-          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n-          + block + \", replica\u003d\" + replica);\n-    }\n-\n-    //check recovery id\n-    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n-      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n-          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n-          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n-    }\n-\n-    //check RUR\n-    final ReplicaUnderRecovery rur;\n-    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n-      rur \u003d (ReplicaUnderRecovery)replica;\n-      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n-        throw new RecoveryInProgressException(\n-            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n-            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n-      }\n-      final long oldRecoveryID \u003d rur.getRecoveryID();\n-      rur.setRecoveryID(recoveryId);\n-      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n-          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n-    }\n-    else {\n-      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n-      map.add(bpid, rur);\n-      LOG.info(\"initReplicaRecovery: changing replica state for \"\n-          + block + \" from \" + replica.getState()\n-          + \" to \" + rur.getState());\n-    }\n-    return rur.createInfo();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n    while (true) {\n      try {\n        synchronized (map.getMutex()) {\n          return initReplicaRecoveryImpl(bpid, map, block, recoveryId);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplica().stopWriter(xceiverStopTimeout);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "7723b139d55fc2c3954939559cb4914046a0f81c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5016. Deadlock in pipeline recovery causes Datanode to be marked dead. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/13 9:42 PM",
      "commitName": "7723b139d55fc2c3954939559cb4914046a0f81c",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5016. Deadlock in pipeline recovery causes Datanode to be marked dead. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/13 9:42 PM",
          "commitName": "7723b139d55fc2c3954939559cb4914046a0f81c",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "21/05/13 6:42 AM",
          "commitNameOld": "98a692fd6361365db4afb9523a5d83ee32774112",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 65.63,
          "commitsBetweenForRepo": 415,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n-      ReplicaMap map, Block block, long recoveryId) throws IOException {\n+  static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n+      Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n     final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n     LOG.info(\"initReplicaRecovery: \" + block + \", recoveryId\u003d\" + recoveryId\n         + \", replica\u003d\" + replica);\n \n     //check replica\n     if (replica \u003d\u003d null) {\n       return null;\n     }\n \n     //stop writer if there is any\n     if (replica instanceof ReplicaInPipeline) {\n       final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n-      rip.stopWriter();\n+      rip.stopWriter(xceiverStopTimeout);\n \n       //check replica bytes on disk.\n       if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n         throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n             + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n       }\n \n       //check the replica\u0027s files\n       checkReplicaFiles(rip);\n     }\n \n     //check generation stamp\n     if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n       throw new IOException(\n           \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n           + block + \", replica\u003d\" + replica);\n     }\n \n     //check recovery id\n     if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n       throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n           + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n           + \", block\u003d\" + block + \", replica\u003d\" + replica);\n     }\n \n     //check RUR\n     final ReplicaUnderRecovery rur;\n     if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n       rur \u003d (ReplicaUnderRecovery)replica;\n       if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n         throw new RecoveryInProgressException(\n             \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n             + \", block\u003d\" + block + \", rur\u003d\" + rur);\n       }\n       final long oldRecoveryID \u003d rur.getRecoveryID();\n       rur.setRecoveryID(recoveryId);\n       LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n           + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n     }\n     else {\n       rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n       map.add(bpid, rur);\n       LOG.info(\"initReplicaRecovery: changing replica state for \"\n           + block + \" from \" + replica.getState()\n           + \" to \" + rur.getState());\n     }\n     return rur.createInfo();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    LOG.info(\"initReplicaRecovery: \" + block + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter(xceiverStopTimeout);\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[bpid-String, map-ReplicaMap, block-Block, recoveryId-long]",
            "newValue": "[bpid-String, map-ReplicaMap, block-Block, recoveryId-long, xceiverStopTimeout-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5016. Deadlock in pipeline recovery causes Datanode to be marked dead. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/13 9:42 PM",
          "commitName": "7723b139d55fc2c3954939559cb4914046a0f81c",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "21/05/13 6:42 AM",
          "commitNameOld": "98a692fd6361365db4afb9523a5d83ee32774112",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 65.63,
          "commitsBetweenForRepo": 415,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n-      ReplicaMap map, Block block, long recoveryId) throws IOException {\n+  static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n+      Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n     final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n     LOG.info(\"initReplicaRecovery: \" + block + \", recoveryId\u003d\" + recoveryId\n         + \", replica\u003d\" + replica);\n \n     //check replica\n     if (replica \u003d\u003d null) {\n       return null;\n     }\n \n     //stop writer if there is any\n     if (replica instanceof ReplicaInPipeline) {\n       final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n-      rip.stopWriter();\n+      rip.stopWriter(xceiverStopTimeout);\n \n       //check replica bytes on disk.\n       if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n         throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n             + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n       }\n \n       //check the replica\u0027s files\n       checkReplicaFiles(rip);\n     }\n \n     //check generation stamp\n     if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n       throw new IOException(\n           \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n           + block + \", replica\u003d\" + replica);\n     }\n \n     //check recovery id\n     if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n       throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n           + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n           + \", block\u003d\" + block + \", replica\u003d\" + replica);\n     }\n \n     //check RUR\n     final ReplicaUnderRecovery rur;\n     if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n       rur \u003d (ReplicaUnderRecovery)replica;\n       if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n         throw new RecoveryInProgressException(\n             \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n             + \", block\u003d\" + block + \", rur\u003d\" + rur);\n       }\n       final long oldRecoveryID \u003d rur.getRecoveryID();\n       rur.setRecoveryID(recoveryId);\n       LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n           + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n     }\n     else {\n       rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n       map.add(bpid, rur);\n       LOG.info(\"initReplicaRecovery: changing replica state for \"\n           + block + \" from \" + replica.getState()\n           + \" to \" + rur.getState());\n     }\n     return rur.createInfo();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid, ReplicaMap map,\n      Block block, long recoveryId, long xceiverStopTimeout) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    LOG.info(\"initReplicaRecovery: \" + block + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter(xceiverStopTimeout);\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "13/09/12 4:48 PM",
      "commitNameOld": "86635168feaaf9a8f20d01b5fd6c1b6fbe98c1ea",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 44.97,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,63 @@\n   static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n       ReplicaMap map, Block block, long recoveryId) throws IOException {\n     final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n-    LOG.info(\"initReplicaRecovery: block\u003d\" + block\n-        + \", recoveryId\u003d\" + recoveryId\n+    LOG.info(\"initReplicaRecovery: \" + block + \", recoveryId\u003d\" + recoveryId\n         + \", replica\u003d\" + replica);\n \n     //check replica\n     if (replica \u003d\u003d null) {\n       return null;\n     }\n \n     //stop writer if there is any\n     if (replica instanceof ReplicaInPipeline) {\n       final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n       rip.stopWriter();\n \n       //check replica bytes on disk.\n       if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n         throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n             + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n       }\n \n       //check the replica\u0027s files\n       checkReplicaFiles(rip);\n     }\n \n     //check generation stamp\n     if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n       throw new IOException(\n           \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n           + block + \", replica\u003d\" + replica);\n     }\n \n     //check recovery id\n     if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n       throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n           + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n           + \", block\u003d\" + block + \", replica\u003d\" + replica);\n     }\n \n     //check RUR\n     final ReplicaUnderRecovery rur;\n     if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n       rur \u003d (ReplicaUnderRecovery)replica;\n       if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n         throw new RecoveryInProgressException(\n             \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n             + \", block\u003d\" + block + \", rur\u003d\" + rur);\n       }\n       final long oldRecoveryID \u003d rur.getRecoveryID();\n       rur.setRecoveryID(recoveryId);\n       LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n           + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n     }\n     else {\n       rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n       map.add(bpid, rur);\n       LOG.info(\"initReplicaRecovery: changing replica state for \"\n           + block + \" from \" + replica.getState()\n           + \" to \" + rur.getState());\n     }\n     return rur.createInfo();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n      ReplicaMap map, Block block, long recoveryId) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    LOG.info(\"initReplicaRecovery: \" + block + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter();\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "bc13dfb1426944ce45293cb8f444239a7406762c": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 10:38 AM",
      "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,64 @@\n   static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n-      ReplicasMap map, Block block, long recoveryId) throws IOException {\n+      ReplicaMap map, Block block, long recoveryId) throws IOException {\n     final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n-    DataNode.LOG.info(\"initReplicaRecovery: block\u003d\" + block\n+    LOG.info(\"initReplicaRecovery: block\u003d\" + block\n         + \", recoveryId\u003d\" + recoveryId\n         + \", replica\u003d\" + replica);\n \n     //check replica\n     if (replica \u003d\u003d null) {\n       return null;\n     }\n \n     //stop writer if there is any\n     if (replica instanceof ReplicaInPipeline) {\n       final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n       rip.stopWriter();\n \n       //check replica bytes on disk.\n       if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n         throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n             + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n       }\n \n       //check the replica\u0027s files\n       checkReplicaFiles(rip);\n     }\n \n     //check generation stamp\n     if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n       throw new IOException(\n           \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n           + block + \", replica\u003d\" + replica);\n     }\n \n     //check recovery id\n     if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n       throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n           + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n           + \", block\u003d\" + block + \", replica\u003d\" + replica);\n     }\n \n     //check RUR\n     final ReplicaUnderRecovery rur;\n     if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n       rur \u003d (ReplicaUnderRecovery)replica;\n       if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n         throw new RecoveryInProgressException(\n             \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n             + \", block\u003d\" + block + \", rur\u003d\" + rur);\n       }\n       final long oldRecoveryID \u003d rur.getRecoveryID();\n       rur.setRecoveryID(recoveryId);\n-      DataNode.LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n+      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n           + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n     }\n     else {\n       rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n       map.add(bpid, rur);\n-      DataNode.LOG.info(\"initReplicaRecovery: changing replica state for \"\n+      LOG.info(\"initReplicaRecovery: changing replica state for \"\n           + block + \" from \" + replica.getState()\n           + \" to \" + rur.getState());\n     }\n     return rur.createInfo();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n      ReplicaMap map, Block block, long recoveryId) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    LOG.info(\"initReplicaRecovery: block\u003d\" + block\n        + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter();\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
            "oldMethodName": "initReplicaRecovery",
            "newMethodName": "initReplicaRecovery"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,64 @@\n   static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n-      ReplicasMap map, Block block, long recoveryId) throws IOException {\n+      ReplicaMap map, Block block, long recoveryId) throws IOException {\n     final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n-    DataNode.LOG.info(\"initReplicaRecovery: block\u003d\" + block\n+    LOG.info(\"initReplicaRecovery: block\u003d\" + block\n         + \", recoveryId\u003d\" + recoveryId\n         + \", replica\u003d\" + replica);\n \n     //check replica\n     if (replica \u003d\u003d null) {\n       return null;\n     }\n \n     //stop writer if there is any\n     if (replica instanceof ReplicaInPipeline) {\n       final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n       rip.stopWriter();\n \n       //check replica bytes on disk.\n       if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n         throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n             + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n       }\n \n       //check the replica\u0027s files\n       checkReplicaFiles(rip);\n     }\n \n     //check generation stamp\n     if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n       throw new IOException(\n           \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n           + block + \", replica\u003d\" + replica);\n     }\n \n     //check recovery id\n     if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n       throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n           + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n           + \", block\u003d\" + block + \", replica\u003d\" + replica);\n     }\n \n     //check RUR\n     final ReplicaUnderRecovery rur;\n     if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n       rur \u003d (ReplicaUnderRecovery)replica;\n       if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n         throw new RecoveryInProgressException(\n             \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n             + \", block\u003d\" + block + \", rur\u003d\" + rur);\n       }\n       final long oldRecoveryID \u003d rur.getRecoveryID();\n       rur.setRecoveryID(recoveryId);\n-      DataNode.LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n+      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n           + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n     }\n     else {\n       rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n       map.add(bpid, rur);\n-      DataNode.LOG.info(\"initReplicaRecovery: changing replica state for \"\n+      LOG.info(\"initReplicaRecovery: changing replica state for \"\n           + block + \" from \" + replica.getState()\n           + \" to \" + rur.getState());\n     }\n     return rur.createInfo();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n      ReplicaMap map, Block block, long recoveryId) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    LOG.info(\"initReplicaRecovery: block\u003d\" + block\n        + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter();\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,64 @@\n   static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n-      ReplicasMap map, Block block, long recoveryId) throws IOException {\n+      ReplicaMap map, Block block, long recoveryId) throws IOException {\n     final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n-    DataNode.LOG.info(\"initReplicaRecovery: block\u003d\" + block\n+    LOG.info(\"initReplicaRecovery: block\u003d\" + block\n         + \", recoveryId\u003d\" + recoveryId\n         + \", replica\u003d\" + replica);\n \n     //check replica\n     if (replica \u003d\u003d null) {\n       return null;\n     }\n \n     //stop writer if there is any\n     if (replica instanceof ReplicaInPipeline) {\n       final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n       rip.stopWriter();\n \n       //check replica bytes on disk.\n       if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n         throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n             + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n       }\n \n       //check the replica\u0027s files\n       checkReplicaFiles(rip);\n     }\n \n     //check generation stamp\n     if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n       throw new IOException(\n           \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n           + block + \", replica\u003d\" + replica);\n     }\n \n     //check recovery id\n     if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n       throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n           + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n           + \", block\u003d\" + block + \", replica\u003d\" + replica);\n     }\n \n     //check RUR\n     final ReplicaUnderRecovery rur;\n     if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n       rur \u003d (ReplicaUnderRecovery)replica;\n       if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n         throw new RecoveryInProgressException(\n             \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n             + \", block\u003d\" + block + \", rur\u003d\" + rur);\n       }\n       final long oldRecoveryID \u003d rur.getRecoveryID();\n       rur.setRecoveryID(recoveryId);\n-      DataNode.LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n+      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n           + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n     }\n     else {\n       rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n       map.add(bpid, rur);\n-      DataNode.LOG.info(\"initReplicaRecovery: changing replica state for \"\n+      LOG.info(\"initReplicaRecovery: changing replica state for \"\n           + block + \" from \" + replica.getState()\n           + \" to \" + rur.getState());\n     }\n     return rur.createInfo();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n      ReplicaMap map, Block block, long recoveryId) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    LOG.info(\"initReplicaRecovery: block\u003d\" + block\n        + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter();\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[bpid-String, map-ReplicasMap, block-Block, recoveryId-long]",
            "newValue": "[bpid-String, map-ReplicaMap, block-Block, recoveryId-long]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n      ReplicasMap map, Block block, long recoveryId) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    DataNode.LOG.info(\"initReplicaRecovery: block\u003d\" + block\n        + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter();\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      DataNode.LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      DataNode.LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n      ReplicasMap map, Block block, long recoveryId) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    DataNode.LOG.info(\"initReplicaRecovery: block\u003d\" + block\n        + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter();\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      DataNode.LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      DataNode.LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,64 @@\n+  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n+      ReplicasMap map, Block block, long recoveryId) throws IOException {\n+    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n+    DataNode.LOG.info(\"initReplicaRecovery: block\u003d\" + block\n+        + \", recoveryId\u003d\" + recoveryId\n+        + \", replica\u003d\" + replica);\n+\n+    //check replica\n+    if (replica \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    //stop writer if there is any\n+    if (replica instanceof ReplicaInPipeline) {\n+      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n+      rip.stopWriter();\n+\n+      //check replica bytes on disk.\n+      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n+        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n+            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n+      }\n+\n+      //check the replica\u0027s files\n+      checkReplicaFiles(rip);\n+    }\n+\n+    //check generation stamp\n+    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n+      throw new IOException(\n+          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n+          + block + \", replica\u003d\" + replica);\n+    }\n+\n+    //check recovery id\n+    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n+      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n+          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n+          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n+    }\n+\n+    //check RUR\n+    final ReplicaUnderRecovery rur;\n+    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n+      rur \u003d (ReplicaUnderRecovery)replica;\n+      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n+        throw new RecoveryInProgressException(\n+            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n+            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n+      }\n+      final long oldRecoveryID \u003d rur.getRecoveryID();\n+      rur.setRecoveryID(recoveryId);\n+      DataNode.LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n+          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n+    }\n+    else {\n+      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n+      map.add(bpid, rur);\n+      DataNode.LOG.info(\"initReplicaRecovery: changing replica state for \"\n+          + block + \" from \" + replica.getState()\n+          + \" to \" + rur.getState());\n+    }\n+    return rur.createInfo();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static ReplicaRecoveryInfo initReplicaRecovery(String bpid,\n      ReplicasMap map, Block block, long recoveryId) throws IOException {\n    final ReplicaInfo replica \u003d map.get(bpid, block.getBlockId());\n    DataNode.LOG.info(\"initReplicaRecovery: block\u003d\" + block\n        + \", recoveryId\u003d\" + recoveryId\n        + \", replica\u003d\" + replica);\n\n    //check replica\n    if (replica \u003d\u003d null) {\n      return null;\n    }\n\n    //stop writer if there is any\n    if (replica instanceof ReplicaInPipeline) {\n      final ReplicaInPipeline rip \u003d (ReplicaInPipeline)replica;\n      rip.stopWriter();\n\n      //check replica bytes on disk.\n      if (rip.getBytesOnDisk() \u003c rip.getVisibleLength()) {\n        throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n            + \" getBytesOnDisk() \u003c getVisibleLength(), rip\u003d\" + rip);\n      }\n\n      //check the replica\u0027s files\n      checkReplicaFiles(rip);\n    }\n\n    //check generation stamp\n    if (replica.getGenerationStamp() \u003c block.getGenerationStamp()) {\n      throw new IOException(\n          \"replica.getGenerationStamp() \u003c block.getGenerationStamp(), block\u003d\"\n          + block + \", replica\u003d\" + replica);\n    }\n\n    //check recovery id\n    if (replica.getGenerationStamp() \u003e\u003d recoveryId) {\n      throw new IOException(\"THIS IS NOT SUPPOSED TO HAPPEN:\"\n          + \" replica.getGenerationStamp() \u003e\u003d recoveryId \u003d \" + recoveryId\n          + \", block\u003d\" + block + \", replica\u003d\" + replica);\n    }\n\n    //check RUR\n    final ReplicaUnderRecovery rur;\n    if (replica.getState() \u003d\u003d ReplicaState.RUR) {\n      rur \u003d (ReplicaUnderRecovery)replica;\n      if (rur.getRecoveryID() \u003e\u003d recoveryId) {\n        throw new RecoveryInProgressException(\n            \"rur.getRecoveryID() \u003e\u003d recoveryId \u003d \" + recoveryId\n            + \", block\u003d\" + block + \", rur\u003d\" + rur);\n      }\n      final long oldRecoveryID \u003d rur.getRecoveryID();\n      rur.setRecoveryID(recoveryId);\n      DataNode.LOG.info(\"initReplicaRecovery: update recovery id for \" + block\n          + \" from \" + oldRecoveryID + \" to \" + recoveryId);\n    }\n    else {\n      rur \u003d new ReplicaUnderRecovery(replica, recoveryId);\n      map.add(bpid, rur);\n      DataNode.LOG.info(\"initReplicaRecovery: changing replica state for \"\n          + block + \" from \" + replica.getState()\n          + \" to \" + rur.getState());\n    }\n    return rur.createInfo();\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
    }
  }
}