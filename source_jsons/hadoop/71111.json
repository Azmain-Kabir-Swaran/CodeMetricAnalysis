{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynoInfraUtils.java",
  "functionName": "waitForNameNodeJMXValue",
  "functionId": "waitForNameNodeJMXValue___valueName-String__jmxBeanQuery-String__jmxProperty-String__threshold-double__printThreshold-double__decreasing-boolean__nameNodeProperties-Properties__shouldExit-Supplier__Boolean____log-Logger",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/DynoInfraUtils.java",
  "functionStartLine": 449,
  "functionEndLine": 480,
  "numCommitsSeen": 3,
  "timeTaken": 428,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,32 @@\n+  private static void waitForNameNodeJMXValue(String valueName,\n+      String jmxBeanQuery, String jmxProperty, double threshold,\n+      double printThreshold, boolean decreasing, Properties nameNodeProperties,\n+      Supplier\u003cBoolean\u003e shouldExit, Logger log) throws InterruptedException {\n+    double lastPrintedValue \u003d decreasing ? Double.MAX_VALUE : Double.MIN_VALUE;\n+    double value;\n+    int retryCount \u003d 0;\n+    long startTime \u003d Time.monotonicNow();\n+    while (!shouldExit.get()) {\n+      try {\n+        value \u003d Double.parseDouble(fetchNameNodeJMXValue(nameNodeProperties,\n+            jmxBeanQuery, jmxProperty));\n+        if ((decreasing \u0026\u0026 value \u003c\u003d threshold)\n+            || (!decreasing \u0026\u0026 value \u003e\u003d threshold)) {\n+          log.info(String.format(\n+              \"%s \u003d %.2f; %s threshold of %.2f; done waiting after %d ms.\",\n+              valueName, value, decreasing ? \"below\" : \"above\", threshold,\n+              Time.monotonicNow() - startTime));\n+          break;\n+        } else if (Math.abs(value - lastPrintedValue) \u003e\u003d printThreshold) {\n+          log.info(String.format(\"%s: %.2f\", valueName, value));\n+          lastPrintedValue \u003d value;\n+        }\n+      } catch (IOException ioe) {\n+        if (++retryCount % 20 \u003d\u003d 0) {\n+          log.warn(\"Unable to fetch {}; retried {} times / waited {} ms\",\n+              valueName, retryCount, Time.monotonicNow() - startTime, ioe);\n+        }\n+      }\n+      Thread.sleep(3000);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void waitForNameNodeJMXValue(String valueName,\n      String jmxBeanQuery, String jmxProperty, double threshold,\n      double printThreshold, boolean decreasing, Properties nameNodeProperties,\n      Supplier\u003cBoolean\u003e shouldExit, Logger log) throws InterruptedException {\n    double lastPrintedValue \u003d decreasing ? Double.MAX_VALUE : Double.MIN_VALUE;\n    double value;\n    int retryCount \u003d 0;\n    long startTime \u003d Time.monotonicNow();\n    while (!shouldExit.get()) {\n      try {\n        value \u003d Double.parseDouble(fetchNameNodeJMXValue(nameNodeProperties,\n            jmxBeanQuery, jmxProperty));\n        if ((decreasing \u0026\u0026 value \u003c\u003d threshold)\n            || (!decreasing \u0026\u0026 value \u003e\u003d threshold)) {\n          log.info(String.format(\n              \"%s \u003d %.2f; %s threshold of %.2f; done waiting after %d ms.\",\n              valueName, value, decreasing ? \"below\" : \"above\", threshold,\n              Time.monotonicNow() - startTime));\n          break;\n        } else if (Math.abs(value - lastPrintedValue) \u003e\u003d printThreshold) {\n          log.info(String.format(\"%s: %.2f\", valueName, value));\n          lastPrintedValue \u003d value;\n        }\n      } catch (IOException ioe) {\n        if (++retryCount % 20 \u003d\u003d 0) {\n          log.warn(\"Unable to fetch {}; retried {} times / waited {} ms\",\n              valueName, retryCount, Time.monotonicNow() - startTime, ioe);\n        }\n      }\n      Thread.sleep(3000);\n    }\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/DynoInfraUtils.java"
    }
  }
}