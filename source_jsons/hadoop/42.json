{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSClientCache.java",
  "functionName": "prepareAddressMap",
  "functionId": "prepareAddressMap",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/DFSClientCache.java",
  "functionStartLine": 161,
  "functionEndLine": 184,
  "numCommitsSeen": 14,
  "timeTaken": 2436,
  "changeHistory": [
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "d6602b5f39833611b4afa4581552f6c4c37e23a8"
  ],
  "changeHistoryShort": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/10/17 10:38 AM",
      "commitNameOld": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 126.95,
      "commitsBetweenForRepo": 833,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private void prepareAddressMap() throws IOException {\n     FileSystem fs \u003d FileSystem.get(config);\n     String[] exportsPath \u003d\n         config.getStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY,\n             NfsConfigKeys.DFS_NFS_EXPORT_POINT_DEFAULT);\n     for (String exportPath : exportsPath) {\n       URI exportURI \u003d Nfs3Utils.getResolvedURI(fs, exportPath);\n       int namenodeId \u003d Nfs3Utils.getNamenodeId(config, exportURI);\n       URI value \u003d namenodeUriMap.get(namenodeId);\n       // if a unique nnid, add it to the map\n       if (value \u003d\u003d null) {\n-        LOG.info(\"Added export:\" + exportPath + \" FileSystem URI:\" + exportURI\n-              + \" with namenodeId:\" + namenodeId);\n+        LOG.info(\"Added export: {} FileSystem URI: {} with namenodeId: {}\",\n+            exportPath, exportPath, namenodeId);\n         namenodeUriMap.put(namenodeId, exportURI);\n       } else {\n         // if the nnid already exists, it better be the for the same namenode\n         String msg \u003d String.format(\"FS:%s, Namenode ID collision for path:%s \"\n                 + \"nnid:%s uri being added:%s existing uri:%s\", fs.getScheme(),\n             exportPath, namenodeId, exportURI, value);\n         LOG.error(msg);\n         throw new FileSystemException(msg);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void prepareAddressMap() throws IOException {\n    FileSystem fs \u003d FileSystem.get(config);\n    String[] exportsPath \u003d\n        config.getStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY,\n            NfsConfigKeys.DFS_NFS_EXPORT_POINT_DEFAULT);\n    for (String exportPath : exportsPath) {\n      URI exportURI \u003d Nfs3Utils.getResolvedURI(fs, exportPath);\n      int namenodeId \u003d Nfs3Utils.getNamenodeId(config, exportURI);\n      URI value \u003d namenodeUriMap.get(namenodeId);\n      // if a unique nnid, add it to the map\n      if (value \u003d\u003d null) {\n        LOG.info(\"Added export: {} FileSystem URI: {} with namenodeId: {}\",\n            exportPath, exportPath, namenodeId);\n        namenodeUriMap.put(namenodeId, exportURI);\n      } else {\n        // if the nnid already exists, it better be the for the same namenode\n        String msg \u003d String.format(\"FS:%s, Namenode ID collision for path:%s \"\n                + \"nnid:%s uri being added:%s existing uri:%s\", fs.getScheme(),\n            exportPath, namenodeId, exportURI, value);\n        LOG.error(msg);\n        throw new FileSystemException(msg);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/DFSClientCache.java",
      "extendedDetails": {}
    },
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11575. Supporting HDFS NFS gateway with Federated HDFS. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "10/10/17 10:38 AM",
      "commitName": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthor": "Jitendra Pandey",
      "diff": "@@ -0,0 +1,24 @@\n+  private void prepareAddressMap() throws IOException {\n+    FileSystem fs \u003d FileSystem.get(config);\n+    String[] exportsPath \u003d\n+        config.getStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY,\n+            NfsConfigKeys.DFS_NFS_EXPORT_POINT_DEFAULT);\n+    for (String exportPath : exportsPath) {\n+      URI exportURI \u003d Nfs3Utils.getResolvedURI(fs, exportPath);\n+      int namenodeId \u003d Nfs3Utils.getNamenodeId(config, exportURI);\n+      URI value \u003d namenodeUriMap.get(namenodeId);\n+      // if a unique nnid, add it to the map\n+      if (value \u003d\u003d null) {\n+        LOG.info(\"Added export:\" + exportPath + \" FileSystem URI:\" + exportURI\n+              + \" with namenodeId:\" + namenodeId);\n+        namenodeUriMap.put(namenodeId, exportURI);\n+      } else {\n+        // if the nnid already exists, it better be the for the same namenode\n+        String msg \u003d String.format(\"FS:%s, Namenode ID collision for path:%s \"\n+                + \"nnid:%s uri being added:%s existing uri:%s\", fs.getScheme(),\n+            exportPath, namenodeId, exportURI, value);\n+        LOG.error(msg);\n+        throw new FileSystemException(msg);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void prepareAddressMap() throws IOException {\n    FileSystem fs \u003d FileSystem.get(config);\n    String[] exportsPath \u003d\n        config.getStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY,\n            NfsConfigKeys.DFS_NFS_EXPORT_POINT_DEFAULT);\n    for (String exportPath : exportsPath) {\n      URI exportURI \u003d Nfs3Utils.getResolvedURI(fs, exportPath);\n      int namenodeId \u003d Nfs3Utils.getNamenodeId(config, exportURI);\n      URI value \u003d namenodeUriMap.get(namenodeId);\n      // if a unique nnid, add it to the map\n      if (value \u003d\u003d null) {\n        LOG.info(\"Added export:\" + exportPath + \" FileSystem URI:\" + exportURI\n              + \" with namenodeId:\" + namenodeId);\n        namenodeUriMap.put(namenodeId, exportURI);\n      } else {\n        // if the nnid already exists, it better be the for the same namenode\n        String msg \u003d String.format(\"FS:%s, Namenode ID collision for path:%s \"\n                + \"nnid:%s uri being added:%s existing uri:%s\", fs.getScheme(),\n            exportPath, namenodeId, exportURI, value);\n        LOG.error(msg);\n        throw new FileSystemException(msg);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/DFSClientCache.java"
    }
  }
}