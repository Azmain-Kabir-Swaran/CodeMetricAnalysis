{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoCandidatesSelector.java",
  "functionName": "preemptAMContainers",
  "functionId": "preemptAMContainers___clusterResource-Resource__preemptMap-Map__ApplicationAttemptId,Set__RMContainer______curCandidates-Map__ApplicationAttemptId,Set__RMContainer______skippedAMContainerlist-List__RMContainer____resToObtainByPartition-Map__String,Resource____skippedAMSize-Resource__maxAMCapacityForThisQueue-Resource__totalPreemptionAllowed-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
  "functionStartLine": 175,
  "functionEndLine": 202,
  "numCommitsSeen": 64,
  "timeTaken": 6598,
  "changeHistory": [
    "291194302cc1a875d6d94ea93cf1184a3f1fc2cc",
    "8d5509c68156faaa6641f4e747fc9ff80adccf88",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
    "60e4116bf1d00afed91010e57357fe54057e4e39",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
    "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61"
  ],
  "changeHistoryShort": {
    "291194302cc1a875d6d94ea93cf1184a3f1fc2cc": "Ymultichange(Yparameterchange,Ybodychange)",
    "8d5509c68156faaa6641f4e747fc9ff80adccf88": "Ybodychange",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Ybodychange",
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": "Ymultichange(Yparameterchange,Ybodychange)",
    "03a25d2cc1a2fb124d00edf874d67e329c65a5e6": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "291194302cc1a875d6d94ea93cf1184a3f1fc2cc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8379. Improve balancing resources in already satisfied queues by using Capacity Scheduler preemption. Contributed by Zian Chen.\n",
      "commitDate": "28/06/18 10:23 AM",
      "commitName": "291194302cc1a875d6d94ea93cf1184a3f1fc2cc",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8379. Improve balancing resources in already satisfied queues by using Capacity Scheduler preemption. Contributed by Zian Chen.\n",
          "commitDate": "28/06/18 10:23 AM",
          "commitName": "291194302cc1a875d6d94ea93cf1184a3f1fc2cc",
          "commitAuthor": "Sunil G",
          "commitDateOld": "25/05/18 9:06 AM",
          "commitNameOld": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
          "commitAuthorOld": "Eric E Payne",
          "daysBetweenCommits": 34.05,
          "commitsBetweenForRepo": 228,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e curCandidates,\n       List\u003cRMContainer\u003e skippedAMContainerlist,\n       Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n       Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n       if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n       // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n \n       boolean preempted \u003d CapacitySchedulerPreemptionUtils\n           .tryPreemptContainerAndDeductResToObtain(rc, preemptionContext,\n               resToObtainByPartition, c, clusterResource, preemptMap,\n-              totalPreemptionAllowed, false);\n+              curCandidates, totalPreemptionAllowed, false);\n       if (preempted) {\n         Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e curCandidates,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d CapacitySchedulerPreemptionUtils\n          .tryPreemptContainerAndDeductResToObtain(rc, preemptionContext,\n              resToObtainByPartition, c, clusterResource, preemptMap,\n              curCandidates, totalPreemptionAllowed, false);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtainByPartition-Map\u003cString,Resource\u003e, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource, totalPreemptionAllowed-Resource]",
            "newValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, curCandidates-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtainByPartition-Map\u003cString,Resource\u003e, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource, totalPreemptionAllowed-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8379. Improve balancing resources in already satisfied queues by using Capacity Scheduler preemption. Contributed by Zian Chen.\n",
          "commitDate": "28/06/18 10:23 AM",
          "commitName": "291194302cc1a875d6d94ea93cf1184a3f1fc2cc",
          "commitAuthor": "Sunil G",
          "commitDateOld": "25/05/18 9:06 AM",
          "commitNameOld": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
          "commitAuthorOld": "Eric E Payne",
          "daysBetweenCommits": 34.05,
          "commitsBetweenForRepo": 228,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e curCandidates,\n       List\u003cRMContainer\u003e skippedAMContainerlist,\n       Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n       Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n       if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n       // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n \n       boolean preempted \u003d CapacitySchedulerPreemptionUtils\n           .tryPreemptContainerAndDeductResToObtain(rc, preemptionContext,\n               resToObtainByPartition, c, clusterResource, preemptMap,\n-              totalPreemptionAllowed, false);\n+              curCandidates, totalPreemptionAllowed, false);\n       if (preempted) {\n         Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e curCandidates,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d CapacitySchedulerPreemptionUtils\n          .tryPreemptContainerAndDeductResToObtain(rc, preemptionContext,\n              resToObtainByPartition, c, clusterResource, preemptMap,\n              curCandidates, totalPreemptionAllowed, false);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
          "extendedDetails": {}
        }
      ]
    },
    "8d5509c68156faaa6641f4e747fc9ff80adccf88": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8292: Fix the dominant resource preemption cannot happen when some of the resource vector becomes negative. Contributed by Wangda Tan.\n",
      "commitDate": "25/05/18 9:06 AM",
      "commitName": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
      "commitAuthor": "Eric E Payne",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 168.55,
      "commitsBetweenForRepo": 1747,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n       List\u003cRMContainer\u003e skippedAMContainerlist,\n       Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n       Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n       if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n       // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n \n       boolean preempted \u003d CapacitySchedulerPreemptionUtils\n           .tryPreemptContainerAndDeductResToObtain(rc, preemptionContext,\n               resToObtainByPartition, c, clusterResource, preemptMap,\n-              totalPreemptionAllowed);\n+              totalPreemptionAllowed, false);\n       if (preempted) {\n         Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d CapacitySchedulerPreemptionUtils\n          .tryPreemptContainerAndDeductResToObtain(rc, preemptionContext,\n              resToObtainByPartition, c, clusterResource, preemptMap,\n              totalPreemptionAllowed, false);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
      "extendedDetails": {}
    },
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/07/16 2:54 PM",
      "commitNameOld": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 97.02,
      "commitsBetweenForRepo": 698,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n       List\u003cRMContainer\u003e skippedAMContainerlist,\n       Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n       Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n       if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n       // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n \n-      boolean preempted \u003d\n-          tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n-              clusterResource, preemptMap, totalPreemptionAllowed);\n+      boolean preempted \u003d CapacitySchedulerPreemptionUtils\n+          .tryPreemptContainerAndDeductResToObtain(rc, preemptionContext,\n+              resToObtainByPartition, c, clusterResource, preemptMap,\n+              totalPreemptionAllowed);\n       if (preempted) {\n         Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d CapacitySchedulerPreemptionUtils\n          .tryPreemptContainerAndDeductResToObtain(rc, preemptionContext,\n              resToObtainByPartition, c, clusterResource, preemptMap,\n              totalPreemptionAllowed);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
      "extendedDetails": {}
    },
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
          "commitDate": "30/03/16 12:43 PM",
          "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
          "commitAuthor": "Jian He",
          "commitDateOld": "29/03/16 11:22 PM",
          "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n       List\u003cRMContainer\u003e skippedAMContainerlist,\n       Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n-      Resource maxAMCapacityForThisQueue) {\n+      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n       if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n       // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n \n       boolean preempted \u003d\n           tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n-              clusterResource, preemptMap);\n+              clusterResource, preemptMap, totalPreemptionAllowed);\n       if (preempted) {\n         Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d\n          tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n              clusterResource, preemptMap, totalPreemptionAllowed);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
            "oldMethodName": "preemptAMContainers",
            "newMethodName": "preemptAMContainers"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
          "commitDate": "30/03/16 12:43 PM",
          "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
          "commitAuthor": "Jian He",
          "commitDateOld": "29/03/16 11:22 PM",
          "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n       List\u003cRMContainer\u003e skippedAMContainerlist,\n       Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n-      Resource maxAMCapacityForThisQueue) {\n+      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n       if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n       // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n \n       boolean preempted \u003d\n           tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n-              clusterResource, preemptMap);\n+              clusterResource, preemptMap, totalPreemptionAllowed);\n       if (preempted) {\n         Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d\n          tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n              clusterResource, preemptMap, totalPreemptionAllowed);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
          "commitDate": "30/03/16 12:43 PM",
          "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
          "commitAuthor": "Jian He",
          "commitDateOld": "29/03/16 11:22 PM",
          "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n       List\u003cRMContainer\u003e skippedAMContainerlist,\n       Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n-      Resource maxAMCapacityForThisQueue) {\n+      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n       if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n       // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n \n       boolean preempted \u003d\n           tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n-              clusterResource, preemptMap);\n+              clusterResource, preemptMap, totalPreemptionAllowed);\n       if (preempted) {\n         Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue, Resource totalPreemptionAllowed) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d\n          tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n              clusterResource, preemptMap, totalPreemptionAllowed);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtainByPartition-Map\u003cString,Resource\u003e, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource]",
            "newValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtainByPartition-Map\u003cString,Resource\u003e, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource, totalPreemptionAllowed-Resource]"
          }
        }
      ]
    },
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
      "commitDate": "24/04/15 5:03 PM",
      "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,26 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n-      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n-      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+      List\u003cRMContainer\u003e skippedAMContainerlist,\n+      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n+      Resource maxAMCapacityForThisQueue) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n-      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n-          Resources.none())) {\n+      if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n-      // container selection iteration for preemption will be stopped. \n+      // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n-      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n-          .getApplicationAttemptId());\n-      if (null \u003d\u003d contToPrempt) {\n-        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n-        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+\n+      boolean preempted \u003d\n+          tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n+              clusterResource, preemptMap);\n+      if (preempted) {\n+        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n-      contToPrempt.add(c);\n-      \n-      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n-      Resources.subtractFrom(skippedAMSize, c.getContainer()\n-          .getResource());\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d\n          tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n              clusterResource, preemptMap);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtain-Resource, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource]",
            "newValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtainByPartition-Map\u003cString,Resource\u003e, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,26 @@\n   private void preemptAMContainers(Resource clusterResource,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n-      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n-      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+      List\u003cRMContainer\u003e skippedAMContainerlist,\n+      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n+      Resource maxAMCapacityForThisQueue) {\n     for (RMContainer c : skippedAMContainerlist) {\n       // Got required amount of resources for preemption, can stop now\n-      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n-          Resources.none())) {\n+      if (resToObtainByPartition.isEmpty()) {\n         break;\n       }\n       // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n-      // container selection iteration for preemption will be stopped. \n+      // container selection iteration for preemption will be stopped.\n       if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n           maxAMCapacityForThisQueue)) {\n         break;\n       }\n-      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n-          .getApplicationAttemptId());\n-      if (null \u003d\u003d contToPrempt) {\n-        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n-        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+\n+      boolean preempted \u003d\n+          tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n+              clusterResource, preemptMap);\n+      if (preempted) {\n+        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n       }\n-      contToPrempt.add(c);\n-      \n-      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n-      Resources.subtractFrom(skippedAMSize, c.getContainer()\n-          .getResource());\n     }\n     skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist,\n      Map\u003cString, Resource\u003e resToObtainByPartition, Resource skippedAMSize,\n      Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (resToObtainByPartition.isEmpty()) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped.\n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n\n      boolean preempted \u003d\n          tryPreemptContainerAndDeductResToObtain(resToObtainByPartition, c,\n              clusterResource, preemptMap);\n      if (preempted) {\n        Resources.subtractFrom(skippedAMSize, c.getAllocatedResource());\n      }\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "03a25d2cc1a2fb124d00edf874d67e329c65a5e6": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/07/14 6:54 PM",
      "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
      "commitAuthor": "Mayank Bansal",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/14 6:54 PM",
          "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "11/06/14 11:31 AM",
          "commitNameOld": "c6e29a9f069f71bd77fcff2111def4a60676b4ba",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.31,
          "commitsBetweenForRepo": 140,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,30 @@\n-  private Set\u003cRMContainer\u003e preemptFrom(\n-      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n-    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n-    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n-\n-    // first drop reserved containers towards rsrcPreempt\n-    List\u003cRMContainer\u003e reservations \u003d\n-        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n-    for (RMContainer c : reservations) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-          rsrcPreempt, Resources.none())) {\n-        return ret;\n+  private void preemptAMContainers(Resource clusterResource,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n+      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+    for (RMContainer c : skippedAMContainerlist) {\n+      // Got required amount of resources for preemption, can stop now\n+      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n+          Resources.none())) {\n+        break;\n       }\n-      if (!observeOnly) {\n-        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n-            ContainerPreemptEventType.DROP_RESERVATION));\n+      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n+      // container selection iteration for preemption will be stopped. \n+      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n+          maxAMCapacityForThisQueue)) {\n+        break;\n       }\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n+          .getApplicationAttemptId());\n+      if (null \u003d\u003d contToPrempt) {\n+        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n+        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+      }\n+      contToPrempt.add(c);\n+      \n+      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n+      Resources.subtractFrom(skippedAMSize, c.getContainer()\n+          .getResource());\n     }\n-\n-    // if more resources are to be freed go through all live containers in\n-    // reverse priority and reverse allocation order and mark them for\n-    // preemption\n-    List\u003cRMContainer\u003e containers \u003d\n-      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n-\n-    sortContainers(containers);\n-\n-    for (RMContainer c : containers) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-            rsrcPreempt, Resources.none())) {\n-        return ret;\n-      }\n-      ret.add(c);\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n-    }\n-\n-    return ret;\n+    skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n          Resources.none())) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped. \n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n          .getApplicationAttemptId());\n      if (null \u003d\u003d contToPrempt) {\n        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n      }\n      contToPrempt.add(c);\n      \n      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n      Resources.subtractFrom(skippedAMSize, c.getContainer()\n          .getResource());\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "preemptFrom",
            "newValue": "preemptAMContainers"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/14 6:54 PM",
          "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "11/06/14 11:31 AM",
          "commitNameOld": "c6e29a9f069f71bd77fcff2111def4a60676b4ba",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.31,
          "commitsBetweenForRepo": 140,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,30 @@\n-  private Set\u003cRMContainer\u003e preemptFrom(\n-      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n-    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n-    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n-\n-    // first drop reserved containers towards rsrcPreempt\n-    List\u003cRMContainer\u003e reservations \u003d\n-        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n-    for (RMContainer c : reservations) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-          rsrcPreempt, Resources.none())) {\n-        return ret;\n+  private void preemptAMContainers(Resource clusterResource,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n+      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+    for (RMContainer c : skippedAMContainerlist) {\n+      // Got required amount of resources for preemption, can stop now\n+      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n+          Resources.none())) {\n+        break;\n       }\n-      if (!observeOnly) {\n-        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n-            ContainerPreemptEventType.DROP_RESERVATION));\n+      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n+      // container selection iteration for preemption will be stopped. \n+      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n+          maxAMCapacityForThisQueue)) {\n+        break;\n       }\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n+          .getApplicationAttemptId());\n+      if (null \u003d\u003d contToPrempt) {\n+        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n+        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+      }\n+      contToPrempt.add(c);\n+      \n+      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n+      Resources.subtractFrom(skippedAMSize, c.getContainer()\n+          .getResource());\n     }\n-\n-    // if more resources are to be freed go through all live containers in\n-    // reverse priority and reverse allocation order and mark them for\n-    // preemption\n-    List\u003cRMContainer\u003e containers \u003d\n-      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n-\n-    sortContainers(containers);\n-\n-    for (RMContainer c : containers) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-            rsrcPreempt, Resources.none())) {\n-        return ret;\n-      }\n-      ret.add(c);\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n-    }\n-\n-    return ret;\n+    skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n          Resources.none())) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped. \n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n          .getApplicationAttemptId());\n      if (null \u003d\u003d contToPrempt) {\n        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n      }\n      contToPrempt.add(c);\n      \n      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n      Resources.subtractFrom(skippedAMSize, c.getContainer()\n          .getResource());\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[app-FiCaSchedulerApp, clusterResource-Resource, rsrcPreempt-Resource]",
            "newValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtain-Resource, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/14 6:54 PM",
          "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "11/06/14 11:31 AM",
          "commitNameOld": "c6e29a9f069f71bd77fcff2111def4a60676b4ba",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.31,
          "commitsBetweenForRepo": 140,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,30 @@\n-  private Set\u003cRMContainer\u003e preemptFrom(\n-      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n-    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n-    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n-\n-    // first drop reserved containers towards rsrcPreempt\n-    List\u003cRMContainer\u003e reservations \u003d\n-        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n-    for (RMContainer c : reservations) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-          rsrcPreempt, Resources.none())) {\n-        return ret;\n+  private void preemptAMContainers(Resource clusterResource,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n+      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+    for (RMContainer c : skippedAMContainerlist) {\n+      // Got required amount of resources for preemption, can stop now\n+      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n+          Resources.none())) {\n+        break;\n       }\n-      if (!observeOnly) {\n-        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n-            ContainerPreemptEventType.DROP_RESERVATION));\n+      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n+      // container selection iteration for preemption will be stopped. \n+      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n+          maxAMCapacityForThisQueue)) {\n+        break;\n       }\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n+          .getApplicationAttemptId());\n+      if (null \u003d\u003d contToPrempt) {\n+        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n+        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+      }\n+      contToPrempt.add(c);\n+      \n+      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n+      Resources.subtractFrom(skippedAMSize, c.getContainer()\n+          .getResource());\n     }\n-\n-    // if more resources are to be freed go through all live containers in\n-    // reverse priority and reverse allocation order and mark them for\n-    // preemption\n-    List\u003cRMContainer\u003e containers \u003d\n-      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n-\n-    sortContainers(containers);\n-\n-    for (RMContainer c : containers) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-            rsrcPreempt, Resources.none())) {\n-        return ret;\n-      }\n-      ret.add(c);\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n-    }\n-\n-    return ret;\n+    skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n          Resources.none())) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped. \n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n          .getApplicationAttemptId());\n      if (null \u003d\u003d contToPrempt) {\n        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n      }\n      contToPrempt.add(c);\n      \n      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n      Resources.subtractFrom(skippedAMSize, c.getContainer()\n          .getResource());\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "Set\u003cRMContainer\u003e",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/14 6:54 PM",
          "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "11/06/14 11:31 AM",
          "commitNameOld": "c6e29a9f069f71bd77fcff2111def4a60676b4ba",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.31,
          "commitsBetweenForRepo": 140,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,30 @@\n-  private Set\u003cRMContainer\u003e preemptFrom(\n-      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n-    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n-    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n-\n-    // first drop reserved containers towards rsrcPreempt\n-    List\u003cRMContainer\u003e reservations \u003d\n-        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n-    for (RMContainer c : reservations) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-          rsrcPreempt, Resources.none())) {\n-        return ret;\n+  private void preemptAMContainers(Resource clusterResource,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n+      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+    for (RMContainer c : skippedAMContainerlist) {\n+      // Got required amount of resources for preemption, can stop now\n+      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n+          Resources.none())) {\n+        break;\n       }\n-      if (!observeOnly) {\n-        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n-            ContainerPreemptEventType.DROP_RESERVATION));\n+      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n+      // container selection iteration for preemption will be stopped. \n+      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n+          maxAMCapacityForThisQueue)) {\n+        break;\n       }\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n+          .getApplicationAttemptId());\n+      if (null \u003d\u003d contToPrempt) {\n+        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n+        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+      }\n+      contToPrempt.add(c);\n+      \n+      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n+      Resources.subtractFrom(skippedAMSize, c.getContainer()\n+          .getResource());\n     }\n-\n-    // if more resources are to be freed go through all live containers in\n-    // reverse priority and reverse allocation order and mark them for\n-    // preemption\n-    List\u003cRMContainer\u003e containers \u003d\n-      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n-\n-    sortContainers(containers);\n-\n-    for (RMContainer c : containers) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-            rsrcPreempt, Resources.none())) {\n-        return ret;\n-      }\n-      ret.add(c);\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n-    }\n-\n-    return ret;\n+    skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n          Resources.none())) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped. \n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n          .getApplicationAttemptId());\n      if (null \u003d\u003d contToPrempt) {\n        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n      }\n      contToPrempt.add(c);\n      \n      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n      Resources.subtractFrom(skippedAMSize, c.getContainer()\n          .getResource());\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,39 @@\n+  private Set\u003cRMContainer\u003e preemptFrom(\n+      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n+    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n+    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n+\n+    // first drop reserved containers towards rsrcPreempt\n+    List\u003cRMContainer\u003e reservations \u003d\n+        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n+    for (RMContainer c : reservations) {\n+      if (Resources.lessThanOrEqual(rc, clusterResource,\n+          rsrcPreempt, Resources.none())) {\n+        return ret;\n+      }\n+      if (!observeOnly) {\n+        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n+            ContainerPreemptEventType.DROP_RESERVATION));\n+      }\n+      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+    }\n+\n+    // if more resources are to be freed go through all live containers in\n+    // reverse priority and reverse allocation order and mark them for\n+    // preemption\n+    List\u003cRMContainer\u003e containers \u003d\n+      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n+\n+    sortContainers(containers);\n+\n+    for (RMContainer c : containers) {\n+      if (Resources.lessThanOrEqual(rc, clusterResource,\n+            rsrcPreempt, Resources.none())) {\n+        return ret;\n+      }\n+      ret.add(c);\n+      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+    }\n+\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Set\u003cRMContainer\u003e preemptFrom(\n      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n\n    // first drop reserved containers towards rsrcPreempt\n    List\u003cRMContainer\u003e reservations \u003d\n        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n    for (RMContainer c : reservations) {\n      if (Resources.lessThanOrEqual(rc, clusterResource,\n          rsrcPreempt, Resources.none())) {\n        return ret;\n      }\n      if (!observeOnly) {\n        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n            ContainerPreemptEventType.DROP_RESERVATION));\n      }\n      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n    }\n\n    // if more resources are to be freed go through all live containers in\n    // reverse priority and reverse allocation order and mark them for\n    // preemption\n    List\u003cRMContainer\u003e containers \u003d\n      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n\n    sortContainers(containers);\n\n    for (RMContainer c : containers) {\n      if (Resources.lessThanOrEqual(rc, clusterResource,\n            rsrcPreempt, Resources.none())) {\n        return ret;\n      }\n      ret.add(c);\n      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"
    }
  }
}