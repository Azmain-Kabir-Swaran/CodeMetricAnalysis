{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalMetadataStore.java",
  "functionName": "prune",
  "functionId": "prune___pruneMode-PruneMode__cutoff-long",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
  "functionStartLine": 381,
  "functionEndLine": 383,
  "numCommitsSeen": 33,
  "timeTaken": 3444,
  "changeHistory": [
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
    "ea3849f0ccd32b2f8acbc6107de3b9e91803ed4a",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c": "Ymultichange(Yparameterchange,Ybodychange)",
    "ea3849f0ccd32b2f8acbc6107de3b9e91803ed4a": "Ymultichange(Ymodifierchange,Ybodychange)",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16279. S3Guard: Implement time-based (TTL) expiry for entries (and tombstones).\n\nContributed by Gabor Bota.\n\nChange-Id: I73a2d2861901dedfe7a0e783b310fbb95e7c1af9\n",
      "commitDate": "16/06/19 9:05 AM",
      "commitName": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
      "commitAuthor": "Gabor Bota",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16279. S3Guard: Implement time-based (TTL) expiry for entries (and tombstones).\n\nContributed by Gabor Bota.\n\nChange-Id: I73a2d2861901dedfe7a0e783b310fbb95e7c1af9\n",
          "commitDate": "16/06/19 9:05 AM",
          "commitName": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "19/05/19 2:29 PM",
          "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 27.77,
          "commitsBetweenForRepo": 198,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,3 @@\n-  public void prune(long modTime) throws IOException{\n-    prune(modTime, \"\");\n+  public void prune(PruneMode pruneMode, long cutoff) throws IOException{\n+    prune(pruneMode, cutoff, \"\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prune(PruneMode pruneMode, long cutoff) throws IOException{\n    prune(pruneMode, cutoff, \"\");\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[modTime-long]",
            "newValue": "[pruneMode-PruneMode, cutoff-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16279. S3Guard: Implement time-based (TTL) expiry for entries (and tombstones).\n\nContributed by Gabor Bota.\n\nChange-Id: I73a2d2861901dedfe7a0e783b310fbb95e7c1af9\n",
          "commitDate": "16/06/19 9:05 AM",
          "commitName": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "19/05/19 2:29 PM",
          "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 27.77,
          "commitsBetweenForRepo": 198,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,3 @@\n-  public void prune(long modTime) throws IOException{\n-    prune(modTime, \"\");\n+  public void prune(PruneMode pruneMode, long cutoff) throws IOException{\n+    prune(pruneMode, cutoff, \"\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prune(PruneMode pruneMode, long cutoff) throws IOException{\n    prune(pruneMode, cutoff, \"\");\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "ea3849f0ccd32b2f8acbc6107de3b9e91803ed4a": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-14759 S3GuardTool prune to prune specific bucket entries. Contributed by Gabor Bota.\n",
      "commitDate": "05/04/18 8:23 PM",
      "commitName": "ea3849f0ccd32b2f8acbc6107de3b9e91803ed4a",
      "commitAuthor": "Aaron Fabbri",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-14759 S3GuardTool prune to prune specific bucket entries. Contributed by Gabor Bota.\n",
          "commitDate": "05/04/18 8:23 PM",
          "commitName": "ea3849f0ccd32b2f8acbc6107de3b9e91803ed4a",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "25/09/17 3:59 PM",
          "commitNameOld": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 192.18,
          "commitsBetweenForRepo": 1418,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,3 @@\n-  public synchronized void prune(long modTime) throws IOException {\n-    Iterator\u003cMap.Entry\u003cPath, PathMetadata\u003e\u003e files \u003d\n-        fileHash.entrySet().iterator();\n-    while (files.hasNext()) {\n-      Map.Entry\u003cPath, PathMetadata\u003e entry \u003d files.next();\n-      if (expired(entry.getValue().getFileStatus(), modTime)) {\n-        files.remove();\n-      }\n-    }\n-    Iterator\u003cMap.Entry\u003cPath, DirListingMetadata\u003e\u003e dirs \u003d\n-        dirHash.entrySet().iterator();\n-    while (dirs.hasNext()) {\n-      Map.Entry\u003cPath, DirListingMetadata\u003e entry \u003d dirs.next();\n-      Path path \u003d entry.getKey();\n-      DirListingMetadata metadata \u003d entry.getValue();\n-      Collection\u003cPathMetadata\u003e oldChildren \u003d metadata.getListing();\n-      Collection\u003cPathMetadata\u003e newChildren \u003d new LinkedList\u003c\u003e();\n-\n-      for (PathMetadata child : oldChildren) {\n-        FileStatus status \u003d child.getFileStatus();\n-        if (!expired(status, modTime)) {\n-          newChildren.add(child);\n-        }\n-      }\n-      if (newChildren.size() !\u003d oldChildren.size()) {\n-        dirHash.put(path, new DirListingMetadata(path, newChildren, false));\n-        if (!path.isRoot()) {\n-          DirListingMetadata parent \u003d dirHash.get(path.getParent());\n-          if (parent !\u003d null) {\n-            parent.setAuthoritative(false);\n-          }\n-        }\n-      }\n-    }\n+  public void prune(long modTime) throws IOException{\n+    prune(modTime, \"\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prune(long modTime) throws IOException{\n    prune(modTime, \"\");\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14759 S3GuardTool prune to prune specific bucket entries. Contributed by Gabor Bota.\n",
          "commitDate": "05/04/18 8:23 PM",
          "commitName": "ea3849f0ccd32b2f8acbc6107de3b9e91803ed4a",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "25/09/17 3:59 PM",
          "commitNameOld": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 192.18,
          "commitsBetweenForRepo": 1418,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,3 @@\n-  public synchronized void prune(long modTime) throws IOException {\n-    Iterator\u003cMap.Entry\u003cPath, PathMetadata\u003e\u003e files \u003d\n-        fileHash.entrySet().iterator();\n-    while (files.hasNext()) {\n-      Map.Entry\u003cPath, PathMetadata\u003e entry \u003d files.next();\n-      if (expired(entry.getValue().getFileStatus(), modTime)) {\n-        files.remove();\n-      }\n-    }\n-    Iterator\u003cMap.Entry\u003cPath, DirListingMetadata\u003e\u003e dirs \u003d\n-        dirHash.entrySet().iterator();\n-    while (dirs.hasNext()) {\n-      Map.Entry\u003cPath, DirListingMetadata\u003e entry \u003d dirs.next();\n-      Path path \u003d entry.getKey();\n-      DirListingMetadata metadata \u003d entry.getValue();\n-      Collection\u003cPathMetadata\u003e oldChildren \u003d metadata.getListing();\n-      Collection\u003cPathMetadata\u003e newChildren \u003d new LinkedList\u003c\u003e();\n-\n-      for (PathMetadata child : oldChildren) {\n-        FileStatus status \u003d child.getFileStatus();\n-        if (!expired(status, modTime)) {\n-          newChildren.add(child);\n-        }\n-      }\n-      if (newChildren.size() !\u003d oldChildren.size()) {\n-        dirHash.put(path, new DirListingMetadata(path, newChildren, false));\n-        if (!path.isRoot()) {\n-          DirListingMetadata parent \u003d dirHash.get(path.getParent());\n-          if (parent !\u003d null) {\n-            parent.setAuthoritative(false);\n-          }\n-        }\n-      }\n-    }\n+  public void prune(long modTime) throws IOException{\n+    prune(modTime, \"\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prune(long modTime) throws IOException{\n    prune(modTime, \"\");\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,35 @@\n+  public synchronized void prune(long modTime) throws IOException {\n+    Iterator\u003cMap.Entry\u003cPath, PathMetadata\u003e\u003e files \u003d\n+        fileHash.entrySet().iterator();\n+    while (files.hasNext()) {\n+      Map.Entry\u003cPath, PathMetadata\u003e entry \u003d files.next();\n+      if (expired(entry.getValue().getFileStatus(), modTime)) {\n+        files.remove();\n+      }\n+    }\n+    Iterator\u003cMap.Entry\u003cPath, DirListingMetadata\u003e\u003e dirs \u003d\n+        dirHash.entrySet().iterator();\n+    while (dirs.hasNext()) {\n+      Map.Entry\u003cPath, DirListingMetadata\u003e entry \u003d dirs.next();\n+      Path path \u003d entry.getKey();\n+      DirListingMetadata metadata \u003d entry.getValue();\n+      Collection\u003cPathMetadata\u003e oldChildren \u003d metadata.getListing();\n+      Collection\u003cPathMetadata\u003e newChildren \u003d new LinkedList\u003c\u003e();\n+\n+      for (PathMetadata child : oldChildren) {\n+        FileStatus status \u003d child.getFileStatus();\n+        if (!expired(status, modTime)) {\n+          newChildren.add(child);\n+        }\n+      }\n+      if (newChildren.size() !\u003d oldChildren.size()) {\n+        dirHash.put(path, new DirListingMetadata(path, newChildren, false));\n+        if (!path.isRoot()) {\n+          DirListingMetadata parent \u003d dirHash.get(path.getParent());\n+          if (parent !\u003d null) {\n+            parent.setAuthoritative(false);\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void prune(long modTime) throws IOException {\n    Iterator\u003cMap.Entry\u003cPath, PathMetadata\u003e\u003e files \u003d\n        fileHash.entrySet().iterator();\n    while (files.hasNext()) {\n      Map.Entry\u003cPath, PathMetadata\u003e entry \u003d files.next();\n      if (expired(entry.getValue().getFileStatus(), modTime)) {\n        files.remove();\n      }\n    }\n    Iterator\u003cMap.Entry\u003cPath, DirListingMetadata\u003e\u003e dirs \u003d\n        dirHash.entrySet().iterator();\n    while (dirs.hasNext()) {\n      Map.Entry\u003cPath, DirListingMetadata\u003e entry \u003d dirs.next();\n      Path path \u003d entry.getKey();\n      DirListingMetadata metadata \u003d entry.getValue();\n      Collection\u003cPathMetadata\u003e oldChildren \u003d metadata.getListing();\n      Collection\u003cPathMetadata\u003e newChildren \u003d new LinkedList\u003c\u003e();\n\n      for (PathMetadata child : oldChildren) {\n        FileStatus status \u003d child.getFileStatus();\n        if (!expired(status, modTime)) {\n          newChildren.add(child);\n        }\n      }\n      if (newChildren.size() !\u003d oldChildren.size()) {\n        dirHash.put(path, new DirListingMetadata(path, newChildren, false));\n        if (!path.isRoot()) {\n          DirListingMetadata parent \u003d dirHash.get(path.getParent());\n          if (parent !\u003d null) {\n            parent.setAuthoritative(false);\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java"
    }
  }
}