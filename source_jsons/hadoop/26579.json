{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskAttemptImpl.java",
  "functionName": "transition",
  "functionId": "transition___taskAttempt-TaskAttemptImpl__evnt-TaskAttemptEvent",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
  "functionStartLine": 1977,
  "functionEndLine": 2008,
  "numCommitsSeen": 110,
  "timeTaken": 9042,
  "changeHistory": [
    "cb78a65a152a4f576a3255df3676c3b788c84eb5",
    "6a1c41111edcdc58c846fc50e53554fbba230171",
    "c163dc2fce10c1f4f4def6f079069b1bae901fcd",
    "0c278b0f636a01c81aba9e46fe7658fcdfb0f33c",
    "03d46dc571bc5b0f1b3c0cb5daa52e7ee324dd54",
    "47a381e306877750b5a3ce5d76e0a5ff652ec188",
    "1c8d64f38a86b92f3c5a56105cd0cd51d8b8529b",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
    "277e520579a3452b95a5ffe2616d4f252d3c53fb",
    "ade0f0560f729e50382c6992f713f29e2dd5b270",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cb78a65a152a4f576a3255df3676c3b788c84eb5": "Ybodychange",
    "6a1c41111edcdc58c846fc50e53554fbba230171": "Ybodychange",
    "c163dc2fce10c1f4f4def6f079069b1bae901fcd": "Ybodychange",
    "0c278b0f636a01c81aba9e46fe7658fcdfb0f33c": "Ybodychange",
    "03d46dc571bc5b0f1b3c0cb5daa52e7ee324dd54": "Ybodychange",
    "47a381e306877750b5a3ce5d76e0a5ff652ec188": "Ybodychange",
    "1c8d64f38a86b92f3c5a56105cd0cd51d8b8529b": "Ybodychange",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": "Ybodychange",
    "277e520579a3452b95a5ffe2616d4f252d3c53fb": "Ybodychange",
    "ade0f0560f729e50382c6992f713f29e2dd5b270": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cb78a65a152a4f576a3255df3676c3b788c84eb5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5152. Make MR App to simply pass through the container from RM instead of extracting and populating information itself to start any container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469544 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 1:13 PM",
      "commitName": "cb78a65a152a4f576a3255df3676c3b788c84eb5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/04/13 12:28 PM",
      "commitNameOld": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       taskAttempt.shufflePort \u003d event.getShufflePort();\n \n       // register it to TaskAttemptListener so that it can start monitoring it.\n       taskAttempt.taskAttemptListener\n         .registerLaunchedTask(taskAttempt.attemptId, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n-      InetSocketAddress nodeHttpInetAddr \u003d\n-          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n-                                                                  // Costly?\n+      InetSocketAddress nodeHttpInetAddr \u003d // TODO: Costly to create sock-addr?\n+          NetUtils.createSocketAddr(taskAttempt.container.getNodeHttpAddress());\n       taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n       taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n       taskAttempt.sendLaunchedEvents();\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it can start monitoring it.\n      taskAttempt.taskAttemptListener\n        .registerLaunchedTask(taskAttempt.attemptId, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d // TODO: Costly to create sock-addr?\n          NetUtils.createSocketAddr(taskAttempt.container.getNodeHttpAddress());\n      taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n      taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n      taskAttempt.sendLaunchedEvents();\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "6a1c41111edcdc58c846fc50e53554fbba230171": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5079. Changes job recovery to restore state directly from job history, instaed of simulating state machine events. Contributed by Jason Lowe and Robert Parker.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466767 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/13 9:52 PM",
      "commitName": "6a1c41111edcdc58c846fc50e53554fbba230171",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "15/03/13 2:09 PM",
      "commitNameOld": "7d7553c4eb7d9a282410a3213d26a89fea9b7865",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 26.32,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,32 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       taskAttempt.shufflePort \u003d event.getShufflePort();\n \n       // register it to TaskAttemptListener so that it can start monitoring it.\n       taskAttempt.taskAttemptListener\n         .registerLaunchedTask(taskAttempt.attemptId, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n       taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n-      JobCounterUpdateEvent jce \u003d\n-          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n-              .getJobId());\n-      jce.addCounterUpdate(\n-          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n-              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n-              , 1);\n-      taskAttempt.eventHandler.handle(jce);\n-      \n-      LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n-          + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n-          + taskAttempt.containerMgrAddress + \"]\");\n-      TaskAttemptStartedEvent tase \u003d\n-        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n-            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n-            taskAttempt.launchTime,\n-            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n-            taskAttempt.shufflePort, taskAttempt.containerID,\n-            taskAttempt.locality.toString(), taskAttempt.avataar.toString());\n-      taskAttempt.eventHandler.handle\n-          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n+      taskAttempt.sendLaunchedEvents();\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it can start monitoring it.\n      taskAttempt.taskAttemptListener\n        .registerLaunchedTask(taskAttempt.attemptId, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n      taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n      taskAttempt.sendLaunchedEvents();\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "c163dc2fce10c1f4f4def6f079069b1bae901fcd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4838. Add additional fields like Locality, Avataar to the JobHistory logs. Contributed by Zhijie Shen\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1439714 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/01/13 4:21 PM",
      "commitName": "c163dc2fce10c1f4f4def6f079069b1bae901fcd",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "09/01/13 8:12 AM",
      "commitNameOld": "0ba7078ef4ee127a47c5042c82db0b113a967b23",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 19.34,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       taskAttempt.shufflePort \u003d event.getShufflePort();\n \n       // register it to TaskAttemptListener so that it can start monitoring it.\n       taskAttempt.taskAttemptListener\n         .registerLaunchedTask(taskAttempt.attemptId, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n       taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n       LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n           + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n           + taskAttempt.containerMgrAddress + \"]\");\n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n             nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n-            taskAttempt.shufflePort, taskAttempt.containerID);\n+            taskAttempt.shufflePort, taskAttempt.containerID,\n+            taskAttempt.locality.toString(), taskAttempt.avataar.toString());\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it can start monitoring it.\n      taskAttempt.taskAttemptListener\n        .registerLaunchedTask(taskAttempt.attemptId, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n      taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n          + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n          + taskAttempt.containerMgrAddress + \"]\");\n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n            taskAttempt.shufflePort, taskAttempt.containerID,\n            taskAttempt.locality.toString(), taskAttempt.avataar.toString());\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "0c278b0f636a01c81aba9e46fe7658fcdfb0f33c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3656. Fixed a race condition in MR AM which is failing the sort benchmark consistently. Contributed by Siddarth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1231314 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/01/12 1:31 PM",
      "commitName": "0c278b0f636a01c81aba9e46fe7658fcdfb0f33c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/01/12 1:04 PM",
      "commitNameOld": "e8645636ce1721aa6dc3674fbc553a7bb3522fbe",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.02,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       taskAttempt.shufflePort \u003d event.getShufflePort();\n \n       // register it to TaskAttemptListener so that it can start monitoring it.\n       taskAttempt.taskAttemptListener\n-        .registerLaunchedTask(taskAttempt.attemptId);\n+        .registerLaunchedTask(taskAttempt.attemptId, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n       taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n       LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n           + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n           + taskAttempt.containerMgrAddress + \"]\");\n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n             nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n             taskAttempt.shufflePort, taskAttempt.containerID);\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it can start monitoring it.\n      taskAttempt.taskAttemptListener\n        .registerLaunchedTask(taskAttempt.attemptId, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n      taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n          + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n          + taskAttempt.containerMgrAddress + \"]\");\n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n            taskAttempt.shufflePort, taskAttempt.containerID);\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "03d46dc571bc5b0f1b3c0cb5daa52e7ee324dd54": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3569. TaskAttemptListener holds a global lock for all task-updates. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227485 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/12 9:19 PM",
      "commitName": "03d46dc571bc5b0f1b3c0cb5daa52e7ee324dd54",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "04/01/12 5:29 PM",
      "commitNameOld": "0870734787d7005d85697549eab5b6479d97d453",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,51 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       taskAttempt.shufflePort \u003d event.getShufflePort();\n \n-      // register it to TaskAttemptListener so that it start listening\n-      // for it\n-      taskAttempt.taskAttemptListener.registerLaunchedTask(\n-          taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n+      // register it to TaskAttemptListener so that it can start monitoring it.\n+      taskAttempt.taskAttemptListener\n+        .registerLaunchedTask(taskAttempt.attemptId);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n       taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n       LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n           + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n           + taskAttempt.containerMgrAddress + \"]\");\n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n             nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n             taskAttempt.shufflePort, taskAttempt.containerID);\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it can start monitoring it.\n      taskAttempt.taskAttemptListener\n        .registerLaunchedTask(taskAttempt.attemptId);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n      taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n          + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n          + taskAttempt.containerMgrAddress + \"]\");\n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n            taskAttempt.shufflePort, taskAttempt.containerID);\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "47a381e306877750b5a3ce5d76e0a5ff652ec188": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3146. Added a MR specific command line to dump logs for a given TaskAttemptID. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195349 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/11 11:42 PM",
      "commitName": "47a381e306877750b5a3ce5d76e0a5ff652ec188",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/10/11 4:29 AM",
      "commitNameOld": "1c8d64f38a86b92f3c5a56105cd0cd51d8b8529b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,52 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       taskAttempt.shufflePort \u003d event.getShufflePort();\n \n       // register it to TaskAttemptListener so that it start listening\n       // for it\n       taskAttempt.taskAttemptListener.registerLaunchedTask(\n           taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n+      taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n+      taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n       LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n           + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n           + taskAttempt.containerMgrAddress + \"]\");\n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n             nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n             taskAttempt.shufflePort, taskAttempt.containerID);\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it start listening\n      // for it\n      taskAttempt.taskAttemptListener.registerLaunchedTask(\n          taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      taskAttempt.trackerName \u003d nodeHttpInetAddr.getHostName();\n      taskAttempt.httpPort \u003d nodeHttpInetAddr.getPort();\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n          + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n          + taskAttempt.containerMgrAddress + \"]\");\n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n            taskAttempt.shufflePort, taskAttempt.containerID);\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "1c8d64f38a86b92f3c5a56105cd0cd51d8b8529b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3274. Fixed a race condition in MRAppMaster that was causing a task-scheduling deadlock. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/11 4:29 AM",
      "commitName": "1c8d64f38a86b92f3c5a56105cd0cd51d8b8529b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/10/11 11:26 PM",
      "commitNameOld": "fffdf661e30afd10331d2153ff052c141b7ebe4b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 5.21,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       taskAttempt.shufflePort \u003d event.getShufflePort();\n \n       // register it to TaskAttemptListener so that it start listening\n       // for it\n-      taskAttempt.taskAttemptListener.register(\n+      taskAttempt.taskAttemptListener.registerLaunchedTask(\n           taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n       LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n           + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n           + taskAttempt.containerMgrAddress + \"]\");\n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n             nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n             taskAttempt.shufflePort, taskAttempt.containerID);\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it start listening\n      // for it\n      taskAttempt.taskAttemptListener.registerLaunchedTask(\n          taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n          + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n          + taskAttempt.containerMgrAddress + \"]\");\n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n            taskAttempt.shufflePort, taskAttempt.containerID);\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/11 10:21 PM",
      "commitName": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/10/11 6:22 PM",
      "commitNameOld": "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,50 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       taskAttempt.shufflePort \u003d event.getShufflePort();\n \n       // register it to TaskAttemptListener so that it start listening\n       // for it\n       taskAttempt.taskAttemptListener.register(\n           taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n+      LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n+          + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n+          + taskAttempt.containerMgrAddress + \"]\");\n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n-            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(), taskAttempt.shufflePort);\n+            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n+            taskAttempt.shufflePort, taskAttempt.containerID);\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it start listening\n      // for it\n      taskAttempt.taskAttemptListener.register(\n          taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      LOG.info(\"TaskAttempt: [\" + taskAttempt.attemptId\n          + \"] using containerId: [\" + taskAttempt.containerID + \" on NM: [\"\n          + taskAttempt.containerMgrAddress + \"]\");\n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n            taskAttempt.shufflePort, taskAttempt.containerID);\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "277e520579a3452b95a5ffe2616d4f252d3c53fb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2666. Retrieve shuffle port number from JobHistory on MR AM restart. Contributed by Jonathan Eagles. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1182613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/11 4:12 PM",
      "commitName": "277e520579a3452b95a5ffe2616d4f252d3c53fb",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/10/11 7:09 AM",
      "commitNameOld": "7d5434c6b300bff1858787a876b20f080a8eb64a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.38,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n         TaskAttemptEvent evnt) {\n \n       TaskAttemptContainerLaunchedEvent event \u003d\n         (TaskAttemptContainerLaunchedEvent) evnt;\n \n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n+      taskAttempt.shufflePort \u003d event.getShufflePort();\n+\n       // register it to TaskAttemptListener so that it start listening\n       // for it\n       taskAttempt.taskAttemptListener.register(\n           taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n-            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort());\n+            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(), taskAttempt.shufflePort);\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n-      taskAttempt.shufflePort \u003d event.getShufflePort();\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n\n      // register it to TaskAttemptListener so that it start listening\n      // for it\n      taskAttempt.taskAttemptListener.register(\n          taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(), taskAttempt.shufflePort);\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "ade0f0560f729e50382c6992f713f29e2dd5b270": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2652. Enabled multiple NMs to be runnable on a single node by making shuffle service port to be truely configurable. Contributed by Robert Joseph Evans.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163585 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/11 4:38 AM",
      "commitName": "ade0f0560f729e50382c6992f713f29e2dd5b270",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2652. Enabled multiple NMs to be runnable on a single node by making shuffle service port to be truely configurable. Contributed by Robert Joseph Evans.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163585 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/08/11 4:38 AM",
          "commitName": "ade0f0560f729e50382c6992f713f29e2dd5b270",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 6.48,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,45 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n-        TaskAttemptEvent event) {\n+        TaskAttemptEvent evnt) {\n+\n+      TaskAttemptContainerLaunchedEvent event \u003d\n+        (TaskAttemptContainerLaunchedEvent) evnt;\n+\n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       // register it to TaskAttemptListener so that it start listening\n       // for it\n       taskAttempt.taskAttemptListener.register(\n           taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n             nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort());\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n+      taskAttempt.shufflePort \u003d event.getShufflePort();\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      // register it to TaskAttemptListener so that it start listening\n      // for it\n      taskAttempt.taskAttemptListener.register(\n          taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort());\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
          "extendedDetails": {
            "oldValue": "[taskAttempt-TaskAttemptImpl, event-TaskAttemptEvent]",
            "newValue": "[taskAttempt-TaskAttemptImpl, evnt-TaskAttemptEvent]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2652. Enabled multiple NMs to be runnable on a single node by making shuffle service port to be truely configurable. Contributed by Robert Joseph Evans.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163585 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/08/11 4:38 AM",
          "commitName": "ade0f0560f729e50382c6992f713f29e2dd5b270",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 6.48,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,45 @@\n     public void transition(TaskAttemptImpl taskAttempt, \n-        TaskAttemptEvent event) {\n+        TaskAttemptEvent evnt) {\n+\n+      TaskAttemptContainerLaunchedEvent event \u003d\n+        (TaskAttemptContainerLaunchedEvent) evnt;\n+\n       //set the launch time\n       taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n       // register it to TaskAttemptListener so that it start listening\n       // for it\n       taskAttempt.taskAttemptListener.register(\n           taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n       //TODO Resolve to host / IP in case of a local address.\n       InetSocketAddress nodeHttpInetAddr \u003d\n           NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                   // Costly?\n       JobCounterUpdateEvent jce \u003d\n           new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n               .getJobId());\n       jce.addCounterUpdate(\n           taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n               JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n               , 1);\n       taskAttempt.eventHandler.handle(jce);\n       \n       TaskAttemptStartedEvent tase \u003d\n         new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n             TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n             taskAttempt.launchTime,\n             nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort());\n       taskAttempt.eventHandler.handle\n           (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n       taskAttempt.eventHandler.handle\n           (new SpeculatorEvent\n               (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n       //make remoteTask reference as null as it is no more needed\n       //and free up the memory\n       taskAttempt.remoteTask \u003d null;\n+      taskAttempt.shufflePort \u003d event.getShufflePort();\n       \n       //tell the Task that attempt has started\n       taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n           taskAttempt.attemptId, \n          TaskEventType.T_ATTEMPT_LAUNCHED));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent evnt) {\n\n      TaskAttemptContainerLaunchedEvent event \u003d\n        (TaskAttemptContainerLaunchedEvent) evnt;\n\n      //set the launch time\n      taskAttempt.launchTime \u003d taskAttempt.clock.getTime();\n      // register it to TaskAttemptListener so that it start listening\n      // for it\n      taskAttempt.taskAttemptListener.register(\n          taskAttempt.attemptId, taskAttempt.remoteTask, taskAttempt.jvmID);\n      //TODO Resolve to host / IP in case of a local address.\n      InetSocketAddress nodeHttpInetAddr \u003d\n          NetUtils.createSocketAddr(taskAttempt.nodeHttpAddress); // TODO:\n                                                                  // Costly?\n      JobCounterUpdateEvent jce \u003d\n          new JobCounterUpdateEvent(taskAttempt.attemptId.getTaskId()\n              .getJobId());\n      jce.addCounterUpdate(\n          taskAttempt.attemptId.getTaskId().getTaskType() \u003d\u003d TaskType.MAP ? \n              JobCounter.TOTAL_LAUNCHED_MAPS: JobCounter.TOTAL_LAUNCHED_REDUCES\n              , 1);\n      taskAttempt.eventHandler.handle(jce);\n      \n      TaskAttemptStartedEvent tase \u003d\n        new TaskAttemptStartedEvent(TypeConverter.fromYarn(taskAttempt.attemptId),\n            TypeConverter.fromYarn(taskAttempt.attemptId.getTaskId().getTaskType()),\n            taskAttempt.launchTime,\n            nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort());\n      taskAttempt.eventHandler.handle\n          (new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(), tase));\n      taskAttempt.eventHandler.handle\n          (new SpeculatorEvent\n              (taskAttempt.attemptId, true, taskAttempt.clock.getTime()));\n      //make remoteTask reference as null as it is no more needed\n      //and free up the memory\n      taskAttempt.remoteTask \u003d null;\n      taskAttempt.shufflePort \u003d event.getShufflePort();\n      \n      //tell the Task that attempt has started\n      taskAttempt.eventHandler.handle(new TaskTAttemptEvent(\n          taskAttempt.attemptId, \n         TaskEventType.T_ATTEMPT_LAUNCHED));\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent event) {\n      TaskAttemptDiagnosticsUpdateEvent diagEvent \u003d\n          (TaskAttemptDiagnosticsUpdateEvent) event;\n      LOG.info(\"Diagnostics report from \" + taskAttempt.attemptId + \": \"\n          + diagEvent.getDiagnosticInfo());\n      taskAttempt.addDiagnosticInfo(diagEvent.getDiagnosticInfo());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,8 @@\n+    public void transition(TaskAttemptImpl taskAttempt, \n+        TaskAttemptEvent event) {\n+      TaskAttemptDiagnosticsUpdateEvent diagEvent \u003d\n+          (TaskAttemptDiagnosticsUpdateEvent) event;\n+      LOG.info(\"Diagnostics report from \" + taskAttempt.attemptId + \": \"\n+          + diagEvent.getDiagnosticInfo());\n+      taskAttempt.addDiagnosticInfo(diagEvent.getDiagnosticInfo());\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void transition(TaskAttemptImpl taskAttempt, \n        TaskAttemptEvent event) {\n      TaskAttemptDiagnosticsUpdateEvent diagEvent \u003d\n          (TaskAttemptDiagnosticsUpdateEvent) event;\n      LOG.info(\"Diagnostics report from \" + taskAttempt.attemptId + \": \"\n          + diagEvent.getDiagnosticInfo());\n      taskAttempt.addDiagnosticInfo(diagEvent.getDiagnosticInfo());\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java"
    }
  }
}