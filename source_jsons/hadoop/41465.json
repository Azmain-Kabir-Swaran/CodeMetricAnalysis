{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "addNode",
  "functionId": "addNode___containerReports-List__NMContainerStatus____node-RMNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 758,
  "functionEndLine": 779,
  "numCommitsSeen": 345,
  "timeTaken": 8002,
  "changeHistory": [
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "e1ccc9622b2f1fbefea1862fa74d1fb56d8eb264",
    "7e2837f830382835838c82398db6fc9823d612a7",
    "dd4b387d96abc66ddebb569b3775b18b19aed027",
    "75885852cc19dd6de12e62498b112d5d70ce87f4",
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
    "0097b15e2150f95745f64179a0ef4644e96128f5",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
    "51ccb87031eda6a2b75be098a88f1d89ea82c610",
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c"
  ],
  "changeHistoryShort": {
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "e1ccc9622b2f1fbefea1862fa74d1fb56d8eb264": "Ybodychange",
    "7e2837f830382835838c82398db6fc9823d612a7": "Ybodychange",
    "dd4b387d96abc66ddebb569b3775b18b19aed027": "Ymultichange(Yparameterchange,Ybodychange)",
    "75885852cc19dd6de12e62498b112d5d70ce87f4": "Ybodychange",
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb": "Ybodychange",
    "0097b15e2150f95745f64179a0ef4644e96128f5": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": "Ybodychange",
    "51ccb87031eda6a2b75be098a88f1d89ea82c610": "Ybodychange",
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7133. Clean up lock-try order in fair scheduler. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "24/07/18 12:46 PM",
      "commitName": "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "11/06/18 11:12 AM",
      "commitNameOld": "c190ac2be88e574b3322cdc73a7c0af0cef708b2",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 43.07,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private void addNode(List\u003cNMContainerStatus\u003e containerReports,\n       RMNode node) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node,\n           usePortForNodeName);\n       nodeTracker.addNode(schedulerNode);\n \n       triggerUpdate();\n \n       Resource clusterResource \u003d getClusterResource();\n       queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n       queueMgr.getRootQueue().recomputeSteadyShares();\n       LOG.info(\"Added node \" + node.getNodeAddress() + \" cluster capacity: \"\n           + clusterResource);\n \n       recoverContainersOnNode(containerReports, node);\n       updateRootQueueMetrics();\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addNode(List\u003cNMContainerStatus\u003e containerReports,\n      RMNode node) {\n    writeLock.lock();\n    try {\n      FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node,\n          usePortForNodeName);\n      nodeTracker.addNode(schedulerNode);\n\n      triggerUpdate();\n\n      Resource clusterResource \u003d getClusterResource();\n      queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n      queueMgr.getRootQueue().recomputeSteadyShares();\n      LOG.info(\"Added node \" + node.getNodeAddress() + \" cluster capacity: \"\n          + clusterResource);\n\n      recoverContainersOnNode(containerReports, node);\n      updateRootQueueMetrics();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/10/16 6:03 AM",
          "commitNameOld": "0da54e8848764c71a31473516d23ada582013f8c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.47,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,22 @@\n-  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n+  private void addNode(List\u003cNMContainerStatus\u003e containerReports,\n       RMNode node) {\n-    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n-    nodeTracker.addNode(schedulerNode);\n+    try {\n+      writeLock.lock();\n+      FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node,\n+          usePortForNodeName);\n+      nodeTracker.addNode(schedulerNode);\n \n-    triggerUpdate();\n+      triggerUpdate();\n \n-    Resource clusterResource \u003d getClusterResource();\n-    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n-    queueMgr.getRootQueue().recomputeSteadyShares();\n-    LOG.info(\"Added node \" + node.getNodeAddress() +\n-        \" cluster capacity: \" + clusterResource);\n+      Resource clusterResource \u003d getClusterResource();\n+      queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n+      queueMgr.getRootQueue().recomputeSteadyShares();\n+      LOG.info(\"Added node \" + node.getNodeAddress() + \" cluster capacity: \"\n+          + clusterResource);\n \n-    recoverContainersOnNode(containerReports, node);\n-    updateRootQueueMetrics();\n+      recoverContainersOnNode(containerReports, node);\n+      updateRootQueueMetrics();\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addNode(List\u003cNMContainerStatus\u003e containerReports,\n      RMNode node) {\n    try {\n      writeLock.lock();\n      FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node,\n          usePortForNodeName);\n      nodeTracker.addNode(schedulerNode);\n\n      triggerUpdate();\n\n      Resource clusterResource \u003d getClusterResource();\n      queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n      queueMgr.getRootQueue().recomputeSteadyShares();\n      LOG.info(\"Added node \" + node.getNodeAddress() + \" cluster capacity: \"\n          + clusterResource);\n\n      recoverContainersOnNode(containerReports, node);\n      updateRootQueueMetrics();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/10/16 6:03 AM",
          "commitNameOld": "0da54e8848764c71a31473516d23ada582013f8c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.47,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,22 @@\n-  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n+  private void addNode(List\u003cNMContainerStatus\u003e containerReports,\n       RMNode node) {\n-    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n-    nodeTracker.addNode(schedulerNode);\n+    try {\n+      writeLock.lock();\n+      FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node,\n+          usePortForNodeName);\n+      nodeTracker.addNode(schedulerNode);\n \n-    triggerUpdate();\n+      triggerUpdate();\n \n-    Resource clusterResource \u003d getClusterResource();\n-    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n-    queueMgr.getRootQueue().recomputeSteadyShares();\n-    LOG.info(\"Added node \" + node.getNodeAddress() +\n-        \" cluster capacity: \" + clusterResource);\n+      Resource clusterResource \u003d getClusterResource();\n+      queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n+      queueMgr.getRootQueue().recomputeSteadyShares();\n+      LOG.info(\"Added node \" + node.getNodeAddress() + \" cluster capacity: \"\n+          + clusterResource);\n \n-    recoverContainersOnNode(containerReports, node);\n-    updateRootQueueMetrics();\n+      recoverContainersOnNode(containerReports, node);\n+      updateRootQueueMetrics();\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addNode(List\u003cNMContainerStatus\u003e containerReports,\n      RMNode node) {\n    try {\n      writeLock.lock();\n      FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node,\n          usePortForNodeName);\n      nodeTracker.addNode(schedulerNode);\n\n      triggerUpdate();\n\n      Resource clusterResource \u003d getClusterResource();\n      queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n      queueMgr.getRootQueue().recomputeSteadyShares();\n      LOG.info(\"Added node \" + node.getNodeAddress() + \" cluster capacity: \"\n          + clusterResource);\n\n      recoverContainersOnNode(containerReports, node);\n      updateRootQueueMetrics();\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "06/03/16 7:46 PM",
      "commitNameOld": "e1ccc9622b2f1fbefea1862fa74d1fb56d8eb264",
      "commitAuthorOld": "Zhihai Xu",
      "daysBetweenCommits": 7.73,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,16 @@\n   private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n       RMNode node) {\n     FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n-    nodes.put(node.getNodeID(), schedulerNode);\n-    String rackName \u003d node.getRackName() \u003d\u003d null ? \"NULL\" : node.getRackName();\n-    if (nodesPerRack.containsKey(rackName)) {\n-      nodesPerRack.put(rackName, nodesPerRack.get(rackName) + 1);\n-    } else {\n-      nodesPerRack.put(rackName, 1);\n-    }\n-    Resources.addTo(clusterResource, schedulerNode.getTotalResource());\n-    updateMaximumAllocation(schedulerNode, true);\n+    nodeTracker.addNode(schedulerNode);\n \n     triggerUpdate();\n \n+    Resource clusterResource \u003d getClusterResource();\n     queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n     queueMgr.getRootQueue().recomputeSteadyShares();\n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterResource);\n \n     recoverContainersOnNode(containerReports, node);\n     updateRootQueueMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n      RMNode node) {\n    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n    nodeTracker.addNode(schedulerNode);\n\n    triggerUpdate();\n\n    Resource clusterResource \u003d getClusterResource();\n    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n    queueMgr.getRootQueue().recomputeSteadyShares();\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n\n    recoverContainersOnNode(containerReports, node);\n    updateRootQueueMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "e1ccc9622b2f1fbefea1862fa74d1fb56d8eb264": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4761. NMs reconnecting with changed capabilities can lead to wrong cluster resource calculations on fair scheduler. Contributed by Sangjin Lee\n",
      "commitDate": "06/03/16 7:46 PM",
      "commitName": "e1ccc9622b2f1fbefea1862fa74d1fb56d8eb264",
      "commitAuthor": "Zhihai Xu",
      "commitDateOld": "28/02/16 9:35 AM",
      "commitNameOld": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 7.42,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n       RMNode node) {\n     FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n     nodes.put(node.getNodeID(), schedulerNode);\n     String rackName \u003d node.getRackName() \u003d\u003d null ? \"NULL\" : node.getRackName();\n     if (nodesPerRack.containsKey(rackName)) {\n       nodesPerRack.put(rackName, nodesPerRack.get(rackName) + 1);\n     } else {\n       nodesPerRack.put(rackName, 1);\n     }\n-    Resources.addTo(clusterResource, node.getTotalCapability());\n+    Resources.addTo(clusterResource, schedulerNode.getTotalResource());\n     updateMaximumAllocation(schedulerNode, true);\n \n     triggerUpdate();\n \n     queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n     queueMgr.getRootQueue().recomputeSteadyShares();\n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterResource);\n \n     recoverContainersOnNode(containerReports, node);\n     updateRootQueueMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n      RMNode node) {\n    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n    nodes.put(node.getNodeID(), schedulerNode);\n    String rackName \u003d node.getRackName() \u003d\u003d null ? \"NULL\" : node.getRackName();\n    if (nodesPerRack.containsKey(rackName)) {\n      nodesPerRack.put(rackName, nodesPerRack.get(rackName) + 1);\n    } else {\n      nodesPerRack.put(rackName, 1);\n    }\n    Resources.addTo(clusterResource, schedulerNode.getTotalResource());\n    updateMaximumAllocation(schedulerNode, true);\n\n    triggerUpdate();\n\n    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n    queueMgr.getRootQueue().recomputeSteadyShares();\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n\n    recoverContainersOnNode(containerReports, node);\n    updateRootQueueMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "7e2837f830382835838c82398db6fc9823d612a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
      "commitDate": "19/10/15 8:00 PM",
      "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "15/10/15 5:12 PM",
      "commitNameOld": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 4.12,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,23 @@\n   private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n       RMNode node) {\n     FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n     nodes.put(node.getNodeID(), schedulerNode);\n+    String rackName \u003d node.getRackName() \u003d\u003d null ? \"NULL\" : node.getRackName();\n+    if (nodesPerRack.containsKey(rackName)) {\n+      nodesPerRack.put(rackName, nodesPerRack.get(rackName) + 1);\n+    } else {\n+      nodesPerRack.put(rackName, 1);\n+    }\n     Resources.addTo(clusterResource, node.getTotalCapability());\n     updateMaximumAllocation(schedulerNode, true);\n \n     triggerUpdate();\n \n     queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n     queueMgr.getRootQueue().recomputeSteadyShares();\n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterResource);\n \n     recoverContainersOnNode(containerReports, node);\n     updateRootQueueMetrics();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n      RMNode node) {\n    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n    nodes.put(node.getNodeID(), schedulerNode);\n    String rackName \u003d node.getRackName() \u003d\u003d null ? \"NULL\" : node.getRackName();\n    if (nodesPerRack.containsKey(rackName)) {\n      nodesPerRack.put(rackName, nodesPerRack.get(rackName) + 1);\n    } else {\n      nodesPerRack.put(rackName, 1);\n    }\n    Resources.addTo(clusterResource, node.getTotalCapability());\n    updateMaximumAllocation(schedulerNode, true);\n\n    triggerUpdate();\n\n    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n    queueMgr.getRootQueue().recomputeSteadyShares();\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n\n    recoverContainersOnNode(containerReports, node);\n    updateRootQueueMetrics();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "dd4b387d96abc66ddebb569b3775b18b19aed027": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3790. usedResource from rootQueue metrics may get stale data for FS scheduler after recovering the container (Zhihai Xu via rohithsharmaks)\n",
      "commitDate": "24/06/15 10:30 AM",
      "commitName": "dd4b387d96abc66ddebb569b3775b18b19aed027",
      "commitAuthor": "rohithsharmaks",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3790. usedResource from rootQueue metrics may get stale data for FS scheduler after recovering the container (Zhihai Xu via rohithsharmaks)\n",
          "commitDate": "24/06/15 10:30 AM",
          "commitName": "dd4b387d96abc66ddebb569b3775b18b19aed027",
          "commitAuthor": "rohithsharmaks",
          "commitDateOld": "07/06/15 11:37 AM",
          "commitNameOld": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 16.95,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,17 @@\n-  private synchronized void addNode(RMNode node) {\n+  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n+      RMNode node) {\n     FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n     nodes.put(node.getNodeID(), schedulerNode);\n     Resources.addTo(clusterResource, node.getTotalCapability());\n-    updateRootQueueMetrics();\n     updateMaximumAllocation(schedulerNode, true);\n \n     triggerUpdate();\n \n     queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n     queueMgr.getRootQueue().recomputeSteadyShares();\n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterResource);\n+\n+    recoverContainersOnNode(containerReports, node);\n+    updateRootQueueMetrics();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n      RMNode node) {\n    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n    nodes.put(node.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, node.getTotalCapability());\n    updateMaximumAllocation(schedulerNode, true);\n\n    triggerUpdate();\n\n    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n    queueMgr.getRootQueue().recomputeSteadyShares();\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n\n    recoverContainersOnNode(containerReports, node);\n    updateRootQueueMetrics();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[node-RMNode]",
            "newValue": "[containerReports-List\u003cNMContainerStatus\u003e, node-RMNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3790. usedResource from rootQueue metrics may get stale data for FS scheduler after recovering the container (Zhihai Xu via rohithsharmaks)\n",
          "commitDate": "24/06/15 10:30 AM",
          "commitName": "dd4b387d96abc66ddebb569b3775b18b19aed027",
          "commitAuthor": "rohithsharmaks",
          "commitDateOld": "07/06/15 11:37 AM",
          "commitNameOld": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 16.95,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,17 @@\n-  private synchronized void addNode(RMNode node) {\n+  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n+      RMNode node) {\n     FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n     nodes.put(node.getNodeID(), schedulerNode);\n     Resources.addTo(clusterResource, node.getTotalCapability());\n-    updateRootQueueMetrics();\n     updateMaximumAllocation(schedulerNode, true);\n \n     triggerUpdate();\n \n     queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n     queueMgr.getRootQueue().recomputeSteadyShares();\n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterResource);\n+\n+    recoverContainersOnNode(containerReports, node);\n+    updateRootQueueMetrics();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addNode(List\u003cNMContainerStatus\u003e containerReports,\n      RMNode node) {\n    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n    nodes.put(node.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, node.getTotalCapability());\n    updateMaximumAllocation(schedulerNode, true);\n\n    triggerUpdate();\n\n    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n    queueMgr.getRootQueue().recomputeSteadyShares();\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n\n    recoverContainersOnNode(containerReports, node);\n    updateRootQueueMetrics();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "75885852cc19dd6de12e62498b112d5d70ce87f4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3259. FairScheduler: Trigger fairShare updates on node events. (Anubhav Dhoot via kasha)\n",
      "commitDate": "05/06/15 9:39 AM",
      "commitName": "75885852cc19dd6de12e62498b112d5d70ce87f4",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "21/05/15 1:44 PM",
      "commitNameOld": "4513761869c732cf2f462763043067ebf8749df7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 14.83,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,14 @@\n   private synchronized void addNode(RMNode node) {\n     FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n     nodes.put(node.getNodeID(), schedulerNode);\n     Resources.addTo(clusterResource, node.getTotalCapability());\n     updateRootQueueMetrics();\n     updateMaximumAllocation(schedulerNode, true);\n \n+    triggerUpdate();\n+\n     queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n     queueMgr.getRootQueue().recomputeSteadyShares();\n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n    nodes.put(node.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, node.getTotalCapability());\n    updateRootQueueMetrics();\n    updateMaximumAllocation(schedulerNode, true);\n\n    triggerUpdate();\n\n    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n    queueMgr.getRootQueue().recomputeSteadyShares();\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2604. Scheduler should consider max-allocation-* in conjunction with the largest node. (Robert Kanter via kasha)\n",
      "commitDate": "21/11/14 10:32 AM",
      "commitName": "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "14/11/14 3:18 PM",
      "commitNameOld": "1a47f890ba3cb22b6262f47c1f1af2990559bb89",
      "commitAuthorOld": "Sandy Ryza",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,12 @@\n   private synchronized void addNode(RMNode node) {\n-    nodes.put(node.getNodeID(), new FSSchedulerNode(node, usePortForNodeName));\n+    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n+    nodes.put(node.getNodeID(), schedulerNode);\n     Resources.addTo(clusterResource, node.getTotalCapability());\n     updateRootQueueMetrics();\n+    updateMaximumAllocation(schedulerNode, true);\n \n     queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n     queueMgr.getRootQueue().recomputeSteadyShares();\n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    FSSchedulerNode schedulerNode \u003d new FSSchedulerNode(node, usePortForNodeName);\n    nodes.put(node.getNodeID(), schedulerNode);\n    Resources.addTo(clusterResource, node.getTotalCapability());\n    updateRootQueueMetrics();\n    updateMaximumAllocation(schedulerNode, true);\n\n    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n    queueMgr.getRootQueue().recomputeSteadyShares();\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "0097b15e2150f95745f64179a0ef4644e96128f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2393. FairScheduler: Add the notion of steady fair share. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/14 8:44 AM",
      "commitName": "0097b15e2150f95745f64179a0ef4644e96128f5",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "19/08/14 1:33 PM",
      "commitNameOld": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 2.8,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,10 @@\n   private synchronized void addNode(RMNode node) {\n     nodes.put(node.getNodeID(), new FSSchedulerNode(node, usePortForNodeName));\n     Resources.addTo(clusterResource, node.getTotalCapability());\n     updateRootQueueMetrics();\n \n+    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n+    queueMgr.getRootQueue().recomputeSteadyShares();\n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    nodes.put(node.getNodeID(), new FSSchedulerNode(node, usePortForNodeName));\n    Resources.addTo(clusterResource, node.getTotalCapability());\n    updateRootQueueMetrics();\n\n    queueMgr.getRootQueue().setSteadyFairShare(clusterResource);\n    queueMgr.getRootQueue().recomputeSteadyShares();\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/03/14 4:40 PM",
      "commitNameOld": "7bd62b8da03642612fae8349e967b9c0aa290843",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 51.24,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   private synchronized void addNode(RMNode node) {\n     nodes.put(node.getNodeID(), new FSSchedulerNode(node, usePortForNodeName));\n-    Resources.addTo(clusterCapacity, node.getTotalCapability());\n+    Resources.addTo(clusterResource, node.getTotalCapability());\n     updateRootQueueMetrics();\n \n     LOG.info(\"Added node \" + node.getNodeAddress() +\n-        \" cluster capacity: \" + clusterCapacity);\n+        \" cluster capacity: \" + clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    nodes.put(node.getNodeID(), new FSSchedulerNode(node, usePortForNodeName));\n    Resources.addTo(clusterResource, node.getTotalCapability());\n    updateRootQueueMetrics();\n\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1008. MiniYARNCluster with multiple nodemanagers, all nodes have same key for allocations. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/08/13 8:39 AM",
      "commitName": "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "21/08/13 4:33 PM",
      "commitNameOld": "42a2846b3b824af808d7fd190f7dd4ea1ee10cbb",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 4.67,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   private synchronized void addNode(RMNode node) {\n-    nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n+    nodes.put(node.getNodeID(), new FSSchedulerNode(node, usePortForNodeName));\n     Resources.addTo(clusterCapacity, node.getTotalCapability());\n     updateRootQueueMetrics();\n \n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterCapacity);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    nodes.put(node.getNodeID(), new FSSchedulerNode(node, usePortForNodeName));\n    Resources.addTo(clusterCapacity, node.getTotalCapability());\n    updateRootQueueMetrics();\n\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterCapacity);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "51ccb87031eda6a2b75be098a88f1d89ea82c610": {
      "type": "Ybodychange",
      "commitMessage": "YARN-655. Fair scheduler metrics should subtract allocated memory from available memory. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480809 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/13 3:15 PM",
      "commitName": "51ccb87031eda6a2b75be098a88f1d89ea82c610",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "09/05/13 2:52 PM",
      "commitNameOld": "e0562e3d07f29afbf283857293db0699dcb232c9",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,8 @@\n   private synchronized void addNode(RMNode node) {\n     nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n     Resources.addTo(clusterCapacity, node.getTotalCapability());\n+    updateRootQueueMetrics();\n \n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterCapacity);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n    Resources.addTo(clusterCapacity, node.getTotalCapability());\n    updateRootQueueMetrics();\n\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterCapacity);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-183. Clean up fair scheduler code. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/12 4:38 AM",
      "commitName": "933a6d2c1ec8d3b373674e3e74eb472863fc464d",
      "commitAuthor": "Thomas White",
      "commitDateOld": "26/10/12 1:55 PM",
      "commitNameOld": "b54e794fb059fa68b115c2ca5e58f11a0d7f3985",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 13.65,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n   private synchronized void addNode(RMNode node) {\n-    this.nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n+    nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n     Resources.addTo(clusterCapacity, node.getTotalCapability());\n \n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterCapacity);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n    Resources.addTo(clusterCapacity, node.getTotalCapability());\n\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterCapacity);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    this.nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n    Resources.addTo(clusterCapacity, node.getTotalCapability());\n\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterCapacity);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/07/12 5:43 PM",
      "commitNameOld": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 4.04,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n   private synchronized void addNode(RMNode node) {\n-    this.nodes.put(node.getNodeID(), new SchedulerNode(node));\n+    this.nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n     Resources.addTo(clusterCapacity, node.getTotalCapability());\n \n     LOG.info(\"Added node \" + node.getNodeAddress() +\n         \" cluster capacity: \" + clusterCapacity);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    this.nodes.put(node.getNodeID(), new FSSchedulerNode(node));\n    Resources.addTo(clusterCapacity, node.getTotalCapability());\n\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterCapacity);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3451. Port Fair Scheduler to MR2 (pwendell via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361020 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 5:43 PM",
      "commitName": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,7 @@\n+  private synchronized void addNode(RMNode node) {\n+    this.nodes.put(node.getNodeID(), new SchedulerNode(node));\n+    Resources.addTo(clusterCapacity, node.getTotalCapability());\n+\n+    LOG.info(\"Added node \" + node.getNodeAddress() +\n+        \" cluster capacity: \" + clusterCapacity);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addNode(RMNode node) {\n    this.nodes.put(node.getNodeID(), new SchedulerNode(node));\n    Resources.addTo(clusterCapacity, node.getTotalCapability());\n\n    LOG.info(\"Added node \" + node.getNodeAddress() +\n        \" cluster capacity: \" + clusterCapacity);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}