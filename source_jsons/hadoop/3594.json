{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSInputStream.java",
  "functionName": "readBuffer",
  "functionId": "readBuffer___reader-ReaderStrategy__len-int__corruptedBlocks-CorruptedBlocks",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
  "functionStartLine": 809,
  "functionEndLine": 859,
  "numCommitsSeen": 175,
  "timeTaken": 9393,
  "changeHistory": [
    "b3119b9ab60a19d624db476c4e1c53410870c7a6",
    "793447f79924c97c2b562d5e41fa85adf19673fe",
    "8808779db351fe444388d4acb3094766b5980718",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "45ea53f9388e6bff1ac0aa3989a1dad56a611fd3",
    "4ed1fc58c0683bbcd5c4c211ea162ed37bf7dc4f",
    "be7dd8333a7e56e732171db0781786987de03195",
    "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b3119b9ab60a19d624db476c4e1c53410870c7a6": "Ybodychange",
    "793447f79924c97c2b562d5e41fa85adf19673fe": "Ymultichange(Yparameterchange,Ybodychange)",
    "8808779db351fe444388d4acb3094766b5980718": "Ymultichange(Yparameterchange,Ybodychange)",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "45ea53f9388e6bff1ac0aa3989a1dad56a611fd3": "Ybodychange",
    "4ed1fc58c0683bbcd5c4c211ea162ed37bf7dc4f": "Ybodychange",
    "be7dd8333a7e56e732171db0781786987de03195": "Ybodychange",
    "f55a1c08763e5f865fd9193d640c89a06ab49c4a": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3119b9ab60a19d624db476c4e1c53410870c7a6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14648. Implement DeadNodeDetector basic model. Contributed by Lisheng Sun.\n",
      "commitDate": "15/11/19 7:32 PM",
      "commitName": "b3119b9ab60a19d624db476c4e1c53410870c7a6",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "06/11/19 5:58 AM",
      "commitNameOld": "c36014165c212b26d75268ee3659aa2cadcff349",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 9.57,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   private synchronized int readBuffer(ReaderStrategy reader, int len,\n                                       CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     IOException ioe;\n \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n         return reader.readFromBlock(blockReader, len);\n       } catch (ChecksumException ce) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode\n             + \" at \" + ce.getPos());\n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n       } catch (IOException e) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */\n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n-        addToDeadNodes(currentNode);\n+        addToLocalDeadNodes(currentNode);\n+        dfsClient.addNodeToDeadNodeDetector(this, currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int len,\n                                      CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    IOException ioe;\n\n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.readFromBlock(blockReader, len);\n      } catch (ChecksumException ce) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());\n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n      } catch (IOException e) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */\n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToLocalDeadNodes(currentNode);\n        dfsClient.addNodeToDeadNodeDetector(this, currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "793447f79924c97c2b562d5e41fa85adf19673fe": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8905. Refactor DFSInputStream#ReaderStrategy. Contributed by Kai Zheng and Sammi Chen\n",
      "commitDate": "24/08/16 6:57 AM",
      "commitName": "793447f79924c97c2b562d5e41fa85adf19673fe",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8905. Refactor DFSInputStream#ReaderStrategy. Contributed by Kai Zheng and Sammi Chen\n",
          "commitDate": "24/08/16 6:57 AM",
          "commitName": "793447f79924c97c2b562d5e41fa85adf19673fe",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "08/06/16 10:52 PM",
          "commitNameOld": "8ea9bbce2614e8eb499af73589f021ed1789e78f",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 76.34,
          "commitsBetweenForRepo": 637,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n+  private synchronized int readBuffer(ReaderStrategy reader, int len,\n                                       CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     IOException ioe;\n \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n-        return reader.doRead(blockReader, off, len);\n+        return reader.readFromBlock(blockReader, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode\n             + \" at \" + ce.getPos());\n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */\n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int len,\n                                      CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    IOException ioe;\n\n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.readFromBlock(blockReader, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());\n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */\n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[reader-ReaderStrategy, off-int, len-int, corruptedBlocks-CorruptedBlocks]",
            "newValue": "[reader-ReaderStrategy, len-int, corruptedBlocks-CorruptedBlocks]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8905. Refactor DFSInputStream#ReaderStrategy. Contributed by Kai Zheng and Sammi Chen\n",
          "commitDate": "24/08/16 6:57 AM",
          "commitName": "793447f79924c97c2b562d5e41fa85adf19673fe",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "08/06/16 10:52 PM",
          "commitNameOld": "8ea9bbce2614e8eb499af73589f021ed1789e78f",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 76.34,
          "commitsBetweenForRepo": 637,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n+  private synchronized int readBuffer(ReaderStrategy reader, int len,\n                                       CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     IOException ioe;\n \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n-        return reader.doRead(blockReader, off, len);\n+        return reader.readFromBlock(blockReader, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode\n             + \" at \" + ce.getPos());\n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */\n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int len,\n                                      CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    IOException ioe;\n\n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.readFromBlock(blockReader, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());\n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */\n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "8808779db351fe444388d4acb3094766b5980718": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
      "commitDate": "25/02/16 9:55 AM",
      "commitName": "8808779db351fe444388d4acb3094766b5980718",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "22/01/16 9:46 AM",
          "commitNameOld": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 34.01,
          "commitsBetweenForRepo": 234,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,50 @@\n   private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n-      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n+                                      CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     IOException ioe;\n \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n         return reader.doRead(blockReader, off, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode\n             + \" at \" + ce.getPos());\n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n-        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n-            corruptedBlockMap);\n+        corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */\n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n                                      CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    IOException ioe;\n\n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());\n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */\n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[reader-ReaderStrategy, off-int, len-int, corruptedBlockMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]",
            "newValue": "[reader-ReaderStrategy, off-int, len-int, corruptedBlocks-CorruptedBlocks]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "22/01/16 9:46 AM",
          "commitNameOld": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 34.01,
          "commitsBetweenForRepo": 234,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,50 @@\n   private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n-      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n+                                      CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     IOException ioe;\n \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n         return reader.doRead(blockReader, off, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode\n             + \" at \" + ce.getPos());\n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n-        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n-            corruptedBlockMap);\n+        corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */\n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n                                      CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    IOException ioe;\n\n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());\n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        corruptedBlocks.addCorruptedBlock(getCurrentBlock(), currentNode);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */\n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n       Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n       throws IOException {\n     IOException ioe;\n-    \n+\n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n         return reader.doRead(blockReader, off, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode\n-            + \" at \" + ce.getPos());        \n+            + \" at \" + ce.getPos());\n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n             corruptedBlockMap);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n-      boolean sourceFound \u003d false;\n+      boolean sourceFound;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n-         */ \n+         */\n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n\n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());\n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */\n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "45ea53f9388e6bff1ac0aa3989a1dad56a611fd3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7698. Fix locking on HDFS read statistics and add a method for clearing them. (Colin P. McCabe via yliu)\n",
      "commitDate": "05/02/15 7:56 AM",
      "commitName": "45ea53f9388e6bff1ac0aa3989a1dad56a611fd3",
      "commitAuthor": "yliu",
      "commitDateOld": "30/01/15 4:01 PM",
      "commitNameOld": "09ad9a868a89922e9b55b3e7c5b9f41fa54d3770",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 5.66,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n       Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n       throws IOException {\n     IOException ioe;\n     \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n-        return reader.doRead(blockReader, off, len, readStatistics);\n+        return reader.doRead(blockReader, off, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode\n             + \" at \" + ce.getPos());        \n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n             corruptedBlockMap);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound \u003d false;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */ \n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "4ed1fc58c0683bbcd5c4c211ea162ed37bf7dc4f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4698. Provide client-side metrics for remote reads, local reads, and short-circuit reads. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481121 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/13 10:58 AM",
      "commitName": "4ed1fc58c0683bbcd5c4c211ea162ed37bf7dc4f",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "09/05/13 5:03 PM",
      "commitNameOld": "a18fd620d070cf8e84aaf80d93807ac9ee207a0f",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n       Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n       throws IOException {\n     IOException ioe;\n     \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n-        return reader.doRead(blockReader, off, len);\n+        return reader.doRead(blockReader, off, len, readStatistics);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode\n             + \" at \" + ce.getPos());        \n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n             corruptedBlockMap);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound \u003d false;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */ \n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len, readStatistics);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "be7dd8333a7e56e732171db0781786987de03195": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3144. Refactor DatanodeID#getName by use. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/12 3:12 PM",
      "commitName": "be7dd8333a7e56e732171db0781786987de03195",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "21/03/12 10:30 AM",
      "commitNameOld": "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 11.2,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n       Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n       throws IOException {\n     IOException ioe;\n     \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n         return reader.doRead(blockReader, off, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n-            + getCurrentBlock() + \" from \" + currentNode.getName()\n+            + getCurrentBlock() + \" from \" + currentNode\n             + \" at \" + ce.getPos());        \n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n             corruptedBlockMap);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound \u003d false;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */ \n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "f55a1c08763e5f865fd9193d640c89a06ab49c4a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2834. Add a ByteBuffer-based read API to DFSInputStream. Contributed by Henry Robinson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/12 10:30 AM",
      "commitName": "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2834. Add a ByteBuffer-based read API to DFSInputStream. Contributed by Henry Robinson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/03/12 10:30 AM",
          "commitName": "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "15/03/12 1:26 PM",
          "commitNameOld": "6d96a28a088a7ad465f0fbbb94d5ecd1947f7ffc",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 5.88,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  private synchronized int readBuffer(byte buf[], int off, int len,\n+  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n       Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n       throws IOException {\n     IOException ioe;\n     \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n-        return blockReader.read(buf, off, len);\n+        return reader.doRead(blockReader, off, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode.getName()\n             + \" at \" + ce.getPos());        \n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n             corruptedBlockMap);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound \u003d false;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */ \n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode.getName()\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[buf-byte[], off-int, len-int, corruptedBlockMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]",
            "newValue": "[reader-ReaderStrategy, off-int, len-int, corruptedBlockMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2834. Add a ByteBuffer-based read API to DFSInputStream. Contributed by Henry Robinson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/03/12 10:30 AM",
          "commitName": "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "15/03/12 1:26 PM",
          "commitNameOld": "6d96a28a088a7ad465f0fbbb94d5ecd1947f7ffc",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 5.88,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  private synchronized int readBuffer(byte buf[], int off, int len,\n+  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n       Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n       throws IOException {\n     IOException ioe;\n     \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n-        return blockReader.read(buf, off, len);\n+        return reader.doRead(blockReader, off, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode.getName()\n             + \" at \" + ce.getPos());        \n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n             corruptedBlockMap);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n               + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound \u003d false;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */ \n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized int readBuffer(ReaderStrategy reader, int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return reader.doRead(blockReader, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode.getName()\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized int readBuffer(byte buf[], int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return blockReader.read(buf, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode.getName()\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized int readBuffer(byte buf[], int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return blockReader.read(buf, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode.getName()\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1977. Stop using StringUtils.stringifyException(). Contributed by Bharath Mundlapudi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1145834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/11 6:11 PM",
      "commitName": "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "08/07/11 1:13 PM",
      "commitNameOld": "6ec9b178c664796b44eab6c41f7216577d380f7c",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.21,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private synchronized int readBuffer(byte buf[], int off, int len,\n       Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n       throws IOException {\n     IOException ioe;\n     \n     /* we retry current node only once. So this is set to true only here.\n      * Intention is to handle one common case of an error that is not a\n      * failure on datanode or client : when DataNode closes the connection\n      * since client is idle. If there are other cases of \"non-errors\" then\n      * then a datanode might be retried by setting this to true again.\n      */\n     boolean retryCurrentNode \u003d true;\n \n     while (true) {\n       // retry as many times as seekToNewSource allows.\n       try {\n         return blockReader.read(buf, off, len);\n       } catch ( ChecksumException ce ) {\n         DFSClient.LOG.warn(\"Found Checksum error for \"\n             + getCurrentBlock() + \" from \" + currentNode.getName()\n             + \" at \" + ce.getPos());        \n         ioe \u003d ce;\n         retryCurrentNode \u003d false;\n         // we want to remember which block replicas we have tried\n         addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n             corruptedBlockMap);\n       } catch ( IOException e ) {\n         if (!retryCurrentNode) {\n           DFSClient.LOG.warn(\"Exception while reading from \"\n               + getCurrentBlock() + \" of \" + src + \" from \"\n-              + currentNode + \": \" + StringUtils.stringifyException(e));\n+              + currentNode, e);\n         }\n         ioe \u003d e;\n       }\n       boolean sourceFound \u003d false;\n       if (retryCurrentNode) {\n         /* possibly retry the same node so that transient errors don\u0027t\n          * result in application level failures (e.g. Datanode could have\n          * closed the connection because the client is idle for too long).\n          */ \n         sourceFound \u003d seekToBlockSource(pos);\n       } else {\n         addToDeadNodes(currentNode);\n         sourceFound \u003d seekToNewSource(pos);\n       }\n       if (!sourceFound) {\n         throw ioe;\n       }\n       retryCurrentNode \u003d false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized int readBuffer(byte buf[], int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return blockReader.read(buf, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode.getName()\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode, e);\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,51 @@\n+  private synchronized int readBuffer(byte buf[], int off, int len,\n+      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n+      throws IOException {\n+    IOException ioe;\n+    \n+    /* we retry current node only once. So this is set to true only here.\n+     * Intention is to handle one common case of an error that is not a\n+     * failure on datanode or client : when DataNode closes the connection\n+     * since client is idle. If there are other cases of \"non-errors\" then\n+     * then a datanode might be retried by setting this to true again.\n+     */\n+    boolean retryCurrentNode \u003d true;\n+\n+    while (true) {\n+      // retry as many times as seekToNewSource allows.\n+      try {\n+        return blockReader.read(buf, off, len);\n+      } catch ( ChecksumException ce ) {\n+        DFSClient.LOG.warn(\"Found Checksum error for \"\n+            + getCurrentBlock() + \" from \" + currentNode.getName()\n+            + \" at \" + ce.getPos());        \n+        ioe \u003d ce;\n+        retryCurrentNode \u003d false;\n+        // we want to remember which block replicas we have tried\n+        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n+            corruptedBlockMap);\n+      } catch ( IOException e ) {\n+        if (!retryCurrentNode) {\n+          DFSClient.LOG.warn(\"Exception while reading from \"\n+              + getCurrentBlock() + \" of \" + src + \" from \"\n+              + currentNode + \": \" + StringUtils.stringifyException(e));\n+        }\n+        ioe \u003d e;\n+      }\n+      boolean sourceFound \u003d false;\n+      if (retryCurrentNode) {\n+        /* possibly retry the same node so that transient errors don\u0027t\n+         * result in application level failures (e.g. Datanode could have\n+         * closed the connection because the client is idle for too long).\n+         */ \n+        sourceFound \u003d seekToBlockSource(pos);\n+      } else {\n+        addToDeadNodes(currentNode);\n+        sourceFound \u003d seekToNewSource(pos);\n+      }\n+      if (!sourceFound) {\n+        throw ioe;\n+      }\n+      retryCurrentNode \u003d false;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized int readBuffer(byte buf[], int off, int len,\n      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n      throws IOException {\n    IOException ioe;\n    \n    /* we retry current node only once. So this is set to true only here.\n     * Intention is to handle one common case of an error that is not a\n     * failure on datanode or client : when DataNode closes the connection\n     * since client is idle. If there are other cases of \"non-errors\" then\n     * then a datanode might be retried by setting this to true again.\n     */\n    boolean retryCurrentNode \u003d true;\n\n    while (true) {\n      // retry as many times as seekToNewSource allows.\n      try {\n        return blockReader.read(buf, off, len);\n      } catch ( ChecksumException ce ) {\n        DFSClient.LOG.warn(\"Found Checksum error for \"\n            + getCurrentBlock() + \" from \" + currentNode.getName()\n            + \" at \" + ce.getPos());        \n        ioe \u003d ce;\n        retryCurrentNode \u003d false;\n        // we want to remember which block replicas we have tried\n        addIntoCorruptedBlockMap(getCurrentBlock(), currentNode,\n            corruptedBlockMap);\n      } catch ( IOException e ) {\n        if (!retryCurrentNode) {\n          DFSClient.LOG.warn(\"Exception while reading from \"\n              + getCurrentBlock() + \" of \" + src + \" from \"\n              + currentNode + \": \" + StringUtils.stringifyException(e));\n        }\n        ioe \u003d e;\n      }\n      boolean sourceFound \u003d false;\n      if (retryCurrentNode) {\n        /* possibly retry the same node so that transient errors don\u0027t\n         * result in application level failures (e.g. Datanode could have\n         * closed the connection because the client is idle for too long).\n         */ \n        sourceFound \u003d seekToBlockSource(pos);\n      } else {\n        addToDeadNodes(currentNode);\n        sourceFound \u003d seekToNewSource(pos);\n      }\n      if (!sourceFound) {\n        throw ioe;\n      }\n      retryCurrentNode \u003d false;\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java"
    }
  }
}