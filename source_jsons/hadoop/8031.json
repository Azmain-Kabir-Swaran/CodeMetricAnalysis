{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "INodeAttributeProvider.java",
  "functionName": "getPathElements",
  "functionId": "getPathElements___path-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java",
  "functionStartLine": 421,
  "functionEndLine": 446,
  "numCommitsSeen": 6,
  "timeTaken": 1307,
  "changeHistory": [
    "53a28afe293e5bf185c8d4f2c7aea212e66015c2"
  ],
  "changeHistoryShort": {
    "53a28afe293e5bf185c8d4f2c7aea212e66015c2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "53a28afe293e5bf185c8d4f2c7aea212e66015c2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6826. Plugin interface to enable delegation of HDFS authorization assertions. Contributed by Arun Suresh.\n",
      "commitDate": "24/03/15 4:02 PM",
      "commitName": "53a28afe293e5bf185c8d4f2c7aea212e66015c2",
      "commitAuthor": "Jitendra Pandey",
      "diff": "@@ -0,0 +1,26 @@\n+  String[] getPathElements(String path) {\n+    path \u003d path.trim();\n+    if (path.charAt(0) !\u003d Path.SEPARATOR_CHAR) {\n+      throw new IllegalArgumentException(\"It must be an absolute path: \" +\n+          path);\n+    }\n+    int numOfElements \u003d StringUtils.countMatches(path, Path.SEPARATOR);\n+    if (path.length() \u003e 1 \u0026\u0026 path.endsWith(Path.SEPARATOR)) {\n+      numOfElements--;\n+    }\n+    String[] pathElements \u003d new String[numOfElements];\n+    int elementIdx \u003d 0;\n+    int idx \u003d 0;\n+    int found \u003d path.indexOf(Path.SEPARATOR_CHAR, idx);\n+    while (found \u003e -1) {\n+      if (found \u003e idx) {\n+        pathElements[elementIdx++] \u003d path.substring(idx, found);\n+      }\n+      idx \u003d found + 1;\n+      found \u003d path.indexOf(Path.SEPARATOR_CHAR, idx);\n+    }\n+    if (idx \u003c path.length()) {\n+      pathElements[elementIdx] \u003d path.substring(idx);\n+    }\n+    return pathElements;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  String[] getPathElements(String path) {\n    path \u003d path.trim();\n    if (path.charAt(0) !\u003d Path.SEPARATOR_CHAR) {\n      throw new IllegalArgumentException(\"It must be an absolute path: \" +\n          path);\n    }\n    int numOfElements \u003d StringUtils.countMatches(path, Path.SEPARATOR);\n    if (path.length() \u003e 1 \u0026\u0026 path.endsWith(Path.SEPARATOR)) {\n      numOfElements--;\n    }\n    String[] pathElements \u003d new String[numOfElements];\n    int elementIdx \u003d 0;\n    int idx \u003d 0;\n    int found \u003d path.indexOf(Path.SEPARATOR_CHAR, idx);\n    while (found \u003e -1) {\n      if (found \u003e idx) {\n        pathElements[elementIdx++] \u003d path.substring(idx, found);\n      }\n      idx \u003d found + 1;\n      found \u003d path.indexOf(Path.SEPARATOR_CHAR, idx);\n    }\n    if (idx \u003c path.length()) {\n      pathElements[elementIdx] \u003d path.substring(idx);\n    }\n    return pathElements;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributeProvider.java"
    }
  }
}