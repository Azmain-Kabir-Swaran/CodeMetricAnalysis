{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "toString",
  "functionId": "toString",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 216,
  "functionEndLine": 234,
  "numCommitsSeen": 11,
  "timeTaken": 695,
  "changeHistory": [
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168"
  ],
  "changeHistoryShort": {
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1709. In-memory data structures used to track resources over time to enable reservations.\n(cherry picked from commit 0d8b2cd88b958b1e602fd4ea4078ef8d4742a7c3)\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "cf4b34282aafee9f6b09d3433c4de1ae4b359168",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,19 @@\n+  public String toString() {\n+    StringBuilder ret \u003d new StringBuilder();\n+    readLock.lock();\n+    try {\n+      if (cumulativeCapacity.size() \u003e THRESHOLD) {\n+        ret.append(\"Number of steps: \").append(cumulativeCapacity.size())\n+            .append(\" earliest entry: \").append(cumulativeCapacity.firstKey())\n+            .append(\" latest entry: \").append(cumulativeCapacity.lastKey());\n+      } else {\n+        for (Map.Entry\u003cLong, Resource\u003e r : cumulativeCapacity.entrySet()) {\n+          ret.append(r.getKey()).append(\": \").append(r.getValue())\n+              .append(\"\\n \");\n+        }\n+      }\n+      return ret.toString();\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    StringBuilder ret \u003d new StringBuilder();\n    readLock.lock();\n    try {\n      if (cumulativeCapacity.size() \u003e THRESHOLD) {\n        ret.append(\"Number of steps: \").append(cumulativeCapacity.size())\n            .append(\" earliest entry: \").append(cumulativeCapacity.firstKey())\n            .append(\" latest entry: \").append(cumulativeCapacity.lastKey());\n      } else {\n        for (Map.Entry\u003cLong, Resource\u003e r : cumulativeCapacity.entrySet()) {\n          ret.append(r.getKey()).append(\": \").append(r.getValue())\n              .append(\"\\n \");\n        }\n      }\n      return ret.toString();\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}