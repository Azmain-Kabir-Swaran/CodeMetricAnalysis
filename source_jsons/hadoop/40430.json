{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalityAppPlacementAllocator.java",
  "functionName": "updatePendingAsk",
  "functionId": "updatePendingAsk___requests-Collection__ResourceRequest____recoverPreemptedRequestForAContainer-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java",
  "functionStartLine": 157,
  "functionEndLine": 207,
  "numCommitsSeen": 12,
  "timeTaken": 2165,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "a957f1c60e1308d1d70a1803381994f59949c5f8"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "a957f1c60e1308d1d70a1803381994f59949c5f8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public PendingAskUpdateResult updatePendingAsk(\n       Collection\u003cResourceRequest\u003e requests,\n       boolean recoverPreemptedRequestForAContainer) {\n-    try {\n-      this.writeLock.lock();\n \n+    this.writeLock.lock();\n+    try {\n       PendingAskUpdateResult updateResult \u003d null;\n \n       // Update resource requests\n       for (ResourceRequest request : requests) {\n         String resourceName \u003d request.getResourceName();\n \n         // Update node labels if required\n         updateNodeLabels(request);\n \n         // Increment number of containers if recovering preempted resources\n         ResourceRequest lastRequest \u003d resourceRequestMap.get(resourceName);\n         if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n           request.setNumContainers(lastRequest.getNumContainers() + 1);\n         }\n \n         // Update asks\n         resourceRequestMap.put(resourceName, request);\n \n         if (resourceName.equals(ResourceRequest.ANY)) {\n           String partition \u003d request.getNodeLabelExpression() \u003d\u003d null ?\n               RMNodeLabelsManager.NO_LABEL :\n               request.getNodeLabelExpression();\n \n           this.primaryRequestedPartition \u003d partition;\n \n           //update the applications requested labels set\n           appSchedulingInfo.addRequestedPartition(partition);\n \n           PendingAsk lastPendingAsk \u003d\n               lastRequest \u003d\u003d null ? null : new PendingAsk(\n                   lastRequest.getCapability(), lastRequest.getNumContainers());\n           String lastRequestedNodePartition \u003d\n               lastRequest \u003d\u003d null ? null : lastRequest.getNodeLabelExpression();\n \n           updateResult \u003d new PendingAskUpdateResult(lastPendingAsk,\n               new PendingAsk(request.getCapability(),\n                   request.getNumContainers()), lastRequestedNodePartition,\n               request.getNodeLabelExpression());\n         }\n       }\n       return updateResult;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public PendingAskUpdateResult updatePendingAsk(\n      Collection\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n\n    this.writeLock.lock();\n    try {\n      PendingAskUpdateResult updateResult \u003d null;\n\n      // Update resource requests\n      for (ResourceRequest request : requests) {\n        String resourceName \u003d request.getResourceName();\n\n        // Update node labels if required\n        updateNodeLabels(request);\n\n        // Increment number of containers if recovering preempted resources\n        ResourceRequest lastRequest \u003d resourceRequestMap.get(resourceName);\n        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n          request.setNumContainers(lastRequest.getNumContainers() + 1);\n        }\n\n        // Update asks\n        resourceRequestMap.put(resourceName, request);\n\n        if (resourceName.equals(ResourceRequest.ANY)) {\n          String partition \u003d request.getNodeLabelExpression() \u003d\u003d null ?\n              RMNodeLabelsManager.NO_LABEL :\n              request.getNodeLabelExpression();\n\n          this.primaryRequestedPartition \u003d partition;\n\n          //update the applications requested labels set\n          appSchedulingInfo.addRequestedPartition(partition);\n\n          PendingAsk lastPendingAsk \u003d\n              lastRequest \u003d\u003d null ? null : new PendingAsk(\n                  lastRequest.getCapability(), lastRequest.getNumContainers());\n          String lastRequestedNodePartition \u003d\n              lastRequest \u003d\u003d null ? null : lastRequest.getNodeLabelExpression();\n\n          updateResult \u003d new PendingAskUpdateResult(lastPendingAsk,\n              new PendingAsk(request.getCapability(),\n                  request.getNumContainers()), lastRequestedNodePartition,\n              request.getNodeLabelExpression());\n        }\n      }\n      return updateResult;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java",
      "extendedDetails": {}
    },
    "a957f1c60e1308d1d70a1803381994f59949c5f8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
      "commitDate": "05/12/17 9:20 AM",
      "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,51 @@\n+  public PendingAskUpdateResult updatePendingAsk(\n+      Collection\u003cResourceRequest\u003e requests,\n+      boolean recoverPreemptedRequestForAContainer) {\n+    try {\n+      this.writeLock.lock();\n+\n+      PendingAskUpdateResult updateResult \u003d null;\n+\n+      // Update resource requests\n+      for (ResourceRequest request : requests) {\n+        String resourceName \u003d request.getResourceName();\n+\n+        // Update node labels if required\n+        updateNodeLabels(request);\n+\n+        // Increment number of containers if recovering preempted resources\n+        ResourceRequest lastRequest \u003d resourceRequestMap.get(resourceName);\n+        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n+          request.setNumContainers(lastRequest.getNumContainers() + 1);\n+        }\n+\n+        // Update asks\n+        resourceRequestMap.put(resourceName, request);\n+\n+        if (resourceName.equals(ResourceRequest.ANY)) {\n+          String partition \u003d request.getNodeLabelExpression() \u003d\u003d null ?\n+              RMNodeLabelsManager.NO_LABEL :\n+              request.getNodeLabelExpression();\n+\n+          this.primaryRequestedPartition \u003d partition;\n+\n+          //update the applications requested labels set\n+          appSchedulingInfo.addRequestedPartition(partition);\n+\n+          PendingAsk lastPendingAsk \u003d\n+              lastRequest \u003d\u003d null ? null : new PendingAsk(\n+                  lastRequest.getCapability(), lastRequest.getNumContainers());\n+          String lastRequestedNodePartition \u003d\n+              lastRequest \u003d\u003d null ? null : lastRequest.getNodeLabelExpression();\n+\n+          updateResult \u003d new PendingAskUpdateResult(lastPendingAsk,\n+              new PendingAsk(request.getCapability(),\n+                  request.getNumContainers()), lastRequestedNodePartition,\n+              request.getNodeLabelExpression());\n+        }\n+      }\n+      return updateResult;\n+    } finally {\n+      this.writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public PendingAskUpdateResult updatePendingAsk(\n      Collection\u003cResourceRequest\u003e requests,\n      boolean recoverPreemptedRequestForAContainer) {\n    try {\n      this.writeLock.lock();\n\n      PendingAskUpdateResult updateResult \u003d null;\n\n      // Update resource requests\n      for (ResourceRequest request : requests) {\n        String resourceName \u003d request.getResourceName();\n\n        // Update node labels if required\n        updateNodeLabels(request);\n\n        // Increment number of containers if recovering preempted resources\n        ResourceRequest lastRequest \u003d resourceRequestMap.get(resourceName);\n        if (recoverPreemptedRequestForAContainer \u0026\u0026 lastRequest !\u003d null) {\n          request.setNumContainers(lastRequest.getNumContainers() + 1);\n        }\n\n        // Update asks\n        resourceRequestMap.put(resourceName, request);\n\n        if (resourceName.equals(ResourceRequest.ANY)) {\n          String partition \u003d request.getNodeLabelExpression() \u003d\u003d null ?\n              RMNodeLabelsManager.NO_LABEL :\n              request.getNodeLabelExpression();\n\n          this.primaryRequestedPartition \u003d partition;\n\n          //update the applications requested labels set\n          appSchedulingInfo.addRequestedPartition(partition);\n\n          PendingAsk lastPendingAsk \u003d\n              lastRequest \u003d\u003d null ? null : new PendingAsk(\n                  lastRequest.getCapability(), lastRequest.getNumContainers());\n          String lastRequestedNodePartition \u003d\n              lastRequest \u003d\u003d null ? null : lastRequest.getNodeLabelExpression();\n\n          updateResult \u003d new PendingAskUpdateResult(lastPendingAsk,\n              new PendingAsk(request.getCapability(),\n                  request.getNumContainers()), lastRequestedNodePartition,\n              request.getNodeLabelExpression());\n        }\n      }\n      return updateResult;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java"
    }
  }
}