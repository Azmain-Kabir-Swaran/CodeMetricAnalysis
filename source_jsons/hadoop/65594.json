{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProgressiveRenameTracker.java",
  "functionName": "fileCopied",
  "functionId": "fileCopied___sourcePath-Path(modifiers-final)__sourceAttributes-S3ObjectAttributes(modifiers-final)__destAttributes-S3ObjectAttributes(modifiers-final)__destPath-Path(modifiers-final)__blockSize-long(modifiers-final)__addAncestors-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/ProgressiveRenameTracker.java",
  "functionStartLine": 108,
  "functionEndLine": 160,
  "numCommitsSeen": 4,
  "timeTaken": 1787,
  "changeHistory": [
    "c58e11bf521d746842ce16724211a2a0339d7b61",
    "e02eb24e0a9139418120027b694492e0738df20a"
  ],
  "changeHistoryShort": {
    "c58e11bf521d746842ce16724211a2a0339d7b61": "Ybodychange",
    "e02eb24e0a9139418120027b694492e0738df20a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c58e11bf521d746842ce16724211a2a0339d7b61": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
      "commitDate": "17/07/19 7:24 AM",
      "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "20/06/19 1:56 AM",
      "commitNameOld": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 27.23,
      "commitsBetweenForRepo": 235,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,53 @@\n   public void fileCopied(\n       final Path sourcePath,\n       final S3ObjectAttributes sourceAttributes,\n       final S3ObjectAttributes destAttributes,\n       final Path destPath,\n       final long blockSize,\n       final boolean addAncestors) throws IOException {\n \n     // build the list of entries to add in a synchronized block.\n     final List\u003cPathMetadata\u003e entriesToAdd \u003d new ArrayList\u003c\u003e(1);\n     LOG.debug(\"Updating store with copied file {}\", sourcePath);\n     MetadataStore store \u003d getMetadataStore();\n     synchronized (this) {\n       checkArgument(!pathsToDelete.contains(sourcePath),\n           \"File being renamed is already processed %s\", destPath);\n       // create the file metadata and update the lists\n       // the pathsToDelete field is incremented with the new source path,\n       // for deletion after the DELETE operation succeeds;\n       // the entriesToAdd variable is filled in with all entries\n       // to add within this method\n       S3Guard.addMoveFile(\n           store,\n           pathsToDelete,\n           entriesToAdd,\n           sourcePath,\n           destPath,\n           sourceAttributes.getLen(),\n           blockSize,\n           getOwner(),\n           destAttributes.getETag(),\n           destAttributes.getVersionId());\n       LOG.debug(\"New metastore entry : {}\", entriesToAdd.get(0));\n       if (addAncestors) {\n         // add all new ancestors to the lists\n         addMoveAncestors(\n             store,\n             pathsToDelete,\n             entriesToAdd,\n             getSourceRoot(),\n             sourcePath,\n             destPath,\n             getOwner());\n       }\n     }\n \n     // outside the lock, the entriesToAdd variable has all the new entries to\n     // create. ...so update the store.\n     // no entries are deleted at this point.\n     try (DurationInfo ignored \u003d new DurationInfo(LOG, false,\n         \"Adding new metastore entries\")) {\n-      store.move(null, entriesToAdd,\n-          getStoreContext().getTimeProvider(),\n-          getOperationState());\n+      store.move(null, entriesToAdd, getOperationState());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void fileCopied(\n      final Path sourcePath,\n      final S3ObjectAttributes sourceAttributes,\n      final S3ObjectAttributes destAttributes,\n      final Path destPath,\n      final long blockSize,\n      final boolean addAncestors) throws IOException {\n\n    // build the list of entries to add in a synchronized block.\n    final List\u003cPathMetadata\u003e entriesToAdd \u003d new ArrayList\u003c\u003e(1);\n    LOG.debug(\"Updating store with copied file {}\", sourcePath);\n    MetadataStore store \u003d getMetadataStore();\n    synchronized (this) {\n      checkArgument(!pathsToDelete.contains(sourcePath),\n          \"File being renamed is already processed %s\", destPath);\n      // create the file metadata and update the lists\n      // the pathsToDelete field is incremented with the new source path,\n      // for deletion after the DELETE operation succeeds;\n      // the entriesToAdd variable is filled in with all entries\n      // to add within this method\n      S3Guard.addMoveFile(\n          store,\n          pathsToDelete,\n          entriesToAdd,\n          sourcePath,\n          destPath,\n          sourceAttributes.getLen(),\n          blockSize,\n          getOwner(),\n          destAttributes.getETag(),\n          destAttributes.getVersionId());\n      LOG.debug(\"New metastore entry : {}\", entriesToAdd.get(0));\n      if (addAncestors) {\n        // add all new ancestors to the lists\n        addMoveAncestors(\n            store,\n            pathsToDelete,\n            entriesToAdd,\n            getSourceRoot(),\n            sourcePath,\n            destPath,\n            getOwner());\n      }\n    }\n\n    // outside the lock, the entriesToAdd variable has all the new entries to\n    // create. ...so update the store.\n    // no entries are deleted at this point.\n    try (DurationInfo ignored \u003d new DurationInfo(LOG, false,\n        \"Adding new metastore entries\")) {\n      store.move(null, entriesToAdd, getOperationState());\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/ProgressiveRenameTracker.java",
      "extendedDetails": {}
    },
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,55 @@\n+  public void fileCopied(\n+      final Path sourcePath,\n+      final S3ObjectAttributes sourceAttributes,\n+      final S3ObjectAttributes destAttributes,\n+      final Path destPath,\n+      final long blockSize,\n+      final boolean addAncestors) throws IOException {\n+\n+    // build the list of entries to add in a synchronized block.\n+    final List\u003cPathMetadata\u003e entriesToAdd \u003d new ArrayList\u003c\u003e(1);\n+    LOG.debug(\"Updating store with copied file {}\", sourcePath);\n+    MetadataStore store \u003d getMetadataStore();\n+    synchronized (this) {\n+      checkArgument(!pathsToDelete.contains(sourcePath),\n+          \"File being renamed is already processed %s\", destPath);\n+      // create the file metadata and update the lists\n+      // the pathsToDelete field is incremented with the new source path,\n+      // for deletion after the DELETE operation succeeds;\n+      // the entriesToAdd variable is filled in with all entries\n+      // to add within this method\n+      S3Guard.addMoveFile(\n+          store,\n+          pathsToDelete,\n+          entriesToAdd,\n+          sourcePath,\n+          destPath,\n+          sourceAttributes.getLen(),\n+          blockSize,\n+          getOwner(),\n+          destAttributes.getETag(),\n+          destAttributes.getVersionId());\n+      LOG.debug(\"New metastore entry : {}\", entriesToAdd.get(0));\n+      if (addAncestors) {\n+        // add all new ancestors to the lists\n+        addMoveAncestors(\n+            store,\n+            pathsToDelete,\n+            entriesToAdd,\n+            getSourceRoot(),\n+            sourcePath,\n+            destPath,\n+            getOwner());\n+      }\n+    }\n+\n+    // outside the lock, the entriesToAdd variable has all the new entries to\n+    // create. ...so update the store.\n+    // no entries are deleted at this point.\n+    try (DurationInfo ignored \u003d new DurationInfo(LOG, false,\n+        \"Adding new metastore entries\")) {\n+      store.move(null, entriesToAdd,\n+          getStoreContext().getTimeProvider(),\n+          getOperationState());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void fileCopied(\n      final Path sourcePath,\n      final S3ObjectAttributes sourceAttributes,\n      final S3ObjectAttributes destAttributes,\n      final Path destPath,\n      final long blockSize,\n      final boolean addAncestors) throws IOException {\n\n    // build the list of entries to add in a synchronized block.\n    final List\u003cPathMetadata\u003e entriesToAdd \u003d new ArrayList\u003c\u003e(1);\n    LOG.debug(\"Updating store with copied file {}\", sourcePath);\n    MetadataStore store \u003d getMetadataStore();\n    synchronized (this) {\n      checkArgument(!pathsToDelete.contains(sourcePath),\n          \"File being renamed is already processed %s\", destPath);\n      // create the file metadata and update the lists\n      // the pathsToDelete field is incremented with the new source path,\n      // for deletion after the DELETE operation succeeds;\n      // the entriesToAdd variable is filled in with all entries\n      // to add within this method\n      S3Guard.addMoveFile(\n          store,\n          pathsToDelete,\n          entriesToAdd,\n          sourcePath,\n          destPath,\n          sourceAttributes.getLen(),\n          blockSize,\n          getOwner(),\n          destAttributes.getETag(),\n          destAttributes.getVersionId());\n      LOG.debug(\"New metastore entry : {}\", entriesToAdd.get(0));\n      if (addAncestors) {\n        // add all new ancestors to the lists\n        addMoveAncestors(\n            store,\n            pathsToDelete,\n            entriesToAdd,\n            getSourceRoot(),\n            sourcePath,\n            destPath,\n            getOwner());\n      }\n    }\n\n    // outside the lock, the entriesToAdd variable has all the new entries to\n    // create. ...so update the store.\n    // no entries are deleted at this point.\n    try (DurationInfo ignored \u003d new DurationInfo(LOG, false,\n        \"Adding new metastore entries\")) {\n      store.move(null, entriesToAdd,\n          getStoreContext().getTimeProvider(),\n          getOperationState());\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/ProgressiveRenameTracker.java"
    }
  }
}