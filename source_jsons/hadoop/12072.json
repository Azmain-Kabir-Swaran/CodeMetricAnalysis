{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MemoryMappableBlockLoader.java",
  "functionName": "load",
  "functionId": "load___length-long__blockIn-FileInputStream__metaIn-FileInputStream__blockFileName-String__key-ExtendedBlockId",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MemoryMappableBlockLoader.java",
  "functionStartLine": 71,
  "functionEndLine": 95,
  "numCommitsSeen": 15,
  "timeTaken": 5064,
  "changeHistory": [
    "35ff31dd9462cf4fb4ebf5556ee8ae6bcd7c5c3a",
    "ba50a36a3ead628c3d44d384f7ed4d2b3a55dd07",
    "5c48f379ab359ea7a7c2421df998080f3792a1d9",
    "efea68dc3538de9aafae206d64903506e41fc9e1",
    "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65",
    "97199baea1c41a66bd2a88bda31742ef6ddcb5dc"
  ],
  "changeHistoryShort": {
    "35ff31dd9462cf4fb4ebf5556ee8ae6bcd7c5c3a": "Ymodifierchange",
    "ba50a36a3ead628c3d44d384f7ed4d2b3a55dd07": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "5c48f379ab359ea7a7c2421df998080f3792a1d9": "Ybodychange",
    "efea68dc3538de9aafae206d64903506e41fc9e1": "Ybodychange",
    "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65": "Ybodychange",
    "97199baea1c41a66bd2a88bda31742ef6ddcb5dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "35ff31dd9462cf4fb4ebf5556ee8ae6bcd7c5c3a": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-14355 : Implement HDFS cache on SCM by using pure java mapped byte buffer. Contributed by Feilong He.\n",
      "commitDate": "30/03/19 11:33 PM",
      "commitName": "35ff31dd9462cf4fb4ebf5556ee8ae6bcd7c5c3a",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "28/03/19 11:48 AM",
      "commitNameOld": "f3f51284d57ef2e0c7e968b6eea56eab578f7e93",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 2.49,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  public MappableBlock load(long length, FileInputStream blockIn,\n+  MappableBlock load(long length, FileInputStream blockIn,\n                             FileInputStream metaIn, String blockFileName,\n                             ExtendedBlockId key)\n       throws IOException {\n     MemoryMappedBlock mappableBlock \u003d null;\n     MappedByteBuffer mmap \u003d null;\n     FileChannel blockChannel \u003d null;\n     try {\n       blockChannel \u003d blockIn.getChannel();\n       if (blockChannel \u003d\u003d null) {\n         throw new IOException(\"Block InputStream has no FileChannel.\");\n       }\n       mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n       NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n       verifyChecksum(length, metaIn, blockChannel, blockFileName);\n       mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n     } finally {\n       IOUtils.closeQuietly(blockChannel);\n       if (mappableBlock \u003d\u003d null) {\n         if (mmap !\u003d null) {\n           NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n         }\n       }\n     }\n     return mappableBlock;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  MappableBlock load(long length, FileInputStream blockIn,\n                            FileInputStream metaIn, String blockFileName,\n                            ExtendedBlockId key)\n      throws IOException {\n    MemoryMappedBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    FileChannel blockChannel \u003d null;\n    try {\n      blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n      NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n    } finally {\n      IOUtils.closeQuietly(blockChannel);\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MemoryMappableBlockLoader.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[]"
      }
    },
    "ba50a36a3ead628c3d44d384f7ed4d2b3a55dd07": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-14354: Refactor MappableBlock to align with the implementation of SCM cache. Contributed by Feilong He.\n",
      "commitDate": "14/03/19 10:21 PM",
      "commitName": "ba50a36a3ead628c3d44d384f7ed4d2b3a55dd07",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-14354: Refactor MappableBlock to align with the implementation of SCM cache. Contributed by Feilong He.\n",
          "commitDate": "14/03/19 10:21 PM",
          "commitName": "ba50a36a3ead628c3d44d384f7ed4d2b3a55dd07",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "14/03/19 9:16 PM",
          "commitNameOld": "90015084850298803d8e165a0f6f9719ba724ea3",
          "commitAuthorOld": "Vivek Ratnavel Subramanian",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n-  public static MappableBlock load(long length,\n-      FileInputStream blockIn, FileInputStream metaIn,\n-      String blockFileName) throws IOException {\n-    MappableBlock mappableBlock \u003d null;\n+  public MappableBlock load(long length, FileInputStream blockIn,\n+                            FileInputStream metaIn, String blockFileName,\n+                            ExtendedBlockId key)\n+      throws IOException {\n+    MemoryMappedBlock mappableBlock \u003d null;\n     MappedByteBuffer mmap \u003d null;\n     FileChannel blockChannel \u003d null;\n     try {\n       blockChannel \u003d blockIn.getChannel();\n       if (blockChannel \u003d\u003d null) {\n         throw new IOException(\"Block InputStream has no FileChannel.\");\n       }\n-      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n+      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n       NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n       verifyChecksum(length, metaIn, blockChannel, blockFileName);\n-      mappableBlock \u003d new MappableBlock(mmap, length);\n+      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n     } finally {\n       IOUtils.closeQuietly(blockChannel);\n       if (mappableBlock \u003d\u003d null) {\n         if (mmap !\u003d null) {\n           NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n         }\n       }\n     }\n     return mappableBlock;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public MappableBlock load(long length, FileInputStream blockIn,\n                            FileInputStream metaIn, String blockFileName,\n                            ExtendedBlockId key)\n      throws IOException {\n    MemoryMappedBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    FileChannel blockChannel \u003d null;\n    try {\n      blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n      NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n    } finally {\n      IOUtils.closeQuietly(blockChannel);\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MemoryMappableBlockLoader.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MappableBlock.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MemoryMappableBlockLoader.java",
            "oldMethodName": "load",
            "newMethodName": "load"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-14354: Refactor MappableBlock to align with the implementation of SCM cache. Contributed by Feilong He.\n",
          "commitDate": "14/03/19 10:21 PM",
          "commitName": "ba50a36a3ead628c3d44d384f7ed4d2b3a55dd07",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "14/03/19 9:16 PM",
          "commitNameOld": "90015084850298803d8e165a0f6f9719ba724ea3",
          "commitAuthorOld": "Vivek Ratnavel Subramanian",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n-  public static MappableBlock load(long length,\n-      FileInputStream blockIn, FileInputStream metaIn,\n-      String blockFileName) throws IOException {\n-    MappableBlock mappableBlock \u003d null;\n+  public MappableBlock load(long length, FileInputStream blockIn,\n+                            FileInputStream metaIn, String blockFileName,\n+                            ExtendedBlockId key)\n+      throws IOException {\n+    MemoryMappedBlock mappableBlock \u003d null;\n     MappedByteBuffer mmap \u003d null;\n     FileChannel blockChannel \u003d null;\n     try {\n       blockChannel \u003d blockIn.getChannel();\n       if (blockChannel \u003d\u003d null) {\n         throw new IOException(\"Block InputStream has no FileChannel.\");\n       }\n-      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n+      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n       NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n       verifyChecksum(length, metaIn, blockChannel, blockFileName);\n-      mappableBlock \u003d new MappableBlock(mmap, length);\n+      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n     } finally {\n       IOUtils.closeQuietly(blockChannel);\n       if (mappableBlock \u003d\u003d null) {\n         if (mmap !\u003d null) {\n           NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n         }\n       }\n     }\n     return mappableBlock;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public MappableBlock load(long length, FileInputStream blockIn,\n                            FileInputStream metaIn, String blockFileName,\n                            ExtendedBlockId key)\n      throws IOException {\n    MemoryMappedBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    FileChannel blockChannel \u003d null;\n    try {\n      blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n      NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n    } finally {\n      IOUtils.closeQuietly(blockChannel);\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MemoryMappableBlockLoader.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14354: Refactor MappableBlock to align with the implementation of SCM cache. Contributed by Feilong He.\n",
          "commitDate": "14/03/19 10:21 PM",
          "commitName": "ba50a36a3ead628c3d44d384f7ed4d2b3a55dd07",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "14/03/19 9:16 PM",
          "commitNameOld": "90015084850298803d8e165a0f6f9719ba724ea3",
          "commitAuthorOld": "Vivek Ratnavel Subramanian",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n-  public static MappableBlock load(long length,\n-      FileInputStream blockIn, FileInputStream metaIn,\n-      String blockFileName) throws IOException {\n-    MappableBlock mappableBlock \u003d null;\n+  public MappableBlock load(long length, FileInputStream blockIn,\n+                            FileInputStream metaIn, String blockFileName,\n+                            ExtendedBlockId key)\n+      throws IOException {\n+    MemoryMappedBlock mappableBlock \u003d null;\n     MappedByteBuffer mmap \u003d null;\n     FileChannel blockChannel \u003d null;\n     try {\n       blockChannel \u003d blockIn.getChannel();\n       if (blockChannel \u003d\u003d null) {\n         throw new IOException(\"Block InputStream has no FileChannel.\");\n       }\n-      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n+      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n       NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n       verifyChecksum(length, metaIn, blockChannel, blockFileName);\n-      mappableBlock \u003d new MappableBlock(mmap, length);\n+      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n     } finally {\n       IOUtils.closeQuietly(blockChannel);\n       if (mappableBlock \u003d\u003d null) {\n         if (mmap !\u003d null) {\n           NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n         }\n       }\n     }\n     return mappableBlock;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public MappableBlock load(long length, FileInputStream blockIn,\n                            FileInputStream metaIn, String blockFileName,\n                            ExtendedBlockId key)\n      throws IOException {\n    MemoryMappedBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    FileChannel blockChannel \u003d null;\n    try {\n      blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n      NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n    } finally {\n      IOUtils.closeQuietly(blockChannel);\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MemoryMappableBlockLoader.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14354: Refactor MappableBlock to align with the implementation of SCM cache. Contributed by Feilong He.\n",
          "commitDate": "14/03/19 10:21 PM",
          "commitName": "ba50a36a3ead628c3d44d384f7ed4d2b3a55dd07",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "14/03/19 9:16 PM",
          "commitNameOld": "90015084850298803d8e165a0f6f9719ba724ea3",
          "commitAuthorOld": "Vivek Ratnavel Subramanian",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n-  public static MappableBlock load(long length,\n-      FileInputStream blockIn, FileInputStream metaIn,\n-      String blockFileName) throws IOException {\n-    MappableBlock mappableBlock \u003d null;\n+  public MappableBlock load(long length, FileInputStream blockIn,\n+                            FileInputStream metaIn, String blockFileName,\n+                            ExtendedBlockId key)\n+      throws IOException {\n+    MemoryMappedBlock mappableBlock \u003d null;\n     MappedByteBuffer mmap \u003d null;\n     FileChannel blockChannel \u003d null;\n     try {\n       blockChannel \u003d blockIn.getChannel();\n       if (blockChannel \u003d\u003d null) {\n         throw new IOException(\"Block InputStream has no FileChannel.\");\n       }\n-      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n+      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n       NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n       verifyChecksum(length, metaIn, blockChannel, blockFileName);\n-      mappableBlock \u003d new MappableBlock(mmap, length);\n+      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n     } finally {\n       IOUtils.closeQuietly(blockChannel);\n       if (mappableBlock \u003d\u003d null) {\n         if (mmap !\u003d null) {\n           NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n         }\n       }\n     }\n     return mappableBlock;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public MappableBlock load(long length, FileInputStream blockIn,\n                            FileInputStream metaIn, String blockFileName,\n                            ExtendedBlockId key)\n      throws IOException {\n    MemoryMappedBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    FileChannel blockChannel \u003d null;\n    try {\n      blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(FileChannel.MapMode.READ_ONLY, 0, length);\n      NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MemoryMappedBlock(mmap, length);\n    } finally {\n      IOUtils.closeQuietly(blockChannel);\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MemoryMappableBlockLoader.java",
          "extendedDetails": {
            "oldValue": "[length-long, blockIn-FileInputStream, metaIn-FileInputStream, blockFileName-String]",
            "newValue": "[length-long, blockIn-FileInputStream, metaIn-FileInputStream, blockFileName-String, key-ExtendedBlockId]"
          }
        }
      ]
    },
    "5c48f379ab359ea7a7c2421df998080f3792a1d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6208. DataNode caching can leak file descriptors. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586154 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/14 2:45 PM",
      "commitName": "5c48f379ab359ea7a7c2421df998080f3792a1d9",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "19/11/13 4:48 PM",
      "commitNameOld": "efea68dc3538de9aafae206d64903506e41fc9e1",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 140.87,
      "commitsBetweenForRepo": 990,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   public static MappableBlock load(long length,\n       FileInputStream blockIn, FileInputStream metaIn,\n       String blockFileName) throws IOException {\n     MappableBlock mappableBlock \u003d null;\n     MappedByteBuffer mmap \u003d null;\n+    FileChannel blockChannel \u003d null;\n     try {\n-      FileChannel blockChannel \u003d blockIn.getChannel();\n+      blockChannel \u003d blockIn.getChannel();\n       if (blockChannel \u003d\u003d null) {\n         throw new IOException(\"Block InputStream has no FileChannel.\");\n       }\n       mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n       NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n       verifyChecksum(length, metaIn, blockChannel, blockFileName);\n       mappableBlock \u003d new MappableBlock(mmap, length);\n     } finally {\n+      IOUtils.closeQuietly(blockChannel);\n       if (mappableBlock \u003d\u003d null) {\n         if (mmap !\u003d null) {\n           NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n         }\n       }\n     }\n     return mappableBlock;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static MappableBlock load(long length,\n      FileInputStream blockIn, FileInputStream metaIn,\n      String blockFileName) throws IOException {\n    MappableBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    FileChannel blockChannel \u003d null;\n    try {\n      blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n      NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MappableBlock(mmap, length);\n    } finally {\n      IOUtils.closeQuietly(blockChannel);\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MappableBlock.java",
      "extendedDetails": {}
    },
    "efea68dc3538de9aafae206d64903506e41fc9e1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5511. improve CacheManipulator interface to allow better unit testing (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543676 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/11/13 4:48 PM",
      "commitName": "efea68dc3538de9aafae206d64903506e41fc9e1",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "13/11/13 10:18 AM",
      "commitNameOld": "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 6.27,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public static MappableBlock load(long length,\n       FileInputStream blockIn, FileInputStream metaIn,\n       String blockFileName) throws IOException {\n     MappableBlock mappableBlock \u003d null;\n     MappedByteBuffer mmap \u003d null;\n     try {\n       FileChannel blockChannel \u003d blockIn.getChannel();\n       if (blockChannel \u003d\u003d null) {\n         throw new IOException(\"Block InputStream has no FileChannel.\");\n       }\n       mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n-      NativeIO.POSIX.cacheManipulator.mlock(blockFileName, mmap, length);\n+      NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n       verifyChecksum(length, metaIn, blockChannel, blockFileName);\n       mappableBlock \u003d new MappableBlock(mmap, length);\n     } finally {\n       if (mappableBlock \u003d\u003d null) {\n         if (mmap !\u003d null) {\n           NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n         }\n       }\n     }\n     return mappableBlock;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static MappableBlock load(long length,\n      FileInputStream blockIn, FileInputStream metaIn,\n      String blockFileName) throws IOException {\n    MappableBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    try {\n      FileChannel blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n      NativeIO.POSIX.getCacheManipulator().mlock(blockFileName, mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MappableBlock(mmap, length);\n    } finally {\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MappableBlock.java",
      "extendedDetails": {}
    },
    "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5366. recaching improvements (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541647 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/11/13 10:18 AM",
      "commitName": "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "07/11/13 7:00 PM",
      "commitNameOld": "97199baea1c41a66bd2a88bda31742ef6ddcb5dc",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 5.64,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public static MappableBlock load(long length,\n       FileInputStream blockIn, FileInputStream metaIn,\n       String blockFileName) throws IOException {\n     MappableBlock mappableBlock \u003d null;\n     MappedByteBuffer mmap \u003d null;\n     try {\n       FileChannel blockChannel \u003d blockIn.getChannel();\n       if (blockChannel \u003d\u003d null) {\n         throw new IOException(\"Block InputStream has no FileChannel.\");\n       }\n       mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n-      mlocker.mlock(mmap, length);\n+      NativeIO.POSIX.cacheManipulator.mlock(blockFileName, mmap, length);\n       verifyChecksum(length, metaIn, blockChannel, blockFileName);\n       mappableBlock \u003d new MappableBlock(mmap, length);\n     } finally {\n       if (mappableBlock \u003d\u003d null) {\n         if (mmap !\u003d null) {\n           NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n         }\n       }\n     }\n     return mappableBlock;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static MappableBlock load(long length,\n      FileInputStream blockIn, FileInputStream metaIn,\n      String blockFileName) throws IOException {\n    MappableBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    try {\n      FileChannel blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n      NativeIO.POSIX.cacheManipulator.mlock(blockFileName, mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MappableBlock(mmap, length);\n    } finally {\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MappableBlock.java",
      "extendedDetails": {}
    },
    "97199baea1c41a66bd2a88bda31742ef6ddcb5dc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5394: Fix race conditions in DN caching and uncaching (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 7:00 PM",
      "commitName": "97199baea1c41a66bd2a88bda31742ef6ddcb5dc",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,23 @@\n+  public static MappableBlock load(long length,\n+      FileInputStream blockIn, FileInputStream metaIn,\n+      String blockFileName) throws IOException {\n+    MappableBlock mappableBlock \u003d null;\n+    MappedByteBuffer mmap \u003d null;\n+    try {\n+      FileChannel blockChannel \u003d blockIn.getChannel();\n+      if (blockChannel \u003d\u003d null) {\n+        throw new IOException(\"Block InputStream has no FileChannel.\");\n+      }\n+      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n+      mlocker.mlock(mmap, length);\n+      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n+      mappableBlock \u003d new MappableBlock(mmap, length);\n+    } finally {\n+      if (mappableBlock \u003d\u003d null) {\n+        if (mmap !\u003d null) {\n+          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n+        }\n+      }\n+    }\n+    return mappableBlock;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static MappableBlock load(long length,\n      FileInputStream blockIn, FileInputStream metaIn,\n      String blockFileName) throws IOException {\n    MappableBlock mappableBlock \u003d null;\n    MappedByteBuffer mmap \u003d null;\n    try {\n      FileChannel blockChannel \u003d blockIn.getChannel();\n      if (blockChannel \u003d\u003d null) {\n        throw new IOException(\"Block InputStream has no FileChannel.\");\n      }\n      mmap \u003d blockChannel.map(MapMode.READ_ONLY, 0, length);\n      mlocker.mlock(mmap, length);\n      verifyChecksum(length, metaIn, blockChannel, blockFileName);\n      mappableBlock \u003d new MappableBlock(mmap, length);\n    } finally {\n      if (mappableBlock \u003d\u003d null) {\n        if (mmap !\u003d null) {\n          NativeIO.POSIX.munmap(mmap); // unmapping also unlocks\n        }\n      }\n    }\n    return mappableBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/MappableBlock.java"
    }
  }
}