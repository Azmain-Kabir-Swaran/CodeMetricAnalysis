{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleExponentialSmoothing.java",
  "functionName": "incorporateReading",
  "functionId": "incorporateReading___timeStamp-long(modifiers-final)__currRawData-double(modifiers-final)",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/forecast/SimpleExponentialSmoothing.java",
  "functionStartLine": 151,
  "functionEndLine": 166,
  "numCommitsSeen": 4,
  "timeTaken": 2786,
  "changeHistory": [
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
    "ed302f1fed6d124d682486d24dae958946dba9be"
  ],
  "changeHistoryShort": {
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "ed302f1fed6d124d682486d24dae958946dba9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
      "commitDate": "08/01/20 9:08 AM",
      "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
      "commitAuthor": "Ahmed Hussein",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
          "commitDate": "08/01/20 9:08 AM",
          "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
          "commitAuthor": "Ahmed Hussein",
          "commitDateOld": "05/11/19 12:55 PM",
          "commitNameOld": "ed302f1fed6d124d682486d24dae958946dba9be",
          "commitAuthorOld": "Ahmed Hussein",
          "daysBetweenCommits": 63.84,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public void incorporateReading(long timeStamp, double rawData) {\n+  public void incorporateReading(final long timeStamp,\n+      final double currRawData) {\n     ForecastRecord oldRec \u003d forecastRefEntry.get();\n     if (oldRec \u003d\u003d null) {\n       double oldForecast \u003d\n-          processRawData(0, startTime, rawData, timeStamp);\n+          processRawData(0, startTime, currRawData, timeStamp);\n       forecastRefEntry.compareAndSet(null,\n           new ForecastRecord(oldForecast, 0.0, startTime));\n-      incorporateReading(timeStamp, rawData);\n+      incorporateReading(timeStamp, currRawData);\n       return;\n     }\n     while (!forecastRefEntry.compareAndSet(oldRec, oldRec.append(timeStamp,\n-        rawData))) {\n+        currRawData))) {\n       oldRec \u003d forecastRefEntry.get();\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void incorporateReading(final long timeStamp,\n      final double currRawData) {\n    ForecastRecord oldRec \u003d forecastRefEntry.get();\n    if (oldRec \u003d\u003d null) {\n      double oldForecast \u003d\n          processRawData(0, startTime, currRawData, timeStamp);\n      forecastRefEntry.compareAndSet(null,\n          new ForecastRecord(oldForecast, 0.0, startTime));\n      incorporateReading(timeStamp, currRawData);\n      return;\n    }\n    while (!forecastRefEntry.compareAndSet(oldRec, oldRec.append(timeStamp,\n        currRawData))) {\n      oldRec \u003d forecastRefEntry.get();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/forecast/SimpleExponentialSmoothing.java",
          "extendedDetails": {
            "oldValue": "[timeStamp-long, rawData-double]",
            "newValue": "[timeStamp-long(modifiers-final), currRawData-double(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
          "commitDate": "08/01/20 9:08 AM",
          "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
          "commitAuthor": "Ahmed Hussein",
          "commitDateOld": "05/11/19 12:55 PM",
          "commitNameOld": "ed302f1fed6d124d682486d24dae958946dba9be",
          "commitAuthorOld": "Ahmed Hussein",
          "daysBetweenCommits": 63.84,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public void incorporateReading(long timeStamp, double rawData) {\n+  public void incorporateReading(final long timeStamp,\n+      final double currRawData) {\n     ForecastRecord oldRec \u003d forecastRefEntry.get();\n     if (oldRec \u003d\u003d null) {\n       double oldForecast \u003d\n-          processRawData(0, startTime, rawData, timeStamp);\n+          processRawData(0, startTime, currRawData, timeStamp);\n       forecastRefEntry.compareAndSet(null,\n           new ForecastRecord(oldForecast, 0.0, startTime));\n-      incorporateReading(timeStamp, rawData);\n+      incorporateReading(timeStamp, currRawData);\n       return;\n     }\n     while (!forecastRefEntry.compareAndSet(oldRec, oldRec.append(timeStamp,\n-        rawData))) {\n+        currRawData))) {\n       oldRec \u003d forecastRefEntry.get();\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void incorporateReading(final long timeStamp,\n      final double currRawData) {\n    ForecastRecord oldRec \u003d forecastRefEntry.get();\n    if (oldRec \u003d\u003d null) {\n      double oldForecast \u003d\n          processRawData(0, startTime, currRawData, timeStamp);\n      forecastRefEntry.compareAndSet(null,\n          new ForecastRecord(oldForecast, 0.0, startTime));\n      incorporateReading(timeStamp, currRawData);\n      return;\n    }\n    while (!forecastRefEntry.compareAndSet(oldRec, oldRec.append(timeStamp,\n        currRawData))) {\n      oldRec \u003d forecastRefEntry.get();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/forecast/SimpleExponentialSmoothing.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
          "commitDate": "08/01/20 9:08 AM",
          "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
          "commitAuthor": "Ahmed Hussein",
          "commitDateOld": "05/11/19 12:55 PM",
          "commitNameOld": "ed302f1fed6d124d682486d24dae958946dba9be",
          "commitAuthorOld": "Ahmed Hussein",
          "daysBetweenCommits": 63.84,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public void incorporateReading(long timeStamp, double rawData) {\n+  public void incorporateReading(final long timeStamp,\n+      final double currRawData) {\n     ForecastRecord oldRec \u003d forecastRefEntry.get();\n     if (oldRec \u003d\u003d null) {\n       double oldForecast \u003d\n-          processRawData(0, startTime, rawData, timeStamp);\n+          processRawData(0, startTime, currRawData, timeStamp);\n       forecastRefEntry.compareAndSet(null,\n           new ForecastRecord(oldForecast, 0.0, startTime));\n-      incorporateReading(timeStamp, rawData);\n+      incorporateReading(timeStamp, currRawData);\n       return;\n     }\n     while (!forecastRefEntry.compareAndSet(oldRec, oldRec.append(timeStamp,\n-        rawData))) {\n+        currRawData))) {\n       oldRec \u003d forecastRefEntry.get();\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void incorporateReading(final long timeStamp,\n      final double currRawData) {\n    ForecastRecord oldRec \u003d forecastRefEntry.get();\n    if (oldRec \u003d\u003d null) {\n      double oldForecast \u003d\n          processRawData(0, startTime, currRawData, timeStamp);\n      forecastRefEntry.compareAndSet(null,\n          new ForecastRecord(oldForecast, 0.0, startTime));\n      incorporateReading(timeStamp, currRawData);\n      return;\n    }\n    while (!forecastRefEntry.compareAndSet(oldRec, oldRec.append(timeStamp,\n        currRawData))) {\n      oldRec \u003d forecastRefEntry.get();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/forecast/SimpleExponentialSmoothing.java",
          "extendedDetails": {
            "oldValue": "[timeStamp-long, rawData-double]",
            "newValue": "[timeStamp-long(modifiers-final), currRawData-double(modifiers-final)]"
          }
        }
      ]
    },
    "ed302f1fed6d124d682486d24dae958946dba9be": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-7208. Tuning TaskRuntimeEstimator. (Ahmed Hussein via jeagles)\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
      "commitDate": "05/11/19 12:55 PM",
      "commitName": "ed302f1fed6d124d682486d24dae958946dba9be",
      "commitAuthor": "Ahmed Hussein",
      "diff": "@@ -0,0 +1,16 @@\n+  public void incorporateReading(long timeStamp, double rawData) {\n+    ForecastRecord oldRec \u003d forecastRefEntry.get();\n+    if (oldRec \u003d\u003d null) {\n+      double oldForecast \u003d\n+          processRawData(0, startTime, rawData, timeStamp);\n+      forecastRefEntry.compareAndSet(null,\n+          new ForecastRecord(oldForecast, 0.0, startTime));\n+      incorporateReading(timeStamp, rawData);\n+      return;\n+    }\n+    while (!forecastRefEntry.compareAndSet(oldRec, oldRec.append(timeStamp,\n+        rawData))) {\n+      oldRec \u003d forecastRefEntry.get();\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void incorporateReading(long timeStamp, double rawData) {\n    ForecastRecord oldRec \u003d forecastRefEntry.get();\n    if (oldRec \u003d\u003d null) {\n      double oldForecast \u003d\n          processRawData(0, startTime, rawData, timeStamp);\n      forecastRefEntry.compareAndSet(null,\n          new ForecastRecord(oldForecast, 0.0, startTime));\n      incorporateReading(timeStamp, rawData);\n      return;\n    }\n    while (!forecastRefEntry.compareAndSet(oldRec, oldRec.append(timeStamp,\n        rawData))) {\n      oldRec \u003d forecastRefEntry.get();\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/forecast/SimpleExponentialSmoothing.java"
    }
  }
}