{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppAttemptImpl.java",
  "functionName": "recoverAppAttemptCredentials",
  "functionId": "recoverAppAttemptCredentials___appAttemptTokens-Credentials__state-RMAppAttemptState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
  "functionStartLine": 1018,
  "functionEndLine": 1037,
  "numCommitsSeen": 258,
  "timeTaken": 5889,
  "changeHistory": [
    "18297e09727e4af95140084760ae1267e8fe51c4",
    "e76faebc9589654e83c8244ef9aff88391e56b80",
    "b2cd2698028118b6384904732dbf94942f644732",
    "eeb4acd955802e2a84ea94cecf2e2341b83d5efb",
    "f4951e07087c99ab6d57ff5efdd962432ac641ab",
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
    "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
    "32bc200d54928d39acdc837c2c77b4c443fb46be",
    "5d1b453b8591d87ffb564857015c26c99fb7437c",
    "7d0c43d7cff6d250613a04fea9449f139988e901",
    "74231f027607ff1a6fe7d72fad28108826963cf3"
  ],
  "changeHistoryShort": {
    "18297e09727e4af95140084760ae1267e8fe51c4": "Ybodychange",
    "e76faebc9589654e83c8244ef9aff88391e56b80": "Yexceptionschange",
    "b2cd2698028118b6384904732dbf94942f644732": "Ybodychange",
    "eeb4acd955802e2a84ea94cecf2e2341b83d5efb": "Ymultichange(Yparameterchange,Ybodychange)",
    "f4951e07087c99ab6d57ff5efdd962432ac641ab": "Ymultichange(Yexceptionschange,Ybodychange)",
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732": "Ymultichange(Yrename,Ybodychange)",
    "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6": "Ybodychange",
    "32bc200d54928d39acdc837c2c77b4c443fb46be": "Ybodychange",
    "5d1b453b8591d87ffb564857015c26c99fb7437c": "Ybodychange",
    "7d0c43d7cff6d250613a04fea9449f139988e901": "Ybodychange",
    "74231f027607ff1a6fe7d72fad28108826963cf3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "18297e09727e4af95140084760ae1267e8fe51c4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3104. Fixed RM to not generate new AMRM tokens on every heartbeat between rolling and activation. Contributed by Jason Lowe\n",
      "commitDate": "12/02/15 4:02 PM",
      "commitName": "18297e09727e4af95140084760ae1267e8fe51c4",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/02/15 9:19 PM",
      "commitNameOld": "65c69e296edad48e50ef36e47803625ea46b51e1",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n   private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n       RMAppAttemptState state) {\n     if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n         || state \u003d\u003d RMAppAttemptState.FINISHED\n         || state \u003d\u003d RMAppAttemptState.KILLED) {\n       return;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n           RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n       if (clientTokenMasterKeyBytes !\u003d null) {\n         clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n             .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n       }\n     }\n \n-    this.amrmToken \u003d\n-        rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n-          applicationAttemptId);\n+    setAMRMToken(rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n+        applicationAttemptId));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n      RMAppAttemptState state) {\n    if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n        || state \u003d\u003d RMAppAttemptState.FINISHED\n        || state \u003d\u003d RMAppAttemptState.KILLED) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      if (clientTokenMasterKeyBytes !\u003d null) {\n        clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n            .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n      }\n    }\n\n    setAMRMToken(rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n        applicationAttemptId));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "e76faebc9589654e83c8244ef9aff88391e56b80": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-2834. Fixed ResourceManager to ignore token-renewal failures on recovery consistent with the (somewhat incorrect) behaviour in the non-recovery case. Contributed by Jian He.\n",
      "commitDate": "09/11/14 6:56 PM",
      "commitName": "e76faebc9589654e83c8244ef9aff88391e56b80",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/11/14 9:28 AM",
      "commitNameOld": "a5657182a7accebe08cd86e46b4cdeb163d4d1f2",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.39,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n-      RMAppAttemptState state) throws IOException {\n+      RMAppAttemptState state) {\n     if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n         || state \u003d\u003d RMAppAttemptState.FINISHED\n         || state \u003d\u003d RMAppAttemptState.KILLED) {\n       return;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n           RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n       if (clientTokenMasterKeyBytes !\u003d null) {\n         clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n             .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n       }\n     }\n \n     this.amrmToken \u003d\n         rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n           applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n      RMAppAttemptState state) {\n    if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n        || state \u003d\u003d RMAppAttemptState.FINISHED\n        || state \u003d\u003d RMAppAttemptState.KILLED) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      if (clientTokenMasterKeyBytes !\u003d null) {\n        clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n            .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n      }\n    }\n\n    this.amrmToken \u003d\n        rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n          applicationAttemptId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[]"
      }
    },
    "b2cd2698028118b6384904732dbf94942f644732": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2010. Handle app-recovery failures gracefully. (Jian He and Karthik Kambatla via kasha)\n",
      "commitDate": "04/11/14 5:45 PM",
      "commitName": "b2cd2698028118b6384904732dbf94942f644732",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "15/10/14 6:33 PM",
      "commitNameOld": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.01,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n       RMAppAttemptState state) throws IOException {\n     if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n         || state \u003d\u003d RMAppAttemptState.FINISHED\n         || state \u003d\u003d RMAppAttemptState.KILLED) {\n       return;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n           RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n-      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n-          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n+      if (clientTokenMasterKeyBytes !\u003d null) {\n+        clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n+            .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n+      }\n     }\n \n     this.amrmToken \u003d\n         rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n           applicationAttemptId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n      RMAppAttemptState state) throws IOException {\n    if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n        || state \u003d\u003d RMAppAttemptState.FINISHED\n        || state \u003d\u003d RMAppAttemptState.KILLED) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      if (clientTokenMasterKeyBytes !\u003d null) {\n        clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n            .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n      }\n    }\n\n    this.amrmToken \u003d\n        rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n          applicationAttemptId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "eeb4acd955802e2a84ea94cecf2e2341b83d5efb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2212: ApplicationMaster needs to find a way to update the AMRMToken periodically. Contributed by Xuan Gong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616892 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 2:38 PM",
      "commitName": "eeb4acd955802e2a84ea94cecf2e2341b83d5efb",
      "commitAuthor": "Xuan Gong",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2212: ApplicationMaster needs to find a way to update the AMRMToken periodically. Contributed by Xuan Gong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616892 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/14 2:38 PM",
          "commitName": "eeb4acd955802e2a84ea94cecf2e2341b83d5efb",
          "commitAuthor": "Xuan Gong",
          "commitDateOld": "06/08/14 5:06 PM",
          "commitNameOld": "8feddc4c840f32c1853bc3d982cc790a9c5f42f2",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,19 @@\n-  private void recoverAppAttemptCredentials(Credentials appAttemptTokens)\n-      throws IOException {\n-    if (appAttemptTokens \u003d\u003d null) {\n+  private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n+      RMAppAttemptState state) throws IOException {\n+    if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n+        || state \u003d\u003d RMAppAttemptState.FINISHED\n+        || state \u003d\u003d RMAppAttemptState.KILLED) {\n       return;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n           RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n       clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n           .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n     }\n \n-    // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n-    // use TokenSelector as service may change - think fail-over.\n     this.amrmToken \u003d\n-        (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n-          .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n-    rmContext.getAMRMTokenSecretManager().addPersistedPassword(this.amrmToken);\n+        rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n+          applicationAttemptId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n      RMAppAttemptState state) throws IOException {\n    if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n        || state \u003d\u003d RMAppAttemptState.FINISHED\n        || state \u003d\u003d RMAppAttemptState.KILLED) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n    }\n\n    this.amrmToken \u003d\n        rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n          applicationAttemptId);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
          "extendedDetails": {
            "oldValue": "[appAttemptTokens-Credentials]",
            "newValue": "[appAttemptTokens-Credentials, state-RMAppAttemptState]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2212: ApplicationMaster needs to find a way to update the AMRMToken periodically. Contributed by Xuan Gong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616892 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/14 2:38 PM",
          "commitName": "eeb4acd955802e2a84ea94cecf2e2341b83d5efb",
          "commitAuthor": "Xuan Gong",
          "commitDateOld": "06/08/14 5:06 PM",
          "commitNameOld": "8feddc4c840f32c1853bc3d982cc790a9c5f42f2",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,19 @@\n-  private void recoverAppAttemptCredentials(Credentials appAttemptTokens)\n-      throws IOException {\n-    if (appAttemptTokens \u003d\u003d null) {\n+  private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n+      RMAppAttemptState state) throws IOException {\n+    if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n+        || state \u003d\u003d RMAppAttemptState.FINISHED\n+        || state \u003d\u003d RMAppAttemptState.KILLED) {\n       return;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n           RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n       clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n           .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n     }\n \n-    // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n-    // use TokenSelector as service may change - think fail-over.\n     this.amrmToken \u003d\n-        (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n-          .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n-    rmContext.getAMRMTokenSecretManager().addPersistedPassword(this.amrmToken);\n+        rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n+          applicationAttemptId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens,\n      RMAppAttemptState state) throws IOException {\n    if (appAttemptTokens \u003d\u003d null || state \u003d\u003d RMAppAttemptState.FAILED\n        || state \u003d\u003d RMAppAttemptState.FINISHED\n        || state \u003d\u003d RMAppAttemptState.KILLED) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n    }\n\n    this.amrmToken \u003d\n        rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(\n          applicationAttemptId);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "f4951e07087c99ab6d57ff5efdd962432ac641ab": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-1116. Populate AMRMTokens back to AMRMTokenSecretManager after RM restarts (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523146 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/13 4:51 PM",
      "commitName": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-1116. Populate AMRMTokens back to AMRMTokenSecretManager after RM restarts (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523146 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/09/13 4:51 PM",
          "commitName": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "09/09/13 6:24 PM",
          "commitNameOld": "59b5490989fad4c8e80dd85c3419810cdc8332f7",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 3.94,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,20 @@\n-  private void recoverAppAttemptCredentials(Credentials appAttemptTokens) {\n+  private void recoverAppAttemptCredentials(Credentials appAttemptTokens)\n+      throws IOException {\n     if (appAttemptTokens \u003d\u003d null) {\n       return;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n           RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n       clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n           .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n     }\n \n     // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n     // use TokenSelector as service may change - think fail-over.\n     this.amrmToken \u003d\n         (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n           .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n-\n-    // For now, no need to populate tokens back to AMRMTokenSecretManager,\n-    // because running attempts are rebooted. Later in work-preserve restart,\n-    // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n-    // added to the secret manager\n+    rmContext.getAMRMTokenSecretManager().addPersistedPassword(this.amrmToken);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens)\n      throws IOException {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n    }\n\n    // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n    // use TokenSelector as service may change - think fail-over.\n    this.amrmToken \u003d\n        (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n          .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n    rmContext.getAMRMTokenSecretManager().addPersistedPassword(this.amrmToken);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1116. Populate AMRMTokens back to AMRMTokenSecretManager after RM restarts (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523146 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/09/13 4:51 PM",
          "commitName": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "09/09/13 6:24 PM",
          "commitNameOld": "59b5490989fad4c8e80dd85c3419810cdc8332f7",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 3.94,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,20 @@\n-  private void recoverAppAttemptCredentials(Credentials appAttemptTokens) {\n+  private void recoverAppAttemptCredentials(Credentials appAttemptTokens)\n+      throws IOException {\n     if (appAttemptTokens \u003d\u003d null) {\n       return;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n           RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n       clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n           .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n     }\n \n     // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n     // use TokenSelector as service may change - think fail-over.\n     this.amrmToken \u003d\n         (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n           .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n-\n-    // For now, no need to populate tokens back to AMRMTokenSecretManager,\n-    // because running attempts are rebooted. Later in work-preserve restart,\n-    // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n-    // added to the secret manager\n+    rmContext.getAMRMTokenSecretManager().addPersistedPassword(this.amrmToken);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens)\n      throws IOException {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n    }\n\n    // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n    // use TokenSelector as service may change - think fail-over.\n    this.amrmToken \u003d\n        (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n          .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n    rmContext.getAMRMTokenSecretManager().addPersistedPassword(this.amrmToken);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-707. Added user information also in the YARN ClientToken so that AMs can implement authorization based on incoming users. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/08/13 6:12 PM",
      "commitName": "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-707. Added user information also in the YARN ClientToken so that AMs can implement authorization based on incoming users. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518868 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/08/13 6:12 PM",
          "commitName": "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/08/13 6:15 PM",
          "commitNameOld": "c660339c093ee96e90e3b3778177a499e3b36404",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 6.0,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n-  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n+  private void recoverAppAttemptCredentials(Credentials appAttemptTokens) {\n     if (appAttemptTokens \u003d\u003d null) {\n       return;\n     }\n-    if (UserGroupInformation.isSecurityEnabled()) {\n \n-      ClientToAMTokenSelector clientToAMTokenSelector \u003d\n-          new ClientToAMTokenSelector();\n-      this.clientToAMToken \u003d\n-          clientToAMTokenSelector.selectToken(new Text(),\n-            appAttemptTokens.getAllTokens());\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n+          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n+      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n+          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n     }\n \n     // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n     // use TokenSelector as service may change - think fail-over.\n     this.amrmToken \u003d\n         (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n           .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n \n     // For now, no need to populate tokens back to AMRMTokenSecretManager,\n     // because running attempts are rebooted. Later in work-preserve restart,\n     // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n     // added to the secret manager\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens) {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n    }\n\n    // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n    // use TokenSelector as service may change - think fail-over.\n    this.amrmToken \u003d\n        (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n          .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n\n    // For now, no need to populate tokens back to AMRMTokenSecretManager,\n    // because running attempts are rebooted. Later in work-preserve restart,\n    // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n    // added to the secret manager\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
          "extendedDetails": {
            "oldValue": "recoverAppAttemptTokens",
            "newValue": "recoverAppAttemptCredentials"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-707. Added user information also in the YARN ClientToken so that AMs can implement authorization based on incoming users. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518868 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/08/13 6:12 PM",
          "commitName": "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/08/13 6:15 PM",
          "commitNameOld": "c660339c093ee96e90e3b3778177a499e3b36404",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 6.0,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n-  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n+  private void recoverAppAttemptCredentials(Credentials appAttemptTokens) {\n     if (appAttemptTokens \u003d\u003d null) {\n       return;\n     }\n-    if (UserGroupInformation.isSecurityEnabled()) {\n \n-      ClientToAMTokenSelector clientToAMTokenSelector \u003d\n-          new ClientToAMTokenSelector();\n-      this.clientToAMToken \u003d\n-          clientToAMTokenSelector.selectToken(new Text(),\n-            appAttemptTokens.getAllTokens());\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n+          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n+      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n+          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n     }\n \n     // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n     // use TokenSelector as service may change - think fail-over.\n     this.amrmToken \u003d\n         (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n           .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n \n     // For now, no need to populate tokens back to AMRMTokenSecretManager,\n     // because running attempts are rebooted. Later in work-preserve restart,\n     // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n     // added to the secret manager\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverAppAttemptCredentials(Credentials appAttemptTokens) {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      byte[] clientTokenMasterKeyBytes \u003d appAttemptTokens.getSecretKey(\n          RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME);\n      clientTokenMasterKey \u003d rmContext.getClientToAMTokenSecretManager()\n          .registerMasterKey(applicationAttemptId, clientTokenMasterKeyBytes);\n    }\n\n    // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n    // use TokenSelector as service may change - think fail-over.\n    this.amrmToken \u003d\n        (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n          .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n\n    // For now, no need to populate tokens back to AMRMTokenSecretManager,\n    // because running attempts are rebooted. Later in work-preserve restart,\n    // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n    // added to the secret manager\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-945. Removed setting of AMRMToken\u0027s service from ResourceManager and changed client libraries do it all the time and correctly. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508232 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 4:17 PM",
      "commitName": "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/07/13 12:03 PM",
      "commitNameOld": "32bc200d54928d39acdc837c2c77b4c443fb46be",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 11.18,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,24 @@\n   private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n     if (appAttemptTokens \u003d\u003d null) {\n       return;\n     }\n     if (UserGroupInformation.isSecurityEnabled()) {\n \n       ClientToAMTokenSelector clientToAMTokenSelector \u003d\n           new ClientToAMTokenSelector();\n       this.clientToAMToken \u003d\n           clientToAMTokenSelector.selectToken(new Text(),\n             appAttemptTokens.getAllTokens());\n     }\n \n-    InetSocketAddress serviceAddr \u003d\n-        conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n-    AMRMTokenSelector appTokenSelector \u003d new AMRMTokenSelector();\n+    // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n+    // use TokenSelector as service may change - think fail-over.\n     this.amrmToken \u003d\n-        appTokenSelector.selectToken(\n-          SecurityUtil.buildTokenService(serviceAddr),\n-          appAttemptTokens.getAllTokens());\n+        (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n+          .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n \n     // For now, no need to populate tokens back to AMRMTokenSecretManager,\n     // because running attempts are rebooted. Later in work-preserve restart,\n     // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n     // added to the secret manager\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n    if (UserGroupInformation.isSecurityEnabled()) {\n\n      ClientToAMTokenSelector clientToAMTokenSelector \u003d\n          new ClientToAMTokenSelector();\n      this.clientToAMToken \u003d\n          clientToAMTokenSelector.selectToken(new Text(),\n            appAttemptTokens.getAllTokens());\n    }\n\n    // Only one AMRMToken is stored per-attempt, so this should be fine. Can\u0027t\n    // use TokenSelector as service may change - think fail-over.\n    this.amrmToken \u003d\n        (Token\u003cAMRMTokenIdentifier\u003e) appAttemptTokens\n          .getToken(RMStateStore.AM_RM_TOKEN_SERVICE);\n\n    // For now, no need to populate tokens back to AMRMTokenSecretManager,\n    // because running attempts are rebooted. Later in work-preserve restart,\n    // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n    // added to the secret manager\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "32bc200d54928d39acdc837c2c77b4c443fb46be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-701. Use application tokens irrespective of secure or non-secure mode. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504604 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 12:03 PM",
      "commitName": "32bc200d54928d39acdc837c2c77b4c443fb46be",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/13 10:08 AM",
      "commitNameOld": "dfe70f6a03294ee1b42e0c72b732826e533de912",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.08,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n     if (appAttemptTokens \u003d\u003d null) {\n       return;\n     }\n     if (UserGroupInformation.isSecurityEnabled()) {\n \n       ClientToAMTokenSelector clientToAMTokenSelector \u003d\n           new ClientToAMTokenSelector();\n       this.clientToAMToken \u003d\n           clientToAMTokenSelector.selectToken(new Text(),\n             appAttemptTokens.getAllTokens());\n-\n-      InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n-            YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n-            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n-      AMRMTokenSelector appTokenSelector \u003d new AMRMTokenSelector();\n-      this.amrmToken \u003d\n-          appTokenSelector.selectToken(\n-            SecurityUtil.buildTokenService(serviceAddr),\n-            appAttemptTokens.getAllTokens());\n-\n-      // For now, no need to populate tokens back to\n-      // AMRMTokenSecretManager, because running attempts are rebooted\n-      // Later in work-preserve restart, we\u0027ll create NEW-\u003eRUNNING transition\n-      // in which the restored tokens will be added to the secret manager\n     }\n+\n+    InetSocketAddress serviceAddr \u003d\n+        conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n+    AMRMTokenSelector appTokenSelector \u003d new AMRMTokenSelector();\n+    this.amrmToken \u003d\n+        appTokenSelector.selectToken(\n+          SecurityUtil.buildTokenService(serviceAddr),\n+          appAttemptTokens.getAllTokens());\n+\n+    // For now, no need to populate tokens back to AMRMTokenSecretManager,\n+    // because running attempts are rebooted. Later in work-preserve restart,\n+    // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n+    // added to the secret manager\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n    if (UserGroupInformation.isSecurityEnabled()) {\n\n      ClientToAMTokenSelector clientToAMTokenSelector \u003d\n          new ClientToAMTokenSelector();\n      this.clientToAMToken \u003d\n          clientToAMTokenSelector.selectToken(new Text(),\n            appAttemptTokens.getAllTokens());\n    }\n\n    InetSocketAddress serviceAddr \u003d\n        conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n    AMRMTokenSelector appTokenSelector \u003d new AMRMTokenSelector();\n    this.amrmToken \u003d\n        appTokenSelector.selectToken(\n          SecurityUtil.buildTokenService(serviceAddr),\n          appAttemptTokens.getAllTokens());\n\n    // For now, no need to populate tokens back to AMRMTokenSecretManager,\n    // because running attempts are rebooted. Later in work-preserve restart,\n    // we\u0027ll create NEW-\u003eRUNNING transition in which the restored tokens will be\n    // added to the secret manager\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "5d1b453b8591d87ffb564857015c26c99fb7437c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-610. ClientToken is no longer set in the environment of the Containers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 4:13 PM",
      "commitName": "5d1b453b8591d87ffb564857015c26c99fb7437c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 12:11 PM",
      "commitNameOld": "7d0c43d7cff6d250613a04fea9449f139988e901",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n     if (appAttemptTokens \u003d\u003d null) {\n       return;\n     }\n     if (UserGroupInformation.isSecurityEnabled()) {\n \n-      ClientTokenSelector clientTokenSelector \u003d new ClientTokenSelector();\n-      this.clientToken \u003d\n-          clientTokenSelector.selectToken(new Text(),\n+      ClientToAMTokenSelector clientToAMTokenSelector \u003d\n+          new ClientToAMTokenSelector();\n+      this.clientToAMToken \u003d\n+          clientToAMTokenSelector.selectToken(new Text(),\n             appAttemptTokens.getAllTokens());\n \n       InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n             YarnConfiguration.RM_SCHEDULER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n       AMRMTokenSelector appTokenSelector \u003d new AMRMTokenSelector();\n       this.amrmToken \u003d\n           appTokenSelector.selectToken(\n             SecurityUtil.buildTokenService(serviceAddr),\n             appAttemptTokens.getAllTokens());\n \n       // For now, no need to populate tokens back to\n       // AMRMTokenSecretManager, because running attempts are rebooted\n       // Later in work-preserve restart, we\u0027ll create NEW-\u003eRUNNING transition\n       // in which the restored tokens will be added to the secret manager\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n    if (UserGroupInformation.isSecurityEnabled()) {\n\n      ClientToAMTokenSelector clientToAMTokenSelector \u003d\n          new ClientToAMTokenSelector();\n      this.clientToAMToken \u003d\n          clientToAMTokenSelector.selectToken(new Text(),\n            appAttemptTokens.getAllTokens());\n\n      InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n            YarnConfiguration.RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n      AMRMTokenSelector appTokenSelector \u003d new AMRMTokenSelector();\n      this.amrmToken \u003d\n          appTokenSelector.selectToken(\n            SecurityUtil.buildTokenService(serviceAddr),\n            appAttemptTokens.getAllTokens());\n\n      // For now, no need to populate tokens back to\n      // AMRMTokenSecretManager, because running attempts are rebooted\n      // Later in work-preserve restart, we\u0027ll create NEW-\u003eRUNNING transition\n      // in which the restored tokens will be added to the secret manager\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "7d0c43d7cff6d250613a04fea9449f139988e901": {
      "type": "Ybodychange",
      "commitMessage": "YARN-822. Renamed ApplicationToken to be AMRMToken, and similarly the corresponding TokenSelector and SecretManager. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 12:11 PM",
      "commitName": "7d0c43d7cff6d250613a04fea9449f139988e901",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/06/13 11:46 AM",
      "commitNameOld": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 11.02,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n     if (appAttemptTokens \u003d\u003d null) {\n       return;\n     }\n     if (UserGroupInformation.isSecurityEnabled()) {\n \n       ClientTokenSelector clientTokenSelector \u003d new ClientTokenSelector();\n       this.clientToken \u003d\n           clientTokenSelector.selectToken(new Text(),\n             appAttemptTokens.getAllTokens());\n \n       InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n             YarnConfiguration.RM_SCHEDULER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n-      ApplicationTokenSelector appTokenSelector \u003d new ApplicationTokenSelector();\n-      this.applicationToken \u003d\n+      AMRMTokenSelector appTokenSelector \u003d new AMRMTokenSelector();\n+      this.amrmToken \u003d\n           appTokenSelector.selectToken(\n             SecurityUtil.buildTokenService(serviceAddr),\n             appAttemptTokens.getAllTokens());\n \n       // For now, no need to populate tokens back to\n-      // ApplicationTokenSecretManager, because running attempts are rebooted\n+      // AMRMTokenSecretManager, because running attempts are rebooted\n       // Later in work-preserve restart, we\u0027ll create NEW-\u003eRUNNING transition\n       // in which the restored tokens will be added to the secret manager\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n    if (UserGroupInformation.isSecurityEnabled()) {\n\n      ClientTokenSelector clientTokenSelector \u003d new ClientTokenSelector();\n      this.clientToken \u003d\n          clientTokenSelector.selectToken(new Text(),\n            appAttemptTokens.getAllTokens());\n\n      InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n            YarnConfiguration.RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n      AMRMTokenSelector appTokenSelector \u003d new AMRMTokenSelector();\n      this.amrmToken \u003d\n          appTokenSelector.selectToken(\n            SecurityUtil.buildTokenService(serviceAddr),\n            appAttemptTokens.getAllTokens());\n\n      // For now, no need to populate tokens back to\n      // AMRMTokenSecretManager, because running attempts are rebooted\n      // Later in work-preserve restart, we\u0027ll create NEW-\u003eRUNNING transition\n      // in which the restored tokens will be added to the secret manager\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "74231f027607ff1a6fe7d72fad28108826963cf3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-582. Changed ResourceManager to recover Application token and client tokens for app attempt so that RM can be restarted while preserving current applications. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/13 11:20 PM",
      "commitName": "74231f027607ff1a6fe7d72fad28108826963cf3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,27 @@\n+  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n+    if (appAttemptTokens \u003d\u003d null) {\n+      return;\n+    }\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+\n+      ClientTokenSelector clientTokenSelector \u003d new ClientTokenSelector();\n+      this.clientToken \u003d\n+          clientTokenSelector.selectToken(new Text(),\n+            appAttemptTokens.getAllTokens());\n+\n+      InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n+            YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n+      ApplicationTokenSelector appTokenSelector \u003d new ApplicationTokenSelector();\n+      this.applicationToken \u003d\n+          appTokenSelector.selectToken(\n+            SecurityUtil.buildTokenService(serviceAddr),\n+            appAttemptTokens.getAllTokens());\n+\n+      // For now, no need to populate tokens back to\n+      // ApplicationTokenSecretManager, because running attempts are rebooted\n+      // Later in work-preserve restart, we\u0027ll create NEW-\u003eRUNNING transition\n+      // in which the restored tokens will be added to the secret manager\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverAppAttemptTokens(Credentials appAttemptTokens) {\n    if (appAttemptTokens \u003d\u003d null) {\n      return;\n    }\n    if (UserGroupInformation.isSecurityEnabled()) {\n\n      ClientTokenSelector clientTokenSelector \u003d new ClientTokenSelector();\n      this.clientToken \u003d\n          clientTokenSelector.selectToken(new Text(),\n            appAttemptTokens.getAllTokens());\n\n      InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n            YarnConfiguration.RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n      ApplicationTokenSelector appTokenSelector \u003d new ApplicationTokenSelector();\n      this.applicationToken \u003d\n          appTokenSelector.selectToken(\n            SecurityUtil.buildTokenService(serviceAddr),\n            appAttemptTokens.getAllTokens());\n\n      // For now, no need to populate tokens back to\n      // ApplicationTokenSecretManager, because running attempts are rebooted\n      // Later in work-preserve restart, we\u0027ll create NEW-\u003eRUNNING transition\n      // in which the restored tokens will be added to the secret manager\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java"
    }
  }
}