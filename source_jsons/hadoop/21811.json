{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CLI.java",
  "functionName": "displayJobList",
  "functionId": "displayJobList___jobs-JobStatus[]__writer-PrintWriter",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
  "functionStartLine": 783,
  "functionEndLine": 807,
  "numCommitsSeen": 36,
  "timeTaken": 2106,
  "changeHistory": [
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "8041267f022f7d9d8c99363c37b86895dbd9ade3",
    "fab57a144de0cd515e1de9107e4d3ac58037d846",
    "0cb3dd913b0626db2f1edd35d6309a604fc62aee"
  ],
  "changeHistoryShort": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "8041267f022f7d9d8c99363c37b86895dbd9ade3": "Ybodychange",
    "fab57a144de0cd515e1de9107e4d3ac58037d846": "Ybodychange",
    "0cb3dd913b0626db2f1edd35d6309a604fc62aee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "18/05/16 12:16 PM",
      "commitNameOld": "992a49353f0bdbc71534bfeeb134112c5624b94b",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 10.86,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void displayJobList(JobStatus[] jobs, PrintWriter writer) {\n     writer.println(\"Total jobs:\" + jobs.length);\n     writer.printf(headerPattern, \"JobId\", \"JobName\", \"State\", \"StartTime\",\n       \"UserName\", \"Queue\", \"Priority\", \"UsedContainers\",\n       \"RsvdContainers\", \"UsedMem\", \"RsvdMem\", \"NeededMem\", \"AM info\");\n     for (JobStatus job : jobs) {\n       int numUsedSlots \u003d job.getNumUsedSlots();\n       int numReservedSlots \u003d job.getNumReservedSlots();\n-      int usedMem \u003d job.getUsedMem();\n-      int rsvdMem \u003d job.getReservedMem();\n-      int neededMem \u003d job.getNeededMem();\n+      long usedMem \u003d job.getUsedMem();\n+      long rsvdMem \u003d job.getReservedMem();\n+      long neededMem \u003d job.getNeededMem();\n       int jobNameLength \u003d job.getJobName().length();\n       writer.printf(dataPattern, job.getJobID().toString(),\n           job.getJobName().substring(0, jobNameLength \u003e 20 ? 20 : jobNameLength),\n           job.getState(), job.getStartTime(), job.getUsername(),\n           job.getQueue(), job.getPriority().name(),\n           numUsedSlots \u003c 0 ? UNAVAILABLE : numUsedSlots,\n           numReservedSlots \u003c 0 ? UNAVAILABLE : numReservedSlots,\n           usedMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, usedMem),\n           rsvdMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, rsvdMem),\n           neededMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, neededMem),\n           job.getSchedulingInfo());\n     }\n     writer.flush();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void displayJobList(JobStatus[] jobs, PrintWriter writer) {\n    writer.println(\"Total jobs:\" + jobs.length);\n    writer.printf(headerPattern, \"JobId\", \"JobName\", \"State\", \"StartTime\",\n      \"UserName\", \"Queue\", \"Priority\", \"UsedContainers\",\n      \"RsvdContainers\", \"UsedMem\", \"RsvdMem\", \"NeededMem\", \"AM info\");\n    for (JobStatus job : jobs) {\n      int numUsedSlots \u003d job.getNumUsedSlots();\n      int numReservedSlots \u003d job.getNumReservedSlots();\n      long usedMem \u003d job.getUsedMem();\n      long rsvdMem \u003d job.getReservedMem();\n      long neededMem \u003d job.getNeededMem();\n      int jobNameLength \u003d job.getJobName().length();\n      writer.printf(dataPattern, job.getJobID().toString(),\n          job.getJobName().substring(0, jobNameLength \u003e 20 ? 20 : jobNameLength),\n          job.getState(), job.getStartTime(), job.getUsername(),\n          job.getQueue(), job.getPriority().name(),\n          numUsedSlots \u003c 0 ? UNAVAILABLE : numUsedSlots,\n          numReservedSlots \u003c 0 ? UNAVAILABLE : numReservedSlots,\n          usedMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, usedMem),\n          rsvdMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, rsvdMem),\n          neededMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, neededMem),\n          job.getSchedulingInfo());\n    }\n    writer.flush();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "8041267f022f7d9d8c99363c37b86895dbd9ade3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4424. \u0027mapred job -list\u0027 command should show the job name as well. Contributed by Avinash Kujur.\n",
      "commitDate": "20/03/15 2:46 AM",
      "commitName": "8041267f022f7d9d8c99363c37b86895dbd9ade3",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 17.19,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public void displayJobList(JobStatus[] jobs, PrintWriter writer) {\n     writer.println(\"Total jobs:\" + jobs.length);\n-    writer.printf(headerPattern, \"JobId\", \"State\", \"StartTime\", \"UserName\",\n-      \"Queue\", \"Priority\", \"UsedContainers\",\n+    writer.printf(headerPattern, \"JobId\", \"JobName\", \"State\", \"StartTime\",\n+      \"UserName\", \"Queue\", \"Priority\", \"UsedContainers\",\n       \"RsvdContainers\", \"UsedMem\", \"RsvdMem\", \"NeededMem\", \"AM info\");\n     for (JobStatus job : jobs) {\n       int numUsedSlots \u003d job.getNumUsedSlots();\n       int numReservedSlots \u003d job.getNumReservedSlots();\n       int usedMem \u003d job.getUsedMem();\n       int rsvdMem \u003d job.getReservedMem();\n       int neededMem \u003d job.getNeededMem();\n-      writer.printf(dataPattern,\n-          job.getJobID().toString(), job.getState(), job.getStartTime(),\n-          job.getUsername(), job.getQueue(), \n-          job.getPriority().name(),\n+      int jobNameLength \u003d job.getJobName().length();\n+      writer.printf(dataPattern, job.getJobID().toString(),\n+          job.getJobName().substring(0, jobNameLength \u003e 20 ? 20 : jobNameLength),\n+          job.getState(), job.getStartTime(), job.getUsername(),\n+          job.getQueue(), job.getPriority().name(),\n           numUsedSlots \u003c 0 ? UNAVAILABLE : numUsedSlots,\n           numReservedSlots \u003c 0 ? UNAVAILABLE : numReservedSlots,\n           usedMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, usedMem),\n           rsvdMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, rsvdMem),\n           neededMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, neededMem),\n           job.getSchedulingInfo());\n     }\n     writer.flush();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void displayJobList(JobStatus[] jobs, PrintWriter writer) {\n    writer.println(\"Total jobs:\" + jobs.length);\n    writer.printf(headerPattern, \"JobId\", \"JobName\", \"State\", \"StartTime\",\n      \"UserName\", \"Queue\", \"Priority\", \"UsedContainers\",\n      \"RsvdContainers\", \"UsedMem\", \"RsvdMem\", \"NeededMem\", \"AM info\");\n    for (JobStatus job : jobs) {\n      int numUsedSlots \u003d job.getNumUsedSlots();\n      int numReservedSlots \u003d job.getNumReservedSlots();\n      int usedMem \u003d job.getUsedMem();\n      int rsvdMem \u003d job.getReservedMem();\n      int neededMem \u003d job.getNeededMem();\n      int jobNameLength \u003d job.getJobName().length();\n      writer.printf(dataPattern, job.getJobID().toString(),\n          job.getJobName().substring(0, jobNameLength \u003e 20 ? 20 : jobNameLength),\n          job.getState(), job.getStartTime(), job.getUsername(),\n          job.getQueue(), job.getPriority().name(),\n          numUsedSlots \u003c 0 ? UNAVAILABLE : numUsedSlots,\n          numReservedSlots \u003c 0 ? UNAVAILABLE : numReservedSlots,\n          usedMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, usedMem),\n          rsvdMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, rsvdMem),\n          neededMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, neededMem),\n          job.getSchedulingInfo());\n    }\n    writer.flush();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "fab57a144de0cd515e1de9107e4d3ac58037d846": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3792. Fix \"bin/mapred job -list\" to display all jobs instead of only the jobs owned by the user. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/12 3:40 PM",
      "commitName": "fab57a144de0cd515e1de9107e4d3ac58037d846",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/02/12 5:43 PM",
      "commitNameOld": "6ba0375b21c4ce07d2b6b592c4963f705c35222b",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 30.91,
      "commitsBetweenForRepo": 281,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,24 @@\n   public void displayJobList(JobStatus[] jobs, PrintWriter writer) {\n     writer.println(\"Total jobs:\" + jobs.length);\n     writer.printf(headerPattern, \"JobId\", \"State\", \"StartTime\", \"UserName\",\n       \"Queue\", \"Priority\", \"UsedContainers\",\n       \"RsvdContainers\", \"UsedMem\", \"RsvdMem\", \"NeededMem\", \"AM info\");\n     for (JobStatus job : jobs) {\n+      int numUsedSlots \u003d job.getNumUsedSlots();\n+      int numReservedSlots \u003d job.getNumReservedSlots();\n+      int usedMem \u003d job.getUsedMem();\n+      int rsvdMem \u003d job.getReservedMem();\n+      int neededMem \u003d job.getNeededMem();\n       writer.printf(dataPattern,\n           job.getJobID().toString(), job.getState(), job.getStartTime(),\n           job.getUsername(), job.getQueue(), \n           job.getPriority().name(),\n-          job.getNumUsedSlots(),\n-          job.getNumReservedSlots(),\n-          job.getUsedMem(),\n-          job.getReservedMem(),\n-          job.getNeededMem(),\n+          numUsedSlots \u003c 0 ? UNAVAILABLE : numUsedSlots,\n+          numReservedSlots \u003c 0 ? UNAVAILABLE : numReservedSlots,\n+          usedMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, usedMem),\n+          rsvdMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, rsvdMem),\n+          neededMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, neededMem),\n           job.getSchedulingInfo());\n     }\n     writer.flush();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void displayJobList(JobStatus[] jobs, PrintWriter writer) {\n    writer.println(\"Total jobs:\" + jobs.length);\n    writer.printf(headerPattern, \"JobId\", \"State\", \"StartTime\", \"UserName\",\n      \"Queue\", \"Priority\", \"UsedContainers\",\n      \"RsvdContainers\", \"UsedMem\", \"RsvdMem\", \"NeededMem\", \"AM info\");\n    for (JobStatus job : jobs) {\n      int numUsedSlots \u003d job.getNumUsedSlots();\n      int numReservedSlots \u003d job.getNumReservedSlots();\n      int usedMem \u003d job.getUsedMem();\n      int rsvdMem \u003d job.getReservedMem();\n      int neededMem \u003d job.getNeededMem();\n      writer.printf(dataPattern,\n          job.getJobID().toString(), job.getState(), job.getStartTime(),\n          job.getUsername(), job.getQueue(), \n          job.getPriority().name(),\n          numUsedSlots \u003c 0 ? UNAVAILABLE : numUsedSlots,\n          numReservedSlots \u003c 0 ? UNAVAILABLE : numReservedSlots,\n          usedMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, usedMem),\n          rsvdMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, rsvdMem),\n          neededMem \u003c 0 ? UNAVAILABLE : String.format(memPattern, neededMem),\n          job.getSchedulingInfo());\n    }\n    writer.flush();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "0cb3dd913b0626db2f1edd35d6309a604fc62aee": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3720. Changed bin/mapred job -list to not print job-specific information not available at RM. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236588 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/12 12:44 AM",
      "commitName": "0cb3dd913b0626db2f1edd35d6309a604fc62aee",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,19 @@\n+  public void displayJobList(JobStatus[] jobs, PrintWriter writer) {\n+    writer.println(\"Total jobs:\" + jobs.length);\n+    writer.printf(headerPattern, \"JobId\", \"State\", \"StartTime\", \"UserName\",\n+      \"Queue\", \"Priority\", \"UsedContainers\",\n+      \"RsvdContainers\", \"UsedMem\", \"RsvdMem\", \"NeededMem\", \"AM info\");\n+    for (JobStatus job : jobs) {\n+      writer.printf(dataPattern,\n+          job.getJobID().toString(), job.getState(), job.getStartTime(),\n+          job.getUsername(), job.getQueue(), \n+          job.getPriority().name(),\n+          job.getNumUsedSlots(),\n+          job.getNumReservedSlots(),\n+          job.getUsedMem(),\n+          job.getReservedMem(),\n+          job.getNeededMem(),\n+          job.getSchedulingInfo());\n+    }\n+    writer.flush();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void displayJobList(JobStatus[] jobs, PrintWriter writer) {\n    writer.println(\"Total jobs:\" + jobs.length);\n    writer.printf(headerPattern, \"JobId\", \"State\", \"StartTime\", \"UserName\",\n      \"Queue\", \"Priority\", \"UsedContainers\",\n      \"RsvdContainers\", \"UsedMem\", \"RsvdMem\", \"NeededMem\", \"AM info\");\n    for (JobStatus job : jobs) {\n      writer.printf(dataPattern,\n          job.getJobID().toString(), job.getState(), job.getStartTime(),\n          job.getUsername(), job.getQueue(), \n          job.getPriority().name(),\n          job.getNumUsedSlots(),\n          job.getNumReservedSlots(),\n          job.getUsedMem(),\n          job.getReservedMem(),\n          job.getNeededMem(),\n          job.getSchedulingInfo());\n    }\n    writer.flush();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java"
    }
  }
}