{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PartitionQueueMetrics.java",
  "functionName": "getUserMetrics",
  "functionId": "getUserMetrics___userName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/PartitionQueueMetrics.java",
  "functionStartLine": 66,
  "functionEndLine": 88,
  "numCommitsSeen": 1,
  "timeTaken": 1381,
  "changeHistory": [
    "c30c23cb665761e997bcfc1dc00908f70b069fa2"
  ],
  "changeHistoryShort": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6492. Generate queue metrics for each partition. Contributed by Manikandan R\n",
      "commitDate": "26/05/20 4:29 PM",
      "commitName": "c30c23cb665761e997bcfc1dc00908f70b069fa2",
      "commitAuthor": "Jonathan Hung",
      "diff": "@@ -0,0 +1,23 @@\n+  public synchronized QueueMetrics getUserMetrics(String userName) {\n+    if (users \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    String partitionJMXStr \u003d\n+        (partition.equals(DEFAULT_PARTITION)) ? DEFAULT_PARTITION_JMX_STR\n+            : partition;\n+\n+    QueueMetrics metrics \u003d (PartitionQueueMetrics) users.get(userName);\n+    if (metrics \u003d\u003d null) {\n+      metrics \u003d new PartitionQueueMetrics(this.metricsSystem, this.queueName,\n+          null, false, this.conf, this.partition);\n+      users.put(userName, metrics);\n+      metricsSystem.register(\n+          pSourceName(partitionJMXStr).append(qSourceName(queueName))\n+              .append(\",user\u003d\").append(userName).toString(),\n+          \"Metrics for user \u0027\" + userName + \"\u0027 in queue \u0027\" + queueName + \"\u0027\",\n+          ((PartitionQueueMetrics) metrics.tag(PARTITION_INFO, partitionJMXStr)\n+              .tag(QUEUE_INFO, queueName)).tag(USER_INFO, userName));\n+    }\n+    return metrics;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized QueueMetrics getUserMetrics(String userName) {\n    if (users \u003d\u003d null) {\n      return null;\n    }\n\n    String partitionJMXStr \u003d\n        (partition.equals(DEFAULT_PARTITION)) ? DEFAULT_PARTITION_JMX_STR\n            : partition;\n\n    QueueMetrics metrics \u003d (PartitionQueueMetrics) users.get(userName);\n    if (metrics \u003d\u003d null) {\n      metrics \u003d new PartitionQueueMetrics(this.metricsSystem, this.queueName,\n          null, false, this.conf, this.partition);\n      users.put(userName, metrics);\n      metricsSystem.register(\n          pSourceName(partitionJMXStr).append(qSourceName(queueName))\n              .append(\",user\u003d\").append(userName).toString(),\n          \"Metrics for user \u0027\" + userName + \"\u0027 in queue \u0027\" + queueName + \"\u0027\",\n          ((PartitionQueueMetrics) metrics.tag(PARTITION_INFO, partitionJMXStr)\n              .tag(QUEUE_INFO, queueName)).tag(USER_INFO, userName));\n    }\n    return metrics;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/PartitionQueueMetrics.java"
    }
  }
}