{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectorySnapshottableFeature.java",
  "functionName": "addSnapshot",
  "functionId": "addSnapshot___snapshotRoot-INodeDirectory__id-int__name-String__leaseManager-LeaseManager(modifiers-final)__captureOpenFiles-boolean(modifiers-final)__maxSnapshotLimit-int__now-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
  "functionStartLine": 180,
  "functionEndLine": 227,
  "numCommitsSeen": 79,
  "timeTaken": 7311,
  "changeHistory": [
    "40150da1e12a41c2e774fe2a277ddc3988bed239",
    "4c57fb0cd9344290a9f4f6422c1457d69465eec7",
    "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5",
    "52d7bafcf49916887197436ddb0f08f021d248d9",
    "20e3ae260b40cd6ef657b2a629a02219d68f162f",
    "76a621ffd2d66bf012a554f4400091a92a5b473e"
  ],
  "changeHistoryShort": {
    "40150da1e12a41c2e774fe2a277ddc3988bed239": "Ymultichange(Yparameterchange,Ybodychange)",
    "4c57fb0cd9344290a9f4f6422c1457d69465eec7": "Yexceptionschange",
    "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5": "Ymultichange(Yparameterchange,Ybodychange)",
    "52d7bafcf49916887197436ddb0f08f021d248d9": "Ybodychange",
    "20e3ae260b40cd6ef657b2a629a02219d68f162f": "Ymultichange(Yparameterchange,Ybodychange)",
    "76a621ffd2d66bf012a554f4400091a92a5b473e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40150da1e12a41c2e774fe2a277ddc3988bed239": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14922. Prevent snapshot modification time got change on startup. Contributed by hemanthboyina.\n",
      "commitDate": "12/11/19 10:53 AM",
      "commitName": "40150da1e12a41c2e774fe2a277ddc3988bed239",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14922. Prevent snapshot modification time got change on startup. Contributed by hemanthboyina.\n",
          "commitDate": "12/11/19 10:53 AM",
          "commitName": "40150da1e12a41c2e774fe2a277ddc3988bed239",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "01/11/18 5:26 PM",
          "commitNameOld": "d98b881e9ab826eb7b70485d0de2a41ab7345334",
          "commitAuthorOld": "Pranay Singh",
          "daysBetweenCommits": 375.77,
          "commitsBetweenForRepo": 2701,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,48 @@\n   public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n       final LeaseManager leaseManager, final boolean captureOpenFiles,\n-      int maxSnapshotLimit)\n+      int maxSnapshotLimit, long now)\n       throws SnapshotException {\n     //check snapshot quota\n     final int n \u003d getNumSnapshots();\n     if (n + 1 \u003e snapshotQuota) {\n       throw new SnapshotException(\"Failed to add snapshot: there are already \"\n           + n + \" snapshot(s) and the snapshot quota is \"\n           + snapshotQuota);\n     } else if (n + 1 \u003e maxSnapshotLimit) {\n       throw new SnapshotException(\n           \"Failed to add snapshot: there are already \" + n\n               + \" snapshot(s) and the max snapshot limit is \"\n               + maxSnapshotLimit);\n     }\n     final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n     final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n     final int i \u003d searchSnapshot(nameBytes);\n     if (i \u003e\u003d 0) {\n       throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n           + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n     }\n \n     final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n     d.setSnapshotRoot(s.getRoot());\n     snapshotsByNames.add(-i - 1, s);\n \n-    // set modification time\n-    final long now \u003d Time.now();\n+    // modification time is the snapshot creation time\n     snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n     s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n \n     if (captureOpenFiles) {\n       try {\n         Set\u003cINodesInPath\u003e openFilesIIP \u003d\n             leaseManager.getINodeWithLeases(snapshotRoot);\n         for (INodesInPath openFileIIP : openFilesIIP) {\n           INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n           openFile.recordModification(openFileIIP.getLatestSnapshotId());\n         }\n       } catch (Exception e) {\n         throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n             \"capture all open files under the snapshot dir \" +\n             snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n       }\n     }\n     return s;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n      final LeaseManager leaseManager, final boolean captureOpenFiles,\n      int maxSnapshotLimit, long now)\n      throws SnapshotException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    } else if (n + 1 \u003e maxSnapshotLimit) {\n      throw new SnapshotException(\n          \"Failed to add snapshot: there are already \" + n\n              + \" snapshot(s) and the max snapshot limit is \"\n              + maxSnapshotLimit);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // modification time is the snapshot creation time\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n\n    if (captureOpenFiles) {\n      try {\n        Set\u003cINodesInPath\u003e openFilesIIP \u003d\n            leaseManager.getINodeWithLeases(snapshotRoot);\n        for (INodesInPath openFileIIP : openFilesIIP) {\n          INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n          openFile.recordModification(openFileIIP.getLatestSnapshotId());\n        }\n      } catch (Exception e) {\n        throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n            \"capture all open files under the snapshot dir \" +\n            snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n      }\n    }\n    return s;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {
            "oldValue": "[snapshotRoot-INodeDirectory, id-int, name-String, leaseManager-LeaseManager(modifiers-final), captureOpenFiles-boolean(modifiers-final), maxSnapshotLimit-int]",
            "newValue": "[snapshotRoot-INodeDirectory, id-int, name-String, leaseManager-LeaseManager(modifiers-final), captureOpenFiles-boolean(modifiers-final), maxSnapshotLimit-int, now-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14922. Prevent snapshot modification time got change on startup. Contributed by hemanthboyina.\n",
          "commitDate": "12/11/19 10:53 AM",
          "commitName": "40150da1e12a41c2e774fe2a277ddc3988bed239",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "01/11/18 5:26 PM",
          "commitNameOld": "d98b881e9ab826eb7b70485d0de2a41ab7345334",
          "commitAuthorOld": "Pranay Singh",
          "daysBetweenCommits": 375.77,
          "commitsBetweenForRepo": 2701,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,48 @@\n   public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n       final LeaseManager leaseManager, final boolean captureOpenFiles,\n-      int maxSnapshotLimit)\n+      int maxSnapshotLimit, long now)\n       throws SnapshotException {\n     //check snapshot quota\n     final int n \u003d getNumSnapshots();\n     if (n + 1 \u003e snapshotQuota) {\n       throw new SnapshotException(\"Failed to add snapshot: there are already \"\n           + n + \" snapshot(s) and the snapshot quota is \"\n           + snapshotQuota);\n     } else if (n + 1 \u003e maxSnapshotLimit) {\n       throw new SnapshotException(\n           \"Failed to add snapshot: there are already \" + n\n               + \" snapshot(s) and the max snapshot limit is \"\n               + maxSnapshotLimit);\n     }\n     final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n     final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n     final int i \u003d searchSnapshot(nameBytes);\n     if (i \u003e\u003d 0) {\n       throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n           + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n     }\n \n     final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n     d.setSnapshotRoot(s.getRoot());\n     snapshotsByNames.add(-i - 1, s);\n \n-    // set modification time\n-    final long now \u003d Time.now();\n+    // modification time is the snapshot creation time\n     snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n     s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n \n     if (captureOpenFiles) {\n       try {\n         Set\u003cINodesInPath\u003e openFilesIIP \u003d\n             leaseManager.getINodeWithLeases(snapshotRoot);\n         for (INodesInPath openFileIIP : openFilesIIP) {\n           INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n           openFile.recordModification(openFileIIP.getLatestSnapshotId());\n         }\n       } catch (Exception e) {\n         throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n             \"capture all open files under the snapshot dir \" +\n             snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n       }\n     }\n     return s;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n      final LeaseManager leaseManager, final boolean captureOpenFiles,\n      int maxSnapshotLimit, long now)\n      throws SnapshotException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    } else if (n + 1 \u003e maxSnapshotLimit) {\n      throw new SnapshotException(\n          \"Failed to add snapshot: there are already \" + n\n              + \" snapshot(s) and the max snapshot limit is \"\n              + maxSnapshotLimit);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // modification time is the snapshot creation time\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n\n    if (captureOpenFiles) {\n      try {\n        Set\u003cINodesInPath\u003e openFilesIIP \u003d\n            leaseManager.getINodeWithLeases(snapshotRoot);\n        for (INodesInPath openFileIIP : openFilesIIP) {\n          INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n          openFile.recordModification(openFileIIP.getLatestSnapshotId());\n        }\n      } catch (Exception e) {\n        throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n            \"capture all open files under the snapshot dir \" +\n            snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n      }\n    }\n    return s;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "4c57fb0cd9344290a9f4f6422c1457d69465eec7": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-13257. Code cleanup: INode never throws QuotaExceededException. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "14/03/18 9:42 AM",
      "commitName": "4c57fb0cd9344290a9f4f6422c1457d69465eec7",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "09/03/18 3:50 PM",
      "commitNameOld": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 4.7,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n       final LeaseManager leaseManager, final boolean captureOpenFiles,\n       int maxSnapshotLimit)\n-      throws SnapshotException, QuotaExceededException {\n+      throws SnapshotException {\n     //check snapshot quota\n     final int n \u003d getNumSnapshots();\n     if (n + 1 \u003e snapshotQuota) {\n       throw new SnapshotException(\"Failed to add snapshot: there are already \"\n           + n + \" snapshot(s) and the snapshot quota is \"\n           + snapshotQuota);\n     } else if (n + 1 \u003e maxSnapshotLimit) {\n       throw new SnapshotException(\n           \"Failed to add snapshot: there are already \" + n\n               + \" snapshot(s) and the max snapshot limit is \"\n               + maxSnapshotLimit);\n     }\n     final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n     final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n     final int i \u003d searchSnapshot(nameBytes);\n     if (i \u003e\u003d 0) {\n       throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n           + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n     }\n \n     final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n     d.setSnapshotRoot(s.getRoot());\n     snapshotsByNames.add(-i - 1, s);\n \n     // set modification time\n     final long now \u003d Time.now();\n     snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n     s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n \n     if (captureOpenFiles) {\n       try {\n         Set\u003cINodesInPath\u003e openFilesIIP \u003d\n             leaseManager.getINodeWithLeases(snapshotRoot);\n         for (INodesInPath openFileIIP : openFilesIIP) {\n           INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n           openFile.recordModification(openFileIIP.getLatestSnapshotId());\n         }\n       } catch (Exception e) {\n         throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n             \"capture all open files under the snapshot dir \" +\n             snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n       }\n     }\n     return s;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n      final LeaseManager leaseManager, final boolean captureOpenFiles,\n      int maxSnapshotLimit)\n      throws SnapshotException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    } else if (n + 1 \u003e maxSnapshotLimit) {\n      throw new SnapshotException(\n          \"Failed to add snapshot: there are already \" + n\n              + \" snapshot(s) and the max snapshot limit is \"\n              + maxSnapshotLimit);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // set modification time\n    final long now \u003d Time.now();\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n\n    if (captureOpenFiles) {\n      try {\n        Set\u003cINodesInPath\u003e openFilesIIP \u003d\n            leaseManager.getINodeWithLeases(snapshotRoot);\n        for (INodesInPath openFileIIP : openFilesIIP) {\n          INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n          openFile.recordModification(openFileIIP.getLatestSnapshotId());\n        }\n      } catch (Exception e) {\n        throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n            \"capture all open files under the snapshot dir \" +\n            snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n      }\n    }\n    return s;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
      "extendedDetails": {
        "oldValue": "[SnapshotException, QuotaExceededException]",
        "newValue": "[SnapshotException]"
      }
    },
    "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12947. Limit the number of Snapshots allowed to be created for a Snapshottable Directory.  Contributed by Shashikant Banerjee\n",
      "commitDate": "06/02/18 2:46 PM",
      "commitName": "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12947. Limit the number of Snapshots allowed to be created for a Snapshottable Directory.  Contributed by Shashikant Banerjee\n",
          "commitDate": "06/02/18 2:46 PM",
          "commitName": "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "30/11/17 12:18 PM",
          "commitNameOld": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 68.1,
          "commitsBetweenForRepo": 414,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,49 @@\n   public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n-      final LeaseManager leaseManager, final boolean captureOpenFiles)\n+      final LeaseManager leaseManager, final boolean captureOpenFiles,\n+      int maxSnapshotLimit)\n       throws SnapshotException, QuotaExceededException {\n     //check snapshot quota\n     final int n \u003d getNumSnapshots();\n     if (n + 1 \u003e snapshotQuota) {\n       throw new SnapshotException(\"Failed to add snapshot: there are already \"\n           + n + \" snapshot(s) and the snapshot quota is \"\n           + snapshotQuota);\n+    } else if (n + 1 \u003e maxSnapshotLimit) {\n+      throw new SnapshotException(\n+          \"Failed to add snapshot: there are already \" + n\n+              + \" snapshot(s) and the max snapshot limit is \"\n+              + maxSnapshotLimit);\n     }\n     final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n     final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n     final int i \u003d searchSnapshot(nameBytes);\n     if (i \u003e\u003d 0) {\n       throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n           + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n     }\n \n     final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n     d.setSnapshotRoot(s.getRoot());\n     snapshotsByNames.add(-i - 1, s);\n \n     // set modification time\n     final long now \u003d Time.now();\n     snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n     s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n \n     if (captureOpenFiles) {\n       try {\n         Set\u003cINodesInPath\u003e openFilesIIP \u003d\n             leaseManager.getINodeWithLeases(snapshotRoot);\n         for (INodesInPath openFileIIP : openFilesIIP) {\n           INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n           openFile.recordModification(openFileIIP.getLatestSnapshotId());\n         }\n       } catch (Exception e) {\n         throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n             \"capture all open files under the snapshot dir \" +\n             snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n       }\n     }\n     return s;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n      final LeaseManager leaseManager, final boolean captureOpenFiles,\n      int maxSnapshotLimit)\n      throws SnapshotException, QuotaExceededException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    } else if (n + 1 \u003e maxSnapshotLimit) {\n      throw new SnapshotException(\n          \"Failed to add snapshot: there are already \" + n\n              + \" snapshot(s) and the max snapshot limit is \"\n              + maxSnapshotLimit);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // set modification time\n    final long now \u003d Time.now();\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n\n    if (captureOpenFiles) {\n      try {\n        Set\u003cINodesInPath\u003e openFilesIIP \u003d\n            leaseManager.getINodeWithLeases(snapshotRoot);\n        for (INodesInPath openFileIIP : openFilesIIP) {\n          INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n          openFile.recordModification(openFileIIP.getLatestSnapshotId());\n        }\n      } catch (Exception e) {\n        throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n            \"capture all open files under the snapshot dir \" +\n            snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n      }\n    }\n    return s;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {
            "oldValue": "[snapshotRoot-INodeDirectory, id-int, name-String, leaseManager-LeaseManager(modifiers-final), captureOpenFiles-boolean(modifiers-final)]",
            "newValue": "[snapshotRoot-INodeDirectory, id-int, name-String, leaseManager-LeaseManager(modifiers-final), captureOpenFiles-boolean(modifiers-final), maxSnapshotLimit-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12947. Limit the number of Snapshots allowed to be created for a Snapshottable Directory.  Contributed by Shashikant Banerjee\n",
          "commitDate": "06/02/18 2:46 PM",
          "commitName": "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "30/11/17 12:18 PM",
          "commitNameOld": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 68.1,
          "commitsBetweenForRepo": 414,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,49 @@\n   public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n-      final LeaseManager leaseManager, final boolean captureOpenFiles)\n+      final LeaseManager leaseManager, final boolean captureOpenFiles,\n+      int maxSnapshotLimit)\n       throws SnapshotException, QuotaExceededException {\n     //check snapshot quota\n     final int n \u003d getNumSnapshots();\n     if (n + 1 \u003e snapshotQuota) {\n       throw new SnapshotException(\"Failed to add snapshot: there are already \"\n           + n + \" snapshot(s) and the snapshot quota is \"\n           + snapshotQuota);\n+    } else if (n + 1 \u003e maxSnapshotLimit) {\n+      throw new SnapshotException(\n+          \"Failed to add snapshot: there are already \" + n\n+              + \" snapshot(s) and the max snapshot limit is \"\n+              + maxSnapshotLimit);\n     }\n     final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n     final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n     final int i \u003d searchSnapshot(nameBytes);\n     if (i \u003e\u003d 0) {\n       throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n           + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n     }\n \n     final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n     d.setSnapshotRoot(s.getRoot());\n     snapshotsByNames.add(-i - 1, s);\n \n     // set modification time\n     final long now \u003d Time.now();\n     snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n     s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n \n     if (captureOpenFiles) {\n       try {\n         Set\u003cINodesInPath\u003e openFilesIIP \u003d\n             leaseManager.getINodeWithLeases(snapshotRoot);\n         for (INodesInPath openFileIIP : openFilesIIP) {\n           INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n           openFile.recordModification(openFileIIP.getLatestSnapshotId());\n         }\n       } catch (Exception e) {\n         throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n             \"capture all open files under the snapshot dir \" +\n             snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n       }\n     }\n     return s;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n      final LeaseManager leaseManager, final boolean captureOpenFiles,\n      int maxSnapshotLimit)\n      throws SnapshotException, QuotaExceededException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    } else if (n + 1 \u003e maxSnapshotLimit) {\n      throw new SnapshotException(\n          \"Failed to add snapshot: there are already \" + n\n              + \" snapshot(s) and the max snapshot limit is \"\n              + maxSnapshotLimit);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // set modification time\n    final long now \u003d Time.now();\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n\n    if (captureOpenFiles) {\n      try {\n        Set\u003cINodesInPath\u003e openFilesIIP \u003d\n            leaseManager.getINodeWithLeases(snapshotRoot);\n        for (INodesInPath openFileIIP : openFilesIIP) {\n          INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n          openFile.recordModification(openFileIIP.getLatestSnapshotId());\n        }\n      } catch (Exception e) {\n        throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n            \"capture all open files under the snapshot dir \" +\n            snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n      }\n    }\n    return s;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "52d7bafcf49916887197436ddb0f08f021d248d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12217. HDFS snapshots doesn\u0027t capture all open files when one of the open files is deleted.\n",
      "commitDate": "01/08/17 4:28 PM",
      "commitName": "52d7bafcf49916887197436ddb0f08f021d248d9",
      "commitAuthor": "Manoj Govindassamy",
      "commitDateOld": "14/07/17 2:35 PM",
      "commitNameOld": "f413ee33df301659c4ca9024380c2354983dcc84",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 18.08,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,43 @@\n   public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n       final LeaseManager leaseManager, final boolean captureOpenFiles)\n       throws SnapshotException, QuotaExceededException {\n     //check snapshot quota\n     final int n \u003d getNumSnapshots();\n     if (n + 1 \u003e snapshotQuota) {\n       throw new SnapshotException(\"Failed to add snapshot: there are already \"\n           + n + \" snapshot(s) and the snapshot quota is \"\n           + snapshotQuota);\n     }\n     final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n     final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n     final int i \u003d searchSnapshot(nameBytes);\n     if (i \u003e\u003d 0) {\n       throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n           + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n     }\n \n     final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n     d.setSnapshotRoot(s.getRoot());\n     snapshotsByNames.add(-i - 1, s);\n \n     // set modification time\n     final long now \u003d Time.now();\n     snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n     s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n \n     if (captureOpenFiles) {\n-      Set\u003cINodesInPath\u003e openFilesIIP \u003d\n-          leaseManager.getINodeWithLeases(snapshotRoot);\n-      for (INodesInPath openFileIIP : openFilesIIP)  {\n-        INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n-        openFile.recordModification(openFileIIP.getLatestSnapshotId());\n+      try {\n+        Set\u003cINodesInPath\u003e openFilesIIP \u003d\n+            leaseManager.getINodeWithLeases(snapshotRoot);\n+        for (INodesInPath openFileIIP : openFilesIIP) {\n+          INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n+          openFile.recordModification(openFileIIP.getLatestSnapshotId());\n+        }\n+      } catch (Exception e) {\n+        throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n+            \"capture all open files under the snapshot dir \" +\n+            snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n       }\n     }\n     return s;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n      final LeaseManager leaseManager, final boolean captureOpenFiles)\n      throws SnapshotException, QuotaExceededException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // set modification time\n    final long now \u003d Time.now();\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n\n    if (captureOpenFiles) {\n      try {\n        Set\u003cINodesInPath\u003e openFilesIIP \u003d\n            leaseManager.getINodeWithLeases(snapshotRoot);\n        for (INodesInPath openFileIIP : openFilesIIP) {\n          INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n          openFile.recordModification(openFileIIP.getLatestSnapshotId());\n        }\n      } catch (Exception e) {\n        throw new SnapshotException(\"Failed to add snapshot: Unable to \" +\n            \"capture all open files under the snapshot dir \" +\n            snapshotRoot.getFullPathName() + \" for snapshot \u0027\" + name + \"\u0027\", e);\n      }\n    }\n    return s;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
      "extendedDetails": {}
    },
    "20e3ae260b40cd6ef657b2a629a02219d68f162f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11402. HDFS Snapshots should capture point-in-time copies of OPEN files. (Manoj Govindassamy via Yongjun Zhang)\n",
      "commitDate": "21/04/17 8:35 PM",
      "commitName": "20e3ae260b40cd6ef657b2a629a02219d68f162f",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11402. HDFS Snapshots should capture point-in-time copies of OPEN files. (Manoj Govindassamy via Yongjun Zhang)\n",
          "commitDate": "21/04/17 8:35 PM",
          "commitName": "20e3ae260b40cd6ef657b2a629a02219d68f162f",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "07/10/16 5:37 PM",
          "commitNameOld": "6a38d118d86b7907009bcec34f1b788d076f1d1c",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 196.12,
          "commitsBetweenForRepo": 1197,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,37 @@\n-  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name)\n+  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n+      final LeaseManager leaseManager, final boolean captureOpenFiles)\n       throws SnapshotException, QuotaExceededException {\n     //check snapshot quota\n     final int n \u003d getNumSnapshots();\n     if (n + 1 \u003e snapshotQuota) {\n       throw new SnapshotException(\"Failed to add snapshot: there are already \"\n           + n + \" snapshot(s) and the snapshot quota is \"\n           + snapshotQuota);\n     }\n     final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n     final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n     final int i \u003d searchSnapshot(nameBytes);\n     if (i \u003e\u003d 0) {\n       throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n           + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n     }\n \n     final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n     d.setSnapshotRoot(s.getRoot());\n     snapshotsByNames.add(-i - 1, s);\n \n     // set modification time\n     final long now \u003d Time.now();\n     snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n     s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n+\n+    if (captureOpenFiles) {\n+      Set\u003cINodesInPath\u003e openFilesIIP \u003d\n+          leaseManager.getINodeWithLeases(snapshotRoot);\n+      for (INodesInPath openFileIIP : openFilesIIP)  {\n+        INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n+        openFile.recordModification(openFileIIP.getLatestSnapshotId());\n+      }\n+    }\n     return s;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n      final LeaseManager leaseManager, final boolean captureOpenFiles)\n      throws SnapshotException, QuotaExceededException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // set modification time\n    final long now \u003d Time.now();\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n\n    if (captureOpenFiles) {\n      Set\u003cINodesInPath\u003e openFilesIIP \u003d\n          leaseManager.getINodeWithLeases(snapshotRoot);\n      for (INodesInPath openFileIIP : openFilesIIP)  {\n        INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n        openFile.recordModification(openFileIIP.getLatestSnapshotId());\n      }\n    }\n    return s;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {
            "oldValue": "[snapshotRoot-INodeDirectory, id-int, name-String]",
            "newValue": "[snapshotRoot-INodeDirectory, id-int, name-String, leaseManager-LeaseManager(modifiers-final), captureOpenFiles-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11402. HDFS Snapshots should capture point-in-time copies of OPEN files. (Manoj Govindassamy via Yongjun Zhang)\n",
          "commitDate": "21/04/17 8:35 PM",
          "commitName": "20e3ae260b40cd6ef657b2a629a02219d68f162f",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "07/10/16 5:37 PM",
          "commitNameOld": "6a38d118d86b7907009bcec34f1b788d076f1d1c",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 196.12,
          "commitsBetweenForRepo": 1197,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,37 @@\n-  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name)\n+  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n+      final LeaseManager leaseManager, final boolean captureOpenFiles)\n       throws SnapshotException, QuotaExceededException {\n     //check snapshot quota\n     final int n \u003d getNumSnapshots();\n     if (n + 1 \u003e snapshotQuota) {\n       throw new SnapshotException(\"Failed to add snapshot: there are already \"\n           + n + \" snapshot(s) and the snapshot quota is \"\n           + snapshotQuota);\n     }\n     final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n     final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n     final int i \u003d searchSnapshot(nameBytes);\n     if (i \u003e\u003d 0) {\n       throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n           + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n     }\n \n     final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n     d.setSnapshotRoot(s.getRoot());\n     snapshotsByNames.add(-i - 1, s);\n \n     // set modification time\n     final long now \u003d Time.now();\n     snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n     s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n+\n+    if (captureOpenFiles) {\n+      Set\u003cINodesInPath\u003e openFilesIIP \u003d\n+          leaseManager.getINodeWithLeases(snapshotRoot);\n+      for (INodesInPath openFileIIP : openFilesIIP)  {\n+        INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n+        openFile.recordModification(openFileIIP.getLatestSnapshotId());\n+      }\n+    }\n     return s;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name,\n      final LeaseManager leaseManager, final boolean captureOpenFiles)\n      throws SnapshotException, QuotaExceededException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // set modification time\n    final long now \u003d Time.now();\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n\n    if (captureOpenFiles) {\n      Set\u003cINodesInPath\u003e openFilesIIP \u003d\n          leaseManager.getINodeWithLeases(snapshotRoot);\n      for (INodesInPath openFileIIP : openFilesIIP)  {\n        INodeFile openFile \u003d openFileIIP.getLastINode().asFile();\n        openFile.recordModification(openFileIIP.getLatestSnapshotId());\n      }\n    }\n    return s;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "76a621ffd2d66bf012a554f4400091a92a5b473e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/14 5:08 PM",
      "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,27 @@\n+  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name)\n+      throws SnapshotException, QuotaExceededException {\n+    //check snapshot quota\n+    final int n \u003d getNumSnapshots();\n+    if (n + 1 \u003e snapshotQuota) {\n+      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n+          + n + \" snapshot(s) and the snapshot quota is \"\n+          + snapshotQuota);\n+    }\n+    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n+    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n+    final int i \u003d searchSnapshot(nameBytes);\n+    if (i \u003e\u003d 0) {\n+      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n+          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n+    }\n+\n+    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n+    d.setSnapshotRoot(s.getRoot());\n+    snapshotsByNames.add(-i - 1, s);\n+\n+    // set modification time\n+    final long now \u003d Time.now();\n+    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n+    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n+    return s;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Snapshot addSnapshot(INodeDirectory snapshotRoot, int id, String name)\n      throws SnapshotException, QuotaExceededException {\n    //check snapshot quota\n    final int n \u003d getNumSnapshots();\n    if (n + 1 \u003e snapshotQuota) {\n      throw new SnapshotException(\"Failed to add snapshot: there are already \"\n          + n + \" snapshot(s) and the snapshot quota is \"\n          + snapshotQuota);\n    }\n    final Snapshot s \u003d new Snapshot(id, name, snapshotRoot);\n    final byte[] nameBytes \u003d s.getRoot().getLocalNameBytes();\n    final int i \u003d searchSnapshot(nameBytes);\n    if (i \u003e\u003d 0) {\n      throw new SnapshotException(\"Failed to add snapshot: there is already a \"\n          + \"snapshot with the same name \\\"\" + Snapshot.getSnapshotName(s) + \"\\\".\");\n    }\n\n    final DirectoryDiff d \u003d getDiffs().addDiff(id, snapshotRoot);\n    d.setSnapshotRoot(s.getRoot());\n    snapshotsByNames.add(-i - 1, s);\n\n    // set modification time\n    final long now \u003d Time.now();\n    snapshotRoot.updateModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    s.getRoot().setModificationTime(now, Snapshot.CURRENT_STATE_ID);\n    return s;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java"
    }
  }
}