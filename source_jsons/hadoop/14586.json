{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtil.java",
  "functionName": "getSuffixIDs",
  "functionId": "getSuffixIDs___conf-Configuration(modifiers-final)__addressKey-String(modifiers-final)__knownNsId-String__knownNNId-String__matcher-AddressMatcher(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
  "functionStartLine": 1185,
  "functionEndLine": 1234,
  "numCommitsSeen": 154,
  "timeTaken": 3035,
  "changeHistory": [
    "6f8003dc7bc9e8be7b0512c514d370c303faf003",
    "260dfa367e3c161edcc9d2b2217661710199c95e"
  ],
  "changeHistoryShort": {
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": "Ybodychange",
    "260dfa367e3c161edcc9d2b2217661710199c95e": "Ybodychange"
  },
  "changeHistoryDetails": {
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
      "commitDate": "21/04/15 9:59 PM",
      "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "20/04/15 12:36 AM",
      "commitNameOld": "5c97db07fb306842f49d73a67a90cecec19a7833",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   static String[] getSuffixIDs(final Configuration conf, final String addressKey,\n       String knownNsId, String knownNNId,\n       final AddressMatcher matcher) {\n     String nameserviceId \u003d null;\n     String namenodeId \u003d null;\n     int found \u003d 0;\n     \n-    Collection\u003cString\u003e nsIds \u003d getNameServiceIds(conf);\n-    for (String nsId : emptyAsSingletonNull(nsIds)) {\n+    Collection\u003cString\u003e nsIds \u003d DFSUtilClient.getNameServiceIds(conf);\n+    for (String nsId : DFSUtilClient.emptyAsSingletonNull(nsIds)) {\n       if (knownNsId !\u003d null \u0026\u0026 !knownNsId.equals(nsId)) {\n         continue;\n       }\n       \n-      Collection\u003cString\u003e nnIds \u003d getNameNodeIds(conf, nsId);\n-      for (String nnId : emptyAsSingletonNull(nnIds)) {\n+      Collection\u003cString\u003e nnIds \u003d DFSUtilClient.getNameNodeIds(conf, nsId);\n+      for (String nnId : DFSUtilClient.emptyAsSingletonNull(nnIds)) {\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(String.format(\"addressKey: %s nsId: %s nnId: %s\",\n               addressKey, nsId, nnId));\n         }\n         if (knownNNId !\u003d null \u0026\u0026 !knownNNId.equals(nnId)) {\n           continue;\n         }\n         String key \u003d addKeySuffixes(addressKey, nsId, nnId);\n         String addr \u003d conf.get(key);\n         if (addr \u003d\u003d null) {\n           continue;\n         }\n         InetSocketAddress s \u003d null;\n         try {\n           s \u003d NetUtils.createSocketAddr(addr);\n         } catch (Exception e) {\n           LOG.warn(\"Exception in creating socket address \" + addr, e);\n           continue;\n         }\n         if (!s.isUnresolved() \u0026\u0026 matcher.match(s)) {\n           nameserviceId \u003d nsId;\n           namenodeId \u003d nnId;\n           found++;\n         }\n       }\n     }\n     if (found \u003e 1) { // Only one address must match the local address\n       String msg \u003d \"Configuration has multiple addresses that match \"\n           + \"local node\u0027s address. Please configure the system with \"\n           + DFS_NAMESERVICE_ID + \" and \"\n           + DFS_HA_NAMENODE_ID_KEY;\n       throw new HadoopIllegalArgumentException(msg);\n     }\n     return new String[] { nameserviceId, namenodeId };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static String[] getSuffixIDs(final Configuration conf, final String addressKey,\n      String knownNsId, String knownNNId,\n      final AddressMatcher matcher) {\n    String nameserviceId \u003d null;\n    String namenodeId \u003d null;\n    int found \u003d 0;\n    \n    Collection\u003cString\u003e nsIds \u003d DFSUtilClient.getNameServiceIds(conf);\n    for (String nsId : DFSUtilClient.emptyAsSingletonNull(nsIds)) {\n      if (knownNsId !\u003d null \u0026\u0026 !knownNsId.equals(nsId)) {\n        continue;\n      }\n      \n      Collection\u003cString\u003e nnIds \u003d DFSUtilClient.getNameNodeIds(conf, nsId);\n      for (String nnId : DFSUtilClient.emptyAsSingletonNull(nnIds)) {\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(String.format(\"addressKey: %s nsId: %s nnId: %s\",\n              addressKey, nsId, nnId));\n        }\n        if (knownNNId !\u003d null \u0026\u0026 !knownNNId.equals(nnId)) {\n          continue;\n        }\n        String key \u003d addKeySuffixes(addressKey, nsId, nnId);\n        String addr \u003d conf.get(key);\n        if (addr \u003d\u003d null) {\n          continue;\n        }\n        InetSocketAddress s \u003d null;\n        try {\n          s \u003d NetUtils.createSocketAddr(addr);\n        } catch (Exception e) {\n          LOG.warn(\"Exception in creating socket address \" + addr, e);\n          continue;\n        }\n        if (!s.isUnresolved() \u0026\u0026 matcher.match(s)) {\n          nameserviceId \u003d nsId;\n          namenodeId \u003d nnId;\n          found++;\n        }\n      }\n    }\n    if (found \u003e 1) { // Only one address must match the local address\n      String msg \u003d \"Configuration has multiple addresses that match \"\n          + \"local node\u0027s address. Please configure the system with \"\n          + DFS_NAMESERVICE_ID + \" and \"\n          + DFS_HA_NAMENODE_ID_KEY;\n      throw new HadoopIllegalArgumentException(msg);\n    }\n    return new String[] { nameserviceId, namenodeId };\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "260dfa367e3c161edcc9d2b2217661710199c95e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2885. Remove \"federation\" from the nameservice config options. Contributed by Tsz Wo (Nicholas), SZE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1340841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/05/12 2:13 PM",
      "commitName": "260dfa367e3c161edcc9d2b2217661710199c95e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "14/05/12 9:25 AM",
      "commitNameOld": "05c5fcfb422ec6284e3c18531e91b206975616df",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 6.2,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   static String[] getSuffixIDs(final Configuration conf, final String addressKey,\n       String knownNsId, String knownNNId,\n       final AddressMatcher matcher) {\n     String nameserviceId \u003d null;\n     String namenodeId \u003d null;\n     int found \u003d 0;\n     \n     Collection\u003cString\u003e nsIds \u003d getNameServiceIds(conf);\n     for (String nsId : emptyAsSingletonNull(nsIds)) {\n       if (knownNsId !\u003d null \u0026\u0026 !knownNsId.equals(nsId)) {\n         continue;\n       }\n       \n       Collection\u003cString\u003e nnIds \u003d getNameNodeIds(conf, nsId);\n       for (String nnId : emptyAsSingletonNull(nnIds)) {\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(String.format(\"addressKey: %s nsId: %s nnId: %s\",\n               addressKey, nsId, nnId));\n         }\n         if (knownNNId !\u003d null \u0026\u0026 !knownNNId.equals(nnId)) {\n           continue;\n         }\n         String key \u003d addKeySuffixes(addressKey, nsId, nnId);\n         String addr \u003d conf.get(key);\n         if (addr \u003d\u003d null) {\n           continue;\n         }\n         InetSocketAddress s \u003d null;\n         try {\n           s \u003d NetUtils.createSocketAddr(addr);\n         } catch (Exception e) {\n           LOG.warn(\"Exception in creating socket address \" + addr, e);\n           continue;\n         }\n         if (!s.isUnresolved() \u0026\u0026 matcher.match(s)) {\n           nameserviceId \u003d nsId;\n           namenodeId \u003d nnId;\n           found++;\n         }\n       }\n     }\n     if (found \u003e 1) { // Only one address must match the local address\n       String msg \u003d \"Configuration has multiple addresses that match \"\n           + \"local node\u0027s address. Please configure the system with \"\n-          + DFS_FEDERATION_NAMESERVICE_ID + \" and \"\n+          + DFS_NAMESERVICE_ID + \" and \"\n           + DFS_HA_NAMENODE_ID_KEY;\n       throw new HadoopIllegalArgumentException(msg);\n     }\n     return new String[] { nameserviceId, namenodeId };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static String[] getSuffixIDs(final Configuration conf, final String addressKey,\n      String knownNsId, String knownNNId,\n      final AddressMatcher matcher) {\n    String nameserviceId \u003d null;\n    String namenodeId \u003d null;\n    int found \u003d 0;\n    \n    Collection\u003cString\u003e nsIds \u003d getNameServiceIds(conf);\n    for (String nsId : emptyAsSingletonNull(nsIds)) {\n      if (knownNsId !\u003d null \u0026\u0026 !knownNsId.equals(nsId)) {\n        continue;\n      }\n      \n      Collection\u003cString\u003e nnIds \u003d getNameNodeIds(conf, nsId);\n      for (String nnId : emptyAsSingletonNull(nnIds)) {\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(String.format(\"addressKey: %s nsId: %s nnId: %s\",\n              addressKey, nsId, nnId));\n        }\n        if (knownNNId !\u003d null \u0026\u0026 !knownNNId.equals(nnId)) {\n          continue;\n        }\n        String key \u003d addKeySuffixes(addressKey, nsId, nnId);\n        String addr \u003d conf.get(key);\n        if (addr \u003d\u003d null) {\n          continue;\n        }\n        InetSocketAddress s \u003d null;\n        try {\n          s \u003d NetUtils.createSocketAddr(addr);\n        } catch (Exception e) {\n          LOG.warn(\"Exception in creating socket address \" + addr, e);\n          continue;\n        }\n        if (!s.isUnresolved() \u0026\u0026 matcher.match(s)) {\n          nameserviceId \u003d nsId;\n          namenodeId \u003d nnId;\n          found++;\n        }\n      }\n    }\n    if (found \u003e 1) { // Only one address must match the local address\n      String msg \u003d \"Configuration has multiple addresses that match \"\n          + \"local node\u0027s address. Please configure the system with \"\n          + DFS_NAMESERVICE_ID + \" and \"\n          + DFS_HA_NAMENODE_ID_KEY;\n      throw new HadoopIllegalArgumentException(msg);\n    }\n    return new String[] { nameserviceId, namenodeId };\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    }
  }
}