{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 1032,
  "functionEndLine": 1053,
  "numCommitsSeen": 231,
  "timeTaken": 12250,
  "changeHistory": [
    "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b",
    "a6aa6e42cacdbfcc1c2b7c19e7239204fe9ff654",
    "764af69aa0933e109c0fcc536bb0c2342a8d221d",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "072292219ee522bd799fea54d150b6a601c94b97",
    "bb9ac4fe4ca59dbd90178a4ba0a307b57fd65864",
    "fe7711df98b9dd16259f6534e8461a29f24caadc",
    "5ee495e6f34faff231ad87ec890188eb63617393",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b": "Ybodychange",
    "a6aa6e42cacdbfcc1c2b7c19e7239204fe9ff654": "Ybodychange",
    "764af69aa0933e109c0fcc536bb0c2342a8d221d": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "072292219ee522bd799fea54d150b6a601c94b97": "Ybodychange",
    "bb9ac4fe4ca59dbd90178a4ba0a307b57fd65864": "Ybodychange",
    "fe7711df98b9dd16259f6534e8461a29f24caadc": "Ybodychange",
    "5ee495e6f34faff231ad87ec890188eb63617393": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks\n",
      "commitDate": "19/11/14 7:48 PM",
      "commitName": "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/11/14 7:43 PM",
      "commitNameOld": "df36edf751202db00d8f43103d7120ec56d70a04",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.0,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,9 @@\n       public Void run() throws Exception {\n         try {\n           startActiveServices();\n           return null;\n         } catch (Exception e) {\n-          resetDispatcher();\n-          createAndInitActiveServices();\n+          reinitialize(true);\n           throw e;\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public Void run() throws Exception {\n        try {\n          startActiveServices();\n          return null;\n        } catch (Exception e) {\n          reinitialize(true);\n          throw e;\n        }\n      }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a6aa6e42cacdbfcc1c2b7c19e7239204fe9ff654": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2588. Standby RM fails to transitionToActive if previous transitionToActive failed with ZK exception. Contributed by Rohith Sharmaks\n",
      "commitDate": "17/10/14 10:54 AM",
      "commitName": "a6aa6e42cacdbfcc1c2b7c19e7239204fe9ff654",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/10/14 6:33 PM",
      "commitNameOld": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.68,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,10 @@\n       public Void run() throws Exception {\n-        startActiveServices();\n-        return null;\n+        try {\n+          startActiveServices();\n+          return null;\n+        } catch (Exception e) {\n+          resetDispatcher();\n+          createAndInitActiveServices();\n+          throw e;\n+        }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public Void run() throws Exception {\n        try {\n          startActiveServices();\n          return null;\n        } catch (Exception e) {\n          resetDispatcher();\n          createAndInitActiveServices();\n          throw e;\n        }\n      }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "764af69aa0933e109c0fcc536bb0c2342a8d221d": {
      "type": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-1640. Fixed manual failover of ResourceManagers to work correctly in secure clusters. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579510 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/14 7:40 PM",
      "commitName": "764af69aa0933e109c0fcc536bb0c2342a8d221d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1640. Fixed manual failover of ResourceManagers to work correctly in secure clusters. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579510 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/03/14 7:40 PM",
          "commitName": "764af69aa0933e109c0fcc536bb0c2342a8d221d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/03/14 12:00 PM",
          "commitNameOld": "bfafc1d0ceeb17c1d3a99597ac9617328015c6c9",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.32,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,4 @@\n-      public void run() {\n-\n-        SchedulerEvent event;\n-\n-        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n-          try {\n-            event \u003d eventQueue.take();\n-          } catch (InterruptedException e) {\n-            LOG.error(\"Returning, interrupted : \" + e);\n-            return; // TODO: Kill RM.\n-          }\n-\n-          try {\n-            scheduler.handle(event);\n-          } catch (Throwable t) {\n-            // An error occurred, but we are shutting down anyway.\n-            // If it was an InterruptedException, the very act of \n-            // shutdown could have caused it and is probably harmless.\n-            if (stopped) {\n-              LOG.warn(\"Exception during shutdown: \", t);\n-              break;\n-            }\n-            LOG.fatal(\"Error in handling event type \" + event.getType()\n-                + \" to the scheduler\", t);\n-            if (shouldExitOnError\n-                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n-              LOG.info(\"Exiting, bbye..\");\n-              System.exit(-1);\n-            }\n-          }\n-        }\n+      public Void run() throws Exception {\n+        startActiveServices();\n+        return null;\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public Void run() throws Exception {\n        startActiveServices();\n        return null;\n      }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Void"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-1640. Fixed manual failover of ResourceManagers to work correctly in secure clusters. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579510 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/03/14 7:40 PM",
          "commitName": "764af69aa0933e109c0fcc536bb0c2342a8d221d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/03/14 12:00 PM",
          "commitNameOld": "bfafc1d0ceeb17c1d3a99597ac9617328015c6c9",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.32,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,4 @@\n-      public void run() {\n-\n-        SchedulerEvent event;\n-\n-        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n-          try {\n-            event \u003d eventQueue.take();\n-          } catch (InterruptedException e) {\n-            LOG.error(\"Returning, interrupted : \" + e);\n-            return; // TODO: Kill RM.\n-          }\n-\n-          try {\n-            scheduler.handle(event);\n-          } catch (Throwable t) {\n-            // An error occurred, but we are shutting down anyway.\n-            // If it was an InterruptedException, the very act of \n-            // shutdown could have caused it and is probably harmless.\n-            if (stopped) {\n-              LOG.warn(\"Exception during shutdown: \", t);\n-              break;\n-            }\n-            LOG.fatal(\"Error in handling event type \" + event.getType()\n-                + \" to the scheduler\", t);\n-            if (shouldExitOnError\n-                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n-              LOG.info(\"Exiting, bbye..\");\n-              System.exit(-1);\n-            }\n-          }\n-        }\n+      public Void run() throws Exception {\n+        startActiveServices();\n+        return null;\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public Void run() throws Exception {\n        startActiveServices();\n        return null;\n      }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1640. Fixed manual failover of ResourceManagers to work correctly in secure clusters. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579510 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/03/14 7:40 PM",
          "commitName": "764af69aa0933e109c0fcc536bb0c2342a8d221d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/03/14 12:00 PM",
          "commitNameOld": "bfafc1d0ceeb17c1d3a99597ac9617328015c6c9",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.32,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,4 @@\n-      public void run() {\n-\n-        SchedulerEvent event;\n-\n-        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n-          try {\n-            event \u003d eventQueue.take();\n-          } catch (InterruptedException e) {\n-            LOG.error(\"Returning, interrupted : \" + e);\n-            return; // TODO: Kill RM.\n-          }\n-\n-          try {\n-            scheduler.handle(event);\n-          } catch (Throwable t) {\n-            // An error occurred, but we are shutting down anyway.\n-            // If it was an InterruptedException, the very act of \n-            // shutdown could have caused it and is probably harmless.\n-            if (stopped) {\n-              LOG.warn(\"Exception during shutdown: \", t);\n-              break;\n-            }\n-            LOG.fatal(\"Error in handling event type \" + event.getType()\n-                + \" to the scheduler\", t);\n-            if (shouldExitOnError\n-                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n-              LOG.info(\"Exiting, bbye..\");\n-              System.exit(-1);\n-            }\n-          }\n-        }\n+      public Void run() throws Exception {\n+        startActiveServices();\n+        return null;\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public Void run() throws Exception {\n        startActiveServices();\n        return null;\n      }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public void run() {\n\n        SchedulerEvent event;\n\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return; // TODO: Kill RM.\n          }\n\n          try {\n            scheduler.handle(event);\n          } catch (Throwable t) {\n            // An error occurred, but we are shutting down anyway.\n            // If it was an InterruptedException, the very act of \n            // shutdown could have caused it and is probably harmless.\n            if (stopped) {\n              LOG.warn(\"Exception during shutdown: \", t);\n              break;\n            }\n            LOG.fatal(\"Error in handling event type \" + event.getType()\n                + \" to the scheduler\", t);\n            if (shouldExitOnError\n                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n              LOG.info(\"Exiting, bbye..\");\n              System.exit(-1);\n            }\n          }\n        }\n      }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "072292219ee522bd799fea54d150b6a601c94b97": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4387. RM gets fatal error and exits during TestRM (Kihwal Lee via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358201 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/07/12 6:38 AM",
      "commitName": "072292219ee522bd799fea54d150b6a601c94b97",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "27/06/12 7:28 AM",
      "commitNameOld": "bb9ac4fe4ca59dbd90178a4ba0a307b57fd65864",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 8.97,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n       public void run() {\n \n         SchedulerEvent event;\n \n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.error(\"Returning, interrupted : \" + e);\n             return; // TODO: Kill RM.\n           }\n \n           try {\n             scheduler.handle(event);\n           } catch (Throwable t) {\n+            // An error occurred, but we are shutting down anyway.\n+            // If it was an InterruptedException, the very act of \n+            // shutdown could have caused it and is probably harmless.\n+            if (stopped) {\n+              LOG.warn(\"Exception during shutdown: \", t);\n+              break;\n+            }\n             LOG.fatal(\"Error in handling event type \" + event.getType()\n                 + \" to the scheduler\", t);\n             if (shouldExitOnError\n                 \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n               LOG.info(\"Exiting, bbye..\");\n               System.exit(-1);\n             }\n           }\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n\n        SchedulerEvent event;\n\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return; // TODO: Kill RM.\n          }\n\n          try {\n            scheduler.handle(event);\n          } catch (Throwable t) {\n            // An error occurred, but we are shutting down anyway.\n            // If it was an InterruptedException, the very act of \n            // shutdown could have caused it and is probably harmless.\n            if (stopped) {\n              LOG.warn(\"Exception during shutdown: \", t);\n              break;\n            }\n            LOG.fatal(\"Error in handling event type \" + event.getType()\n                + \" to the scheduler\", t);\n            if (shouldExitOnError\n                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n              LOG.info(\"Exiting, bbye..\");\n              System.exit(-1);\n            }\n          }\n        }\n      }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "bb9ac4fe4ca59dbd90178a4ba0a307b57fd65864": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4372. Deadlock in Resource Manager (Devaraj K via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354531 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/06/12 7:28 AM",
      "commitName": "bb9ac4fe4ca59dbd90178a4ba0a307b57fd65864",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "03/05/12 8:20 PM",
      "commitNameOld": "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 54.46,
      "commitsBetweenForRepo": 254,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n       public void run() {\n \n         SchedulerEvent event;\n \n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.error(\"Returning, interrupted : \" + e);\n             return; // TODO: Kill RM.\n           }\n \n           try {\n             scheduler.handle(event);\n           } catch (Throwable t) {\n             LOG.fatal(\"Error in handling event type \" + event.getType()\n                 + \" to the scheduler\", t);\n-            if (shouldExitOnError) {\n+            if (shouldExitOnError\n+                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n               LOG.info(\"Exiting, bbye..\");\n               System.exit(-1);\n             }\n           }\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n\n        SchedulerEvent event;\n\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return; // TODO: Kill RM.\n          }\n\n          try {\n            scheduler.handle(event);\n          } catch (Throwable t) {\n            LOG.fatal(\"Error in handling event type \" + event.getType()\n                + \" to the scheduler\", t);\n            if (shouldExitOnError\n                \u0026\u0026 !ShutdownHookManager.get().isShutdownInProgress()) {\n              LOG.info(\"Exiting, bbye..\");\n              System.exit(-1);\n            }\n          }\n        }\n      }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "fe7711df98b9dd16259f6534e8461a29f24caadc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3942. Randomize master key generation for ApplicationTokenSecretManager and roll it every so often. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327220 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 11:48 AM",
      "commitName": "fe7711df98b9dd16259f6534e8461a29f24caadc",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "25/03/12 10:45 PM",
      "commitNameOld": "606114d6029758f2be130960b8fc3102457406ba",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 22.54,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n       public void run() {\n \n         SchedulerEvent event;\n \n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.error(\"Returning, interrupted : \" + e);\n             return; // TODO: Kill RM.\n           }\n \n           try {\n             scheduler.handle(event);\n           } catch (Throwable t) {\n             LOG.fatal(\"Error in handling event type \" + event.getType()\n                 + \" to the scheduler\", t);\n-            if (getConfig().getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n-              Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR)) {\n+            if (shouldExitOnError) {\n               LOG.info(\"Exiting, bbye..\");\n               System.exit(-1);\n             }\n           }\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n\n        SchedulerEvent event;\n\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return; // TODO: Kill RM.\n          }\n\n          try {\n            scheduler.handle(event);\n          } catch (Throwable t) {\n            LOG.fatal(\"Error in handling event type \" + event.getType()\n                + \" to the scheduler\", t);\n            if (shouldExitOnError) {\n              LOG.info(\"Exiting, bbye..\");\n              System.exit(-1);\n            }\n          }\n        }\n      }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "5ee495e6f34faff231ad87ec890188eb63617393": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3634. Fixed all daemons to crash instead of hanging around when their EventHandlers get exceptions. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1291598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/12 9:08 PM",
      "commitName": "5ee495e6f34faff231ad87ec890188eb63617393",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/12 12:03 PM",
      "commitNameOld": "c7d64769c1a72f2aab9958e33a7cf28d02612306",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 16.38,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n       public void run() {\n \n         SchedulerEvent event;\n \n-        while (!Thread.currentThread().isInterrupted()) {\n+        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d eventQueue.take();\n           } catch (InterruptedException e) {\n             LOG.error(\"Returning, interrupted : \" + e);\n             return; // TODO: Kill RM.\n           }\n \n           try {\n             scheduler.handle(event);\n           } catch (Throwable t) {\n-            LOG.error(\"Error in handling event type \" + event.getType()\n+            LOG.fatal(\"Error in handling event type \" + event.getType()\n                 + \" to the scheduler\", t);\n-            return; // TODO: Kill RM.\n+            if (getConfig().getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n+              Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR)) {\n+              LOG.info(\"Exiting, bbye..\");\n+              System.exit(-1);\n+            }\n           }\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n\n        SchedulerEvent event;\n\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return; // TODO: Kill RM.\n          }\n\n          try {\n            scheduler.handle(event);\n          } catch (Throwable t) {\n            LOG.fatal(\"Error in handling event type \" + event.getType()\n                + \" to the scheduler\", t);\n            if (getConfig().getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n              Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR)) {\n              LOG.info(\"Exiting, bbye..\");\n              System.exit(-1);\n            }\n          }\n        }\n      }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public void run() {\n\n        SchedulerEvent event;\n\n        while (!Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return; // TODO: Kill RM.\n          }\n\n          try {\n            scheduler.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the scheduler\", t);\n            return; // TODO: Kill RM.\n          }\n        }\n      }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,21 @@\n-        public void run() {\n-          while (true) {\n-            try {\n-              TaskTrackerAction action \u003d tasksToCleanup.take();\n-              if (action instanceof KillJobAction) {\n-                purgeJob((KillJobAction) action);\n-              } else if (action instanceof KillTaskAction) {\n-                processKillTaskAction((KillTaskAction) action);\n-              } else {\n-                LOG.error(\"Non-delete action given to cleanup thread: \"\n-                          + action);\n-              }\n-            } catch (Throwable except) {\n-              LOG.warn(StringUtils.stringifyException(except));\n-            }\n+      public void run() {\n+\n+        SchedulerEvent event;\n+\n+        while (!Thread.currentThread().isInterrupted()) {\n+          try {\n+            event \u003d eventQueue.take();\n+          } catch (InterruptedException e) {\n+            LOG.error(\"Returning, interrupted : \" + e);\n+            return; // TODO: Kill RM.\n           }\n-        }\n\\ No newline at end of file\n+\n+          try {\n+            scheduler.handle(event);\n+          } catch (Throwable t) {\n+            LOG.error(\"Error in handling event type \" + event.getType()\n+                + \" to the scheduler\", t);\n+            return; // TODO: Kill RM.\n+          }\n+        }\n+      }\n\\ No newline at end of file\n",
          "actualSource": "      public void run() {\n\n        SchedulerEvent event;\n\n        while (!Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return; // TODO: Kill RM.\n          }\n\n          try {\n            scheduler.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the scheduler\", t);\n            return; // TODO: Kill RM.\n          }\n        }\n      }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java",
            "newPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,21 @@\n-        public void run() {\n-          while (true) {\n-            try {\n-              TaskTrackerAction action \u003d tasksToCleanup.take();\n-              if (action instanceof KillJobAction) {\n-                purgeJob((KillJobAction) action);\n-              } else if (action instanceof KillTaskAction) {\n-                processKillTaskAction((KillTaskAction) action);\n-              } else {\n-                LOG.error(\"Non-delete action given to cleanup thread: \"\n-                          + action);\n-              }\n-            } catch (Throwable except) {\n-              LOG.warn(StringUtils.stringifyException(except));\n-            }\n+      public void run() {\n+\n+        SchedulerEvent event;\n+\n+        while (!Thread.currentThread().isInterrupted()) {\n+          try {\n+            event \u003d eventQueue.take();\n+          } catch (InterruptedException e) {\n+            LOG.error(\"Returning, interrupted : \" + e);\n+            return; // TODO: Kill RM.\n           }\n-        }\n\\ No newline at end of file\n+\n+          try {\n+            scheduler.handle(event);\n+          } catch (Throwable t) {\n+            LOG.error(\"Error in handling event type \" + event.getType()\n+                + \" to the scheduler\", t);\n+            return; // TODO: Kill RM.\n+          }\n+        }\n+      }\n\\ No newline at end of file\n",
          "actualSource": "      public void run() {\n\n        SchedulerEvent event;\n\n        while (!Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return; // TODO: Kill RM.\n          }\n\n          try {\n            scheduler.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the scheduler\", t);\n            return; // TODO: Kill RM.\n          }\n        }\n      }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,48 @@\n+  public void run() {\n+    try {\n+      startCleanupThreads();\n+      boolean denied \u003d false;\n+      while (running \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n+        boolean staleState \u003d false;\n+        try {\n+          // This while-loop attempts reconnects if we get network errors\n+          while (running \u0026\u0026 !staleState \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n+            try {\n+              State osState \u003d offerService();\n+              if (osState \u003d\u003d State.STALE) {\n+                staleState \u003d true;\n+              } else if (osState \u003d\u003d State.DENIED) {\n+                denied \u003d true;\n+              }\n+            } catch (Exception ex) {\n+              if (!shuttingDown) {\n+                LOG.info(\"Lost connection to JobTracker [\" +\n+                         jobTrackAddr + \"].  Retrying...\", ex);\n+                try {\n+                  Thread.sleep(5000);\n+                } catch (InterruptedException ie) {\n+                }\n+              }\n+            }\n+          }\n+        } finally {\n+          close();\n+        }\n+        if (shuttingDown) { return; }\n+        LOG.warn(\"Reinitializing local state\");\n+        initialize();\n+      }\n+      if (denied) {\n+        shutdown();\n+      }\n+    } catch (IOException iex) {\n+      LOG.error(\"Got fatal exception while reinitializing TaskTracker: \" +\n+                StringUtils.stringifyException(iex));\n+      return;\n+    }\n+    catch (InterruptedException i) {\n+      LOG.error(\"Got interrupted while reinitializing TaskTracker: \" + \n+          i.getMessage());\n+      return;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    try {\n      startCleanupThreads();\n      boolean denied \u003d false;\n      while (running \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n        boolean staleState \u003d false;\n        try {\n          // This while-loop attempts reconnects if we get network errors\n          while (running \u0026\u0026 !staleState \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n            try {\n              State osState \u003d offerService();\n              if (osState \u003d\u003d State.STALE) {\n                staleState \u003d true;\n              } else if (osState \u003d\u003d State.DENIED) {\n                denied \u003d true;\n              }\n            } catch (Exception ex) {\n              if (!shuttingDown) {\n                LOG.info(\"Lost connection to JobTracker [\" +\n                         jobTrackAddr + \"].  Retrying...\", ex);\n                try {\n                  Thread.sleep(5000);\n                } catch (InterruptedException ie) {\n                }\n              }\n            }\n          }\n        } finally {\n          close();\n        }\n        if (shuttingDown) { return; }\n        LOG.warn(\"Reinitializing local state\");\n        initialize();\n      }\n      if (denied) {\n        shutdown();\n      }\n    } catch (IOException iex) {\n      LOG.error(\"Got fatal exception while reinitializing TaskTracker: \" +\n                StringUtils.stringifyException(iex));\n      return;\n    }\n    catch (InterruptedException i) {\n      LOG.error(\"Got interrupted while reinitializing TaskTracker: \" + \n          i.getMessage());\n      return;\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java"
    }
  }
}