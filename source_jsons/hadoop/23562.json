{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryClientService.java",
  "functionName": "getDelegationToken",
  "functionId": "getDelegationToken___request-GetDelegationTokenRequest",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
  "functionStartLine": 361,
  "functionEndLine": 393,
  "numCommitsSeen": 37,
  "timeTaken": 1649,
  "changeHistory": [
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
    "a2c42330047bf955a6a585dcddf798920d4c8640",
    "7359dc32d3781d5318efee4cf6185616c7c00c18",
    "e17cecf5505dddb92e2212147505c7c900184431",
    "aa60da6c2ec049cc70897afee6c368cb70493773",
    "99bf2902b29c4ab910d5043fe7091f7df04c21fe",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e"
  ],
  "changeHistoryShort": {
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031": "Ybodychange",
    "a2c42330047bf955a6a585dcddf798920d4c8640": "Ybodychange",
    "7359dc32d3781d5318efee4cf6185616c7c00c18": "Ymultichange(Yexceptionschange,Ybodychange)",
    "e17cecf5505dddb92e2212147505c7c900184431": "Ybodychange",
    "aa60da6c2ec049cc70897afee6c368cb70493773": "Ybodychange",
    "99bf2902b29c4ab910d5043fe7091f7df04c21fe": "Ybodychange",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031": {
      "type": "Ybodychange",
      "commitMessage": "YARN-748. Moved BuilderUtils from yarn-common to yarn-server-common for eventual retirement. Contributed by Jian He.\nMAPREDUCE-5297. Updated MR App since BuilderUtils is no longer public after YARN-748. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489257 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 5:34 PM",
      "commitName": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/06/13 2:43 PM",
      "commitNameOld": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.12,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n     public GetDelegationTokenResponse getDelegationToken(\n         GetDelegationTokenRequest request) throws IOException {\n \n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n \n       // Verify that the connection is kerberos authenticated\n         if (!isAllowedDelegationTokenOp()) {\n           throw new IOException(\n               \"Delegation Token can be issued only with kerberos authentication\");\n         }\n \n       GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n           GetDelegationTokenResponse.class);\n \n       String user \u003d ugi.getUserName();\n       Text owner \u003d new Text(user);\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       MRDelegationTokenIdentifier tokenIdentifier \u003d\n           new MRDelegationTokenIdentifier(owner, new Text(\n             request.getRenewer()), realUser);\n       Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n           new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n               jhsDTSecretManager);\n-      org.apache.hadoop.yarn.api.records.Token mrDToken \u003d BuilderUtils.newDelegationToken(\n-        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n-        realJHSToken.getPassword(), realJHSToken.getService().toString());\n+      org.apache.hadoop.yarn.api.records.Token mrDToken \u003d\n+          org.apache.hadoop.yarn.api.records.Token.newInstance(\n+            realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n+            realJHSToken.getPassword(), realJHSToken.getService().toString());\n       response.setDelegationToken(mrDToken);\n       return response;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws IOException {\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n\n      // Verify that the connection is kerberos authenticated\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be issued only with kerberos authentication\");\n        }\n\n      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n          GetDelegationTokenResponse.class);\n\n      String user \u003d ugi.getUserName();\n      Text owner \u003d new Text(user);\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      MRDelegationTokenIdentifier tokenIdentifier \u003d\n          new MRDelegationTokenIdentifier(owner, new Text(\n            request.getRenewer()), realUser);\n      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n              jhsDTSecretManager);\n      org.apache.hadoop.yarn.api.records.Token mrDToken \u003d\n          org.apache.hadoop.yarn.api.records.Token.newInstance(\n            realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n            realJHSToken.getPassword(), realJHSToken.getService().toString());\n      response.setDelegationToken(mrDToken);\n      return response;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "a2c42330047bf955a6a585dcddf798920d4c8640": {
      "type": "Ybodychange",
      "commitMessage": "YARN-717. Put object creation factories for Token in the class itself and remove useless derivations for specific tokens. Contributed by Jian He.\nMAPREDUCE-5289. Updated MR App to use Token directly after YARN-717. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/13 2:43 PM",
      "commitName": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/05/13 8:34 PM",
      "commitNameOld": "7359dc32d3781d5318efee4cf6185616c7c00c18",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 19.76,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     public GetDelegationTokenResponse getDelegationToken(\n         GetDelegationTokenRequest request) throws IOException {\n \n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n \n       // Verify that the connection is kerberos authenticated\n         if (!isAllowedDelegationTokenOp()) {\n           throw new IOException(\n               \"Delegation Token can be issued only with kerberos authentication\");\n         }\n \n       GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n           GetDelegationTokenResponse.class);\n \n       String user \u003d ugi.getUserName();\n       Text owner \u003d new Text(user);\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       MRDelegationTokenIdentifier tokenIdentifier \u003d\n           new MRDelegationTokenIdentifier(owner, new Text(\n             request.getRenewer()), realUser);\n       Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n           new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n               jhsDTSecretManager);\n-      DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n+      org.apache.hadoop.yarn.api.records.Token mrDToken \u003d BuilderUtils.newDelegationToken(\n         realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n         realJHSToken.getPassword(), realJHSToken.getService().toString());\n       response.setDelegationToken(mrDToken);\n       return response;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws IOException {\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n\n      // Verify that the connection is kerberos authenticated\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be issued only with kerberos authentication\");\n        }\n\n      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n          GetDelegationTokenResponse.class);\n\n      String user \u003d ugi.getUserName();\n      Text owner \u003d new Text(user);\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      MRDelegationTokenIdentifier tokenIdentifier \u003d\n          new MRDelegationTokenIdentifier(owner, new Text(\n            request.getRenewer()), realUser);\n      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n              jhsDTSecretManager);\n      org.apache.hadoop.yarn.api.records.Token mrDToken \u003d BuilderUtils.newDelegationToken(\n        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n        realJHSToken.getPassword(), realJHSToken.getService().toString());\n      response.setDelegationToken(mrDToken);\n      return response;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "7359dc32d3781d5318efee4cf6185616c7c00c18": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/05/13 8:34 PM",
      "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/05/13 8:34 PM",
          "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/01/13 12:15 PM",
          "commitNameOld": "e17cecf5505dddb92e2212147505c7c900184431",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 128.3,
          "commitsBetweenForRepo": 767,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,32 @@\n     public GetDelegationTokenResponse getDelegationToken(\n-        GetDelegationTokenRequest request) throws YarnRemoteException {\n-\n-      try {\n+        GetDelegationTokenRequest request) throws IOException {\n \n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n \n       // Verify that the connection is kerberos authenticated\n         if (!isAllowedDelegationTokenOp()) {\n           throw new IOException(\n               \"Delegation Token can be issued only with kerberos authentication\");\n         }\n \n       GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n           GetDelegationTokenResponse.class);\n \n       String user \u003d ugi.getUserName();\n       Text owner \u003d new Text(user);\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       MRDelegationTokenIdentifier tokenIdentifier \u003d\n           new MRDelegationTokenIdentifier(owner, new Text(\n             request.getRenewer()), realUser);\n       Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n           new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n               jhsDTSecretManager);\n       DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n         realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n         realJHSToken.getPassword(), realJHSToken.getService().toString());\n       response.setDelegationToken(mrDToken);\n       return response;\n-      } catch (IOException i) {\n-        throw RPCUtil.getRemoteException(i);\n-      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws IOException {\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n\n      // Verify that the connection is kerberos authenticated\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be issued only with kerberos authentication\");\n        }\n\n      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n          GetDelegationTokenResponse.class);\n\n      String user \u003d ugi.getUserName();\n      Text owner \u003d new Text(user);\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      MRDelegationTokenIdentifier tokenIdentifier \u003d\n          new MRDelegationTokenIdentifier(owner, new Text(\n            request.getRenewer()), realUser);\n      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n              jhsDTSecretManager);\n      DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n        realJHSToken.getPassword(), realJHSToken.getService().toString());\n      response.setDelegationToken(mrDToken);\n      return response;\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
          "extendedDetails": {
            "oldValue": "[YarnRemoteException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/05/13 8:34 PM",
          "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/01/13 12:15 PM",
          "commitNameOld": "e17cecf5505dddb92e2212147505c7c900184431",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 128.3,
          "commitsBetweenForRepo": 767,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,32 @@\n     public GetDelegationTokenResponse getDelegationToken(\n-        GetDelegationTokenRequest request) throws YarnRemoteException {\n-\n-      try {\n+        GetDelegationTokenRequest request) throws IOException {\n \n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n \n       // Verify that the connection is kerberos authenticated\n         if (!isAllowedDelegationTokenOp()) {\n           throw new IOException(\n               \"Delegation Token can be issued only with kerberos authentication\");\n         }\n \n       GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n           GetDelegationTokenResponse.class);\n \n       String user \u003d ugi.getUserName();\n       Text owner \u003d new Text(user);\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       MRDelegationTokenIdentifier tokenIdentifier \u003d\n           new MRDelegationTokenIdentifier(owner, new Text(\n             request.getRenewer()), realUser);\n       Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n           new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n               jhsDTSecretManager);\n       DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n         realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n         realJHSToken.getPassword(), realJHSToken.getService().toString());\n       response.setDelegationToken(mrDToken);\n       return response;\n-      } catch (IOException i) {\n-        throw RPCUtil.getRemoteException(i);\n-      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws IOException {\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n\n      // Verify that the connection is kerberos authenticated\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be issued only with kerberos authentication\");\n        }\n\n      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n          GetDelegationTokenResponse.class);\n\n      String user \u003d ugi.getUserName();\n      Text owner \u003d new Text(user);\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      MRDelegationTokenIdentifier tokenIdentifier \u003d\n          new MRDelegationTokenIdentifier(owner, new Text(\n            request.getRenewer()), realUser);\n      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n              jhsDTSecretManager);\n      DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n        realJHSToken.getPassword(), realJHSToken.getService().toString());\n      response.setDelegationToken(mrDToken);\n      return response;\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
          "extendedDetails": {}
        }
      ]
    },
    "e17cecf5505dddb92e2212147505c7c900184431": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4894. Renewal / cancellation of JobHistory tokens (Siddharth Seth via tgraves\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1429086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/13 12:15 PM",
      "commitName": "e17cecf5505dddb92e2212147505c7c900184431",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "08/05/12 8:07 AM",
      "commitNameOld": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 241.21,
      "commitsBetweenForRepo": 1266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n     public GetDelegationTokenResponse getDelegationToken(\n         GetDelegationTokenRequest request) throws YarnRemoteException {\n \n       try {\n \n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n \n       // Verify that the connection is kerberos authenticated\n-      AuthenticationMethod authMethod \u003d UserGroupInformation\n-        .getRealAuthenticationMethod(ugi);\n-      if (UserGroupInformation.isSecurityEnabled()\n-          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n-       throw new IOException(\n-          \"Delegation Token can be issued only with kerberos authentication\");\n-      }\n+        if (!isAllowedDelegationTokenOp()) {\n+          throw new IOException(\n+              \"Delegation Token can be issued only with kerberos authentication\");\n+        }\n \n       GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n           GetDelegationTokenResponse.class);\n \n       String user \u003d ugi.getUserName();\n       Text owner \u003d new Text(user);\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       MRDelegationTokenIdentifier tokenIdentifier \u003d\n           new MRDelegationTokenIdentifier(owner, new Text(\n             request.getRenewer()), realUser);\n       Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n           new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n               jhsDTSecretManager);\n       DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n         realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n         realJHSToken.getPassword(), realJHSToken.getService().toString());\n       response.setDelegationToken(mrDToken);\n       return response;\n       } catch (IOException i) {\n         throw RPCUtil.getRemoteException(i);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws YarnRemoteException {\n\n      try {\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n\n      // Verify that the connection is kerberos authenticated\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be issued only with kerberos authentication\");\n        }\n\n      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n          GetDelegationTokenResponse.class);\n\n      String user \u003d ugi.getUserName();\n      Text owner \u003d new Text(user);\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      MRDelegationTokenIdentifier tokenIdentifier \u003d\n          new MRDelegationTokenIdentifier(owner, new Text(\n            request.getRenewer()), realUser);\n      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n              jhsDTSecretManager);\n      DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n        realJHSToken.getPassword(), realJHSToken.getService().toString());\n      response.setDelegationToken(mrDToken);\n      return response;\n      } catch (IOException i) {\n        throw RPCUtil.getRemoteException(i);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "aa60da6c2ec049cc70897afee6c368cb70493773": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4162. Correctly set token service (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335567 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/12 8:07 AM",
      "commitName": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "03/05/12 11:35 AM",
      "commitNameOld": "48414b08277b86cdbc34ae36d7c4d204fd838294",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 4.86,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n     public GetDelegationTokenResponse getDelegationToken(\n         GetDelegationTokenRequest request) throws YarnRemoteException {\n \n       try {\n \n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n \n       // Verify that the connection is kerberos authenticated\n       AuthenticationMethod authMethod \u003d UserGroupInformation\n         .getRealAuthenticationMethod(ugi);\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n        throw new IOException(\n           \"Delegation Token can be issued only with kerberos authentication\");\n       }\n \n       GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n           GetDelegationTokenResponse.class);\n \n       String user \u003d ugi.getUserName();\n       Text owner \u003d new Text(user);\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       MRDelegationTokenIdentifier tokenIdentifier \u003d\n           new MRDelegationTokenIdentifier(owner, new Text(\n             request.getRenewer()), realUser);\n       Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n           new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n               jhsDTSecretManager);\n       DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n         realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n-        realJHSToken.getPassword(), bindAddress.getAddress().getHostAddress()\n-            + \":\" + bindAddress.getPort());\n+        realJHSToken.getPassword(), realJHSToken.getService().toString());\n       response.setDelegationToken(mrDToken);\n       return response;\n       } catch (IOException i) {\n         throw RPCUtil.getRemoteException(i);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws YarnRemoteException {\n\n      try {\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n\n      // Verify that the connection is kerberos authenticated\n      AuthenticationMethod authMethod \u003d UserGroupInformation\n        .getRealAuthenticationMethod(ugi);\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n       throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n          GetDelegationTokenResponse.class);\n\n      String user \u003d ugi.getUserName();\n      Text owner \u003d new Text(user);\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      MRDelegationTokenIdentifier tokenIdentifier \u003d\n          new MRDelegationTokenIdentifier(owner, new Text(\n            request.getRenewer()), realUser);\n      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n              jhsDTSecretManager);\n      DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n        realJHSToken.getPassword(), realJHSToken.getService().toString());\n      response.setDelegationToken(mrDToken);\n      return response;\n      } catch (IOException i) {\n        throw RPCUtil.getRemoteException(i);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "99bf2902b29c4ab910d5043fe7091f7df04c21fe": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3896. Add user information to the delegation token issued by the history server. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296401 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/12 11:28 AM",
      "commitName": "99bf2902b29c4ab910d5043fe7091f7df04c21fe",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "29/02/12 12:48 PM",
      "commitNameOld": "3cbb9d20d0bf9d4f28c64bd56c5b9c7dd70ed801",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 1.94,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,41 @@\n     public GetDelegationTokenResponse getDelegationToken(\n         GetDelegationTokenRequest request) throws YarnRemoteException {\n \n       try {\n+\n+      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+\n       // Verify that the connection is kerberos authenticated\n       AuthenticationMethod authMethod \u003d UserGroupInformation\n-        .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n+        .getRealAuthenticationMethod(ugi);\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n        throw new IOException(\n           \"Delegation Token can be issued only with kerberos authentication\");\n       }\n \n       GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n           GetDelegationTokenResponse.class);\n+\n+      String user \u003d ugi.getUserName();\n+      Text owner \u003d new Text(user);\n+      Text realUser \u003d null;\n+      if (ugi.getRealUser() !\u003d null) {\n+        realUser \u003d new Text(ugi.getRealUser().getUserName());\n+      }\n       MRDelegationTokenIdentifier tokenIdentifier \u003d\n-          new MRDelegationTokenIdentifier();\n+          new MRDelegationTokenIdentifier(owner, new Text(\n+            request.getRenewer()), realUser);\n       Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n           new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n               jhsDTSecretManager);\n       DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n         realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n         realJHSToken.getPassword(), bindAddress.getAddress().getHostAddress()\n             + \":\" + bindAddress.getPort());\n       response.setDelegationToken(mrDToken);\n       return response;\n       } catch (IOException i) {\n         throw RPCUtil.getRemoteException(i);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws YarnRemoteException {\n\n      try {\n\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n\n      // Verify that the connection is kerberos authenticated\n      AuthenticationMethod authMethod \u003d UserGroupInformation\n        .getRealAuthenticationMethod(ugi);\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n       throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n          GetDelegationTokenResponse.class);\n\n      String user \u003d ugi.getUserName();\n      Text owner \u003d new Text(user);\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      MRDelegationTokenIdentifier tokenIdentifier \u003d\n          new MRDelegationTokenIdentifier(owner, new Text(\n            request.getRenewer()), realUser);\n      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n              jhsDTSecretManager);\n      DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n        realJHSToken.getPassword(), bindAddress.getAddress().getHostAddress()\n            + \":\" + bindAddress.getPort());\n      response.setDelegationToken(mrDToken);\n      return response;\n      } catch (IOException i) {\n        throw RPCUtil.getRemoteException(i);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3380. Token infrastructure for running clients which are not kerberos authenticated. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/12 5:50 PM",
      "commitName": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,30 @@\n+    public GetDelegationTokenResponse getDelegationToken(\n+        GetDelegationTokenRequest request) throws YarnRemoteException {\n+\n+      try {\n+      // Verify that the connection is kerberos authenticated\n+      AuthenticationMethod authMethod \u003d UserGroupInformation\n+        .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n+      if (UserGroupInformation.isSecurityEnabled()\n+          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n+       throw new IOException(\n+          \"Delegation Token can be issued only with kerberos authentication\");\n+      }\n+\n+      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n+          GetDelegationTokenResponse.class);\n+      MRDelegationTokenIdentifier tokenIdentifier \u003d\n+          new MRDelegationTokenIdentifier();\n+      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n+          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n+              jhsDTSecretManager);\n+      DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n+        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n+        realJHSToken.getPassword(), bindAddress.getAddress().getHostAddress()\n+            + \":\" + bindAddress.getPort());\n+      response.setDelegationToken(mrDToken);\n+      return response;\n+      } catch (IOException i) {\n+        throw RPCUtil.getRemoteException(i);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public GetDelegationTokenResponse getDelegationToken(\n        GetDelegationTokenRequest request) throws YarnRemoteException {\n\n      try {\n      // Verify that the connection is kerberos authenticated\n      AuthenticationMethod authMethod \u003d UserGroupInformation\n        .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n       throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d recordFactory.newRecordInstance(\n          GetDelegationTokenResponse.class);\n      MRDelegationTokenIdentifier tokenIdentifier \u003d\n          new MRDelegationTokenIdentifier();\n      Token\u003cMRDelegationTokenIdentifier\u003e realJHSToken \u003d\n          new Token\u003cMRDelegationTokenIdentifier\u003e(tokenIdentifier,\n              jhsDTSecretManager);\n      DelegationToken mrDToken \u003d BuilderUtils.newDelegationToken(\n        realJHSToken.getIdentifier(), realJHSToken.getKind().toString(),\n        realJHSToken.getPassword(), bindAddress.getAddress().getHostAddress()\n            + \":\" + bindAddress.getPort());\n      response.setDelegationToken(mrDToken);\n      return response;\n      } catch (IOException i) {\n        throw RPCUtil.getRemoteException(i);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java"
    }
  }
}