{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HsTasksBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTasksBlock.java",
  "functionStartLine": 57,
  "functionEndLine": 212,
  "numCommitsSeen": 9,
  "timeTaken": 1796,
  "changeHistory": [
    "488806baca6d84c12b24532ddeacf6d249c2136b",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "1b6f0582fb2561483915132b6fb543d541ca7013",
    "7e2ecffd88ddbf6b8aa793dac63556d1871acc81",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "d9ba4670ed0134816d5d063d48394e31b51c3b35",
    "a3e8f6836b489f8f2ddd785ae038df729c85059f"
  ],
  "changeHistoryShort": {
    "488806baca6d84c12b24532ddeacf6d249c2136b": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "1b6f0582fb2561483915132b6fb543d541ca7013": "Ybodychange",
    "7e2ecffd88ddbf6b8aa793dac63556d1871acc81": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ybodychange",
    "d9ba4670ed0134816d5d063d48394e31b51c3b35": "Ybodychange",
    "a3e8f6836b489f8f2ddd785ae038df729c85059f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "488806baca6d84c12b24532ddeacf6d249c2136b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7140. Refactoring TaskAttemptInfo to separate Map and Reduce tasks. Contributed by Oleksandr Shevchenko\n",
      "commitDate": "14/09/18 1:10 PM",
      "commitName": "488806baca6d84c12b24532ddeacf6d249c2136b",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 413.83,
      "commitsBetweenForRepo": 3715,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,156 +1,156 @@\n   @Override protected void render(Block html) {\n     if (app.getJob() \u003d\u003d null) {\n       html.\n         h2($(TITLE));\n       return;\n     }\n     TaskType type \u003d null;\n     String symbol \u003d $(TASK_TYPE);\n     if (!symbol.isEmpty()) {\n       type \u003d MRApps.taskType(symbol);\n     }\n     THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead;\n     if(type !\u003d null)\n       thead \u003d html.table(\"#\"+app.getJob().getID() \n         + type).$class(\"dt-tasks\").thead();\n     else\n       thead \u003d html.table(\"#tasks\").thead();\n     //Create the spanning row\n     int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n     thead.tr().\n       th().$colspan(5).$class(\"ui-state-default\").__(\"Task\").__().\n       th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n         __(\"Successful Attempt\").__().\n         __();\n \n     TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n           tr().\n             th(\"Name\").\n             th(\"State\").\n             th(\"Start Time\").\n             th(\"Finish Time\").\n             th(\"Elapsed Time\").\n             th(\"Start Time\"); //Attempt\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Shuffle Finish Time\"); //Attempt\n       theadRow.th(\"Merge Finish Time\"); //Attempt\n     }\n \n     theadRow.th(\"Finish Time\"); //Attempt\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n       theadRow.th(\"Elapsed Time Merge\"); //Attempt\n       theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n     }\n     theadRow.th(\"Elapsed Time\"); //Attempt\n \n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow.__().__().tbody();\n \n     // Write all the data into a JavaScript array of arrays for JQuery\n     // DataTables to display\n     StringBuilder tasksTableData \u003d new StringBuilder(\"[\\n\");\n     for (Task task : app.getJob().getTasks().values()) {\n       if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n         continue;\n       }\n       TaskInfo info \u003d new TaskInfo(task);\n       String tid \u003d info.getId();\n \n       long startTime \u003d info.getStartTime();\n       long finishTime \u003d info.getFinishTime();\n       long elapsed \u003d info.getElapsedTime();\n \n       long attemptStartTime \u003d -1;\n       long shuffleFinishTime \u003d -1;\n       long sortFinishTime \u003d -1;\n       long attemptFinishTime \u003d -1;\n       long elapsedShuffleTime \u003d -1;\n       long elapsedSortTime \u003d -1;;\n       long elapsedReduceTime \u003d -1;\n       long attemptElapsed \u003d -1;\n       TaskAttempt successful \u003d info.getSuccessful();\n       if(successful !\u003d null) {\n         TaskAttemptInfo ta;\n         if(type \u003d\u003d TaskType.REDUCE) {\n-          ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n+          ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful);\n           shuffleFinishTime \u003d rta.getShuffleFinishTime();\n           sortFinishTime \u003d rta.getMergeFinishTime();\n           elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n           elapsedSortTime \u003d rta.getElapsedMergeTime();\n           elapsedReduceTime \u003d rta.getElapsedReduceTime();\n           ta \u003d rta;\n         } else {\n-          ta \u003d new TaskAttemptInfo(successful, type, false);\n+          ta \u003d new MapTaskAttemptInfo(successful, false);\n         }\n         attemptStartTime \u003d ta.getStartTime();\n         attemptFinishTime \u003d ta.getFinishTime();\n         attemptElapsed \u003d ta.getElapsedTime();\n       }\n \n       tasksTableData.append(\"[\\\"\")\n       .append(\"\u003ca href\u003d\u0027\" + url(\"task\", tid)).append(\"\u0027\u003e\")\n       .append(tid).append(\"\u003c/a\u003e\\\",\\\"\")\n       .append(info.getState()).append(\"\\\",\\\"\")\n       .append(startTime).append(\"\\\",\\\"\")\n       .append(finishTime).append(\"\\\",\\\"\")\n       .append(elapsed).append(\"\\\",\\\"\")\n       .append(attemptStartTime).append(\"\\\",\\\"\");\n \n       if(type \u003d\u003d TaskType.REDUCE) {\n         tasksTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n         .append(sortFinishTime).append(\"\\\",\\\"\");\n       }\n       tasksTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n       if(type \u003d\u003d TaskType.REDUCE) {\n         tasksTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n         .append(elapsedSortTime).append(\"\\\",\\\"\")\n         .append(elapsedReduceTime).append(\"\\\",\\\"\");\n       }\n       tasksTableData.append(attemptElapsed).append(\"\\\"],\\n\");\n     }\n     //Remove the last comma and close off the array of arrays\n     if(tasksTableData.charAt(tasksTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       tasksTableData.delete(\n         tasksTableData.length()-2, tasksTableData.length()-1);\n     }\n     tasksTableData.append(\"]\");\n     html.script().$type(\"text/javascript\").\n         __(\"var tasksTableData\u003d\" + tasksTableData).__();\n     \n     TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n     footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n         .$value(\"ID\").__().__().th().input(\"search_init\").$type(InputType.text)\n         .$name(\"state\").$value(\"State\").__().__().th().input(\"search_init\")\n         .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\").__().__()\n         .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n         .$value(\"Finish Time\").__().__().th().input(\"search_init\")\n         .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\").__()\n         .__().th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"merge_time\").$value(\"Merge Time\").__().__();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__();\n \n     footRow.__().__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    if (app.getJob() \u003d\u003d null) {\n      html.\n        h2($(TITLE));\n      return;\n    }\n    TaskType type \u003d null;\n    String symbol \u003d $(TASK_TYPE);\n    if (!symbol.isEmpty()) {\n      type \u003d MRApps.taskType(symbol);\n    }\n    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead;\n    if(type !\u003d null)\n      thead \u003d html.table(\"#\"+app.getJob().getID() \n        + type).$class(\"dt-tasks\").thead();\n    else\n      thead \u003d html.table(\"#tasks\").thead();\n    //Create the spanning row\n    int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n    thead.tr().\n      th().$colspan(5).$class(\"ui-state-default\").__(\"Task\").__().\n      th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n        __(\"Successful Attempt\").__().\n        __();\n\n    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n          tr().\n            th(\"Name\").\n            th(\"State\").\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\"Elapsed Time\").\n            th(\"Start Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Shuffle Finish Time\"); //Attempt\n      theadRow.th(\"Merge Finish Time\"); //Attempt\n    }\n\n    theadRow.th(\"Finish Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n      theadRow.th(\"Elapsed Time Merge\"); //Attempt\n      theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n    }\n    theadRow.th(\"Elapsed Time\"); //Attempt\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow.__().__().tbody();\n\n    // Write all the data into a JavaScript array of arrays for JQuery\n    // DataTables to display\n    StringBuilder tasksTableData \u003d new StringBuilder(\"[\\n\");\n    for (Task task : app.getJob().getTasks().values()) {\n      if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n        continue;\n      }\n      TaskInfo info \u003d new TaskInfo(task);\n      String tid \u003d info.getId();\n\n      long startTime \u003d info.getStartTime();\n      long finishTime \u003d info.getFinishTime();\n      long elapsed \u003d info.getElapsedTime();\n\n      long attemptStartTime \u003d -1;\n      long shuffleFinishTime \u003d -1;\n      long sortFinishTime \u003d -1;\n      long attemptFinishTime \u003d -1;\n      long elapsedShuffleTime \u003d -1;\n      long elapsedSortTime \u003d -1;;\n      long elapsedReduceTime \u003d -1;\n      long attemptElapsed \u003d -1;\n      TaskAttempt successful \u003d info.getSuccessful();\n      if(successful !\u003d null) {\n        TaskAttemptInfo ta;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful);\n          shuffleFinishTime \u003d rta.getShuffleFinishTime();\n          sortFinishTime \u003d rta.getMergeFinishTime();\n          elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n          elapsedSortTime \u003d rta.getElapsedMergeTime();\n          elapsedReduceTime \u003d rta.getElapsedReduceTime();\n          ta \u003d rta;\n        } else {\n          ta \u003d new MapTaskAttemptInfo(successful, false);\n        }\n        attemptStartTime \u003d ta.getStartTime();\n        attemptFinishTime \u003d ta.getFinishTime();\n        attemptElapsed \u003d ta.getElapsedTime();\n      }\n\n      tasksTableData.append(\"[\\\"\")\n      .append(\"\u003ca href\u003d\u0027\" + url(\"task\", tid)).append(\"\u0027\u003e\")\n      .append(tid).append(\"\u003c/a\u003e\\\",\\\"\")\n      .append(info.getState()).append(\"\\\",\\\"\")\n      .append(startTime).append(\"\\\",\\\"\")\n      .append(finishTime).append(\"\\\",\\\"\")\n      .append(elapsed).append(\"\\\",\\\"\")\n      .append(attemptStartTime).append(\"\\\",\\\"\");\n\n      if(type \u003d\u003d TaskType.REDUCE) {\n        tasksTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n        .append(sortFinishTime).append(\"\\\",\\\"\");\n      }\n      tasksTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n      if(type \u003d\u003d TaskType.REDUCE) {\n        tasksTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n        .append(elapsedSortTime).append(\"\\\",\\\"\")\n        .append(elapsedReduceTime).append(\"\\\",\\\"\");\n      }\n      tasksTableData.append(attemptElapsed).append(\"\\\"],\\n\");\n    }\n    //Remove the last comma and close off the array of arrays\n    if(tasksTableData.charAt(tasksTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      tasksTableData.delete(\n        tasksTableData.length()-2, tasksTableData.length()-1);\n    }\n    tasksTableData.append(\"]\");\n    html.script().$type(\"text/javascript\").\n        __(\"var tasksTableData\u003d\" + tasksTableData).__();\n    \n    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n    footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n        .$value(\"ID\").__().__().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"state\").$value(\"State\").__().__().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\").__().__()\n        .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n        .$value(\"Finish Time\").__().__().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\").__()\n        .__().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"merge_time\").$value(\"Merge Time\").__().__();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__();\n\n    footRow.__().__().__();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTasksBlock.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/03/13 9:56 AM",
      "commitNameOld": "1b6f0582fb2561483915132b6fb543d541ca7013",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1596.3,
      "commitsBetweenForRepo": 11312,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,156 +1,156 @@\n   @Override protected void render(Block html) {\n     if (app.getJob() \u003d\u003d null) {\n       html.\n         h2($(TITLE));\n       return;\n     }\n     TaskType type \u003d null;\n     String symbol \u003d $(TASK_TYPE);\n     if (!symbol.isEmpty()) {\n       type \u003d MRApps.taskType(symbol);\n     }\n     THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead;\n     if(type !\u003d null)\n       thead \u003d html.table(\"#\"+app.getJob().getID() \n         + type).$class(\"dt-tasks\").thead();\n     else\n       thead \u003d html.table(\"#tasks\").thead();\n     //Create the spanning row\n     int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n     thead.tr().\n-      th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n+      th().$colspan(5).$class(\"ui-state-default\").__(\"Task\").__().\n       th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n-        _(\"Successful Attempt\")._().\n-    _();\n+        __(\"Successful Attempt\").__().\n+        __();\n \n     TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n           tr().\n             th(\"Name\").\n             th(\"State\").\n             th(\"Start Time\").\n             th(\"Finish Time\").\n             th(\"Elapsed Time\").\n             th(\"Start Time\"); //Attempt\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Shuffle Finish Time\"); //Attempt\n       theadRow.th(\"Merge Finish Time\"); //Attempt\n     }\n \n     theadRow.th(\"Finish Time\"); //Attempt\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n       theadRow.th(\"Elapsed Time Merge\"); //Attempt\n       theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n     }\n     theadRow.th(\"Elapsed Time\"); //Attempt\n \n-    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow.__().__().tbody();\n \n     // Write all the data into a JavaScript array of arrays for JQuery\n     // DataTables to display\n     StringBuilder tasksTableData \u003d new StringBuilder(\"[\\n\");\n     for (Task task : app.getJob().getTasks().values()) {\n       if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n         continue;\n       }\n       TaskInfo info \u003d new TaskInfo(task);\n       String tid \u003d info.getId();\n \n       long startTime \u003d info.getStartTime();\n       long finishTime \u003d info.getFinishTime();\n       long elapsed \u003d info.getElapsedTime();\n \n       long attemptStartTime \u003d -1;\n       long shuffleFinishTime \u003d -1;\n       long sortFinishTime \u003d -1;\n       long attemptFinishTime \u003d -1;\n       long elapsedShuffleTime \u003d -1;\n       long elapsedSortTime \u003d -1;;\n       long elapsedReduceTime \u003d -1;\n       long attemptElapsed \u003d -1;\n       TaskAttempt successful \u003d info.getSuccessful();\n       if(successful !\u003d null) {\n         TaskAttemptInfo ta;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n           shuffleFinishTime \u003d rta.getShuffleFinishTime();\n           sortFinishTime \u003d rta.getMergeFinishTime();\n           elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n           elapsedSortTime \u003d rta.getElapsedMergeTime();\n           elapsedReduceTime \u003d rta.getElapsedReduceTime();\n           ta \u003d rta;\n         } else {\n           ta \u003d new TaskAttemptInfo(successful, type, false);\n         }\n         attemptStartTime \u003d ta.getStartTime();\n         attemptFinishTime \u003d ta.getFinishTime();\n         attemptElapsed \u003d ta.getElapsedTime();\n       }\n \n       tasksTableData.append(\"[\\\"\")\n       .append(\"\u003ca href\u003d\u0027\" + url(\"task\", tid)).append(\"\u0027\u003e\")\n       .append(tid).append(\"\u003c/a\u003e\\\",\\\"\")\n       .append(info.getState()).append(\"\\\",\\\"\")\n       .append(startTime).append(\"\\\",\\\"\")\n       .append(finishTime).append(\"\\\",\\\"\")\n       .append(elapsed).append(\"\\\",\\\"\")\n       .append(attemptStartTime).append(\"\\\",\\\"\");\n \n       if(type \u003d\u003d TaskType.REDUCE) {\n         tasksTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n         .append(sortFinishTime).append(\"\\\",\\\"\");\n       }\n       tasksTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n       if(type \u003d\u003d TaskType.REDUCE) {\n         tasksTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n         .append(elapsedSortTime).append(\"\\\",\\\"\")\n         .append(elapsedReduceTime).append(\"\\\",\\\"\");\n       }\n       tasksTableData.append(attemptElapsed).append(\"\\\"],\\n\");\n     }\n     //Remove the last comma and close off the array of arrays\n     if(tasksTableData.charAt(tasksTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       tasksTableData.delete(\n         tasksTableData.length()-2, tasksTableData.length()-1);\n     }\n     tasksTableData.append(\"]\");\n     html.script().$type(\"text/javascript\").\n-    _(\"var tasksTableData\u003d\" + tasksTableData)._();\n+        __(\"var tasksTableData\u003d\" + tasksTableData).__();\n     \n-    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n+    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n     footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n-        .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n-        .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n-        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n+        .$value(\"ID\").__().__().th().input(\"search_init\").$type(InputType.text)\n+        .$name(\"state\").$value(\"State\").__().__().th().input(\"search_init\")\n+        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\").__().__()\n         .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n-        .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n-        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n-        ._().th().input(\"search_init\").$type(InputType.text)\n-        .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n+        .$value(\"Finish Time\").__().__().th().input(\"search_init\")\n+        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\").__()\n+        .__().th().input(\"search_init\").$type(InputType.text)\n+        .$name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n-          .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n+          .$name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n-          .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n+          .$name(\"merge_time\").$value(\"Merge Time\").__().__();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n-        .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n+        .$name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n-          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n+          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n-          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n+          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n-          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n+          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n-        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n+        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__();\n \n-    footRow._()._()._();\n+    footRow.__().__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    if (app.getJob() \u003d\u003d null) {\n      html.\n        h2($(TITLE));\n      return;\n    }\n    TaskType type \u003d null;\n    String symbol \u003d $(TASK_TYPE);\n    if (!symbol.isEmpty()) {\n      type \u003d MRApps.taskType(symbol);\n    }\n    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead;\n    if(type !\u003d null)\n      thead \u003d html.table(\"#\"+app.getJob().getID() \n        + type).$class(\"dt-tasks\").thead();\n    else\n      thead \u003d html.table(\"#tasks\").thead();\n    //Create the spanning row\n    int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n    thead.tr().\n      th().$colspan(5).$class(\"ui-state-default\").__(\"Task\").__().\n      th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n        __(\"Successful Attempt\").__().\n        __();\n\n    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n          tr().\n            th(\"Name\").\n            th(\"State\").\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\"Elapsed Time\").\n            th(\"Start Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Shuffle Finish Time\"); //Attempt\n      theadRow.th(\"Merge Finish Time\"); //Attempt\n    }\n\n    theadRow.th(\"Finish Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n      theadRow.th(\"Elapsed Time Merge\"); //Attempt\n      theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n    }\n    theadRow.th(\"Elapsed Time\"); //Attempt\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow.__().__().tbody();\n\n    // Write all the data into a JavaScript array of arrays for JQuery\n    // DataTables to display\n    StringBuilder tasksTableData \u003d new StringBuilder(\"[\\n\");\n    for (Task task : app.getJob().getTasks().values()) {\n      if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n        continue;\n      }\n      TaskInfo info \u003d new TaskInfo(task);\n      String tid \u003d info.getId();\n\n      long startTime \u003d info.getStartTime();\n      long finishTime \u003d info.getFinishTime();\n      long elapsed \u003d info.getElapsedTime();\n\n      long attemptStartTime \u003d -1;\n      long shuffleFinishTime \u003d -1;\n      long sortFinishTime \u003d -1;\n      long attemptFinishTime \u003d -1;\n      long elapsedShuffleTime \u003d -1;\n      long elapsedSortTime \u003d -1;;\n      long elapsedReduceTime \u003d -1;\n      long attemptElapsed \u003d -1;\n      TaskAttempt successful \u003d info.getSuccessful();\n      if(successful !\u003d null) {\n        TaskAttemptInfo ta;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n          shuffleFinishTime \u003d rta.getShuffleFinishTime();\n          sortFinishTime \u003d rta.getMergeFinishTime();\n          elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n          elapsedSortTime \u003d rta.getElapsedMergeTime();\n          elapsedReduceTime \u003d rta.getElapsedReduceTime();\n          ta \u003d rta;\n        } else {\n          ta \u003d new TaskAttemptInfo(successful, type, false);\n        }\n        attemptStartTime \u003d ta.getStartTime();\n        attemptFinishTime \u003d ta.getFinishTime();\n        attemptElapsed \u003d ta.getElapsedTime();\n      }\n\n      tasksTableData.append(\"[\\\"\")\n      .append(\"\u003ca href\u003d\u0027\" + url(\"task\", tid)).append(\"\u0027\u003e\")\n      .append(tid).append(\"\u003c/a\u003e\\\",\\\"\")\n      .append(info.getState()).append(\"\\\",\\\"\")\n      .append(startTime).append(\"\\\",\\\"\")\n      .append(finishTime).append(\"\\\",\\\"\")\n      .append(elapsed).append(\"\\\",\\\"\")\n      .append(attemptStartTime).append(\"\\\",\\\"\");\n\n      if(type \u003d\u003d TaskType.REDUCE) {\n        tasksTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n        .append(sortFinishTime).append(\"\\\",\\\"\");\n      }\n      tasksTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n      if(type \u003d\u003d TaskType.REDUCE) {\n        tasksTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n        .append(elapsedSortTime).append(\"\\\",\\\"\")\n        .append(elapsedReduceTime).append(\"\\\",\\\"\");\n      }\n      tasksTableData.append(attemptElapsed).append(\"\\\"],\\n\");\n    }\n    //Remove the last comma and close off the array of arrays\n    if(tasksTableData.charAt(tasksTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      tasksTableData.delete(\n        tasksTableData.length()-2, tasksTableData.length()-1);\n    }\n    tasksTableData.append(\"]\");\n    html.script().$type(\"text/javascript\").\n        __(\"var tasksTableData\u003d\" + tasksTableData).__();\n    \n    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n    footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n        .$value(\"ID\").__().__().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"state\").$value(\"State\").__().__().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\").__().__()\n        .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n        .$value(\"Finish Time\").__().__().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\").__()\n        .__().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"merge_time\").$value(\"Merge Time\").__().__();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__();\n\n    footRow.__().__().__();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTasksBlock.java",
      "extendedDetails": {}
    },
    "1b6f0582fb2561483915132b6fb543d541ca7013": {
      "type": "Ybodychange",
      "commitMessage": "YARN-237. Refreshing the RM page forgets how many rows I had in my Datatables (jian he via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1456536 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/13 9:56 AM",
      "commitName": "1b6f0582fb2561483915132b6fb543d541ca7013",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "12/02/13 5:15 PM",
      "commitNameOld": "c2d6407070338f26baaa7d67c968501a987dfe1a",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 29.65,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,152 +1,156 @@\n   @Override protected void render(Block html) {\n     if (app.getJob() \u003d\u003d null) {\n       html.\n         h2($(TITLE));\n       return;\n     }\n     TaskType type \u003d null;\n     String symbol \u003d $(TASK_TYPE);\n     if (!symbol.isEmpty()) {\n       type \u003d MRApps.taskType(symbol);\n     }\n-\n-    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead \u003d html.table(\"#tasks\").thead();\n+    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead;\n+    if(type !\u003d null)\n+      thead \u003d html.table(\"#\"+app.getJob().getID() \n+        + type).$class(\"dt-tasks\").thead();\n+    else\n+      thead \u003d html.table(\"#tasks\").thead();\n     //Create the spanning row\n     int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n     thead.tr().\n       th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n       th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n         _(\"Successful Attempt\")._().\n     _();\n \n     TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n           tr().\n             th(\"Name\").\n             th(\"State\").\n             th(\"Start Time\").\n             th(\"Finish Time\").\n             th(\"Elapsed Time\").\n             th(\"Start Time\"); //Attempt\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Shuffle Finish Time\"); //Attempt\n       theadRow.th(\"Merge Finish Time\"); //Attempt\n     }\n \n     theadRow.th(\"Finish Time\"); //Attempt\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n       theadRow.th(\"Elapsed Time Merge\"); //Attempt\n       theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n     }\n     theadRow.th(\"Elapsed Time\"); //Attempt\n \n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n \n     // Write all the data into a JavaScript array of arrays for JQuery\n     // DataTables to display\n     StringBuilder tasksTableData \u003d new StringBuilder(\"[\\n\");\n     for (Task task : app.getJob().getTasks().values()) {\n       if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n         continue;\n       }\n       TaskInfo info \u003d new TaskInfo(task);\n       String tid \u003d info.getId();\n \n       long startTime \u003d info.getStartTime();\n       long finishTime \u003d info.getFinishTime();\n       long elapsed \u003d info.getElapsedTime();\n \n       long attemptStartTime \u003d -1;\n       long shuffleFinishTime \u003d -1;\n       long sortFinishTime \u003d -1;\n       long attemptFinishTime \u003d -1;\n       long elapsedShuffleTime \u003d -1;\n       long elapsedSortTime \u003d -1;;\n       long elapsedReduceTime \u003d -1;\n       long attemptElapsed \u003d -1;\n       TaskAttempt successful \u003d info.getSuccessful();\n       if(successful !\u003d null) {\n         TaskAttemptInfo ta;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n           shuffleFinishTime \u003d rta.getShuffleFinishTime();\n           sortFinishTime \u003d rta.getMergeFinishTime();\n           elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n           elapsedSortTime \u003d rta.getElapsedMergeTime();\n           elapsedReduceTime \u003d rta.getElapsedReduceTime();\n           ta \u003d rta;\n         } else {\n           ta \u003d new TaskAttemptInfo(successful, type, false);\n         }\n         attemptStartTime \u003d ta.getStartTime();\n         attemptFinishTime \u003d ta.getFinishTime();\n         attemptElapsed \u003d ta.getElapsedTime();\n       }\n \n       tasksTableData.append(\"[\\\"\")\n       .append(\"\u003ca href\u003d\u0027\" + url(\"task\", tid)).append(\"\u0027\u003e\")\n       .append(tid).append(\"\u003c/a\u003e\\\",\\\"\")\n       .append(info.getState()).append(\"\\\",\\\"\")\n       .append(startTime).append(\"\\\",\\\"\")\n       .append(finishTime).append(\"\\\",\\\"\")\n       .append(elapsed).append(\"\\\",\\\"\")\n       .append(attemptStartTime).append(\"\\\",\\\"\");\n \n       if(type \u003d\u003d TaskType.REDUCE) {\n         tasksTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n         .append(sortFinishTime).append(\"\\\",\\\"\");\n       }\n       tasksTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n       if(type \u003d\u003d TaskType.REDUCE) {\n         tasksTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n         .append(elapsedSortTime).append(\"\\\",\\\"\")\n         .append(elapsedReduceTime).append(\"\\\",\\\"\");\n       }\n       tasksTableData.append(attemptElapsed).append(\"\\\"],\\n\");\n     }\n     //Remove the last comma and close off the array of arrays\n     if(tasksTableData.charAt(tasksTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       tasksTableData.delete(\n         tasksTableData.length()-2, tasksTableData.length()-1);\n     }\n     tasksTableData.append(\"]\");\n     html.script().$type(\"text/javascript\").\n     _(\"var tasksTableData\u003d\" + tasksTableData)._();\n     \n     TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n     footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n         .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n         .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n         .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n         .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n         .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n         .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n         ._().th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n \n     footRow._()._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    if (app.getJob() \u003d\u003d null) {\n      html.\n        h2($(TITLE));\n      return;\n    }\n    TaskType type \u003d null;\n    String symbol \u003d $(TASK_TYPE);\n    if (!symbol.isEmpty()) {\n      type \u003d MRApps.taskType(symbol);\n    }\n    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead;\n    if(type !\u003d null)\n      thead \u003d html.table(\"#\"+app.getJob().getID() \n        + type).$class(\"dt-tasks\").thead();\n    else\n      thead \u003d html.table(\"#tasks\").thead();\n    //Create the spanning row\n    int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n    thead.tr().\n      th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n      th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n        _(\"Successful Attempt\")._().\n    _();\n\n    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n          tr().\n            th(\"Name\").\n            th(\"State\").\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\"Elapsed Time\").\n            th(\"Start Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Shuffle Finish Time\"); //Attempt\n      theadRow.th(\"Merge Finish Time\"); //Attempt\n    }\n\n    theadRow.th(\"Finish Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n      theadRow.th(\"Elapsed Time Merge\"); //Attempt\n      theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n    }\n    theadRow.th(\"Elapsed Time\"); //Attempt\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n\n    // Write all the data into a JavaScript array of arrays for JQuery\n    // DataTables to display\n    StringBuilder tasksTableData \u003d new StringBuilder(\"[\\n\");\n    for (Task task : app.getJob().getTasks().values()) {\n      if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n        continue;\n      }\n      TaskInfo info \u003d new TaskInfo(task);\n      String tid \u003d info.getId();\n\n      long startTime \u003d info.getStartTime();\n      long finishTime \u003d info.getFinishTime();\n      long elapsed \u003d info.getElapsedTime();\n\n      long attemptStartTime \u003d -1;\n      long shuffleFinishTime \u003d -1;\n      long sortFinishTime \u003d -1;\n      long attemptFinishTime \u003d -1;\n      long elapsedShuffleTime \u003d -1;\n      long elapsedSortTime \u003d -1;;\n      long elapsedReduceTime \u003d -1;\n      long attemptElapsed \u003d -1;\n      TaskAttempt successful \u003d info.getSuccessful();\n      if(successful !\u003d null) {\n        TaskAttemptInfo ta;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n          shuffleFinishTime \u003d rta.getShuffleFinishTime();\n          sortFinishTime \u003d rta.getMergeFinishTime();\n          elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n          elapsedSortTime \u003d rta.getElapsedMergeTime();\n          elapsedReduceTime \u003d rta.getElapsedReduceTime();\n          ta \u003d rta;\n        } else {\n          ta \u003d new TaskAttemptInfo(successful, type, false);\n        }\n        attemptStartTime \u003d ta.getStartTime();\n        attemptFinishTime \u003d ta.getFinishTime();\n        attemptElapsed \u003d ta.getElapsedTime();\n      }\n\n      tasksTableData.append(\"[\\\"\")\n      .append(\"\u003ca href\u003d\u0027\" + url(\"task\", tid)).append(\"\u0027\u003e\")\n      .append(tid).append(\"\u003c/a\u003e\\\",\\\"\")\n      .append(info.getState()).append(\"\\\",\\\"\")\n      .append(startTime).append(\"\\\",\\\"\")\n      .append(finishTime).append(\"\\\",\\\"\")\n      .append(elapsed).append(\"\\\",\\\"\")\n      .append(attemptStartTime).append(\"\\\",\\\"\");\n\n      if(type \u003d\u003d TaskType.REDUCE) {\n        tasksTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n        .append(sortFinishTime).append(\"\\\",\\\"\");\n      }\n      tasksTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n      if(type \u003d\u003d TaskType.REDUCE) {\n        tasksTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n        .append(elapsedSortTime).append(\"\\\",\\\"\")\n        .append(elapsedReduceTime).append(\"\\\",\\\"\");\n      }\n      tasksTableData.append(attemptElapsed).append(\"\\\"],\\n\");\n    }\n    //Remove the last comma and close off the array of arrays\n    if(tasksTableData.charAt(tasksTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      tasksTableData.delete(\n        tasksTableData.length()-2, tasksTableData.length()-1);\n    }\n    tasksTableData.append(\"]\");\n    html.script().$type(\"text/javascript\").\n    _(\"var tasksTableData\u003d\" + tasksTableData)._();\n    \n    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n    footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n        .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n        .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n        .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n        ._().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n\n    footRow._()._()._();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTasksBlock.java",
      "extendedDetails": {}
    },
    "7e2ecffd88ddbf6b8aa793dac63556d1871acc81": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4720. Browser thinks History Server main page JS is taking too long (Ravi Prakash via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409580 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 4:01 PM",
      "commitName": "7e2ecffd88ddbf6b8aa793dac63556d1871acc81",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 337.04,
      "commitsBetweenForRepo": 2156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,166 +1,151 @@\n   @Override protected void render(Block html) {\n     if (app.getJob() \u003d\u003d null) {\n       html.\n         h2($(TITLE));\n       return;\n     }\n     TaskType type \u003d null;\n     String symbol \u003d $(TASK_TYPE);\n     if (!symbol.isEmpty()) {\n       type \u003d MRApps.taskType(symbol);\n     }\n \n     THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead \u003d html.table(\"#tasks\").thead();\n     //Create the spanning row\n     int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n     thead.tr().\n       th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n       th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n         _(\"Successful Attempt\")._().\n     _();\n \n     TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n           tr().\n             th(\"Name\").\n             th(\"State\").\n             th(\"Start Time\").\n             th(\"Finish Time\").\n             th(\"Elapsed Time\").\n             th(\"Start Time\"); //Attempt\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Shuffle Finish Time\"); //Attempt\n       theadRow.th(\"Merge Finish Time\"); //Attempt\n     }\n \n     theadRow.th(\"Finish Time\"); //Attempt\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n       theadRow.th(\"Elapsed Time Merge\"); //Attempt\n       theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n     }\n     theadRow.th(\"Elapsed Time\"); //Attempt\n \n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n+\n+    // Write all the data into a JavaScript array of arrays for JQuery\n+    // DataTables to display\n+    StringBuilder tasksTableData \u003d new StringBuilder(\"[\\n\");\n     for (Task task : app.getJob().getTasks().values()) {\n       if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n         continue;\n       }\n       TaskInfo info \u003d new TaskInfo(task);\n       String tid \u003d info.getId();\n \n       long startTime \u003d info.getStartTime();\n       long finishTime \u003d info.getFinishTime();\n       long elapsed \u003d info.getElapsedTime();\n \n       long attemptStartTime \u003d -1;\n       long shuffleFinishTime \u003d -1;\n       long sortFinishTime \u003d -1;\n       long attemptFinishTime \u003d -1;\n       long elapsedShuffleTime \u003d -1;\n       long elapsedSortTime \u003d -1;;\n       long elapsedReduceTime \u003d -1;\n       long attemptElapsed \u003d -1;\n       TaskAttempt successful \u003d info.getSuccessful();\n       if(successful !\u003d null) {\n         TaskAttemptInfo ta;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n           shuffleFinishTime \u003d rta.getShuffleFinishTime();\n           sortFinishTime \u003d rta.getMergeFinishTime();\n           elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n           elapsedSortTime \u003d rta.getElapsedMergeTime();\n           elapsedReduceTime \u003d rta.getElapsedReduceTime();\n           ta \u003d rta;\n         } else {\n           ta \u003d new TaskAttemptInfo(successful, type, false);\n         }\n         attemptStartTime \u003d ta.getStartTime();\n         attemptFinishTime \u003d ta.getFinishTime();\n         attemptElapsed \u003d ta.getElapsedTime();\n       }\n-\n-      TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n-      row.\n-          td().\n-            br().$title(String.valueOf(info.getTaskNum()))._(). // sorting\n-            a(url(\"task\", tid), tid)._().\n-          td(info.getState()).\n-          td().\n-            br().$title(String.valueOf(startTime))._().\n-            _(Times.format(startTime))._().\n-          td().\n-            br().$title(String.valueOf(finishTime))._().\n-            _(Times.format(finishTime))._().\n-          td().\n-            br().$title(String.valueOf(elapsed))._().\n-            _(formatTime(elapsed))._().\n-          td().\n-            br().$title(String.valueOf(attemptStartTime))._().\n-            _(Times.format(attemptStartTime))._();\n-      if(type \u003d\u003d TaskType.REDUCE) {\n-        row.td().\n-          br().$title(String.valueOf(shuffleFinishTime))._().\n-          _(Times.format(shuffleFinishTime))._();\n-        row.td().\n-        br().$title(String.valueOf(sortFinishTime))._().\n-        _(Times.format(sortFinishTime))._();\n-      }\n-      row.\n-          td().\n-            br().$title(String.valueOf(attemptFinishTime))._().\n-            _(Times.format(attemptFinishTime))._();\n+      tasksTableData.append(\"[\\\"\")\n+      .append(\"\u003ca href\u003d\u0027\" + url(\"task\", tid)).append(\"\u0027\u003e\")\n+      .append(tid).append(\"\u003c/a\u003e\\\",\\\"\")\n+      .append(info.getState()).append(\"\\\",\\\"\")\n+      .append(startTime).append(\"\\\",\\\"\")\n+      .append(finishTime).append(\"\\\",\\\"\")\n+      .append(elapsed).append(\"\\\",\\\"\")\n+      .append(attemptStartTime).append(\"\\\",\\\"\");\n \n       if(type \u003d\u003d TaskType.REDUCE) {\n-        row.td().\n-          br().$title(String.valueOf(elapsedShuffleTime))._().\n-        _(formatTime(elapsedShuffleTime))._();\n-        row.td().\n-        br().$title(String.valueOf(elapsedSortTime))._().\n-      _(formatTime(elapsedSortTime))._();\n-        row.td().\n-          br().$title(String.valueOf(elapsedReduceTime))._().\n-        _(formatTime(elapsedReduceTime))._();\n+        tasksTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n+        .append(sortFinishTime).append(\"\\\",\\\"\");\n       }\n-\n-      row.td().\n-        br().$title(String.valueOf(attemptElapsed))._().\n-        _(formatTime(attemptElapsed))._();\n-      row._();\n+      tasksTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n+      if(type \u003d\u003d TaskType.REDUCE) {\n+        tasksTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n+        .append(elapsedSortTime).append(\"\\\",\\\"\")\n+        .append(elapsedReduceTime).append(\"\\\",\\\"\");\n+      }\n+      tasksTableData.append(attemptElapsed).append(\"\\\"],\\n\");\n     }\n+    //Remove the last comma and close off the array of arrays\n+    if(tasksTableData.charAt(tasksTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+      tasksTableData.delete(\n+        tasksTableData.length()-2, tasksTableData.length()-1);\n+    }\n+    tasksTableData.append(\"]\");\n+    html.script().$type(\"text/javascript\").\n+    _(\"var tasksTableData\u003d\" + tasksTableData)._();\n+    \n     TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n     footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n         .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n         .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n         .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n         .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n         .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n         .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n         ._().th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n \n     footRow._()._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    if (app.getJob() \u003d\u003d null) {\n      html.\n        h2($(TITLE));\n      return;\n    }\n    TaskType type \u003d null;\n    String symbol \u003d $(TASK_TYPE);\n    if (!symbol.isEmpty()) {\n      type \u003d MRApps.taskType(symbol);\n    }\n\n    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead \u003d html.table(\"#tasks\").thead();\n    //Create the spanning row\n    int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n    thead.tr().\n      th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n      th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n        _(\"Successful Attempt\")._().\n    _();\n\n    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n          tr().\n            th(\"Name\").\n            th(\"State\").\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\"Elapsed Time\").\n            th(\"Start Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Shuffle Finish Time\"); //Attempt\n      theadRow.th(\"Merge Finish Time\"); //Attempt\n    }\n\n    theadRow.th(\"Finish Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n      theadRow.th(\"Elapsed Time Merge\"); //Attempt\n      theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n    }\n    theadRow.th(\"Elapsed Time\"); //Attempt\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n\n    // Write all the data into a JavaScript array of arrays for JQuery\n    // DataTables to display\n    StringBuilder tasksTableData \u003d new StringBuilder(\"[\\n\");\n    for (Task task : app.getJob().getTasks().values()) {\n      if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n        continue;\n      }\n      TaskInfo info \u003d new TaskInfo(task);\n      String tid \u003d info.getId();\n\n      long startTime \u003d info.getStartTime();\n      long finishTime \u003d info.getFinishTime();\n      long elapsed \u003d info.getElapsedTime();\n\n      long attemptStartTime \u003d -1;\n      long shuffleFinishTime \u003d -1;\n      long sortFinishTime \u003d -1;\n      long attemptFinishTime \u003d -1;\n      long elapsedShuffleTime \u003d -1;\n      long elapsedSortTime \u003d -1;;\n      long elapsedReduceTime \u003d -1;\n      long attemptElapsed \u003d -1;\n      TaskAttempt successful \u003d info.getSuccessful();\n      if(successful !\u003d null) {\n        TaskAttemptInfo ta;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n          shuffleFinishTime \u003d rta.getShuffleFinishTime();\n          sortFinishTime \u003d rta.getMergeFinishTime();\n          elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n          elapsedSortTime \u003d rta.getElapsedMergeTime();\n          elapsedReduceTime \u003d rta.getElapsedReduceTime();\n          ta \u003d rta;\n        } else {\n          ta \u003d new TaskAttemptInfo(successful, type, false);\n        }\n        attemptStartTime \u003d ta.getStartTime();\n        attemptFinishTime \u003d ta.getFinishTime();\n        attemptElapsed \u003d ta.getElapsedTime();\n      }\n      tasksTableData.append(\"[\\\"\")\n      .append(\"\u003ca href\u003d\u0027\" + url(\"task\", tid)).append(\"\u0027\u003e\")\n      .append(tid).append(\"\u003c/a\u003e\\\",\\\"\")\n      .append(info.getState()).append(\"\\\",\\\"\")\n      .append(startTime).append(\"\\\",\\\"\")\n      .append(finishTime).append(\"\\\",\\\"\")\n      .append(elapsed).append(\"\\\",\\\"\")\n      .append(attemptStartTime).append(\"\\\",\\\"\");\n\n      if(type \u003d\u003d TaskType.REDUCE) {\n        tasksTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n        .append(sortFinishTime).append(\"\\\",\\\"\");\n      }\n      tasksTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n      if(type \u003d\u003d TaskType.REDUCE) {\n        tasksTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n        .append(elapsedSortTime).append(\"\\\",\\\"\")\n        .append(elapsedReduceTime).append(\"\\\",\\\"\");\n      }\n      tasksTableData.append(attemptElapsed).append(\"\\\"],\\n\");\n    }\n    //Remove the last comma and close off the array of arrays\n    if(tasksTableData.charAt(tasksTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      tasksTableData.delete(\n        tasksTableData.length()-2, tasksTableData.length()-1);\n    }\n    tasksTableData.append(\"]\");\n    html.script().$type(\"text/javascript\").\n    _(\"var tasksTableData\u003d\" + tasksTableData)._();\n    \n    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n    footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n        .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n        .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n        .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n        ._().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n\n    footRow._()._()._();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTasksBlock.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "15/09/11 3:21 PM",
      "commitNameOld": "d9ba4670ed0134816d5d063d48394e31b51c3b35",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 89.03,
      "commitsBetweenForRepo": 623,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,165 +1,166 @@\n   @Override protected void render(Block html) {\n     if (app.getJob() \u003d\u003d null) {\n       html.\n         h2($(TITLE));\n       return;\n     }\n     TaskType type \u003d null;\n     String symbol \u003d $(TASK_TYPE);\n     if (!symbol.isEmpty()) {\n       type \u003d MRApps.taskType(symbol);\n     }\n-    \n+\n     THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead \u003d html.table(\"#tasks\").thead();\n     //Create the spanning row\n     int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n     thead.tr().\n       th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n       th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n         _(\"Successful Attempt\")._().\n     _();\n-    \n+\n     TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n           tr().\n             th(\"Name\").\n             th(\"State\").\n             th(\"Start Time\").\n             th(\"Finish Time\").\n             th(\"Elapsed Time\").\n             th(\"Start Time\"); //Attempt\n-    \n+\n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Shuffle Finish Time\"); //Attempt\n       theadRow.th(\"Merge Finish Time\"); //Attempt\n     }\n-    \n+\n     theadRow.th(\"Finish Time\"); //Attempt\n-    \n+\n     if(type \u003d\u003d TaskType.REDUCE) {\n       theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n       theadRow.th(\"Elapsed Time Merge\"); //Attempt\n       theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n     }\n     theadRow.th(\"Elapsed Time\"); //Attempt\n-    \n+\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n     for (Task task : app.getJob().getTasks().values()) {\n       if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n         continue;\n       }\n-      String tid \u003d MRApps.toString(task.getID());\n-      \n-      TaskReport report \u003d task.getReport();\n-      long startTime \u003d report.getStartTime();\n-      long finishTime \u003d report.getFinishTime();\n-      long elapsed \u003d Times.elapsed(startTime, finishTime, false);\n-      \n+      TaskInfo info \u003d new TaskInfo(task);\n+      String tid \u003d info.getId();\n+\n+      long startTime \u003d info.getStartTime();\n+      long finishTime \u003d info.getFinishTime();\n+      long elapsed \u003d info.getElapsedTime();\n+\n       long attemptStartTime \u003d -1;\n       long shuffleFinishTime \u003d -1;\n       long sortFinishTime \u003d -1;\n       long attemptFinishTime \u003d -1;\n       long elapsedShuffleTime \u003d -1;\n       long elapsedSortTime \u003d -1;;\n       long elapsedReduceTime \u003d -1;\n       long attemptElapsed \u003d -1;\n-      TaskAttempt successful \u003d getSuccessfulAttempt(task);\n+      TaskAttempt successful \u003d info.getSuccessful();\n       if(successful !\u003d null) {\n-        attemptStartTime \u003d successful.getLaunchTime();\n-        attemptFinishTime \u003d successful.getFinishTime();\n+        TaskAttemptInfo ta;\n         if(type \u003d\u003d TaskType.REDUCE) {\n-          shuffleFinishTime \u003d successful.getShuffleFinishTime();\n-          sortFinishTime \u003d successful.getSortFinishTime();\n-          elapsedShuffleTime \u003d\n-              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n-          elapsedSortTime \u003d\n-              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n-          elapsedReduceTime \u003d\n-              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n+          ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n+          shuffleFinishTime \u003d rta.getShuffleFinishTime();\n+          sortFinishTime \u003d rta.getMergeFinishTime();\n+          elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n+          elapsedSortTime \u003d rta.getElapsedMergeTime();\n+          elapsedReduceTime \u003d rta.getElapsedReduceTime();\n+          ta \u003d rta;\n+        } else {\n+          ta \u003d new TaskAttemptInfo(successful, type, false);\n         }\n-        attemptElapsed \u003d\n-            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n+        attemptStartTime \u003d ta.getStartTime();\n+        attemptFinishTime \u003d ta.getFinishTime();\n+        attemptElapsed \u003d ta.getElapsedTime();\n       }\n-      \n+\n       TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n       row.\n           td().\n-            br().$title(String.valueOf(task.getID().getId()))._(). // sorting\n+            br().$title(String.valueOf(info.getTaskNum()))._(). // sorting\n             a(url(\"task\", tid), tid)._().\n-          td(report.getTaskState().toString()).\n+          td(info.getState()).\n           td().\n             br().$title(String.valueOf(startTime))._().\n             _(Times.format(startTime))._().\n           td().\n             br().$title(String.valueOf(finishTime))._().\n             _(Times.format(finishTime))._().\n           td().\n             br().$title(String.valueOf(elapsed))._().\n             _(formatTime(elapsed))._().\n           td().\n             br().$title(String.valueOf(attemptStartTime))._().\n             _(Times.format(attemptStartTime))._();\n       if(type \u003d\u003d TaskType.REDUCE) {\n         row.td().\n           br().$title(String.valueOf(shuffleFinishTime))._().\n           _(Times.format(shuffleFinishTime))._();\n         row.td().\n         br().$title(String.valueOf(sortFinishTime))._().\n         _(Times.format(sortFinishTime))._();\n       }\n       row.\n           td().\n             br().$title(String.valueOf(attemptFinishTime))._().\n             _(Times.format(attemptFinishTime))._();\n-      \n+\n       if(type \u003d\u003d TaskType.REDUCE) {\n         row.td().\n           br().$title(String.valueOf(elapsedShuffleTime))._().\n         _(formatTime(elapsedShuffleTime))._();\n         row.td().\n         br().$title(String.valueOf(elapsedSortTime))._().\n       _(formatTime(elapsedSortTime))._();\n         row.td().\n           br().$title(String.valueOf(elapsedReduceTime))._().\n         _(formatTime(elapsedReduceTime))._();\n       }\n-      \n+\n       row.td().\n         br().$title(String.valueOf(attemptElapsed))._().\n         _(formatTime(attemptElapsed))._();\n       row._();\n     }\n     TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n     footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n         .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n         .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n         .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n         .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n         .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n         .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n         ._().th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n-    \n+\n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n \n     if(type \u003d\u003d TaskType.REDUCE) {\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n       footRow.th().input(\"search_init\").$type(InputType.text)\n           .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n     }\n \n     footRow.th().input(\"search_init\").$type(InputType.text)\n         .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n-    \n+\n     footRow._()._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    if (app.getJob() \u003d\u003d null) {\n      html.\n        h2($(TITLE));\n      return;\n    }\n    TaskType type \u003d null;\n    String symbol \u003d $(TASK_TYPE);\n    if (!symbol.isEmpty()) {\n      type \u003d MRApps.taskType(symbol);\n    }\n\n    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead \u003d html.table(\"#tasks\").thead();\n    //Create the spanning row\n    int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n    thead.tr().\n      th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n      th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n        _(\"Successful Attempt\")._().\n    _();\n\n    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n          tr().\n            th(\"Name\").\n            th(\"State\").\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\"Elapsed Time\").\n            th(\"Start Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Shuffle Finish Time\"); //Attempt\n      theadRow.th(\"Merge Finish Time\"); //Attempt\n    }\n\n    theadRow.th(\"Finish Time\"); //Attempt\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n      theadRow.th(\"Elapsed Time Merge\"); //Attempt\n      theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n    }\n    theadRow.th(\"Elapsed Time\"); //Attempt\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n    for (Task task : app.getJob().getTasks().values()) {\n      if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n        continue;\n      }\n      TaskInfo info \u003d new TaskInfo(task);\n      String tid \u003d info.getId();\n\n      long startTime \u003d info.getStartTime();\n      long finishTime \u003d info.getFinishTime();\n      long elapsed \u003d info.getElapsedTime();\n\n      long attemptStartTime \u003d -1;\n      long shuffleFinishTime \u003d -1;\n      long sortFinishTime \u003d -1;\n      long attemptFinishTime \u003d -1;\n      long elapsedShuffleTime \u003d -1;\n      long elapsedSortTime \u003d -1;;\n      long elapsedReduceTime \u003d -1;\n      long attemptElapsed \u003d -1;\n      TaskAttempt successful \u003d info.getSuccessful();\n      if(successful !\u003d null) {\n        TaskAttemptInfo ta;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          ReduceTaskAttemptInfo rta \u003d new ReduceTaskAttemptInfo(successful, type);\n          shuffleFinishTime \u003d rta.getShuffleFinishTime();\n          sortFinishTime \u003d rta.getMergeFinishTime();\n          elapsedShuffleTime \u003d rta.getElapsedShuffleTime();\n          elapsedSortTime \u003d rta.getElapsedMergeTime();\n          elapsedReduceTime \u003d rta.getElapsedReduceTime();\n          ta \u003d rta;\n        } else {\n          ta \u003d new TaskAttemptInfo(successful, type, false);\n        }\n        attemptStartTime \u003d ta.getStartTime();\n        attemptFinishTime \u003d ta.getFinishTime();\n        attemptElapsed \u003d ta.getElapsedTime();\n      }\n\n      TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n      row.\n          td().\n            br().$title(String.valueOf(info.getTaskNum()))._(). // sorting\n            a(url(\"task\", tid), tid)._().\n          td(info.getState()).\n          td().\n            br().$title(String.valueOf(startTime))._().\n            _(Times.format(startTime))._().\n          td().\n            br().$title(String.valueOf(finishTime))._().\n            _(Times.format(finishTime))._().\n          td().\n            br().$title(String.valueOf(elapsed))._().\n            _(formatTime(elapsed))._().\n          td().\n            br().$title(String.valueOf(attemptStartTime))._().\n            _(Times.format(attemptStartTime))._();\n      if(type \u003d\u003d TaskType.REDUCE) {\n        row.td().\n          br().$title(String.valueOf(shuffleFinishTime))._().\n          _(Times.format(shuffleFinishTime))._();\n        row.td().\n        br().$title(String.valueOf(sortFinishTime))._().\n        _(Times.format(sortFinishTime))._();\n      }\n      row.\n          td().\n            br().$title(String.valueOf(attemptFinishTime))._().\n            _(Times.format(attemptFinishTime))._();\n\n      if(type \u003d\u003d TaskType.REDUCE) {\n        row.td().\n          br().$title(String.valueOf(elapsedShuffleTime))._().\n        _(formatTime(elapsedShuffleTime))._();\n        row.td().\n        br().$title(String.valueOf(elapsedSortTime))._().\n      _(formatTime(elapsedSortTime))._();\n        row.td().\n          br().$title(String.valueOf(elapsedReduceTime))._().\n        _(formatTime(elapsedReduceTime))._();\n      }\n\n      row.td().\n        br().$title(String.valueOf(attemptElapsed))._().\n        _(formatTime(attemptElapsed))._();\n      row._();\n    }\n    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n    footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n        .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n        .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n        .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n        ._().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n\n    footRow._()._()._();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTasksBlock.java",
      "extendedDetails": {}
    },
    "d9ba4670ed0134816d5d063d48394e31b51c3b35": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2672. MR-279: JobHistory Server needs Analysis this job. (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171297 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/09/11 3:21 PM",
      "commitName": "d9ba4670ed0134816d5d063d48394e31b51c3b35",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "13/09/11 3:55 PM",
      "commitNameOld": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,165 @@\n   @Override protected void render(Block html) {\n     if (app.getJob() \u003d\u003d null) {\n       html.\n         h2($(TITLE));\n       return;\n     }\n     TaskType type \u003d null;\n     String symbol \u003d $(TASK_TYPE);\n     if (!symbol.isEmpty()) {\n       type \u003d MRApps.taskType(symbol);\n     }\n-    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n-      table(\"#tasks\").\n-        thead().\n+    \n+    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead \u003d html.table(\"#tasks\").thead();\n+    //Create the spanning row\n+    int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n+    thead.tr().\n+      th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n+      th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n+        _(\"Successful Attempt\")._().\n+    _();\n+    \n+    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n           tr().\n-            th(\"Task\").\n+            th(\"Name\").\n             th(\"State\").\n             th(\"Start Time\").\n             th(\"Finish Time\").\n-            th(\"Elapsed Time\")._()._().\n-        tbody();\n+            th(\"Elapsed Time\").\n+            th(\"Start Time\"); //Attempt\n+    \n+    if(type \u003d\u003d TaskType.REDUCE) {\n+      theadRow.th(\"Shuffle Finish Time\"); //Attempt\n+      theadRow.th(\"Merge Finish Time\"); //Attempt\n+    }\n+    \n+    theadRow.th(\"Finish Time\"); //Attempt\n+    \n+    if(type \u003d\u003d TaskType.REDUCE) {\n+      theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n+      theadRow.th(\"Elapsed Time Merge\"); //Attempt\n+      theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n+    }\n+    theadRow.th(\"Elapsed Time\"); //Attempt\n+    \n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n     for (Task task : app.getJob().getTasks().values()) {\n       if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n         continue;\n       }\n       String tid \u003d MRApps.toString(task.getID());\n+      \n       TaskReport report \u003d task.getReport();\n       long startTime \u003d report.getStartTime();\n       long finishTime \u003d report.getFinishTime();\n-      long elapsed \u003d Times.elapsed(startTime, finishTime);\n-      tbody.\n-        tr().\n+      long elapsed \u003d Times.elapsed(startTime, finishTime, false);\n+      \n+      long attemptStartTime \u003d -1;\n+      long shuffleFinishTime \u003d -1;\n+      long sortFinishTime \u003d -1;\n+      long attemptFinishTime \u003d -1;\n+      long elapsedShuffleTime \u003d -1;\n+      long elapsedSortTime \u003d -1;;\n+      long elapsedReduceTime \u003d -1;\n+      long attemptElapsed \u003d -1;\n+      TaskAttempt successful \u003d getSuccessfulAttempt(task);\n+      if(successful !\u003d null) {\n+        attemptStartTime \u003d successful.getLaunchTime();\n+        attemptFinishTime \u003d successful.getFinishTime();\n+        if(type \u003d\u003d TaskType.REDUCE) {\n+          shuffleFinishTime \u003d successful.getShuffleFinishTime();\n+          sortFinishTime \u003d successful.getSortFinishTime();\n+          elapsedShuffleTime \u003d\n+              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n+          elapsedSortTime \u003d\n+              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n+          elapsedReduceTime \u003d\n+              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n+        }\n+        attemptElapsed \u003d\n+            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n+      }\n+      \n+      TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n+      row.\n           td().\n             br().$title(String.valueOf(task.getID().getId()))._(). // sorting\n             a(url(\"task\", tid), tid)._().\n           td(report.getTaskState().toString()).\n           td().\n             br().$title(String.valueOf(startTime))._().\n             _(Times.format(startTime))._().\n           td().\n             br().$title(String.valueOf(finishTime))._().\n             _(Times.format(finishTime))._().\n           td().\n             br().$title(String.valueOf(elapsed))._().\n-            _(StringUtils.formatTime(elapsed))._()._();\n+            _(formatTime(elapsed))._().\n+          td().\n+            br().$title(String.valueOf(attemptStartTime))._().\n+            _(Times.format(attemptStartTime))._();\n+      if(type \u003d\u003d TaskType.REDUCE) {\n+        row.td().\n+          br().$title(String.valueOf(shuffleFinishTime))._().\n+          _(Times.format(shuffleFinishTime))._();\n+        row.td().\n+        br().$title(String.valueOf(sortFinishTime))._().\n+        _(Times.format(sortFinishTime))._();\n+      }\n+      row.\n+          td().\n+            br().$title(String.valueOf(attemptFinishTime))._().\n+            _(Times.format(attemptFinishTime))._();\n+      \n+      if(type \u003d\u003d TaskType.REDUCE) {\n+        row.td().\n+          br().$title(String.valueOf(elapsedShuffleTime))._().\n+        _(formatTime(elapsedShuffleTime))._();\n+        row.td().\n+        br().$title(String.valueOf(elapsedSortTime))._().\n+      _(formatTime(elapsedSortTime))._();\n+        row.td().\n+          br().$title(String.valueOf(elapsedReduceTime))._().\n+        _(formatTime(elapsedReduceTime))._();\n+      }\n+      \n+      row.td().\n+        br().$title(String.valueOf(attemptElapsed))._().\n+        _(formatTime(attemptElapsed))._();\n+      row._();\n     }\n-    tbody._()._();\n+    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n+    footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n+        .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n+        .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n+        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n+        .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n+        .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n+        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n+        ._().th().input(\"search_init\").$type(InputType.text)\n+        .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n+    \n+    if(type \u003d\u003d TaskType.REDUCE) {\n+      footRow.th().input(\"search_init\").$type(InputType.text)\n+          .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n+      footRow.th().input(\"search_init\").$type(InputType.text)\n+          .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n+    }\n+\n+    footRow.th().input(\"search_init\").$type(InputType.text)\n+        .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n+\n+    if(type \u003d\u003d TaskType.REDUCE) {\n+      footRow.th().input(\"search_init\").$type(InputType.text)\n+          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n+      footRow.th().input(\"search_init\").$type(InputType.text)\n+          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n+      footRow.th().input(\"search_init\").$type(InputType.text)\n+          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n+    }\n+\n+    footRow.th().input(\"search_init\").$type(InputType.text)\n+        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n+    \n+    footRow._()._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    if (app.getJob() \u003d\u003d null) {\n      html.\n        h2($(TITLE));\n      return;\n    }\n    TaskType type \u003d null;\n    String symbol \u003d $(TASK_TYPE);\n    if (!symbol.isEmpty()) {\n      type \u003d MRApps.taskType(symbol);\n    }\n    \n    THEAD\u003cTABLE\u003cHamlet\u003e\u003e thead \u003d html.table(\"#tasks\").thead();\n    //Create the spanning row\n    int attemptColSpan \u003d type \u003d\u003d TaskType.REDUCE ? 8 : 3;\n    thead.tr().\n      th().$colspan(5).$class(\"ui-state-default\")._(\"Task\")._().\n      th().$colspan(attemptColSpan).$class(\"ui-state-default\").\n        _(\"Successful Attempt\")._().\n    _();\n    \n    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e theadRow \u003d thead.\n          tr().\n            th(\"Name\").\n            th(\"State\").\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\"Elapsed Time\").\n            th(\"Start Time\"); //Attempt\n    \n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Shuffle Finish Time\"); //Attempt\n      theadRow.th(\"Merge Finish Time\"); //Attempt\n    }\n    \n    theadRow.th(\"Finish Time\"); //Attempt\n    \n    if(type \u003d\u003d TaskType.REDUCE) {\n      theadRow.th(\"Elapsed Time Shuffle\"); //Attempt\n      theadRow.th(\"Elapsed Time Merge\"); //Attempt\n      theadRow.th(\"Elapsed Time Reduce\"); //Attempt\n    }\n    theadRow.th(\"Elapsed Time\"); //Attempt\n    \n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d theadRow._()._().tbody();\n    for (Task task : app.getJob().getTasks().values()) {\n      if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n        continue;\n      }\n      String tid \u003d MRApps.toString(task.getID());\n      \n      TaskReport report \u003d task.getReport();\n      long startTime \u003d report.getStartTime();\n      long finishTime \u003d report.getFinishTime();\n      long elapsed \u003d Times.elapsed(startTime, finishTime, false);\n      \n      long attemptStartTime \u003d -1;\n      long shuffleFinishTime \u003d -1;\n      long sortFinishTime \u003d -1;\n      long attemptFinishTime \u003d -1;\n      long elapsedShuffleTime \u003d -1;\n      long elapsedSortTime \u003d -1;;\n      long elapsedReduceTime \u003d -1;\n      long attemptElapsed \u003d -1;\n      TaskAttempt successful \u003d getSuccessfulAttempt(task);\n      if(successful !\u003d null) {\n        attemptStartTime \u003d successful.getLaunchTime();\n        attemptFinishTime \u003d successful.getFinishTime();\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d successful.getShuffleFinishTime();\n          sortFinishTime \u003d successful.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n      }\n      \n      TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n      row.\n          td().\n            br().$title(String.valueOf(task.getID().getId()))._(). // sorting\n            a(url(\"task\", tid), tid)._().\n          td(report.getTaskState().toString()).\n          td().\n            br().$title(String.valueOf(startTime))._().\n            _(Times.format(startTime))._().\n          td().\n            br().$title(String.valueOf(finishTime))._().\n            _(Times.format(finishTime))._().\n          td().\n            br().$title(String.valueOf(elapsed))._().\n            _(formatTime(elapsed))._().\n          td().\n            br().$title(String.valueOf(attemptStartTime))._().\n            _(Times.format(attemptStartTime))._();\n      if(type \u003d\u003d TaskType.REDUCE) {\n        row.td().\n          br().$title(String.valueOf(shuffleFinishTime))._().\n          _(Times.format(shuffleFinishTime))._();\n        row.td().\n        br().$title(String.valueOf(sortFinishTime))._().\n        _(Times.format(sortFinishTime))._();\n      }\n      row.\n          td().\n            br().$title(String.valueOf(attemptFinishTime))._().\n            _(Times.format(attemptFinishTime))._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        row.td().\n          br().$title(String.valueOf(elapsedShuffleTime))._().\n        _(formatTime(elapsedShuffleTime))._();\n        row.td().\n        br().$title(String.valueOf(elapsedSortTime))._().\n      _(formatTime(elapsedSortTime))._();\n        row.td().\n          br().$title(String.valueOf(elapsedReduceTime))._().\n        _(formatTime(elapsedReduceTime))._();\n      }\n      \n      row.td().\n        br().$title(String.valueOf(attemptElapsed))._().\n        _(formatTime(attemptElapsed))._();\n      row._();\n    }\n    TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n    footRow.th().input(\"search_init\").$type(InputType.text).$name(\"task\")\n        .$value(\"ID\")._()._().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"state\").$value(\"State\")._()._().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"start_time\").$value(\"Start Time\")._()._()\n        .th().input(\"search_init\").$type(InputType.text).$name(\"finish_time\")\n        .$value(\"Finish Time\")._()._().th().input(\"search_init\")\n        .$type(InputType.text).$name(\"elapsed_time\").$value(\"Elapsed Time\")._()\n        ._().th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n    \n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"merge_time\").$value(\"Merge Time\")._()._();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n\n    if(type \u003d\u003d TaskType.REDUCE) {\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n      footRow.th().input(\"search_init\").$type(InputType.text)\n          .$name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n    }\n\n    footRow.th().input(\"search_init\").$type(InputType.text)\n        .$name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._();\n    \n    footRow._()._()._();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTasksBlock.java",
      "extendedDetails": {}
    },
    "a3e8f6836b489f8f2ddd785ae038df729c85059f": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2676. MR-279: JobHistory Job page needs reformatted. (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170379 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/11 3:55 PM",
      "commitName": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,48 @@\n+  @Override protected void render(Block html) {\n+    if (app.getJob() \u003d\u003d null) {\n+      html.\n+        h2($(TITLE));\n+      return;\n+    }\n+    TaskType type \u003d null;\n+    String symbol \u003d $(TASK_TYPE);\n+    if (!symbol.isEmpty()) {\n+      type \u003d MRApps.taskType(symbol);\n+    }\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n+      table(\"#tasks\").\n+        thead().\n+          tr().\n+            th(\"Task\").\n+            th(\"State\").\n+            th(\"Start Time\").\n+            th(\"Finish Time\").\n+            th(\"Elapsed Time\")._()._().\n+        tbody();\n+    for (Task task : app.getJob().getTasks().values()) {\n+      if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n+        continue;\n+      }\n+      String tid \u003d MRApps.toString(task.getID());\n+      TaskReport report \u003d task.getReport();\n+      long startTime \u003d report.getStartTime();\n+      long finishTime \u003d report.getFinishTime();\n+      long elapsed \u003d Times.elapsed(startTime, finishTime);\n+      tbody.\n+        tr().\n+          td().\n+            br().$title(String.valueOf(task.getID().getId()))._(). // sorting\n+            a(url(\"task\", tid), tid)._().\n+          td(report.getTaskState().toString()).\n+          td().\n+            br().$title(String.valueOf(startTime))._().\n+            _(Times.format(startTime))._().\n+          td().\n+            br().$title(String.valueOf(finishTime))._().\n+            _(Times.format(finishTime))._().\n+          td().\n+            br().$title(String.valueOf(elapsed))._().\n+            _(StringUtils.formatTime(elapsed))._()._();\n+    }\n+    tbody._()._();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    if (app.getJob() \u003d\u003d null) {\n      html.\n        h2($(TITLE));\n      return;\n    }\n    TaskType type \u003d null;\n    String symbol \u003d $(TASK_TYPE);\n    if (!symbol.isEmpty()) {\n      type \u003d MRApps.taskType(symbol);\n    }\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n      table(\"#tasks\").\n        thead().\n          tr().\n            th(\"Task\").\n            th(\"State\").\n            th(\"Start Time\").\n            th(\"Finish Time\").\n            th(\"Elapsed Time\")._()._().\n        tbody();\n    for (Task task : app.getJob().getTasks().values()) {\n      if (type !\u003d null \u0026\u0026 task.getType() !\u003d type) {\n        continue;\n      }\n      String tid \u003d MRApps.toString(task.getID());\n      TaskReport report \u003d task.getReport();\n      long startTime \u003d report.getStartTime();\n      long finishTime \u003d report.getFinishTime();\n      long elapsed \u003d Times.elapsed(startTime, finishTime);\n      tbody.\n        tr().\n          td().\n            br().$title(String.valueOf(task.getID().getId()))._(). // sorting\n            a(url(\"task\", tid), tid)._().\n          td(report.getTaskState().toString()).\n          td().\n            br().$title(String.valueOf(startTime))._().\n            _(Times.format(startTime))._().\n          td().\n            br().$title(String.valueOf(finishTime))._().\n            _(Times.format(finishTime))._().\n          td().\n            br().$title(String.valueOf(elapsed))._().\n            _(StringUtils.formatTime(elapsed))._()._();\n    }\n    tbody._()._();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTasksBlock.java"
    }
  }
}