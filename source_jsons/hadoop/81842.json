{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CrcUtil.java",
  "functionName": "getMonomial",
  "functionId": "getMonomial___lengthBytes-long__mod-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CrcUtil.java",
  "functionStartLine": 48,
  "functionEndLine": 73,
  "numCommitsSeen": 1,
  "timeTaken": 1301,
  "changeHistory": [
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf"
  ],
  "changeHistoryShort": {
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13056. Expose file-level composite CRCs in HDFS which are comparable across different instances/layouts. Contributed by Dennis Huo.\n",
      "commitDate": "10/04/18 9:31 PM",
      "commitName": "7c9cdad6d04c98db5a83e2108219bf6e6c903daf",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,26 @@\n+  public static int getMonomial(long lengthBytes, int mod) {\n+    if (lengthBytes \u003d\u003d 0) {\n+      return MULTIPLICATIVE_IDENTITY;\n+    } else if (lengthBytes \u003c 0) {\n+      throw new IllegalArgumentException(\n+          \"lengthBytes must be positive, got \" + lengthBytes);\n+    }\n+\n+    // Decompose into\n+    // x^degree \u003d\u003d x ^ SUM(bit[i] * 2^i) \u003d\u003d PRODUCT(x ^ (bit[i] * 2^i))\n+    // Generate each x^(2^i) by squaring.\n+    // Since \u0027degree\u0027 is in \u0027bits\u0027, but we only need to support byte\n+    // granularity we can begin with x^8.\n+    int multiplier \u003d MULTIPLICATIVE_IDENTITY \u003e\u003e\u003e 8;\n+    int product \u003d MULTIPLICATIVE_IDENTITY;\n+    long degree \u003d lengthBytes;\n+    while (degree \u003e 0) {\n+      if ((degree \u0026 1) !\u003d 0) {\n+        product \u003d (product \u003d\u003d MULTIPLICATIVE_IDENTITY) ? multiplier :\n+            galoisFieldMultiply(product, multiplier, mod);\n+      }\n+      multiplier \u003d galoisFieldMultiply(multiplier, multiplier, mod);\n+      degree \u003e\u003e\u003d 1;\n+    }\n+    return product;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int getMonomial(long lengthBytes, int mod) {\n    if (lengthBytes \u003d\u003d 0) {\n      return MULTIPLICATIVE_IDENTITY;\n    } else if (lengthBytes \u003c 0) {\n      throw new IllegalArgumentException(\n          \"lengthBytes must be positive, got \" + lengthBytes);\n    }\n\n    // Decompose into\n    // x^degree \u003d\u003d x ^ SUM(bit[i] * 2^i) \u003d\u003d PRODUCT(x ^ (bit[i] * 2^i))\n    // Generate each x^(2^i) by squaring.\n    // Since \u0027degree\u0027 is in \u0027bits\u0027, but we only need to support byte\n    // granularity we can begin with x^8.\n    int multiplier \u003d MULTIPLICATIVE_IDENTITY \u003e\u003e\u003e 8;\n    int product \u003d MULTIPLICATIVE_IDENTITY;\n    long degree \u003d lengthBytes;\n    while (degree \u003e 0) {\n      if ((degree \u0026 1) !\u003d 0) {\n        product \u003d (product \u003d\u003d MULTIPLICATIVE_IDENTITY) ? multiplier :\n            galoisFieldMultiply(product, multiplier, mod);\n      }\n      multiplier \u003d galoisFieldMultiply(multiplier, multiplier, mod);\n      degree \u003e\u003e\u003d 1;\n    }\n    return product;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CrcUtil.java"
    }
  }
}