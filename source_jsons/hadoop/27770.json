{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationRegistryClient.java",
  "functionName": "writeAMRMTokenForUAM",
  "functionId": "writeAMRMTokenForUAM___appId-ApplicationId__subClusterId-String__token-Token__AMRMTokenIdentifier__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/utils/FederationRegistryClient.java",
  "functionStartLine": 118,
  "functionEndLine": 149,
  "numCommitsSeen": 2,
  "timeTaken": 1536,
  "changeHistory": [
    "3090922805699b8374a359e92323884a4177dc4e",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32"
  ],
  "changeHistoryShort": {
    "3090922805699b8374a359e92323884a4177dc4e": "Ymodifierchange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "17/11/17 5:39 PM",
      "commitNameOld": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 310.71,
      "commitsBetweenForRepo": 2792,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-  public boolean writeAMRMTokenForUAM(ApplicationId appId,\n+  public synchronized boolean writeAMRMTokenForUAM(ApplicationId appId,\n       String subClusterId, Token\u003cAMRMTokenIdentifier\u003e token) {\n     Map\u003cString, Token\u003cAMRMTokenIdentifier\u003e\u003e subClusterTokenMap \u003d\n         this.appSubClusterTokenMap.get(appId);\n     if (subClusterTokenMap \u003d\u003d null) {\n       subClusterTokenMap \u003d new ConcurrentHashMap\u003c\u003e();\n       this.appSubClusterTokenMap.put(appId, subClusterTokenMap);\n     }\n \n     boolean update \u003d !token.equals(subClusterTokenMap.get(subClusterId));\n     if (!update) {\n       LOG.debug(\"Same amrmToken received from {}, skip writing registry for {}\",\n           subClusterId, appId);\n       return update;\n     }\n \n     LOG.info(\"Writing/Updating amrmToken for {} to registry for {}\",\n         subClusterId, appId);\n     try {\n       // First, write the token entry\n       writeRegistry(this.registry, this.user,\n           getRegistryKey(appId, subClusterId), token.encodeToUrlString(), true);\n \n       // Then update the subClusterTokenMap\n       subClusterTokenMap.put(subClusterId, token);\n     } catch (YarnException | IOException e) {\n       LOG.error(\n           \"Failed writing AMRMToken to registry for subcluster \" + subClusterId,\n           e);\n     }\n     return update;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean writeAMRMTokenForUAM(ApplicationId appId,\n      String subClusterId, Token\u003cAMRMTokenIdentifier\u003e token) {\n    Map\u003cString, Token\u003cAMRMTokenIdentifier\u003e\u003e subClusterTokenMap \u003d\n        this.appSubClusterTokenMap.get(appId);\n    if (subClusterTokenMap \u003d\u003d null) {\n      subClusterTokenMap \u003d new ConcurrentHashMap\u003c\u003e();\n      this.appSubClusterTokenMap.put(appId, subClusterTokenMap);\n    }\n\n    boolean update \u003d !token.equals(subClusterTokenMap.get(subClusterId));\n    if (!update) {\n      LOG.debug(\"Same amrmToken received from {}, skip writing registry for {}\",\n          subClusterId, appId);\n      return update;\n    }\n\n    LOG.info(\"Writing/Updating amrmToken for {} to registry for {}\",\n        subClusterId, appId);\n    try {\n      // First, write the token entry\n      writeRegistry(this.registry, this.user,\n          getRegistryKey(appId, subClusterId), token.encodeToUrlString(), true);\n\n      // Then update the subClusterTokenMap\n      subClusterTokenMap.put(subClusterId, token);\n    } catch (YarnException | IOException e) {\n      LOG.error(\n          \"Failed writing AMRMToken to registry for subcluster \" + subClusterId,\n          e);\n    }\n    return update;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/utils/FederationRegistryClient.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,32 @@\n+  public boolean writeAMRMTokenForUAM(ApplicationId appId,\n+      String subClusterId, Token\u003cAMRMTokenIdentifier\u003e token) {\n+    Map\u003cString, Token\u003cAMRMTokenIdentifier\u003e\u003e subClusterTokenMap \u003d\n+        this.appSubClusterTokenMap.get(appId);\n+    if (subClusterTokenMap \u003d\u003d null) {\n+      subClusterTokenMap \u003d new ConcurrentHashMap\u003c\u003e();\n+      this.appSubClusterTokenMap.put(appId, subClusterTokenMap);\n+    }\n+\n+    boolean update \u003d !token.equals(subClusterTokenMap.get(subClusterId));\n+    if (!update) {\n+      LOG.debug(\"Same amrmToken received from {}, skip writing registry for {}\",\n+          subClusterId, appId);\n+      return update;\n+    }\n+\n+    LOG.info(\"Writing/Updating amrmToken for {} to registry for {}\",\n+        subClusterId, appId);\n+    try {\n+      // First, write the token entry\n+      writeRegistry(this.registry, this.user,\n+          getRegistryKey(appId, subClusterId), token.encodeToUrlString(), true);\n+\n+      // Then update the subClusterTokenMap\n+      subClusterTokenMap.put(subClusterId, token);\n+    } catch (YarnException | IOException e) {\n+      LOG.error(\n+          \"Failed writing AMRMToken to registry for subcluster \" + subClusterId,\n+          e);\n+    }\n+    return update;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean writeAMRMTokenForUAM(ApplicationId appId,\n      String subClusterId, Token\u003cAMRMTokenIdentifier\u003e token) {\n    Map\u003cString, Token\u003cAMRMTokenIdentifier\u003e\u003e subClusterTokenMap \u003d\n        this.appSubClusterTokenMap.get(appId);\n    if (subClusterTokenMap \u003d\u003d null) {\n      subClusterTokenMap \u003d new ConcurrentHashMap\u003c\u003e();\n      this.appSubClusterTokenMap.put(appId, subClusterTokenMap);\n    }\n\n    boolean update \u003d !token.equals(subClusterTokenMap.get(subClusterId));\n    if (!update) {\n      LOG.debug(\"Same amrmToken received from {}, skip writing registry for {}\",\n          subClusterId, appId);\n      return update;\n    }\n\n    LOG.info(\"Writing/Updating amrmToken for {} to registry for {}\",\n        subClusterId, appId);\n    try {\n      // First, write the token entry\n      writeRegistry(this.registry, this.user,\n          getRegistryKey(appId, subClusterId), token.encodeToUrlString(), true);\n\n      // Then update the subClusterTokenMap\n      subClusterTokenMap.put(subClusterId, token);\n    } catch (YarnException | IOException e) {\n      LOG.error(\n          \"Failed writing AMRMToken to registry for subcluster \" + subClusterId,\n          e);\n    }\n    return update;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/utils/FederationRegistryClient.java"
    }
  }
}