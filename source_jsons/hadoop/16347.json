{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterClientProtocol.java",
  "functionName": "getContentSummary",
  "functionId": "getContentSummary___path-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
  "functionStartLine": 1188,
  "functionEndLine": 1238,
  "numCommitsSeen": 40,
  "timeTaken": 2910,
  "changeHistory": [
    "3deb5d345f439cbebcad5296c69689e8334f59ce",
    "203664e6b258b642239651fa6a17fd2561b903d2",
    "f4bd1114ff529e971f9b496ad62a7edca37fdf8d",
    "6425ed27ea638da75f656204d6df4adad1d91fe1"
  ],
  "changeHistoryShort": {
    "3deb5d345f439cbebcad5296c69689e8334f59ce": "Ybodychange",
    "203664e6b258b642239651fa6a17fd2561b903d2": "Ybodychange",
    "f4bd1114ff529e971f9b496ad62a7edca37fdf8d": "Ybodychange",
    "6425ed27ea638da75f656204d6df4adad1d91fe1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3deb5d345f439cbebcad5296c69689e8334f59ce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14490. RBF: Remove unnecessary quota checks. Contributed by Ayush Saxena.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "3deb5d345f439cbebcad5296c69689e8334f59ce",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "62fa53a01dc7165d7965cdd4fddb444082f0602c",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public ContentSummary getContentSummary(String path) throws IOException {\n     rpcServer.checkOperation(NameNode.OperationCategory.READ);\n \n     // Get the summaries from regular files\n     final Collection\u003cContentSummary\u003e summaries \u003d new ArrayList\u003c\u003e();\n     final List\u003cRemoteLocation\u003e locations \u003d\n-        rpcServer.getLocationsForPath(path, false);\n+        rpcServer.getLocationsForPath(path, false, false);\n     final RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n         new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n     final List\u003cRemoteResult\u003cRemoteLocation, ContentSummary\u003e\u003e results \u003d\n         rpcClient.invokeConcurrent(locations, method,\n             false, -1, ContentSummary.class);\n     FileNotFoundException notFoundException \u003d null;\n     for (RemoteResult\u003cRemoteLocation, ContentSummary\u003e result : results) {\n       if (result.hasException()) {\n         IOException ioe \u003d result.getException();\n         if (ioe instanceof FileNotFoundException) {\n           notFoundException \u003d (FileNotFoundException)ioe;\n         } else if (!allowPartialList) {\n           throw ioe;\n         }\n       } else if (result.getResult() !\u003d null) {\n         summaries.add(result.getResult());\n       }\n     }\n \n     // Add mount points at this level in the tree\n     final List\u003cString\u003e children \u003d subclusterResolver.getMountPoints(path);\n     if (children !\u003d null) {\n       for (String child : children) {\n         Path childPath \u003d new Path(path, child);\n         try {\n           ContentSummary mountSummary \u003d getContentSummary(\n               childPath.toString());\n           if (mountSummary !\u003d null) {\n             summaries.add(mountSummary);\n           }\n         } catch (Exception e) {\n           LOG.error(\"Cannot get content summary for mount {}: {}\",\n               childPath, e.getMessage());\n         }\n       }\n     }\n \n     // Throw original exception if no original nor mount points\n     if (summaries.isEmpty() \u0026\u0026 notFoundException !\u003d null) {\n       throw notFoundException;\n     }\n \n     return aggregateContentSummary(summaries);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContentSummary getContentSummary(String path) throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.READ);\n\n    // Get the summaries from regular files\n    final Collection\u003cContentSummary\u003e summaries \u003d new ArrayList\u003c\u003e();\n    final List\u003cRemoteLocation\u003e locations \u003d\n        rpcServer.getLocationsForPath(path, false, false);\n    final RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n        new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n    final List\u003cRemoteResult\u003cRemoteLocation, ContentSummary\u003e\u003e results \u003d\n        rpcClient.invokeConcurrent(locations, method,\n            false, -1, ContentSummary.class);\n    FileNotFoundException notFoundException \u003d null;\n    for (RemoteResult\u003cRemoteLocation, ContentSummary\u003e result : results) {\n      if (result.hasException()) {\n        IOException ioe \u003d result.getException();\n        if (ioe instanceof FileNotFoundException) {\n          notFoundException \u003d (FileNotFoundException)ioe;\n        } else if (!allowPartialList) {\n          throw ioe;\n        }\n      } else if (result.getResult() !\u003d null) {\n        summaries.add(result.getResult());\n      }\n    }\n\n    // Add mount points at this level in the tree\n    final List\u003cString\u003e children \u003d subclusterResolver.getMountPoints(path);\n    if (children !\u003d null) {\n      for (String child : children) {\n        Path childPath \u003d new Path(path, child);\n        try {\n          ContentSummary mountSummary \u003d getContentSummary(\n              childPath.toString());\n          if (mountSummary !\u003d null) {\n            summaries.add(mountSummary);\n          }\n        } catch (Exception e) {\n          LOG.error(\"Cannot get content summary for mount {}: {}\",\n              childPath, e.getMessage());\n        }\n      }\n    }\n\n    // Throw original exception if no original nor mount points\n    if (summaries.isEmpty() \u0026\u0026 notFoundException !\u003d null) {\n      throw notFoundException;\n    }\n\n    return aggregateContentSummary(summaries);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
      "extendedDetails": {}
    },
    "203664e6b258b642239651fa6a17fd2561b903d2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14454. RBF: getContentSummary() should allow non-existing folders. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "203664e6b258b642239651fa6a17fd2561b903d2",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "6c42d4050461ab71c88f123569649793dc53aebd",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,51 @@\n   public ContentSummary getContentSummary(String path) throws IOException {\n     rpcServer.checkOperation(NameNode.OperationCategory.READ);\n \n     // Get the summaries from regular files\n-    Collection\u003cContentSummary\u003e summaries \u003d new LinkedList\u003c\u003e();\n+    final Collection\u003cContentSummary\u003e summaries \u003d new ArrayList\u003c\u003e();\n+    final List\u003cRemoteLocation\u003e locations \u003d\n+        rpcServer.getLocationsForPath(path, false);\n+    final RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n+        new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n+    final List\u003cRemoteResult\u003cRemoteLocation, ContentSummary\u003e\u003e results \u003d\n+        rpcClient.invokeConcurrent(locations, method,\n+            false, -1, ContentSummary.class);\n     FileNotFoundException notFoundException \u003d null;\n-    try {\n-      final List\u003cRemoteLocation\u003e locations \u003d\n-          rpcServer.getLocationsForPath(path, false);\n-      RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n-          new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n-      Map\u003cRemoteLocation, ContentSummary\u003e results \u003d\n-          rpcClient.invokeConcurrent(locations, method,\n-              !this.allowPartialList, false, ContentSummary.class);\n-      summaries.addAll(results.values());\n-    } catch (FileNotFoundException e) {\n-      notFoundException \u003d e;\n+    for (RemoteResult\u003cRemoteLocation, ContentSummary\u003e result : results) {\n+      if (result.hasException()) {\n+        IOException ioe \u003d result.getException();\n+        if (ioe instanceof FileNotFoundException) {\n+          notFoundException \u003d (FileNotFoundException)ioe;\n+        } else if (!allowPartialList) {\n+          throw ioe;\n+        }\n+      } else if (result.getResult() !\u003d null) {\n+        summaries.add(result.getResult());\n+      }\n     }\n \n     // Add mount points at this level in the tree\n     final List\u003cString\u003e children \u003d subclusterResolver.getMountPoints(path);\n     if (children !\u003d null) {\n       for (String child : children) {\n         Path childPath \u003d new Path(path, child);\n         try {\n-          ContentSummary mountSummary \u003d getContentSummary(childPath.toString());\n+          ContentSummary mountSummary \u003d getContentSummary(\n+              childPath.toString());\n           if (mountSummary !\u003d null) {\n             summaries.add(mountSummary);\n           }\n         } catch (Exception e) {\n           LOG.error(\"Cannot get content summary for mount {}: {}\",\n               childPath, e.getMessage());\n         }\n       }\n     }\n \n     // Throw original exception if no original nor mount points\n     if (summaries.isEmpty() \u0026\u0026 notFoundException !\u003d null) {\n       throw notFoundException;\n     }\n \n     return aggregateContentSummary(summaries);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContentSummary getContentSummary(String path) throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.READ);\n\n    // Get the summaries from regular files\n    final Collection\u003cContentSummary\u003e summaries \u003d new ArrayList\u003c\u003e();\n    final List\u003cRemoteLocation\u003e locations \u003d\n        rpcServer.getLocationsForPath(path, false);\n    final RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n        new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n    final List\u003cRemoteResult\u003cRemoteLocation, ContentSummary\u003e\u003e results \u003d\n        rpcClient.invokeConcurrent(locations, method,\n            false, -1, ContentSummary.class);\n    FileNotFoundException notFoundException \u003d null;\n    for (RemoteResult\u003cRemoteLocation, ContentSummary\u003e result : results) {\n      if (result.hasException()) {\n        IOException ioe \u003d result.getException();\n        if (ioe instanceof FileNotFoundException) {\n          notFoundException \u003d (FileNotFoundException)ioe;\n        } else if (!allowPartialList) {\n          throw ioe;\n        }\n      } else if (result.getResult() !\u003d null) {\n        summaries.add(result.getResult());\n      }\n    }\n\n    // Add mount points at this level in the tree\n    final List\u003cString\u003e children \u003d subclusterResolver.getMountPoints(path);\n    if (children !\u003d null) {\n      for (String child : children) {\n        Path childPath \u003d new Path(path, child);\n        try {\n          ContentSummary mountSummary \u003d getContentSummary(\n              childPath.toString());\n          if (mountSummary !\u003d null) {\n            summaries.add(mountSummary);\n          }\n        } catch (Exception e) {\n          LOG.error(\"Cannot get content summary for mount {}: {}\",\n              childPath, e.getMessage());\n        }\n      }\n    }\n\n    // Throw original exception if no original nor mount points\n    if (summaries.isEmpty() \u0026\u0026 notFoundException !\u003d null) {\n      throw notFoundException;\n    }\n\n    return aggregateContentSummary(summaries);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
      "extendedDetails": {}
    },
    "f4bd1114ff529e971f9b496ad62a7edca37fdf8d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14082. RBF: Add option to fail operations when a subcluster is unavailable. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "f4bd1114ff529e971f9b496ad62a7edca37fdf8d",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "b3fee1d2bfe5d289b8f279071589f21ace99e04c",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public ContentSummary getContentSummary(String path) throws IOException {\n     rpcServer.checkOperation(NameNode.OperationCategory.READ);\n \n     // Get the summaries from regular files\n     Collection\u003cContentSummary\u003e summaries \u003d new LinkedList\u003c\u003e();\n     FileNotFoundException notFoundException \u003d null;\n     try {\n       final List\u003cRemoteLocation\u003e locations \u003d\n           rpcServer.getLocationsForPath(path, false);\n       RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n           new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n       Map\u003cRemoteLocation, ContentSummary\u003e results \u003d\n-          rpcClient.invokeConcurrent(\n-              locations, method, false, false, ContentSummary.class);\n+          rpcClient.invokeConcurrent(locations, method,\n+              !this.allowPartialList, false, ContentSummary.class);\n       summaries.addAll(results.values());\n     } catch (FileNotFoundException e) {\n       notFoundException \u003d e;\n     }\n \n     // Add mount points at this level in the tree\n     final List\u003cString\u003e children \u003d subclusterResolver.getMountPoints(path);\n     if (children !\u003d null) {\n       for (String child : children) {\n         Path childPath \u003d new Path(path, child);\n         try {\n           ContentSummary mountSummary \u003d getContentSummary(childPath.toString());\n           if (mountSummary !\u003d null) {\n             summaries.add(mountSummary);\n           }\n         } catch (Exception e) {\n           LOG.error(\"Cannot get content summary for mount {}: {}\",\n               childPath, e.getMessage());\n         }\n       }\n     }\n \n     // Throw original exception if no original nor mount points\n     if (summaries.isEmpty() \u0026\u0026 notFoundException !\u003d null) {\n       throw notFoundException;\n     }\n \n     return aggregateContentSummary(summaries);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContentSummary getContentSummary(String path) throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.READ);\n\n    // Get the summaries from regular files\n    Collection\u003cContentSummary\u003e summaries \u003d new LinkedList\u003c\u003e();\n    FileNotFoundException notFoundException \u003d null;\n    try {\n      final List\u003cRemoteLocation\u003e locations \u003d\n          rpcServer.getLocationsForPath(path, false);\n      RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n          new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n      Map\u003cRemoteLocation, ContentSummary\u003e results \u003d\n          rpcClient.invokeConcurrent(locations, method,\n              !this.allowPartialList, false, ContentSummary.class);\n      summaries.addAll(results.values());\n    } catch (FileNotFoundException e) {\n      notFoundException \u003d e;\n    }\n\n    // Add mount points at this level in the tree\n    final List\u003cString\u003e children \u003d subclusterResolver.getMountPoints(path);\n    if (children !\u003d null) {\n      for (String child : children) {\n        Path childPath \u003d new Path(path, child);\n        try {\n          ContentSummary mountSummary \u003d getContentSummary(childPath.toString());\n          if (mountSummary !\u003d null) {\n            summaries.add(mountSummary);\n          }\n        } catch (Exception e) {\n          LOG.error(\"Cannot get content summary for mount {}: {}\",\n              childPath, e.getMessage());\n        }\n      }\n    }\n\n    // Throw original exception if no original nor mount points\n    if (summaries.isEmpty() \u0026\u0026 notFoundException !\u003d null) {\n      throw notFoundException;\n    }\n\n    return aggregateContentSummary(summaries);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
      "extendedDetails": {}
    },
    "6425ed27ea638da75f656204d6df4adad1d91fe1": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13790. RBF: Move ClientProtocol APIs to its own module. Contributed by Chao Sun.\n",
      "commitDate": "19/08/18 11:50 PM",
      "commitName": "6425ed27ea638da75f656204d6df4adad1d91fe1",
      "commitAuthor": "Brahma Reddy Battula",
      "diff": "@@ -0,0 +1,43 @@\n+  public ContentSummary getContentSummary(String path) throws IOException {\n+    rpcServer.checkOperation(NameNode.OperationCategory.READ);\n+\n+    // Get the summaries from regular files\n+    Collection\u003cContentSummary\u003e summaries \u003d new LinkedList\u003c\u003e();\n+    FileNotFoundException notFoundException \u003d null;\n+    try {\n+      final List\u003cRemoteLocation\u003e locations \u003d\n+          rpcServer.getLocationsForPath(path, false);\n+      RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n+          new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n+      Map\u003cRemoteLocation, ContentSummary\u003e results \u003d\n+          rpcClient.invokeConcurrent(\n+              locations, method, false, false, ContentSummary.class);\n+      summaries.addAll(results.values());\n+    } catch (FileNotFoundException e) {\n+      notFoundException \u003d e;\n+    }\n+\n+    // Add mount points at this level in the tree\n+    final List\u003cString\u003e children \u003d subclusterResolver.getMountPoints(path);\n+    if (children !\u003d null) {\n+      for (String child : children) {\n+        Path childPath \u003d new Path(path, child);\n+        try {\n+          ContentSummary mountSummary \u003d getContentSummary(childPath.toString());\n+          if (mountSummary !\u003d null) {\n+            summaries.add(mountSummary);\n+          }\n+        } catch (Exception e) {\n+          LOG.error(\"Cannot get content summary for mount {}: {}\",\n+              childPath, e.getMessage());\n+        }\n+      }\n+    }\n+\n+    // Throw original exception if no original nor mount points\n+    if (summaries.isEmpty() \u0026\u0026 notFoundException !\u003d null) {\n+      throw notFoundException;\n+    }\n+\n+    return aggregateContentSummary(summaries);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ContentSummary getContentSummary(String path) throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.READ);\n\n    // Get the summaries from regular files\n    Collection\u003cContentSummary\u003e summaries \u003d new LinkedList\u003c\u003e();\n    FileNotFoundException notFoundException \u003d null;\n    try {\n      final List\u003cRemoteLocation\u003e locations \u003d\n          rpcServer.getLocationsForPath(path, false);\n      RemoteMethod method \u003d new RemoteMethod(\"getContentSummary\",\n          new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n      Map\u003cRemoteLocation, ContentSummary\u003e results \u003d\n          rpcClient.invokeConcurrent(\n              locations, method, false, false, ContentSummary.class);\n      summaries.addAll(results.values());\n    } catch (FileNotFoundException e) {\n      notFoundException \u003d e;\n    }\n\n    // Add mount points at this level in the tree\n    final List\u003cString\u003e children \u003d subclusterResolver.getMountPoints(path);\n    if (children !\u003d null) {\n      for (String child : children) {\n        Path childPath \u003d new Path(path, child);\n        try {\n          ContentSummary mountSummary \u003d getContentSummary(childPath.toString());\n          if (mountSummary !\u003d null) {\n            summaries.add(mountSummary);\n          }\n        } catch (Exception e) {\n          LOG.error(\"Cannot get content summary for mount {}: {}\",\n              childPath, e.getMessage());\n        }\n      }\n    }\n\n    // Throw original exception if no original nor mount points\n    if (summaries.isEmpty() \u0026\u0026 notFoundException !\u003d null) {\n      throw notFoundException;\n    }\n\n    return aggregateContentSummary(summaries);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java"
    }
  }
}