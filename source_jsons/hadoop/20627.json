{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Chain.java",
  "functionName": "addMapper",
  "functionId": "addMapper___isMap-boolean__jobConf-JobConf__klass-Class__? extends Mapper__K1,V1,K2,V2______inputKeyClass-Class__? extends K1____inputValueClass-Class__? extends V1____outputKeyClass-Class__? extends K2____outputValueClass-Class__? extends V2____byValue-boolean__mapperConf-JobConf",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/Chain.java",
  "functionStartLine": 88,
  "functionEndLine": 119,
  "numCommitsSeen": 5,
  "timeTaken": 4303,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static \u003cK1, V1, K2, V2\u003e void addMapper(boolean isMap, JobConf jobConf,\n                           Class\u003c? extends Mapper\u003cK1, V1, K2, V2\u003e\u003e klass,\n                           Class\u003c? extends K1\u003e inputKeyClass,\n                           Class\u003c? extends V1\u003e inputValueClass,\n                           Class\u003c? extends K2\u003e outputKeyClass,\n                           Class\u003c? extends V2\u003e outputValueClass,\n                           boolean byValue, JobConf mapperConf) {\n    String prefix \u003d getPrefix(isMap);\n\n    // if a reducer chain check the Reducer has been already set\n    checkReducerAlreadySet(isMap, jobConf, prefix, true);\n\t    \n    // set the mapper class\n    int index \u003d getIndex(jobConf, prefix);\n    jobConf.setClass(prefix + CHAIN_MAPPER_CLASS + index, klass, Mapper.class);\n\t    \n    validateKeyValueTypes(isMap, jobConf, inputKeyClass, inputValueClass,\n      outputKeyClass, outputValueClass, index, prefix);\n\t    \n    // if the Mapper does not have a private JobConf create an empty one\n    if (mapperConf \u003d\u003d null) {\n    // using a JobConf without defaults to make it lightweight.\n    // still the chain JobConf may have all defaults and this conf is\n    // overlapped to the chain JobConf one.\n      mapperConf \u003d new JobConf(true);\n    }\n    // store in the private mapper conf if it works by value or by reference\n    mapperConf.setBoolean(MAPPER_BY_VALUE, byValue);\n    \n    setMapperConf(isMap, jobConf, inputKeyClass, inputValueClass,\n\t      outputKeyClass, outputValueClass, mapperConf, index, prefix);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/Chain.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/Chain.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/Chain.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static \u003cK1, V1, K2, V2\u003e void addMapper(boolean isMap, JobConf jobConf,\n                           Class\u003c? extends Mapper\u003cK1, V1, K2, V2\u003e\u003e klass,\n                           Class\u003c? extends K1\u003e inputKeyClass,\n                           Class\u003c? extends V1\u003e inputValueClass,\n                           Class\u003c? extends K2\u003e outputKeyClass,\n                           Class\u003c? extends V2\u003e outputValueClass,\n                           boolean byValue, JobConf mapperConf) {\n    String prefix \u003d getPrefix(isMap);\n\n    // if a reducer chain check the Reducer has been already set\n    checkReducerAlreadySet(isMap, jobConf, prefix, true);\n\t    \n    // set the mapper class\n    int index \u003d getIndex(jobConf, prefix);\n    jobConf.setClass(prefix + CHAIN_MAPPER_CLASS + index, klass, Mapper.class);\n\t    \n    validateKeyValueTypes(isMap, jobConf, inputKeyClass, inputValueClass,\n      outputKeyClass, outputValueClass, index, prefix);\n\t    \n    // if the Mapper does not have a private JobConf create an empty one\n    if (mapperConf \u003d\u003d null) {\n    // using a JobConf without defaults to make it lightweight.\n    // still the chain JobConf may have all defaults and this conf is\n    // overlapped to the chain JobConf one.\n      mapperConf \u003d new JobConf(true);\n    }\n    // store in the private mapper conf if it works by value or by reference\n    mapperConf.setBoolean(MAPPER_BY_VALUE, byValue);\n    \n    setMapperConf(isMap, jobConf, inputKeyClass, inputValueClass,\n\t      outputKeyClass, outputValueClass, mapperConf, index, prefix);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/Chain.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/lib/Chain.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/Chain.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,32 @@\n+  public static \u003cK1, V1, K2, V2\u003e void addMapper(boolean isMap, JobConf jobConf,\n+                           Class\u003c? extends Mapper\u003cK1, V1, K2, V2\u003e\u003e klass,\n+                           Class\u003c? extends K1\u003e inputKeyClass,\n+                           Class\u003c? extends V1\u003e inputValueClass,\n+                           Class\u003c? extends K2\u003e outputKeyClass,\n+                           Class\u003c? extends V2\u003e outputValueClass,\n+                           boolean byValue, JobConf mapperConf) {\n+    String prefix \u003d getPrefix(isMap);\n+\n+    // if a reducer chain check the Reducer has been already set\n+    checkReducerAlreadySet(isMap, jobConf, prefix, true);\n+\t    \n+    // set the mapper class\n+    int index \u003d getIndex(jobConf, prefix);\n+    jobConf.setClass(prefix + CHAIN_MAPPER_CLASS + index, klass, Mapper.class);\n+\t    \n+    validateKeyValueTypes(isMap, jobConf, inputKeyClass, inputValueClass,\n+      outputKeyClass, outputValueClass, index, prefix);\n+\t    \n+    // if the Mapper does not have a private JobConf create an empty one\n+    if (mapperConf \u003d\u003d null) {\n+    // using a JobConf without defaults to make it lightweight.\n+    // still the chain JobConf may have all defaults and this conf is\n+    // overlapped to the chain JobConf one.\n+      mapperConf \u003d new JobConf(true);\n+    }\n+    // store in the private mapper conf if it works by value or by reference\n+    mapperConf.setBoolean(MAPPER_BY_VALUE, byValue);\n+    \n+    setMapperConf(isMap, jobConf, inputKeyClass, inputValueClass,\n+\t      outputKeyClass, outputValueClass, mapperConf, index, prefix);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cK1, V1, K2, V2\u003e void addMapper(boolean isMap, JobConf jobConf,\n                           Class\u003c? extends Mapper\u003cK1, V1, K2, V2\u003e\u003e klass,\n                           Class\u003c? extends K1\u003e inputKeyClass,\n                           Class\u003c? extends V1\u003e inputValueClass,\n                           Class\u003c? extends K2\u003e outputKeyClass,\n                           Class\u003c? extends V2\u003e outputValueClass,\n                           boolean byValue, JobConf mapperConf) {\n    String prefix \u003d getPrefix(isMap);\n\n    // if a reducer chain check the Reducer has been already set\n    checkReducerAlreadySet(isMap, jobConf, prefix, true);\n\t    \n    // set the mapper class\n    int index \u003d getIndex(jobConf, prefix);\n    jobConf.setClass(prefix + CHAIN_MAPPER_CLASS + index, klass, Mapper.class);\n\t    \n    validateKeyValueTypes(isMap, jobConf, inputKeyClass, inputValueClass,\n      outputKeyClass, outputValueClass, index, prefix);\n\t    \n    // if the Mapper does not have a private JobConf create an empty one\n    if (mapperConf \u003d\u003d null) {\n    // using a JobConf without defaults to make it lightweight.\n    // still the chain JobConf may have all defaults and this conf is\n    // overlapped to the chain JobConf one.\n      mapperConf \u003d new JobConf(true);\n    }\n    // store in the private mapper conf if it works by value or by reference\n    mapperConf.setBoolean(MAPPER_BY_VALUE, byValue);\n    \n    setMapperConf(isMap, jobConf, inputKeyClass, inputValueClass,\n\t      outputKeyClass, outputValueClass, mapperConf, index, prefix);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/lib/Chain.java"
    }
  }
}