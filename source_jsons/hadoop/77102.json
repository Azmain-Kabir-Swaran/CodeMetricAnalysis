{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MapFile.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
  "functionStartLine": 1000,
  "functionEndLine": 1031,
  "numCommitsSeen": 18,
  "timeTaken": 2215,
  "changeHistory": [
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d",
    "ccaf036662e22da14583942054898c99fa51dae5",
    "6eb700ee7469cd77524676d62cbd20043f111288",
    "91ebf5890422cb5d28708dbb6f3848430455f51d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d": "Ybodychange",
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "6eb700ee7469cd77524676d62cbd20043f111288": "Ybodychange",
    "91ebf5890422cb5d28708dbb6f3848430455f51d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15085. Output streams closed with IOUtils suppressing write errors. Contributed by Jim Brennan\n",
      "commitDate": "14/12/17 8:18 AM",
      "commitName": "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 149.49,
      "commitsBetweenForRepo": 1221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   public static void main(String[] args) throws Exception {\n     String usage \u003d \"Usage: MapFile inFile outFile\";\n       \n     if (args.length !\u003d 2) {\n       System.err.println(usage);\n       System.exit(-1);\n     }\n       \n     String in \u003d args[0];\n     String out \u003d args[1];\n \n     Configuration conf \u003d new Configuration();\n     FileSystem fs \u003d FileSystem.getLocal(conf);\n     MapFile.Reader reader \u003d null;\n-    MapFile.Writer writer \u003d null;\n     try {\n       reader \u003d new MapFile.Reader(fs, in, conf);\n-      writer \u003d\n-        new MapFile.Writer(conf, fs, out,\n-            reader.getKeyClass().asSubclass(WritableComparable.class),\n-            reader.getValueClass());\n-\n       WritableComparable\u003c?\u003e key \u003d ReflectionUtils.newInstance(\n           reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n       Writable value \u003d ReflectionUtils.newInstance(reader.getValueClass()\n         .asSubclass(Writable.class), conf);\n \n-      while (reader.next(key, value))               // copy all entries\n-        writer.append(key, value);\n+      try (MapFile.Writer writer \u003d new MapFile.Writer(conf, fs, out,\n+            reader.getKeyClass().asSubclass(WritableComparable.class),\n+            reader.getValueClass())) {\n+        while (reader.next(key, value)) {             // copy all entries\n+          writer.append(key, value);\n+        }\n+      }\n     } finally {\n-      IOUtils.cleanupWithLogger(LOG, writer, reader);\n+      IOUtils.cleanupWithLogger(LOG, reader);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    String usage \u003d \"Usage: MapFile inFile outFile\";\n      \n    if (args.length !\u003d 2) {\n      System.err.println(usage);\n      System.exit(-1);\n    }\n      \n    String in \u003d args[0];\n    String out \u003d args[1];\n\n    Configuration conf \u003d new Configuration();\n    FileSystem fs \u003d FileSystem.getLocal(conf);\n    MapFile.Reader reader \u003d null;\n    try {\n      reader \u003d new MapFile.Reader(fs, in, conf);\n      WritableComparable\u003c?\u003e key \u003d ReflectionUtils.newInstance(\n          reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n      Writable value \u003d ReflectionUtils.newInstance(reader.getValueClass()\n        .asSubclass(Writable.class), conf);\n\n      try (MapFile.Writer writer \u003d new MapFile.Writer(conf, fs, out,\n            reader.getKeyClass().asSubclass(WritableComparable.class),\n            reader.getValueClass())) {\n        while (reader.next(key, value)) {             // copy all entries\n          writer.append(key, value);\n        }\n      }\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, reader);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {}
    },
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "27/09/16 5:36 PM",
      "commitNameOld": "9a44a832a99eb967aa4e34338dfa75baf35f9845",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 293.16,
      "commitsBetweenForRepo": 1713,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public static void main(String[] args) throws Exception {\n     String usage \u003d \"Usage: MapFile inFile outFile\";\n       \n     if (args.length !\u003d 2) {\n       System.err.println(usage);\n       System.exit(-1);\n     }\n       \n     String in \u003d args[0];\n     String out \u003d args[1];\n \n     Configuration conf \u003d new Configuration();\n     FileSystem fs \u003d FileSystem.getLocal(conf);\n     MapFile.Reader reader \u003d null;\n     MapFile.Writer writer \u003d null;\n     try {\n       reader \u003d new MapFile.Reader(fs, in, conf);\n       writer \u003d\n         new MapFile.Writer(conf, fs, out,\n             reader.getKeyClass().asSubclass(WritableComparable.class),\n             reader.getValueClass());\n \n       WritableComparable\u003c?\u003e key \u003d ReflectionUtils.newInstance(\n           reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n       Writable value \u003d ReflectionUtils.newInstance(reader.getValueClass()\n         .asSubclass(Writable.class), conf);\n \n       while (reader.next(key, value))               // copy all entries\n         writer.append(key, value);\n     } finally {\n-      IOUtils.cleanup(LOG, writer, reader);\n+      IOUtils.cleanupWithLogger(LOG, writer, reader);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    String usage \u003d \"Usage: MapFile inFile outFile\";\n      \n    if (args.length !\u003d 2) {\n      System.err.println(usage);\n      System.exit(-1);\n    }\n      \n    String in \u003d args[0];\n    String out \u003d args[1];\n\n    Configuration conf \u003d new Configuration();\n    FileSystem fs \u003d FileSystem.getLocal(conf);\n    MapFile.Reader reader \u003d null;\n    MapFile.Writer writer \u003d null;\n    try {\n      reader \u003d new MapFile.Reader(fs, in, conf);\n      writer \u003d\n        new MapFile.Writer(conf, fs, out,\n            reader.getKeyClass().asSubclass(WritableComparable.class),\n            reader.getValueClass());\n\n      WritableComparable\u003c?\u003e key \u003d ReflectionUtils.newInstance(\n          reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n      Writable value \u003d ReflectionUtils.newInstance(reader.getValueClass()\n        .asSubclass(Writable.class), conf);\n\n      while (reader.next(key, value))               // copy all entries\n        writer.append(key, value);\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, writer, reader);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {}
    },
    "6eb700ee7469cd77524676d62cbd20043f111288": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10866. Fix Eclipse Java compile errors related to generic parameters. Contributed by Konstantin Shvachko.",
      "commitDate": "23/09/16 2:10 PM",
      "commitName": "6eb700ee7469cd77524676d62cbd20043f111288",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "27/02/15 12:46 AM",
      "commitNameOld": "48c7ee7553af94a57952bca03b49c04b9bbfab45",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 574.52,
      "commitsBetweenForRepo": 4322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public static void main(String[] args) throws Exception {\n     String usage \u003d \"Usage: MapFile inFile outFile\";\n       \n     if (args.length !\u003d 2) {\n       System.err.println(usage);\n       System.exit(-1);\n     }\n       \n     String in \u003d args[0];\n     String out \u003d args[1];\n \n     Configuration conf \u003d new Configuration();\n     FileSystem fs \u003d FileSystem.getLocal(conf);\n     MapFile.Reader reader \u003d null;\n     MapFile.Writer writer \u003d null;\n     try {\n       reader \u003d new MapFile.Reader(fs, in, conf);\n       writer \u003d\n         new MapFile.Writer(conf, fs, out,\n             reader.getKeyClass().asSubclass(WritableComparable.class),\n             reader.getValueClass());\n \n-      WritableComparable key \u003d ReflectionUtils.newInstance(reader.getKeyClass()\n-        .asSubclass(WritableComparable.class), conf);\n+      WritableComparable\u003c?\u003e key \u003d ReflectionUtils.newInstance(\n+          reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n       Writable value \u003d ReflectionUtils.newInstance(reader.getValueClass()\n         .asSubclass(Writable.class), conf);\n \n       while (reader.next(key, value))               // copy all entries\n         writer.append(key, value);\n     } finally {\n       IOUtils.cleanup(LOG, writer, reader);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    String usage \u003d \"Usage: MapFile inFile outFile\";\n      \n    if (args.length !\u003d 2) {\n      System.err.println(usage);\n      System.exit(-1);\n    }\n      \n    String in \u003d args[0];\n    String out \u003d args[1];\n\n    Configuration conf \u003d new Configuration();\n    FileSystem fs \u003d FileSystem.getLocal(conf);\n    MapFile.Reader reader \u003d null;\n    MapFile.Writer writer \u003d null;\n    try {\n      reader \u003d new MapFile.Reader(fs, in, conf);\n      writer \u003d\n        new MapFile.Writer(conf, fs, out,\n            reader.getKeyClass().asSubclass(WritableComparable.class),\n            reader.getValueClass());\n\n      WritableComparable\u003c?\u003e key \u003d ReflectionUtils.newInstance(\n          reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n      Writable value \u003d ReflectionUtils.newInstance(reader.getValueClass()\n        .asSubclass(Writable.class), conf);\n\n      while (reader.next(key, value))               // copy all entries\n        writer.append(key, value);\n    } finally {\n      IOUtils.cleanup(LOG, writer, reader);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {}
    },
    "91ebf5890422cb5d28708dbb6f3848430455f51d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10490. TestMapFile and TestBloomMapFile leak file descriptors. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586570 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/14 9:40 PM",
      "commitName": "91ebf5890422cb5d28708dbb6f3848430455f51d",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 594.15,
      "commitsBetweenForRepo": 3721,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   public static void main(String[] args) throws Exception {\n     String usage \u003d \"Usage: MapFile inFile outFile\";\n       \n     if (args.length !\u003d 2) {\n       System.err.println(usage);\n       System.exit(-1);\n     }\n       \n     String in \u003d args[0];\n     String out \u003d args[1];\n \n     Configuration conf \u003d new Configuration();\n     FileSystem fs \u003d FileSystem.getLocal(conf);\n-    MapFile.Reader reader \u003d new MapFile.Reader(fs, in, conf);\n-    MapFile.Writer writer \u003d\n-      new MapFile.Writer(conf, fs, out,\n-          reader.getKeyClass().asSubclass(WritableComparable.class),\n-          reader.getValueClass());\n+    MapFile.Reader reader \u003d null;\n+    MapFile.Writer writer \u003d null;\n+    try {\n+      reader \u003d new MapFile.Reader(fs, in, conf);\n+      writer \u003d\n+        new MapFile.Writer(conf, fs, out,\n+            reader.getKeyClass().asSubclass(WritableComparable.class),\n+            reader.getValueClass());\n \n-    WritableComparable key \u003d\n-      ReflectionUtils.newInstance(reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n-    Writable value \u003d\n-      ReflectionUtils.newInstance(reader.getValueClass().asSubclass(Writable.class), conf);\n+      WritableComparable key \u003d ReflectionUtils.newInstance(reader.getKeyClass()\n+        .asSubclass(WritableComparable.class), conf);\n+      Writable value \u003d ReflectionUtils.newInstance(reader.getValueClass()\n+        .asSubclass(Writable.class), conf);\n \n-    while (reader.next(key, value))               // copy all entries\n-      writer.append(key, value);\n-\n-    writer.close();\n+      while (reader.next(key, value))               // copy all entries\n+        writer.append(key, value);\n+    } finally {\n+      IOUtils.cleanup(LOG, writer, reader);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    String usage \u003d \"Usage: MapFile inFile outFile\";\n      \n    if (args.length !\u003d 2) {\n      System.err.println(usage);\n      System.exit(-1);\n    }\n      \n    String in \u003d args[0];\n    String out \u003d args[1];\n\n    Configuration conf \u003d new Configuration();\n    FileSystem fs \u003d FileSystem.getLocal(conf);\n    MapFile.Reader reader \u003d null;\n    MapFile.Writer writer \u003d null;\n    try {\n      reader \u003d new MapFile.Reader(fs, in, conf);\n      writer \u003d\n        new MapFile.Writer(conf, fs, out,\n            reader.getKeyClass().asSubclass(WritableComparable.class),\n            reader.getValueClass());\n\n      WritableComparable key \u003d ReflectionUtils.newInstance(reader.getKeyClass()\n        .asSubclass(WritableComparable.class), conf);\n      Writable value \u003d ReflectionUtils.newInstance(reader.getValueClass()\n        .asSubclass(Writable.class), conf);\n\n      while (reader.next(key, value))               // copy all entries\n        writer.append(key, value);\n    } finally {\n      IOUtils.cleanup(LOG, writer, reader);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    String usage \u003d \"Usage: MapFile inFile outFile\";\n      \n    if (args.length !\u003d 2) {\n      System.err.println(usage);\n      System.exit(-1);\n    }\n      \n    String in \u003d args[0];\n    String out \u003d args[1];\n\n    Configuration conf \u003d new Configuration();\n    FileSystem fs \u003d FileSystem.getLocal(conf);\n    MapFile.Reader reader \u003d new MapFile.Reader(fs, in, conf);\n    MapFile.Writer writer \u003d\n      new MapFile.Writer(conf, fs, out,\n          reader.getKeyClass().asSubclass(WritableComparable.class),\n          reader.getValueClass());\n\n    WritableComparable key \u003d\n      ReflectionUtils.newInstance(reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n    Writable value \u003d\n      ReflectionUtils.newInstance(reader.getValueClass().asSubclass(Writable.class), conf);\n\n    while (reader.next(key, value))               // copy all entries\n      writer.append(key, value);\n\n    writer.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    String usage \u003d \"Usage: MapFile inFile outFile\";\n      \n    if (args.length !\u003d 2) {\n      System.err.println(usage);\n      System.exit(-1);\n    }\n      \n    String in \u003d args[0];\n    String out \u003d args[1];\n\n    Configuration conf \u003d new Configuration();\n    FileSystem fs \u003d FileSystem.getLocal(conf);\n    MapFile.Reader reader \u003d new MapFile.Reader(fs, in, conf);\n    MapFile.Writer writer \u003d\n      new MapFile.Writer(conf, fs, out,\n          reader.getKeyClass().asSubclass(WritableComparable.class),\n          reader.getValueClass());\n\n    WritableComparable key \u003d\n      ReflectionUtils.newInstance(reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n    Writable value \u003d\n      ReflectionUtils.newInstance(reader.getValueClass().asSubclass(Writable.class), conf);\n\n    while (reader.next(key, value))               // copy all entries\n      writer.append(key, value);\n\n    writer.close();\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    String usage \u003d \"Usage: MapFile inFile outFile\";\n      \n    if (args.length !\u003d 2) {\n      System.err.println(usage);\n      System.exit(-1);\n    }\n      \n    String in \u003d args[0];\n    String out \u003d args[1];\n\n    Configuration conf \u003d new Configuration();\n    FileSystem fs \u003d FileSystem.getLocal(conf);\n    MapFile.Reader reader \u003d new MapFile.Reader(fs, in, conf);\n    MapFile.Writer writer \u003d\n      new MapFile.Writer(conf, fs, out,\n          reader.getKeyClass().asSubclass(WritableComparable.class),\n          reader.getValueClass());\n\n    WritableComparable key \u003d\n      ReflectionUtils.newInstance(reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n    Writable value \u003d\n      ReflectionUtils.newInstance(reader.getValueClass().asSubclass(Writable.class), conf);\n\n    while (reader.next(key, value))               // copy all entries\n      writer.append(key, value);\n\n    writer.close();\n  }",
      "path": "common/src/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "common/src/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,29 @@\n+  public static void main(String[] args) throws Exception {\n+    String usage \u003d \"Usage: MapFile inFile outFile\";\n+      \n+    if (args.length !\u003d 2) {\n+      System.err.println(usage);\n+      System.exit(-1);\n+    }\n+      \n+    String in \u003d args[0];\n+    String out \u003d args[1];\n+\n+    Configuration conf \u003d new Configuration();\n+    FileSystem fs \u003d FileSystem.getLocal(conf);\n+    MapFile.Reader reader \u003d new MapFile.Reader(fs, in, conf);\n+    MapFile.Writer writer \u003d\n+      new MapFile.Writer(conf, fs, out,\n+          reader.getKeyClass().asSubclass(WritableComparable.class),\n+          reader.getValueClass());\n+\n+    WritableComparable key \u003d\n+      ReflectionUtils.newInstance(reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n+    Writable value \u003d\n+      ReflectionUtils.newInstance(reader.getValueClass().asSubclass(Writable.class), conf);\n+\n+    while (reader.next(key, value))               // copy all entries\n+      writer.append(key, value);\n+\n+    writer.close();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    String usage \u003d \"Usage: MapFile inFile outFile\";\n      \n    if (args.length !\u003d 2) {\n      System.err.println(usage);\n      System.exit(-1);\n    }\n      \n    String in \u003d args[0];\n    String out \u003d args[1];\n\n    Configuration conf \u003d new Configuration();\n    FileSystem fs \u003d FileSystem.getLocal(conf);\n    MapFile.Reader reader \u003d new MapFile.Reader(fs, in, conf);\n    MapFile.Writer writer \u003d\n      new MapFile.Writer(conf, fs, out,\n          reader.getKeyClass().asSubclass(WritableComparable.class),\n          reader.getValueClass());\n\n    WritableComparable key \u003d\n      ReflectionUtils.newInstance(reader.getKeyClass().asSubclass(WritableComparable.class), conf);\n    Writable value \u003d\n      ReflectionUtils.newInstance(reader.getValueClass().asSubclass(Writable.class), conf);\n\n    while (reader.next(key, value))               // copy all entries\n      writer.append(key, value);\n\n    writer.close();\n  }",
      "path": "src/java/org/apache/hadoop/io/MapFile.java"
    }
  }
}