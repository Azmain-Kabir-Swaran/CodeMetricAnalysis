{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ValueAggregatorJob.java",
  "functionName": "createValueAggregatorJob",
  "functionId": "createValueAggregatorJob___args-String[]",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java",
  "functionStartLine": 198,
  "functionEndLine": 201,
  "numCommitsSeen": 6,
  "timeTaken": 4671,
  "changeHistory": [
    "8888d3fc49dddb1e7bafabf4a1a01b5ff5e5cd19",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8888d3fc49dddb1e7bafabf4a1a01b5ff5e5cd19": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8888d3fc49dddb1e7bafabf4a1a01b5ff5e5cd19": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5159. Change ValueAggregatorJob to add APIs which can support binary compatibility with hadoop-1 examples. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480394 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/13 11:28 AM",
      "commitName": "8888d3fc49dddb1e7bafabf4a1a01b5ff5e5cd19",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/02/12 12:37 AM",
      "commitNameOld": "cc74881acb839bbcab7e6d1346093eed3f35c780",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 461.41,
      "commitsBetweenForRepo": 2664,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,4 @@\n   public static JobConf createValueAggregatorJob(String args[])\n     throws IOException {\n-\n-    Configuration conf \u003d new Configuration();\n-    \n-    GenericOptionsParser genericParser \n-      \u003d new GenericOptionsParser(conf, args);\n-    args \u003d genericParser.getRemainingArgs();\n-    \n-    if (args.length \u003c 2) {\n-      System.out.println(\"usage: inputDirs outDir \"\n-          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n-      GenericOptionsParser.printGenericCommandUsage(System.out);\n-      System.exit(1);\n-    }\n-    String inputDir \u003d args[0];\n-    String outputDir \u003d args[1];\n-    int numOfReducers \u003d 1;\n-    if (args.length \u003e 2) {\n-      numOfReducers \u003d Integer.parseInt(args[2]);\n-    }\n-\n-    Class\u003c? extends InputFormat\u003e theInputFormat \u003d\n-      TextInputFormat.class;\n-    if (args.length \u003e 3 \u0026\u0026 \n-        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n-      theInputFormat \u003d TextInputFormat.class;\n-    } else {\n-      theInputFormat \u003d SequenceFileInputFormat.class;\n-    }\n-\n-    Path specFile \u003d null;\n-\n-    if (args.length \u003e 4) {\n-      specFile \u003d new Path(args[4]);\n-    }\n-\n-    String jobName \u003d \"\";\n-    \n-    if (args.length \u003e 5) {\n-      jobName \u003d args[5];\n-    }\n-    \n-    JobConf theJob \u003d new JobConf(conf);\n-    if (specFile !\u003d null) {\n-      theJob.addResource(specFile);\n-    }\n-    String userJarFile \u003d theJob.get(\"user.jar.file\");\n-    if (userJarFile \u003d\u003d null) {\n-      theJob.setJarByClass(ValueAggregator.class);\n-    } else {\n-      theJob.setJar(userJarFile);\n-    }\n-    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n-\n-    FileInputFormat.addInputPaths(theJob, inputDir);\n-\n-    theJob.setInputFormat(theInputFormat);\n-    \n-    theJob.setMapperClass(ValueAggregatorMapper.class);\n-    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n-    theJob.setOutputFormat(TextOutputFormat.class);\n-    theJob.setMapOutputKeyClass(Text.class);\n-    theJob.setMapOutputValueClass(Text.class);\n-    theJob.setOutputKeyClass(Text.class);\n-    theJob.setOutputValueClass(Text.class);\n-    theJob.setReducerClass(ValueAggregatorReducer.class);\n-    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n-    theJob.setNumMapTasks(1);\n-    theJob.setNumReduceTasks(numOfReducers);\n-    return theJob;\n+    return createValueAggregatorJob(args, ValueAggregator.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static JobConf createValueAggregatorJob(String args[])\n    throws IOException {\n    return createValueAggregatorJob(args, ValueAggregator.class);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static JobConf createValueAggregatorJob(String args[])\n    throws IOException {\n\n    Configuration conf \u003d new Configuration();\n    \n    GenericOptionsParser genericParser \n      \u003d new GenericOptionsParser(conf, args);\n    args \u003d genericParser.getRemainingArgs();\n    \n    if (args.length \u003c 2) {\n      System.out.println(\"usage: inputDirs outDir \"\n          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n      GenericOptionsParser.printGenericCommandUsage(System.out);\n      System.exit(1);\n    }\n    String inputDir \u003d args[0];\n    String outputDir \u003d args[1];\n    int numOfReducers \u003d 1;\n    if (args.length \u003e 2) {\n      numOfReducers \u003d Integer.parseInt(args[2]);\n    }\n\n    Class\u003c? extends InputFormat\u003e theInputFormat \u003d\n      TextInputFormat.class;\n    if (args.length \u003e 3 \u0026\u0026 \n        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n      theInputFormat \u003d TextInputFormat.class;\n    } else {\n      theInputFormat \u003d SequenceFileInputFormat.class;\n    }\n\n    Path specFile \u003d null;\n\n    if (args.length \u003e 4) {\n      specFile \u003d new Path(args[4]);\n    }\n\n    String jobName \u003d \"\";\n    \n    if (args.length \u003e 5) {\n      jobName \u003d args[5];\n    }\n    \n    JobConf theJob \u003d new JobConf(conf);\n    if (specFile !\u003d null) {\n      theJob.addResource(specFile);\n    }\n    String userJarFile \u003d theJob.get(\"user.jar.file\");\n    if (userJarFile \u003d\u003d null) {\n      theJob.setJarByClass(ValueAggregator.class);\n    } else {\n      theJob.setJar(userJarFile);\n    }\n    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n\n    FileInputFormat.addInputPaths(theJob, inputDir);\n\n    theJob.setInputFormat(theInputFormat);\n    \n    theJob.setMapperClass(ValueAggregatorMapper.class);\n    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n    theJob.setOutputFormat(TextOutputFormat.class);\n    theJob.setMapOutputKeyClass(Text.class);\n    theJob.setMapOutputValueClass(Text.class);\n    theJob.setOutputKeyClass(Text.class);\n    theJob.setOutputValueClass(Text.class);\n    theJob.setReducerClass(ValueAggregatorReducer.class);\n    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n    theJob.setNumMapTasks(1);\n    theJob.setNumReduceTasks(numOfReducers);\n    return theJob;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static JobConf createValueAggregatorJob(String args[])\n    throws IOException {\n\n    Configuration conf \u003d new Configuration();\n    \n    GenericOptionsParser genericParser \n      \u003d new GenericOptionsParser(conf, args);\n    args \u003d genericParser.getRemainingArgs();\n    \n    if (args.length \u003c 2) {\n      System.out.println(\"usage: inputDirs outDir \"\n          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n      GenericOptionsParser.printGenericCommandUsage(System.out);\n      System.exit(1);\n    }\n    String inputDir \u003d args[0];\n    String outputDir \u003d args[1];\n    int numOfReducers \u003d 1;\n    if (args.length \u003e 2) {\n      numOfReducers \u003d Integer.parseInt(args[2]);\n    }\n\n    Class\u003c? extends InputFormat\u003e theInputFormat \u003d\n      TextInputFormat.class;\n    if (args.length \u003e 3 \u0026\u0026 \n        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n      theInputFormat \u003d TextInputFormat.class;\n    } else {\n      theInputFormat \u003d SequenceFileInputFormat.class;\n    }\n\n    Path specFile \u003d null;\n\n    if (args.length \u003e 4) {\n      specFile \u003d new Path(args[4]);\n    }\n\n    String jobName \u003d \"\";\n    \n    if (args.length \u003e 5) {\n      jobName \u003d args[5];\n    }\n    \n    JobConf theJob \u003d new JobConf(conf);\n    if (specFile !\u003d null) {\n      theJob.addResource(specFile);\n    }\n    String userJarFile \u003d theJob.get(\"user.jar.file\");\n    if (userJarFile \u003d\u003d null) {\n      theJob.setJarByClass(ValueAggregator.class);\n    } else {\n      theJob.setJar(userJarFile);\n    }\n    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n\n    FileInputFormat.addInputPaths(theJob, inputDir);\n\n    theJob.setInputFormat(theInputFormat);\n    \n    theJob.setMapperClass(ValueAggregatorMapper.class);\n    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n    theJob.setOutputFormat(TextOutputFormat.class);\n    theJob.setMapOutputKeyClass(Text.class);\n    theJob.setMapOutputValueClass(Text.class);\n    theJob.setOutputKeyClass(Text.class);\n    theJob.setOutputValueClass(Text.class);\n    theJob.setReducerClass(ValueAggregatorReducer.class);\n    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n    theJob.setNumMapTasks(1);\n    theJob.setNumReduceTasks(numOfReducers);\n    return theJob;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,72 @@\n+  public static JobConf createValueAggregatorJob(String args[])\n+    throws IOException {\n+\n+    Configuration conf \u003d new Configuration();\n+    \n+    GenericOptionsParser genericParser \n+      \u003d new GenericOptionsParser(conf, args);\n+    args \u003d genericParser.getRemainingArgs();\n+    \n+    if (args.length \u003c 2) {\n+      System.out.println(\"usage: inputDirs outDir \"\n+          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n+      GenericOptionsParser.printGenericCommandUsage(System.out);\n+      System.exit(1);\n+    }\n+    String inputDir \u003d args[0];\n+    String outputDir \u003d args[1];\n+    int numOfReducers \u003d 1;\n+    if (args.length \u003e 2) {\n+      numOfReducers \u003d Integer.parseInt(args[2]);\n+    }\n+\n+    Class\u003c? extends InputFormat\u003e theInputFormat \u003d\n+      TextInputFormat.class;\n+    if (args.length \u003e 3 \u0026\u0026 \n+        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n+      theInputFormat \u003d TextInputFormat.class;\n+    } else {\n+      theInputFormat \u003d SequenceFileInputFormat.class;\n+    }\n+\n+    Path specFile \u003d null;\n+\n+    if (args.length \u003e 4) {\n+      specFile \u003d new Path(args[4]);\n+    }\n+\n+    String jobName \u003d \"\";\n+    \n+    if (args.length \u003e 5) {\n+      jobName \u003d args[5];\n+    }\n+    \n+    JobConf theJob \u003d new JobConf(conf);\n+    if (specFile !\u003d null) {\n+      theJob.addResource(specFile);\n+    }\n+    String userJarFile \u003d theJob.get(\"user.jar.file\");\n+    if (userJarFile \u003d\u003d null) {\n+      theJob.setJarByClass(ValueAggregator.class);\n+    } else {\n+      theJob.setJar(userJarFile);\n+    }\n+    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n+\n+    FileInputFormat.addInputPaths(theJob, inputDir);\n+\n+    theJob.setInputFormat(theInputFormat);\n+    \n+    theJob.setMapperClass(ValueAggregatorMapper.class);\n+    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n+    theJob.setOutputFormat(TextOutputFormat.class);\n+    theJob.setMapOutputKeyClass(Text.class);\n+    theJob.setMapOutputValueClass(Text.class);\n+    theJob.setOutputKeyClass(Text.class);\n+    theJob.setOutputValueClass(Text.class);\n+    theJob.setReducerClass(ValueAggregatorReducer.class);\n+    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n+    theJob.setNumMapTasks(1);\n+    theJob.setNumReduceTasks(numOfReducers);\n+    return theJob;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static JobConf createValueAggregatorJob(String args[])\n    throws IOException {\n\n    Configuration conf \u003d new Configuration();\n    \n    GenericOptionsParser genericParser \n      \u003d new GenericOptionsParser(conf, args);\n    args \u003d genericParser.getRemainingArgs();\n    \n    if (args.length \u003c 2) {\n      System.out.println(\"usage: inputDirs outDir \"\n          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n      GenericOptionsParser.printGenericCommandUsage(System.out);\n      System.exit(1);\n    }\n    String inputDir \u003d args[0];\n    String outputDir \u003d args[1];\n    int numOfReducers \u003d 1;\n    if (args.length \u003e 2) {\n      numOfReducers \u003d Integer.parseInt(args[2]);\n    }\n\n    Class\u003c? extends InputFormat\u003e theInputFormat \u003d\n      TextInputFormat.class;\n    if (args.length \u003e 3 \u0026\u0026 \n        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n      theInputFormat \u003d TextInputFormat.class;\n    } else {\n      theInputFormat \u003d SequenceFileInputFormat.class;\n    }\n\n    Path specFile \u003d null;\n\n    if (args.length \u003e 4) {\n      specFile \u003d new Path(args[4]);\n    }\n\n    String jobName \u003d \"\";\n    \n    if (args.length \u003e 5) {\n      jobName \u003d args[5];\n    }\n    \n    JobConf theJob \u003d new JobConf(conf);\n    if (specFile !\u003d null) {\n      theJob.addResource(specFile);\n    }\n    String userJarFile \u003d theJob.get(\"user.jar.file\");\n    if (userJarFile \u003d\u003d null) {\n      theJob.setJarByClass(ValueAggregator.class);\n    } else {\n      theJob.setJar(userJarFile);\n    }\n    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n\n    FileInputFormat.addInputPaths(theJob, inputDir);\n\n    theJob.setInputFormat(theInputFormat);\n    \n    theJob.setMapperClass(ValueAggregatorMapper.class);\n    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n    theJob.setOutputFormat(TextOutputFormat.class);\n    theJob.setMapOutputKeyClass(Text.class);\n    theJob.setMapOutputValueClass(Text.class);\n    theJob.setOutputKeyClass(Text.class);\n    theJob.setOutputValueClass(Text.class);\n    theJob.setReducerClass(ValueAggregatorReducer.class);\n    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n    theJob.setNumMapTasks(1);\n    theJob.setNumReduceTasks(numOfReducers);\n    return theJob;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/lib/aggregate/ValueAggregatorJob.java"
    }
  }
}