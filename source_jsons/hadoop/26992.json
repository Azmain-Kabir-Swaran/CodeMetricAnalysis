{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNUtils.java",
  "functionName": "createCOSCredentialProvider",
  "functionId": "createCOSCredentialProvider___uri-URI__conf-Configuration__credClass-Class__?__",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java",
  "functionStartLine": 88,
  "functionEndLine": 155,
  "numCommitsSeen": 3,
  "timeTaken": 1501,
  "changeHistory": [
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d": "Ymultichange(Yparameterchange,Ybodychange)",
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
      "commitDate": "20/04/20 3:14 AM",
      "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
      "commitAuthor": "Sammi Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
          "commitDate": "20/04/20 3:14 AM",
          "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/09/19 1:53 AM",
          "commitNameOld": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 206.06,
          "commitsBetweenForRepo": 773,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,68 @@\n   public static COSCredentialsProvider createCOSCredentialProvider(\n+      URI uri,\n       Configuration conf,\n       Class\u003c?\u003e credClass) throws IOException {\n     COSCredentialsProvider credentialsProvider;\n     if (!COSCredentialsProvider.class.isAssignableFrom(credClass)) {\n-      throw new IllegalArgumentException(\n-          \"class \" + credClass + \" \" + NOT_COS_CREDENTIAL_PROVIDER);\n+      throw new IllegalArgumentException(\"class \" + credClass + \" \" +\n+          NOT_COS_CREDENTIAL_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n-      throw new IllegalArgumentException(\n-          \"class \" + credClass + \" \" + ABSTRACT_CREDENTIAL_PROVIDER);\n+      throw new IllegalArgumentException(\"class \" + credClass + \" \" +\n+          ABSTRACT_CREDENTIAL_PROVIDER);\n     }\n     LOG.debug(\"Credential Provider class: \" + credClass.getName());\n \n     try {\n       // new credClass()\n       Constructor constructor \u003d getConstructor(credClass);\n       if (constructor !\u003d null) {\n         credentialsProvider \u003d\n             (COSCredentialsProvider) constructor.newInstance();\n         return credentialsProvider;\n       }\n       // new credClass(conf)\n       constructor \u003d getConstructor(credClass, Configuration.class);\n       if (null !\u003d constructor) {\n         credentialsProvider \u003d\n             (COSCredentialsProvider) constructor.newInstance(conf);\n         return credentialsProvider;\n       }\n \n-      Method factory \u003d getFactoryMethod(\n-          credClass, COSCredentialsProvider.class, \"getInstance\");\n+      // new credClass(uri, conf)\n+      constructor \u003d getConstructor(credClass, URI.class,\n+          Configuration.class);\n+      if (null !\u003d constructor) {\n+        credentialsProvider \u003d\n+            (COSCredentialsProvider) constructor.newInstance(uri,\n+                conf);\n+        return credentialsProvider;\n+      }\n+\n+      Method factory \u003d getFactoryMethod(credClass,\n+          COSCredentialsProvider.class, \"getInstance\");\n       if (null !\u003d factory) {\n         credentialsProvider \u003d (COSCredentialsProvider) factory.invoke(null);\n         return credentialsProvider;\n       }\n \n       throw new IllegalArgumentException(\n           \"Not supported constructor or factory method found\"\n       );\n \n     } catch (IllegalAccessException e) {\n       throw new IOException(\n           credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n     } catch (InstantiationException e) {\n       throw new IOException(\n           credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d e;\n       }\n       throw new IOException(\n           credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \"\n               + targetException, targetException);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static COSCredentialsProvider createCOSCredentialProvider(\n      URI uri,\n      Configuration conf,\n      Class\u003c?\u003e credClass) throws IOException {\n    COSCredentialsProvider credentialsProvider;\n    if (!COSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IllegalArgumentException(\"class \" + credClass + \" \" +\n          NOT_COS_CREDENTIAL_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IllegalArgumentException(\"class \" + credClass + \" \" +\n          ABSTRACT_CREDENTIAL_PROVIDER);\n    }\n    LOG.debug(\"Credential Provider class: \" + credClass.getName());\n\n    try {\n      // new credClass()\n      Constructor constructor \u003d getConstructor(credClass);\n      if (constructor !\u003d null) {\n        credentialsProvider \u003d\n            (COSCredentialsProvider) constructor.newInstance();\n        return credentialsProvider;\n      }\n      // new credClass(conf)\n      constructor \u003d getConstructor(credClass, Configuration.class);\n      if (null !\u003d constructor) {\n        credentialsProvider \u003d\n            (COSCredentialsProvider) constructor.newInstance(conf);\n        return credentialsProvider;\n      }\n\n      // new credClass(uri, conf)\n      constructor \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (null !\u003d constructor) {\n        credentialsProvider \u003d\n            (COSCredentialsProvider) constructor.newInstance(uri,\n                conf);\n        return credentialsProvider;\n      }\n\n      Method factory \u003d getFactoryMethod(credClass,\n          COSCredentialsProvider.class, \"getInstance\");\n      if (null !\u003d factory) {\n        credentialsProvider \u003d (COSCredentialsProvider) factory.invoke(null);\n        return credentialsProvider;\n      }\n\n      throw new IllegalArgumentException(\n          \"Not supported constructor or factory method found\"\n      );\n\n    } catch (IllegalAccessException e) {\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n    } catch (InstantiationException e) {\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d e;\n      }\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \"\n              + targetException, targetException);\n    }\n  }",
          "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, credClass-Class\u003c?\u003e]",
            "newValue": "[uri-URI, conf-Configuration, credClass-Class\u003c?\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
          "commitDate": "20/04/20 3:14 AM",
          "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/09/19 1:53 AM",
          "commitNameOld": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 206.06,
          "commitsBetweenForRepo": 773,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,68 @@\n   public static COSCredentialsProvider createCOSCredentialProvider(\n+      URI uri,\n       Configuration conf,\n       Class\u003c?\u003e credClass) throws IOException {\n     COSCredentialsProvider credentialsProvider;\n     if (!COSCredentialsProvider.class.isAssignableFrom(credClass)) {\n-      throw new IllegalArgumentException(\n-          \"class \" + credClass + \" \" + NOT_COS_CREDENTIAL_PROVIDER);\n+      throw new IllegalArgumentException(\"class \" + credClass + \" \" +\n+          NOT_COS_CREDENTIAL_PROVIDER);\n     }\n     if (Modifier.isAbstract(credClass.getModifiers())) {\n-      throw new IllegalArgumentException(\n-          \"class \" + credClass + \" \" + ABSTRACT_CREDENTIAL_PROVIDER);\n+      throw new IllegalArgumentException(\"class \" + credClass + \" \" +\n+          ABSTRACT_CREDENTIAL_PROVIDER);\n     }\n     LOG.debug(\"Credential Provider class: \" + credClass.getName());\n \n     try {\n       // new credClass()\n       Constructor constructor \u003d getConstructor(credClass);\n       if (constructor !\u003d null) {\n         credentialsProvider \u003d\n             (COSCredentialsProvider) constructor.newInstance();\n         return credentialsProvider;\n       }\n       // new credClass(conf)\n       constructor \u003d getConstructor(credClass, Configuration.class);\n       if (null !\u003d constructor) {\n         credentialsProvider \u003d\n             (COSCredentialsProvider) constructor.newInstance(conf);\n         return credentialsProvider;\n       }\n \n-      Method factory \u003d getFactoryMethod(\n-          credClass, COSCredentialsProvider.class, \"getInstance\");\n+      // new credClass(uri, conf)\n+      constructor \u003d getConstructor(credClass, URI.class,\n+          Configuration.class);\n+      if (null !\u003d constructor) {\n+        credentialsProvider \u003d\n+            (COSCredentialsProvider) constructor.newInstance(uri,\n+                conf);\n+        return credentialsProvider;\n+      }\n+\n+      Method factory \u003d getFactoryMethod(credClass,\n+          COSCredentialsProvider.class, \"getInstance\");\n       if (null !\u003d factory) {\n         credentialsProvider \u003d (COSCredentialsProvider) factory.invoke(null);\n         return credentialsProvider;\n       }\n \n       throw new IllegalArgumentException(\n           \"Not supported constructor or factory method found\"\n       );\n \n     } catch (IllegalAccessException e) {\n       throw new IOException(\n           credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n     } catch (InstantiationException e) {\n       throw new IOException(\n           credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n     } catch (InvocationTargetException e) {\n       Throwable targetException \u003d e.getTargetException();\n       if (targetException \u003d\u003d null) {\n         targetException \u003d e;\n       }\n       throw new IOException(\n           credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \"\n               + targetException, targetException);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static COSCredentialsProvider createCOSCredentialProvider(\n      URI uri,\n      Configuration conf,\n      Class\u003c?\u003e credClass) throws IOException {\n    COSCredentialsProvider credentialsProvider;\n    if (!COSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IllegalArgumentException(\"class \" + credClass + \" \" +\n          NOT_COS_CREDENTIAL_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IllegalArgumentException(\"class \" + credClass + \" \" +\n          ABSTRACT_CREDENTIAL_PROVIDER);\n    }\n    LOG.debug(\"Credential Provider class: \" + credClass.getName());\n\n    try {\n      // new credClass()\n      Constructor constructor \u003d getConstructor(credClass);\n      if (constructor !\u003d null) {\n        credentialsProvider \u003d\n            (COSCredentialsProvider) constructor.newInstance();\n        return credentialsProvider;\n      }\n      // new credClass(conf)\n      constructor \u003d getConstructor(credClass, Configuration.class);\n      if (null !\u003d constructor) {\n        credentialsProvider \u003d\n            (COSCredentialsProvider) constructor.newInstance(conf);\n        return credentialsProvider;\n      }\n\n      // new credClass(uri, conf)\n      constructor \u003d getConstructor(credClass, URI.class,\n          Configuration.class);\n      if (null !\u003d constructor) {\n        credentialsProvider \u003d\n            (COSCredentialsProvider) constructor.newInstance(uri,\n                conf);\n        return credentialsProvider;\n      }\n\n      Method factory \u003d getFactoryMethod(credClass,\n          COSCredentialsProvider.class, \"getInstance\");\n      if (null !\u003d factory) {\n        credentialsProvider \u003d (COSCredentialsProvider) factory.invoke(null);\n        return credentialsProvider;\n      }\n\n      throw new IllegalArgumentException(\n          \"Not supported constructor or factory method found\"\n      );\n\n    } catch (IllegalAccessException e) {\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n    } catch (InstantiationException e) {\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d e;\n      }\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \"\n              + targetException, targetException);\n    }\n  }",
          "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,57 @@\n+  public static COSCredentialsProvider createCOSCredentialProvider(\n+      Configuration conf,\n+      Class\u003c?\u003e credClass) throws IOException {\n+    COSCredentialsProvider credentialsProvider;\n+    if (!COSCredentialsProvider.class.isAssignableFrom(credClass)) {\n+      throw new IllegalArgumentException(\n+          \"class \" + credClass + \" \" + NOT_COS_CREDENTIAL_PROVIDER);\n+    }\n+    if (Modifier.isAbstract(credClass.getModifiers())) {\n+      throw new IllegalArgumentException(\n+          \"class \" + credClass + \" \" + ABSTRACT_CREDENTIAL_PROVIDER);\n+    }\n+    LOG.debug(\"Credential Provider class: \" + credClass.getName());\n+\n+    try {\n+      // new credClass()\n+      Constructor constructor \u003d getConstructor(credClass);\n+      if (constructor !\u003d null) {\n+        credentialsProvider \u003d\n+            (COSCredentialsProvider) constructor.newInstance();\n+        return credentialsProvider;\n+      }\n+      // new credClass(conf)\n+      constructor \u003d getConstructor(credClass, Configuration.class);\n+      if (null !\u003d constructor) {\n+        credentialsProvider \u003d\n+            (COSCredentialsProvider) constructor.newInstance(conf);\n+        return credentialsProvider;\n+      }\n+\n+      Method factory \u003d getFactoryMethod(\n+          credClass, COSCredentialsProvider.class, \"getInstance\");\n+      if (null !\u003d factory) {\n+        credentialsProvider \u003d (COSCredentialsProvider) factory.invoke(null);\n+        return credentialsProvider;\n+      }\n+\n+      throw new IllegalArgumentException(\n+          \"Not supported constructor or factory method found\"\n+      );\n+\n+    } catch (IllegalAccessException e) {\n+      throw new IOException(\n+          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n+    } catch (InstantiationException e) {\n+      throw new IOException(\n+          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n+    } catch (InvocationTargetException e) {\n+      Throwable targetException \u003d e.getTargetException();\n+      if (targetException \u003d\u003d null) {\n+        targetException \u003d e;\n+      }\n+      throw new IOException(\n+          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \"\n+              + targetException, targetException);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static COSCredentialsProvider createCOSCredentialProvider(\n      Configuration conf,\n      Class\u003c?\u003e credClass) throws IOException {\n    COSCredentialsProvider credentialsProvider;\n    if (!COSCredentialsProvider.class.isAssignableFrom(credClass)) {\n      throw new IllegalArgumentException(\n          \"class \" + credClass + \" \" + NOT_COS_CREDENTIAL_PROVIDER);\n    }\n    if (Modifier.isAbstract(credClass.getModifiers())) {\n      throw new IllegalArgumentException(\n          \"class \" + credClass + \" \" + ABSTRACT_CREDENTIAL_PROVIDER);\n    }\n    LOG.debug(\"Credential Provider class: \" + credClass.getName());\n\n    try {\n      // new credClass()\n      Constructor constructor \u003d getConstructor(credClass);\n      if (constructor !\u003d null) {\n        credentialsProvider \u003d\n            (COSCredentialsProvider) constructor.newInstance();\n        return credentialsProvider;\n      }\n      // new credClass(conf)\n      constructor \u003d getConstructor(credClass, Configuration.class);\n      if (null !\u003d constructor) {\n        credentialsProvider \u003d\n            (COSCredentialsProvider) constructor.newInstance(conf);\n        return credentialsProvider;\n      }\n\n      Method factory \u003d getFactoryMethod(\n          credClass, COSCredentialsProvider.class, \"getInstance\");\n      if (null !\u003d factory) {\n        credentialsProvider \u003d (COSCredentialsProvider) factory.invoke(null);\n        return credentialsProvider;\n      }\n\n      throw new IllegalArgumentException(\n          \"Not supported constructor or factory method found\"\n      );\n\n    } catch (IllegalAccessException e) {\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n    } catch (InstantiationException e) {\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \" + e, e);\n    } catch (InvocationTargetException e) {\n      Throwable targetException \u003d e.getTargetException();\n      if (targetException \u003d\u003d null) {\n        targetException \u003d e;\n      }\n      throw new IOException(\n          credClass.getName() + \" \" + INSTANTIATION_EXCEPTION + \": \"\n              + targetException, targetException);\n    }\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java"
    }
  }
}