{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineCollectorWebService.java",
  "functionName": "putEntities",
  "functionId": "putEntities___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__async-String(annotations-@QueryParam(\"async\"))__isSubAppEntities-String(annotations-@QueryParam(\"subappwrite\"))__appId-String(annotations-@QueryParam(\"appid\"))__entities-TimelineEntities",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
  "functionStartLine": 150,
  "functionEndLine": 211,
  "numCommitsSeen": 32,
  "timeTaken": 6981,
  "changeHistory": [
    "da2b4fe204e502fc1a2d37e4cb0f7cc8485f6da6",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684",
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
    "063b513b1c10987461caab3d26c8543c6e657bf7",
    "2bdefbc4a070df2932a66e580d70239c132299d2",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
    "5712b8f9fd1859fe046b482889239bd164ed7dab",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438",
    "bf54d32750f8b27a170d7a0a8d8f022430327341",
    "9d57c9c0154051afebc5a27fa4ad792df4b969a5",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
    "7c8abec0a8fc8b10f57438c60b77f48dac679b68"
  ],
  "changeHistoryShort": {
    "da2b4fe204e502fc1a2d37e4cb0f7cc8485f6da6": "Ybodychange",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": "Ybodychange",
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6": "Ybodychange",
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc": "Ymultichange(Yparameterchange,Ybodychange)",
    "063b513b1c10987461caab3d26c8543c6e657bf7": "Ybodychange",
    "2bdefbc4a070df2932a66e580d70239c132299d2": "Ybodychange",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": "Ybodychange",
    "5712b8f9fd1859fe046b482889239bd164ed7dab": "Ybodychange",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": "Ybodychange",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": "Ymultichange(Yfilerename,Ybodychange)",
    "bf54d32750f8b27a170d7a0a8d8f022430327341": "Ymultichange(Yfilerename,Ybodychange)",
    "9d57c9c0154051afebc5a27fa4ad792df4b969a5": "Ybodychange",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "7c8abec0a8fc8b10f57438c60b77f48dac679b68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da2b4fe204e502fc1a2d37e4cb0f7cc8485f6da6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9794. RM crashes due to runtime errors in TimelineServiceV2Publisher. Contributed by Tarun Parimi.\n",
      "commitDate": "15/09/19 1:46 AM",
      "commitName": "da2b4fe204e502fc1a2d37e4cb0f7cc8485f6da6",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "27/09/18 3:53 PM",
      "commitNameOld": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 352.41,
      "commitsBetweenForRepo": 2697,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,62 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"subappwrite\") String isSubAppEntities,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     long startTime \u003d Time.monotonicNow();\n     boolean succeeded \u003d false;\n     try {\n       ApplicationId appID \u003d parseApplicationId(appId);\n       if (appID \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       NodeTimelineCollectorManager collectorManager \u003d\n           (NodeTimelineCollectorManager) context.getAttribute(\n               NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n       TimelineCollector collector \u003d collectorManager.get(appID);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application: \"+ appId + \" is not found\");\n         throw new NotFoundException(\"Application: \"+ appId + \" is not found\");\n       }\n \n       if (isAsync) {\n         collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n             Boolean.valueOf(isSubAppEntities)), callerUgi);\n       } else {\n         collector.putEntities(processTimelineEntities(entities, appId,\n             Boolean.valueOf(isSubAppEntities)), callerUgi);\n       }\n \n       succeeded \u003d true;\n       return Response.ok().build();\n     } catch (NotFoundException | ForbiddenException e) {\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n+    } catch (Exception e) {\n+      LOG.error(\"Unexpected error while putting entities\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n     } finally {\n       long latency \u003d Time.monotonicNow() - startTime;\n       if (isAsync) {\n         METRICS.addAsyncPutEntitiesLatency(latency, succeeded);\n       } else {\n         METRICS.addPutEntitiesLatency(latency, succeeded);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"subappwrite\") String isSubAppEntities,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    try {\n      ApplicationId appID \u003d parseApplicationId(appId);\n      if (appID \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      NodeTimelineCollectorManager collectorManager \u003d\n          (NodeTimelineCollectorManager) context.getAttribute(\n              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n      TimelineCollector collector \u003d collectorManager.get(appID);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(\"Application: \"+ appId + \" is not found\");\n      }\n\n      if (isAsync) {\n        collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      } else {\n        collector.putEntities(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      }\n\n      succeeded \u003d true;\n      return Response.ok().build();\n    } catch (NotFoundException | ForbiddenException e) {\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } catch (Exception e) {\n      LOG.error(\"Unexpected error while putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      if (isAsync) {\n        METRICS.addAsyncPutEntitiesLatency(latency, succeeded);\n      } else {\n        METRICS.addPutEntitiesLatency(latency, succeeded);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8270 Adding JMX Metrics for Timeline Collector and Reader. Contributed by Sushil Ks.\n",
      "commitDate": "27/09/18 3:53 PM",
      "commitName": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "14/06/18 12:08 AM",
      "commitNameOld": "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 105.66,
      "commitsBetweenForRepo": 817,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,58 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"subappwrite\") String isSubAppEntities,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n+    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n+    long startTime \u003d Time.monotonicNow();\n+    boolean succeeded \u003d false;\n     try {\n       ApplicationId appID \u003d parseApplicationId(appId);\n       if (appID \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       NodeTimelineCollectorManager collectorManager \u003d\n           (NodeTimelineCollectorManager) context.getAttribute(\n               NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n       TimelineCollector collector \u003d collectorManager.get(appID);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application: \"+ appId + \" is not found\");\n         throw new NotFoundException(\"Application: \"+ appId + \" is not found\");\n       }\n \n-      boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n       if (isAsync) {\n         collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n             Boolean.valueOf(isSubAppEntities)), callerUgi);\n       } else {\n         collector.putEntities(processTimelineEntities(entities, appId,\n             Boolean.valueOf(isSubAppEntities)), callerUgi);\n       }\n \n+      succeeded \u003d true;\n       return Response.ok().build();\n     } catch (NotFoundException | ForbiddenException e) {\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n+    } finally {\n+      long latency \u003d Time.monotonicNow() - startTime;\n+      if (isAsync) {\n+        METRICS.addAsyncPutEntitiesLatency(latency, succeeded);\n+      } else {\n+        METRICS.addPutEntitiesLatency(latency, succeeded);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"subappwrite\") String isSubAppEntities,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    try {\n      ApplicationId appID \u003d parseApplicationId(appId);\n      if (appID \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      NodeTimelineCollectorManager collectorManager \u003d\n          (NodeTimelineCollectorManager) context.getAttribute(\n              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n      TimelineCollector collector \u003d collectorManager.get(appID);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(\"Application: \"+ appId + \" is not found\");\n      }\n\n      if (isAsync) {\n        collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      } else {\n        collector.putEntities(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      }\n\n      succeeded \u003d true;\n      return Response.ok().build();\n    } catch (NotFoundException | ForbiddenException e) {\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      if (isAsync) {\n        METRICS.addAsyncPutEntitiesLatency(latency, succeeded);\n      } else {\n        METRICS.addPutEntitiesLatency(latency, succeeded);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8155. Improve ATSv2 client logging in RM and NM publisher. Contributed by Abhishek Modi.\n",
      "commitDate": "14/06/18 12:08 AM",
      "commitName": "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "16/05/18 1:00 PM",
      "commitNameOld": "e3b7d7ac1694b8766ae11bc7e8ecf09763bb26db",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 28.46,
      "commitsBetweenForRepo": 239,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"subappwrite\") String isSubAppEntities,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     try {\n       ApplicationId appID \u003d parseApplicationId(appId);\n       if (appID \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       NodeTimelineCollectorManager collectorManager \u003d\n           (NodeTimelineCollectorManager) context.getAttribute(\n               NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n       TimelineCollector collector \u003d collectorManager.get(appID);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application: \"+ appId + \" is not found\");\n-        throw new NotFoundException(); // different exception?\n+        throw new NotFoundException(\"Application: \"+ appId + \" is not found\");\n       }\n \n       boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n       if (isAsync) {\n         collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n             Boolean.valueOf(isSubAppEntities)), callerUgi);\n       } else {\n         collector.putEntities(processTimelineEntities(entities, appId,\n             Boolean.valueOf(isSubAppEntities)), callerUgi);\n       }\n \n       return Response.ok().build();\n-    } catch (Exception e) {\n+    } catch (NotFoundException | ForbiddenException e) {\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n+    } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"subappwrite\") String isSubAppEntities,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    try {\n      ApplicationId appID \u003d parseApplicationId(appId);\n      if (appID \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      NodeTimelineCollectorManager collectorManager \u003d\n          (NodeTimelineCollectorManager) context.getAttribute(\n              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n      TimelineCollector collector \u003d collectorManager.get(appID);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(\"Application: \"+ appId + \" is not found\");\n      }\n\n      boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n      if (isAsync) {\n        collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      } else {\n        collector.putEntities(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      }\n\n      return Response.ok().build();\n    } catch (NotFoundException | ForbiddenException e) {\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "f8b8bd53c4797d406bea5b1b0cdb179e209169cc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6936. [Atsv2] Retrospect storing entities into sub application table from client perspective. (Rohith Sharma K S via Haibo Chen)\n",
      "commitDate": "05/04/18 10:23 AM",
      "commitName": "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6936. [Atsv2] Retrospect storing entities into sub application table from client perspective. (Rohith Sharma K S via Haibo Chen)\n",
          "commitDate": "05/04/18 10:23 AM",
          "commitName": "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "09/08/17 7:58 AM",
          "commitNameOld": "63cfcb90ac6fbb79ba9ed6b3044cd999fc74e58c",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 239.1,
          "commitsBetweenForRepo": 1846,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,45 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n+      @QueryParam(\"subappwrite\") String isSubAppEntities,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     try {\n       ApplicationId appID \u003d parseApplicationId(appId);\n       if (appID \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       NodeTimelineCollectorManager collectorManager \u003d\n           (NodeTimelineCollectorManager) context.getAttribute(\n               NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n       TimelineCollector collector \u003d collectorManager.get(appID);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application: \"+ appId + \" is not found\");\n         throw new NotFoundException(); // different exception?\n       }\n \n       boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n       if (isAsync) {\n-        collector.putEntitiesAsync(\n-            processTimelineEntities(entities), callerUgi);\n+        collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n+            Boolean.valueOf(isSubAppEntities)), callerUgi);\n       } else {\n-        collector.putEntities(processTimelineEntities(entities), callerUgi);\n+        collector.putEntities(processTimelineEntities(entities, appId,\n+            Boolean.valueOf(isSubAppEntities)), callerUgi);\n       }\n \n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"subappwrite\") String isSubAppEntities,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    try {\n      ApplicationId appID \u003d parseApplicationId(appId);\n      if (appID \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      NodeTimelineCollectorManager collectorManager \u003d\n          (NodeTimelineCollectorManager) context.getAttribute(\n              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n      TimelineCollector collector \u003d collectorManager.get(appID);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(); // different exception?\n      }\n\n      boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n      if (isAsync) {\n        collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      } else {\n        collector.putEntities(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      }\n\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), async-String(annotations-@QueryParam(\"async\")), appId-String(annotations-@QueryParam(\"appid\")), entities-TimelineEntities]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), async-String(annotations-@QueryParam(\"async\")), isSubAppEntities-String(annotations-@QueryParam(\"subappwrite\")), appId-String(annotations-@QueryParam(\"appid\")), entities-TimelineEntities]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6936. [Atsv2] Retrospect storing entities into sub application table from client perspective. (Rohith Sharma K S via Haibo Chen)\n",
          "commitDate": "05/04/18 10:23 AM",
          "commitName": "f8b8bd53c4797d406bea5b1b0cdb179e209169cc",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "09/08/17 7:58 AM",
          "commitNameOld": "63cfcb90ac6fbb79ba9ed6b3044cd999fc74e58c",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 239.1,
          "commitsBetweenForRepo": 1846,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,45 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n+      @QueryParam(\"subappwrite\") String isSubAppEntities,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     try {\n       ApplicationId appID \u003d parseApplicationId(appId);\n       if (appID \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       NodeTimelineCollectorManager collectorManager \u003d\n           (NodeTimelineCollectorManager) context.getAttribute(\n               NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n       TimelineCollector collector \u003d collectorManager.get(appID);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application: \"+ appId + \" is not found\");\n         throw new NotFoundException(); // different exception?\n       }\n \n       boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n       if (isAsync) {\n-        collector.putEntitiesAsync(\n-            processTimelineEntities(entities), callerUgi);\n+        collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n+            Boolean.valueOf(isSubAppEntities)), callerUgi);\n       } else {\n-        collector.putEntities(processTimelineEntities(entities), callerUgi);\n+        collector.putEntities(processTimelineEntities(entities, appId,\n+            Boolean.valueOf(isSubAppEntities)), callerUgi);\n       }\n \n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"subappwrite\") String isSubAppEntities,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    try {\n      ApplicationId appID \u003d parseApplicationId(appId);\n      if (appID \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      NodeTimelineCollectorManager collectorManager \u003d\n          (NodeTimelineCollectorManager) context.getAttribute(\n              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n      TimelineCollector collector \u003d collectorManager.get(appID);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(); // different exception?\n      }\n\n      boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n      if (isAsync) {\n        collector.putEntitiesAsync(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      } else {\n        collector.putEntities(processTimelineEntities(entities, appId,\n            Boolean.valueOf(isSubAppEntities)), callerUgi);\n      }\n\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
          "extendedDetails": {}
        }
      ]
    },
    "063b513b1c10987461caab3d26c8543c6e657bf7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6357. Implement putEntitiesAsync API in TimelineCollector (Haibo Chen via Varun Saxena)\n",
      "commitDate": "28/03/17 3:18 PM",
      "commitName": "063b513b1c10987461caab3d26c8543c6e657bf7",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "27/10/16 4:09 PM",
      "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 151.96,
      "commitsBetweenForRepo": 878,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n-    // TODO how to express async posts and handle them\n-    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n-\n     try {\n       ApplicationId appID \u003d parseApplicationId(appId);\n       if (appID \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       NodeTimelineCollectorManager collectorManager \u003d\n           (NodeTimelineCollectorManager) context.getAttribute(\n               NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n       TimelineCollector collector \u003d collectorManager.get(appID);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application: \"+ appId + \" is not found\");\n         throw new NotFoundException(); // different exception?\n       }\n \n-      collector.putEntities(processTimelineEntities(entities), callerUgi);\n+      boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n+      if (isAsync) {\n+        collector.putEntitiesAsync(\n+            processTimelineEntities(entities), callerUgi);\n+      } else {\n+        collector.putEntities(processTimelineEntities(entities), callerUgi);\n+      }\n+\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    try {\n      ApplicationId appID \u003d parseApplicationId(appId);\n      if (appID \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      NodeTimelineCollectorManager collectorManager \u003d\n          (NodeTimelineCollectorManager) context.getAttribute(\n              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n      TimelineCollector collector \u003d collectorManager.get(appID);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(); // different exception?\n      }\n\n      boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n      if (isAsync) {\n        collector.putEntitiesAsync(\n            processTimelineEntities(entities), callerUgi);\n      } else {\n        collector.putEntities(processTimelineEntities(entities), callerUgi);\n      }\n\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "2bdefbc4a070df2932a66e580d70239c132299d2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3431. Sub resources of timeline entity needs to be passed to a separate endpoint. Contributed By Zhijie Shen.\n\n(cherry picked from commit fa5cc75245a6dba549620a8b26c7b4a8aed9838e)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2bdefbc4a070df2932a66e580d70239c132299d2",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n       ApplicationId appID \u003d parseApplicationId(appId);\n       if (appID \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       NodeTimelineCollectorManager collectorManager \u003d\n           (NodeTimelineCollectorManager) context.getAttribute(\n               NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n       TimelineCollector collector \u003d collectorManager.get(appID);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application: \"+ appId + \" is not found\");\n         throw new NotFoundException(); // different exception?\n       }\n-      collector.putEntities(entities, callerUgi);\n+\n+      collector.putEntities(processTimelineEntities(entities), callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      ApplicationId appID \u003d parseApplicationId(appId);\n      if (appID \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      NodeTimelineCollectorManager collectorManager \u003d\n          (NodeTimelineCollectorManager) context.getAttribute(\n              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n      TimelineCollector collector \u003d collectorManager.get(appID);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(); // different exception?\n      }\n\n      collector.putEntities(processTimelineEntities(entities), callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3390. Reuse TimelineCollectorManager for RM (Zhijie Shen via sjlee)\n\n(cherry picked from commit 58221188811e0f61d842dac89e1f4ad4fd8aa182)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "5712b8f9fd1859fe046b482889239bd164ed7dab",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n-      appId \u003d parseApplicationId(appId);\n-      if (appId \u003d\u003d null) {\n+      ApplicationId appID \u003d parseApplicationId(appId);\n+      if (appID \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n-      TimelineCollector collector \u003d getCollector(req, appId);\n+      NodeTimelineCollectorManager collectorManager \u003d\n+          (NodeTimelineCollectorManager) context.getAttribute(\n+              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n+      TimelineCollector collector \u003d collectorManager.get(appID);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application: \"+ appId + \" is not found\");\n         throw new NotFoundException(); // different exception?\n       }\n       collector.putEntities(entities, callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      ApplicationId appID \u003d parseApplicationId(appId);\n      if (appID \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      NodeTimelineCollectorManager collectorManager \u003d\n          (NodeTimelineCollectorManager) context.getAttribute(\n              NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\n      TimelineCollector collector \u003d collectorManager.get(appID);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      collector.putEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "5712b8f9fd1859fe046b482889239bd164ed7dab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3334. NM uses timeline client to publish container metrics to new timeline service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5712b8f9fd1859fe046b482889239bd164ed7dab",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n       appId \u003d parseApplicationId(appId);\n       if (appId \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       TimelineCollector collector \u003d getCollector(req, appId);\n       if (collector \u003d\u003d null) {\n-        LOG.error(\"Application not found\");\n+        LOG.error(\"Application: \"+ appId + \" is not found\");\n         throw new NotFoundException(); // different exception?\n       }\n       collector.putEntities(entities, callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      TimelineCollector collector \u003d getCollector(req, appId);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application: \"+ appId + \" is not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      collector.putEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3040. Make putEntities operation be aware of the app\u0027s context. Contributed by Zhijie Shen\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n       appId \u003d parseApplicationId(appId);\n       if (appId \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n       TimelineCollector collector \u003d getCollector(req, appId);\n       if (collector \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n-      collector.postEntities(entities, callerUgi);\n+      collector.putEntities(entities, callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      TimelineCollector collector \u003d getCollector(req, appId);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      collector.putEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
      "extendedDetails": {}
    },
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n       appId \u003d parseApplicationId(appId);\n       if (appId \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n-      TimelineAggregator service \u003d getAggregatorService(req, appId);\n-      if (service \u003d\u003d null) {\n+      TimelineCollector collector \u003d getCollector(req, appId);\n+      if (collector \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n-      service.postEntities(entities, callerUgi);\n+      collector.postEntities(entities, callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      TimelineCollector collector \u003d getCollector(req, appId);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      collector.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorWebService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n       appId \u003d parseApplicationId(appId);\n       if (appId \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n-      TimelineAggregator service \u003d getAggregatorService(req, appId);\n-      if (service \u003d\u003d null) {\n+      TimelineCollector collector \u003d getCollector(req, appId);\n+      if (collector \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n-      service.postEntities(entities, callerUgi);\n+      collector.postEntities(entities, callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      TimelineCollector collector \u003d getCollector(req, appId);\n      if (collector \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      collector.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorWebService.java",
          "extendedDetails": {}
        }
      ]
    },
    "bf54d32750f8b27a170d7a0a8d8f022430327341": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-3210. Refactored timeline aggregator according to new code organization proposed in YARN-3166. Contributed by Li Lu.\n\n(cherry picked from commit d3ff7f06cbc66d3a23c2551e7d4c752689f46afe)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "bf54d32750f8b27a170d7a0a8d8f022430327341",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-3210. Refactored timeline aggregator according to new code organization proposed in YARN-3166. Contributed by Li Lu.\n\n(cherry picked from commit d3ff7f06cbc66d3a23c2551e7d4c752689f46afe)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "bf54d32750f8b27a170d7a0a8d8f022430327341",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "d45ff878c4cb8b359abb17ecf09d24b6f862874c",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n       appId \u003d parseApplicationId(appId);\n       if (appId \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n-      AppLevelAggregatorService service \u003d getAggregatorService(req, appId);\n+      TimelineAggregator service \u003d getAggregatorService(req, appId);\n       if (service \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n       service.postEntities(entities, callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      TimelineAggregator service \u003d getAggregatorService(req, appId);\n      if (service \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      service.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorWebService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorWebService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorWebService.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3210. Refactored timeline aggregator according to new code organization proposed in YARN-3166. Contributed by Li Lu.\n\n(cherry picked from commit d3ff7f06cbc66d3a23c2551e7d4c752689f46afe)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "bf54d32750f8b27a170d7a0a8d8f022430327341",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "d45ff878c4cb8b359abb17ecf09d24b6f862874c",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n       appId \u003d parseApplicationId(appId);\n       if (appId \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n-      AppLevelAggregatorService service \u003d getAggregatorService(req, appId);\n+      TimelineAggregator service \u003d getAggregatorService(req, appId);\n       if (service \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n       service.postEntities(entities, callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      TimelineAggregator service \u003d getAggregatorService(req, appId);\n      if (service \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      service.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorWebService.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d57c9c0154051afebc5a27fa4ad792df4b969a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3087. Made the REST server of per-node aggregator work alone in NM daemon. Conntributed by Li Lu.\n\n(cherry picked from commit 41a08ad404d4278fe598d6c222b2ae0e84bae0df)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d57c9c0154051afebc5a27fa4ad792df4b969a5",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @QueryParam(\"async\") String async,\n       @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n     boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n \n     try {\n       appId \u003d parseApplicationId(appId);\n       if (appId \u003d\u003d null) {\n         return Response.status(Response.Status.BAD_REQUEST).build();\n       }\n-      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n+      AppLevelAggregatorService service \u003d getAggregatorService(req, appId);\n       if (service \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n       service.postEntities(entities, callerUgi);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      AppLevelAggregatorService service \u003d getAggregatorService(req, appId);\n      if (service \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      service.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorWebService.java",
      "extendedDetails": {}
    },
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "7c8abec0a8fc8b10f57438c60b77f48dac679b68",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,35 @@\n-  public TimelinePutResponse postEntities(\n+  public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @QueryParam(\"async\") String async,\n+      @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n+    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n+\n     try {\n-      AppLevelAggregatorService service \u003d getAggregatorService(req);\n+      appId \u003d parseApplicationId(appId);\n+      if (appId \u003d\u003d null) {\n+        return Response.status(Response.Status.BAD_REQUEST).build();\n+      }\n+      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n       if (service \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n-      return service.postEntities(entities, callerUgi);\n+      service.postEntities(entities, callerUgi);\n+      return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n      if (service \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      service.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorWebService.java",
          "extendedDetails": {
            "oldValue": "postEntities",
            "newValue": "putEntities"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "7c8abec0a8fc8b10f57438c60b77f48dac679b68",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,35 @@\n-  public TimelinePutResponse postEntities(\n+  public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @QueryParam(\"async\") String async,\n+      @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n+    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n+\n     try {\n-      AppLevelAggregatorService service \u003d getAggregatorService(req);\n+      appId \u003d parseApplicationId(appId);\n+      if (appId \u003d\u003d null) {\n+        return Response.status(Response.Status.BAD_REQUEST).build();\n+      }\n+      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n       if (service \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n-      return service.postEntities(entities, callerUgi);\n+      service.postEntities(entities, callerUgi);\n+      return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n      if (service \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      service.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorWebService.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), entities-TimelineEntities]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), async-String(annotations-@QueryParam(\"async\")), appId-String(annotations-@QueryParam(\"appid\")), entities-TimelineEntities]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "7c8abec0a8fc8b10f57438c60b77f48dac679b68",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,35 @@\n-  public TimelinePutResponse postEntities(\n+  public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @QueryParam(\"async\") String async,\n+      @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n+    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n+\n     try {\n-      AppLevelAggregatorService service \u003d getAggregatorService(req);\n+      appId \u003d parseApplicationId(appId);\n+      if (appId \u003d\u003d null) {\n+        return Response.status(Response.Status.BAD_REQUEST).build();\n+      }\n+      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n       if (service \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n-      return service.postEntities(entities, callerUgi);\n+      service.postEntities(entities, callerUgi);\n+      return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n      if (service \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      service.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorWebService.java",
          "extendedDetails": {
            "oldValue": "TimelinePutResponse",
            "newValue": "Response"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "7c8abec0a8fc8b10f57438c60b77f48dac679b68",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,35 @@\n-  public TimelinePutResponse postEntities(\n+  public Response putEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @QueryParam(\"async\") String async,\n+      @QueryParam(\"appid\") String appId,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUgi \u003d getUser(req);\n     if (callerUgi \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n \n     // TODO how to express async posts and handle them\n+    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n+\n     try {\n-      AppLevelAggregatorService service \u003d getAggregatorService(req);\n+      appId \u003d parseApplicationId(appId);\n+      if (appId \u003d\u003d null) {\n+        return Response.status(Response.Status.BAD_REQUEST).build();\n+      }\n+      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n       if (service \u003d\u003d null) {\n         LOG.error(\"Application not found\");\n         throw new NotFoundException(); // different exception?\n       }\n-      return service.postEntities(entities, callerUgi);\n+      service.postEntities(entities, callerUgi);\n+      return Response.ok().build();\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response putEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @QueryParam(\"async\") String async,\n      @QueryParam(\"appid\") String appId,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    boolean isAsync \u003d async !\u003d null \u0026\u0026 async.trim().equalsIgnoreCase(\"true\");\n\n    try {\n      appId \u003d parseApplicationId(appId);\n      if (appId \u003d\u003d null) {\n        return Response.status(Response.Status.BAD_REQUEST).build();\n      }\n      AppLevelAggregatorService service \u003d serviceManager.getService(appId);\n      if (service \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      service.postEntities(entities, callerUgi);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorWebService.java",
          "extendedDetails": {}
        }
      ]
    },
    "7c8abec0a8fc8b10f57438c60b77f48dac679b68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3030. Set up TS aggregator with basic request serving structure and lifecycle. Contributed by Sangjin Lee.\n\n(cherry picked from commit f26941b39028ac30c77547e2be2d657bb5bf044a)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "7c8abec0a8fc8b10f57438c60b77f48dac679b68",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,26 @@\n+  public TimelinePutResponse postEntities(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      TimelineEntities entities) {\n+    init(res);\n+    UserGroupInformation callerUgi \u003d getUser(req);\n+    if (callerUgi \u003d\u003d null) {\n+      String msg \u003d \"The owner of the posted timeline entities is not set\";\n+      LOG.error(msg);\n+      throw new ForbiddenException(msg);\n+    }\n+\n+    // TODO how to express async posts and handle them\n+    try {\n+      AppLevelAggregatorService service \u003d getAggregatorService(req);\n+      if (service \u003d\u003d null) {\n+        LOG.error(\"Application not found\");\n+        throw new NotFoundException(); // different exception?\n+      }\n+      return service.postEntities(entities, callerUgi);\n+    } catch (Exception e) {\n+      LOG.error(\"Error putting entities\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUgi \u003d getUser(req);\n    if (callerUgi \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n\n    // TODO how to express async posts and handle them\n    try {\n      AppLevelAggregatorService service \u003d getAggregatorService(req);\n      if (service \u003d\u003d null) {\n        LOG.error(\"Application not found\");\n        throw new NotFoundException(); // different exception?\n      }\n      return service.postEntities(entities, callerUgi);\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/PerNodeAggregatorWebService.java"
    }
  }
}