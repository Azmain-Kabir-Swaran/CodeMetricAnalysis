{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CrcComposer.java",
  "functionName": "update",
  "functionId": "update___crcB-int__bytesPerCrc-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CrcComposer.java",
  "functionStartLine": 142,
  "functionEndLine": 167,
  "numCommitsSeen": 1,
  "timeTaken": 1465,
  "changeHistory": [
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf"
  ],
  "changeHistoryShort": {
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13056. Expose file-level composite CRCs in HDFS which are comparable across different instances/layouts. Contributed by Dennis Huo.\n",
      "commitDate": "10/04/18 9:31 PM",
      "commitName": "7c9cdad6d04c98db5a83e2108219bf6e6c903daf",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,26 @@\n+  public void update(int crcB, long bytesPerCrc) throws IOException {\n+    if (curCompositeCrc \u003d\u003d 0) {\n+      curCompositeCrc \u003d crcB;\n+    } else if (bytesPerCrc \u003d\u003d bytesPerCrcHint) {\n+      curCompositeCrc \u003d CrcUtil.composeWithMonomial(\n+          curCompositeCrc, crcB, precomputedMonomialForHint, crcPolynomial);\n+    } else {\n+      curCompositeCrc \u003d CrcUtil.compose(\n+          curCompositeCrc, crcB, bytesPerCrc, crcPolynomial);\n+    }\n+\n+    curPositionInStripe +\u003d bytesPerCrc;\n+\n+    if (curPositionInStripe \u003e stripeLength) {\n+      throw new IOException(String.format(\n+          \"Current position in stripe \u0027%d\u0027 after advancing by bytesPerCrc \u0027%d\u0027 \"\n+          + \"exceeds stripeLength \u0027%d\u0027 without stripe alignment.\",\n+          curPositionInStripe, bytesPerCrc, stripeLength));\n+    } else if (curPositionInStripe \u003d\u003d stripeLength) {\n+      // Hit a stripe boundary; flush the curCompositeCrc and reset for next\n+      // stripe.\n+      digestOut.write(CrcUtil.intToBytes(curCompositeCrc), 0, CRC_SIZE_BYTES);\n+      curCompositeCrc \u003d 0;\n+      curPositionInStripe \u003d 0;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void update(int crcB, long bytesPerCrc) throws IOException {\n    if (curCompositeCrc \u003d\u003d 0) {\n      curCompositeCrc \u003d crcB;\n    } else if (bytesPerCrc \u003d\u003d bytesPerCrcHint) {\n      curCompositeCrc \u003d CrcUtil.composeWithMonomial(\n          curCompositeCrc, crcB, precomputedMonomialForHint, crcPolynomial);\n    } else {\n      curCompositeCrc \u003d CrcUtil.compose(\n          curCompositeCrc, crcB, bytesPerCrc, crcPolynomial);\n    }\n\n    curPositionInStripe +\u003d bytesPerCrc;\n\n    if (curPositionInStripe \u003e stripeLength) {\n      throw new IOException(String.format(\n          \"Current position in stripe \u0027%d\u0027 after advancing by bytesPerCrc \u0027%d\u0027 \"\n          + \"exceeds stripeLength \u0027%d\u0027 without stripe alignment.\",\n          curPositionInStripe, bytesPerCrc, stripeLength));\n    } else if (curPositionInStripe \u003d\u003d stripeLength) {\n      // Hit a stripe boundary; flush the curCompositeCrc and reset for next\n      // stripe.\n      digestOut.write(CrcUtil.intToBytes(curCompositeCrc), 0, CRC_SIZE_BYTES);\n      curCompositeCrc \u003d 0;\n      curPositionInStripe \u003d 0;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CrcComposer.java"
    }
  }
}