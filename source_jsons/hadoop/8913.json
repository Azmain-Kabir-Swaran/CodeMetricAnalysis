{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirStatAndListingOp.java",
  "functionName": "getListingInt",
  "functionId": "getListingInt___fsd-FSDirectory__pc-FSPermissionChecker__srcArg-String(modifiers-final)__startAfter-byte[]__needLocation-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
  "functionStartLine": 54,
  "functionEndLine": 82,
  "numCommitsSeen": 587,
  "timeTaken": 14081,
  "changeHistory": [
    "ee699dc26c7b660a5222a30782f3bf5cb1e55085",
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
    "a1f3293762dddb0ca953d1145f5b53d9086b25b8",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "6ae39199dac6ac7be6802b31452552c76da16e24",
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7",
    "977e0b3c4ce76746a3d8590d2d790fdc96c86ca5",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
    "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
    "c95b878abf313507666ea018f9e6033c4c166e10"
  ],
  "changeHistoryShort": {
    "ee699dc26c7b660a5222a30782f3bf5cb1e55085": "Ybodychange",
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ymultichange(Yparameterchange,Ybodychange)",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "a0730aa5ced7666a8c92f9fb830b615f5f9f477a": "Ybodychange",
    "a1f3293762dddb0ca953d1145f5b53d9086b25b8": "Ybodychange",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "6ae39199dac6ac7be6802b31452552c76da16e24": "Ybodychange",
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7": "Ybodychange",
    "977e0b3c4ce76746a3d8590d2d790fdc96c86ca5": "Ybodychange",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ybodychange",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": "Ybodychange",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": "Ybodychange",
    "0af44ea8462437f8e7a8271b15a19677fd7f05a1": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "c95b878abf313507666ea018f9e6033c4c166e10": "Ybodychange"
  },
  "changeHistoryDetails": {
    "ee699dc26c7b660a5222a30782f3bf5cb1e55085": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14921. Remove SuperUser Check in Setting Storage Policy in FileStatus During Listing. Contributed by Ayush Saxena.\n",
      "commitDate": "23/10/19 11:44 PM",
      "commitName": "ee699dc26c7b660a5222a30782f3bf5cb1e55085",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "21/10/19 5:31 PM",
      "commitNameOld": "72003b19bf4c652b53625984d109542abd0cf20e",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 2.26,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, FSPermissionChecker pc,\n       final String srcArg, byte[] startAfter, boolean needLocation)\n       throws IOException {\n     final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg, DirOp.READ);\n \n     // Get file name when startAfter is an INodePath.  This is not the\n     // common case so avoid any unnecessary processing unless required.\n     if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n       final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n       if (FSDirectory.isReservedName(startAfterString)) {\n         try {\n           byte[][] components \u003d INode.getPathComponents(startAfterString);\n           components \u003d FSDirectory.resolveComponents(components, fsd);\n           startAfter \u003d components[components.length - 1];\n         } catch (IOException e) {\n           // Possibly the inode is deleted\n           throw new DirectoryListingStartAfterNotFoundException(\n               \"Can\u0027t find startAfter \" + startAfterString);\n         }\n       }\n     }\n \n-    boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       }\n-      isSuperUser \u003d pc.isSuperUser();\n     }\n-    return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n+    return getListing(fsd, iip, startAfter, needLocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, FSPermissionChecker pc,\n      final String srcArg, byte[] startAfter, boolean needLocation)\n      throws IOException {\n    final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg, DirOp.READ);\n\n    // Get file name when startAfter is an INodePath.  This is not the\n    // common case so avoid any unnecessary processing unless required.\n    if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n      final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n      if (FSDirectory.isReservedName(startAfterString)) {\n        try {\n          byte[][] components \u003d INode.getPathComponents(startAfterString);\n          components \u003d FSDirectory.resolveComponents(components, fsd);\n          startAfter \u003d components[components.length - 1];\n        } catch (IOException e) {\n          // Possibly the inode is deleted\n          throw new DirectoryListingStartAfterNotFoundException(\n              \"Can\u0027t find startAfter \" + startAfterString);\n        }\n      }\n    }\n\n    if (fsd.isPermissionEnabled()) {\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      }\n    }\n    return getListing(fsd, iip, startAfter, needLocation);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "11/12/17 8:14 PM",
          "commitNameOld": "693169ef34f856a27dc09d90a45fb4ec5b66ed2c",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 72.64,
          "commitsBetweenForRepo": 423,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n-      byte[] startAfter, boolean needLocation) throws IOException {\n-    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+  static DirectoryListing getListingInt(FSDirectory fsd, FSPermissionChecker pc,\n+      final String srcArg, byte[] startAfter, boolean needLocation)\n+      throws IOException {\n     final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg, DirOp.READ);\n \n     // Get file name when startAfter is an INodePath.  This is not the\n     // common case so avoid any unnecessary processing unless required.\n     if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n       final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n       if (FSDirectory.isReservedName(startAfterString)) {\n         try {\n           byte[][] components \u003d INode.getPathComponents(startAfterString);\n           components \u003d FSDirectory.resolveComponents(components, fsd);\n           startAfter \u003d components[components.length - 1];\n         } catch (IOException e) {\n           // Possibly the inode is deleted\n           throw new DirectoryListingStartAfterNotFoundException(\n               \"Can\u0027t find startAfter \" + startAfterString);\n         }\n       }\n     }\n \n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, FSPermissionChecker pc,\n      final String srcArg, byte[] startAfter, boolean needLocation)\n      throws IOException {\n    final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg, DirOp.READ);\n\n    // Get file name when startAfter is an INodePath.  This is not the\n    // common case so avoid any unnecessary processing unless required.\n    if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n      final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n      if (FSDirectory.isReservedName(startAfterString)) {\n        try {\n          byte[][] components \u003d INode.getPathComponents(startAfterString);\n          components \u003d FSDirectory.resolveComponents(components, fsd);\n          startAfter \u003d components[components.length - 1];\n        } catch (IOException e) {\n          // Possibly the inode is deleted\n          throw new DirectoryListingStartAfterNotFoundException(\n              \"Can\u0027t find startAfter \" + startAfterString);\n        }\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, srcArg-String(modifiers-final), startAfter-byte[], needLocation-boolean]",
            "newValue": "[fsd-FSDirectory, pc-FSPermissionChecker, srcArg-String(modifiers-final), startAfter-byte[], needLocation-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "11/12/17 8:14 PM",
          "commitNameOld": "693169ef34f856a27dc09d90a45fb4ec5b66ed2c",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 72.64,
          "commitsBetweenForRepo": 423,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n-      byte[] startAfter, boolean needLocation) throws IOException {\n-    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+  static DirectoryListing getListingInt(FSDirectory fsd, FSPermissionChecker pc,\n+      final String srcArg, byte[] startAfter, boolean needLocation)\n+      throws IOException {\n     final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg, DirOp.READ);\n \n     // Get file name when startAfter is an INodePath.  This is not the\n     // common case so avoid any unnecessary processing unless required.\n     if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n       final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n       if (FSDirectory.isReservedName(startAfterString)) {\n         try {\n           byte[][] components \u003d INode.getPathComponents(startAfterString);\n           components \u003d FSDirectory.resolveComponents(components, fsd);\n           startAfter \u003d components[components.length - 1];\n         } catch (IOException e) {\n           // Possibly the inode is deleted\n           throw new DirectoryListingStartAfterNotFoundException(\n               \"Can\u0027t find startAfter \" + startAfterString);\n         }\n       }\n     }\n \n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, FSPermissionChecker pc,\n      final String srcArg, byte[] startAfter, boolean needLocation)\n      throws IOException {\n    final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg, DirOp.READ);\n\n    // Get file name when startAfter is an INodePath.  This is not the\n    // common case so avoid any unnecessary processing unless required.\n    if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n      final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n      if (FSDirectory.isReservedName(startAfterString)) {\n        try {\n          byte[][] components \u003d INode.getPathComponents(startAfterString);\n          components \u003d FSDirectory.resolveComponents(components, fsd);\n          startAfter \u003d components[components.length - 1];\n        } catch (IOException e) {\n          // Possibly the inode is deleted\n          throw new DirectoryListingStartAfterNotFoundException(\n              \"Can\u0027t find startAfter \" + startAfterString);\n        }\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 1:11 PM",
      "commitNameOld": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,31 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n-    final INodesInPath iip;\n-    if (fsd.isPermissionEnabled()) {\n-      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n-      iip \u003d fsd.resolvePath(pc, srcArg);\n-    } else {\n-      String src \u003d FSDirectory.resolvePath(srcArg, fsd);\n-      iip \u003d fsd.getINodesInPath(src, true);\n-    }\n+    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg, DirOp.READ);\n \n     // Get file name when startAfter is an INodePath.  This is not the\n     // common case so avoid any unnecessary processing unless required.\n     if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n       final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n       if (FSDirectory.isReservedName(startAfterString)) {\n         try {\n           byte[][] components \u003d INode.getPathComponents(startAfterString);\n           components \u003d FSDirectory.resolveComponents(components, fsd);\n           startAfter \u003d components[components.length - 1];\n         } catch (IOException e) {\n           // Possibly the inode is deleted\n           throw new DirectoryListingStartAfterNotFoundException(\n               \"Can\u0027t find startAfter \" + startAfterString);\n         }\n       }\n     }\n \n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n-      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n-      } else {\n-        fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    final FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    final INodesInPath iip \u003d fsd.resolvePath(pc, srcArg, DirOp.READ);\n\n    // Get file name when startAfter is an INodePath.  This is not the\n    // common case so avoid any unnecessary processing unless required.\n    if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n      final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n      if (FSDirectory.isReservedName(startAfterString)) {\n        try {\n          byte[][] components \u003d INode.getPathComponents(startAfterString);\n          components \u003d FSDirectory.resolveComponents(components, fsd);\n          startAfter \u003d components[components.length - 1];\n        } catch (IOException e) {\n          // Possibly the inode is deleted\n          throw new DirectoryListingStartAfterNotFoundException(\n              \"Can\u0027t find startAfter \" + startAfterString);\n        }\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "a0730aa5ced7666a8c92f9fb830b615f5f9f477a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10851. FSDirStatAndListingOp: stop passing path as string. Contributed by Daryn Sharp.\n",
      "commitDate": "30/09/16 11:03 AM",
      "commitName": "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "24/08/16 1:21 PM",
      "commitNameOld": "a1f3293762dddb0ca953d1145f5b53d9086b25b8",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 36.9,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,40 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n-    String src \u003d null;\n-\n     final INodesInPath iip;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       iip \u003d fsd.resolvePath(pc, srcArg);\n-      src \u003d iip.getPath();\n     } else {\n-      src \u003d FSDirectory.resolvePath(srcArg, fsd);\n+      String src \u003d FSDirectory.resolvePath(srcArg, fsd);\n       iip \u003d fsd.getINodesInPath(src, true);\n     }\n \n     // Get file name when startAfter is an INodePath.  This is not the\n     // common case so avoid any unnecessary processing unless required.\n     if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n       final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n       if (FSDirectory.isReservedName(startAfterString)) {\n         try {\n           byte[][] components \u003d INode.getPathComponents(startAfterString);\n           components \u003d FSDirectory.resolveComponents(components, fsd);\n           startAfter \u003d components[components.length - 1];\n         } catch (IOException e) {\n           // Possibly the inode is deleted\n           throw new DirectoryListingStartAfterNotFoundException(\n               \"Can\u0027t find startAfter \" + startAfterString);\n         }\n       }\n     }\n \n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n-    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n+    return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    final INodesInPath iip;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      iip \u003d fsd.resolvePath(pc, srcArg);\n    } else {\n      String src \u003d FSDirectory.resolvePath(srcArg, fsd);\n      iip \u003d fsd.getINodesInPath(src, true);\n    }\n\n    // Get file name when startAfter is an INodePath.  This is not the\n    // common case so avoid any unnecessary processing unless required.\n    if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n      final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n      if (FSDirectory.isReservedName(startAfterString)) {\n        try {\n          byte[][] components \u003d INode.getPathComponents(startAfterString);\n          components \u003d FSDirectory.resolveComponents(components, fsd);\n          startAfter \u003d components[components.length - 1];\n        } catch (IOException e) {\n          // Possibly the inode is deleted\n          throw new DirectoryListingStartAfterNotFoundException(\n              \"Can\u0027t find startAfter \" + startAfterString);\n        }\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "a1f3293762dddb0ca953d1145f5b53d9086b25b8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10772. Reduce byte/string conversions for get listing. Contributed by Daryn Sharp.\n",
      "commitDate": "24/08/16 1:21 PM",
      "commitName": "a1f3293762dddb0ca953d1145f5b53d9086b25b8",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "24/08/16 6:46 AM",
      "commitNameOld": "ec252ce0fc0998ce13f31af3440c08a236328e5a",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 0.27,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n-    final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n     String src \u003d null;\n \n     final INodesInPath iip;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       iip \u003d fsd.resolvePath(pc, srcArg);\n       src \u003d iip.getPath();\n     } else {\n       src \u003d FSDirectory.resolvePath(srcArg, fsd);\n       iip \u003d fsd.getINodesInPath(src, true);\n     }\n \n-    // Get file name when startAfter is an INodePath\n-    if (FSDirectory.isReservedName(startAfterString)) {\n-      try {\n-        String tmp \u003d FSDirectory.resolvePath(startAfterString, fsd);\n-        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n-        startAfter \u003d regularPath[regularPath.length - 1];\n-      } catch (IOException e) {\n-        // Possibly the inode is deleted\n-        throw new DirectoryListingStartAfterNotFoundException(\n-            \"Can\u0027t find startAfter \" + startAfterString);\n+    // Get file name when startAfter is an INodePath.  This is not the\n+    // common case so avoid any unnecessary processing unless required.\n+    if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n+      final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n+      if (FSDirectory.isReservedName(startAfterString)) {\n+        try {\n+          byte[][] components \u003d INode.getPathComponents(startAfterString);\n+          components \u003d FSDirectory.resolveComponents(components, fsd);\n+          startAfter \u003d components[components.length - 1];\n+        } catch (IOException e) {\n+          // Possibly the inode is deleted\n+          throw new DirectoryListingStartAfterNotFoundException(\n+              \"Can\u0027t find startAfter \" + startAfterString);\n+        }\n       }\n     }\n \n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    String src \u003d null;\n\n    final INodesInPath iip;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      iip \u003d fsd.resolvePath(pc, srcArg);\n      src \u003d iip.getPath();\n    } else {\n      src \u003d FSDirectory.resolvePath(srcArg, fsd);\n      iip \u003d fsd.getINodesInPath(src, true);\n    }\n\n    // Get file name when startAfter is an INodePath.  This is not the\n    // common case so avoid any unnecessary processing unless required.\n    if (startAfter.length \u003e 0 \u0026\u0026 startAfter[0] \u003d\u003d Path.SEPARATOR_CHAR) {\n      final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n      if (FSDirectory.isReservedName(startAfterString)) {\n        try {\n          byte[][] components \u003d INode.getPathComponents(startAfterString);\n          components \u003d FSDirectory.resolveComponents(components, fsd);\n          startAfter \u003d components[components.length - 1];\n        } catch (IOException e) {\n          // Possibly the inode is deleted\n          throw new DirectoryListingStartAfterNotFoundException(\n              \"Can\u0027t find startAfter \" + startAfterString);\n        }\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 2:45 PM",
      "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n     final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n     String src \u003d null;\n \n+    final INodesInPath iip;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n-      src \u003d fsd.resolvePath(pc, srcArg);\n+      iip \u003d fsd.resolvePath(pc, srcArg);\n+      src \u003d iip.getPath();\n     } else {\n       src \u003d FSDirectory.resolvePath(srcArg, fsd);\n+      iip \u003d fsd.getINodesInPath(src, true);\n     }\n \n     // Get file name when startAfter is an INodePath\n     if (FSDirectory.isReservedName(startAfterString)) {\n       try {\n         String tmp \u003d FSDirectory.resolvePath(startAfterString, fsd);\n         byte[][] regularPath \u003d INode.getPathComponents(tmp);\n         startAfter \u003d regularPath[regularPath.length - 1];\n       } catch (IOException e) {\n         // Possibly the inode is deleted\n         throw new DirectoryListingStartAfterNotFoundException(\n             \"Can\u0027t find startAfter \" + startAfterString);\n       }\n     }\n \n-    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n    String src \u003d null;\n\n    final INodesInPath iip;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      iip \u003d fsd.resolvePath(pc, srcArg);\n      src \u003d iip.getPath();\n    } else {\n      src \u003d FSDirectory.resolvePath(srcArg, fsd);\n      iip \u003d fsd.getINodesInPath(src, true);\n    }\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      try {\n        String tmp \u003d FSDirectory.resolvePath(startAfterString, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "04/08/16 7:07 AM",
      "commitNameOld": "6ae39199dac6ac7be6802b31452552c76da16e24",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 11.32,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,38 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n-    byte[][] pathComponents \u003d FSDirectory\n-        .getPathComponentsForReservedPath(srcArg);\n     final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n     String src \u003d null;\n \n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n-      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+      src \u003d fsd.resolvePath(pc, srcArg);\n     } else {\n-      src \u003d FSDirectory.resolvePath(srcArg, pathComponents, fsd);\n+      src \u003d FSDirectory.resolvePath(srcArg, fsd);\n     }\n \n     // Get file name when startAfter is an INodePath\n     if (FSDirectory.isReservedName(startAfterString)) {\n-      byte[][] startAfterComponents \u003d FSDirectory\n-          .getPathComponentsForReservedPath(startAfterString);\n       try {\n-        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n+        String tmp \u003d FSDirectory.resolvePath(startAfterString, fsd);\n         byte[][] regularPath \u003d INode.getPathComponents(tmp);\n         startAfter \u003d regularPath[regularPath.length - 1];\n       } catch (IOException e) {\n         // Possibly the inode is deleted\n         throw new DirectoryListingStartAfterNotFoundException(\n             \"Can\u0027t find startAfter \" + startAfterString);\n       }\n     }\n \n     final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n    String src \u003d null;\n\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      src \u003d fsd.resolvePath(pc, srcArg);\n    } else {\n      src \u003d FSDirectory.resolvePath(srcArg, fsd);\n    }\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      try {\n        String tmp \u003d FSDirectory.resolvePath(startAfterString, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "6ae39199dac6ac7be6802b31452552c76da16e24": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10662. Optimize UTF8 string/byte conversions. Contributed by Daryn Sharp.\n",
      "commitDate": "04/08/16 7:07 AM",
      "commitName": "6ae39199dac6ac7be6802b31452552c76da16e24",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "02/08/16 1:07 AM",
      "commitNameOld": "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 2.25,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n     byte[][] pathComponents \u003d FSDirectory\n         .getPathComponentsForReservedPath(srcArg);\n-    final String startAfterString \u003d\n-        new String(startAfter, StandardCharsets.UTF_8);\n+    final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n     String src \u003d null;\n \n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n     } else {\n       src \u003d FSDirectory.resolvePath(srcArg, pathComponents, fsd);\n     }\n \n     // Get file name when startAfter is an INodePath\n     if (FSDirectory.isReservedName(startAfterString)) {\n       byte[][] startAfterComponents \u003d FSDirectory\n           .getPathComponentsForReservedPath(startAfterString);\n       try {\n         String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n         byte[][] regularPath \u003d INode.getPathComponents(tmp);\n         startAfter \u003d regularPath[regularPath.length - 1];\n       } catch (IOException e) {\n         // Possibly the inode is deleted\n         throw new DirectoryListingStartAfterNotFoundException(\n             \"Can\u0027t find startAfter \" + startAfterString);\n       }\n     }\n \n     final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final String startAfterString \u003d DFSUtil.bytes2String(startAfter);\n    String src \u003d null;\n\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n    } else {\n      src \u003d FSDirectory.resolvePath(srcArg, pathComponents, fsd);\n    }\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10707. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "02/08/16 1:07 AM",
      "commitName": "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "22/01/16 7:10 AM",
      "commitNameOld": "2fd19b9674420e025af54a5bed12eb96478f8c48",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 192.71,
      "commitsBetweenForRepo": 1364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n     byte[][] pathComponents \u003d FSDirectory\n         .getPathComponentsForReservedPath(srcArg);\n-    final String startAfterString \u003d new String(startAfter, Charsets.UTF_8);\n+    final String startAfterString \u003d\n+        new String(startAfter, StandardCharsets.UTF_8);\n     String src \u003d null;\n \n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n     } else {\n       src \u003d FSDirectory.resolvePath(srcArg, pathComponents, fsd);\n     }\n \n     // Get file name when startAfter is an INodePath\n     if (FSDirectory.isReservedName(startAfterString)) {\n       byte[][] startAfterComponents \u003d FSDirectory\n           .getPathComponentsForReservedPath(startAfterString);\n       try {\n         String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n         byte[][] regularPath \u003d INode.getPathComponents(tmp);\n         startAfter \u003d regularPath[regularPath.length - 1];\n       } catch (IOException e) {\n         // Possibly the inode is deleted\n         throw new DirectoryListingStartAfterNotFoundException(\n             \"Can\u0027t find startAfter \" + startAfterString);\n       }\n     }\n \n     final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final String startAfterString \u003d\n        new String(startAfter, StandardCharsets.UTF_8);\n    String src \u003d null;\n\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n    } else {\n      src \u003d FSDirectory.resolvePath(srcArg, pathComponents, fsd);\n    }\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "977e0b3c4ce76746a3d8590d2d790fdc96c86ca5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8335. FSNamesystem should construct FSPermissionChecker only if permission is enabled. Contributed by Gabor Liptak.\n",
      "commitDate": "24/11/15 1:14 PM",
      "commitName": "977e0b3c4ce76746a3d8590d2d790fdc96c86ca5",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/10/15 4:58 PM",
      "commitNameOld": "3dadf369d550c2ae393b751cb5a184dbfe2814df",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 33.89,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,42 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory\n         .getPathComponentsForReservedPath(srcArg);\n     final String startAfterString \u003d new String(startAfter, Charsets.UTF_8);\n-    final String src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n-    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n+    String src \u003d null;\n+\n+    if (fsd.isPermissionEnabled()) {\n+      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+    } else {\n+      src \u003d FSDirectory.resolvePath(srcArg, pathComponents, fsd);\n+    }\n \n     // Get file name when startAfter is an INodePath\n     if (FSDirectory.isReservedName(startAfterString)) {\n       byte[][] startAfterComponents \u003d FSDirectory\n           .getPathComponentsForReservedPath(startAfterString);\n       try {\n         String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n         byte[][] regularPath \u003d INode.getPathComponents(tmp);\n         startAfter \u003d regularPath[regularPath.length - 1];\n       } catch (IOException e) {\n         // Possibly the inode is deleted\n         throw new DirectoryListingStartAfterNotFoundException(\n             \"Can\u0027t find startAfter \" + startAfterString);\n       }\n     }\n \n+    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n+      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n       if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final String startAfterString \u003d new String(startAfter, Charsets.UTF_8);\n    String src \u003d null;\n\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n    } else {\n      src \u003d FSDirectory.resolvePath(srcArg, pathComponents, fsd);\n    }\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "11/12/14 12:36 PM",
      "commitNameOld": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory\n         .getPathComponentsForReservedPath(srcArg);\n     final String startAfterString \u003d new String(startAfter, Charsets.UTF_8);\n     final String src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n     final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n \n     // Get file name when startAfter is an INodePath\n     if (FSDirectory.isReservedName(startAfterString)) {\n       byte[][] startAfterComponents \u003d FSDirectory\n           .getPathComponentsForReservedPath(startAfterString);\n       try {\n         String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n         byte[][] regularPath \u003d INode.getPathComponents(tmp);\n         startAfter \u003d regularPath[regularPath.length - 1];\n       } catch (IOException e) {\n         // Possibly the inode is deleted\n         throw new DirectoryListingStartAfterNotFoundException(\n             \"Can\u0027t find startAfter \" + startAfterString);\n       }\n     }\n \n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n-      if (fsd.isDir(src)) {\n+      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n-    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n+    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final String startAfterString \u003d new String(startAfter, Charsets.UTF_8);\n    final String src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (iip.getLastINode() !\u003d null \u0026\u0026 iip.getLastINode().isDirectory()) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, iip, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 12:36 PM",
      "commitName": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "09/12/14 11:37 AM",
      "commitNameOld": "5776a41da08af653206bb94d7c76c9c4dcce059a",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n       byte[] startAfter, boolean needLocation) throws IOException {\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory\n         .getPathComponentsForReservedPath(srcArg);\n-    final String startAfterString \u003d new String(startAfter);\n+    final String startAfterString \u003d new String(startAfter, Charsets.UTF_8);\n     final String src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n     final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n \n     // Get file name when startAfter is an INodePath\n     if (FSDirectory.isReservedName(startAfterString)) {\n       byte[][] startAfterComponents \u003d FSDirectory\n           .getPathComponentsForReservedPath(startAfterString);\n       try {\n         String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n         byte[][] regularPath \u003d INode.getPathComponents(tmp);\n         startAfter \u003d regularPath[regularPath.length - 1];\n       } catch (IOException e) {\n         // Possibly the inode is deleted\n         throw new DirectoryListingStartAfterNotFoundException(\n             \"Can\u0027t find startAfter \" + startAfterString);\n       }\n     }\n \n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       if (fsd.isDir(src)) {\n         fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n         fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final String startAfterString \u003d new String(startAfter, Charsets.UTF_8);\n    final String src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (fsd.isDir(src)) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
      "commitDate": "05/12/14 2:17 PM",
      "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "01/12/14 9:36 PM",
      "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.7,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n-  static DirectoryListing getListingInt(\n-      FSDirectory fsd, final String srcArg, byte[] startAfter,\n-      boolean needLocation)\n-    throws IOException {\n-    String src \u003d srcArg;\n+  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n+      byte[] startAfter, boolean needLocation) throws IOException {\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    String startAfterString \u003d new String(startAfter);\n-    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    byte[][] pathComponents \u003d FSDirectory\n+        .getPathComponentsForReservedPath(srcArg);\n+    final String startAfterString \u003d new String(startAfter);\n+    final String src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n+    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n \n     // Get file name when startAfter is an INodePath\n     if (FSDirectory.isReservedName(startAfterString)) {\n       byte[][] startAfterComponents \u003d FSDirectory\n           .getPathComponentsForReservedPath(startAfterString);\n       try {\n         String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n         byte[][] regularPath \u003d INode.getPathComponents(tmp);\n         startAfter \u003d regularPath[regularPath.length - 1];\n       } catch (IOException e) {\n         // Possibly the inode is deleted\n         throw new DirectoryListingStartAfterNotFoundException(\n             \"Can\u0027t find startAfter \" + startAfterString);\n       }\n     }\n \n     boolean isSuperUser \u003d true;\n     if (fsd.isPermissionEnabled()) {\n       if (fsd.isDir(src)) {\n-        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n+        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n       } else {\n-        fsd.checkTraverse(pc, src);\n+        fsd.checkTraverse(pc, iip);\n       }\n       isSuperUser \u003d pc.isSuperUser();\n     }\n     return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static DirectoryListing getListingInt(FSDirectory fsd, final String srcArg,\n      byte[] startAfter, boolean needLocation) throws IOException {\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory\n        .getPathComponentsForReservedPath(srcArg);\n    final String startAfterString \u003d new String(startAfter);\n    final String src \u003d fsd.resolvePath(pc, srcArg, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (fsd.isDir(src)) {\n        fsd.checkPathAccess(pc, iip, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, iip);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
      "extendedDetails": {}
    },
    "0af44ea8462437f8e7a8271b15a19677fd7f05a1": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7450. Consolidate the implementation of GetFileInfo(), GetListings() and GetContentSummary() into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "01/12/14 9:36 PM",
      "commitName": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7450. Consolidate the implementation of GetFileInfo(), GetListings() and GetContentSummary() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:36 PM",
          "commitName": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:21 PM",
          "commitNameOld": "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,36 @@\n-  private DirectoryListing getListingInt(final String srcArg, byte[] startAfter,\n+  static DirectoryListing getListingInt(\n+      FSDirectory fsd, final String srcArg, byte[] startAfter,\n       boolean needLocation)\n-    throws AccessControlException, UnresolvedLinkException, IOException {\n+    throws IOException {\n     String src \u003d srcArg;\n-    DirectoryListing dl;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.READ);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     String startAfterString \u003d new String(startAfter);\n-    readLock();\n-    try {\n-      checkOperation(OperationCategory.READ);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n \n-      // Get file name when startAfter is an INodePath\n-      if (FSDirectory.isReservedName(startAfterString)) {\n-        byte[][] startAfterComponents \u003d FSDirectory\n-            .getPathComponentsForReservedPath(startAfterString);\n-        try {\n-          String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, dir);\n-          byte[][] regularPath \u003d INode.getPathComponents(tmp);\n-          startAfter \u003d regularPath[regularPath.length - 1];\n-        } catch (IOException e) {\n-          // Possibly the inode is deleted\n-          throw new DirectoryListingStartAfterNotFoundException(\n-              \"Can\u0027t find startAfter \" + startAfterString);\n-        }\n+    // Get file name when startAfter is an INodePath\n+    if (FSDirectory.isReservedName(startAfterString)) {\n+      byte[][] startAfterComponents \u003d FSDirectory\n+          .getPathComponentsForReservedPath(startAfterString);\n+      try {\n+        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n+        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n+        startAfter \u003d regularPath[regularPath.length - 1];\n+      } catch (IOException e) {\n+        // Possibly the inode is deleted\n+        throw new DirectoryListingStartAfterNotFoundException(\n+            \"Can\u0027t find startAfter \" + startAfterString);\n       }\n-\n-      boolean isSuperUser \u003d true;\n-      if (isPermissionEnabled) {\n-        if (dir.isDir(src)) {\n-          checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n-        } else {\n-          checkTraverse(pc, src);\n-        }\n-        isSuperUser \u003d pc.isSuperUser();\n-      }\n-      logAuditEvent(true, \"listStatus\", srcArg);\n-      dl \u003d dir.getListing(src, startAfter, needLocation, isSuperUser);\n-    } finally {\n-      readUnlock();\n     }\n-    return dl;\n+\n+    boolean isSuperUser \u003d true;\n+    if (fsd.isPermissionEnabled()) {\n+      if (fsd.isDir(src)) {\n+        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n+      } else {\n+        fsd.checkTraverse(pc, src);\n+      }\n+      isSuperUser \u003d pc.isSuperUser();\n+    }\n+    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DirectoryListing getListingInt(\n      FSDirectory fsd, final String srcArg, byte[] startAfter,\n      boolean needLocation)\n    throws IOException {\n    String src \u003d srcArg;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    String startAfterString \u003d new String(startAfter);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (fsd.isDir(src)) {\n        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, src);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
            "oldMethodName": "getListingInt",
            "newMethodName": "getListingInt"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7450. Consolidate the implementation of GetFileInfo(), GetListings() and GetContentSummary() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:36 PM",
          "commitName": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:21 PM",
          "commitNameOld": "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,36 @@\n-  private DirectoryListing getListingInt(final String srcArg, byte[] startAfter,\n+  static DirectoryListing getListingInt(\n+      FSDirectory fsd, final String srcArg, byte[] startAfter,\n       boolean needLocation)\n-    throws AccessControlException, UnresolvedLinkException, IOException {\n+    throws IOException {\n     String src \u003d srcArg;\n-    DirectoryListing dl;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.READ);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     String startAfterString \u003d new String(startAfter);\n-    readLock();\n-    try {\n-      checkOperation(OperationCategory.READ);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n \n-      // Get file name when startAfter is an INodePath\n-      if (FSDirectory.isReservedName(startAfterString)) {\n-        byte[][] startAfterComponents \u003d FSDirectory\n-            .getPathComponentsForReservedPath(startAfterString);\n-        try {\n-          String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, dir);\n-          byte[][] regularPath \u003d INode.getPathComponents(tmp);\n-          startAfter \u003d regularPath[regularPath.length - 1];\n-        } catch (IOException e) {\n-          // Possibly the inode is deleted\n-          throw new DirectoryListingStartAfterNotFoundException(\n-              \"Can\u0027t find startAfter \" + startAfterString);\n-        }\n+    // Get file name when startAfter is an INodePath\n+    if (FSDirectory.isReservedName(startAfterString)) {\n+      byte[][] startAfterComponents \u003d FSDirectory\n+          .getPathComponentsForReservedPath(startAfterString);\n+      try {\n+        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n+        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n+        startAfter \u003d regularPath[regularPath.length - 1];\n+      } catch (IOException e) {\n+        // Possibly the inode is deleted\n+        throw new DirectoryListingStartAfterNotFoundException(\n+            \"Can\u0027t find startAfter \" + startAfterString);\n       }\n-\n-      boolean isSuperUser \u003d true;\n-      if (isPermissionEnabled) {\n-        if (dir.isDir(src)) {\n-          checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n-        } else {\n-          checkTraverse(pc, src);\n-        }\n-        isSuperUser \u003d pc.isSuperUser();\n-      }\n-      logAuditEvent(true, \"listStatus\", srcArg);\n-      dl \u003d dir.getListing(src, startAfter, needLocation, isSuperUser);\n-    } finally {\n-      readUnlock();\n     }\n-    return dl;\n+\n+    boolean isSuperUser \u003d true;\n+    if (fsd.isPermissionEnabled()) {\n+      if (fsd.isDir(src)) {\n+        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n+      } else {\n+        fsd.checkTraverse(pc, src);\n+      }\n+      isSuperUser \u003d pc.isSuperUser();\n+    }\n+    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DirectoryListing getListingInt(\n      FSDirectory fsd, final String srcArg, byte[] startAfter,\n      boolean needLocation)\n    throws IOException {\n    String src \u003d srcArg;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    String startAfterString \u003d new String(startAfter);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (fsd.isDir(src)) {\n        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, src);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7450. Consolidate the implementation of GetFileInfo(), GetListings() and GetContentSummary() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:36 PM",
          "commitName": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:21 PM",
          "commitNameOld": "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,36 @@\n-  private DirectoryListing getListingInt(final String srcArg, byte[] startAfter,\n+  static DirectoryListing getListingInt(\n+      FSDirectory fsd, final String srcArg, byte[] startAfter,\n       boolean needLocation)\n-    throws AccessControlException, UnresolvedLinkException, IOException {\n+    throws IOException {\n     String src \u003d srcArg;\n-    DirectoryListing dl;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.READ);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     String startAfterString \u003d new String(startAfter);\n-    readLock();\n-    try {\n-      checkOperation(OperationCategory.READ);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n \n-      // Get file name when startAfter is an INodePath\n-      if (FSDirectory.isReservedName(startAfterString)) {\n-        byte[][] startAfterComponents \u003d FSDirectory\n-            .getPathComponentsForReservedPath(startAfterString);\n-        try {\n-          String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, dir);\n-          byte[][] regularPath \u003d INode.getPathComponents(tmp);\n-          startAfter \u003d regularPath[regularPath.length - 1];\n-        } catch (IOException e) {\n-          // Possibly the inode is deleted\n-          throw new DirectoryListingStartAfterNotFoundException(\n-              \"Can\u0027t find startAfter \" + startAfterString);\n-        }\n+    // Get file name when startAfter is an INodePath\n+    if (FSDirectory.isReservedName(startAfterString)) {\n+      byte[][] startAfterComponents \u003d FSDirectory\n+          .getPathComponentsForReservedPath(startAfterString);\n+      try {\n+        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n+        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n+        startAfter \u003d regularPath[regularPath.length - 1];\n+      } catch (IOException e) {\n+        // Possibly the inode is deleted\n+        throw new DirectoryListingStartAfterNotFoundException(\n+            \"Can\u0027t find startAfter \" + startAfterString);\n       }\n-\n-      boolean isSuperUser \u003d true;\n-      if (isPermissionEnabled) {\n-        if (dir.isDir(src)) {\n-          checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n-        } else {\n-          checkTraverse(pc, src);\n-        }\n-        isSuperUser \u003d pc.isSuperUser();\n-      }\n-      logAuditEvent(true, \"listStatus\", srcArg);\n-      dl \u003d dir.getListing(src, startAfter, needLocation, isSuperUser);\n-    } finally {\n-      readUnlock();\n     }\n-    return dl;\n+\n+    boolean isSuperUser \u003d true;\n+    if (fsd.isPermissionEnabled()) {\n+      if (fsd.isDir(src)) {\n+        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n+      } else {\n+        fsd.checkTraverse(pc, src);\n+      }\n+      isSuperUser \u003d pc.isSuperUser();\n+    }\n+    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DirectoryListing getListingInt(\n      FSDirectory fsd, final String srcArg, byte[] startAfter,\n      boolean needLocation)\n    throws IOException {\n    String src \u003d srcArg;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    String startAfterString \u003d new String(startAfter);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (fsd.isDir(src)) {\n        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, src);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
          "extendedDetails": {
            "oldValue": "[AccessControlException, UnresolvedLinkException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7450. Consolidate the implementation of GetFileInfo(), GetListings() and GetContentSummary() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:36 PM",
          "commitName": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:21 PM",
          "commitNameOld": "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,36 @@\n-  private DirectoryListing getListingInt(final String srcArg, byte[] startAfter,\n+  static DirectoryListing getListingInt(\n+      FSDirectory fsd, final String srcArg, byte[] startAfter,\n       boolean needLocation)\n-    throws AccessControlException, UnresolvedLinkException, IOException {\n+    throws IOException {\n     String src \u003d srcArg;\n-    DirectoryListing dl;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.READ);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     String startAfterString \u003d new String(startAfter);\n-    readLock();\n-    try {\n-      checkOperation(OperationCategory.READ);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n \n-      // Get file name when startAfter is an INodePath\n-      if (FSDirectory.isReservedName(startAfterString)) {\n-        byte[][] startAfterComponents \u003d FSDirectory\n-            .getPathComponentsForReservedPath(startAfterString);\n-        try {\n-          String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, dir);\n-          byte[][] regularPath \u003d INode.getPathComponents(tmp);\n-          startAfter \u003d regularPath[regularPath.length - 1];\n-        } catch (IOException e) {\n-          // Possibly the inode is deleted\n-          throw new DirectoryListingStartAfterNotFoundException(\n-              \"Can\u0027t find startAfter \" + startAfterString);\n-        }\n+    // Get file name when startAfter is an INodePath\n+    if (FSDirectory.isReservedName(startAfterString)) {\n+      byte[][] startAfterComponents \u003d FSDirectory\n+          .getPathComponentsForReservedPath(startAfterString);\n+      try {\n+        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n+        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n+        startAfter \u003d regularPath[regularPath.length - 1];\n+      } catch (IOException e) {\n+        // Possibly the inode is deleted\n+        throw new DirectoryListingStartAfterNotFoundException(\n+            \"Can\u0027t find startAfter \" + startAfterString);\n       }\n-\n-      boolean isSuperUser \u003d true;\n-      if (isPermissionEnabled) {\n-        if (dir.isDir(src)) {\n-          checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n-        } else {\n-          checkTraverse(pc, src);\n-        }\n-        isSuperUser \u003d pc.isSuperUser();\n-      }\n-      logAuditEvent(true, \"listStatus\", srcArg);\n-      dl \u003d dir.getListing(src, startAfter, needLocation, isSuperUser);\n-    } finally {\n-      readUnlock();\n     }\n-    return dl;\n+\n+    boolean isSuperUser \u003d true;\n+    if (fsd.isPermissionEnabled()) {\n+      if (fsd.isDir(src)) {\n+        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n+      } else {\n+        fsd.checkTraverse(pc, src);\n+      }\n+      isSuperUser \u003d pc.isSuperUser();\n+    }\n+    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DirectoryListing getListingInt(\n      FSDirectory fsd, final String srcArg, byte[] startAfter,\n      boolean needLocation)\n    throws IOException {\n    String src \u003d srcArg;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    String startAfterString \u003d new String(startAfter);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (fsd.isDir(src)) {\n        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, src);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7450. Consolidate the implementation of GetFileInfo(), GetListings() and GetContentSummary() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:36 PM",
          "commitName": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:21 PM",
          "commitNameOld": "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,36 @@\n-  private DirectoryListing getListingInt(final String srcArg, byte[] startAfter,\n+  static DirectoryListing getListingInt(\n+      FSDirectory fsd, final String srcArg, byte[] startAfter,\n       boolean needLocation)\n-    throws AccessControlException, UnresolvedLinkException, IOException {\n+    throws IOException {\n     String src \u003d srcArg;\n-    DirectoryListing dl;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.READ);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     String startAfterString \u003d new String(startAfter);\n-    readLock();\n-    try {\n-      checkOperation(OperationCategory.READ);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n \n-      // Get file name when startAfter is an INodePath\n-      if (FSDirectory.isReservedName(startAfterString)) {\n-        byte[][] startAfterComponents \u003d FSDirectory\n-            .getPathComponentsForReservedPath(startAfterString);\n-        try {\n-          String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, dir);\n-          byte[][] regularPath \u003d INode.getPathComponents(tmp);\n-          startAfter \u003d regularPath[regularPath.length - 1];\n-        } catch (IOException e) {\n-          // Possibly the inode is deleted\n-          throw new DirectoryListingStartAfterNotFoundException(\n-              \"Can\u0027t find startAfter \" + startAfterString);\n-        }\n+    // Get file name when startAfter is an INodePath\n+    if (FSDirectory.isReservedName(startAfterString)) {\n+      byte[][] startAfterComponents \u003d FSDirectory\n+          .getPathComponentsForReservedPath(startAfterString);\n+      try {\n+        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n+        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n+        startAfter \u003d regularPath[regularPath.length - 1];\n+      } catch (IOException e) {\n+        // Possibly the inode is deleted\n+        throw new DirectoryListingStartAfterNotFoundException(\n+            \"Can\u0027t find startAfter \" + startAfterString);\n       }\n-\n-      boolean isSuperUser \u003d true;\n-      if (isPermissionEnabled) {\n-        if (dir.isDir(src)) {\n-          checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n-        } else {\n-          checkTraverse(pc, src);\n-        }\n-        isSuperUser \u003d pc.isSuperUser();\n-      }\n-      logAuditEvent(true, \"listStatus\", srcArg);\n-      dl \u003d dir.getListing(src, startAfter, needLocation, isSuperUser);\n-    } finally {\n-      readUnlock();\n     }\n-    return dl;\n+\n+    boolean isSuperUser \u003d true;\n+    if (fsd.isPermissionEnabled()) {\n+      if (fsd.isDir(src)) {\n+        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n+      } else {\n+        fsd.checkTraverse(pc, src);\n+      }\n+      isSuperUser \u003d pc.isSuperUser();\n+    }\n+    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DirectoryListing getListingInt(\n      FSDirectory fsd, final String srcArg, byte[] startAfter,\n      boolean needLocation)\n    throws IOException {\n    String src \u003d srcArg;\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    String startAfterString \u003d new String(startAfter);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n\n    // Get file name when startAfter is an INodePath\n    if (FSDirectory.isReservedName(startAfterString)) {\n      byte[][] startAfterComponents \u003d FSDirectory\n          .getPathComponentsForReservedPath(startAfterString);\n      try {\n        String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, fsd);\n        byte[][] regularPath \u003d INode.getPathComponents(tmp);\n        startAfter \u003d regularPath[regularPath.length - 1];\n      } catch (IOException e) {\n        // Possibly the inode is deleted\n        throw new DirectoryListingStartAfterNotFoundException(\n            \"Can\u0027t find startAfter \" + startAfterString);\n      }\n    }\n\n    boolean isSuperUser \u003d true;\n    if (fsd.isPermissionEnabled()) {\n      if (fsd.isDir(src)) {\n        fsd.checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n      } else {\n        fsd.checkTraverse(pc, src);\n      }\n      isSuperUser \u003d pc.isSuperUser();\n    }\n    return getListing(fsd, src, startAfter, needLocation, isSuperUser);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirStatAndListingOp.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), startAfter-byte[], needLocation-boolean]",
            "newValue": "[fsd-FSDirectory, srcArg-String(modifiers-final), startAfter-byte[], needLocation-boolean]"
          }
        }
      ]
    },
    "c95b878abf313507666ea018f9e6033c4c166e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7415. Move FSNameSystem.resolvePath() to FSDirectory. Contributed by Haohui Mai.\n",
      "commitDate": "20/11/14 7:23 PM",
      "commitName": "c95b878abf313507666ea018f9e6033c4c166e10",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 5:33 PM",
      "commitNameOld": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private DirectoryListing getListingInt(final String srcArg, byte[] startAfter,\n       boolean needLocation)\n     throws AccessControlException, UnresolvedLinkException, IOException {\n     String src \u003d srcArg;\n     DirectoryListing dl;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.READ);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     String startAfterString \u003d new String(startAfter);\n     readLock();\n     try {\n       checkOperation(OperationCategory.READ);\n-      src \u003d resolvePath(src, pathComponents);\n+      src \u003d dir.resolvePath(pc, src, pathComponents);\n \n       // Get file name when startAfter is an INodePath\n       if (FSDirectory.isReservedName(startAfterString)) {\n         byte[][] startAfterComponents \u003d FSDirectory\n             .getPathComponentsForReservedPath(startAfterString);\n         try {\n           String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, dir);\n           byte[][] regularPath \u003d INode.getPathComponents(tmp);\n           startAfter \u003d regularPath[regularPath.length - 1];\n         } catch (IOException e) {\n           // Possibly the inode is deleted\n           throw new DirectoryListingStartAfterNotFoundException(\n               \"Can\u0027t find startAfter \" + startAfterString);\n         }\n       }\n \n       boolean isSuperUser \u003d true;\n       if (isPermissionEnabled) {\n         if (dir.isDir(src)) {\n           checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n         } else {\n           checkTraverse(pc, src);\n         }\n         isSuperUser \u003d pc.isSuperUser();\n       }\n       logAuditEvent(true, \"listStatus\", srcArg);\n       dl \u003d dir.getListing(src, startAfter, needLocation, isSuperUser);\n     } finally {\n       readUnlock();\n     }\n     return dl;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DirectoryListing getListingInt(final String srcArg, byte[] startAfter,\n      boolean needLocation)\n    throws AccessControlException, UnresolvedLinkException, IOException {\n    String src \u003d srcArg;\n    DirectoryListing dl;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.READ);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    String startAfterString \u003d new String(startAfter);\n    readLock();\n    try {\n      checkOperation(OperationCategory.READ);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n\n      // Get file name when startAfter is an INodePath\n      if (FSDirectory.isReservedName(startAfterString)) {\n        byte[][] startAfterComponents \u003d FSDirectory\n            .getPathComponentsForReservedPath(startAfterString);\n        try {\n          String tmp \u003d FSDirectory.resolvePath(src, startAfterComponents, dir);\n          byte[][] regularPath \u003d INode.getPathComponents(tmp);\n          startAfter \u003d regularPath[regularPath.length - 1];\n        } catch (IOException e) {\n          // Possibly the inode is deleted\n          throw new DirectoryListingStartAfterNotFoundException(\n              \"Can\u0027t find startAfter \" + startAfterString);\n        }\n      }\n\n      boolean isSuperUser \u003d true;\n      if (isPermissionEnabled) {\n        if (dir.isDir(src)) {\n          checkPathAccess(pc, src, FsAction.READ_EXECUTE);\n        } else {\n          checkTraverse(pc, src);\n        }\n        isSuperUser \u003d pc.isSuperUser();\n      }\n      logAuditEvent(true, \"listStatus\", srcArg);\n      dl \u003d dir.getListing(src, startAfter, needLocation, isSuperUser);\n    } finally {\n      readUnlock();\n    }\n    return dl;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}