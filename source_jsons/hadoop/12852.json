{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyRackFaultTolerant.java",
  "functionName": "getMaxNodesPerRack",
  "functionId": "getMaxNodesPerRack___numOfChosen-int__numOfReplicas-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java",
  "functionStartLine": 37,
  "functionEndLine": 59,
  "numCommitsSeen": 8,
  "timeTaken": 2169,
  "changeHistory": [
    "944adc61b1830388d520d4052fc7eb6c7ba2790d",
    "644c2f6924f341f51d809c91dccfff88fc82f6f0",
    "c1d50a91f7c05e4aaf4655380c8dcd11703ff158",
    "9595cc003ca5ed3d59b6942056a4fcb9080f79c9"
  ],
  "changeHistoryShort": {
    "944adc61b1830388d520d4052fc7eb6c7ba2790d": "Ybodychange",
    "644c2f6924f341f51d809c91dccfff88fc82f6f0": "Ybodychange",
    "c1d50a91f7c05e4aaf4655380c8dcd11703ff158": "Yfilerename",
    "9595cc003ca5ed3d59b6942056a4fcb9080f79c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "944adc61b1830388d520d4052fc7eb6c7ba2790d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14527. Stop all DataNodes may result in NN terminate. Contributed by He Xiaoqiao.\n",
      "commitDate": "06/06/19 10:20 AM",
      "commitName": "944adc61b1830388d520d4052fc7eb6c7ba2790d",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "02/11/17 9:53 PM",
      "commitNameOld": "b00f828d84e4e029fd4786ebe827ce704a1b2a04",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 580.52,
      "commitsBetweenForRepo": 4836,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   protected int[] getMaxNodesPerRack(int numOfChosen, int numOfReplicas) {\n     int clusterSize \u003d clusterMap.getNumOfLeaves();\n     int totalNumOfReplicas \u003d numOfChosen + numOfReplicas;\n     if (totalNumOfReplicas \u003e clusterSize) {\n       numOfReplicas -\u003d (totalNumOfReplicas-clusterSize);\n       totalNumOfReplicas \u003d clusterSize;\n     }\n     // No calculation needed when there is only one rack or picking one node.\n     int numOfRacks \u003d clusterMap.getNumOfRacks();\n-    if (numOfRacks \u003d\u003d 1 || totalNumOfReplicas \u003c\u003d 1) {\n+    // HDFS-14527 return default when numOfRacks \u003d 0 to avoid\n+    // ArithmeticException when calc maxNodesPerRack at following logic.\n+    if (numOfRacks \u003c\u003d 1 || totalNumOfReplicas \u003c\u003d 1) {\n       return new int[] {numOfReplicas, totalNumOfReplicas};\n     }\n     // If more racks than replicas, put one replica per rack.\n     if (totalNumOfReplicas \u003c numOfRacks) {\n       return new int[] {numOfReplicas, 1};\n     }\n     // If more replicas than racks, evenly spread the replicas.\n     // This calculation rounds up.\n     int maxNodesPerRack \u003d (totalNumOfReplicas - 1) / numOfRacks + 1;\n     return new int[] {numOfReplicas, maxNodesPerRack};\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int[] getMaxNodesPerRack(int numOfChosen, int numOfReplicas) {\n    int clusterSize \u003d clusterMap.getNumOfLeaves();\n    int totalNumOfReplicas \u003d numOfChosen + numOfReplicas;\n    if (totalNumOfReplicas \u003e clusterSize) {\n      numOfReplicas -\u003d (totalNumOfReplicas-clusterSize);\n      totalNumOfReplicas \u003d clusterSize;\n    }\n    // No calculation needed when there is only one rack or picking one node.\n    int numOfRacks \u003d clusterMap.getNumOfRacks();\n    // HDFS-14527 return default when numOfRacks \u003d 0 to avoid\n    // ArithmeticException when calc maxNodesPerRack at following logic.\n    if (numOfRacks \u003c\u003d 1 || totalNumOfReplicas \u003c\u003d 1) {\n      return new int[] {numOfReplicas, totalNumOfReplicas};\n    }\n    // If more racks than replicas, put one replica per rack.\n    if (totalNumOfReplicas \u003c numOfRacks) {\n      return new int[] {numOfReplicas, 1};\n    }\n    // If more replicas than racks, evenly spread the replicas.\n    // This calculation rounds up.\n    int maxNodesPerRack \u003d (totalNumOfReplicas - 1) / numOfRacks + 1;\n    return new int[] {numOfReplicas, maxNodesPerRack};\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java",
      "extendedDetails": {}
    },
    "644c2f6924f341f51d809c91dccfff88fc82f6f0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12567. BlockPlacementPolicyRackFaultTolerant fails with racks with very few nodes.\n",
      "commitDate": "05/10/17 4:58 PM",
      "commitName": "644c2f6924f341f51d809c91dccfff88fc82f6f0",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "19/02/16 7:02 PM",
      "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 593.87,
      "commitsBetweenForRepo": 3935,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,21 @@\n   protected int[] getMaxNodesPerRack(int numOfChosen, int numOfReplicas) {\n     int clusterSize \u003d clusterMap.getNumOfLeaves();\n     int totalNumOfReplicas \u003d numOfChosen + numOfReplicas;\n     if (totalNumOfReplicas \u003e clusterSize) {\n       numOfReplicas -\u003d (totalNumOfReplicas-clusterSize);\n       totalNumOfReplicas \u003d clusterSize;\n     }\n     // No calculation needed when there is only one rack or picking one node.\n     int numOfRacks \u003d clusterMap.getNumOfRacks();\n     if (numOfRacks \u003d\u003d 1 || totalNumOfReplicas \u003c\u003d 1) {\n       return new int[] {numOfReplicas, totalNumOfReplicas};\n     }\n-    if(totalNumOfReplicas\u003cnumOfRacks){\n+    // If more racks than replicas, put one replica per rack.\n+    if (totalNumOfReplicas \u003c numOfRacks) {\n       return new int[] {numOfReplicas, 1};\n     }\n+    // If more replicas than racks, evenly spread the replicas.\n+    // This calculation rounds up.\n     int maxNodesPerRack \u003d (totalNumOfReplicas - 1) / numOfRacks + 1;\n     return new int[] {numOfReplicas, maxNodesPerRack};\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int[] getMaxNodesPerRack(int numOfChosen, int numOfReplicas) {\n    int clusterSize \u003d clusterMap.getNumOfLeaves();\n    int totalNumOfReplicas \u003d numOfChosen + numOfReplicas;\n    if (totalNumOfReplicas \u003e clusterSize) {\n      numOfReplicas -\u003d (totalNumOfReplicas-clusterSize);\n      totalNumOfReplicas \u003d clusterSize;\n    }\n    // No calculation needed when there is only one rack or picking one node.\n    int numOfRacks \u003d clusterMap.getNumOfRacks();\n    if (numOfRacks \u003d\u003d 1 || totalNumOfReplicas \u003c\u003d 1) {\n      return new int[] {numOfReplicas, totalNumOfReplicas};\n    }\n    // If more racks than replicas, put one replica per rack.\n    if (totalNumOfReplicas \u003c numOfRacks) {\n      return new int[] {numOfReplicas, 1};\n    }\n    // If more replicas than racks, evenly spread the replicas.\n    // This calculation rounds up.\n    int maxNodesPerRack \u003d (totalNumOfReplicas - 1) / numOfRacks + 1;\n    return new int[] {numOfReplicas, maxNodesPerRack};\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java",
      "extendedDetails": {}
    },
    "c1d50a91f7c05e4aaf4655380c8dcd11703ff158": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8513. Rename BlockPlacementPolicyRackFaultTolarent to BlockPlacementPolicyRackFaultTolerant. (wang)\n",
      "commitDate": "02/06/15 3:48 PM",
      "commitName": "c1d50a91f7c05e4aaf4655380c8dcd11703ff158",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "02/06/15 3:39 PM",
      "commitNameOld": "efc510a570cf880e7df1b69932aa41932658ee51",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected int[] getMaxNodesPerRack(int numOfChosen, int numOfReplicas) {\n    int clusterSize \u003d clusterMap.getNumOfLeaves();\n    int totalNumOfReplicas \u003d numOfChosen + numOfReplicas;\n    if (totalNumOfReplicas \u003e clusterSize) {\n      numOfReplicas -\u003d (totalNumOfReplicas-clusterSize);\n      totalNumOfReplicas \u003d clusterSize;\n    }\n    // No calculation needed when there is only one rack or picking one node.\n    int numOfRacks \u003d clusterMap.getNumOfRacks();\n    if (numOfRacks \u003d\u003d 1 || totalNumOfReplicas \u003c\u003d 1) {\n      return new int[] {numOfReplicas, totalNumOfReplicas};\n    }\n    if(totalNumOfReplicas\u003cnumOfRacks){\n      return new int[] {numOfReplicas, 1};\n    }\n    int maxNodesPerRack \u003d (totalNumOfReplicas - 1) / numOfRacks + 1;\n    return new int[] {numOfReplicas, maxNodesPerRack};\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolarent.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java"
      }
    },
    "9595cc003ca5ed3d59b6942056a4fcb9080f79c9": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7891. A block placement policy with best rack failure tolerance.  Contributed by Walter Su\n",
      "commitDate": "16/04/15 6:25 PM",
      "commitName": "9595cc003ca5ed3d59b6942056a4fcb9080f79c9",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,18 @@\n+  protected int[] getMaxNodesPerRack(int numOfChosen, int numOfReplicas) {\n+    int clusterSize \u003d clusterMap.getNumOfLeaves();\n+    int totalNumOfReplicas \u003d numOfChosen + numOfReplicas;\n+    if (totalNumOfReplicas \u003e clusterSize) {\n+      numOfReplicas -\u003d (totalNumOfReplicas-clusterSize);\n+      totalNumOfReplicas \u003d clusterSize;\n+    }\n+    // No calculation needed when there is only one rack or picking one node.\n+    int numOfRacks \u003d clusterMap.getNumOfRacks();\n+    if (numOfRacks \u003d\u003d 1 || totalNumOfReplicas \u003c\u003d 1) {\n+      return new int[] {numOfReplicas, totalNumOfReplicas};\n+    }\n+    if(totalNumOfReplicas\u003cnumOfRacks){\n+      return new int[] {numOfReplicas, 1};\n+    }\n+    int maxNodesPerRack \u003d (totalNumOfReplicas - 1) / numOfRacks + 1;\n+    return new int[] {numOfReplicas, maxNodesPerRack};\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected int[] getMaxNodesPerRack(int numOfChosen, int numOfReplicas) {\n    int clusterSize \u003d clusterMap.getNumOfLeaves();\n    int totalNumOfReplicas \u003d numOfChosen + numOfReplicas;\n    if (totalNumOfReplicas \u003e clusterSize) {\n      numOfReplicas -\u003d (totalNumOfReplicas-clusterSize);\n      totalNumOfReplicas \u003d clusterSize;\n    }\n    // No calculation needed when there is only one rack or picking one node.\n    int numOfRacks \u003d clusterMap.getNumOfRacks();\n    if (numOfRacks \u003d\u003d 1 || totalNumOfReplicas \u003c\u003d 1) {\n      return new int[] {numOfReplicas, totalNumOfReplicas};\n    }\n    if(totalNumOfReplicas\u003cnumOfRacks){\n      return new int[] {numOfReplicas, 1};\n    }\n    int maxNodesPerRack \u003d (totalNumOfReplicas - 1) / numOfRacks + 1;\n    return new int[] {numOfReplicas, maxNodesPerRack};\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolarent.java"
    }
  }
}