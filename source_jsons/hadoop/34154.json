{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerScheduler.java",
  "functionName": "reclaimOpportunisticContainerResources",
  "functionId": "reclaimOpportunisticContainerResources___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
  "functionStartLine": 514,
  "functionEndLine": 538,
  "numCommitsSeen": 22,
  "timeTaken": 1654,
  "changeHistory": [
    "6e35f7130fb3fb17665e818f838ed750425348c0",
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8"
  ],
  "changeHistoryShort": {
    "6e35f7130fb3fb17665e818f838ed750425348c0": "Ybodychange",
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e35f7130fb3fb17665e818f838ed750425348c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9166. Fix logging for preemption of Opportunistic containers for Guaranteed containers. Contributed by Abhishek Modi.\n",
      "commitDate": "04/01/19 11:16 AM",
      "commitName": "6e35f7130fb3fb17665e818f838ed750425348c0",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "24/10/18 7:58 AM",
      "commitNameOld": "766b78ee074df29d5acd2ba2face5712dd20437f",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 72.18,
      "commitsBetweenForRepo": 467,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void reclaimOpportunisticContainerResources(Container container) {\n     List\u003cContainer\u003e extraOppContainersToReclaim \u003d\n         pickOpportunisticContainersToReclaimResources(\n             container.getContainerId());\n     // Kill the opportunistic containers that were chosen.\n     for (Container contToReclaim : extraOppContainersToReclaim) {\n       String preemptionAction \u003d usePauseEventForPreemption \u003d\u003d true ? \"paused\" :\n-          \"resumed\";\n+          \"killed\";\n       LOG.info(\n           \"Container {} will be {} to start the \"\n               + \"execution of guaranteed container {}.\",\n           contToReclaim.getContainerId(), preemptionAction,\n           container.getContainerId());\n \n       if (usePauseEventForPreemption) {\n         contToReclaim.sendPauseEvent(\n             \"Container Paused to make room for Guaranteed Container\");\n       } else {\n         contToReclaim.sendKillEvent(\n             ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n             \"Container Killed to make room for Guaranteed Container.\");\n       }\n       oppContainersToKill.put(contToReclaim.getContainerId(), contToReclaim);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reclaimOpportunisticContainerResources(Container container) {\n    List\u003cContainer\u003e extraOppContainersToReclaim \u003d\n        pickOpportunisticContainersToReclaimResources(\n            container.getContainerId());\n    // Kill the opportunistic containers that were chosen.\n    for (Container contToReclaim : extraOppContainersToReclaim) {\n      String preemptionAction \u003d usePauseEventForPreemption \u003d\u003d true ? \"paused\" :\n          \"killed\";\n      LOG.info(\n          \"Container {} will be {} to start the \"\n              + \"execution of guaranteed container {}.\",\n          contToReclaim.getContainerId(), preemptionAction,\n          container.getContainerId());\n\n      if (usePauseEventForPreemption) {\n        contToReclaim.sendPauseEvent(\n            \"Container Paused to make room for Guaranteed Container\");\n      } else {\n        contToReclaim.sendKillEvent(\n            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n            \"Container Killed to make room for Guaranteed Container.\");\n      }\n      oppContainersToKill.put(contToReclaim.getContainerId(), contToReclaim);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5216. Expose configurable preemption policy for OPPORTUNISTIC containers running on the NM. (Hitesh Sharma via asuresh)\n",
      "commitDate": "14/09/17 8:51 AM",
      "commitName": "4f8194430fc6a69d9cc99b78828fd7045d5683e8",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,25 @@\n+  private void reclaimOpportunisticContainerResources(Container container) {\n+    List\u003cContainer\u003e extraOppContainersToReclaim \u003d\n+        pickOpportunisticContainersToReclaimResources(\n+            container.getContainerId());\n+    // Kill the opportunistic containers that were chosen.\n+    for (Container contToReclaim : extraOppContainersToReclaim) {\n+      String preemptionAction \u003d usePauseEventForPreemption \u003d\u003d true ? \"paused\" :\n+          \"resumed\";\n+      LOG.info(\n+          \"Container {} will be {} to start the \"\n+              + \"execution of guaranteed container {}.\",\n+          contToReclaim.getContainerId(), preemptionAction,\n+          container.getContainerId());\n+\n+      if (usePauseEventForPreemption) {\n+        contToReclaim.sendPauseEvent(\n+            \"Container Paused to make room for Guaranteed Container\");\n+      } else {\n+        contToReclaim.sendKillEvent(\n+            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n+            \"Container Killed to make room for Guaranteed Container.\");\n+      }\n+      oppContainersToKill.put(contToReclaim.getContainerId(), contToReclaim);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void reclaimOpportunisticContainerResources(Container container) {\n    List\u003cContainer\u003e extraOppContainersToReclaim \u003d\n        pickOpportunisticContainersToReclaimResources(\n            container.getContainerId());\n    // Kill the opportunistic containers that were chosen.\n    for (Container contToReclaim : extraOppContainersToReclaim) {\n      String preemptionAction \u003d usePauseEventForPreemption \u003d\u003d true ? \"paused\" :\n          \"resumed\";\n      LOG.info(\n          \"Container {} will be {} to start the \"\n              + \"execution of guaranteed container {}.\",\n          contToReclaim.getContainerId(), preemptionAction,\n          container.getContainerId());\n\n      if (usePauseEventForPreemption) {\n        contToReclaim.sendPauseEvent(\n            \"Container Paused to make room for Guaranteed Container\");\n      } else {\n        contToReclaim.sendKillEvent(\n            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n            \"Container Killed to make room for Guaranteed Container.\");\n      }\n      oppContainersToKill.put(contToReclaim.getContainerId(), contToReclaim);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java"
    }
  }
}