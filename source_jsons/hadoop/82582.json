{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LineReader.java",
  "functionName": "readCustomLine",
  "functionId": "readCustomLine___str-Text__maxLineLength-int__maxBytesToConsume-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
  "functionStartLine": 256,
  "functionEndLine": 359,
  "numCommitsSeen": 17,
  "timeTaken": 1989,
  "changeHistory": [
    "fc6b50cc574e144fd314dea6c11987c6a384bfa6",
    "7fd00b3db4b7d73afd41276ba9a06ec06a0e1762",
    "58d1a02b8d66b1d2a6ac2158be32bd35ad2e69bd",
    "a126a01fa197beebe955837c8f2efbd3257f7aa5",
    "18d99c12c371cfd7b9604e321d8bd6a7be9c4977",
    "34bd9794f79a0806fb42dc0ab3934810f3f9e486",
    "2926ae6eadfc7bf14266d902e7d28b602dc2e51f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "223f6511189caa11b08d68e85401668a2c00602a"
  ],
  "changeHistoryShort": {
    "fc6b50cc574e144fd314dea6c11987c6a384bfa6": "Ybodychange",
    "7fd00b3db4b7d73afd41276ba9a06ec06a0e1762": "Ybodychange",
    "58d1a02b8d66b1d2a6ac2158be32bd35ad2e69bd": "Ybodychange",
    "a126a01fa197beebe955837c8f2efbd3257f7aa5": "Ybodychange",
    "18d99c12c371cfd7b9604e321d8bd6a7be9c4977": "Ybodychange",
    "34bd9794f79a0806fb42dc0ab3934810f3f9e486": "Ybodychange",
    "2926ae6eadfc7bf14266d902e7d28b602dc2e51f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "223f6511189caa11b08d68e85401668a2c00602a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fc6b50cc574e144fd314dea6c11987c6a384bfa6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13192. org.apache.hadoop.util.LineReader cannot handle multibyte delimiters correctly. Contributed by binde.\n",
      "commitDate": "20/06/16 1:07 AM",
      "commitName": "fc6b50cc574e144fd314dea6c11987c6a384bfa6",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/11/15 5:03 PM",
      "commitNameOld": "7fd00b3db4b7d73afd41276ba9a06ec06a0e1762",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 207.29,
      "commitsBetweenForRepo": 1276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,104 @@\n   private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n       throws IOException {\n    /* We\u0027re reading data from inputStream, but the head of the stream may be\n     *  already captured in the previous buffer, so we have several cases:\n     * \n     * 1. The buffer tail does not contain any character sequence which\n     *    matches with the head of delimiter. We count it as a \n     *    ambiguous byte count \u003d 0\n     *    \n     * 2. The buffer tail contains a X number of characters,\n     *    that forms a sequence, which matches with the\n     *    head of delimiter. We count ambiguous byte count \u003d X\n     *    \n     *    // ***  eg: A segment of input file is as follows\n     *    \n     *    \" record 1792: I found this bug very interesting and\n     *     I have completely read about it. record 1793: This bug\n     *     can be solved easily record 1794: This .\" \n     *    \n     *    delimiter \u003d \"record\";\n     *        \n     *    supposing:- String at the end of buffer \u003d\n     *    \"I found this bug very interesting and I have completely re\"\n     *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n     *     \n     *     The matching characters in the input\n     *     buffer tail and delimiter head \u003d \"re\" \n     *     Therefore, ambiguous byte count \u003d 2 ****   //\n     *     \n     *     2.1 If the following bytes are the remaining characters of\n     *         the delimiter, then we have to capture only up to the starting \n     *         position of delimiter. That means, we need not include the \n     *         ambiguous characters in str.\n     *     \n     *     2.2 If the following bytes are not the remaining characters of\n     *         the delimiter ( as mentioned in the example ), \n     *         then we have to include the ambiguous characters in str. \n     */\n     str.clear();\n     int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n     long bytesConsumed \u003d 0;\n     int delPosn \u003d 0;\n     int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n     do {\n       int startPosn \u003d bufferPosn; // Start from previous end position\n       if (bufferPosn \u003e\u003d bufferLength) {\n         startPosn \u003d bufferPosn \u003d 0;\n         bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n         if (bufferLength \u003c\u003d 0) {\n           if (ambiguousByteCount \u003e 0) {\n             str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n             bytesConsumed +\u003d ambiguousByteCount;\n           }\n           break; // EOF\n         }\n       }\n       for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n         if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n           delPosn++;\n           if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n             bufferPosn++;\n             break;\n           }\n         } else if (delPosn !\u003d 0) {\n-          bufferPosn--;\n+          bufferPosn -\u003d delPosn;\n+          if(bufferPosn \u003c -1) {\n+            bufferPosn \u003d -1;\n+          }\n           delPosn \u003d 0;\n         }\n       }\n       int readLength \u003d bufferPosn - startPosn;\n       bytesConsumed +\u003d readLength;\n       int appendLength \u003d readLength - delPosn;\n       if (appendLength \u003e maxLineLength - txtLength) {\n         appendLength \u003d maxLineLength - txtLength;\n       }\n       bytesConsumed +\u003d ambiguousByteCount;\n       if (appendLength \u003e\u003d 0 \u0026\u0026 ambiguousByteCount \u003e 0) {\n         //appending the ambiguous characters (refer case 2.2)\n         str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n         ambiguousByteCount \u003d 0;\n         // since it is now certain that the split did not split a delimiter we\n         // should not read the next record: clear the flag otherwise duplicate\n         // records could be generated\n         unsetNeedAdditionalRecordAfterSplit();\n       }\n       if (appendLength \u003e 0) {\n         str.append(buffer, startPosn, appendLength);\n         txtLength +\u003d appendLength;\n       }\n       if (bufferPosn \u003e\u003d bufferLength) {\n         if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n           ambiguousByteCount \u003d delPosn;\n           bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n         }\n       }\n     } while (delPosn \u003c recordDelimiterBytes.length \n         \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n     if (bytesConsumed \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n     }\n     return (int) bytesConsumed; \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n   /* We\u0027re reading data from inputStream, but the head of the stream may be\n    *  already captured in the previous buffer, so we have several cases:\n    * \n    * 1. The buffer tail does not contain any character sequence which\n    *    matches with the head of delimiter. We count it as a \n    *    ambiguous byte count \u003d 0\n    *    \n    * 2. The buffer tail contains a X number of characters,\n    *    that forms a sequence, which matches with the\n    *    head of delimiter. We count ambiguous byte count \u003d X\n    *    \n    *    // ***  eg: A segment of input file is as follows\n    *    \n    *    \" record 1792: I found this bug very interesting and\n    *     I have completely read about it. record 1793: This bug\n    *     can be solved easily record 1794: This .\" \n    *    \n    *    delimiter \u003d \"record\";\n    *        \n    *    supposing:- String at the end of buffer \u003d\n    *    \"I found this bug very interesting and I have completely re\"\n    *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n    *     \n    *     The matching characters in the input\n    *     buffer tail and delimiter head \u003d \"re\" \n    *     Therefore, ambiguous byte count \u003d 2 ****   //\n    *     \n    *     2.1 If the following bytes are the remaining characters of\n    *         the delimiter, then we have to capture only up to the starting \n    *         position of delimiter. That means, we need not include the \n    *         ambiguous characters in str.\n    *     \n    *     2.2 If the following bytes are not the remaining characters of\n    *         the delimiter ( as mentioned in the example ), \n    *         then we have to include the ambiguous characters in str. \n    */\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n    do {\n      int startPosn \u003d bufferPosn; // Start from previous end position\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n        if (bufferLength \u003c\u003d 0) {\n          if (ambiguousByteCount \u003e 0) {\n            str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n            bytesConsumed +\u003d ambiguousByteCount;\n          }\n          break; // EOF\n        }\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else if (delPosn !\u003d 0) {\n          bufferPosn -\u003d delPosn;\n          if(bufferPosn \u003c -1) {\n            bufferPosn \u003d -1;\n          }\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      bytesConsumed +\u003d ambiguousByteCount;\n      if (appendLength \u003e\u003d 0 \u0026\u0026 ambiguousByteCount \u003e 0) {\n        //appending the ambiguous characters (refer case 2.2)\n        str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n        ambiguousByteCount \u003d 0;\n        // since it is now certain that the split did not split a delimiter we\n        // should not read the next record: clear the flag otherwise duplicate\n        // records could be generated\n        unsetNeedAdditionalRecordAfterSplit();\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n      if (bufferPosn \u003e\u003d bufferLength) {\n        if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n          ambiguousByteCount \u003d delPosn;\n          bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n        }\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length \n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    }\n    return (int) bytesConsumed; \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {}
    },
    "7fd00b3db4b7d73afd41276ba9a06ec06a0e1762": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6549. multibyte delimiters with LineRecordReader cause duplicate records (wilfreds via rkanter)\n",
      "commitDate": "25/11/15 5:03 PM",
      "commitName": "7fd00b3db4b7d73afd41276ba9a06ec06a0e1762",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "17/09/15 7:30 AM",
      "commitNameOld": "58d1a02b8d66b1d2a6ac2158be32bd35ad2e69bd",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 69.44,
      "commitsBetweenForRepo": 567,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,101 @@\n   private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n       throws IOException {\n    /* We\u0027re reading data from inputStream, but the head of the stream may be\n     *  already captured in the previous buffer, so we have several cases:\n     * \n     * 1. The buffer tail does not contain any character sequence which\n     *    matches with the head of delimiter. We count it as a \n     *    ambiguous byte count \u003d 0\n     *    \n     * 2. The buffer tail contains a X number of characters,\n     *    that forms a sequence, which matches with the\n     *    head of delimiter. We count ambiguous byte count \u003d X\n     *    \n     *    // ***  eg: A segment of input file is as follows\n     *    \n     *    \" record 1792: I found this bug very interesting and\n     *     I have completely read about it. record 1793: This bug\n     *     can be solved easily record 1794: This .\" \n     *    \n     *    delimiter \u003d \"record\";\n     *        \n     *    supposing:- String at the end of buffer \u003d\n     *    \"I found this bug very interesting and I have completely re\"\n     *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n     *     \n     *     The matching characters in the input\n     *     buffer tail and delimiter head \u003d \"re\" \n     *     Therefore, ambiguous byte count \u003d 2 ****   //\n     *     \n     *     2.1 If the following bytes are the remaining characters of\n     *         the delimiter, then we have to capture only up to the starting \n     *         position of delimiter. That means, we need not include the \n     *         ambiguous characters in str.\n     *     \n     *     2.2 If the following bytes are not the remaining characters of\n     *         the delimiter ( as mentioned in the example ), \n     *         then we have to include the ambiguous characters in str. \n     */\n     str.clear();\n     int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n     long bytesConsumed \u003d 0;\n     int delPosn \u003d 0;\n     int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n     do {\n       int startPosn \u003d bufferPosn; // Start from previous end position\n       if (bufferPosn \u003e\u003d bufferLength) {\n         startPosn \u003d bufferPosn \u003d 0;\n         bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n         if (bufferLength \u003c\u003d 0) {\n           if (ambiguousByteCount \u003e 0) {\n             str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n             bytesConsumed +\u003d ambiguousByteCount;\n           }\n           break; // EOF\n         }\n       }\n       for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n         if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n           delPosn++;\n           if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n             bufferPosn++;\n             break;\n           }\n         } else if (delPosn !\u003d 0) {\n           bufferPosn--;\n           delPosn \u003d 0;\n         }\n       }\n       int readLength \u003d bufferPosn - startPosn;\n       bytesConsumed +\u003d readLength;\n       int appendLength \u003d readLength - delPosn;\n       if (appendLength \u003e maxLineLength - txtLength) {\n         appendLength \u003d maxLineLength - txtLength;\n       }\n       bytesConsumed +\u003d ambiguousByteCount;\n       if (appendLength \u003e\u003d 0 \u0026\u0026 ambiguousByteCount \u003e 0) {\n         //appending the ambiguous characters (refer case 2.2)\n         str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n         ambiguousByteCount \u003d 0;\n+        // since it is now certain that the split did not split a delimiter we\n+        // should not read the next record: clear the flag otherwise duplicate\n+        // records could be generated\n+        unsetNeedAdditionalRecordAfterSplit();\n       }\n       if (appendLength \u003e 0) {\n         str.append(buffer, startPosn, appendLength);\n         txtLength +\u003d appendLength;\n       }\n       if (bufferPosn \u003e\u003d bufferLength) {\n         if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n           ambiguousByteCount \u003d delPosn;\n           bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n         }\n       }\n     } while (delPosn \u003c recordDelimiterBytes.length \n         \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n     if (bytesConsumed \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n     }\n     return (int) bytesConsumed; \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n   /* We\u0027re reading data from inputStream, but the head of the stream may be\n    *  already captured in the previous buffer, so we have several cases:\n    * \n    * 1. The buffer tail does not contain any character sequence which\n    *    matches with the head of delimiter. We count it as a \n    *    ambiguous byte count \u003d 0\n    *    \n    * 2. The buffer tail contains a X number of characters,\n    *    that forms a sequence, which matches with the\n    *    head of delimiter. We count ambiguous byte count \u003d X\n    *    \n    *    // ***  eg: A segment of input file is as follows\n    *    \n    *    \" record 1792: I found this bug very interesting and\n    *     I have completely read about it. record 1793: This bug\n    *     can be solved easily record 1794: This .\" \n    *    \n    *    delimiter \u003d \"record\";\n    *        \n    *    supposing:- String at the end of buffer \u003d\n    *    \"I found this bug very interesting and I have completely re\"\n    *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n    *     \n    *     The matching characters in the input\n    *     buffer tail and delimiter head \u003d \"re\" \n    *     Therefore, ambiguous byte count \u003d 2 ****   //\n    *     \n    *     2.1 If the following bytes are the remaining characters of\n    *         the delimiter, then we have to capture only up to the starting \n    *         position of delimiter. That means, we need not include the \n    *         ambiguous characters in str.\n    *     \n    *     2.2 If the following bytes are not the remaining characters of\n    *         the delimiter ( as mentioned in the example ), \n    *         then we have to include the ambiguous characters in str. \n    */\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n    do {\n      int startPosn \u003d bufferPosn; // Start from previous end position\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n        if (bufferLength \u003c\u003d 0) {\n          if (ambiguousByteCount \u003e 0) {\n            str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n            bytesConsumed +\u003d ambiguousByteCount;\n          }\n          break; // EOF\n        }\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else if (delPosn !\u003d 0) {\n          bufferPosn--;\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      bytesConsumed +\u003d ambiguousByteCount;\n      if (appendLength \u003e\u003d 0 \u0026\u0026 ambiguousByteCount \u003e 0) {\n        //appending the ambiguous characters (refer case 2.2)\n        str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n        ambiguousByteCount \u003d 0;\n        // since it is now certain that the split did not split a delimiter we\n        // should not read the next record: clear the flag otherwise duplicate\n        // records could be generated\n        unsetNeedAdditionalRecordAfterSplit();\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n      if (bufferPosn \u003e\u003d bufferLength) {\n        if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n          ambiguousByteCount \u003d delPosn;\n          bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n        }\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length \n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    }\n    return (int) bytesConsumed; \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {}
    },
    "58d1a02b8d66b1d2a6ac2158be32bd35ad2e69bd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6481. LineRecordReader may give incomplete record and wrong position/key information for uncompressed input sometimes. Contributed by Zhihai Xu\n",
      "commitDate": "17/09/15 7:30 AM",
      "commitName": "58d1a02b8d66b1d2a6ac2158be32bd35ad2e69bd",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/06/15 2:59 PM",
      "commitNameOld": "077250d8d7b4b757543a39a6ce8bb6e3be356c6f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 86.69,
      "commitsBetweenForRepo": 511,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,97 @@\n   private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n       throws IOException {\n    /* We\u0027re reading data from inputStream, but the head of the stream may be\n     *  already captured in the previous buffer, so we have several cases:\n     * \n     * 1. The buffer tail does not contain any character sequence which\n     *    matches with the head of delimiter. We count it as a \n     *    ambiguous byte count \u003d 0\n     *    \n     * 2. The buffer tail contains a X number of characters,\n     *    that forms a sequence, which matches with the\n     *    head of delimiter. We count ambiguous byte count \u003d X\n     *    \n     *    // ***  eg: A segment of input file is as follows\n     *    \n     *    \" record 1792: I found this bug very interesting and\n     *     I have completely read about it. record 1793: This bug\n     *     can be solved easily record 1794: This .\" \n     *    \n     *    delimiter \u003d \"record\";\n     *        \n     *    supposing:- String at the end of buffer \u003d\n     *    \"I found this bug very interesting and I have completely re\"\n     *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n     *     \n     *     The matching characters in the input\n     *     buffer tail and delimiter head \u003d \"re\" \n     *     Therefore, ambiguous byte count \u003d 2 ****   //\n     *     \n     *     2.1 If the following bytes are the remaining characters of\n     *         the delimiter, then we have to capture only up to the starting \n     *         position of delimiter. That means, we need not include the \n     *         ambiguous characters in str.\n     *     \n     *     2.2 If the following bytes are not the remaining characters of\n     *         the delimiter ( as mentioned in the example ), \n     *         then we have to include the ambiguous characters in str. \n     */\n     str.clear();\n     int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n     long bytesConsumed \u003d 0;\n     int delPosn \u003d 0;\n     int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n     do {\n       int startPosn \u003d bufferPosn; // Start from previous end position\n       if (bufferPosn \u003e\u003d bufferLength) {\n         startPosn \u003d bufferPosn \u003d 0;\n         bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n         if (bufferLength \u003c\u003d 0) {\n-          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n+          if (ambiguousByteCount \u003e 0) {\n+            str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n+            bytesConsumed +\u003d ambiguousByteCount;\n+          }\n           break; // EOF\n         }\n       }\n       for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n         if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n           delPosn++;\n           if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n             bufferPosn++;\n             break;\n           }\n         } else if (delPosn !\u003d 0) {\n           bufferPosn--;\n           delPosn \u003d 0;\n         }\n       }\n       int readLength \u003d bufferPosn - startPosn;\n       bytesConsumed +\u003d readLength;\n       int appendLength \u003d readLength - delPosn;\n       if (appendLength \u003e maxLineLength - txtLength) {\n         appendLength \u003d maxLineLength - txtLength;\n       }\n+      bytesConsumed +\u003d ambiguousByteCount;\n+      if (appendLength \u003e\u003d 0 \u0026\u0026 ambiguousByteCount \u003e 0) {\n+        //appending the ambiguous characters (refer case 2.2)\n+        str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n+        ambiguousByteCount \u003d 0;\n+      }\n       if (appendLength \u003e 0) {\n-        if (ambiguousByteCount \u003e 0) {\n-          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n-          //appending the ambiguous characters (refer case 2.2)\n-          bytesConsumed +\u003d ambiguousByteCount;\n-          ambiguousByteCount\u003d0;\n-        }\n         str.append(buffer, startPosn, appendLength);\n         txtLength +\u003d appendLength;\n       }\n       if (bufferPosn \u003e\u003d bufferLength) {\n         if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n           ambiguousByteCount \u003d delPosn;\n           bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n         }\n       }\n     } while (delPosn \u003c recordDelimiterBytes.length \n         \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n     if (bytesConsumed \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n     }\n     return (int) bytesConsumed; \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n   /* We\u0027re reading data from inputStream, but the head of the stream may be\n    *  already captured in the previous buffer, so we have several cases:\n    * \n    * 1. The buffer tail does not contain any character sequence which\n    *    matches with the head of delimiter. We count it as a \n    *    ambiguous byte count \u003d 0\n    *    \n    * 2. The buffer tail contains a X number of characters,\n    *    that forms a sequence, which matches with the\n    *    head of delimiter. We count ambiguous byte count \u003d X\n    *    \n    *    // ***  eg: A segment of input file is as follows\n    *    \n    *    \" record 1792: I found this bug very interesting and\n    *     I have completely read about it. record 1793: This bug\n    *     can be solved easily record 1794: This .\" \n    *    \n    *    delimiter \u003d \"record\";\n    *        \n    *    supposing:- String at the end of buffer \u003d\n    *    \"I found this bug very interesting and I have completely re\"\n    *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n    *     \n    *     The matching characters in the input\n    *     buffer tail and delimiter head \u003d \"re\" \n    *     Therefore, ambiguous byte count \u003d 2 ****   //\n    *     \n    *     2.1 If the following bytes are the remaining characters of\n    *         the delimiter, then we have to capture only up to the starting \n    *         position of delimiter. That means, we need not include the \n    *         ambiguous characters in str.\n    *     \n    *     2.2 If the following bytes are not the remaining characters of\n    *         the delimiter ( as mentioned in the example ), \n    *         then we have to include the ambiguous characters in str. \n    */\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n    do {\n      int startPosn \u003d bufferPosn; // Start from previous end position\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n        if (bufferLength \u003c\u003d 0) {\n          if (ambiguousByteCount \u003e 0) {\n            str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n            bytesConsumed +\u003d ambiguousByteCount;\n          }\n          break; // EOF\n        }\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else if (delPosn !\u003d 0) {\n          bufferPosn--;\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      bytesConsumed +\u003d ambiguousByteCount;\n      if (appendLength \u003e\u003d 0 \u0026\u0026 ambiguousByteCount \u003e 0) {\n        //appending the ambiguous characters (refer case 2.2)\n        str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n        ambiguousByteCount \u003d 0;\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n      if (bufferPosn \u003e\u003d bufferLength) {\n        if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n          ambiguousByteCount \u003d delPosn;\n          bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n        }\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length \n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    }\n    return (int) bytesConsumed; \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {}
    },
    "a126a01fa197beebe955837c8f2efbd3257f7aa5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10437. Fix the javac warnings in the conf and the util package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582015 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/14 12:03 PM",
      "commitName": "a126a01fa197beebe955837c8f2efbd3257f7aa5",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/12/13 3:31 PM",
      "commitNameOld": "18d99c12c371cfd7b9604e321d8bd6a7be9c4977",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 106.81,
      "commitsBetweenForRepo": 798,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,94 @@\n   private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n       throws IOException {\n    /* We\u0027re reading data from inputStream, but the head of the stream may be\n     *  already captured in the previous buffer, so we have several cases:\n     * \n     * 1. The buffer tail does not contain any character sequence which\n     *    matches with the head of delimiter. We count it as a \n     *    ambiguous byte count \u003d 0\n     *    \n     * 2. The buffer tail contains a X number of characters,\n     *    that forms a sequence, which matches with the\n     *    head of delimiter. We count ambiguous byte count \u003d X\n     *    \n     *    // ***  eg: A segment of input file is as follows\n     *    \n     *    \" record 1792: I found this bug very interesting and\n     *     I have completely read about it. record 1793: This bug\n     *     can be solved easily record 1794: This .\" \n     *    \n     *    delimiter \u003d \"record\";\n     *        \n     *    supposing:- String at the end of buffer \u003d\n     *    \"I found this bug very interesting and I have completely re\"\n     *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n     *     \n     *     The matching characters in the input\n     *     buffer tail and delimiter head \u003d \"re\" \n     *     Therefore, ambiguous byte count \u003d 2 ****   //\n     *     \n     *     2.1 If the following bytes are the remaining characters of\n     *         the delimiter, then we have to capture only up to the starting \n     *         position of delimiter. That means, we need not include the \n     *         ambiguous characters in str.\n     *     \n     *     2.2 If the following bytes are not the remaining characters of\n     *         the delimiter ( as mentioned in the example ), \n     *         then we have to include the ambiguous characters in str. \n     */\n     str.clear();\n     int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n     long bytesConsumed \u003d 0;\n     int delPosn \u003d 0;\n     int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n     do {\n       int startPosn \u003d bufferPosn; // Start from previous end position\n       if (bufferPosn \u003e\u003d bufferLength) {\n         startPosn \u003d bufferPosn \u003d 0;\n         bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n         if (bufferLength \u003c\u003d 0) {\n           str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n           break; // EOF\n         }\n       }\n       for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n         if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n           delPosn++;\n           if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n             bufferPosn++;\n             break;\n           }\n         } else if (delPosn !\u003d 0) {\n           bufferPosn--;\n           delPosn \u003d 0;\n         }\n       }\n       int readLength \u003d bufferPosn - startPosn;\n       bytesConsumed +\u003d readLength;\n       int appendLength \u003d readLength - delPosn;\n       if (appendLength \u003e maxLineLength - txtLength) {\n         appendLength \u003d maxLineLength - txtLength;\n       }\n       if (appendLength \u003e 0) {\n         if (ambiguousByteCount \u003e 0) {\n           str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n           //appending the ambiguous characters (refer case 2.2)\n           bytesConsumed +\u003d ambiguousByteCount;\n           ambiguousByteCount\u003d0;\n         }\n         str.append(buffer, startPosn, appendLength);\n         txtLength +\u003d appendLength;\n       }\n       if (bufferPosn \u003e\u003d bufferLength) {\n         if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n           ambiguousByteCount \u003d delPosn;\n           bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n         }\n       }\n     } while (delPosn \u003c recordDelimiterBytes.length \n         \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n-    if (bytesConsumed \u003e (long) Integer.MAX_VALUE) {\n+    if (bytesConsumed \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n     }\n     return (int) bytesConsumed; \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n   /* We\u0027re reading data from inputStream, but the head of the stream may be\n    *  already captured in the previous buffer, so we have several cases:\n    * \n    * 1. The buffer tail does not contain any character sequence which\n    *    matches with the head of delimiter. We count it as a \n    *    ambiguous byte count \u003d 0\n    *    \n    * 2. The buffer tail contains a X number of characters,\n    *    that forms a sequence, which matches with the\n    *    head of delimiter. We count ambiguous byte count \u003d X\n    *    \n    *    // ***  eg: A segment of input file is as follows\n    *    \n    *    \" record 1792: I found this bug very interesting and\n    *     I have completely read about it. record 1793: This bug\n    *     can be solved easily record 1794: This .\" \n    *    \n    *    delimiter \u003d \"record\";\n    *        \n    *    supposing:- String at the end of buffer \u003d\n    *    \"I found this bug very interesting and I have completely re\"\n    *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n    *     \n    *     The matching characters in the input\n    *     buffer tail and delimiter head \u003d \"re\" \n    *     Therefore, ambiguous byte count \u003d 2 ****   //\n    *     \n    *     2.1 If the following bytes are the remaining characters of\n    *         the delimiter, then we have to capture only up to the starting \n    *         position of delimiter. That means, we need not include the \n    *         ambiguous characters in str.\n    *     \n    *     2.2 If the following bytes are not the remaining characters of\n    *         the delimiter ( as mentioned in the example ), \n    *         then we have to include the ambiguous characters in str. \n    */\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n    do {\n      int startPosn \u003d bufferPosn; // Start from previous end position\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n        if (bufferLength \u003c\u003d 0) {\n          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n          break; // EOF\n        }\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else if (delPosn !\u003d 0) {\n          bufferPosn--;\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        if (ambiguousByteCount \u003e 0) {\n          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n          //appending the ambiguous characters (refer case 2.2)\n          bytesConsumed +\u003d ambiguousByteCount;\n          ambiguousByteCount\u003d0;\n        }\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n      if (bufferPosn \u003e\u003d bufferLength) {\n        if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n          ambiguousByteCount \u003d delPosn;\n          bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n        }\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length \n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    }\n    return (int) bytesConsumed; \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {}
    },
    "18d99c12c371cfd7b9604e321d8bd6a7be9c4977": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5656. bzip2 codec can drop records when reading data in splits. Contributed by Jason Lowe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1549705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/12/13 3:31 PM",
      "commitName": "18d99c12c371cfd7b9604e321d8bd6a7be9c4977",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "05/02/13 1:23 PM",
      "commitNameOld": "0b565a967d7abb1bdab9827f1209118bf17e4471",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 307.09,
      "commitsBetweenForRepo": 1848,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,94 @@\n   private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n       throws IOException {\n    /* We\u0027re reading data from inputStream, but the head of the stream may be\n     *  already captured in the previous buffer, so we have several cases:\n     * \n     * 1. The buffer tail does not contain any character sequence which\n     *    matches with the head of delimiter. We count it as a \n     *    ambiguous byte count \u003d 0\n     *    \n     * 2. The buffer tail contains a X number of characters,\n     *    that forms a sequence, which matches with the\n     *    head of delimiter. We count ambiguous byte count \u003d X\n     *    \n     *    // ***  eg: A segment of input file is as follows\n     *    \n     *    \" record 1792: I found this bug very interesting and\n     *     I have completely read about it. record 1793: This bug\n     *     can be solved easily record 1794: This .\" \n     *    \n     *    delimiter \u003d \"record\";\n     *        \n     *    supposing:- String at the end of buffer \u003d\n     *    \"I found this bug very interesting and I have completely re\"\n     *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n     *     \n     *     The matching characters in the input\n     *     buffer tail and delimiter head \u003d \"re\" \n     *     Therefore, ambiguous byte count \u003d 2 ****   //\n     *     \n     *     2.1 If the following bytes are the remaining characters of\n     *         the delimiter, then we have to capture only up to the starting \n     *         position of delimiter. That means, we need not include the \n     *         ambiguous characters in str.\n     *     \n     *     2.2 If the following bytes are not the remaining characters of\n     *         the delimiter ( as mentioned in the example ), \n     *         then we have to include the ambiguous characters in str. \n     */\n     str.clear();\n     int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n     long bytesConsumed \u003d 0;\n     int delPosn \u003d 0;\n     int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n     do {\n       int startPosn \u003d bufferPosn; // Start from previous end position\n       if (bufferPosn \u003e\u003d bufferLength) {\n         startPosn \u003d bufferPosn \u003d 0;\n-        bufferLength \u003d in.read(buffer);\n+        bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n         if (bufferLength \u003c\u003d 0) {\n           str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n           break; // EOF\n         }\n       }\n       for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n         if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n           delPosn++;\n           if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n             bufferPosn++;\n             break;\n           }\n         } else if (delPosn !\u003d 0) {\n           bufferPosn--;\n           delPosn \u003d 0;\n         }\n       }\n       int readLength \u003d bufferPosn - startPosn;\n       bytesConsumed +\u003d readLength;\n       int appendLength \u003d readLength - delPosn;\n       if (appendLength \u003e maxLineLength - txtLength) {\n         appendLength \u003d maxLineLength - txtLength;\n       }\n       if (appendLength \u003e 0) {\n         if (ambiguousByteCount \u003e 0) {\n           str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n           //appending the ambiguous characters (refer case 2.2)\n           bytesConsumed +\u003d ambiguousByteCount;\n           ambiguousByteCount\u003d0;\n         }\n         str.append(buffer, startPosn, appendLength);\n         txtLength +\u003d appendLength;\n       }\n       if (bufferPosn \u003e\u003d bufferLength) {\n         if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n           ambiguousByteCount \u003d delPosn;\n           bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n         }\n       }\n     } while (delPosn \u003c recordDelimiterBytes.length \n         \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n     if (bytesConsumed \u003e (long) Integer.MAX_VALUE) {\n       throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n     }\n     return (int) bytesConsumed; \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n   /* We\u0027re reading data from inputStream, but the head of the stream may be\n    *  already captured in the previous buffer, so we have several cases:\n    * \n    * 1. The buffer tail does not contain any character sequence which\n    *    matches with the head of delimiter. We count it as a \n    *    ambiguous byte count \u003d 0\n    *    \n    * 2. The buffer tail contains a X number of characters,\n    *    that forms a sequence, which matches with the\n    *    head of delimiter. We count ambiguous byte count \u003d X\n    *    \n    *    // ***  eg: A segment of input file is as follows\n    *    \n    *    \" record 1792: I found this bug very interesting and\n    *     I have completely read about it. record 1793: This bug\n    *     can be solved easily record 1794: This .\" \n    *    \n    *    delimiter \u003d \"record\";\n    *        \n    *    supposing:- String at the end of buffer \u003d\n    *    \"I found this bug very interesting and I have completely re\"\n    *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n    *     \n    *     The matching characters in the input\n    *     buffer tail and delimiter head \u003d \"re\" \n    *     Therefore, ambiguous byte count \u003d 2 ****   //\n    *     \n    *     2.1 If the following bytes are the remaining characters of\n    *         the delimiter, then we have to capture only up to the starting \n    *         position of delimiter. That means, we need not include the \n    *         ambiguous characters in str.\n    *     \n    *     2.2 If the following bytes are not the remaining characters of\n    *         the delimiter ( as mentioned in the example ), \n    *         then we have to include the ambiguous characters in str. \n    */\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n    do {\n      int startPosn \u003d bufferPosn; // Start from previous end position\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d fillBuffer(in, buffer, ambiguousByteCount \u003e 0);\n        if (bufferLength \u003c\u003d 0) {\n          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n          break; // EOF\n        }\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else if (delPosn !\u003d 0) {\n          bufferPosn--;\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        if (ambiguousByteCount \u003e 0) {\n          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n          //appending the ambiguous characters (refer case 2.2)\n          bytesConsumed +\u003d ambiguousByteCount;\n          ambiguousByteCount\u003d0;\n        }\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n      if (bufferPosn \u003e\u003d bufferLength) {\n        if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n          ambiguousByteCount \u003d delPosn;\n          bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n        }\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length \n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e (long) Integer.MAX_VALUE) {\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    }\n    return (int) bytesConsumed; \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {}
    },
    "34bd9794f79a0806fb42dc0ab3934810f3f9e486": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8655. Fix TextInputFormat for large deliminators. (Gelesh via  bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1376592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/12 9:58 AM",
      "commitName": "34bd9794f79a0806fb42dc0ab3934810f3f9e486",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "16/08/12 7:23 AM",
      "commitNameOld": "2926ae6eadfc7bf14266d902e7d28b602dc2e51f",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 7.11,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,94 @@\n   private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n       throws IOException {\n+   /* We\u0027re reading data from inputStream, but the head of the stream may be\n+    *  already captured in the previous buffer, so we have several cases:\n+    * \n+    * 1. The buffer tail does not contain any character sequence which\n+    *    matches with the head of delimiter. We count it as a \n+    *    ambiguous byte count \u003d 0\n+    *    \n+    * 2. The buffer tail contains a X number of characters,\n+    *    that forms a sequence, which matches with the\n+    *    head of delimiter. We count ambiguous byte count \u003d X\n+    *    \n+    *    // ***  eg: A segment of input file is as follows\n+    *    \n+    *    \" record 1792: I found this bug very interesting and\n+    *     I have completely read about it. record 1793: This bug\n+    *     can be solved easily record 1794: This .\" \n+    *    \n+    *    delimiter \u003d \"record\";\n+    *        \n+    *    supposing:- String at the end of buffer \u003d\n+    *    \"I found this bug very interesting and I have completely re\"\n+    *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n+    *     \n+    *     The matching characters in the input\n+    *     buffer tail and delimiter head \u003d \"re\" \n+    *     Therefore, ambiguous byte count \u003d 2 ****   //\n+    *     \n+    *     2.1 If the following bytes are the remaining characters of\n+    *         the delimiter, then we have to capture only up to the starting \n+    *         position of delimiter. That means, we need not include the \n+    *         ambiguous characters in str.\n+    *     \n+    *     2.2 If the following bytes are not the remaining characters of\n+    *         the delimiter ( as mentioned in the example ), \n+    *         then we have to include the ambiguous characters in str. \n+    */\n     str.clear();\n     int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n     long bytesConsumed \u003d 0;\n     int delPosn \u003d 0;\n+    int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n     do {\n-      int startPosn \u003d bufferPosn; // starting from where we left off the last\n-      // time\n+      int startPosn \u003d bufferPosn; // Start from previous end position\n       if (bufferPosn \u003e\u003d bufferLength) {\n         startPosn \u003d bufferPosn \u003d 0;\n         bufferLength \u003d in.read(buffer);\n-        if (bufferLength \u003c\u003d 0)\n+        if (bufferLength \u003c\u003d 0) {\n+          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n           break; // EOF\n+        }\n       }\n       for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n         if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n           delPosn++;\n           if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n             bufferPosn++;\n             break;\n           }\n         } else if (delPosn !\u003d 0) {\n-          bufferPosn--; // recheck if bufferPosn matches start of delimiter\n+          bufferPosn--;\n           delPosn \u003d 0;\n         }\n       }\n       int readLength \u003d bufferPosn - startPosn;\n       bytesConsumed +\u003d readLength;\n       int appendLength \u003d readLength - delPosn;\n       if (appendLength \u003e maxLineLength - txtLength) {\n         appendLength \u003d maxLineLength - txtLength;\n       }\n       if (appendLength \u003e 0) {\n+        if (ambiguousByteCount \u003e 0) {\n+          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n+          //appending the ambiguous characters (refer case 2.2)\n+          bytesConsumed +\u003d ambiguousByteCount;\n+          ambiguousByteCount\u003d0;\n+        }\n         str.append(buffer, startPosn, appendLength);\n         txtLength +\u003d appendLength;\n       }\n-    } while (delPosn \u003c recordDelimiterBytes.length\n+      if (bufferPosn \u003e\u003d bufferLength) {\n+        if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n+          ambiguousByteCount \u003d delPosn;\n+          bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n+        }\n+      }\n+    } while (delPosn \u003c recordDelimiterBytes.length \n         \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n-    if (bytesConsumed \u003e (long) Integer.MAX_VALUE)\n+    if (bytesConsumed \u003e (long) Integer.MAX_VALUE) {\n       throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n-    return (int) bytesConsumed;\n+    }\n+    return (int) bytesConsumed; \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n   /* We\u0027re reading data from inputStream, but the head of the stream may be\n    *  already captured in the previous buffer, so we have several cases:\n    * \n    * 1. The buffer tail does not contain any character sequence which\n    *    matches with the head of delimiter. We count it as a \n    *    ambiguous byte count \u003d 0\n    *    \n    * 2. The buffer tail contains a X number of characters,\n    *    that forms a sequence, which matches with the\n    *    head of delimiter. We count ambiguous byte count \u003d X\n    *    \n    *    // ***  eg: A segment of input file is as follows\n    *    \n    *    \" record 1792: I found this bug very interesting and\n    *     I have completely read about it. record 1793: This bug\n    *     can be solved easily record 1794: This .\" \n    *    \n    *    delimiter \u003d \"record\";\n    *        \n    *    supposing:- String at the end of buffer \u003d\n    *    \"I found this bug very interesting and I have completely re\"\n    *    There for next buffer \u003d \"ad about it. record 179       ....\"           \n    *     \n    *     The matching characters in the input\n    *     buffer tail and delimiter head \u003d \"re\" \n    *     Therefore, ambiguous byte count \u003d 2 ****   //\n    *     \n    *     2.1 If the following bytes are the remaining characters of\n    *         the delimiter, then we have to capture only up to the starting \n    *         position of delimiter. That means, we need not include the \n    *         ambiguous characters in str.\n    *     \n    *     2.2 If the following bytes are not the remaining characters of\n    *         the delimiter ( as mentioned in the example ), \n    *         then we have to include the ambiguous characters in str. \n    */\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    int ambiguousByteCount\u003d0; // To capture the ambiguous characters count\n    do {\n      int startPosn \u003d bufferPosn; // Start from previous end position\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d in.read(buffer);\n        if (bufferLength \u003c\u003d 0) {\n          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n          break; // EOF\n        }\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else if (delPosn !\u003d 0) {\n          bufferPosn--;\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        if (ambiguousByteCount \u003e 0) {\n          str.append(recordDelimiterBytes, 0, ambiguousByteCount);\n          //appending the ambiguous characters (refer case 2.2)\n          bytesConsumed +\u003d ambiguousByteCount;\n          ambiguousByteCount\u003d0;\n        }\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n      if (bufferPosn \u003e\u003d bufferLength) {\n        if (delPosn \u003e 0 \u0026\u0026 delPosn \u003c recordDelimiterBytes.length) {\n          ambiguousByteCount \u003d delPosn;\n          bytesConsumed -\u003d ambiguousByteCount; //to be consumed in next\n        }\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length \n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e (long) Integer.MAX_VALUE) {\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    }\n    return (int) bytesConsumed; \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {}
    },
    "2926ae6eadfc7bf14266d902e7d28b602dc2e51f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8654. TextInputFormat delimiter bug (Gelesh and Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373859 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/08/12 7:23 AM",
      "commitName": "2926ae6eadfc7bf14266d902e7d28b602dc2e51f",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 357.59,
      "commitsBetweenForRepo": 2373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n       throws IOException {\n     str.clear();\n     int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n     long bytesConsumed \u003d 0;\n     int delPosn \u003d 0;\n     do {\n       int startPosn \u003d bufferPosn; // starting from where we left off the last\n       // time\n       if (bufferPosn \u003e\u003d bufferLength) {\n         startPosn \u003d bufferPosn \u003d 0;\n         bufferLength \u003d in.read(buffer);\n         if (bufferLength \u003c\u003d 0)\n           break; // EOF\n       }\n       for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n         if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n           delPosn++;\n           if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n             bufferPosn++;\n             break;\n           }\n-        } else {\n+        } else if (delPosn !\u003d 0) {\n+          bufferPosn--; // recheck if bufferPosn matches start of delimiter\n           delPosn \u003d 0;\n         }\n       }\n       int readLength \u003d bufferPosn - startPosn;\n       bytesConsumed +\u003d readLength;\n       int appendLength \u003d readLength - delPosn;\n       if (appendLength \u003e maxLineLength - txtLength) {\n         appendLength \u003d maxLineLength - txtLength;\n       }\n       if (appendLength \u003e 0) {\n         str.append(buffer, startPosn, appendLength);\n         txtLength +\u003d appendLength;\n       }\n     } while (delPosn \u003c recordDelimiterBytes.length\n         \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n     if (bytesConsumed \u003e (long) Integer.MAX_VALUE)\n       throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n     return (int) bytesConsumed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    do {\n      int startPosn \u003d bufferPosn; // starting from where we left off the last\n      // time\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d in.read(buffer);\n        if (bufferLength \u003c\u003d 0)\n          break; // EOF\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else if (delPosn !\u003d 0) {\n          bufferPosn--; // recheck if bufferPosn matches start of delimiter\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length\n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e (long) Integer.MAX_VALUE)\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    return (int) bytesConsumed;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    do {\n      int startPosn \u003d bufferPosn; // starting from where we left off the last\n      // time\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d in.read(buffer);\n        if (bufferLength \u003c\u003d 0)\n          break; // EOF\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else {\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length\n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e (long) Integer.MAX_VALUE)\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    return (int) bytesConsumed;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    do {\n      int startPosn \u003d bufferPosn; // starting from where we left off the last\n      // time\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d in.read(buffer);\n        if (bufferLength \u003c\u003d 0)\n          break; // EOF\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else {\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length\n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e (long) Integer.MAX_VALUE)\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    return (int) bytesConsumed;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/LineReader.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    do {\n      int startPosn \u003d bufferPosn; // starting from where we left off the last\n      // time\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d in.read(buffer);\n        if (bufferLength \u003c\u003d 0)\n          break; // EOF\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else {\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length\n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e (long) Integer.MAX_VALUE)\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    return (int) bytesConsumed;\n  }",
      "path": "common/src/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/util/LineReader.java",
        "newPath": "common/src/java/org/apache/hadoop/util/LineReader.java"
      }
    },
    "223f6511189caa11b08d68e85401668a2c00602a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7096. Allow setting of end-of-record delimiter for TextInputFormat. Contributed by Ahmed Radwan.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1068729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/02/11 5:41 PM",
      "commitName": "223f6511189caa11b08d68e85401668a2c00602a",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,42 @@\n+  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n+      throws IOException {\n+    str.clear();\n+    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n+    long bytesConsumed \u003d 0;\n+    int delPosn \u003d 0;\n+    do {\n+      int startPosn \u003d bufferPosn; // starting from where we left off the last\n+      // time\n+      if (bufferPosn \u003e\u003d bufferLength) {\n+        startPosn \u003d bufferPosn \u003d 0;\n+        bufferLength \u003d in.read(buffer);\n+        if (bufferLength \u003c\u003d 0)\n+          break; // EOF\n+      }\n+      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n+        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n+          delPosn++;\n+          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n+            bufferPosn++;\n+            break;\n+          }\n+        } else {\n+          delPosn \u003d 0;\n+        }\n+      }\n+      int readLength \u003d bufferPosn - startPosn;\n+      bytesConsumed +\u003d readLength;\n+      int appendLength \u003d readLength - delPosn;\n+      if (appendLength \u003e maxLineLength - txtLength) {\n+        appendLength \u003d maxLineLength - txtLength;\n+      }\n+      if (appendLength \u003e 0) {\n+        str.append(buffer, startPosn, appendLength);\n+        txtLength +\u003d appendLength;\n+      }\n+    } while (delPosn \u003c recordDelimiterBytes.length\n+        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n+    if (bytesConsumed \u003e (long) Integer.MAX_VALUE)\n+      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n+    return (int) bytesConsumed;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)\n      throws IOException {\n    str.clear();\n    int txtLength \u003d 0; // tracks str.getLength(), as an optimization\n    long bytesConsumed \u003d 0;\n    int delPosn \u003d 0;\n    do {\n      int startPosn \u003d bufferPosn; // starting from where we left off the last\n      // time\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        bufferLength \u003d in.read(buffer);\n        if (bufferLength \u003c\u003d 0)\n          break; // EOF\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) {\n        if (buffer[bufferPosn] \u003d\u003d recordDelimiterBytes[delPosn]) {\n          delPosn++;\n          if (delPosn \u003e\u003d recordDelimiterBytes.length) {\n            bufferPosn++;\n            break;\n          }\n        } else {\n          delPosn \u003d 0;\n        }\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - delPosn;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n    } while (delPosn \u003c recordDelimiterBytes.length\n        \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n    if (bytesConsumed \u003e (long) Integer.MAX_VALUE)\n      throw new IOException(\"Too many bytes before delimiter: \" + bytesConsumed);\n    return (int) bytesConsumed;\n  }",
      "path": "src/java/org/apache/hadoop/util/LineReader.java"
    }
  }
}