{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirWriteFileOp.java",
  "functionName": "completeFileInternal",
  "functionId": "completeFileInternal___fsn-FSNamesystem__iip-INodesInPath__holder-String__last-Block__fileId-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
  "functionStartLine": 694,
  "functionEndLine": 743,
  "numCommitsSeen": 893,
  "timeTaken": 41684,
  "changeHistory": [
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "bd909ed9f2d853f614f04a50e2230a7932732776",
    "e5afac5896a1a88e152746598527d91f73cbb724",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "76e7264e8d6407f527bd877009aca11f7bb63bd7",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "18312804e9c86c0ea6a259e288994fea6fa366ef",
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "7af12ab207cf6e5e63ccb359e928db7fe2350585",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75",
    "92cbba386ff6e8daafc813a07aa30dbbe9825b1d",
    "0b101bd7e875ee5597ddb8f0d887159076310ffa",
    "980e6c54bab4ffc87e168cd5c217fef44c72a878",
    "fd1000bcefa07992ff5c6fae3508f3e33b7955c6",
    "b1333e5b561d01a010e2e1311e8501879f377bdc",
    "2372e394dd99d69d396327d5a5e172953a8b8c6a",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16",
    "9821af9ce8a56a2c583f1ed938902c20e897048f",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "ba2ee1d7fb91462c861169224d250d2d90bec3a6",
    "bcdb125643d4ec834f6bd5d4fafb079391f31fc6",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ymultichange(Yparameterchange,Ybodychange)",
    "bd909ed9f2d853f614f04a50e2230a7932732776": "Ybodychange",
    "e5afac5896a1a88e152746598527d91f73cbb724": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "76e7264e8d6407f527bd877009aca11f7bb63bd7": "Ybodychange",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ymultichange(Yexceptionschange,Ybodychange)",
    "18312804e9c86c0ea6a259e288994fea6fa366ef": "Ybodychange",
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc": "Ybodychange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ybodychange",
    "7af12ab207cf6e5e63ccb359e928db7fe2350585": "Ybodychange",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": "Ybodychange",
    "92cbba386ff6e8daafc813a07aa30dbbe9825b1d": "Ymultichange(Yparameterchange,Ybodychange)",
    "0b101bd7e875ee5597ddb8f0d887159076310ffa": "Ybodychange",
    "980e6c54bab4ffc87e168cd5c217fef44c72a878": "Ybodychange",
    "fd1000bcefa07992ff5c6fae3508f3e33b7955c6": "Ybodychange",
    "b1333e5b561d01a010e2e1311e8501879f377bdc": "Ybodychange",
    "2372e394dd99d69d396327d5a5e172953a8b8c6a": "Ybodychange",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": "Ybodychange",
    "9821af9ce8a56a2c583f1ed938902c20e897048f": "Ybodychange",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "ba2ee1d7fb91462c861169224d250d2d90bec3a6": "Ybodychange",
    "bcdb125643d4ec834f6bd5d4fafb079391f31fc6": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92": "Ybodychange",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
          "commitDate": "17/08/16 1:53 PM",
          "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "15/08/16 2:45 PM",
          "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 1.96,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,50 @@\n   private static boolean completeFileInternal(\n-      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n+      FSNamesystem fsn, INodesInPath iip,\n+      String holder, Block last, long fileId)\n       throws IOException {\n     assert fsn.hasWriteLock();\n+    final String src \u003d iip.getPath();\n     final INodeFile pendingFile;\n-    final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n-      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n-        // Older clients may not have given us an inode ID to work with.\n-        // In this case, we have to try to resolve the path and hope it\n-        // hasn\u0027t changed or been deleted since the file was opened for write.\n-        iip \u003d fsn.dir.getINodesInPath(src, true);\n-        inode \u003d iip.getLastINode();\n-      } else {\n-        inode \u003d fsn.dir.getInode(fileId);\n-        iip \u003d INodesInPath.fromINode(inode);\n-        if (inode !\u003d null) {\n-          src \u003d iip.getPath();\n-        }\n-      }\n-      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n+      inode \u003d iip.getLastINode();\n+      pendingFile \u003d fsn.checkLease(iip, holder, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!fsn.checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n     fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n \n     if (!fsn.checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n     fsn.addCommittedBlocksToPending(pendingFile);\n \n     fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID, true);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean completeFileInternal(\n      FSNamesystem fsn, INodesInPath iip,\n      String holder, Block last, long fileId)\n      throws IOException {\n    assert fsn.hasWriteLock();\n    final String src \u003d iip.getPath();\n    final INodeFile pendingFile;\n    INode inode \u003d null;\n    try {\n      inode \u003d iip.getLastINode();\n      pendingFile \u003d fsn.checkLease(iip, holder, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    fsn.addCommittedBlocksToPending(pendingFile);\n\n    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID, true);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[fsn-FSNamesystem, src-String, holder-String, last-Block, fileId-long]",
            "newValue": "[fsn-FSNamesystem, iip-INodesInPath, holder-String, last-Block, fileId-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
          "commitDate": "17/08/16 1:53 PM",
          "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "15/08/16 2:45 PM",
          "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 1.96,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,50 @@\n   private static boolean completeFileInternal(\n-      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n+      FSNamesystem fsn, INodesInPath iip,\n+      String holder, Block last, long fileId)\n       throws IOException {\n     assert fsn.hasWriteLock();\n+    final String src \u003d iip.getPath();\n     final INodeFile pendingFile;\n-    final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n-      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n-        // Older clients may not have given us an inode ID to work with.\n-        // In this case, we have to try to resolve the path and hope it\n-        // hasn\u0027t changed or been deleted since the file was opened for write.\n-        iip \u003d fsn.dir.getINodesInPath(src, true);\n-        inode \u003d iip.getLastINode();\n-      } else {\n-        inode \u003d fsn.dir.getInode(fileId);\n-        iip \u003d INodesInPath.fromINode(inode);\n-        if (inode !\u003d null) {\n-          src \u003d iip.getPath();\n-        }\n-      }\n-      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n+      inode \u003d iip.getLastINode();\n+      pendingFile \u003d fsn.checkLease(iip, holder, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!fsn.checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n     fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n \n     if (!fsn.checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n     fsn.addCommittedBlocksToPending(pendingFile);\n \n     fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID, true);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean completeFileInternal(\n      FSNamesystem fsn, INodesInPath iip,\n      String holder, Block last, long fileId)\n      throws IOException {\n    assert fsn.hasWriteLock();\n    final String src \u003d iip.getPath();\n    final INodeFile pendingFile;\n    INode inode \u003d null;\n    try {\n      inode \u003d iip.getLastINode();\n      pendingFile \u003d fsn.checkLease(iip, holder, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    fsn.addCommittedBlocksToPending(pendingFile);\n\n    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID, true);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "bd909ed9f2d853f614f04a50e2230a7932732776": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8999. Allow a file to be closed with COMMITTED but not yet COMPLETE blocks.\n",
      "commitDate": "25/01/16 6:32 PM",
      "commitName": "bd909ed9f2d853f614f04a50e2230a7932732776",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "01/12/15 1:05 PM",
      "commitNameOld": "830eb252aaa4fec7ef2ec38cb66f669e8e1ecaa5",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 55.23,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,61 @@\n   private static boolean completeFileInternal(\n       FSNamesystem fsn, String src, String holder, Block last, long fileId)\n       throws IOException {\n     assert fsn.hasWriteLock();\n     final INodeFile pendingFile;\n     final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n       if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n         iip \u003d fsn.dir.getINodesInPath(src, true);\n         inode \u003d iip.getLastINode();\n       } else {\n         inode \u003d fsn.dir.getInode(fileId);\n         iip \u003d INodesInPath.fromINode(inode);\n         if (inode !\u003d null) {\n           src \u003d iip.getPath();\n         }\n       }\n       pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!fsn.checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n     fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n \n     if (!fsn.checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n+    fsn.addCommittedBlocksToPending(pendingFile);\n+\n     fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n-        Snapshot.CURRENT_STATE_ID);\n+        Snapshot.CURRENT_STATE_ID, true);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean completeFileInternal(\n      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n      throws IOException {\n    assert fsn.hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d fsn.dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d fsn.dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    fsn.addCommittedBlocksToPending(pendingFile);\n\n    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID, true);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "e5afac5896a1a88e152746598527d91f73cbb724": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-8394. Move getAdditionalBlock() and related functionalities into a separate class. Contributed by Haohui Mai.\n",
      "commitDate": "15/05/15 7:09 PM",
      "commitName": "e5afac5896a1a88e152746598527d91f73cbb724",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-8394. Move getAdditionalBlock() and related functionalities into a separate class. Contributed by Haohui Mai.\n",
          "commitDate": "15/05/15 7:09 PM",
          "commitName": "e5afac5896a1a88e152746598527d91f73cbb724",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/05/15 4:14 PM",
          "commitNameOld": "8f378733423a5244461df79a92c00239514b8b93",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,59 @@\n-  private boolean completeFileInternal(String src, String holder, Block last,\n-      long fileId) throws IOException {\n-    assert hasWriteLock();\n+  private static boolean completeFileInternal(\n+      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n+      throws IOException {\n+    assert fsn.hasWriteLock();\n     final INodeFile pendingFile;\n     final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n       if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n-        iip \u003d dir.getINodesInPath(src, true);\n+        iip \u003d fsn.dir.getINodesInPath(src, true);\n         inode \u003d iip.getLastINode();\n       } else {\n-        inode \u003d dir.getInode(fileId);\n+        inode \u003d fsn.dir.getInode(fileId);\n         iip \u003d INodesInPath.fromINode(inode);\n         if (inode !\u003d null) {\n           src \u003d iip.getPath();\n         }\n       }\n-      pendingFile \u003d checkLease(src, holder, inode, fileId);\n+      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n-    if (!checkFileProgress(src, pendingFile, false)) {\n+    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n-    commitOrCompleteLastBlock(pendingFile, iip, last);\n+    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n \n-    if (!checkFileProgress(src, pendingFile, true)) {\n+    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n-    finalizeINodeFileUnderConstruction(src, pendingFile,\n+    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean completeFileInternal(\n      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n      throws IOException {\n    assert fsn.hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d fsn.dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d fsn.dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
            "oldMethodName": "completeFileInternal",
            "newMethodName": "completeFileInternal"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8394. Move getAdditionalBlock() and related functionalities into a separate class. Contributed by Haohui Mai.\n",
          "commitDate": "15/05/15 7:09 PM",
          "commitName": "e5afac5896a1a88e152746598527d91f73cbb724",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/05/15 4:14 PM",
          "commitNameOld": "8f378733423a5244461df79a92c00239514b8b93",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,59 @@\n-  private boolean completeFileInternal(String src, String holder, Block last,\n-      long fileId) throws IOException {\n-    assert hasWriteLock();\n+  private static boolean completeFileInternal(\n+      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n+      throws IOException {\n+    assert fsn.hasWriteLock();\n     final INodeFile pendingFile;\n     final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n       if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n-        iip \u003d dir.getINodesInPath(src, true);\n+        iip \u003d fsn.dir.getINodesInPath(src, true);\n         inode \u003d iip.getLastINode();\n       } else {\n-        inode \u003d dir.getInode(fileId);\n+        inode \u003d fsn.dir.getInode(fileId);\n         iip \u003d INodesInPath.fromINode(inode);\n         if (inode !\u003d null) {\n           src \u003d iip.getPath();\n         }\n       }\n-      pendingFile \u003d checkLease(src, holder, inode, fileId);\n+      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n-    if (!checkFileProgress(src, pendingFile, false)) {\n+    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n-    commitOrCompleteLastBlock(pendingFile, iip, last);\n+    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n \n-    if (!checkFileProgress(src, pendingFile, true)) {\n+    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n-    finalizeINodeFileUnderConstruction(src, pendingFile,\n+    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean completeFileInternal(\n      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n      throws IOException {\n    assert fsn.hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d fsn.dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d fsn.dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8394. Move getAdditionalBlock() and related functionalities into a separate class. Contributed by Haohui Mai.\n",
          "commitDate": "15/05/15 7:09 PM",
          "commitName": "e5afac5896a1a88e152746598527d91f73cbb724",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/05/15 4:14 PM",
          "commitNameOld": "8f378733423a5244461df79a92c00239514b8b93",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,59 @@\n-  private boolean completeFileInternal(String src, String holder, Block last,\n-      long fileId) throws IOException {\n-    assert hasWriteLock();\n+  private static boolean completeFileInternal(\n+      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n+      throws IOException {\n+    assert fsn.hasWriteLock();\n     final INodeFile pendingFile;\n     final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n       if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n-        iip \u003d dir.getINodesInPath(src, true);\n+        iip \u003d fsn.dir.getINodesInPath(src, true);\n         inode \u003d iip.getLastINode();\n       } else {\n-        inode \u003d dir.getInode(fileId);\n+        inode \u003d fsn.dir.getInode(fileId);\n         iip \u003d INodesInPath.fromINode(inode);\n         if (inode !\u003d null) {\n           src \u003d iip.getPath();\n         }\n       }\n-      pendingFile \u003d checkLease(src, holder, inode, fileId);\n+      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n-    if (!checkFileProgress(src, pendingFile, false)) {\n+    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n-    commitOrCompleteLastBlock(pendingFile, iip, last);\n+    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n \n-    if (!checkFileProgress(src, pendingFile, true)) {\n+    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n-    finalizeINodeFileUnderConstruction(src, pendingFile,\n+    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean completeFileInternal(\n      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n      throws IOException {\n    assert fsn.hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d fsn.dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d fsn.dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8394. Move getAdditionalBlock() and related functionalities into a separate class. Contributed by Haohui Mai.\n",
          "commitDate": "15/05/15 7:09 PM",
          "commitName": "e5afac5896a1a88e152746598527d91f73cbb724",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "15/05/15 4:14 PM",
          "commitNameOld": "8f378733423a5244461df79a92c00239514b8b93",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,59 @@\n-  private boolean completeFileInternal(String src, String holder, Block last,\n-      long fileId) throws IOException {\n-    assert hasWriteLock();\n+  private static boolean completeFileInternal(\n+      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n+      throws IOException {\n+    assert fsn.hasWriteLock();\n     final INodeFile pendingFile;\n     final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n       if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n-        iip \u003d dir.getINodesInPath(src, true);\n+        iip \u003d fsn.dir.getINodesInPath(src, true);\n         inode \u003d iip.getLastINode();\n       } else {\n-        inode \u003d dir.getInode(fileId);\n+        inode \u003d fsn.dir.getInode(fileId);\n         iip \u003d INodesInPath.fromINode(inode);\n         if (inode !\u003d null) {\n           src \u003d iip.getPath();\n         }\n       }\n-      pendingFile \u003d checkLease(src, holder, inode, fileId);\n+      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n-    if (!checkFileProgress(src, pendingFile, false)) {\n+    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n-    commitOrCompleteLastBlock(pendingFile, iip, last);\n+    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n \n-    if (!checkFileProgress(src, pendingFile, true)) {\n+    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n-    finalizeINodeFileUnderConstruction(src, pendingFile,\n+    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean completeFileInternal(\n      FSNamesystem fsn, String src, String holder, Block last, long fileId)\n      throws IOException {\n    assert fsn.hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d fsn.dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d fsn.dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d fsn.checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!fsn.checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    fsn.commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!fsn.checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    fsn.finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[src-String, holder-String, last-Block, fileId-long]",
            "newValue": "[fsn-FSNamesystem, src-String, holder-String, last-Block, fileId-long]"
          }
        }
      ]
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "01/05/15 4:42 PM",
      "commitNameOld": "6f541edce0ed64bf316276715c4bc07794ff20ac",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private boolean completeFileInternal(String src, String holder, Block last,\n       long fileId) throws IOException {\n     assert hasWriteLock();\n     final INodeFile pendingFile;\n     final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n-      if (fileId \u003d\u003d HdfsConstantsClient.GRANDFATHER_INODE_ID) {\n+      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n         iip \u003d dir.getINodesInPath(src, true);\n         inode \u003d iip.getLastINode();\n       } else {\n         inode \u003d dir.getInode(fileId);\n         iip \u003d INodesInPath.fromINode(inode);\n         if (inode !\u003d null) {\n           src \u003d iip.getPath();\n         }\n       }\n       pendingFile \u003d checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, iip, last);\n \n     if (!checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, String holder, Block last,\n      long fileId) throws IOException {\n    assert hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d HdfsConstants.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "76e7264e8d6407f527bd877009aca11f7bb63bd7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8165. Move GRANDFATHER_GENERATION_STAMP and GRANDFATER_INODE_ID to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "16/04/15 10:49 PM",
      "commitName": "76e7264e8d6407f527bd877009aca11f7bb63bd7",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "14/04/15 3:05 PM",
      "commitNameOld": "fddd55279d0bdd08b3b40aba6fe2ded1d2e0d846",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.32,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private boolean completeFileInternal(String src, String holder, Block last,\n       long fileId) throws IOException {\n     assert hasWriteLock();\n     final INodeFile pendingFile;\n     final INodesInPath iip;\n     INode inode \u003d null;\n     try {\n-      if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n+      if (fileId \u003d\u003d HdfsConstantsClient.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n         iip \u003d dir.getINodesInPath(src, true);\n         inode \u003d iip.getLastINode();\n       } else {\n         inode \u003d dir.getInode(fileId);\n         iip \u003d INodesInPath.fromINode(inode);\n         if (inode !\u003d null) {\n           src \u003d iip.getPath();\n         }\n       }\n       pendingFile \u003d checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n           !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, iip, last);\n \n     if (!checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, String holder, Block last,\n      long fileId) throws IOException {\n    assert hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d HdfsConstantsClient.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
          "commitDate": "12/12/14 3:13 PM",
          "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "12/12/14 11:51 AM",
          "commitNameOld": "46612c7a5135d20b20403780b47dd00654aab057",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,58 @@\n-  private boolean completeFileInternal(String src, \n-      String holder, Block last, long fileId) throws SafeModeException,\n-      UnresolvedLinkException, IOException {\n+  private boolean completeFileInternal(String src, String holder, Block last,\n+      long fileId) throws IOException {\n     assert hasWriteLock();\n     final INodeFile pendingFile;\n+    final INodesInPath iip;\n+    INode inode \u003d null;\n     try {\n-      final INode inode;\n       if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n-        final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n-        inode \u003d iip.getINode(0);\n+        iip \u003d dir.getINodesInPath(src, true);\n+        inode \u003d iip.getLastINode();\n       } else {\n         inode \u003d dir.getInode(fileId);\n-        if (inode !\u003d null) src \u003d inode.getFullPathName();\n+        iip \u003d INodesInPath.fromINode(inode);\n+        if (inode !\u003d null) {\n+          src \u003d iip.getPath();\n+        }\n       }\n       pendingFile \u003d checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n-      final INode inode \u003d dir.getINode(src);\n-      if (inode !\u003d null\n-          \u0026\u0026 inode.isFile()\n-          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n+      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n+          !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n-    commitOrCompleteLastBlock(pendingFile, last);\n+    commitOrCompleteLastBlock(pendingFile, iip, last);\n \n     if (!checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean completeFileInternal(String src, String holder, Block last,\n      long fileId) throws IOException {\n    assert hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[SafeModeException, UnresolvedLinkException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
          "commitDate": "12/12/14 3:13 PM",
          "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "12/12/14 11:51 AM",
          "commitNameOld": "46612c7a5135d20b20403780b47dd00654aab057",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,58 @@\n-  private boolean completeFileInternal(String src, \n-      String holder, Block last, long fileId) throws SafeModeException,\n-      UnresolvedLinkException, IOException {\n+  private boolean completeFileInternal(String src, String holder, Block last,\n+      long fileId) throws IOException {\n     assert hasWriteLock();\n     final INodeFile pendingFile;\n+    final INodesInPath iip;\n+    INode inode \u003d null;\n     try {\n-      final INode inode;\n       if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n-        final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n-        inode \u003d iip.getINode(0);\n+        iip \u003d dir.getINodesInPath(src, true);\n+        inode \u003d iip.getLastINode();\n       } else {\n         inode \u003d dir.getInode(fileId);\n-        if (inode !\u003d null) src \u003d inode.getFullPathName();\n+        iip \u003d INodesInPath.fromINode(inode);\n+        if (inode !\u003d null) {\n+          src \u003d iip.getPath();\n+        }\n       }\n       pendingFile \u003d checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n-      final INode inode \u003d dir.getINode(src);\n-      if (inode !\u003d null\n-          \u0026\u0026 inode.isFile()\n-          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n+      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n+          !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n-    commitOrCompleteLastBlock(pendingFile, last);\n+    commitOrCompleteLastBlock(pendingFile, iip, last);\n \n     if (!checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean completeFileInternal(String src, String holder, Block last,\n      long fileId) throws IOException {\n    assert hasWriteLock();\n    final INodeFile pendingFile;\n    final INodesInPath iip;\n    INode inode \u003d null;\n    try {\n      if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        iip \u003d dir.getINodesInPath(src, true);\n        inode \u003d iip.getLastINode();\n      } else {\n        inode \u003d dir.getInode(fileId);\n        iip \u003d INodesInPath.fromINode(inode);\n        if (inode !\u003d null) {\n          src \u003d iip.getPath();\n        }\n      }\n      pendingFile \u003d checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      if (inode !\u003d null \u0026\u0026 inode.isFile() \u0026\u0026\n          !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, iip, last);\n\n    if (!checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "18312804e9c86c0ea6a259e288994fea6fa366ef": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7357. FSNamesystem.checkFileProgress should log file path. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "05/11/14 10:14 AM",
      "commitName": "18312804e9c86c0ea6a259e288994fea6fa366ef",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/11/14 9:32 AM",
      "commitNameOld": "6e8722e49c29a19dd13e161001d2464bb1f22189",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last, long fileId) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     final INodeFile pendingFile;\n     try {\n       final INode inode;\n       if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n         // Older clients may not have given us an inode ID to work with.\n         // In this case, we have to try to resolve the path and hope it\n         // hasn\u0027t changed or been deleted since the file was opened for write.\n         final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n         inode \u003d iip.getINode(0);\n       } else {\n         inode \u003d dir.getInode(fileId);\n         if (inode !\u003d null) src \u003d inode.getFullPathName();\n       }\n       pendingFile \u003d checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null\n           \u0026\u0026 inode.isFile()\n           \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete inode \" + fileId +\n               \"(\" + src + \") which is already closed. But, it appears to be \" +\n               \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n-    if (!checkFileProgress(pendingFile, false)) {\n+    if (!checkFileProgress(src, pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n-    if (!checkFileProgress(pendingFile, true)) {\n+    if (!checkFileProgress(src, pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last, long fileId) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    final INodeFile pendingFile;\n    try {\n      final INode inode;\n      if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n        inode \u003d iip.getINode(0);\n      } else {\n        inode \u003d dir.getInode(fileId);\n        if (inode !\u003d null) src \u003d inode.getFullPathName();\n      }\n      pendingFile \u003d checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!checkFileProgress(src, pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(src, pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6294. Use INode IDs to avoid conflicts when a file open for write is renamed (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593634 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/14 3:36 PM",
      "commitName": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "30/04/14 10:44 AM",
      "commitNameOld": "0689363343a281a6f7f6f395227668bddc2663eb",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 9.2,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,57 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last, long fileId) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n-    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n     final INodeFile pendingFile;\n     try {\n-      pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n+      final INode inode;\n+      if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n+        // Older clients may not have given us an inode ID to work with.\n+        // In this case, we have to try to resolve the path and hope it\n+        // hasn\u0027t changed or been deleted since the file was opened for write.\n+        final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n+        inode \u003d iip.getINode(0);\n+      } else {\n+        inode \u003d dir.getInode(fileId);\n+        if (inode !\u003d null) src \u003d inode.getFullPathName();\n+      }\n+      pendingFile \u003d checkLease(src, holder, inode, fileId);\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null\n           \u0026\u0026 inode.isFile()\n           \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n-              \"request from \" + holder + \" to complete \" + src +\n-              \" which is already closed. But, it appears to be an RPC \" +\n-              \"retry. Returning success\");\n+              \"request from \" + holder + \" to complete inode \" + fileId +\n+              \"(\" + src + \") which is already closed. But, it appears to be \" +\n+              \"an RPC retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!checkFileProgress(pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n-        iip.getLatestSnapshotId());\n+        Snapshot.CURRENT_STATE_ID);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last, long fileId) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    final INodeFile pendingFile;\n    try {\n      final INode inode;\n      if (fileId \u003d\u003d INodeId.GRANDFATHER_INODE_ID) {\n        // Older clients may not have given us an inode ID to work with.\n        // In this case, we have to try to resolve the path and hope it\n        // hasn\u0027t changed or been deleted since the file was opened for write.\n        final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n        inode \u003d iip.getINode(0);\n      } else {\n        inode \u003d dir.getInode(fileId);\n        if (inode !\u003d null) src \u003d inode.getFullPathName();\n      }\n      pendingFile \u003d checkLease(src, holder, inode, fileId);\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete inode \" + fileId +\n              \"(\" + src + \") which is already closed. But, it appears to be \" +\n              \"an RPC retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!checkFileProgress(pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        Snapshot.CURRENT_STATE_ID);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/01/14 6:45 PM",
      "commitNameOld": "d85c017d0488930d806f267141057fc73e68c728",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.75,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last, long fileId) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n     final INodeFile pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null\n           \u0026\u0026 inode.isFile()\n           \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // Check the state of the penultimate block. It should be completed\n     // before attempting to complete the last one.\n     if (!checkFileProgress(pendingFile, false)) {\n       return false;\n     }\n \n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n-        iip.getLatestSnapshot());\n+        iip.getLatestSnapshotId());\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last, long fileId) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n    final INodeFile pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!checkFileProgress(pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshotId());\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "7af12ab207cf6e5e63ccb359e928db7fe2350585": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5558. LeaseManager monitor thread can crash if the last block is complete but another block is not. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547393 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/12/13 6:12 AM",
      "commitName": "7af12ab207cf6e5e63ccb359e928db7fe2350585",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/11/13 9:55 AM",
      "commitNameOld": "13edb391d06c479720202eb5ac81f1c71fe64748",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 5.85,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,47 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last, long fileId) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n     final INodeFile pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null\n           \u0026\u0026 inode.isFile()\n           \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n+    // Check the state of the penultimate block. It should be completed\n+    // before attempting to complete the last one.\n+    if (!checkFileProgress(pendingFile, false)) {\n+      return false;\n+    }\n+\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         iip.getLatestSnapshot());\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last, long fileId) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n    final INodeFile pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // Check the state of the penultimate block. It should be completed\n    // before attempting to complete the last one.\n    if (!checkFileProgress(pendingFile, false)) {\n      return false;\n    }\n\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshot());\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 5:39 PM",
      "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "21/11/13 9:12 AM",
      "commitNameOld": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.35,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last, long fileId) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n-    final INodeFileUnderConstruction pendingFile;\n+    final INodeFile pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null\n           \u0026\u0026 inode.isFile()\n           \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         iip.getLatestSnapshot());\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last, long fileId) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n    final INodeFile pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshot());\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "92cbba386ff6e8daafc813a07aa30dbbe9825b1d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4883. complete() should verify fileId. Contributed by Tao Luo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495302 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 12:28 AM",
      "commitName": "92cbba386ff6e8daafc813a07aa30dbbe9825b1d",
      "commitAuthor": "Konstantin Shvachko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4883. complete() should verify fileId. Contributed by Tao Luo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495302 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/13 12:28 AM",
          "commitName": "92cbba386ff6e8daafc813a07aa30dbbe9825b1d",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "19/06/13 10:10 PM",
          "commitNameOld": "c02953dbc344b39e0eb0d13fe2d899cdcdc46380",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,41 @@\n   private boolean completeFileInternal(String src, \n-      String holder, Block last) throws SafeModeException,\n+      String holder, Block last, long fileId) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n     final INodeFileUnderConstruction pendingFile;\n     try {\n-      pendingFile \u003d checkLease(src, INodeId.GRANDFATHER_INODE_ID,\n-          holder, iip.getINode(0)); \n+      pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null\n           \u0026\u0026 inode.isFile()\n           \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         iip.getLatestSnapshot());\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last, long fileId) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n    final INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshot());\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[src-String, holder-String, last-Block]",
            "newValue": "[src-String, holder-String, last-Block, fileId-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4883. complete() should verify fileId. Contributed by Tao Luo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495302 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/13 12:28 AM",
          "commitName": "92cbba386ff6e8daafc813a07aa30dbbe9825b1d",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "19/06/13 10:10 PM",
          "commitNameOld": "c02953dbc344b39e0eb0d13fe2d899cdcdc46380",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,41 @@\n   private boolean completeFileInternal(String src, \n-      String holder, Block last) throws SafeModeException,\n+      String holder, Block last, long fileId) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n     final INodeFileUnderConstruction pendingFile;\n     try {\n-      pendingFile \u003d checkLease(src, INodeId.GRANDFATHER_INODE_ID,\n-          holder, iip.getINode(0)); \n+      pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null\n           \u0026\u0026 inode.isFile()\n           \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         iip.getLatestSnapshot());\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last, long fileId) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n    final INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, fileId, holder, iip.getINode(0));\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshot());\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "0b101bd7e875ee5597ddb8f0d887159076310ffa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4434. Reverting change r1470089 that merges trunk to HDFS-2802.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470194 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/04/13 9:57 AM",
      "commitName": "0b101bd7e875ee5597ddb8f0d887159076310ffa",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "19/04/13 5:02 PM",
      "commitNameOld": "9af0babe7ef9c4bc956b77aac250f8eee6c8450f",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,47 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n+    checkOperation(OperationCategory.WRITE);\n+    if (isInSafeMode()) {\n+      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n+    }\n+\n     final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n     final INodeFileUnderConstruction pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, INodeId.GRANDFATHER_INODE_ID,\n           holder, iip.getINode(0)); \n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null\n           \u0026\u0026 inode.isFile()\n           \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         iip.getLatestSnapshot());\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    checkOperation(OperationCategory.WRITE);\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n    final INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, INodeId.GRANDFATHER_INODE_ID,\n          holder, iip.getINode(0)); \n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshot());\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "980e6c54bab4ffc87e168cd5c217fef44c72a878": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4434. Provide a mapping from INodeId to INode. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 5:10 PM",
      "commitName": "980e6c54bab4ffc87e168cd5c217fef44c72a878",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "12/04/13 6:35 PM",
      "commitNameOld": "242028a3fb887708dea5ef557c0ded22e014ac7d",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 5.94,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,37 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n-    checkOperation(OperationCategory.WRITE);\n-    if (isInSafeMode()) {\n-      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n-    }\n-\n     INodeFileUnderConstruction pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, holder);\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, holder);\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "fd1000bcefa07992ff5c6fae3508f3e33b7955c6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4679. Namenode operation checks should be done in a consistent manner. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/13 3:45 PM",
      "commitName": "fd1000bcefa07992ff5c6fae3508f3e33b7955c6",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "08/04/13 6:21 PM",
      "commitNameOld": "f680865d994b8b75c11fa85f3241b1b9c6851187",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,42 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n-    if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n-          src + \" for \" + holder);\n-    }\n+    checkOperation(OperationCategory.WRITE);\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n     INodeFileUnderConstruction pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, holder);\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile);\n-\n-    NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n-        + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    checkOperation(OperationCategory.WRITE);\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, holder);\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "b1333e5b561d01a010e2e1311e8501879f377bdc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4545. With snapshots, FSDirectory.unprotectedSetReplication(..) always changes file replication but it may or may not changes block replication.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1452636 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/13 6:23 PM",
      "commitName": "b1333e5b561d01a010e2e1311e8501879f377bdc",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/02/13 2:04 PM",
      "commitNameOld": "e2a618e1cc3fb99115547af6540932860dc6766e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n           src + \" for \" + holder);\n     }\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n     final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n     final INodeFileUnderConstruction pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, INodeId.GRANDFATHER_INODE_ID,\n           holder, iip.getINode(0)); \n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n-      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n+      if (inode !\u003d null\n+          \u0026\u0026 inode.isFile()\n+          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n-        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n+        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         iip.getLatestSnapshot());\n \n     NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n         + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n    final INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, INodeId.GRANDFATHER_INODE_ID,\n          holder, iip.getINode(0)); \n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null\n          \u0026\u0026 inode.isFile()\n          \u0026\u0026 !inode.asFile().isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d inode.asFile().getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshot());\n\n    NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n        + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "2372e394dd99d69d396327d5a5e172953a8b8c6a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4189. Renames the getMutableXxx methods to getXxx4Write and fix a bug that some getExistingPathINodes calls should be getINodesInPath4Write.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441193 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/13 1:13 PM",
      "commitName": "2372e394dd99d69d396327d5a5e172953a8b8c6a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "29/01/13 1:31 PM",
      "commitNameOld": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.99,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n           src + \" for \" + holder);\n     }\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n-    final INodesInPath iip \u003d dir.getINodesInPath(src);\n+    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n     final INodeFileUnderConstruction pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, holder, iip.getINode(0)); \n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile,\n         iip.getLatestSnapshot());\n \n     NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n         + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    final INodesInPath iip \u003d dir.getLastINodeInPath(src);\n    final INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, holder, iip.getINode(0)); \n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshot());\n\n    NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n        + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4103. Support O(1) snapshot creation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/12 5:30 PM",
      "commitName": "b9f965de120b5278ac84a7e98aecb32aafde4c16",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/12/12 7:40 PM",
      "commitNameOld": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n           src + \" for \" + holder);\n     }\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n-    INodeFileUnderConstruction pendingFile;\n+    final INodesInPath iip \u003d dir.getINodesInPath(src);\n+    final INodeFileUnderConstruction pendingFile;\n     try {\n-      pendingFile \u003d checkLease(src, holder);\n+      pendingFile \u003d checkLease(src, holder, iip.getINode(0)); \n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n-    finalizeINodeFileUnderConstruction(src, pendingFile);\n+    finalizeINodeFileUnderConstruction(src, pendingFile,\n+        iip.getLatestSnapshot());\n \n     NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n         + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    final INodesInPath iip \u003d dir.getINodesInPath(src);\n    final INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, holder, iip.getINode(0)); \n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile,\n        iip.getLatestSnapshot());\n\n    NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n        + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "9821af9ce8a56a2c583f1ed938902c20e897048f": {
      "type": "Ybodychange",
      "commitMessage": "Reverting the previous merge r1416603 which committed some extra changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1416712 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/12/12 2:43 PM",
      "commitName": "9821af9ce8a56a2c583f1ed938902c20e897048f",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "03/12/12 10:04 AM",
      "commitNameOld": "d500d59cbef51f1b0b0291995893b85a139bcec9",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,48 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n           src + \" for \" + holder);\n     }\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n-    final INodesInPath inodesInPath;\n-    final INodeFileUnderConstruction pendingFile;\n+    INodeFileUnderConstruction pendingFile;\n     try {\n-      inodesInPath \u003d checkLease(src, holder);\n-      pendingFile \u003d (INodeFileUnderConstruction)inodesInPath.getINode(0); \n+      pendingFile \u003d checkLease(src, holder);\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n               \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n-    finalizeINodeFileUnderConstruction(src, pendingFile,\n-        inodesInPath.getLatestSnapshot());\n+    finalizeINodeFileUnderConstruction(src, pendingFile);\n \n     NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n         + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, holder);\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n\n    NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n        + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "26/10/12 11:08 AM",
      "commitNameOld": "0e796b61e829c4bf763caf13b0f53cb1bcefdeee",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.21,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n           src + \" for \" + holder);\n     }\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n     INodeFileUnderConstruction pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, holder);\n     } catch (LeaseExpiredException lee) {\n       final INode inode \u003d dir.getINode(src);\n       if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n         final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n-          NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: \" +\n-              \"received request from \" + holder + \" to complete file \" + src +\n+          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n+              \"request from \" + holder + \" to complete \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n-              \"retry. Returning success.\");\n+              \"retry. Returning success\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile);\n \n-    NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n-                                  + \" is closed by \" + holder);\n+    NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n+        + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, holder);\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* completeFile: \" +\n              \"request from \" + holder + \" to complete \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n\n    NameNode.stateChangeLog.info(\"DIR* completeFile: \" + src + \" is closed by \"\n        + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ba2ee1d7fb91462c861169224d250d2d90bec3a6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4107. Add utility methods for casting INode to INodeFile and INodeFileUnderConstruction.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1402265 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/12 11:44 AM",
      "commitName": "ba2ee1d7fb91462c861169224d250d2d90bec3a6",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/10/12 11:30 AM",
      "commitNameOld": "75cdb5bb4965161021df47376cccf058bf413f3b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n           src + \" for \" + holder);\n     }\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n     INodeFileUnderConstruction pendingFile;\n     try {\n       pendingFile \u003d checkLease(src, holder);\n     } catch (LeaseExpiredException lee) {\n-      INodeFile file \u003d dir.getFileINode(src);\n-      if (file !\u003d null \u0026\u0026 !file.isUnderConstruction()) {\n+      final INode inode \u003d dir.getINode(src);\n+      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n         // This could be a retry RPC - i.e the client tried to close\n         // the file, but missed the RPC response. Thus, it is trying\n         // again to close the file. If the file still exists and\n         // the client\u0027s view of the last block matches the actual\n         // last block, then we\u0027ll treat it as a successful close.\n         // See HDFS-3031.\n-        Block realLastBlock \u003d file.getLastBlock();\n+        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n         if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n           NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: \" +\n               \"received request from \" + holder + \" to complete file \" + src +\n               \" which is already closed. But, it appears to be an RPC \" +\n               \"retry. Returning success.\");\n           return true;\n         }\n       }\n       throw lee;\n     }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile);\n \n     NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                   + \" is closed by \" + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, holder);\n    } catch (LeaseExpiredException lee) {\n      final INode inode \u003d dir.getINode(src);\n      if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile \u0026\u0026 !inode.isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        final Block realLastBlock \u003d ((INodeFile)inode).getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: \" +\n              \"received request from \" + holder + \" to complete file \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success.\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n\n    NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                  + \" is closed by \" + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "bcdb125643d4ec834f6bd5d4fafb079391f31fc6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3031. Fix complete() and getAdditionalBlock() RPCs to be idempotent. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1338466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/05/12 3:35 PM",
      "commitName": "bcdb125643d4ec834f6bd5d4fafb079391f31fc6",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "12/05/12 8:33 PM",
      "commitNameOld": "f1560d379d314e0702e878a0ea5fcf2e99884c7c",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 1.79,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,48 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n           src + \" for \" + holder);\n     }\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n-    INodeFileUnderConstruction pendingFile \u003d checkLease(src, holder);\n+    INodeFileUnderConstruction pendingFile;\n+    try {\n+      pendingFile \u003d checkLease(src, holder);\n+    } catch (LeaseExpiredException lee) {\n+      INodeFile file \u003d dir.getFileINode(src);\n+      if (file !\u003d null \u0026\u0026 !file.isUnderConstruction()) {\n+        // This could be a retry RPC - i.e the client tried to close\n+        // the file, but missed the RPC response. Thus, it is trying\n+        // again to close the file. If the file still exists and\n+        // the client\u0027s view of the last block matches the actual\n+        // last block, then we\u0027ll treat it as a successful close.\n+        // See HDFS-3031.\n+        Block realLastBlock \u003d file.getLastBlock();\n+        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n+          NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: \" +\n+              \"received request from \" + holder + \" to complete file \" + src +\n+              \" which is already closed. But, it appears to be an RPC \" +\n+              \"retry. Returning success.\");\n+          return true;\n+        }\n+      }\n+      throw lee;\n+    }\n     // commit the last block and complete it if it has minimum replicas\n     commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile);\n \n     NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                   + \" is closed by \" + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile;\n    try {\n      pendingFile \u003d checkLease(src, holder);\n    } catch (LeaseExpiredException lee) {\n      INodeFile file \u003d dir.getFileINode(src);\n      if (file !\u003d null \u0026\u0026 !file.isUnderConstruction()) {\n        // This could be a retry RPC - i.e the client tried to close\n        // the file, but missed the RPC response. Thus, it is trying\n        // again to close the file. If the file still exists and\n        // the client\u0027s view of the last block matches the actual\n        // last block, then we\u0027ll treat it as a successful close.\n        // See HDFS-3031.\n        Block realLastBlock \u003d file.getLastBlock();\n        if (Block.matchingIdAndGenStamp(last, realLastBlock)) {\n          NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: \" +\n              \"received request from \" + holder + \" to complete file \" + src +\n              \" which is already closed. But, it appears to be an RPC \" +\n              \"retry. Returning success.\");\n          return true;\n        }\n      }\n      throw lee;\n    }\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n\n    NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                  + \" is closed by \" + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile \u003d checkLease(src, holder);\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n\n    NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                  + \" is closed by \" + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
      }
    },
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2266.  Add Namesystem and SafeMode interfaces to avoid directly referring to FSNamesystem in BlockManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160493 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 4:14 PM",
      "commitName": "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "19/08/11 10:36 AM",
      "commitNameOld": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 3.23,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private boolean completeFileInternal(String src, \n       String holder, Block last) throws SafeModeException,\n       UnresolvedLinkException, IOException {\n     assert hasWriteLock();\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n           src + \" for \" + holder);\n     }\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n     }\n \n     INodeFileUnderConstruction pendingFile \u003d checkLease(src, holder);\n     // commit the last block and complete it if it has minimum replicas\n-    blockManager.commitOrCompleteLastBlock(pendingFile, last);\n+    commitOrCompleteLastBlock(pendingFile, last);\n \n     if (!checkFileProgress(pendingFile, true)) {\n       return false;\n     }\n \n     finalizeINodeFileUnderConstruction(src, pendingFile);\n \n     NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                   + \" is closed by \" + holder);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile \u003d checkLease(src, holder);\n    // commit the last block and complete it if it has minimum replicas\n    commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n\n    NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                  + \" is closed by \" + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile \u003d checkLease(src, holder);\n    // commit the last block and complete it if it has minimum replicas\n    blockManager.commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n\n    NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                  + \" is closed by \" + holder);\n    return true;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,26 @@\n+  private boolean completeFileInternal(String src, \n+      String holder, Block last) throws SafeModeException,\n+      UnresolvedLinkException, IOException {\n+    assert hasWriteLock();\n+    if (NameNode.stateChangeLog.isDebugEnabled()) {\n+      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n+          src + \" for \" + holder);\n+    }\n+    if (isInSafeMode()) {\n+      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n+    }\n+\n+    INodeFileUnderConstruction pendingFile \u003d checkLease(src, holder);\n+    // commit the last block and complete it if it has minimum replicas\n+    blockManager.commitOrCompleteLastBlock(pendingFile, last);\n+\n+    if (!checkFileProgress(pendingFile, true)) {\n+      return false;\n+    }\n+\n+    finalizeINodeFileUnderConstruction(src, pendingFile);\n+\n+    NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n+                                  + \" is closed by \" + holder);\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean completeFileInternal(String src, \n      String holder, Block last) throws SafeModeException,\n      UnresolvedLinkException, IOException {\n    assert hasWriteLock();\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.completeFile: \" +\n          src + \" for \" + holder);\n    }\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot complete file \" + src, safeMode);\n    }\n\n    INodeFileUnderConstruction pendingFile \u003d checkLease(src, holder);\n    // commit the last block and complete it if it has minimum replicas\n    blockManager.commitOrCompleteLastBlock(pendingFile, last);\n\n    if (!checkFileProgress(pendingFile, true)) {\n      return false;\n    }\n\n    finalizeINodeFileUnderConstruction(src, pendingFile);\n\n    NameNode.stateChangeLog.info(\"DIR* NameSystem.completeFile: file \" + src\n                                  + \" is closed by \" + holder);\n    return true;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}