{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "loadBlockPoolSliceStorage",
  "functionId": "loadBlockPoolSliceStorage___datanode-DataNode__nsInfo-NamespaceInfo__dataDirs-Collection__StorageLocation____startOpt-StartupOption__executor-ExecutorService",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 445,
  "functionEndLine": 496,
  "numCommitsSeen": 126,
  "timeTaken": 4616,
  "changeHistory": [
    "4cb22cd867a9295efc815dc95525b5c3e5960ea6",
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "f209e93566b159c22054dcb276e45f23a2b7b7d1",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f"
  ],
  "changeHistoryShort": {
    "4cb22cd867a9295efc815dc95525b5c3e5960ea6": "Ybodychange",
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "f209e93566b159c22054dcb276e45f23a2b7b7d1": "Ybodychange",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": "Ybodychange",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4cb22cd867a9295efc815dc95525b5c3e5960ea6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14311. Multi-threading conflict at layoutVersion when loading block pool storage. Contributed by Yicong Cai.\n",
      "commitDate": "20/08/19 10:37 AM",
      "commitName": "4cb22cd867a9295efc815dc95525b5c3e5960ea6",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "30/10/18 10:43 PM",
      "commitNameOld": "fac9f91b2944cee641049fffcafa6b65e0cf68f2",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 293.5,
      "commitsBetweenForRepo": 2147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,52 @@\n   private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt, ExecutorService executor) throws IOException {\n     final String bpid \u003d nsInfo.getBlockPoolID();\n     final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n+    Map\u003cStorageLocation, List\u003cCallable\u003cStorageDirectory\u003e\u003e\u003e upgradeCallableMap \u003d\n+        new HashMap\u003c\u003e();\n     final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n     final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       dataDir.makeBlockPoolDir(bpid, null);\n       try {\n-        final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n+        final List\u003cCallable\u003cStorageDirectory\u003e\u003e sdCallables \u003d\n+            Lists.newArrayList();\n         final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n-            nsInfo, dataDir, startOpt, callables, datanode.getConf());\n-        if (callables.isEmpty()) {\n+            nsInfo, dataDir, startOpt, sdCallables, datanode.getConf());\n+        if (sdCallables.isEmpty()) {\n           for(StorageDirectory sd : dirs) {\n             success.add(sd);\n           }\n         } else {\n-          for(Callable\u003cStorageDirectory\u003e c : callables) {\n-            tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n-          }\n+          upgradeCallableMap.put(dataDir, sdCallables);\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Failed to add storage directory {} for block pool {}\",\n             dataDir, bpid, e);\n       }\n     }\n \n+    for (Map.Entry\u003cStorageLocation, List\u003cCallable\u003cStorageDirectory\u003e\u003e\u003e entry :\n+        upgradeCallableMap.entrySet()) {\n+      for(Callable\u003cStorageDirectory\u003e c : entry.getValue()) {\n+        tasks.add(new UpgradeTask(entry.getKey(), executor.submit(c)));\n+      }\n+    }\n+\n     if (!tasks.isEmpty()) {\n       LOG.info(\"loadBlockPoolSliceStorage: {} upgrade tasks\", tasks.size());\n       for(UpgradeTask t : tasks) {\n         try {\n           success.add(t.future.get());\n         } catch (ExecutionException e) {\n           LOG.warn(\"Failed to upgrade storage directory {} for block pool {}\",\n               t.dataDir, bpid, e);\n         } catch (InterruptedException e) {\n           throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n         }\n       }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final String bpid \u003d nsInfo.getBlockPoolID();\n    final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    Map\u003cStorageLocation, List\u003cCallable\u003cStorageDirectory\u003e\u003e\u003e upgradeCallableMap \u003d\n        new HashMap\u003c\u003e();\n    final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      dataDir.makeBlockPoolDir(bpid, null);\n      try {\n        final List\u003cCallable\u003cStorageDirectory\u003e\u003e sdCallables \u003d\n            Lists.newArrayList();\n        final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n            nsInfo, dataDir, startOpt, sdCallables, datanode.getConf());\n        if (sdCallables.isEmpty()) {\n          for(StorageDirectory sd : dirs) {\n            success.add(sd);\n          }\n        } else {\n          upgradeCallableMap.put(dataDir, sdCallables);\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Failed to add storage directory {} for block pool {}\",\n            dataDir, bpid, e);\n      }\n    }\n\n    for (Map.Entry\u003cStorageLocation, List\u003cCallable\u003cStorageDirectory\u003e\u003e\u003e entry :\n        upgradeCallableMap.entrySet()) {\n      for(Callable\u003cStorageDirectory\u003e c : entry.getValue()) {\n        tasks.add(new UpgradeTask(entry.getKey(), executor.submit(c)));\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadBlockPoolSliceStorage: {} upgrade tasks\", tasks.size());\n      for(UpgradeTask t : tasks) {\n        try {\n          success.add(t.future.get());\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory {} for block pool {}\",\n              t.dataDir, bpid, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt, ExecutorService executor) throws IOException {\n     final String bpid \u003d nsInfo.getBlockPoolID();\n     final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n     final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       dataDir.makeBlockPoolDir(bpid, null);\n       try {\n         final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n         final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n             nsInfo, dataDir, startOpt, callables, datanode.getConf());\n         if (callables.isEmpty()) {\n           for(StorageDirectory sd : dirs) {\n             success.add(sd);\n           }\n         } else {\n           for(Callable\u003cStorageDirectory\u003e c : callables) {\n             tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n           }\n         }\n       } catch (IOException e) {\n-        LOG.warn(\"Failed to add storage directory \" + dataDir\n-            + \" for block pool \" + bpid, e);\n+        LOG.warn(\"Failed to add storage directory {} for block pool {}\",\n+            dataDir, bpid, e);\n       }\n     }\n \n     if (!tasks.isEmpty()) {\n-      LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n+      LOG.info(\"loadBlockPoolSliceStorage: {} upgrade tasks\", tasks.size());\n       for(UpgradeTask t : tasks) {\n         try {\n           success.add(t.future.get());\n         } catch (ExecutionException e) {\n-          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n-              + \" for block pool \" + bpid, e);\n+          LOG.warn(\"Failed to upgrade storage directory {} for block pool {}\",\n+              t.dataDir, bpid, e);\n         } catch (InterruptedException e) {\n           throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n         }\n       }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final String bpid \u003d nsInfo.getBlockPoolID();\n    final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      dataDir.makeBlockPoolDir(bpid, null);\n      try {\n        final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n        final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n            nsInfo, dataDir, startOpt, callables, datanode.getConf());\n        if (callables.isEmpty()) {\n          for(StorageDirectory sd : dirs) {\n            success.add(sd);\n          }\n        } else {\n          for(Callable\u003cStorageDirectory\u003e c : callables) {\n            tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Failed to add storage directory {} for block pool {}\",\n            dataDir, bpid, e);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadBlockPoolSliceStorage: {} upgrade tasks\", tasks.size());\n      for(UpgradeTask t : tasks) {\n        try {\n          success.add(t.future.get());\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory {} for block pool {}\",\n              t.dataDir, bpid, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "f209e93566b159c22054dcb276e45f23a2b7b7d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10638. Modifications to remove the assumption that StorageLocation is associated with java.io.File in Datanode. (Virajith Jalaparti via lei)\n",
      "commitDate": "26/10/16 10:32 AM",
      "commitName": "f209e93566b159c22054dcb276e45f23a2b7b7d1",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "10/10/16 3:30 PM",
      "commitNameOld": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 15.79,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,44 @@\n   private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt, ExecutorService executor) throws IOException {\n     final String bpid \u003d nsInfo.getBlockPoolID();\n     final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n     final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n-      final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n-      List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n-      bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n+      dataDir.makeBlockPoolDir(bpid, null);\n       try {\n-        makeBlockPoolDataDir(bpDataDirs, null);\n-\n         final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n         final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n-            nsInfo, bpDataDirs, dataDir, startOpt,\n-            callables, datanode.getConf());\n+            nsInfo, dataDir, startOpt, callables, datanode.getConf());\n         if (callables.isEmpty()) {\n           for(StorageDirectory sd : dirs) {\n             success.add(sd);\n           }\n         } else {\n           for(Callable\u003cStorageDirectory\u003e c : callables) {\n             tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n           }\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Failed to add storage directory \" + dataDir\n             + \" for block pool \" + bpid, e);\n       }\n     }\n \n     if (!tasks.isEmpty()) {\n       LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n       for(UpgradeTask t : tasks) {\n         try {\n           success.add(t.future.get());\n         } catch (ExecutionException e) {\n           LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n               + \" for block pool \" + bpid, e);\n         } catch (InterruptedException e) {\n           throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n         }\n       }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final String bpid \u003d nsInfo.getBlockPoolID();\n    final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      dataDir.makeBlockPoolDir(bpid, null);\n      try {\n        final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n        final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n            nsInfo, dataDir, startOpt, callables, datanode.getConf());\n        if (callables.isEmpty()) {\n          for(StorageDirectory sd : dirs) {\n            success.add(sd);\n          }\n        } else {\n          for(Callable\u003cStorageDirectory\u003e c : callables) {\n            tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Failed to add storage directory \" + dataDir\n            + \" for block pool \" + bpid, e);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n      for(UpgradeTask t : tasks) {\n        try {\n          success.add(t.future.get());\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n              + \" for block pool \" + bpid, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "10/10/16 3:30 PM",
      "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "13/09/16 12:54 PM",
      "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 27.11,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt, ExecutorService executor) throws IOException {\n     final String bpid \u003d nsInfo.getBlockPoolID();\n     final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n     final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n       List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n       bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n       try {\n         makeBlockPoolDataDir(bpDataDirs, null);\n \n         final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n         final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n-            nsInfo, bpDataDirs, startOpt, callables, datanode.getConf());\n+            nsInfo, bpDataDirs, dataDir, startOpt,\n+            callables, datanode.getConf());\n         if (callables.isEmpty()) {\n           for(StorageDirectory sd : dirs) {\n             success.add(sd);\n           }\n         } else {\n           for(Callable\u003cStorageDirectory\u003e c : callables) {\n             tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n           }\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Failed to add storage directory \" + dataDir\n             + \" for block pool \" + bpid, e);\n       }\n     }\n \n     if (!tasks.isEmpty()) {\n       LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n       for(UpgradeTask t : tasks) {\n         try {\n           success.add(t.future.get());\n         } catch (ExecutionException e) {\n           LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n               + \" for block pool \" + bpid, e);\n         } catch (InterruptedException e) {\n           throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n         }\n       }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final String bpid \u003d nsInfo.getBlockPoolID();\n    final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n      List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n      bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n      try {\n        makeBlockPoolDataDir(bpDataDirs, null);\n\n        final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n        final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n            nsInfo, bpDataDirs, dataDir, startOpt,\n            callables, datanode.getConf());\n        if (callables.isEmpty()) {\n          for(StorageDirectory sd : dirs) {\n            success.add(sd);\n          }\n        } else {\n          for(Callable\u003cStorageDirectory\u003e c : callables) {\n            tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Failed to add storage directory \" + dataDir\n            + \" for block pool \" + bpid, e);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n      for(UpgradeTask t : tasks) {\n        try {\n          success.add(t.future.get());\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n              + \" for block pool \" + bpid, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
      "commitDate": "22/02/16 3:01 PM",
      "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "04/02/16 11:19 AM",
          "commitNameOld": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 18.15,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,48 @@\n   private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n-      StartupOption startOpt) throws IOException {\n+      StartupOption startOpt, ExecutorService executor) throws IOException {\n     final String bpid \u003d nsInfo.getBlockPoolID();\n     final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n+    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n       List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n       bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n       try {\n         makeBlockPoolDataDir(bpDataDirs, null);\n \n+        final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n         final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n-            nsInfo, bpDataDirs, startOpt, datanode.getConf());\n-        for(StorageDirectory sd : dirs) {\n-          success.add(sd);\n+            nsInfo, bpDataDirs, startOpt, callables, datanode.getConf());\n+        if (callables.isEmpty()) {\n+          for(StorageDirectory sd : dirs) {\n+            success.add(sd);\n+          }\n+        } else {\n+          for(Callable\u003cStorageDirectory\u003e c : callables) {\n+            tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n+          }\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Failed to add storage directory \" + dataDir\n             + \" for block pool \" + bpid, e);\n       }\n     }\n \n+    if (!tasks.isEmpty()) {\n+      LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n+      for(UpgradeTask t : tasks) {\n+        try {\n+          success.add(t.future.get());\n+        } catch (ExecutionException e) {\n+          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n+              + \" for block pool \" + bpid, e);\n+        } catch (InterruptedException e) {\n+          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n+        }\n+      }\n+    }\n+\n     return success;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final String bpid \u003d nsInfo.getBlockPoolID();\n    final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n      List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n      bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n      try {\n        makeBlockPoolDataDir(bpDataDirs, null);\n\n        final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n        final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n            nsInfo, bpDataDirs, startOpt, callables, datanode.getConf());\n        if (callables.isEmpty()) {\n          for(StorageDirectory sd : dirs) {\n            success.add(sd);\n          }\n        } else {\n          for(Callable\u003cStorageDirectory\u003e c : callables) {\n            tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Failed to add storage directory \" + dataDir\n            + \" for block pool \" + bpid, e);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n      for(UpgradeTask t : tasks) {\n        try {\n          success.add(t.future.get());\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n              + \" for block pool \" + bpid, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, nsInfo-NamespaceInfo, dataDirs-Collection\u003cStorageLocation\u003e, startOpt-StartupOption]",
            "newValue": "[datanode-DataNode, nsInfo-NamespaceInfo, dataDirs-Collection\u003cStorageLocation\u003e, startOpt-StartupOption, executor-ExecutorService]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "04/02/16 11:19 AM",
          "commitNameOld": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 18.15,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,48 @@\n   private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n-      StartupOption startOpt) throws IOException {\n+      StartupOption startOpt, ExecutorService executor) throws IOException {\n     final String bpid \u003d nsInfo.getBlockPoolID();\n     final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n+    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n       List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n       bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n       try {\n         makeBlockPoolDataDir(bpDataDirs, null);\n \n+        final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n         final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n-            nsInfo, bpDataDirs, startOpt, datanode.getConf());\n-        for(StorageDirectory sd : dirs) {\n-          success.add(sd);\n+            nsInfo, bpDataDirs, startOpt, callables, datanode.getConf());\n+        if (callables.isEmpty()) {\n+          for(StorageDirectory sd : dirs) {\n+            success.add(sd);\n+          }\n+        } else {\n+          for(Callable\u003cStorageDirectory\u003e c : callables) {\n+            tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n+          }\n         }\n       } catch (IOException e) {\n         LOG.warn(\"Failed to add storage directory \" + dataDir\n             + \" for block pool \" + bpid, e);\n       }\n     }\n \n+    if (!tasks.isEmpty()) {\n+      LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n+      for(UpgradeTask t : tasks) {\n+        try {\n+          success.add(t.future.get());\n+        } catch (ExecutionException e) {\n+          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n+              + \" for block pool \" + bpid, e);\n+        } catch (InterruptedException e) {\n+          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n+        }\n+      }\n+    }\n+\n     return success;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final String bpid \u003d nsInfo.getBlockPoolID();\n    final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n      List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n      bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n      try {\n        makeBlockPoolDataDir(bpDataDirs, null);\n\n        final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables \u003d Lists.newArrayList();\n        final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n            nsInfo, bpDataDirs, startOpt, callables, datanode.getConf());\n        if (callables.isEmpty()) {\n          for(StorageDirectory sd : dirs) {\n            success.add(sd);\n          }\n        } else {\n          for(Callable\u003cStorageDirectory\u003e c : callables) {\n            tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Failed to add storage directory \" + dataDir\n            + \" for block pool \" + bpid, e);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadBlockPoolSliceStorage: \" + tasks.size() + \" upgrade tasks\");\n      for(UpgradeTask t : tasks) {\n        try {\n          success.add(t.future.get());\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir\n              + \" for block pool \" + bpid, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,26 @@\n+  private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n+      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n+      StartupOption startOpt) throws IOException {\n+    final String bpid \u003d nsInfo.getBlockPoolID();\n+    final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n+    final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n+    for (StorageLocation dataDir : dataDirs) {\n+      final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n+      List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n+      bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n+      try {\n+        makeBlockPoolDataDir(bpDataDirs, null);\n+\n+        final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n+            nsInfo, bpDataDirs, startOpt, datanode.getConf());\n+        for(StorageDirectory sd : dirs) {\n+          success.add(sd);\n+        }\n+      } catch (IOException e) {\n+        LOG.warn(\"Failed to add storage directory \" + dataDir\n+            + \" for block pool \" + bpid, e);\n+      }\n+    }\n+\n+    return success;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageDirectory\u003e loadBlockPoolSliceStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt) throws IOException {\n    final String bpid \u003d nsInfo.getBlockPoolID();\n    final BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    final List\u003cStorageDirectory\u003e success \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      final File curDir \u003d new File(dataDir.getFile(), STORAGE_DIR_CURRENT);\n      List\u003cFile\u003e bpDataDirs \u003d new ArrayList\u003cFile\u003e();\n      bpDataDirs.add(BlockPoolSliceStorage.getBpRoot(bpid, curDir));\n      try {\n        makeBlockPoolDataDir(bpDataDirs, null);\n\n        final List\u003cStorageDirectory\u003e dirs \u003d bpStorage.recoverTransitionRead(\n            nsInfo, bpDataDirs, startOpt, datanode.getConf());\n        for(StorageDirectory sd : dirs) {\n          success.add(sd);\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Failed to add storage directory \" + dataDir\n            + \" for block pool \" + bpid, e);\n      }\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
    }
  }
}