{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReduceContextImpl.java",
  "functionName": "nextKeyValue",
  "functionId": "nextKeyValue",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java",
  "functionStartLine": 131,
  "functionEndLine": 169,
  "numCommitsSeen": 7,
  "timeTaken": 4487,
  "changeHistory": [
    "98ecd4ffef333cb6703e922de3f1d8512cacefed",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "98ecd4ffef333cb6703e922de3f1d8512cacefed": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "98ecd4ffef333cb6703e922de3f1d8512cacefed": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5028. Fixed a bug in MapTask that was causing mappers to fail when a large value of io.sort.mb is set. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576170 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/03/14 6:29 PM",
      "commitName": "98ecd4ffef333cb6703e922de3f1d8512cacefed",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/03/13 10:56 AM",
      "commitNameOld": "c19633da5b0cc190cc64e812ee89c38f28d5a670",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 356.31,
      "commitsBetweenForRepo": 2362,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   public boolean nextKeyValue() throws IOException, InterruptedException {\n     if (!hasMore) {\n       key \u003d null;\n       value \u003d null;\n       return false;\n     }\n     firstValue \u003d !nextKeyIsSame;\n     DataInputBuffer nextKey \u003d input.getKey();\n     currentRawKey.set(nextKey.getData(), nextKey.getPosition(), \n                       nextKey.getLength() - nextKey.getPosition());\n     buffer.reset(currentRawKey.getBytes(), 0, currentRawKey.getLength());\n     key \u003d keyDeserializer.deserialize(key);\n     DataInputBuffer nextVal \u003d input.getValue();\n-    buffer.reset(nextVal.getData(), nextVal.getPosition(), nextVal.getLength());\n+    buffer.reset(nextVal.getData(), nextVal.getPosition(), nextVal.getLength()\n+        - nextVal.getPosition());\n     value \u003d valueDeserializer.deserialize(value);\n \n     currentKeyLength \u003d nextKey.getLength() - nextKey.getPosition();\n     currentValueLength \u003d nextVal.getLength() - nextVal.getPosition();\n \n     if (isMarked) {\n       backupStore.write(nextKey, nextVal);\n     }\n \n     hasMore \u003d input.next();\n     if (hasMore) {\n       nextKey \u003d input.getKey();\n       nextKeyIsSame \u003d comparator.compare(currentRawKey.getBytes(), 0, \n                                      currentRawKey.getLength(),\n                                      nextKey.getData(),\n                                      nextKey.getPosition(),\n                                      nextKey.getLength() - nextKey.getPosition()\n                                          ) \u003d\u003d 0;\n     } else {\n       nextKeyIsSame \u003d false;\n     }\n     inputValueCounter.increment(1);\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean nextKeyValue() throws IOException, InterruptedException {\n    if (!hasMore) {\n      key \u003d null;\n      value \u003d null;\n      return false;\n    }\n    firstValue \u003d !nextKeyIsSame;\n    DataInputBuffer nextKey \u003d input.getKey();\n    currentRawKey.set(nextKey.getData(), nextKey.getPosition(), \n                      nextKey.getLength() - nextKey.getPosition());\n    buffer.reset(currentRawKey.getBytes(), 0, currentRawKey.getLength());\n    key \u003d keyDeserializer.deserialize(key);\n    DataInputBuffer nextVal \u003d input.getValue();\n    buffer.reset(nextVal.getData(), nextVal.getPosition(), nextVal.getLength()\n        - nextVal.getPosition());\n    value \u003d valueDeserializer.deserialize(value);\n\n    currentKeyLength \u003d nextKey.getLength() - nextKey.getPosition();\n    currentValueLength \u003d nextVal.getLength() - nextVal.getPosition();\n\n    if (isMarked) {\n      backupStore.write(nextKey, nextVal);\n    }\n\n    hasMore \u003d input.next();\n    if (hasMore) {\n      nextKey \u003d input.getKey();\n      nextKeyIsSame \u003d comparator.compare(currentRawKey.getBytes(), 0, \n                                     currentRawKey.getLength(),\n                                     nextKey.getData(),\n                                     nextKey.getPosition(),\n                                     nextKey.getLength() - nextKey.getPosition()\n                                         ) \u003d\u003d 0;\n    } else {\n      nextKeyIsSame \u003d false;\n    }\n    inputValueCounter.increment(1);\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean nextKeyValue() throws IOException, InterruptedException {\n    if (!hasMore) {\n      key \u003d null;\n      value \u003d null;\n      return false;\n    }\n    firstValue \u003d !nextKeyIsSame;\n    DataInputBuffer nextKey \u003d input.getKey();\n    currentRawKey.set(nextKey.getData(), nextKey.getPosition(), \n                      nextKey.getLength() - nextKey.getPosition());\n    buffer.reset(currentRawKey.getBytes(), 0, currentRawKey.getLength());\n    key \u003d keyDeserializer.deserialize(key);\n    DataInputBuffer nextVal \u003d input.getValue();\n    buffer.reset(nextVal.getData(), nextVal.getPosition(), nextVal.getLength());\n    value \u003d valueDeserializer.deserialize(value);\n\n    currentKeyLength \u003d nextKey.getLength() - nextKey.getPosition();\n    currentValueLength \u003d nextVal.getLength() - nextVal.getPosition();\n\n    if (isMarked) {\n      backupStore.write(nextKey, nextVal);\n    }\n\n    hasMore \u003d input.next();\n    if (hasMore) {\n      nextKey \u003d input.getKey();\n      nextKeyIsSame \u003d comparator.compare(currentRawKey.getBytes(), 0, \n                                     currentRawKey.getLength(),\n                                     nextKey.getData(),\n                                     nextKey.getPosition(),\n                                     nextKey.getLength() - nextKey.getPosition()\n                                         ) \u003d\u003d 0;\n    } else {\n      nextKeyIsSame \u003d false;\n    }\n    inputValueCounter.increment(1);\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean nextKeyValue() throws IOException, InterruptedException {\n    if (!hasMore) {\n      key \u003d null;\n      value \u003d null;\n      return false;\n    }\n    firstValue \u003d !nextKeyIsSame;\n    DataInputBuffer nextKey \u003d input.getKey();\n    currentRawKey.set(nextKey.getData(), nextKey.getPosition(), \n                      nextKey.getLength() - nextKey.getPosition());\n    buffer.reset(currentRawKey.getBytes(), 0, currentRawKey.getLength());\n    key \u003d keyDeserializer.deserialize(key);\n    DataInputBuffer nextVal \u003d input.getValue();\n    buffer.reset(nextVal.getData(), nextVal.getPosition(), nextVal.getLength());\n    value \u003d valueDeserializer.deserialize(value);\n\n    currentKeyLength \u003d nextKey.getLength() - nextKey.getPosition();\n    currentValueLength \u003d nextVal.getLength() - nextVal.getPosition();\n\n    if (isMarked) {\n      backupStore.write(nextKey, nextVal);\n    }\n\n    hasMore \u003d input.next();\n    if (hasMore) {\n      nextKey \u003d input.getKey();\n      nextKeyIsSame \u003d comparator.compare(currentRawKey.getBytes(), 0, \n                                     currentRawKey.getLength(),\n                                     nextKey.getData(),\n                                     nextKey.getPosition(),\n                                     nextKey.getLength() - nextKey.getPosition()\n                                         ) \u003d\u003d 0;\n    } else {\n      nextKeyIsSame \u003d false;\n    }\n    inputValueCounter.increment(1);\n    return true;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,38 @@\n+  public boolean nextKeyValue() throws IOException, InterruptedException {\n+    if (!hasMore) {\n+      key \u003d null;\n+      value \u003d null;\n+      return false;\n+    }\n+    firstValue \u003d !nextKeyIsSame;\n+    DataInputBuffer nextKey \u003d input.getKey();\n+    currentRawKey.set(nextKey.getData(), nextKey.getPosition(), \n+                      nextKey.getLength() - nextKey.getPosition());\n+    buffer.reset(currentRawKey.getBytes(), 0, currentRawKey.getLength());\n+    key \u003d keyDeserializer.deserialize(key);\n+    DataInputBuffer nextVal \u003d input.getValue();\n+    buffer.reset(nextVal.getData(), nextVal.getPosition(), nextVal.getLength());\n+    value \u003d valueDeserializer.deserialize(value);\n+\n+    currentKeyLength \u003d nextKey.getLength() - nextKey.getPosition();\n+    currentValueLength \u003d nextVal.getLength() - nextVal.getPosition();\n+\n+    if (isMarked) {\n+      backupStore.write(nextKey, nextVal);\n+    }\n+\n+    hasMore \u003d input.next();\n+    if (hasMore) {\n+      nextKey \u003d input.getKey();\n+      nextKeyIsSame \u003d comparator.compare(currentRawKey.getBytes(), 0, \n+                                     currentRawKey.getLength(),\n+                                     nextKey.getData(),\n+                                     nextKey.getPosition(),\n+                                     nextKey.getLength() - nextKey.getPosition()\n+                                         ) \u003d\u003d 0;\n+    } else {\n+      nextKeyIsSame \u003d false;\n+    }\n+    inputValueCounter.increment(1);\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean nextKeyValue() throws IOException, InterruptedException {\n    if (!hasMore) {\n      key \u003d null;\n      value \u003d null;\n      return false;\n    }\n    firstValue \u003d !nextKeyIsSame;\n    DataInputBuffer nextKey \u003d input.getKey();\n    currentRawKey.set(nextKey.getData(), nextKey.getPosition(), \n                      nextKey.getLength() - nextKey.getPosition());\n    buffer.reset(currentRawKey.getBytes(), 0, currentRawKey.getLength());\n    key \u003d keyDeserializer.deserialize(key);\n    DataInputBuffer nextVal \u003d input.getValue();\n    buffer.reset(nextVal.getData(), nextVal.getPosition(), nextVal.getLength());\n    value \u003d valueDeserializer.deserialize(value);\n\n    currentKeyLength \u003d nextKey.getLength() - nextKey.getPosition();\n    currentValueLength \u003d nextVal.getLength() - nextVal.getPosition();\n\n    if (isMarked) {\n      backupStore.write(nextKey, nextVal);\n    }\n\n    hasMore \u003d input.next();\n    if (hasMore) {\n      nextKey \u003d input.getKey();\n      nextKeyIsSame \u003d comparator.compare(currentRawKey.getBytes(), 0, \n                                     currentRawKey.getLength(),\n                                     nextKey.getData(),\n                                     nextKey.getPosition(),\n                                     nextKey.getLength() - nextKey.getPosition()\n                                         ) \u003d\u003d 0;\n    } else {\n      nextKeyIsSame \u003d false;\n    }\n    inputValueCounter.increment(1);\n    return true;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/ReduceContextImpl.java"
    }
  }
}