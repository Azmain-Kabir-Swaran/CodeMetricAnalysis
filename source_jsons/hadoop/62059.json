{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConfigurationProviderFactory.java",
  "functionName": "getConfigurationProvider",
  "functionId": "getConfigurationProvider___bootstrapConf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/ConfigurationProviderFactory.java",
  "functionStartLine": 41,
  "functionEndLine": 58,
  "numCommitsSeen": 3,
  "timeTaken": 1144,
  "changeHistory": [
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "ca72e11158047f3d00db9e9e61c632e757383287"
  ],
  "changeHistoryShort": {
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ymultichange(Yparameterchange,Ybodychange)",
    "ca72e11158047f3d00db9e9e61c632e757383287": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/02/14 2:50 PM",
          "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/02/14 11:07 AM",
          "commitNameOld": "ca72e11158047f3d00db9e9e61c632e757383287",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 7.15,
          "commitsBetweenForRepo": 55,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n-      getConfigurationProvider(Configuration conf) {\n+      getConfigurationProvider(Configuration bootstrapConf) {\n     Class\u003c? extends ConfigurationProvider\u003e defaultProviderClass;\n     try {\n       defaultProviderClass \u003d (Class\u003c? extends ConfigurationProvider\u003e)\n           Class.forName(\n               YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS);\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n           \"Invalid default configuration provider class\"\n               + YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS, e);\n     }\n-    ConfigurationProvider configurationProvider \u003d ReflectionUtils.newInstance(\n-        conf.getClass(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n-            defaultProviderClass, ConfigurationProvider.class), conf);\n+    ConfigurationProvider configurationProvider \u003d\n+        ReflectionUtils.newInstance(bootstrapConf.getClass(\n+            YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n+            defaultProviderClass, ConfigurationProvider.class),\n+            bootstrapConf);\n     return configurationProvider;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      getConfigurationProvider(Configuration bootstrapConf) {\n    Class\u003c? extends ConfigurationProvider\u003e defaultProviderClass;\n    try {\n      defaultProviderClass \u003d (Class\u003c? extends ConfigurationProvider\u003e)\n          Class.forName(\n              YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n          \"Invalid default configuration provider class\"\n              + YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS, e);\n    }\n    ConfigurationProvider configurationProvider \u003d\n        ReflectionUtils.newInstance(bootstrapConf.getClass(\n            YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n            defaultProviderClass, ConfigurationProvider.class),\n            bootstrapConf);\n    return configurationProvider;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/ConfigurationProviderFactory.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[bootstrapConf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/02/14 2:50 PM",
          "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/02/14 11:07 AM",
          "commitNameOld": "ca72e11158047f3d00db9e9e61c632e757383287",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 7.15,
          "commitsBetweenForRepo": 55,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n-      getConfigurationProvider(Configuration conf) {\n+      getConfigurationProvider(Configuration bootstrapConf) {\n     Class\u003c? extends ConfigurationProvider\u003e defaultProviderClass;\n     try {\n       defaultProviderClass \u003d (Class\u003c? extends ConfigurationProvider\u003e)\n           Class.forName(\n               YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS);\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n           \"Invalid default configuration provider class\"\n               + YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS, e);\n     }\n-    ConfigurationProvider configurationProvider \u003d ReflectionUtils.newInstance(\n-        conf.getClass(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n-            defaultProviderClass, ConfigurationProvider.class), conf);\n+    ConfigurationProvider configurationProvider \u003d\n+        ReflectionUtils.newInstance(bootstrapConf.getClass(\n+            YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n+            defaultProviderClass, ConfigurationProvider.class),\n+            bootstrapConf);\n     return configurationProvider;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      getConfigurationProvider(Configuration bootstrapConf) {\n    Class\u003c? extends ConfigurationProvider\u003e defaultProviderClass;\n    try {\n      defaultProviderClass \u003d (Class\u003c? extends ConfigurationProvider\u003e)\n          Class.forName(\n              YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n          \"Invalid default configuration provider class\"\n              + YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS, e);\n    }\n    ConfigurationProvider configurationProvider \u003d\n        ReflectionUtils.newInstance(bootstrapConf.getClass(\n            YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n            defaultProviderClass, ConfigurationProvider.class),\n            bootstrapConf);\n    return configurationProvider;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/ConfigurationProviderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca72e11158047f3d00db9e9e61c632e757383287": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1611. Introduced the concept of a configuration provider which can be used by ResourceManager to read configuration locally or from remote systems so as to help RM failover. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/14 11:07 AM",
      "commitName": "ca72e11158047f3d00db9e9e61c632e757383287",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+      getConfigurationProvider(Configuration conf) {\n+    Class\u003c? extends ConfigurationProvider\u003e defaultProviderClass;\n+    try {\n+      defaultProviderClass \u003d (Class\u003c? extends ConfigurationProvider\u003e)\n+          Class.forName(\n+              YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS);\n+    } catch (Exception e) {\n+      throw new YarnRuntimeException(\n+          \"Invalid default configuration provider class\"\n+              + YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS, e);\n+    }\n+    ConfigurationProvider configurationProvider \u003d ReflectionUtils.newInstance(\n+        conf.getClass(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n+            defaultProviderClass, ConfigurationProvider.class), conf);\n+    return configurationProvider;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      getConfigurationProvider(Configuration conf) {\n    Class\u003c? extends ConfigurationProvider\u003e defaultProviderClass;\n    try {\n      defaultProviderClass \u003d (Class\u003c? extends ConfigurationProvider\u003e)\n          Class.forName(\n              YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n          \"Invalid default configuration provider class\"\n              + YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS, e);\n    }\n    ConfigurationProvider configurationProvider \u003d ReflectionUtils.newInstance(\n        conf.getClass(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n            defaultProviderClass, ConfigurationProvider.class), conf);\n    return configurationProvider;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/ConfigurationProviderFactory.java"
    }
  }
}