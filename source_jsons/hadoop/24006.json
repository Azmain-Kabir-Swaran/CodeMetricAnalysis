{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleHandler.java",
  "functionName": "verifyRequest",
  "functionId": "verifyRequest___appid-String__ctx-ChannelHandlerContext__request-HttpRequest__response-HttpResponse__requestUri-URL",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
  "functionStartLine": 1207,
  "functionEndLine": 1247,
  "numCommitsSeen": 64,
  "timeTaken": 10497,
  "changeHistory": [
    "521f34317a2f94ea7e60f3d59db335cef3358e5b",
    "11bcd2ed12f7f0e02fdaefaefea56929b32d5ee6",
    "f13da263bf02e491ef5477d7d393a2659278694a",
    "905b17876c44634545a68300ff2f2d73fb86d3b7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "521f34317a2f94ea7e60f3d59db335cef3358e5b": "Ybodychange",
    "11bcd2ed12f7f0e02fdaefaefea56929b32d5ee6": "Ybodychange",
    "f13da263bf02e491ef5477d7d393a2659278694a": "Ymodifierchange",
    "905b17876c44634545a68300ff2f2d73fb86d3b7": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "521f34317a2f94ea7e60f3d59db335cef3358e5b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12928. Update netty to 3.10.5.Final to sync with zookeeper. (lei)\n",
      "commitDate": "20/07/16 8:38 PM",
      "commitName": "521f34317a2f94ea7e60f3d59db335cef3358e5b",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "21/06/16 2:25 PM",
      "commitNameOld": "d8107fcd1c93c202925f2946d0cd4072fe0aef1e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 29.26,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n     protected void verifyRequest(String appid, ChannelHandlerContext ctx,\n         HttpRequest request, HttpResponse response, URL requestUri)\n         throws IOException {\n       SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n       if (null \u003d\u003d tokenSecret) {\n         LOG.info(\"Request for unknown token \" + appid);\n         throw new IOException(\"could not find jobid\");\n       }\n       // string to encrypt\n       String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n       // hash from the fetcher\n       String urlHashStr \u003d\n-        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n+          request.headers().get(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n       if (urlHashStr \u003d\u003d null) {\n         LOG.info(\"Missing header hash for \" + appid);\n         throw new IOException(\"fetcher cannot be authenticated\");\n       }\n       if (LOG.isDebugEnabled()) {\n         int len \u003d urlHashStr.length();\n         LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n             urlHashStr.substring(len-len/2, len-1));\n       }\n       // verify - throws exception\n       SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n       // verification passed - encode the reply\n       String reply \u003d\n         SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), \n             tokenSecret);\n-      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n+      response.headers().set(\n+          SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n       // Put shuffle version into http header\n-      response.setHeader(ShuffleHeader.HTTP_HEADER_NAME,\n+      response.headers().set(ShuffleHeader.HTTP_HEADER_NAME,\n           ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n-      response.setHeader(ShuffleHeader.HTTP_HEADER_VERSION,\n+      response.headers().set(ShuffleHeader.HTTP_HEADER_VERSION,\n           ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n       if (LOG.isDebugEnabled()) {\n         int len \u003d reply.length();\n         LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n             reply.substring(len-len/2, len-1));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void verifyRequest(String appid, ChannelHandlerContext ctx,\n        HttpRequest request, HttpResponse response, URL requestUri)\n        throws IOException {\n      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n      if (null \u003d\u003d tokenSecret) {\n        LOG.info(\"Request for unknown token \" + appid);\n        throw new IOException(\"could not find jobid\");\n      }\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n      // hash from the fetcher\n      String urlHashStr \u003d\n          request.headers().get(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if (urlHashStr \u003d\u003d null) {\n        LOG.info(\"Missing header hash for \" + appid);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      if (LOG.isDebugEnabled()) {\n        int len \u003d urlHashStr.length();\n        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n            urlHashStr.substring(len-len/2, len-1));\n      }\n      // verify - throws exception\n      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      // verification passed - encode the reply\n      String reply \u003d\n        SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), \n            tokenSecret);\n      response.headers().set(\n          SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      // Put shuffle version into http header\n      response.headers().set(ShuffleHeader.HTTP_HEADER_NAME,\n          ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n      response.headers().set(ShuffleHeader.HTTP_HEADER_VERSION,\n          ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n      if (LOG.isDebugEnabled()) {\n        int len \u003d reply.length();\n        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n            reply.substring(len-len/2, len-1));\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "11bcd2ed12f7f0e02fdaefaefea56929b32d5ee6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5326. Added version to shuffle header. Contributed by Zhijie Shen.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1496741 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/06/13 10:49 PM",
      "commitName": "11bcd2ed12f7f0e02fdaefaefea56929b32d5ee6",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "17/06/13 11:20 PM",
      "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.98,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,40 @@\n     protected void verifyRequest(String appid, ChannelHandlerContext ctx,\n         HttpRequest request, HttpResponse response, URL requestUri)\n         throws IOException {\n       SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n       if (null \u003d\u003d tokenSecret) {\n         LOG.info(\"Request for unknown token \" + appid);\n         throw new IOException(\"could not find jobid\");\n       }\n       // string to encrypt\n       String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n       // hash from the fetcher\n       String urlHashStr \u003d\n         request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n       if (urlHashStr \u003d\u003d null) {\n         LOG.info(\"Missing header hash for \" + appid);\n         throw new IOException(\"fetcher cannot be authenticated\");\n       }\n       if (LOG.isDebugEnabled()) {\n         int len \u003d urlHashStr.length();\n         LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n             urlHashStr.substring(len-len/2, len-1));\n       }\n       // verify - throws exception\n       SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n       // verification passed - encode the reply\n       String reply \u003d\n         SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), \n             tokenSecret);\n       response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n+      // Put shuffle version into http header\n+      response.setHeader(ShuffleHeader.HTTP_HEADER_NAME,\n+          ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n+      response.setHeader(ShuffleHeader.HTTP_HEADER_VERSION,\n+          ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n       if (LOG.isDebugEnabled()) {\n         int len \u003d reply.length();\n         LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n             reply.substring(len-len/2, len-1));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void verifyRequest(String appid, ChannelHandlerContext ctx,\n        HttpRequest request, HttpResponse response, URL requestUri)\n        throws IOException {\n      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n      if (null \u003d\u003d tokenSecret) {\n        LOG.info(\"Request for unknown token \" + appid);\n        throw new IOException(\"could not find jobid\");\n      }\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n      // hash from the fetcher\n      String urlHashStr \u003d\n        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if (urlHashStr \u003d\u003d null) {\n        LOG.info(\"Missing header hash for \" + appid);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      if (LOG.isDebugEnabled()) {\n        int len \u003d urlHashStr.length();\n        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n            urlHashStr.substring(len-len/2, len-1));\n      }\n      // verify - throws exception\n      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      // verification passed - encode the reply\n      String reply \u003d\n        SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), \n            tokenSecret);\n      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      // Put shuffle version into http header\n      response.setHeader(ShuffleHeader.HTTP_HEADER_NAME,\n          ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);\n      response.setHeader(ShuffleHeader.HTTP_HEADER_VERSION,\n          ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);\n      if (LOG.isDebugEnabled()) {\n        int len \u003d reply.length();\n        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n            reply.substring(len-len/2, len-1));\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "f13da263bf02e491ef5477d7d393a2659278694a": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-4801. ShuffleHandler can generate large logs due to prematurely closed channels (jlowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1410131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/11/12 4:52 PM",
      "commitName": "f13da263bf02e491ef5477d7d393a2659278694a",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "14/11/12 4:16 PM",
      "commitNameOld": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n-    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n+    protected void verifyRequest(String appid, ChannelHandlerContext ctx,\n         HttpRequest request, HttpResponse response, URL requestUri)\n         throws IOException {\n       SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n       if (null \u003d\u003d tokenSecret) {\n         LOG.info(\"Request for unknown token \" + appid);\n         throw new IOException(\"could not find jobid\");\n       }\n       // string to encrypt\n       String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n       // hash from the fetcher\n       String urlHashStr \u003d\n         request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n       if (urlHashStr \u003d\u003d null) {\n         LOG.info(\"Missing header hash for \" + appid);\n         throw new IOException(\"fetcher cannot be authenticated\");\n       }\n       if (LOG.isDebugEnabled()) {\n         int len \u003d urlHashStr.length();\n         LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n             urlHashStr.substring(len-len/2, len-1));\n       }\n       // verify - throws exception\n       SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n       // verification passed - encode the reply\n       String reply \u003d\n         SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), \n             tokenSecret);\n       response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n       if (LOG.isDebugEnabled()) {\n         int len \u003d reply.length();\n         LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n             reply.substring(len-len/2, len-1));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void verifyRequest(String appid, ChannelHandlerContext ctx,\n        HttpRequest request, HttpResponse response, URL requestUri)\n        throws IOException {\n      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n      if (null \u003d\u003d tokenSecret) {\n        LOG.info(\"Request for unknown token \" + appid);\n        throw new IOException(\"could not find jobid\");\n      }\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n      // hash from the fetcher\n      String urlHashStr \u003d\n        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if (urlHashStr \u003d\u003d null) {\n        LOG.info(\"Missing header hash for \" + appid);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      if (LOG.isDebugEnabled()) {\n        int len \u003d urlHashStr.length();\n        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n            urlHashStr.substring(len-len/2, len-1));\n      }\n      // verify - throws exception\n      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      // verification passed - encode the reply\n      String reply \u003d\n        SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), \n            tokenSecret);\n      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      if (LOG.isDebugEnabled()) {\n        int len \u003d reply.length();\n        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n            reply.substring(len-len/2, len-1));\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "905b17876c44634545a68300ff2f2d73fb86d3b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4723. Fix warnings found by findbugs 2. Contributed by Sandy Ryza\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 4:16 PM",
      "commitName": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "02/08/12 2:55 PM",
      "commitNameOld": "3eb0cb27e8c037e6b29ac57ad72b5bffa362da38",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 104.1,
      "commitsBetweenForRepo": 625,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n     private void verifyRequest(String appid, ChannelHandlerContext ctx,\n         HttpRequest request, HttpResponse response, URL requestUri)\n         throws IOException {\n       SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n       if (null \u003d\u003d tokenSecret) {\n         LOG.info(\"Request for unknown token \" + appid);\n         throw new IOException(\"could not find jobid\");\n       }\n       // string to encrypt\n       String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n       // hash from the fetcher\n       String urlHashStr \u003d\n         request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n       if (urlHashStr \u003d\u003d null) {\n         LOG.info(\"Missing header hash for \" + appid);\n         throw new IOException(\"fetcher cannot be authenticated\");\n       }\n       if (LOG.isDebugEnabled()) {\n         int len \u003d urlHashStr.length();\n         LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n             urlHashStr.substring(len-len/2, len-1));\n       }\n       // verify - throws exception\n       SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n       // verification passed - encode the reply\n       String reply \u003d\n-        SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n+        SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), \n+            tokenSecret);\n       response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n       if (LOG.isDebugEnabled()) {\n         int len \u003d reply.length();\n         LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n             reply.substring(len-len/2, len-1));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n        HttpRequest request, HttpResponse response, URL requestUri)\n        throws IOException {\n      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n      if (null \u003d\u003d tokenSecret) {\n        LOG.info(\"Request for unknown token \" + appid);\n        throw new IOException(\"could not find jobid\");\n      }\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n      // hash from the fetcher\n      String urlHashStr \u003d\n        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if (urlHashStr \u003d\u003d null) {\n        LOG.info(\"Missing header hash for \" + appid);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      if (LOG.isDebugEnabled()) {\n        int len \u003d urlHashStr.length();\n        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n            urlHashStr.substring(len-len/2, len-1));\n      }\n      // verify - throws exception\n      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      // verification passed - encode the reply\n      String reply \u003d\n        SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), \n            tokenSecret);\n      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      if (LOG.isDebugEnabled()) {\n        int len \u003d reply.length();\n        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n            reply.substring(len-len/2, len-1));\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n        HttpRequest request, HttpResponse response, URL requestUri)\n        throws IOException {\n      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n      if (null \u003d\u003d tokenSecret) {\n        LOG.info(\"Request for unknown token \" + appid);\n        throw new IOException(\"could not find jobid\");\n      }\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n      // hash from the fetcher\n      String urlHashStr \u003d\n        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if (urlHashStr \u003d\u003d null) {\n        LOG.info(\"Missing header hash for \" + appid);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      if (LOG.isDebugEnabled()) {\n        int len \u003d urlHashStr.length();\n        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n            urlHashStr.substring(len-len/2, len-1));\n      }\n      // verify - throws exception\n      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      // verification passed - encode the reply\n      String reply \u003d\n        SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      if (LOG.isDebugEnabled()) {\n        int len \u003d reply.length();\n        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n            reply.substring(len-len/2, len-1));\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-    private void verifyRequest(HttpServletRequest request, \n-        HttpServletResponse response, TaskTracker tracker, String jobId) \n-    throws IOException {\n-      SecretKey tokenSecret \u003d tracker.getJobTokenSecretManager()\n-          .retrieveTokenSecret(jobId);\n+    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n+        HttpRequest request, HttpResponse response, URL requestUri)\n+        throws IOException {\n+      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n+      if (null \u003d\u003d tokenSecret) {\n+        LOG.info(\"Request for unknown token \" + appid);\n+        throw new IOException(\"could not find jobid\");\n+      }\n       // string to encrypt\n-      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(request);\n-      \n+      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n       // hash from the fetcher\n-      String urlHashStr \u003d request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n-      if(urlHashStr \u003d\u003d null) {\n-        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n+      String urlHashStr \u003d\n+        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n+      if (urlHashStr \u003d\u003d null) {\n+        LOG.info(\"Missing header hash for \" + appid);\n         throw new IOException(\"fetcher cannot be authenticated\");\n       }\n-      int len \u003d urlHashStr.length();\n-      LOG.debug(\"verifying request. enc_str\u003d\"+enc_str+\"; hash\u003d...\"+\n-          urlHashStr.substring(len-len/2, len-1)); // half of the hash for debug\n-\n-      // verify - throws exception\n-      try {\n-        SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n-      } catch (IOException ioe) {\n-        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n-        throw ioe;\n+      if (LOG.isDebugEnabled()) {\n+        int len \u003d urlHashStr.length();\n+        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n+            urlHashStr.substring(len-len/2, len-1));\n       }\n-      \n+      // verify - throws exception\n+      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n       // verification passed - encode the reply\n-      String reply \u003d SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n-      response.addHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n-      \n-      len \u003d reply.length();\n-      LOG.debug(\"Fetcher request verfied. enc_str\u003d\"+enc_str+\";reply\u003d\"\n-          +reply.substring(len-len/2, len-1));\n+      String reply \u003d\n+        SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n+      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n+      if (LOG.isDebugEnabled()) {\n+        int len \u003d reply.length();\n+        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n+            reply.substring(len-len/2, len-1));\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n        HttpRequest request, HttpResponse response, URL requestUri)\n        throws IOException {\n      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n      if (null \u003d\u003d tokenSecret) {\n        LOG.info(\"Request for unknown token \" + appid);\n        throw new IOException(\"could not find jobid\");\n      }\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n      // hash from the fetcher\n      String urlHashStr \u003d\n        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if (urlHashStr \u003d\u003d null) {\n        LOG.info(\"Missing header hash for \" + appid);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      if (LOG.isDebugEnabled()) {\n        int len \u003d urlHashStr.length();\n        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n            urlHashStr.substring(len-len/2, len-1));\n      }\n      // verify - throws exception\n      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      // verification passed - encode the reply\n      String reply \u003d\n        SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      if (LOG.isDebugEnabled()) {\n        int len \u003d reply.length();\n        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n            reply.substring(len-len/2, len-1));\n      }\n    }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java",
            "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
            "oldMethodName": "verifyRequest",
            "newMethodName": "verifyRequest"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-    private void verifyRequest(HttpServletRequest request, \n-        HttpServletResponse response, TaskTracker tracker, String jobId) \n-    throws IOException {\n-      SecretKey tokenSecret \u003d tracker.getJobTokenSecretManager()\n-          .retrieveTokenSecret(jobId);\n+    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n+        HttpRequest request, HttpResponse response, URL requestUri)\n+        throws IOException {\n+      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n+      if (null \u003d\u003d tokenSecret) {\n+        LOG.info(\"Request for unknown token \" + appid);\n+        throw new IOException(\"could not find jobid\");\n+      }\n       // string to encrypt\n-      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(request);\n-      \n+      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n       // hash from the fetcher\n-      String urlHashStr \u003d request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n-      if(urlHashStr \u003d\u003d null) {\n-        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n+      String urlHashStr \u003d\n+        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n+      if (urlHashStr \u003d\u003d null) {\n+        LOG.info(\"Missing header hash for \" + appid);\n         throw new IOException(\"fetcher cannot be authenticated\");\n       }\n-      int len \u003d urlHashStr.length();\n-      LOG.debug(\"verifying request. enc_str\u003d\"+enc_str+\"; hash\u003d...\"+\n-          urlHashStr.substring(len-len/2, len-1)); // half of the hash for debug\n-\n-      // verify - throws exception\n-      try {\n-        SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n-      } catch (IOException ioe) {\n-        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n-        throw ioe;\n+      if (LOG.isDebugEnabled()) {\n+        int len \u003d urlHashStr.length();\n+        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n+            urlHashStr.substring(len-len/2, len-1));\n       }\n-      \n+      // verify - throws exception\n+      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n       // verification passed - encode the reply\n-      String reply \u003d SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n-      response.addHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n-      \n-      len \u003d reply.length();\n-      LOG.debug(\"Fetcher request verfied. enc_str\u003d\"+enc_str+\";reply\u003d\"\n-          +reply.substring(len-len/2, len-1));\n+      String reply \u003d\n+        SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n+      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n+      if (LOG.isDebugEnabled()) {\n+        int len \u003d reply.length();\n+        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n+            reply.substring(len-len/2, len-1));\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n        HttpRequest request, HttpResponse response, URL requestUri)\n        throws IOException {\n      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n      if (null \u003d\u003d tokenSecret) {\n        LOG.info(\"Request for unknown token \" + appid);\n        throw new IOException(\"could not find jobid\");\n      }\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n      // hash from the fetcher\n      String urlHashStr \u003d\n        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if (urlHashStr \u003d\u003d null) {\n        LOG.info(\"Missing header hash for \" + appid);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      if (LOG.isDebugEnabled()) {\n        int len \u003d urlHashStr.length();\n        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n            urlHashStr.substring(len-len/2, len-1));\n      }\n      // verify - throws exception\n      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      // verification passed - encode the reply\n      String reply \u003d\n        SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      if (LOG.isDebugEnabled()) {\n        int len \u003d reply.length();\n        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n            reply.substring(len-len/2, len-1));\n      }\n    }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-    private void verifyRequest(HttpServletRequest request, \n-        HttpServletResponse response, TaskTracker tracker, String jobId) \n-    throws IOException {\n-      SecretKey tokenSecret \u003d tracker.getJobTokenSecretManager()\n-          .retrieveTokenSecret(jobId);\n+    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n+        HttpRequest request, HttpResponse response, URL requestUri)\n+        throws IOException {\n+      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n+      if (null \u003d\u003d tokenSecret) {\n+        LOG.info(\"Request for unknown token \" + appid);\n+        throw new IOException(\"could not find jobid\");\n+      }\n       // string to encrypt\n-      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(request);\n-      \n+      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n       // hash from the fetcher\n-      String urlHashStr \u003d request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n-      if(urlHashStr \u003d\u003d null) {\n-        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n+      String urlHashStr \u003d\n+        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n+      if (urlHashStr \u003d\u003d null) {\n+        LOG.info(\"Missing header hash for \" + appid);\n         throw new IOException(\"fetcher cannot be authenticated\");\n       }\n-      int len \u003d urlHashStr.length();\n-      LOG.debug(\"verifying request. enc_str\u003d\"+enc_str+\"; hash\u003d...\"+\n-          urlHashStr.substring(len-len/2, len-1)); // half of the hash for debug\n-\n-      // verify - throws exception\n-      try {\n-        SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n-      } catch (IOException ioe) {\n-        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n-        throw ioe;\n+      if (LOG.isDebugEnabled()) {\n+        int len \u003d urlHashStr.length();\n+        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n+            urlHashStr.substring(len-len/2, len-1));\n       }\n-      \n+      // verify - throws exception\n+      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n       // verification passed - encode the reply\n-      String reply \u003d SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n-      response.addHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n-      \n-      len \u003d reply.length();\n-      LOG.debug(\"Fetcher request verfied. enc_str\u003d\"+enc_str+\";reply\u003d\"\n-          +reply.substring(len-len/2, len-1));\n+      String reply \u003d\n+        SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n+      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n+      if (LOG.isDebugEnabled()) {\n+        int len \u003d reply.length();\n+        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n+            reply.substring(len-len/2, len-1));\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void verifyRequest(String appid, ChannelHandlerContext ctx,\n        HttpRequest request, HttpResponse response, URL requestUri)\n        throws IOException {\n      SecretKey tokenSecret \u003d secretManager.retrieveTokenSecret(appid);\n      if (null \u003d\u003d tokenSecret) {\n        LOG.info(\"Request for unknown token \" + appid);\n        throw new IOException(\"could not find jobid\");\n      }\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(requestUri);\n      // hash from the fetcher\n      String urlHashStr \u003d\n        request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if (urlHashStr \u003d\u003d null) {\n        LOG.info(\"Missing header hash for \" + appid);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      if (LOG.isDebugEnabled()) {\n        int len \u003d urlHashStr.length();\n        LOG.debug(\"verifying request. enc_str\u003d\" + enc_str + \"; hash\u003d...\" +\n            urlHashStr.substring(len-len/2, len-1));\n      }\n      // verify - throws exception\n      SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      // verification passed - encode the reply\n      String reply \u003d\n        SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n      response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      if (LOG.isDebugEnabled()) {\n        int len \u003d reply.length();\n        LOG.debug(\"Fetcher request verfied. enc_str\u003d\" + enc_str + \";reply\u003d\" +\n            reply.substring(len-len/2, len-1));\n      }\n    }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
          "extendedDetails": {
            "oldValue": "[request-HttpServletRequest, response-HttpServletResponse, tracker-TaskTracker, jobId-String]",
            "newValue": "[appid-String, ctx-ChannelHandlerContext, request-HttpRequest, response-HttpResponse, requestUri-URL]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,34 @@\n+    private void verifyRequest(HttpServletRequest request, \n+        HttpServletResponse response, TaskTracker tracker, String jobId) \n+    throws IOException {\n+      SecretKey tokenSecret \u003d tracker.getJobTokenSecretManager()\n+          .retrieveTokenSecret(jobId);\n+      // string to encrypt\n+      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(request);\n+      \n+      // hash from the fetcher\n+      String urlHashStr \u003d request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n+      if(urlHashStr \u003d\u003d null) {\n+        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n+        throw new IOException(\"fetcher cannot be authenticated\");\n+      }\n+      int len \u003d urlHashStr.length();\n+      LOG.debug(\"verifying request. enc_str\u003d\"+enc_str+\"; hash\u003d...\"+\n+          urlHashStr.substring(len-len/2, len-1)); // half of the hash for debug\n+\n+      // verify - throws exception\n+      try {\n+        SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n+      } catch (IOException ioe) {\n+        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n+        throw ioe;\n+      }\n+      \n+      // verification passed - encode the reply\n+      String reply \u003d SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n+      response.addHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n+      \n+      len \u003d reply.length();\n+      LOG.debug(\"Fetcher request verfied. enc_str\u003d\"+enc_str+\";reply\u003d\"\n+          +reply.substring(len-len/2, len-1));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void verifyRequest(HttpServletRequest request, \n        HttpServletResponse response, TaskTracker tracker, String jobId) \n    throws IOException {\n      SecretKey tokenSecret \u003d tracker.getJobTokenSecretManager()\n          .retrieveTokenSecret(jobId);\n      // string to encrypt\n      String enc_str \u003d SecureShuffleUtils.buildMsgFrom(request);\n      \n      // hash from the fetcher\n      String urlHashStr \u003d request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH);\n      if(urlHashStr \u003d\u003d null) {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n        throw new IOException(\"fetcher cannot be authenticated\");\n      }\n      int len \u003d urlHashStr.length();\n      LOG.debug(\"verifying request. enc_str\u003d\"+enc_str+\"; hash\u003d...\"+\n          urlHashStr.substring(len-len/2, len-1)); // half of the hash for debug\n\n      // verify - throws exception\n      try {\n        SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret);\n      } catch (IOException ioe) {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n        throw ioe;\n      }\n      \n      // verification passed - encode the reply\n      String reply \u003d SecureShuffleUtils.generateHash(urlHashStr.getBytes(), tokenSecret);\n      response.addHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply);\n      \n      len \u003d reply.length();\n      LOG.debug(\"Fetcher request verfied. enc_str\u003d\"+enc_str+\";reply\u003d\"\n          +reply.substring(len-len/2, len-1));\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java"
    }
  }
}