{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStreamer.java",
  "functionName": "locateFollowingBlock",
  "functionId": "locateFollowingBlock___excluded-DatanodeInfo[]__oldBlock-ExtendedBlock",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
  "functionStartLine": 1865,
  "functionEndLine": 1869,
  "numCommitsSeen": 273,
  "timeTaken": 10754,
  "changeHistory": [
    "627da6f7178e18aa41996969c408b6f344e297d1",
    "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "7947e5b53b9ac9524b535b0384c1c355b74723ff",
    "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d",
    "2cc9514ad643ae49d30524743420ee9744e571bd",
    "9ed43f2189fb4674b7379e8e995d53d4970d5c3a",
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498",
    "15612313f578a5115f8d03885e9b0c8c376ed56e",
    "631ccbdd2031a8387d4c2b743a4fc64c990391ce",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
    "4525c4a25ba90163c9543116e2bd54239e0dd097",
    "735046ebecd9e803398be56fbf79dbde5226b4c1",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
    "fd9997989c1f1c6f806c57a806e7225ca599fc0c",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "627da6f7178e18aa41996969c408b6f344e297d1": "Ymultichange(Yparameterchange,Ybodychange)",
    "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "7947e5b53b9ac9524b535b0384c1c355b74723ff": "Ybodychange",
    "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d": "Ybodychange",
    "2cc9514ad643ae49d30524743420ee9744e571bd": "Ybodychange",
    "9ed43f2189fb4674b7379e8e995d53d4970d5c3a": "Ymodifierchange",
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66": "Ymultichange(Ymovefromfile,Ybodychange)",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": "Ymultichange(Yparameterchange,Ybodychange)",
    "15612313f578a5115f8d03885e9b0c8c376ed56e": "Ybodychange",
    "631ccbdd2031a8387d4c2b743a4fc64c990391ce": "Yexceptionschange",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": "Ybodychange",
    "4525c4a25ba90163c9543116e2bd54239e0dd097": "Ybodychange",
    "735046ebecd9e803398be56fbf79dbde5226b4c1": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f": "Ybodychange",
    "fd9997989c1f1c6f806c57a806e7225ca599fc0c": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "627da6f7178e18aa41996969c408b6f344e297d1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8498. Blocks can be committed with wrong size. Contributed by Jing Zhao.\n",
      "commitDate": "15/02/17 10:44 AM",
      "commitName": "627da6f7178e18aa41996969c408b6f344e297d1",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8498. Blocks can be committed with wrong size. Contributed by Jing Zhao.\n",
          "commitDate": "15/02/17 10:44 AM",
          "commitName": "627da6f7178e18aa41996969c408b6f344e297d1",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "02/02/17 10:08 AM",
          "commitNameOld": "0914fcca312b5e9d20bcf1b6633bc13c9034ba46",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 13.03,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n-  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n-      throws IOException {\n-    return DFSOutputStream.addBlock(excludedNodes, dfsClient, src, block,\n+  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excluded,\n+      ExtendedBlock oldBlock) throws IOException {\n+    return DFSOutputStream.addBlock(excluded, dfsClient, src, oldBlock,\n         stat.getFileId(), favoredNodes, addBlockFlags);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excluded,\n      ExtendedBlock oldBlock) throws IOException {\n    return DFSOutputStream.addBlock(excluded, dfsClient, src, oldBlock,\n        stat.getFileId(), favoredNodes, addBlockFlags);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {
            "oldValue": "[excludedNodes-DatanodeInfo[]]",
            "newValue": "[excluded-DatanodeInfo[], oldBlock-ExtendedBlock]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8498. Blocks can be committed with wrong size. Contributed by Jing Zhao.\n",
          "commitDate": "15/02/17 10:44 AM",
          "commitName": "627da6f7178e18aa41996969c408b6f344e297d1",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "02/02/17 10:08 AM",
          "commitNameOld": "0914fcca312b5e9d20bcf1b6633bc13c9034ba46",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 13.03,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n-  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n-      throws IOException {\n-    return DFSOutputStream.addBlock(excludedNodes, dfsClient, src, block,\n+  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excluded,\n+      ExtendedBlock oldBlock) throws IOException {\n+    return DFSOutputStream.addBlock(excluded, dfsClient, src, oldBlock,\n         stat.getFileId(), favoredNodes, addBlockFlags);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excluded,\n      ExtendedBlock oldBlock) throws IOException {\n    return DFSOutputStream.addBlock(excluded, dfsClient, src, oldBlock,\n        stat.getFileId(), favoredNodes, addBlockFlags);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3702. Add an option for NOT writing the blocks locally if there is a datanode on the same box as the client. (Contributed by Lei (Eddy) Xu)\n",
      "commitDate": "27/04/16 2:22 PM",
      "commitName": "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "07/03/16 5:43 PM",
      "commitNameOld": "352d299cf8ebe330d24117df98d1e6a64ae38c26",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 50.82,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n   private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n       throws IOException {\n     return DFSOutputStream.addBlock(excludedNodes, dfsClient, src, block,\n-        stat.getFileId(), favoredNodes);\n+        stat.getFileId(), favoredNodes, addBlockFlags);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n      throws IOException {\n    return DFSOutputStream.addBlock(excludedNodes, dfsClient, src, block,\n        stat.getFileId(), favoredNodes, addBlockFlags);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n      throws IOException {\n    final DfsClientConf conf \u003d dfsClient.getConf(); \n    int retries \u003d conf.getNumBlockWriteLocateFollowingRetry();\n    long sleeptime \u003d conf.getBlockWriteLocateFollowingInitialDelayMs();\n    while (true) {\n      long localstart \u003d Time.monotonicNow();\n      while (true) {\n        try {\n          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n              block, excludedNodes, stat.getFileId(), favoredNodes);\n        } catch (RemoteException e) {\n          IOException ue \u003d\n              e.unwrapRemoteException(FileNotFoundException.class,\n                  AccessControlException.class,\n                  NSQuotaExceededException.class,\n                  DSQuotaExceededException.class,\n                  QuotaByStorageTypeExceededException.class,\n                  UnresolvedPathException.class);\n          if (ue !\u003d e) {\n            throw ue; // no need to retry these exceptions\n          }\n\n\n          if (NotReplicatedYetException.class.getName().\n              equals(e.getClassName())) {\n            if (retries \u003d\u003d 0) {\n              throw e;\n            } else {\n              --retries;\n              LOG.info(\"Exception while adding a block\", e);\n              long elapsed \u003d Time.monotonicNow() - localstart;\n              if (elapsed \u003e 5000) {\n                LOG.info(\"Waiting for replication for \"\n                    + (elapsed / 1000) + \" seconds\");\n              }\n              try {\n                LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                    + \" retries left \" + retries);\n                Thread.sleep(sleeptime);\n                sleeptime *\u003d 2;\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Caught exception\", ie);\n              }\n            }\n          } else {\n            throw e;\n          }\n\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java"
      }
    },
    "7947e5b53b9ac9524b535b0384c1c355b74723ff": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8283. DataStreamer cleanup and some minor improvement. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "29/04/15 10:41 AM",
      "commitName": "7947e5b53b9ac9524b535b0384c1c355b74723ff",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/04/15 12:21 AM",
      "commitNameOld": "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n       throws IOException {\n     final DfsClientConf conf \u003d dfsClient.getConf(); \n     int retries \u003d conf.getNumBlockWriteLocateFollowingRetry();\n     long sleeptime \u003d conf.getBlockWriteLocateFollowingInitialDelayMs();\n     while (true) {\n       long localstart \u003d Time.monotonicNow();\n       while (true) {\n         try {\n           return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n               block, excludedNodes, stat.getFileId(), favoredNodes);\n         } catch (RemoteException e) {\n           IOException ue \u003d\n               e.unwrapRemoteException(FileNotFoundException.class,\n                   AccessControlException.class,\n                   NSQuotaExceededException.class,\n                   DSQuotaExceededException.class,\n                   QuotaByStorageTypeExceededException.class,\n                   UnresolvedPathException.class);\n           if (ue !\u003d e) {\n             throw ue; // no need to retry these exceptions\n           }\n \n \n           if (NotReplicatedYetException.class.getName().\n               equals(e.getClassName())) {\n             if (retries \u003d\u003d 0) {\n               throw e;\n             } else {\n               --retries;\n-              DFSClient.LOG.info(\"Exception while adding a block\", e);\n+              LOG.info(\"Exception while adding a block\", e);\n               long elapsed \u003d Time.monotonicNow() - localstart;\n               if (elapsed \u003e 5000) {\n-                DFSClient.LOG.info(\"Waiting for replication for \"\n+                LOG.info(\"Waiting for replication for \"\n                     + (elapsed / 1000) + \" seconds\");\n               }\n               try {\n-                DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n+                LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                     + \" retries left \" + retries);\n                 Thread.sleep(sleeptime);\n                 sleeptime *\u003d 2;\n               } catch (InterruptedException ie) {\n-                DFSClient.LOG.warn(\"Caught exception \", ie);\n+                LOG.warn(\"Caught exception\", ie);\n               }\n             }\n           } else {\n             throw e;\n           }\n \n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n      throws IOException {\n    final DfsClientConf conf \u003d dfsClient.getConf(); \n    int retries \u003d conf.getNumBlockWriteLocateFollowingRetry();\n    long sleeptime \u003d conf.getBlockWriteLocateFollowingInitialDelayMs();\n    while (true) {\n      long localstart \u003d Time.monotonicNow();\n      while (true) {\n        try {\n          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n              block, excludedNodes, stat.getFileId(), favoredNodes);\n        } catch (RemoteException e) {\n          IOException ue \u003d\n              e.unwrapRemoteException(FileNotFoundException.class,\n                  AccessControlException.class,\n                  NSQuotaExceededException.class,\n                  DSQuotaExceededException.class,\n                  QuotaByStorageTypeExceededException.class,\n                  UnresolvedPathException.class);\n          if (ue !\u003d e) {\n            throw ue; // no need to retry these exceptions\n          }\n\n\n          if (NotReplicatedYetException.class.getName().\n              equals(e.getClassName())) {\n            if (retries \u003d\u003d 0) {\n              throw e;\n            } else {\n              --retries;\n              LOG.info(\"Exception while adding a block\", e);\n              long elapsed \u003d Time.monotonicNow() - localstart;\n              if (elapsed \u003e 5000) {\n                LOG.info(\"Waiting for replication for \"\n                    + (elapsed / 1000) + \" seconds\");\n              }\n              try {\n                LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                    + \" retries left \" + retries);\n                Thread.sleep(sleeptime);\n                sleeptime *\u003d 2;\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Caught exception\", ie);\n              }\n            }\n          } else {\n            throw e;\n          }\n\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8231. StackTrace displayed at client while QuotaByStorageType exceeds (Contributed by J.Andreina and Xiaoyu Yao)\n",
      "commitDate": "24/04/15 12:21 AM",
      "commitName": "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "13/04/15 11:43 AM",
      "commitNameOld": "7fc50e2525b8b8fe36d92e283a68eeeb09c63d21",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 10.53,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n       throws IOException {\n     final DfsClientConf conf \u003d dfsClient.getConf(); \n     int retries \u003d conf.getNumBlockWriteLocateFollowingRetry();\n     long sleeptime \u003d conf.getBlockWriteLocateFollowingInitialDelayMs();\n     while (true) {\n       long localstart \u003d Time.monotonicNow();\n       while (true) {\n         try {\n           return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n               block, excludedNodes, stat.getFileId(), favoredNodes);\n         } catch (RemoteException e) {\n           IOException ue \u003d\n               e.unwrapRemoteException(FileNotFoundException.class,\n                   AccessControlException.class,\n                   NSQuotaExceededException.class,\n                   DSQuotaExceededException.class,\n+                  QuotaByStorageTypeExceededException.class,\n                   UnresolvedPathException.class);\n           if (ue !\u003d e) {\n             throw ue; // no need to retry these exceptions\n           }\n \n \n           if (NotReplicatedYetException.class.getName().\n               equals(e.getClassName())) {\n             if (retries \u003d\u003d 0) {\n               throw e;\n             } else {\n               --retries;\n               DFSClient.LOG.info(\"Exception while adding a block\", e);\n               long elapsed \u003d Time.monotonicNow() - localstart;\n               if (elapsed \u003e 5000) {\n                 DFSClient.LOG.info(\"Waiting for replication for \"\n                     + (elapsed / 1000) + \" seconds\");\n               }\n               try {\n                 DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                     + \" retries left \" + retries);\n                 Thread.sleep(sleeptime);\n                 sleeptime *\u003d 2;\n               } catch (InterruptedException ie) {\n                 DFSClient.LOG.warn(\"Caught exception \", ie);\n               }\n             }\n           } else {\n             throw e;\n           }\n \n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n      throws IOException {\n    final DfsClientConf conf \u003d dfsClient.getConf(); \n    int retries \u003d conf.getNumBlockWriteLocateFollowingRetry();\n    long sleeptime \u003d conf.getBlockWriteLocateFollowingInitialDelayMs();\n    while (true) {\n      long localstart \u003d Time.monotonicNow();\n      while (true) {\n        try {\n          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n              block, excludedNodes, stat.getFileId(), favoredNodes);\n        } catch (RemoteException e) {\n          IOException ue \u003d\n              e.unwrapRemoteException(FileNotFoundException.class,\n                  AccessControlException.class,\n                  NSQuotaExceededException.class,\n                  DSQuotaExceededException.class,\n                  QuotaByStorageTypeExceededException.class,\n                  UnresolvedPathException.class);\n          if (ue !\u003d e) {\n            throw ue; // no need to retry these exceptions\n          }\n\n\n          if (NotReplicatedYetException.class.getName().\n              equals(e.getClassName())) {\n            if (retries \u003d\u003d 0) {\n              throw e;\n            } else {\n              --retries;\n              DFSClient.LOG.info(\"Exception while adding a block\", e);\n              long elapsed \u003d Time.monotonicNow() - localstart;\n              if (elapsed \u003e 5000) {\n                DFSClient.LOG.info(\"Waiting for replication for \"\n                    + (elapsed / 1000) + \" seconds\");\n              }\n              try {\n                DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                    + \" retries left \" + retries);\n                Thread.sleep(sleeptime);\n                sleeptime *\u003d 2;\n              } catch (InterruptedException ie) {\n                DFSClient.LOG.warn(\"Caught exception \", ie);\n              }\n            }\n          } else {\n            throw e;\n          }\n\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "2cc9514ad643ae49d30524743420ee9744e571bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
      "commitDate": "10/04/15 2:48 PM",
      "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "07/04/15 1:59 PM",
      "commitNameOld": "571a1ce9d037d99e7c9042bcb77ae7a2c4daf6d3",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.03,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n       throws IOException {\n-    int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n-    long sleeptime \u003d dfsClient.getConf().\n-        blockWriteLocateFollowingInitialDelayMs;\n+    final DfsClientConf conf \u003d dfsClient.getConf(); \n+    int retries \u003d conf.getNumBlockWriteLocateFollowingRetry();\n+    long sleeptime \u003d conf.getBlockWriteLocateFollowingInitialDelayMs();\n     while (true) {\n       long localstart \u003d Time.monotonicNow();\n       while (true) {\n         try {\n           return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n               block, excludedNodes, stat.getFileId(), favoredNodes);\n         } catch (RemoteException e) {\n           IOException ue \u003d\n               e.unwrapRemoteException(FileNotFoundException.class,\n                   AccessControlException.class,\n                   NSQuotaExceededException.class,\n                   DSQuotaExceededException.class,\n                   UnresolvedPathException.class);\n           if (ue !\u003d e) {\n             throw ue; // no need to retry these exceptions\n           }\n \n \n           if (NotReplicatedYetException.class.getName().\n               equals(e.getClassName())) {\n             if (retries \u003d\u003d 0) {\n               throw e;\n             } else {\n               --retries;\n               DFSClient.LOG.info(\"Exception while adding a block\", e);\n               long elapsed \u003d Time.monotonicNow() - localstart;\n               if (elapsed \u003e 5000) {\n                 DFSClient.LOG.info(\"Waiting for replication for \"\n                     + (elapsed / 1000) + \" seconds\");\n               }\n               try {\n                 DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                     + \" retries left \" + retries);\n                 Thread.sleep(sleeptime);\n                 sleeptime *\u003d 2;\n               } catch (InterruptedException ie) {\n                 DFSClient.LOG.warn(\"Caught exception \", ie);\n               }\n             }\n           } else {\n             throw e;\n           }\n \n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n      throws IOException {\n    final DfsClientConf conf \u003d dfsClient.getConf(); \n    int retries \u003d conf.getNumBlockWriteLocateFollowingRetry();\n    long sleeptime \u003d conf.getBlockWriteLocateFollowingInitialDelayMs();\n    while (true) {\n      long localstart \u003d Time.monotonicNow();\n      while (true) {\n        try {\n          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n              block, excludedNodes, stat.getFileId(), favoredNodes);\n        } catch (RemoteException e) {\n          IOException ue \u003d\n              e.unwrapRemoteException(FileNotFoundException.class,\n                  AccessControlException.class,\n                  NSQuotaExceededException.class,\n                  DSQuotaExceededException.class,\n                  UnresolvedPathException.class);\n          if (ue !\u003d e) {\n            throw ue; // no need to retry these exceptions\n          }\n\n\n          if (NotReplicatedYetException.class.getName().\n              equals(e.getClassName())) {\n            if (retries \u003d\u003d 0) {\n              throw e;\n            } else {\n              --retries;\n              DFSClient.LOG.info(\"Exception while adding a block\", e);\n              long elapsed \u003d Time.monotonicNow() - localstart;\n              if (elapsed \u003e 5000) {\n                DFSClient.LOG.info(\"Waiting for replication for \"\n                    + (elapsed / 1000) + \" seconds\");\n              }\n              try {\n                DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                    + \" retries left \" + retries);\n                Thread.sleep(sleeptime);\n                sleeptime *\u003d 2;\n              } catch (InterruptedException ie) {\n                DFSClient.LOG.warn(\"Caught exception \", ie);\n              }\n            }\n          } else {\n            throw e;\n          }\n\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "9ed43f2189fb4674b7379e8e995d53d4970d5c3a": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-7888. Change DFSOutputStream and DataStreamer for convenience of subclassing. Contributed by Li Bo\n",
      "commitDate": "02/04/15 10:59 AM",
      "commitName": "9ed43f2189fb4674b7379e8e995d53d4970d5c3a",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "01/04/15 4:54 PM",
      "commitNameOld": "6ccf4fbf8a8374c289370f67b26ac05abad30ebc",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n-  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n+  protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n       throws IOException {\n     int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n     long sleeptime \u003d dfsClient.getConf().\n         blockWriteLocateFollowingInitialDelayMs;\n     while (true) {\n       long localstart \u003d Time.monotonicNow();\n       while (true) {\n         try {\n           return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n               block, excludedNodes, stat.getFileId(), favoredNodes);\n         } catch (RemoteException e) {\n           IOException ue \u003d\n               e.unwrapRemoteException(FileNotFoundException.class,\n                   AccessControlException.class,\n                   NSQuotaExceededException.class,\n                   DSQuotaExceededException.class,\n                   UnresolvedPathException.class);\n           if (ue !\u003d e) {\n             throw ue; // no need to retry these exceptions\n           }\n \n \n           if (NotReplicatedYetException.class.getName().\n               equals(e.getClassName())) {\n             if (retries \u003d\u003d 0) {\n               throw e;\n             } else {\n               --retries;\n               DFSClient.LOG.info(\"Exception while adding a block\", e);\n               long elapsed \u003d Time.monotonicNow() - localstart;\n               if (elapsed \u003e 5000) {\n                 DFSClient.LOG.info(\"Waiting for replication for \"\n                     + (elapsed / 1000) + \" seconds\");\n               }\n               try {\n                 DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                     + \" retries left \" + retries);\n                 Thread.sleep(sleeptime);\n                 sleeptime *\u003d 2;\n               } catch (InterruptedException ie) {\n                 DFSClient.LOG.warn(\"Caught exception \", ie);\n               }\n             }\n           } else {\n             throw e;\n           }\n \n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n      throws IOException {\n    int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n    long sleeptime \u003d dfsClient.getConf().\n        blockWriteLocateFollowingInitialDelayMs;\n    while (true) {\n      long localstart \u003d Time.monotonicNow();\n      while (true) {\n        try {\n          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n              block, excludedNodes, stat.getFileId(), favoredNodes);\n        } catch (RemoteException e) {\n          IOException ue \u003d\n              e.unwrapRemoteException(FileNotFoundException.class,\n                  AccessControlException.class,\n                  NSQuotaExceededException.class,\n                  DSQuotaExceededException.class,\n                  UnresolvedPathException.class);\n          if (ue !\u003d e) {\n            throw ue; // no need to retry these exceptions\n          }\n\n\n          if (NotReplicatedYetException.class.getName().\n              equals(e.getClassName())) {\n            if (retries \u003d\u003d 0) {\n              throw e;\n            } else {\n              --retries;\n              DFSClient.LOG.info(\"Exception while adding a block\", e);\n              long elapsed \u003d Time.monotonicNow() - localstart;\n              if (elapsed \u003e 5000) {\n                DFSClient.LOG.info(\"Waiting for replication for \"\n                    + (elapsed / 1000) + \" seconds\");\n              }\n              try {\n                DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                    + \" retries left \" + retries);\n                Thread.sleep(sleeptime);\n                sleeptime *\u003d 2;\n              } catch (InterruptedException ie) {\n                DFSClient.LOG.warn(\"Caught exception \", ie);\n              }\n            }\n          } else {\n            throw e;\n          }\n\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-7854. Separate class DataStreamer out of DFSOutputStream. Contributed by Li Bo.\n",
      "commitDate": "24/03/15 11:06 AM",
      "commitName": "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7854. Separate class DataStreamer out of DFSOutputStream. Contributed by Li Bo.\n",
          "commitDate": "24/03/15 11:06 AM",
          "commitName": "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/03/15 10:49 AM",
          "commitNameOld": "570a83ae80faf2076966acf30588733803327844",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,52 @@\n-    private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)  throws IOException {\n-      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n-      long sleeptime \u003d dfsClient.getConf().\n-          blockWriteLocateFollowingInitialDelayMs;\n+  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n+      throws IOException {\n+    int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n+    long sleeptime \u003d dfsClient.getConf().\n+        blockWriteLocateFollowingInitialDelayMs;\n+    while (true) {\n+      long localstart \u003d Time.monotonicNow();\n       while (true) {\n-        long localstart \u003d Time.monotonicNow();\n-        while (true) {\n-          try {\n-            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n-                block, excludedNodes, fileId, favoredNodes);\n-          } catch (RemoteException e) {\n-            IOException ue \u003d \n+        try {\n+          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n+              block, excludedNodes, stat.getFileId(), favoredNodes);\n+        } catch (RemoteException e) {\n+          IOException ue \u003d\n               e.unwrapRemoteException(FileNotFoundException.class,\n-                                      AccessControlException.class,\n-                                      NSQuotaExceededException.class,\n-                                      DSQuotaExceededException.class,\n-                                      UnresolvedPathException.class);\n-            if (ue !\u003d e) { \n-              throw ue; // no need to retry these exceptions\n-            }\n-            \n-            \n-            if (NotReplicatedYetException.class.getName().\n-                equals(e.getClassName())) {\n-              if (retries \u003d\u003d 0) { \n-                throw e;\n-              } else {\n-                --retries;\n-                DFSClient.LOG.info(\"Exception while adding a block\", e);\n-                long elapsed \u003d Time.monotonicNow() - localstart;\n-                if (elapsed \u003e 5000) {\n-                  DFSClient.LOG.info(\"Waiting for replication for \"\n-                      + (elapsed / 1000) + \" seconds\");\n-                }\n-                try {\n-                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n-                      + \" retries left \" + retries);\n-                  Thread.sleep(sleeptime);\n-                  sleeptime *\u003d 2;\n-                } catch (InterruptedException ie) {\n-                  DFSClient.LOG.warn(\"Caught exception \", ie);\n-                }\n-              }\n-            } else {\n-              throw e;\n-            }\n-\n+                  AccessControlException.class,\n+                  NSQuotaExceededException.class,\n+                  DSQuotaExceededException.class,\n+                  UnresolvedPathException.class);\n+          if (ue !\u003d e) {\n+            throw ue; // no need to retry these exceptions\n           }\n+\n+\n+          if (NotReplicatedYetException.class.getName().\n+              equals(e.getClassName())) {\n+            if (retries \u003d\u003d 0) {\n+              throw e;\n+            } else {\n+              --retries;\n+              DFSClient.LOG.info(\"Exception while adding a block\", e);\n+              long elapsed \u003d Time.monotonicNow() - localstart;\n+              if (elapsed \u003e 5000) {\n+                DFSClient.LOG.info(\"Waiting for replication for \"\n+                    + (elapsed / 1000) + \" seconds\");\n+              }\n+              try {\n+                DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n+                    + \" retries left \" + retries);\n+                Thread.sleep(sleeptime);\n+                sleeptime *\u003d 2;\n+              } catch (InterruptedException ie) {\n+                DFSClient.LOG.warn(\"Caught exception \", ie);\n+              }\n+            }\n+          } else {\n+            throw e;\n+          }\n+\n         }\n-      } \n-    }\n\\ No newline at end of file\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n      throws IOException {\n    int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n    long sleeptime \u003d dfsClient.getConf().\n        blockWriteLocateFollowingInitialDelayMs;\n    while (true) {\n      long localstart \u003d Time.monotonicNow();\n      while (true) {\n        try {\n          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n              block, excludedNodes, stat.getFileId(), favoredNodes);\n        } catch (RemoteException e) {\n          IOException ue \u003d\n              e.unwrapRemoteException(FileNotFoundException.class,\n                  AccessControlException.class,\n                  NSQuotaExceededException.class,\n                  DSQuotaExceededException.class,\n                  UnresolvedPathException.class);\n          if (ue !\u003d e) {\n            throw ue; // no need to retry these exceptions\n          }\n\n\n          if (NotReplicatedYetException.class.getName().\n              equals(e.getClassName())) {\n            if (retries \u003d\u003d 0) {\n              throw e;\n            } else {\n              --retries;\n              DFSClient.LOG.info(\"Exception while adding a block\", e);\n              long elapsed \u003d Time.monotonicNow() - localstart;\n              if (elapsed \u003e 5000) {\n                DFSClient.LOG.info(\"Waiting for replication for \"\n                    + (elapsed / 1000) + \" seconds\");\n              }\n              try {\n                DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                    + \" retries left \" + retries);\n                Thread.sleep(sleeptime);\n                sleeptime *\u003d 2;\n              } catch (InterruptedException ie) {\n                DFSClient.LOG.warn(\"Caught exception \", ie);\n              }\n            }\n          } else {\n            throw e;\n          }\n\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
            "oldMethodName": "locateFollowingBlock",
            "newMethodName": "locateFollowingBlock"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7854. Separate class DataStreamer out of DFSOutputStream. Contributed by Li Bo.\n",
          "commitDate": "24/03/15 11:06 AM",
          "commitName": "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/03/15 10:49 AM",
          "commitNameOld": "570a83ae80faf2076966acf30588733803327844",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,52 @@\n-    private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)  throws IOException {\n-      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n-      long sleeptime \u003d dfsClient.getConf().\n-          blockWriteLocateFollowingInitialDelayMs;\n+  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n+      throws IOException {\n+    int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n+    long sleeptime \u003d dfsClient.getConf().\n+        blockWriteLocateFollowingInitialDelayMs;\n+    while (true) {\n+      long localstart \u003d Time.monotonicNow();\n       while (true) {\n-        long localstart \u003d Time.monotonicNow();\n-        while (true) {\n-          try {\n-            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n-                block, excludedNodes, fileId, favoredNodes);\n-          } catch (RemoteException e) {\n-            IOException ue \u003d \n+        try {\n+          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n+              block, excludedNodes, stat.getFileId(), favoredNodes);\n+        } catch (RemoteException e) {\n+          IOException ue \u003d\n               e.unwrapRemoteException(FileNotFoundException.class,\n-                                      AccessControlException.class,\n-                                      NSQuotaExceededException.class,\n-                                      DSQuotaExceededException.class,\n-                                      UnresolvedPathException.class);\n-            if (ue !\u003d e) { \n-              throw ue; // no need to retry these exceptions\n-            }\n-            \n-            \n-            if (NotReplicatedYetException.class.getName().\n-                equals(e.getClassName())) {\n-              if (retries \u003d\u003d 0) { \n-                throw e;\n-              } else {\n-                --retries;\n-                DFSClient.LOG.info(\"Exception while adding a block\", e);\n-                long elapsed \u003d Time.monotonicNow() - localstart;\n-                if (elapsed \u003e 5000) {\n-                  DFSClient.LOG.info(\"Waiting for replication for \"\n-                      + (elapsed / 1000) + \" seconds\");\n-                }\n-                try {\n-                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n-                      + \" retries left \" + retries);\n-                  Thread.sleep(sleeptime);\n-                  sleeptime *\u003d 2;\n-                } catch (InterruptedException ie) {\n-                  DFSClient.LOG.warn(\"Caught exception \", ie);\n-                }\n-              }\n-            } else {\n-              throw e;\n-            }\n-\n+                  AccessControlException.class,\n+                  NSQuotaExceededException.class,\n+                  DSQuotaExceededException.class,\n+                  UnresolvedPathException.class);\n+          if (ue !\u003d e) {\n+            throw ue; // no need to retry these exceptions\n           }\n+\n+\n+          if (NotReplicatedYetException.class.getName().\n+              equals(e.getClassName())) {\n+            if (retries \u003d\u003d 0) {\n+              throw e;\n+            } else {\n+              --retries;\n+              DFSClient.LOG.info(\"Exception while adding a block\", e);\n+              long elapsed \u003d Time.monotonicNow() - localstart;\n+              if (elapsed \u003e 5000) {\n+                DFSClient.LOG.info(\"Waiting for replication for \"\n+                    + (elapsed / 1000) + \" seconds\");\n+              }\n+              try {\n+                DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n+                    + \" retries left \" + retries);\n+                Thread.sleep(sleeptime);\n+                sleeptime *\u003d 2;\n+              } catch (InterruptedException ie) {\n+                DFSClient.LOG.warn(\"Caught exception \", ie);\n+              }\n+            }\n+          } else {\n+            throw e;\n+          }\n+\n         }\n-      } \n-    }\n\\ No newline at end of file\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)\n      throws IOException {\n    int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n    long sleeptime \u003d dfsClient.getConf().\n        blockWriteLocateFollowingInitialDelayMs;\n    while (true) {\n      long localstart \u003d Time.monotonicNow();\n      while (true) {\n        try {\n          return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n              block, excludedNodes, stat.getFileId(), favoredNodes);\n        } catch (RemoteException e) {\n          IOException ue \u003d\n              e.unwrapRemoteException(FileNotFoundException.class,\n                  AccessControlException.class,\n                  NSQuotaExceededException.class,\n                  DSQuotaExceededException.class,\n                  UnresolvedPathException.class);\n          if (ue !\u003d e) {\n            throw ue; // no need to retry these exceptions\n          }\n\n\n          if (NotReplicatedYetException.class.getName().\n              equals(e.getClassName())) {\n            if (retries \u003d\u003d 0) {\n              throw e;\n            } else {\n              --retries;\n              DFSClient.LOG.info(\"Exception while adding a block\", e);\n              long elapsed \u003d Time.monotonicNow() - localstart;\n              if (elapsed \u003e 5000) {\n                DFSClient.LOG.info(\"Waiting for replication for \"\n                    + (elapsed / 1000) + \" seconds\");\n              }\n              try {\n                DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                    + \" retries left \" + retries);\n                Thread.sleep(sleeptime);\n                sleeptime *\u003d 2;\n              } catch (InterruptedException ie) {\n                DFSClient.LOG.warn(\"Caught exception \", ie);\n              }\n            }\n          } else {\n            throw e;\n          }\n\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {}
        }
      ]
    },
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
      "commitDate": "20/03/15 12:02 PM",
      "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
          "commitDate": "20/03/15 12:02 PM",
          "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "20/03/15 9:12 AM",
          "commitNameOld": "15612313f578a5115f8d03885e9b0c8c376ed56e",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n-    private LocatedBlock locateFollowingBlock(long start,\n-        DatanodeInfo[] excludedNodes)  throws IOException {\n+    private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)  throws IOException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d dfsClient.getConf().\n           blockWriteLocateFollowingInitialDelayMs;\n       while (true) {\n-        long localstart \u003d Time.now();\n+        long localstart \u003d Time.monotonicNow();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                 block, excludedNodes, fileId, favoredNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(\"Exception while adding a block\", e);\n-                if (Time.now() - localstart \u003e 5000) {\n+                long elapsed \u003d Time.monotonicNow() - localstart;\n+                if (elapsed \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n-                      + (Time.now() - localstart) / 1000\n-                      + \" seconds\");\n+                      + (elapsed / 1000) + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                   DFSClient.LOG.warn(\"Caught exception \", ie);\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)  throws IOException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d dfsClient.getConf().\n          blockWriteLocateFollowingInitialDelayMs;\n      while (true) {\n        long localstart \u003d Time.monotonicNow();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                block, excludedNodes, fileId, favoredNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                long elapsed \u003d Time.monotonicNow() - localstart;\n                if (elapsed \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (elapsed / 1000) + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                  DFSClient.LOG.warn(\"Caught exception \", ie);\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
          "extendedDetails": {
            "oldValue": "[start-long, excludedNodes-DatanodeInfo[]]",
            "newValue": "[excludedNodes-DatanodeInfo[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
          "commitDate": "20/03/15 12:02 PM",
          "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "20/03/15 9:12 AM",
          "commitNameOld": "15612313f578a5115f8d03885e9b0c8c376ed56e",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n-    private LocatedBlock locateFollowingBlock(long start,\n-        DatanodeInfo[] excludedNodes)  throws IOException {\n+    private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)  throws IOException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d dfsClient.getConf().\n           blockWriteLocateFollowingInitialDelayMs;\n       while (true) {\n-        long localstart \u003d Time.now();\n+        long localstart \u003d Time.monotonicNow();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                 block, excludedNodes, fileId, favoredNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(\"Exception while adding a block\", e);\n-                if (Time.now() - localstart \u003e 5000) {\n+                long elapsed \u003d Time.monotonicNow() - localstart;\n+                if (elapsed \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n-                      + (Time.now() - localstart) / 1000\n-                      + \" seconds\");\n+                      + (elapsed / 1000) + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                   DFSClient.LOG.warn(\"Caught exception \", ie);\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private LocatedBlock locateFollowingBlock(DatanodeInfo[] excludedNodes)  throws IOException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d dfsClient.getConf().\n          blockWriteLocateFollowingInitialDelayMs;\n      while (true) {\n        long localstart \u003d Time.monotonicNow();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                block, excludedNodes, fileId, favoredNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                long elapsed \u003d Time.monotonicNow() - localstart;\n                if (elapsed \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (elapsed / 1000) + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                  DFSClient.LOG.warn(\"Caught exception \", ie);\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "15612313f578a5115f8d03885e9b0c8c376ed56e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7835. make initial sleeptime in locateFollowingBlock configurable for DFSClient. Contributed by Zhihai Xu.\n",
      "commitDate": "20/03/15 9:12 AM",
      "commitName": "15612313f578a5115f8d03885e9b0c8c376ed56e",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "18/03/15 6:14 PM",
      "commitNameOld": "8234fd0e1087e0e49aa1d6f286f292b7f70b368e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1.62,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n     private LocatedBlock locateFollowingBlock(long start,\n         DatanodeInfo[] excludedNodes)  throws IOException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n-      long sleeptime \u003d 400;\n+      long sleeptime \u003d dfsClient.getConf().\n+          blockWriteLocateFollowingInitialDelayMs;\n       while (true) {\n         long localstart \u003d Time.now();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                 block, excludedNodes, fileId, favoredNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(\"Exception while adding a block\", e);\n                 if (Time.now() - localstart \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n                       + (Time.now() - localstart) / 1000\n                       + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                   DFSClient.LOG.warn(\"Caught exception \", ie);\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes)  throws IOException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d dfsClient.getConf().\n          blockWriteLocateFollowingInitialDelayMs;\n      while (true) {\n        long localstart \u003d Time.now();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                block, excludedNodes, fileId, favoredNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (Time.now() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (Time.now() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                  DFSClient.LOG.warn(\"Caught exception \", ie);\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "631ccbdd2031a8387d4c2b743a4fc64c990391ce": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-5374. Remove deadcode in DFSOutputStream. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1533258 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/10/13 1:47 PM",
      "commitName": "631ccbdd2031a8387d4c2b743a4fc64c990391ce",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "10/10/13 4:58 PM",
      "commitNameOld": "f2f5cdb5554d294a29ebf465101c5607fd56e244",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 6.87,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,51 @@\n     private LocatedBlock locateFollowingBlock(long start,\n-        DatanodeInfo[] excludedNodes) \n-        throws IOException, UnresolvedLinkException {\n+        DatanodeInfo[] excludedNodes)  throws IOException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d 400;\n       while (true) {\n         long localstart \u003d Time.now();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                 block, excludedNodes, fileId, favoredNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(\"Exception while adding a block\", e);\n                 if (Time.now() - localstart \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n                       + (Time.now() - localstart) / 1000\n                       + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                   DFSClient.LOG.warn(\"Caught exception \", ie);\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes)  throws IOException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d Time.now();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                block, excludedNodes, fileId, favoredNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (Time.now() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (Time.now() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                  DFSClient.LOG.warn(\"Caught exception \", ie);\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {
        "oldValue": "[IOException, UnresolvedLinkException]",
        "newValue": "[IOException]"
      }
    },
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2576. Enhances the DistributedFileSystem\u0027s create API so that clients can specify favored datanodes for a file\u0027s blocks. Contributed by Devaraj Das and Pritam Damania.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476395 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/13 1:39 PM",
      "commitName": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "21/03/13 11:58 AM",
      "commitNameOld": "a10fbb93e759c3351851f5422b192c9bd04820a9",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 36.07,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private LocatedBlock locateFollowingBlock(long start,\n         DatanodeInfo[] excludedNodes) \n         throws IOException, UnresolvedLinkException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d 400;\n       while (true) {\n         long localstart \u003d Time.now();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n-                block, excludedNodes, fileId);\n+                block, excludedNodes, fileId, favoredNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(\"Exception while adding a block\", e);\n                 if (Time.now() - localstart \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n                       + (Time.now() - localstart) / 1000\n                       + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                   DFSClient.LOG.warn(\"Caught exception \", ie);\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d Time.now();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                block, excludedNodes, fileId, favoredNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (Time.now() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (Time.now() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                  DFSClient.LOG.warn(\"Caught exception \", ie);\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "4525c4a25ba90163c9543116e2bd54239e0dd097": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4340. Update addBlock() to inculde inode id as additional argument. Contributed Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1443169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/13 11:52 AM",
      "commitName": "4525c4a25ba90163c9543116e2bd54239e0dd097",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "27/01/13 9:42 AM",
      "commitNameOld": "9639f37ee21427303e877e8aeb486e0d71982e0f",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 10.09,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n     private LocatedBlock locateFollowingBlock(long start,\n         DatanodeInfo[] excludedNodes) \n         throws IOException, UnresolvedLinkException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d 400;\n       while (true) {\n         long localstart \u003d Time.now();\n         while (true) {\n           try {\n-            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n+            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n+                block, excludedNodes, fileId);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(\"Exception while adding a block\", e);\n                 if (Time.now() - localstart \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n                       + (Time.now() - localstart) / 1000\n                       + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                   DFSClient.LOG.warn(\"Caught exception \", ie);\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d Time.now();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName,\n                block, excludedNodes, fileId);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (Time.now() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (Time.now() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                  DFSClient.LOG.warn(\"Caught exception \", ie);\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "735046ebecd9e803398be56fbf79dbde5226b4c1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3851. DFSOutputStream class code cleanup. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377372 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/08/12 9:00 PM",
      "commitName": "735046ebecd9e803398be56fbf79dbde5226b4c1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "14/08/12 1:59 PM",
      "commitNameOld": "f98d8eb291be364102b5c3011ce72e8f43eab389",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 11.29,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n     private LocatedBlock locateFollowingBlock(long start,\n         DatanodeInfo[] excludedNodes) \n         throws IOException, UnresolvedLinkException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d 400;\n       while (true) {\n         long localstart \u003d Time.now();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(\"Exception while adding a block\", e);\n                 if (Time.now() - localstart \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n                       + (Time.now() - localstart) / 1000\n                       + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n+                  DFSClient.LOG.warn(\"Caught exception \", ie);\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d Time.now();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (Time.now() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (Time.now() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                  DFSClient.LOG.warn(\"Caught exception \", ie);\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "30/05/12 12:10 PM",
      "commitNameOld": "83cf475050dba27e72b4e399491638c670621175",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 42.99,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     private LocatedBlock locateFollowingBlock(long start,\n         DatanodeInfo[] excludedNodes) \n         throws IOException, UnresolvedLinkException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d 400;\n       while (true) {\n-        long localstart \u003d System.currentTimeMillis();\n+        long localstart \u003d Time.now();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(\"Exception while adding a block\", e);\n-                if (System.currentTimeMillis() - localstart \u003e 5000) {\n+                if (Time.now() - localstart \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n-                      + (System.currentTimeMillis() - localstart) / 1000\n+                      + (Time.now() - localstart) / 1000\n                       + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d Time.now();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (Time.now() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (Time.now() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d System.currentTimeMillis();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (System.currentTimeMillis() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (System.currentTimeMillis() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d System.currentTimeMillis();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (System.currentTimeMillis() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (System.currentTimeMillis() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java"
      }
    },
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1977. Stop using StringUtils.stringifyException(). Contributed by Bharath Mundlapudi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1145834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/11 6:11 PM",
      "commitName": "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "23/06/11 4:57 PM",
      "commitNameOld": "2f48fae72aa52e6ec42264cad24fab36b6a426c2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 19.05,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     private LocatedBlock locateFollowingBlock(long start,\n         DatanodeInfo[] excludedNodes) \n         throws IOException, UnresolvedLinkException {\n       int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d 400;\n       while (true) {\n         long localstart \u003d System.currentTimeMillis();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n-                DFSClient.LOG.info(StringUtils.stringifyException(e));\n+                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                 if (System.currentTimeMillis() - localstart \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n                       + (System.currentTimeMillis() - localstart) / 1000\n                       + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d System.currentTimeMillis();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(\"Exception while adding a block\", e);\n                if (System.currentTimeMillis() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (System.currentTimeMillis() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "fd9997989c1f1c6f806c57a806e7225ca599fc0c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2092. Remove some object references to Configuration in DFSClient.  Contributed by Bharath Mundlapudi\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139097 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/06/11 3:24 PM",
      "commitName": "fd9997989c1f1c6f806c57a806e7225ca599fc0c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 11.02,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,50 @@\n     private LocatedBlock locateFollowingBlock(long start,\n         DatanodeInfo[] excludedNodes) \n         throws IOException, UnresolvedLinkException {\n-      int retries \u003d \n-        conf.getInt(DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY,\n-                    DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_DEFAULT);\n+      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n       long sleeptime \u003d 400;\n       while (true) {\n         long localstart \u003d System.currentTimeMillis();\n         while (true) {\n           try {\n             return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n           } catch (RemoteException e) {\n             IOException ue \u003d \n               e.unwrapRemoteException(FileNotFoundException.class,\n                                       AccessControlException.class,\n                                       NSQuotaExceededException.class,\n                                       DSQuotaExceededException.class,\n                                       UnresolvedPathException.class);\n             if (ue !\u003d e) { \n               throw ue; // no need to retry these exceptions\n             }\n             \n             \n             if (NotReplicatedYetException.class.getName().\n                 equals(e.getClassName())) {\n               if (retries \u003d\u003d 0) { \n                 throw e;\n               } else {\n                 --retries;\n                 DFSClient.LOG.info(StringUtils.stringifyException(e));\n                 if (System.currentTimeMillis() - localstart \u003e 5000) {\n                   DFSClient.LOG.info(\"Waiting for replication for \"\n                       + (System.currentTimeMillis() - localstart) / 1000\n                       + \" seconds\");\n                 }\n                 try {\n                   DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                       + \" retries left \" + retries);\n                   Thread.sleep(sleeptime);\n                   sleeptime *\u003d 2;\n                 } catch (InterruptedException ie) {\n                 }\n               }\n             } else {\n               throw e;\n             }\n \n           }\n         }\n       } \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d dfsClient.getConf().nBlockWriteLocateFollowingRetry;\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d System.currentTimeMillis();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(StringUtils.stringifyException(e));\n                if (System.currentTimeMillis() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (System.currentTimeMillis() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,52 @@\n+    private LocatedBlock locateFollowingBlock(long start,\n+        DatanodeInfo[] excludedNodes) \n+        throws IOException, UnresolvedLinkException {\n+      int retries \u003d \n+        conf.getInt(DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY,\n+                    DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_DEFAULT);\n+      long sleeptime \u003d 400;\n+      while (true) {\n+        long localstart \u003d System.currentTimeMillis();\n+        while (true) {\n+          try {\n+            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n+          } catch (RemoteException e) {\n+            IOException ue \u003d \n+              e.unwrapRemoteException(FileNotFoundException.class,\n+                                      AccessControlException.class,\n+                                      NSQuotaExceededException.class,\n+                                      DSQuotaExceededException.class,\n+                                      UnresolvedPathException.class);\n+            if (ue !\u003d e) { \n+              throw ue; // no need to retry these exceptions\n+            }\n+            \n+            \n+            if (NotReplicatedYetException.class.getName().\n+                equals(e.getClassName())) {\n+              if (retries \u003d\u003d 0) { \n+                throw e;\n+              } else {\n+                --retries;\n+                DFSClient.LOG.info(StringUtils.stringifyException(e));\n+                if (System.currentTimeMillis() - localstart \u003e 5000) {\n+                  DFSClient.LOG.info(\"Waiting for replication for \"\n+                      + (System.currentTimeMillis() - localstart) / 1000\n+                      + \" seconds\");\n+                }\n+                try {\n+                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n+                      + \" retries left \" + retries);\n+                  Thread.sleep(sleeptime);\n+                  sleeptime *\u003d 2;\n+                } catch (InterruptedException ie) {\n+                }\n+              }\n+            } else {\n+              throw e;\n+            }\n+\n+          }\n+        }\n+      } \n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private LocatedBlock locateFollowingBlock(long start,\n        DatanodeInfo[] excludedNodes) \n        throws IOException, UnresolvedLinkException {\n      int retries \u003d \n        conf.getInt(DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY,\n                    DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_DEFAULT);\n      long sleeptime \u003d 400;\n      while (true) {\n        long localstart \u003d System.currentTimeMillis();\n        while (true) {\n          try {\n            return dfsClient.namenode.addBlock(src, dfsClient.clientName, block, excludedNodes);\n          } catch (RemoteException e) {\n            IOException ue \u003d \n              e.unwrapRemoteException(FileNotFoundException.class,\n                                      AccessControlException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class);\n            if (ue !\u003d e) { \n              throw ue; // no need to retry these exceptions\n            }\n            \n            \n            if (NotReplicatedYetException.class.getName().\n                equals(e.getClassName())) {\n              if (retries \u003d\u003d 0) { \n                throw e;\n              } else {\n                --retries;\n                DFSClient.LOG.info(StringUtils.stringifyException(e));\n                if (System.currentTimeMillis() - localstart \u003e 5000) {\n                  DFSClient.LOG.info(\"Waiting for replication for \"\n                      + (System.currentTimeMillis() - localstart) / 1000\n                      + \" seconds\");\n                }\n                try {\n                  DFSClient.LOG.warn(\"NotReplicatedYetException sleeping \" + src\n                      + \" retries left \" + retries);\n                  Thread.sleep(sleeptime);\n                  sleeptime *\u003d 2;\n                } catch (InterruptedException ie) {\n                }\n              }\n            } else {\n              throw e;\n            }\n\n          }\n        }\n      } \n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSOutputStream.java"
    }
  }
}