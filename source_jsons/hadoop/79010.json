{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsShell.java",
  "functionName": "run",
  "functionId": "run___argv-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
  "functionStartLine": 301,
  "functionEndLine": 351,
  "numCommitsSeen": 66,
  "timeTaken": 4732,
  "changeHistory": [
    "6f5a36c13c4d2eb24e207aa99a9781c0be11660b",
    "b606e025f10daed18b90b45ac00cd0c82e818581",
    "307db61aac9f4b51301ab9d4e74be7632c42d62f",
    "892ade689f9bcce76daae8f66fc00a49bee8548e",
    "861b52db242f238d7e36ad75c158025be959a696",
    "454da959c726528ac98dbca1b935a83ed4b9e235",
    "69b095730bd87706ddcbabeea6c513290ee4cdf5",
    "ad60807238c4f7779cb0685e7d39ca0c50e01b2f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "44a35b5d9accc4ecf7b1bbf762e593540bafe6a3",
    "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99",
    "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc",
    "a8a336b1b5082dcab29c5fed45fed4b01312426d",
    "7f77fad79af0010cd22ca773d9af27110429d3a2",
    "cd2079f0e4aa292492b5d6c0d0af5bfa41a39043",
    "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899",
    "a5290c9eca69027cff2448d05fee6983cbb54cd7",
    "3337cdb3121d926301a3cca17abef029abdb2ff3",
    "4de502c7c050373efe8620b320ab4413bd54cfa2",
    "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b",
    "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
    "369a20391555f9c0ca9bd5384435be12770942aa",
    "7ebfabc65a1c4a5b7dfb3d197385bbe95859278c",
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7",
    "d358eb75b79b17f85ae9fd831a0bd065b87bf924",
    "7568e9c88cf470f63c2ab78c17d02865661d13fa",
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e",
    "bb4f277407ed89b7b19bc4d5ac1c038bdc1c6850",
    "50b1f9fc73bedd7b5bd5d7c7ec1a43b17dd117ac",
    "151c1a79526ef6260971c5a39befae86ffd3ec39",
    "2fbd0bfbebc345e7a2ce0aa13437804b33b8bdcc",
    "0b14427e6c081c8110eac7678b49c01010156946",
    "d2ca51b859d6400c6a0860984ddd6a06a559ef7e",
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "6f5a36c13c4d2eb24e207aa99a9781c0be11660b": "Yexceptionschange",
    "b606e025f10daed18b90b45ac00cd0c82e818581": "Ybodychange",
    "307db61aac9f4b51301ab9d4e74be7632c42d62f": "Ybodychange",
    "892ade689f9bcce76daae8f66fc00a49bee8548e": "Ybodychange",
    "861b52db242f238d7e36ad75c158025be959a696": "Ybodychange",
    "454da959c726528ac98dbca1b935a83ed4b9e235": "Ybodychange",
    "69b095730bd87706ddcbabeea6c513290ee4cdf5": "Ybodychange",
    "ad60807238c4f7779cb0685e7d39ca0c50e01b2f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "44a35b5d9accc4ecf7b1bbf762e593540bafe6a3": "Ybodychange",
    "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99": "Ybodychange",
    "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc": "Ybodychange",
    "a8a336b1b5082dcab29c5fed45fed4b01312426d": "Ybodychange",
    "7f77fad79af0010cd22ca773d9af27110429d3a2": "Ybodychange",
    "cd2079f0e4aa292492b5d6c0d0af5bfa41a39043": "Ybodychange",
    "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899": "Ybodychange",
    "a5290c9eca69027cff2448d05fee6983cbb54cd7": "Ybodychange",
    "3337cdb3121d926301a3cca17abef029abdb2ff3": "Ybodychange",
    "4de502c7c050373efe8620b320ab4413bd54cfa2": "Ybodychange",
    "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b": "Ybodychange",
    "b9599b26dc92634674e9c609b6df9b8d2c408e6e": "Ybodychange",
    "369a20391555f9c0ca9bd5384435be12770942aa": "Ybodychange",
    "7ebfabc65a1c4a5b7dfb3d197385bbe95859278c": "Ybodychange",
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7": "Ybodychange",
    "d358eb75b79b17f85ae9fd831a0bd065b87bf924": "Ybodychange",
    "7568e9c88cf470f63c2ab78c17d02865661d13fa": "Ybodychange",
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e": "Ybodychange",
    "bb4f277407ed89b7b19bc4d5ac1c038bdc1c6850": "Ybodychange",
    "50b1f9fc73bedd7b5bd5d7c7ec1a43b17dd117ac": "Ybodychange",
    "151c1a79526ef6260971c5a39befae86ffd3ec39": "Ybodychange",
    "2fbd0bfbebc345e7a2ce0aa13437804b33b8bdcc": "Ybodychange",
    "0b14427e6c081c8110eac7678b49c01010156946": "Ybodychange",
    "d2ca51b859d6400c6a0860984ddd6a06a559ef7e": "Ybodychange",
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6f5a36c13c4d2eb24e207aa99a9781c0be11660b": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-13656. fs -expunge to take a filesystem. Contributed by Shweta.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "30/05/19 1:21 PM",
      "commitName": "6f5a36c13c4d2eb24e207aa99a9781c0be11660b",
      "commitAuthor": "Shweta Yakkali",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 336.61,
      "commitsBetweenForRepo": 2521,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n-  public int run(String argv[]) throws Exception {\n+  public int run(String[] argv) {\n     // initialize FsShell\n     init();\n     Tracer tracer \u003d new Tracer.Builder(\"FsShell\").\n         conf(TraceUtils.wrapHadoopConf(SHELL_HTRACE_PREFIX, getConf())).\n         build();\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       printUsage(System.err);\n     } else {\n       String cmd \u003d argv[0];\n       Command instance \u003d null;\n       try {\n         instance \u003d commandFactory.getInstance(cmd);\n         if (instance \u003d\u003d null) {\n           throw new UnknownCommandException();\n         }\n         TraceScope scope \u003d tracer.newScope(instance.getCommandName());\n         if (scope.getSpan() !\u003d null) {\n           String args \u003d StringUtils.join(\" \", argv);\n           if (args.length() \u003e 2048) {\n             args \u003d args.substring(0, 2048);\n           }\n           scope.getSpan().addKVAnnotation(\"args\", args);\n         }\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n         } finally {\n           scope.close();\n         }\n       } catch (IllegalArgumentException e) {\n         if (e.getMessage() \u003d\u003d null) {\n           displayError(cmd, \"Null exception message\");\n           e.printStackTrace(System.err);\n         } else {\n           displayError(cmd, e.getLocalizedMessage());\n         }\n         printUsage(System.err);\n         if (instance !\u003d null) {\n           printInstanceUsage(System.err, instance);\n         }\n       } catch (Exception e) {\n         // instance.run catches IOE, so something is REALLY wrong if here\n         LOG.debug(\"Error\", e);\n         displayError(cmd, \"Fatal internal error\");\n         e.printStackTrace(System.err);\n       }\n     }\n     tracer.close();\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) {\n    // initialize FsShell\n    init();\n    Tracer tracer \u003d new Tracer.Builder(\"FsShell\").\n        conf(TraceUtils.wrapHadoopConf(SHELL_HTRACE_PREFIX, getConf())).\n        build();\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        TraceScope scope \u003d tracer.newScope(instance.getCommandName());\n        if (scope.getSpan() !\u003d null) {\n          String args \u003d StringUtils.join(\" \", argv);\n          if (args.length() \u003e 2048) {\n            args \u003d args.substring(0, 2048);\n          }\n          scope.getSpan().addKVAnnotation(\"args\", args);\n        }\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n        } finally {\n          scope.close();\n        }\n      } catch (IllegalArgumentException e) {\n        if (e.getMessage() \u003d\u003d null) {\n          displayError(cmd, \"Null exception message\");\n          e.printStackTrace(System.err);\n        } else {\n          displayError(cmd, e.getLocalizedMessage());\n        }\n        printUsage(System.err);\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    tracer.close();\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {
        "oldValue": "[Exception]",
        "newValue": "[]"
      }
    },
    "b606e025f10daed18b90b45ac00cd0c82e818581": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13824. FsShell can suppress the real error if no error message is present. Contributed by  John Zhuge.\n",
      "commitDate": "09/12/16 3:22 PM",
      "commitName": "b606e025f10daed18b90b45ac00cd0c82e818581",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "10/05/16 3:20 PM",
      "commitNameOld": "307db61aac9f4b51301ab9d4e74be7632c42d62f",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 213.04,
      "commitsBetweenForRepo": 1640,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,51 @@\n   public int run(String argv[]) throws Exception {\n     // initialize FsShell\n     init();\n     Tracer tracer \u003d new Tracer.Builder(\"FsShell\").\n         conf(TraceUtils.wrapHadoopConf(SHELL_HTRACE_PREFIX, getConf())).\n         build();\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       printUsage(System.err);\n     } else {\n       String cmd \u003d argv[0];\n       Command instance \u003d null;\n       try {\n         instance \u003d commandFactory.getInstance(cmd);\n         if (instance \u003d\u003d null) {\n           throw new UnknownCommandException();\n         }\n         TraceScope scope \u003d tracer.newScope(instance.getCommandName());\n         if (scope.getSpan() !\u003d null) {\n           String args \u003d StringUtils.join(\" \", argv);\n           if (args.length() \u003e 2048) {\n             args \u003d args.substring(0, 2048);\n           }\n           scope.getSpan().addKVAnnotation(\"args\", args);\n         }\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n         } finally {\n           scope.close();\n         }\n       } catch (IllegalArgumentException e) {\n-        displayError(cmd, e.getLocalizedMessage());\n+        if (e.getMessage() \u003d\u003d null) {\n+          displayError(cmd, \"Null exception message\");\n+          e.printStackTrace(System.err);\n+        } else {\n+          displayError(cmd, e.getLocalizedMessage());\n+        }\n         printUsage(System.err);\n         if (instance !\u003d null) {\n           printInstanceUsage(System.err, instance);\n         }\n       } catch (Exception e) {\n         // instance.run catches IOE, so something is REALLY wrong if here\n         LOG.debug(\"Error\", e);\n         displayError(cmd, \"Fatal internal error\");\n         e.printStackTrace(System.err);\n       }\n     }\n     tracer.close();\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n    Tracer tracer \u003d new Tracer.Builder(\"FsShell\").\n        conf(TraceUtils.wrapHadoopConf(SHELL_HTRACE_PREFIX, getConf())).\n        build();\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        TraceScope scope \u003d tracer.newScope(instance.getCommandName());\n        if (scope.getSpan() !\u003d null) {\n          String args \u003d StringUtils.join(\" \", argv);\n          if (args.length() \u003e 2048) {\n            args \u003d args.substring(0, 2048);\n          }\n          scope.getSpan().addKVAnnotation(\"args\", args);\n        }\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n        } finally {\n          scope.close();\n        }\n      } catch (IllegalArgumentException e) {\n        if (e.getMessage() \u003d\u003d null) {\n          displayError(cmd, \"Null exception message\");\n          e.printStackTrace(System.err);\n        } else {\n          displayError(cmd, e.getLocalizedMessage());\n        }\n        printUsage(System.err);\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    tracer.close();\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "307db61aac9f4b51301ab9d4e74be7632c42d62f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10172. hdfs erasurecode command should remove the redundant -usage option. Contributed by Yuanbo Liu.\n",
      "commitDate": "10/05/16 3:20 PM",
      "commitName": "307db61aac9f4b51301ab9d4e74be7632c42d62f",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "04/12/15 10:39 AM",
      "commitNameOld": "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 158.15,
      "commitsBetweenForRepo": 970,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   public int run(String argv[]) throws Exception {\n     // initialize FsShell\n     init();\n+    Tracer tracer \u003d new Tracer.Builder(\"FsShell\").\n+        conf(TraceUtils.wrapHadoopConf(SHELL_HTRACE_PREFIX, getConf())).\n+        build();\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       printUsage(System.err);\n     } else {\n       String cmd \u003d argv[0];\n       Command instance \u003d null;\n       try {\n         instance \u003d commandFactory.getInstance(cmd);\n         if (instance \u003d\u003d null) {\n           throw new UnknownCommandException();\n         }\n         TraceScope scope \u003d tracer.newScope(instance.getCommandName());\n         if (scope.getSpan() !\u003d null) {\n           String args \u003d StringUtils.join(\" \", argv);\n           if (args.length() \u003e 2048) {\n             args \u003d args.substring(0, 2048);\n           }\n           scope.getSpan().addKVAnnotation(\"args\", args);\n         }\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n         } finally {\n           scope.close();\n         }\n       } catch (IllegalArgumentException e) {\n         displayError(cmd, e.getLocalizedMessage());\n         printUsage(System.err);\n         if (instance !\u003d null) {\n           printInstanceUsage(System.err, instance);\n         }\n       } catch (Exception e) {\n         // instance.run catches IOE, so something is REALLY wrong if here\n         LOG.debug(\"Error\", e);\n         displayError(cmd, \"Fatal internal error\");\n         e.printStackTrace(System.err);\n       }\n     }\n     tracer.close();\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n    Tracer tracer \u003d new Tracer.Builder(\"FsShell\").\n        conf(TraceUtils.wrapHadoopConf(SHELL_HTRACE_PREFIX, getConf())).\n        build();\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        TraceScope scope \u003d tracer.newScope(instance.getCommandName());\n        if (scope.getSpan() !\u003d null) {\n          String args \u003d StringUtils.join(\" \", argv);\n          if (args.length() \u003e 2048) {\n            args \u003d args.substring(0, 2048);\n          }\n          scope.getSpan().addKVAnnotation(\"args\", args);\n        }\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n        } finally {\n          scope.close();\n        }\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        printUsage(System.err);\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    tracer.close();\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "892ade689f9bcce76daae8f66fc00a49bee8548e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9080. Update htrace version to 4.0.1 (cmccabe)\n",
      "commitDate": "28/09/15 7:42 AM",
      "commitName": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 1.94,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   public int run(String argv[]) throws Exception {\n     // initialize FsShell\n     init();\n-    traceSampler \u003d new SamplerBuilder(TraceUtils.\n-        wrapHadoopConf(SEHLL_HTRACE_PREFIX, getConf())).build();\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       printUsage(System.err);\n     } else {\n       String cmd \u003d argv[0];\n       Command instance \u003d null;\n       try {\n         instance \u003d commandFactory.getInstance(cmd);\n         if (instance \u003d\u003d null) {\n           throw new UnknownCommandException();\n         }\n-        TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n+        TraceScope scope \u003d tracer.newScope(instance.getCommandName());\n         if (scope.getSpan() !\u003d null) {\n           String args \u003d StringUtils.join(\" \", argv);\n           if (args.length() \u003e 2048) {\n             args \u003d args.substring(0, 2048);\n           }\n           scope.getSpan().addKVAnnotation(\"args\", args);\n         }\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n         } finally {\n           scope.close();\n         }\n       } catch (IllegalArgumentException e) {\n         displayError(cmd, e.getLocalizedMessage());\n         printUsage(System.err);\n         if (instance !\u003d null) {\n           printInstanceUsage(System.err, instance);\n         }\n       } catch (Exception e) {\n         // instance.run catches IOE, so something is REALLY wrong if here\n         LOG.debug(\"Error\", e);\n         displayError(cmd, \"Fatal internal error\");\n         e.printStackTrace(System.err);\n       }\n     }\n+    tracer.close();\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        TraceScope scope \u003d tracer.newScope(instance.getCommandName());\n        if (scope.getSpan() !\u003d null) {\n          String args \u003d StringUtils.join(\" \", argv);\n          if (args.length() \u003e 2048) {\n            args \u003d args.substring(0, 2048);\n          }\n          scope.getSpan().addKVAnnotation(\"args\", args);\n        }\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n        } finally {\n          scope.close();\n        }\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        printUsage(System.err);\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    tracer.close();\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "861b52db242f238d7e36ad75c158025be959a696": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12442. Display help if the command option to \u0027hdfs dfs\u0027 is not valid (Contributed by nijel)\n",
      "commitDate": "26/09/15 9:06 AM",
      "commitName": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "31/07/15 3:14 PM",
      "commitNameOld": "454da959c726528ac98dbca1b935a83ed4b9e235",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 56.74,
      "commitsBetweenForRepo": 329,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   public int run(String argv[]) throws Exception {\n     // initialize FsShell\n     init();\n     traceSampler \u003d new SamplerBuilder(TraceUtils.\n         wrapHadoopConf(SEHLL_HTRACE_PREFIX, getConf())).build();\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       printUsage(System.err);\n     } else {\n       String cmd \u003d argv[0];\n       Command instance \u003d null;\n       try {\n         instance \u003d commandFactory.getInstance(cmd);\n         if (instance \u003d\u003d null) {\n           throw new UnknownCommandException();\n         }\n         TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n         if (scope.getSpan() !\u003d null) {\n           String args \u003d StringUtils.join(\" \", argv);\n           if (args.length() \u003e 2048) {\n             args \u003d args.substring(0, 2048);\n           }\n           scope.getSpan().addKVAnnotation(\"args\", args);\n         }\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n         } finally {\n           scope.close();\n         }\n       } catch (IllegalArgumentException e) {\n         displayError(cmd, e.getLocalizedMessage());\n+        printUsage(System.err);\n         if (instance !\u003d null) {\n           printInstanceUsage(System.err, instance);\n         }\n       } catch (Exception e) {\n         // instance.run catches IOE, so something is REALLY wrong if here\n         LOG.debug(\"Error\", e);\n         displayError(cmd, \"Fatal internal error\");\n         e.printStackTrace(System.err);\n       }\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n    traceSampler \u003d new SamplerBuilder(TraceUtils.\n        wrapHadoopConf(SEHLL_HTRACE_PREFIX, getConf())).build();\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n        if (scope.getSpan() !\u003d null) {\n          String args \u003d StringUtils.join(\" \", argv);\n          if (args.length() \u003e 2048) {\n            args \u003d args.substring(0, 2048);\n          }\n          scope.getSpan().addKVAnnotation(\"args\", args);\n        }\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n        } finally {\n          scope.close();\n        }\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        printUsage(System.err);\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "454da959c726528ac98dbca1b935a83ed4b9e235": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12183. Annotate the HTrace span created by FsShell with the command-line arguments passed by the user (Masatake Iwasaki via Colin P.  McCabe)\n",
      "commitDate": "31/07/15 3:14 PM",
      "commitName": "454da959c726528ac98dbca1b935a83ed4b9e235",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "28/07/15 12:56 PM",
      "commitNameOld": "69b095730bd87706ddcbabeea6c513290ee4cdf5",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 3.1,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,43 @@\n   public int run(String argv[]) throws Exception {\n     // initialize FsShell\n     init();\n     traceSampler \u003d new SamplerBuilder(TraceUtils.\n         wrapHadoopConf(SEHLL_HTRACE_PREFIX, getConf())).build();\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       printUsage(System.err);\n     } else {\n       String cmd \u003d argv[0];\n       Command instance \u003d null;\n       try {\n         instance \u003d commandFactory.getInstance(cmd);\n         if (instance \u003d\u003d null) {\n           throw new UnknownCommandException();\n         }\n         TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n+        if (scope.getSpan() !\u003d null) {\n+          String args \u003d StringUtils.join(\" \", argv);\n+          if (args.length() \u003e 2048) {\n+            args \u003d args.substring(0, 2048);\n+          }\n+          scope.getSpan().addKVAnnotation(\"args\", args);\n+        }\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n         } finally {\n           scope.close();\n         }\n       } catch (IllegalArgumentException e) {\n         displayError(cmd, e.getLocalizedMessage());\n         if (instance !\u003d null) {\n           printInstanceUsage(System.err, instance);\n         }\n       } catch (Exception e) {\n         // instance.run catches IOE, so something is REALLY wrong if here\n         LOG.debug(\"Error\", e);\n         displayError(cmd, \"Fatal internal error\");\n         e.printStackTrace(System.err);\n       }\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n    traceSampler \u003d new SamplerBuilder(TraceUtils.\n        wrapHadoopConf(SEHLL_HTRACE_PREFIX, getConf())).build();\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n        if (scope.getSpan() !\u003d null) {\n          String args \u003d StringUtils.join(\" \", argv);\n          if (args.length() \u003e 2048) {\n            args \u003d args.substring(0, 2048);\n          }\n          scope.getSpan().addKVAnnotation(\"args\", args);\n        }\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n        } finally {\n          scope.close();\n        }\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "69b095730bd87706ddcbabeea6c513290ee4cdf5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12175. FsShell must load SpanReceierHost to support tracing (Masatake Iwasaki via Colin P. McCabe)\n",
      "commitDate": "28/07/15 12:56 PM",
      "commitName": "69b095730bd87706ddcbabeea6c513290ee4cdf5",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "30/06/15 4:46 PM",
      "commitNameOld": "ad60807238c4f7779cb0685e7d39ca0c50e01b2f",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 27.84,
      "commitsBetweenForRepo": 166,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public int run(String argv[]) throws Exception {\n     // initialize FsShell\n     init();\n     traceSampler \u003d new SamplerBuilder(TraceUtils.\n-        wrapHadoopConf(\"dfs.shell.htrace.\", getConf())).build();\n+        wrapHadoopConf(SEHLL_HTRACE_PREFIX, getConf())).build();\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       printUsage(System.err);\n     } else {\n       String cmd \u003d argv[0];\n       Command instance \u003d null;\n       try {\n         instance \u003d commandFactory.getInstance(cmd);\n         if (instance \u003d\u003d null) {\n           throw new UnknownCommandException();\n         }\n         TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n         } finally {\n           scope.close();\n         }\n       } catch (IllegalArgumentException e) {\n         displayError(cmd, e.getLocalizedMessage());\n         if (instance !\u003d null) {\n           printInstanceUsage(System.err, instance);\n         }\n       } catch (Exception e) {\n         // instance.run catches IOE, so something is REALLY wrong if here\n         LOG.debug(\"Error\", e);\n         displayError(cmd, \"Fatal internal error\");\n         e.printStackTrace(System.err);\n       }\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n    traceSampler \u003d new SamplerBuilder(TraceUtils.\n        wrapHadoopConf(SEHLL_HTRACE_PREFIX, getConf())).build();\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n        } finally {\n          scope.close();\n        }\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "ad60807238c4f7779cb0685e7d39ca0c50e01b2f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12124. Add HTrace support for FsShell (cmccabe)\n",
      "commitDate": "30/06/15 4:46 PM",
      "commitName": "ad60807238c4f7779cb0685e7d39ca0c50e01b2f",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "12/06/14 11:39 PM",
      "commitNameOld": "be3fdd1c40140e24df1a5414cf91537862b66e82",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 382.71,
      "commitsBetweenForRepo": 3297,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n   public int run(String argv[]) throws Exception {\n     // initialize FsShell\n     init();\n-\n+    traceSampler \u003d new SamplerBuilder(TraceUtils.\n+        wrapHadoopConf(\"dfs.shell.htrace.\", getConf())).build();\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       printUsage(System.err);\n     } else {\n       String cmd \u003d argv[0];\n       Command instance \u003d null;\n       try {\n         instance \u003d commandFactory.getInstance(cmd);\n         if (instance \u003d\u003d null) {\n           throw new UnknownCommandException();\n         }\n-        exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n+        TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n+        try {\n+          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n+        } finally {\n+          scope.close();\n+        }\n       } catch (IllegalArgumentException e) {\n         displayError(cmd, e.getLocalizedMessage());\n         if (instance !\u003d null) {\n           printInstanceUsage(System.err, instance);\n         }\n       } catch (Exception e) {\n         // instance.run catches IOE, so something is REALLY wrong if here\n         LOG.debug(\"Error\", e);\n         displayError(cmd, \"Fatal internal error\");\n         e.printStackTrace(System.err);\n       }\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n    traceSampler \u003d new SamplerBuilder(TraceUtils.\n        wrapHadoopConf(\"dfs.shell.htrace.\", getConf())).build();\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        TraceScope scope \u003d Trace.startSpan(instance.getCommandName(), traceSampler);\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n        } finally {\n          scope.close();\n        }\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    return exitCode;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    return exitCode;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FsShell.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FsShell.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    return exitCode;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FsShell.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FsShell.java"
      }
    },
    "44a35b5d9accc4ecf7b1bbf762e593540bafe6a3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7353. Cleanup FsShell and prevent masking of RTE stack traces. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1132764 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/11 1:53 PM",
      "commitName": "44a35b5d9accc4ecf7b1bbf762e593540bafe6a3",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/05/11 10:29 AM",
      "commitNameOld": "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 12.14,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,30 @@\n   public int run(String argv[]) throws Exception {\n-    // TODO: This isn\u0027t the best place, but this class is being abused with\n-    // subclasses which of course override this method.  There really needs\n-    // to be a better base class for all commands\n-    commandFactory.setConf(getConf());\n-    commandFactory.registerCommands(FsCommand.class);\n-    \n-    if (argv.length \u003c 1) {\n-      printUsage(\"\"); \n-      return -1;\n-    }\n+    // initialize FsShell\n+    init();\n \n     int exitCode \u003d -1;\n-    int i \u003d 0;\n-    String cmd \u003d argv[i++];\n-    // initialize FsShell\n-    try {\n-      init();\n-    } catch (RPC.VersionMismatch v) {\n-      LOG.debug(\"Version mismatch\", v);\n-      System.err.println(\"Version Mismatch between client and server\" +\n-                         \"... command aborted.\");\n-      return exitCode;\n-    } catch (IOException e) {\n-      LOG.debug(\"Error\", e);\n-      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n-          e.getLocalizedMessage());\n-      return exitCode;\n-    }\n-\n-    try {\n-      Command instance \u003d commandFactory.getInstance(cmd);\n-      if (instance !\u003d null) {\n-        exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n-      } else if (\"-help\".equals(cmd)) {\n-        if (i \u003c argv.length) {\n-          printHelp(argv[i]);\n-        } else {\n-          printHelp(\"\");\n+    if (argv.length \u003c 1) {\n+      printUsage(System.err);\n+    } else {\n+      String cmd \u003d argv[0];\n+      Command instance \u003d null;\n+      try {\n+        instance \u003d commandFactory.getInstance(cmd);\n+        if (instance \u003d\u003d null) {\n+          throw new UnknownCommandException();\n         }\n-      } else {\n-        System.err.println(cmd + \": Unknown command\");\n-        printUsage(\"\");\n-      }\n-    } catch (Exception e) {\n-      exitCode \u003d 1;\n-      LOG.debug(\"Error\", e);\n-      displayError(cmd, e);\n-      if (e instanceof IllegalArgumentException) {\n-        exitCode \u003d -1;\n-        printUsage(cmd);\n+        exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n+      } catch (IllegalArgumentException e) {\n+        displayError(cmd, e.getLocalizedMessage());\n+        if (instance !\u003d null) {\n+          printInstanceUsage(System.err, instance);\n+        }\n+      } catch (Exception e) {\n+        // instance.run catches IOE, so something is REALLY wrong if here\n+        LOG.debug(\"Error\", e);\n+        displayError(cmd, \"Fatal internal error\");\n+        e.printStackTrace(System.err);\n       }\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // initialize FsShell\n    init();\n\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      printUsage(System.err);\n    } else {\n      String cmd \u003d argv[0];\n      Command instance \u003d null;\n      try {\n        instance \u003d commandFactory.getInstance(cmd);\n        if (instance \u003d\u003d null) {\n          throw new UnknownCommandException();\n        }\n        exitCode \u003d instance.run(Arrays.copyOfRange(argv, 1, argv.length));\n      } catch (IllegalArgumentException e) {\n        displayError(cmd, e.getLocalizedMessage());\n        if (instance !\u003d null) {\n          printInstanceUsage(System.err, instance);\n        }\n      } catch (Exception e) {\n        // instance.run catches IOE, so something is REALLY wrong if here\n        LOG.debug(\"Error\", e);\n        displayError(cmd, \"Fatal internal error\");\n        e.printStackTrace(System.err);\n      }\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7320. Refactor the copy and move commands to conform to new FsCommand class. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1127591 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/05/11 10:29 AM",
      "commitName": "77b4fd6572d6f928ea5bd86c8b00caeba7bb3b99",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "16/05/11 5:53 PM",
      "commitNameOld": "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.69,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,55 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n-    //\n-    // verify that we have enough command line parameters\n-    //\n-    if (\"-put\".equals(cmd) ||\n-        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n-      if (argv.length \u003c 3) {\n-        printUsage(cmd);\n-        return exitCode;\n-      }\n-    } else if (\"-get\".equals(cmd) || \n-               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n-      if (argv.length \u003c 3) {\n-        printUsage(cmd);\n-        return exitCode;\n-      }\n-    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n-      if (argv.length \u003c 3) {\n-        printUsage(cmd);\n-        return exitCode;\n-      }\n-    }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n-    exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n-        try {\n-          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n-        } catch (Exception e) {\n-          exitCode \u003d -1;\n-          LOG.debug(\"Error\", e);\n-          instance.displayError(e);\n-          if (e instanceof IllegalArgumentException) {\n-            printUsage(cmd);\n-          }\n-        }\n-      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n-        Path[] srcs \u003d new Path[argv.length-2];\n-        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n-          srcs[j++] \u003d new Path(argv[i++]);\n-        copyFromLocal(srcs, argv[i++]);\n-      } else if (\"-moveFromLocal\".equals(cmd)) {\n-        Path[] srcs \u003d new Path[argv.length-2];\n-        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n-          srcs[j++] \u003d new Path(argv[i++]);\n-        moveFromLocal(srcs, argv[i++]);\n-      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n-        copyToLocal(argv, i);\n-      } else if (\"-moveToLocal\".equals(cmd)) {\n-        moveToLocal(argv[i++], new Path(argv[i++]));\n-      } else if (\"-mv\".equals(cmd)) {\n-        exitCode \u003d rename(argv, getConf());\n-      } else if (\"-cp\".equals(cmd)) {\n-        exitCode \u003d copy(argv, getConf());\n+        exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n-        exitCode \u003d -1;\n-        System.err.println(cmd.substring(1) + \": Unknown command\");\n+        System.err.println(cmd + \": Unknown command\");\n         printUsage(\"\");\n       }\n-    } catch (IllegalArgumentException arge) {\n-      LOG.debug(\"Error\", arge);\n-      exitCode \u003d -1;\n-      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n-      printUsage(cmd);\n-    } catch (Exception re) {\n-      LOG.debug(\"Error\", re);\n-      exitCode \u003d -1;\n-      displayError(cmd, re);\n-    } finally {\n+    } catch (Exception e) {\n+      exitCode \u003d 1;\n+      LOG.debug(\"Error\", e);\n+      displayError(cmd, e);\n+      if (e instanceof IllegalArgumentException) {\n+        exitCode \u003d -1;\n+        printUsage(cmd);\n+      }\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        System.err.println(cmd + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (Exception e) {\n      exitCode \u003d 1;\n      LOG.debug(\"Error\", e);\n      displayError(cmd, e);\n      if (e instanceof IllegalArgumentException) {\n        exitCode \u003d -1;\n        printUsage(cmd);\n      }\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7286. Refactor the du/dus/df commands to conform to new FsCommand class. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1103968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/11 5:53 PM",
      "commitName": "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "13/05/11 11:49 AM",
      "commitNameOld": "a8a336b1b5082dcab29c5fed45fed4b01312426d",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 3.25,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,117 +1,107 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n-      } else if (\"-df\".equals(cmd)) {\n-        if (argv.length-1 \u003e 0) {\n-          exitCode \u003d doall(cmd, argv, i);\n-        } else {\n-          df(null);\n-        }\n-      } else if (\"-du\".equals(cmd)) {\n-        du(argv, i);\n-      } else if (\"-dus\".equals(cmd)) {\n-        dus(argv, i);\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       displayError(cmd, re);\n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      displayError(cmd, re);\n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "a8a336b1b5082dcab29c5fed45fed4b01312426d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7285. Refactor the test command to conform to new FsCommand class. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1102861 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/11 11:49 AM",
      "commitName": "a8a336b1b5082dcab29c5fed45fed4b01312426d",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/05/11 2:12 PM",
      "commitNameOld": "7f77fad79af0010cd22ca773d9af27110429d3a2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,119 +1,117 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n-    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n+    if (\"-put\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n-      } else if (\"-test\".equals(cmd)) {\n-        exitCode \u003d test(argv, i);\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       displayError(cmd, re);\n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      displayError(cmd, re);\n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "7f77fad79af0010cd22ca773d9af27110429d3a2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7267. Refactor the rm/rmr/expunge commands to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1102093 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/11 2:12 PM",
      "commitName": "7f77fad79af0010cd22ca773d9af27110429d3a2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/05/11 1:20 PM",
      "commitNameOld": "cd2079f0e4aa292492b5d6c0d0af5bfa41a39043",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,130 +1,119 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n-    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd)) {\n-      if (argv.length \u003c 2) {\n-        printUsage(cmd);\n-        return exitCode;\n-      }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n-      } else if (\"-rm\".equals(cmd)) {\n-        exitCode \u003d doall(cmd, argv, i);\n-      } else if (\"-rmr\".equals(cmd)) {\n-        exitCode \u003d doall(cmd, argv, i);\n-      } else if (\"-expunge\".equals(cmd)) {\n-        expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       displayError(cmd, re);\n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      displayError(cmd, re);\n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "cd2079f0e4aa292492b5d6c0d0af5bfa41a39043": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7237. Refactor the touchz commands to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1102068 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/11 1:20 PM",
      "commitName": "cd2079f0e4aa292492b5d6c0d0af5bfa41a39043",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/05/11 11:32 AM",
      "commitNameOld": "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,133 +1,130 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n-    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n-               \"-touchz\".equals(cmd)) {\n+    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n-      } else if (\"-touchz\".equals(cmd)) {\n-        exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       displayError(cmd, re);\n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      displayError(cmd, re);\n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7275. Refactor the stat commands to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1102012 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/11 11:32 AM",
      "commitName": "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/05/11 2:29 PM",
      "commitNameOld": "a5290c9eca69027cff2448d05fee6983cbb54cd7",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,139 +1,133 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n-               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd)) {\n+               \"-touchz\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n-      } else if (\"-stat\".equals(cmd)) {\n-        if (i + 1 \u003c argv.length) {\n-          stat(argv[i++].toCharArray(), argv[i++]);\n-        } else {\n-          stat(\"%y\".toCharArray(), argv[i]);\n-        }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       displayError(cmd, re);\n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-touchz\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      displayError(cmd, re);\n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "a5290c9eca69027cff2448d05fee6983cbb54cd7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7271. Standardize shell command error messages.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101653 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/11 2:29 PM",
      "commitName": "a5290c9eca69027cff2448d05fee6983cbb54cd7",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/05/11 1:08 PM",
      "commitNameOld": "3337cdb3121d926301a3cca17abef029abdb2ff3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,162 +1,139 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n-    } catch (RemoteException e) {\n-      LOG.debug(\"Error\", e);\n-      //\n-      // This is a error returned by hadoop server. Print\n-      // out the first line of the error mesage, ignore the stack trace.\n-      exitCode \u003d -1;\n-      try {\n-        String[] content;\n-        content \u003d e.getLocalizedMessage().split(\"\\n\");\n-        System.err.println(cmd.substring(1) + \": \" + \n-                           content[0]);\n-      } catch (Exception ex) {\n-        System.err.println(cmd.substring(1) + \": \" + \n-                           ex.getLocalizedMessage());  \n-      }\n-    } catch (IOException e) {\n-      LOG.debug(\"Error\", e);\n-      //\n-      // IO exception encountered locally.\n-      // \n-      exitCode \u003d -1;\n-      System.err.println(cmd.substring(1) + \": \" + \n-                         e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n-      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n+      displayError(cmd, re);\n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      displayError(cmd, re);\n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "3337cdb3121d926301a3cca17abef029abdb2ff3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7238. Refactor the cat and text commands to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101199 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/11 1:08 PM",
      "commitName": "3337cdb3121d926301a3cca17abef029abdb2ff3",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/05/11 1:55 PM",
      "commitNameOld": "4de502c7c050373efe8620b320ab4413bd54cfa2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,168 +1,162 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n-               \"-cat\".equals(cmd) ||\n-               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n-               \"-text\".equals(cmd)) {\n+               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n-      } else if (\"-cat\".equals(cmd)) {\n-        exitCode \u003d doall(cmd, argv, i);\n-      } else if (\"-text\".equals(cmd)) {\n-        exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "4de502c7c050373efe8620b320ab4413bd54cfa2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7251. Refactor the getmerge command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 1:55 PM",
      "commitName": "4de502c7c050373efe8620b320ab4413bd54cfa2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/05/11 1:14 PM",
      "commitNameOld": "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,173 +1,168 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n-      } else if (\"-getmerge\".equals(cmd)) {\n-        if (argv.length\u003ei+2)\n-          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n-        else\n-          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7249. Refactor the chmod/chown/chgrp command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100356 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 1:14 PM",
      "commitName": "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/05/11 3:48 PM",
      "commitNameOld": "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,177 +1,173 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n-      } else if (\"-chmod\".equals(cmd) || \n-                 \"-chown\".equals(cmd) ||\n-                 \"-chgrp\".equals(cmd)) {\n-        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "b9599b26dc92634674e9c609b6df9b8d2c408e6e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7250. Refactor the setrep command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099633 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/11 3:48 PM",
      "commitName": "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/05/11 2:34 PM",
      "commitNameOld": "369a20391555f9c0ca9bd5384435be12770942aa",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,179 +1,177 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n-      } else if (\"-setrep\".equals(cmd)) {\n-        setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "369a20391555f9c0ca9bd5384435be12770942aa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/11 2:34 PM",
      "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/04/11 9:13 PM",
      "commitNameOld": "7ebfabc65a1c4a5b7dfb3d197385bbe95859278c",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.72,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,181 +1,179 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n-               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n+               \"-cat\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n-      } else if (\"-mkdir\".equals(cmd)) {\n-        exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "7ebfabc65a1c4a5b7dfb3d197385bbe95859278c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7235. Refactor the tail command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1096988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/11 9:13 PM",
      "commitName": "7ebfabc65a1c4a5b7dfb3d197385bbe95859278c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/04/11 10:08 AM",
      "commitNameOld": "e0cc26093c99162f3a78859ecd4c6337cfd49d80",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 1.46,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,183 +1,181 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n-      } else if (\"-tail\".equals(cmd)) {\n-        tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7233. Refactor ls to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1095761 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/04/11 9:05 AM",
      "commitName": "99ebad8e757e90f6e036fc213d99f82dec7b80d7",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/04/11 2:24 PM",
      "commitNameOld": "6e74a3592cbfa976f758dbf50654a1d00d23c270",
      "commitAuthorOld": "Boris Shkolnik",
      "daysBetweenCommits": 6.78,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,195 +1,183 @@\n   public int run(String argv[]) throws Exception {\n     // TODO: This isn\u0027t the best place, but this class is being abused with\n     // subclasses which of course override this method.  There really needs\n     // to be a better base class for all commands\n     commandFactory.setConf(getConf());\n     commandFactory.registerCommands(FsCommand.class);\n     \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       Command instance \u003d commandFactory.getInstance(cmd);\n       if (instance !\u003d null) {\n         try {\n           exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n         } catch (Exception e) {\n           exitCode \u003d -1;\n           LOG.debug(\"Error\", e);\n           instance.displayError(e);\n           if (e instanceof IllegalArgumentException) {\n             printUsage(cmd);\n           }\n         }\n       } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n-      } else if (\"-ls\".equals(cmd)) {\n-        if (i \u003c argv.length) {\n-          exitCode \u003d doall(cmd, argv, i);\n-        } else {\n-          exitCode \u003d ls(Path.CUR_DIR, false);\n-        } \n-      } else if (\"-lsr\".equals(cmd)) {\n-        if (i \u003c argv.length) {\n-          exitCode \u003d doall(cmd, argv, i);\n-        } else {\n-          exitCode \u003d ls(Path.CUR_DIR, true);\n-        } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "d358eb75b79b17f85ae9fd831a0bd065b87bf924": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7224. Add CommandFactory to shell.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1091902 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/04/11 1:23 PM",
      "commitName": "d358eb75b79b17f85ae9fd831a0bd065b87bf924",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "08/04/11 4:07 PM",
      "commitNameOld": "7568e9c88cf470f63c2ab78c17d02865661d13fa",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.89,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,184 +1,195 @@\n   public int run(String argv[]) throws Exception {\n-\n+    // TODO: This isn\u0027t the best place, but this class is being abused with\n+    // subclasses which of course override this method.  There really needs\n+    // to be a better base class for all commands\n+    commandFactory.setConf(getConf());\n+    commandFactory.registerCommands(FsCommand.class);\n+    \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n-      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n+      Command instance \u003d commandFactory.getInstance(cmd);\n+      if (instance !\u003d null) {\n+        try {\n+          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n+        } catch (Exception e) {\n+          exitCode \u003d -1;\n+          LOG.debug(\"Error\", e);\n+          instance.displayError(e);\n+          if (e instanceof IllegalArgumentException) {\n+            printUsage(cmd);\n+          }\n+        }\n+      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n-      } else if (\"-count\".equals(cmd)) {\n-        // TODO: next two lines are a temporary crutch until this entire\n-        // block is overhauled\n-        Count runner \u003d ReflectionUtils.newInstance(Count.class, getConf());\n-        runner.setCommandName(cmd); // TODO: will change with factory\n-        exitCode \u003d runner.run(Arrays.copyOfRange(argv, 1, argv.length));\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    // TODO: This isn\u0027t the best place, but this class is being abused with\n    // subclasses which of course override this method.  There really needs\n    // to be a better base class for all commands\n    commandFactory.setConf(getConf());\n    commandFactory.registerCommands(FsCommand.class);\n    \n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      Command instance \u003d commandFactory.getInstance(cmd);\n      if (instance !\u003d null) {\n        try {\n          exitCode \u003d instance.run(Arrays.copyOfRange(argv, i, argv.length));\n        } catch (Exception e) {\n          exitCode \u003d -1;\n          LOG.debug(\"Error\", e);\n          instance.displayError(e);\n          if (e instanceof IllegalArgumentException) {\n            printUsage(cmd);\n          }\n        }\n      } else if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "7568e9c88cf470f63c2ab78c17d02865661d13fa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7216. Add FsCommand.runAll() with deprecated annotation for the transition of Command base class improvement.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1090485 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/04/11 4:07 PM",
      "commitName": "7568e9c88cf470f63c2ab78c17d02865661d13fa",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "07/04/11 2:59 PM",
      "commitNameOld": "a65753ddac34a114c51cb0010ee39a9af48b4f9e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,186 +1,184 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (\"-count\".equals(cmd)) {\n         // TODO: next two lines are a temporary crutch until this entire\n         // block is overhauled\n-        LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e(Arrays.asList(argv));\n-        String cmdName \u003d args.removeFirst();\n         Count runner \u003d ReflectionUtils.newInstance(Count.class, getConf());\n-        runner.setCommandName(cmdName); // TODO: will change with factory\n-        exitCode \u003d runner.run(args);\n+        runner.setCommandName(cmd); // TODO: will change with factory\n+        exitCode \u003d runner.run(Arrays.copyOfRange(argv, 1, argv.length));\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-count\".equals(cmd)) {\n        // TODO: next two lines are a temporary crutch until this entire\n        // block is overhauled\n        Count runner \u003d ReflectionUtils.newInstance(Count.class, getConf());\n        runner.setCommandName(cmd); // TODO: will change with factory\n        exitCode \u003d runner.run(Arrays.copyOfRange(argv, 1, argv.length));\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7202. Improve shell Command base class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1090039 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/04/11 2:59 PM",
      "commitName": "a65753ddac34a114c51cb0010ee39a9af48b4f9e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/03/11 5:39 PM",
      "commitNameOld": "bb4f277407ed89b7b19bc4d5ac1c038bdc1c6850",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 9.89,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,180 +1,186 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n-      } else if (Count.matches(cmd)) {\n-        exitCode \u003d new Count(argv, i, getConf()).runAll();\n+      } else if (\"-count\".equals(cmd)) {\n+        // TODO: next two lines are a temporary crutch until this entire\n+        // block is overhauled\n+        LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e(Arrays.asList(argv));\n+        String cmdName \u003d args.removeFirst();\n+        Count runner \u003d ReflectionUtils.newInstance(Count.class, getConf());\n+        runner.setCommandName(cmdName); // TODO: will change with factory\n+        exitCode \u003d runner.run(args);\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-count\".equals(cmd)) {\n        // TODO: next two lines are a temporary crutch until this entire\n        // block is overhauled\n        LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e(Arrays.asList(argv));\n        String cmdName \u003d args.removeFirst();\n        Count runner \u003d ReflectionUtils.newInstance(Count.class, getConf());\n        runner.setCommandName(cmdName); // TODO: will change with factory\n        exitCode \u003d runner.run(args);\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "bb4f277407ed89b7b19bc4d5ac1c038bdc1c6850": {
      "type": "Ybodychange",
      "commitMessage": "Revert HADOOP-7202 since HDFS cannot be compiled.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1086455 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/11 5:39 PM",
      "commitName": "bb4f277407ed89b7b19bc4d5ac1c038bdc1c6850",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "28/03/11 4:45 PM",
      "commitNameOld": "50b1f9fc73bedd7b5bd5d7c7ec1a43b17dd117ac",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,185 +1,180 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n-      } else if (\"-count\".equals(cmd)) {\n-        // TODO: next two lines are a temporary crutch until this entire\n-        // block is overhauled\n-        LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e(Arrays.asList(argv));\n-        args.removeFirst();\n-        Count runner \u003d ReflectionUtils.newInstance(Count.class, getConf());\n-        exitCode \u003d runner.run(cmd, args);\n+      } else if (Count.matches(cmd)) {\n+        exitCode \u003d new Count(argv, i, getConf()).runAll();\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (Count.matches(cmd)) {\n        exitCode \u003d new Count(argv, i, getConf()).runAll();\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "50b1f9fc73bedd7b5bd5d7c7ec1a43b17dd117ac": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7202. Improve shell Command base class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1086446 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/11 4:45 PM",
      "commitName": "50b1f9fc73bedd7b5bd5d7c7ec1a43b17dd117ac",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/03/11 10:23 AM",
      "commitNameOld": "43e800e1fff4291d17ad1cb461a39cf0131f540e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.27,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,180 +1,185 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n-      } else if (Count.matches(cmd)) {\n-        exitCode \u003d new Count(argv, i, getConf()).runAll();\n+      } else if (\"-count\".equals(cmd)) {\n+        // TODO: next two lines are a temporary crutch until this entire\n+        // block is overhauled\n+        LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e(Arrays.asList(argv));\n+        args.removeFirst();\n+        Count runner \u003d ReflectionUtils.newInstance(Count.class, getConf());\n+        exitCode \u003d runner.run(cmd, args);\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (\"-count\".equals(cmd)) {\n        // TODO: next two lines are a temporary crutch until this entire\n        // block is overhauled\n        LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e(Arrays.asList(argv));\n        args.removeFirst();\n        Count runner \u003d ReflectionUtils.newInstance(Count.class, getConf());\n        exitCode \u003d runner.run(cmd, args);\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "151c1a79526ef6260971c5a39befae86ffd3ec39": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7204. remove local unused fs variable from CmdHandler and FsShellPermissions.changePermissions\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1084415 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/11 4:54 PM",
      "commitName": "151c1a79526ef6260971c5a39befae86ffd3ec39",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "04/03/11 1:41 PM",
      "commitNameOld": "f2ff6cca376c4ade339affb80655db35aff866a7",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,180 +1,180 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) {\n       LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n-        exitCode \u003d FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n+        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (Count.matches(cmd)) {\n         exitCode \u003d new Count(argv, i, getConf()).runAll();\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (Count.matches(cmd)) {\n        exitCode \u003d new Count(argv, i, getConf()).runAll();\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "2fbd0bfbebc345e7a2ce0aa13437804b33b8bdcc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7114. FsShell should dump all exceptions at DEBUG level. Contributed by todd.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1076296 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/11 9:09 AM",
      "commitName": "2fbd0bfbebc345e7a2ce0aa13437804b33b8bdcc",
      "commitAuthor": "Thomas White",
      "commitDateOld": "29/09/10 7:59 PM",
      "commitNameOld": "6333b3e485dc76a7505bf74e041e274e0a8e6faf",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 153.59,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,174 +1,180 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n-    } catch (RPC.VersionMismatch v) { \n+    } catch (RPC.VersionMismatch v) {\n+      LOG.debug(\"Version mismatch\", v);\n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n+      LOG.debug(\"Error\", e);\n       System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n           e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (Count.matches(cmd)) {\n         exitCode \u003d new Count(argv, i, getConf()).runAll();\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n+      LOG.debug(\"Error\", arge);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n+      LOG.debug(\"Error\", e);\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n+      LOG.debug(\"Error\", e);\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n+      LOG.debug(\"Error\", re);\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) {\n      LOG.debug(\"Version mismatch\", v);\n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (Count.matches(cmd)) {\n        exitCode \u003d new Count(argv, i, getConf()).runAll();\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      LOG.debug(\"Error\", arge);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      LOG.debug(\"Error\", e);\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      LOG.debug(\"Error\", re);\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "0b14427e6c081c8110eac7678b49c01010156946": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6627. \u0027Bad Connection to FS\u0027 message in FSShell should print message from the exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@945940 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/10 3:38 PM",
      "commitName": "0b14427e6c081c8110eac7678b49c01010156946",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "28/04/10 10:27 AM",
      "commitNameOld": "d2ca51b859d6400c6a0860984ddd6a06a559ef7e",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 20.22,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,173 +1,174 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) { \n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n-      System.err.println(\"Bad connection to FS. command aborted.\");\n+      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n+          e.getLocalizedMessage());\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         exitCode \u003d FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (Count.matches(cmd)) {\n         exitCode \u003d new Count(argv, i, getConf()).runAll();\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) { \n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      System.err.println(\"Bad connection to FS. Command aborted. Exception: \" +\n          e.getLocalizedMessage());\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (Count.matches(cmd)) {\n        exitCode \u003d new Count(argv, i, getConf()).runAll();\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "d2ca51b859d6400c6a0860984ddd6a06a559ef7e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6701. Fix incorrect exit codes returned from chgrp, chown and chgrp commands from FsShell. Contributed by Ravi Phulari.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@939016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/04/10 10:27 AM",
      "commitName": "d2ca51b859d6400c6a0860984ddd6a06a559ef7e",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "19/03/10 4:52 PM",
      "commitNameOld": "f32ffc750a3107a9b9b60eda8855973f00ec1de9",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 39.73,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,173 +1,173 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) { \n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       System.err.println(\"Bad connection to FS. command aborted.\");\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n-        FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n+        exitCode \u003d FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n         du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n         dus(argv, i);\n       } else if (Count.matches(cmd)) {\n         exitCode \u003d new Count(argv, i, getConf()).runAll();\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) { \n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      System.err.println(\"Bad connection to FS. command aborted.\");\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        exitCode \u003d FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (Count.matches(cmd)) {\n        exitCode \u003d new Count(argv, i, getConf()).runAll();\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58": {
      "type": "Ybodychange",
      "commitMessage": "Merged src/core, src/test/core, src/contrib/eclipse-plugin, and\nsrc/contrib/ec2 from trunk 776174:784663\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/09 1:28 PM",
      "commitName": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 27.67,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,181 +1,173 @@\n   public int run(String argv[]) throws Exception {\n \n     if (argv.length \u003c 1) {\n       printUsage(\"\"); \n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n         \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-get\".equals(cmd) || \n                \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n       if (argv.length \u003c 3) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n                \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n                \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n                \"-text\".equals(cmd)) {\n       if (argv.length \u003c 2) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     // initialize FsShell\n     try {\n       init();\n     } catch (RPC.VersionMismatch v) { \n       System.err.println(\"Version Mismatch between client and server\" +\n                          \"... command aborted.\");\n       return exitCode;\n     } catch (IOException e) {\n       System.err.println(\"Bad connection to FS. command aborted.\");\n       return exitCode;\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         copyFromLocal(srcs, argv[i++]);\n       } else if (\"-moveFromLocal\".equals(cmd)) {\n         Path[] srcs \u003d new Path[argv.length-2];\n         for (int j\u003d0 ; i \u003c argv.length-1 ;) \n           srcs[j++] \u003d new Path(argv[i++]);\n         moveFromLocal(srcs, argv[i++]);\n       } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n         copyToLocal(argv, i);\n       } else if (\"-getmerge\".equals(cmd)) {\n         if (argv.length\u003ei+2)\n           copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n         else\n           copyMergeToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-cat\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-text\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-moveToLocal\".equals(cmd)) {\n         moveToLocal(argv[i++], new Path(argv[i++]));\n       } else if (\"-setrep\".equals(cmd)) {\n         setReplication(argv, i);           \n       } else if (\"-chmod\".equals(cmd) || \n                  \"-chown\".equals(cmd) ||\n                  \"-chgrp\".equals(cmd)) {\n         FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n       } else if (\"-ls\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, false);\n         } \n       } else if (\"-lsr\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           exitCode \u003d ls(Path.CUR_DIR, true);\n         } \n       } else if (\"-mv\".equals(cmd)) {\n         exitCode \u003d rename(argv, getConf());\n       } else if (\"-cp\".equals(cmd)) {\n         exitCode \u003d copy(argv, getConf());\n       } else if (\"-rm\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-rmr\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-expunge\".equals(cmd)) {\n         expunge();\n       } else if (\"-df\".equals(cmd)) {\n         if (argv.length-1 \u003e 0) {\n           exitCode \u003d doall(cmd, argv, i);\n         } else {\n           df(null);\n         }\n       } else if (\"-du\".equals(cmd)) {\n-        if (i \u003c argv.length) {\n-          exitCode \u003d doall(cmd, argv, i);\n-        } else {\n-          du(\".\");\n-        }\n+        du(argv, i);\n       } else if (\"-dus\".equals(cmd)) {\n-        if (i \u003c argv.length) {\n-          exitCode \u003d doall(cmd, argv, i);\n-        } else {\n-          dus(\".\");\n-        }         \n+        dus(argv, i);\n       } else if (Count.matches(cmd)) {\n         exitCode \u003d new Count(argv, i, getConf()).runAll();\n       } else if (\"-mkdir\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-touchz\".equals(cmd)) {\n         exitCode \u003d doall(cmd, argv, i);\n       } else if (\"-test\".equals(cmd)) {\n         exitCode \u003d test(argv, i);\n       } else if (\"-stat\".equals(cmd)) {\n         if (i + 1 \u003c argv.length) {\n           stat(argv[i++].toCharArray(), argv[i++]);\n         } else {\n           stat(\"%y\".toCharArray(), argv[i]);\n         }\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c argv.length) {\n           printHelp(argv[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else if (\"-tail\".equals(cmd)) {\n         tail(argv, i);           \n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n       }\n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \" + \n                            content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \" + \n                            ex.getLocalizedMessage());  \n       }\n     } catch (IOException e) {\n       //\n       // IO exception encountered locally.\n       // \n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + \n                          e.getLocalizedMessage());  \n     } catch (Exception re) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n     } finally {\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) { \n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      System.err.println(\"Bad connection to FS. command aborted.\");\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        du(argv, i);\n      } else if (\"-dus\".equals(cmd)) {\n        dus(argv, i);\n      } else if (Count.matches(cmd)) {\n        exitCode \u003d new Count(argv, i, getConf()).runAll();\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,181 @@\n+  public int run(String argv[]) throws Exception {\n+\n+    if (argv.length \u003c 1) {\n+      printUsage(\"\"); \n+      return -1;\n+    }\n+\n+    int exitCode \u003d -1;\n+    int i \u003d 0;\n+    String cmd \u003d argv[i++];\n+    //\n+    // verify that we have enough command line parameters\n+    //\n+    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n+        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n+      if (argv.length \u003c 3) {\n+        printUsage(cmd);\n+        return exitCode;\n+      }\n+    } else if (\"-get\".equals(cmd) || \n+               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n+      if (argv.length \u003c 3) {\n+        printUsage(cmd);\n+        return exitCode;\n+      }\n+    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n+      if (argv.length \u003c 3) {\n+        printUsage(cmd);\n+        return exitCode;\n+      }\n+    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n+               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n+               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n+               \"-text\".equals(cmd)) {\n+      if (argv.length \u003c 2) {\n+        printUsage(cmd);\n+        return exitCode;\n+      }\n+    }\n+    // initialize FsShell\n+    try {\n+      init();\n+    } catch (RPC.VersionMismatch v) { \n+      System.err.println(\"Version Mismatch between client and server\" +\n+                         \"... command aborted.\");\n+      return exitCode;\n+    } catch (IOException e) {\n+      System.err.println(\"Bad connection to FS. command aborted.\");\n+      return exitCode;\n+    }\n+\n+    exitCode \u003d 0;\n+    try {\n+      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n+        Path[] srcs \u003d new Path[argv.length-2];\n+        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n+          srcs[j++] \u003d new Path(argv[i++]);\n+        copyFromLocal(srcs, argv[i++]);\n+      } else if (\"-moveFromLocal\".equals(cmd)) {\n+        Path[] srcs \u003d new Path[argv.length-2];\n+        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n+          srcs[j++] \u003d new Path(argv[i++]);\n+        moveFromLocal(srcs, argv[i++]);\n+      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n+        copyToLocal(argv, i);\n+      } else if (\"-getmerge\".equals(cmd)) {\n+        if (argv.length\u003ei+2)\n+          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n+        else\n+          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n+      } else if (\"-cat\".equals(cmd)) {\n+        exitCode \u003d doall(cmd, argv, i);\n+      } else if (\"-text\".equals(cmd)) {\n+        exitCode \u003d doall(cmd, argv, i);\n+      } else if (\"-moveToLocal\".equals(cmd)) {\n+        moveToLocal(argv[i++], new Path(argv[i++]));\n+      } else if (\"-setrep\".equals(cmd)) {\n+        setReplication(argv, i);           \n+      } else if (\"-chmod\".equals(cmd) || \n+                 \"-chown\".equals(cmd) ||\n+                 \"-chgrp\".equals(cmd)) {\n+        FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n+      } else if (\"-ls\".equals(cmd)) {\n+        if (i \u003c argv.length) {\n+          exitCode \u003d doall(cmd, argv, i);\n+        } else {\n+          exitCode \u003d ls(Path.CUR_DIR, false);\n+        } \n+      } else if (\"-lsr\".equals(cmd)) {\n+        if (i \u003c argv.length) {\n+          exitCode \u003d doall(cmd, argv, i);\n+        } else {\n+          exitCode \u003d ls(Path.CUR_DIR, true);\n+        } \n+      } else if (\"-mv\".equals(cmd)) {\n+        exitCode \u003d rename(argv, getConf());\n+      } else if (\"-cp\".equals(cmd)) {\n+        exitCode \u003d copy(argv, getConf());\n+      } else if (\"-rm\".equals(cmd)) {\n+        exitCode \u003d doall(cmd, argv, i);\n+      } else if (\"-rmr\".equals(cmd)) {\n+        exitCode \u003d doall(cmd, argv, i);\n+      } else if (\"-expunge\".equals(cmd)) {\n+        expunge();\n+      } else if (\"-df\".equals(cmd)) {\n+        if (argv.length-1 \u003e 0) {\n+          exitCode \u003d doall(cmd, argv, i);\n+        } else {\n+          df(null);\n+        }\n+      } else if (\"-du\".equals(cmd)) {\n+        if (i \u003c argv.length) {\n+          exitCode \u003d doall(cmd, argv, i);\n+        } else {\n+          du(\".\");\n+        }\n+      } else if (\"-dus\".equals(cmd)) {\n+        if (i \u003c argv.length) {\n+          exitCode \u003d doall(cmd, argv, i);\n+        } else {\n+          dus(\".\");\n+        }         \n+      } else if (Count.matches(cmd)) {\n+        exitCode \u003d new Count(argv, i, getConf()).runAll();\n+      } else if (\"-mkdir\".equals(cmd)) {\n+        exitCode \u003d doall(cmd, argv, i);\n+      } else if (\"-touchz\".equals(cmd)) {\n+        exitCode \u003d doall(cmd, argv, i);\n+      } else if (\"-test\".equals(cmd)) {\n+        exitCode \u003d test(argv, i);\n+      } else if (\"-stat\".equals(cmd)) {\n+        if (i + 1 \u003c argv.length) {\n+          stat(argv[i++].toCharArray(), argv[i++]);\n+        } else {\n+          stat(\"%y\".toCharArray(), argv[i]);\n+        }\n+      } else if (\"-help\".equals(cmd)) {\n+        if (i \u003c argv.length) {\n+          printHelp(argv[i]);\n+        } else {\n+          printHelp(\"\");\n+        }\n+      } else if (\"-tail\".equals(cmd)) {\n+        tail(argv, i);           \n+      } else {\n+        exitCode \u003d -1;\n+        System.err.println(cmd.substring(1) + \": Unknown command\");\n+        printUsage(\"\");\n+      }\n+    } catch (IllegalArgumentException arge) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n+      printUsage(cmd);\n+    } catch (RemoteException e) {\n+      //\n+      // This is a error returned by hadoop server. Print\n+      // out the first line of the error mesage, ignore the stack trace.\n+      exitCode \u003d -1;\n+      try {\n+        String[] content;\n+        content \u003d e.getLocalizedMessage().split(\"\\n\");\n+        System.err.println(cmd.substring(1) + \": \" + \n+                           content[0]);\n+      } catch (Exception ex) {\n+        System.err.println(cmd.substring(1) + \": \" + \n+                           ex.getLocalizedMessage());  \n+      }\n+    } catch (IOException e) {\n+      //\n+      // IO exception encountered locally.\n+      // \n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \" + \n+                         e.getLocalizedMessage());  \n+    } catch (Exception re) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n+    } finally {\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n\n    if (argv.length \u003c 1) {\n      printUsage(\"\"); \n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-put\".equals(cmd) || \"-test\".equals(cmd) ||\n        \"-copyFromLocal\".equals(cmd) || \"-moveFromLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-get\".equals(cmd) || \n               \"-copyToLocal\".equals(cmd) || \"-moveToLocal\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-mv\".equals(cmd) || \"-cp\".equals(cmd)) {\n      if (argv.length \u003c 3) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-rm\".equals(cmd) || \"-rmr\".equals(cmd) ||\n               \"-cat\".equals(cmd) || \"-mkdir\".equals(cmd) ||\n               \"-touchz\".equals(cmd) || \"-stat\".equals(cmd) ||\n               \"-text\".equals(cmd)) {\n      if (argv.length \u003c 2) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    // initialize FsShell\n    try {\n      init();\n    } catch (RPC.VersionMismatch v) { \n      System.err.println(\"Version Mismatch between client and server\" +\n                         \"... command aborted.\");\n      return exitCode;\n    } catch (IOException e) {\n      System.err.println(\"Bad connection to FS. command aborted.\");\n      return exitCode;\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-put\".equals(cmd) || \"-copyFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        copyFromLocal(srcs, argv[i++]);\n      } else if (\"-moveFromLocal\".equals(cmd)) {\n        Path[] srcs \u003d new Path[argv.length-2];\n        for (int j\u003d0 ; i \u003c argv.length-1 ;) \n          srcs[j++] \u003d new Path(argv[i++]);\n        moveFromLocal(srcs, argv[i++]);\n      } else if (\"-get\".equals(cmd) || \"-copyToLocal\".equals(cmd)) {\n        copyToLocal(argv, i);\n      } else if (\"-getmerge\".equals(cmd)) {\n        if (argv.length\u003ei+2)\n          copyMergeToLocal(argv[i++], new Path(argv[i++]), Boolean.parseBoolean(argv[i++]));\n        else\n          copyMergeToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-cat\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-text\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-moveToLocal\".equals(cmd)) {\n        moveToLocal(argv[i++], new Path(argv[i++]));\n      } else if (\"-setrep\".equals(cmd)) {\n        setReplication(argv, i);           \n      } else if (\"-chmod\".equals(cmd) || \n                 \"-chown\".equals(cmd) ||\n                 \"-chgrp\".equals(cmd)) {\n        FsShellPermissions.changePermissions(fs, cmd, argv, i, this);\n      } else if (\"-ls\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, false);\n        } \n      } else if (\"-lsr\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          exitCode \u003d ls(Path.CUR_DIR, true);\n        } \n      } else if (\"-mv\".equals(cmd)) {\n        exitCode \u003d rename(argv, getConf());\n      } else if (\"-cp\".equals(cmd)) {\n        exitCode \u003d copy(argv, getConf());\n      } else if (\"-rm\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-rmr\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-expunge\".equals(cmd)) {\n        expunge();\n      } else if (\"-df\".equals(cmd)) {\n        if (argv.length-1 \u003e 0) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          df(null);\n        }\n      } else if (\"-du\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          du(\".\");\n        }\n      } else if (\"-dus\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          exitCode \u003d doall(cmd, argv, i);\n        } else {\n          dus(\".\");\n        }         \n      } else if (Count.matches(cmd)) {\n        exitCode \u003d new Count(argv, i, getConf()).runAll();\n      } else if (\"-mkdir\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-touchz\".equals(cmd)) {\n        exitCode \u003d doall(cmd, argv, i);\n      } else if (\"-test\".equals(cmd)) {\n        exitCode \u003d test(argv, i);\n      } else if (\"-stat\".equals(cmd)) {\n        if (i + 1 \u003c argv.length) {\n          stat(argv[i++].toCharArray(), argv[i++]);\n        } else {\n          stat(\"%y\".toCharArray(), argv[i]);\n        }\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c argv.length) {\n          printHelp(argv[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else if (\"-tail\".equals(cmd)) {\n        tail(argv, i);           \n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n      }\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \" + \n                           content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \" + \n                           ex.getLocalizedMessage());  \n      }\n    } catch (IOException e) {\n      //\n      // IO exception encountered locally.\n      // \n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + \n                         e.getLocalizedMessage());  \n    } catch (Exception re) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + re.getLocalizedMessage());  \n    } finally {\n    }\n    return exitCode;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java"
    }
  }
}