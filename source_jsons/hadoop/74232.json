{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LdapGroupsMapping.java",
  "functionName": "extractPassword",
  "functionId": "extractPassword___pwFile-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
  "functionStartLine": 855,
  "functionEndLine": 874,
  "numCommitsSeen": 29,
  "timeTaken": 2241,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "770b5eb2db686275df445be9280e76cc3710ffdc",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
    "bbd6a3277678a60d472e76a207f25a916220946c",
    "ca8f112d2f422c11c62bb30660b60fb5fb275457",
    "9d89fb8ca1d83cf90b5f92b6aab4115b68967ae1",
    "12fca4cf3382ff333cec84d936710d1c02bbf4f5",
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "770b5eb2db686275df445be9280e76cc3710ffdc": "Ybodychange",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": "Ybodychange",
    "bbd6a3277678a60d472e76a207f25a916220946c": "Ybodychange",
    "ca8f112d2f422c11c62bb30660b60fb5fb275457": "Ybodychange",
    "9d89fb8ca1d83cf90b5f92b6aab4115b68967ae1": "Ybodychange",
    "12fca4cf3382ff333cec84d936710d1c02bbf4f5": "Ybodychange",
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "25/02/19 1:39 PM",
      "commitNameOld": "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 65.93,
      "commitsBetweenForRepo": 476,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   String extractPassword(String pwFile) {\n     if (pwFile.isEmpty()) {\n       // If there is no password file defined, we\u0027ll assume that we should do\n       // an anonymous bind\n       return \"\";\n     }\n \n     StringBuilder password \u003d new StringBuilder();\n     try (Reader reader \u003d new InputStreamReader(\n-        new FileInputStream(pwFile), StandardCharsets.UTF_8)) {\n+        Files.newInputStream(Paths.get(pwFile)), StandardCharsets.UTF_8)) {\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         password.append((char)c);\n         c \u003d reader.read();\n       }\n       return password.toString().trim();\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String extractPassword(String pwFile) {\n    if (pwFile.isEmpty()) {\n      // If there is no password file defined, we\u0027ll assume that we should do\n      // an anonymous bind\n      return \"\";\n    }\n\n    StringBuilder password \u003d new StringBuilder();\n    try (Reader reader \u003d new InputStreamReader(\n        Files.newInputStream(Paths.get(pwFile)), StandardCharsets.UTF_8)) {\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        password.append((char)c);\n        c \u003d reader.read();\n      }\n      return password.toString().trim();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "770b5eb2db686275df445be9280e76cc3710ffdc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13444. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "01/08/16 1:35 AM",
      "commitName": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "15/06/16 11:41 AM",
      "commitNameOld": "6f0aa75121224589fe1e20630c597f851ef3bed2",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 46.58,
      "commitsBetweenForRepo": 430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   String extractPassword(String pwFile) {\n     if (pwFile.isEmpty()) {\n       // If there is no password file defined, we\u0027ll assume that we should do\n       // an anonymous bind\n       return \"\";\n     }\n \n     StringBuilder password \u003d new StringBuilder();\n     try (Reader reader \u003d new InputStreamReader(\n-        new FileInputStream(pwFile), Charsets.UTF_8)) {\n+        new FileInputStream(pwFile), StandardCharsets.UTF_8)) {\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         password.append((char)c);\n         c \u003d reader.read();\n       }\n       return password.toString().trim();\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String extractPassword(String pwFile) {\n    if (pwFile.isEmpty()) {\n      // If there is no password file defined, we\u0027ll assume that we should do\n      // an anonymous bind\n      return \"\";\n    }\n\n    StringBuilder password \u003d new StringBuilder();\n    try (Reader reader \u003d new InputStreamReader(\n        new FileInputStream(pwFile), StandardCharsets.UTF_8)) {\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        password.append((char)c);\n        c \u003d reader.read();\n      }\n      return password.toString().trim();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11389. Clean up byte to string encoding issues in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 4:42 PM",
      "commitName": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "10/12/14 12:44 PM",
      "commitNameOld": "bbd6a3277678a60d472e76a207f25a916220946c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   String extractPassword(String pwFile) {\n     if (pwFile.isEmpty()) {\n       // If there is no password file defined, we\u0027ll assume that we should do\n       // an anonymous bind\n       return \"\";\n     }\n-    \n-    try (Reader reader \u003d new FileReader(pwFile)) {\n-      StringBuilder password \u003d new StringBuilder();\n+\n+    StringBuilder password \u003d new StringBuilder();\n+    try (Reader reader \u003d new InputStreamReader(\n+        new FileInputStream(pwFile), Charsets.UTF_8)) {\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         password.append((char)c);\n         c \u003d reader.read();\n       }\n       return password.toString().trim();\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String extractPassword(String pwFile) {\n    if (pwFile.isEmpty()) {\n      // If there is no password file defined, we\u0027ll assume that we should do\n      // an anonymous bind\n      return \"\";\n    }\n\n    StringBuilder password \u003d new StringBuilder();\n    try (Reader reader \u003d new InputStreamReader(\n        new FileInputStream(pwFile), Charsets.UTF_8)) {\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        password.append((char)c);\n        c \u003d reader.read();\n      }\n      return password.toString().trim();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "bbd6a3277678a60d472e76a207f25a916220946c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10482. Fix various findbugs warnings in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "10/12/14 12:44 PM",
      "commitName": "bbd6a3277678a60d472e76a207f25a916220946c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/08/14 4:55 PM",
      "commitNameOld": "a4f1292a53da3c0bbb75de459bc141ef722dd148",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 126.87,
      "commitsBetweenForRepo": 1182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,19 @@\n   String extractPassword(String pwFile) {\n     if (pwFile.isEmpty()) {\n       // If there is no password file defined, we\u0027ll assume that we should do\n       // an anonymous bind\n       return \"\";\n     }\n     \n-    Reader reader \u003d null;\n-    try {\n+    try (Reader reader \u003d new FileReader(pwFile)) {\n       StringBuilder password \u003d new StringBuilder();\n-      reader \u003d new FileReader(pwFile);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         password.append((char)c);\n         c \u003d reader.read();\n       }\n       return password.toString().trim();\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n-    } finally {\n-      IOUtils.cleanup(LOG, reader);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String extractPassword(String pwFile) {\n    if (pwFile.isEmpty()) {\n      // If there is no password file defined, we\u0027ll assume that we should do\n      // an anonymous bind\n      return \"\";\n    }\n    \n    try (Reader reader \u003d new FileReader(pwFile)) {\n      StringBuilder password \u003d new StringBuilder();\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        password.append((char)c);\n        c \u003d reader.read();\n      }\n      return password.toString().trim();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "ca8f112d2f422c11c62bb30660b60fb5fb275457": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10656. The password keystore file is not picked by LDAP group mapping. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601985 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/14 11:54 AM",
      "commitName": "ca8f112d2f422c11c62bb30660b60fb5fb275457",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "28/03/14 11:15 AM",
      "commitNameOld": "640a72efbee17f6c7056650dae04f8b3f59ddaab",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 75.03,
      "commitsBetweenForRepo": 420,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   String extractPassword(String pwFile) {\n     if (pwFile.isEmpty()) {\n       // If there is no password file defined, we\u0027ll assume that we should do\n       // an anonymous bind\n       return \"\";\n     }\n     \n+    Reader reader \u003d null;\n     try {\n       StringBuilder password \u003d new StringBuilder();\n-      Reader reader \u003d new FileReader(pwFile);\n+      reader \u003d new FileReader(pwFile);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         password.append((char)c);\n         c \u003d reader.read();\n       }\n-      reader.close();\n       return password.toString().trim();\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n+    } finally {\n+      IOUtils.cleanup(LOG, reader);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String extractPassword(String pwFile) {\n    if (pwFile.isEmpty()) {\n      // If there is no password file defined, we\u0027ll assume that we should do\n      // an anonymous bind\n      return \"\";\n    }\n    \n    Reader reader \u003d null;\n    try {\n      StringBuilder password \u003d new StringBuilder();\n      reader \u003d new FileReader(pwFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        password.append((char)c);\n        c \u003d reader.read();\n      }\n      return password.toString().trim();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n    } finally {\n      IOUtils.cleanup(LOG, reader);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "9d89fb8ca1d83cf90b5f92b6aab4115b68967ae1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10249. LdapGroupsMapping should trim ldap password read from file. Contributed by Dilli Armugam.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/02/14 3:46 PM",
      "commitName": "9d89fb8ca1d83cf90b5f92b6aab4115b68967ae1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "29/04/13 8:06 PM",
      "commitNameOld": "3dc9aa480ab67be692014d6ade4ee6b1b0205cc0",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 289.86,
      "commitsBetweenForRepo": 1790,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   String extractPassword(String pwFile) {\n     if (pwFile.isEmpty()) {\n       // If there is no password file defined, we\u0027ll assume that we should do\n       // an anonymous bind\n       return \"\";\n     }\n     \n     try {\n       StringBuilder password \u003d new StringBuilder();\n       Reader reader \u003d new FileReader(pwFile);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         password.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n-      return password.toString();\n+      return password.toString().trim();\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String extractPassword(String pwFile) {\n    if (pwFile.isEmpty()) {\n      // If there is no password file defined, we\u0027ll assume that we should do\n      // an anonymous bind\n      return \"\";\n    }\n    \n    try {\n      StringBuilder password \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(pwFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        password.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      return password.toString().trim();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "12fca4cf3382ff333cec84d936710d1c02bbf4f5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8189. LdapGroupsMapping shouldn\u0027t throw away IOException. Contributed by Jonathan Natkins.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1302783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/12 11:32 PM",
      "commitName": "12fca4cf3382ff333cec84d936710d1c02bbf4f5",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "19/03/12 6:00 PM",
      "commitNameOld": "21426e6e42a2f1c0f5a0eca23ad62057901e4855",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   String extractPassword(String pwFile) {\n     if (pwFile.isEmpty()) {\n       // If there is no password file defined, we\u0027ll assume that we should do\n       // an anonymous bind\n       return \"\";\n     }\n     \n     try {\n       StringBuilder password \u003d new StringBuilder();\n       Reader reader \u003d new FileReader(pwFile);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         password.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       return password.toString();\n-    } catch (IOException ex) {\n-      throw new RuntimeException(\"Could not read password file: \" + pwFile);\n+    } catch (IOException ioe) {\n+      throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String extractPassword(String pwFile) {\n    if (pwFile.isEmpty()) {\n      // If there is no password file defined, we\u0027ll assume that we should do\n      // an anonymous bind\n      return \"\";\n    }\n    \n    try {\n      StringBuilder password \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(pwFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        password.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      return password.toString();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Could not read password file: \" + pwFile, ioe);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8121. Active Directory Group Mapping Service. Contributed by Jonathan Natkins.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1302740 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/12 6:00 PM",
      "commitName": "21426e6e42a2f1c0f5a0eca23ad62057901e4855",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,21 @@\n+  String extractPassword(String pwFile) {\n+    if (pwFile.isEmpty()) {\n+      // If there is no password file defined, we\u0027ll assume that we should do\n+      // an anonymous bind\n+      return \"\";\n+    }\n+    \n+    try {\n+      StringBuilder password \u003d new StringBuilder();\n+      Reader reader \u003d new FileReader(pwFile);\n+      int c \u003d reader.read();\n+      while (c \u003e -1) {\n+        password.append((char)c);\n+        c \u003d reader.read();\n+      }\n+      reader.close();\n+      return password.toString();\n+    } catch (IOException ex) {\n+      throw new RuntimeException(\"Could not read password file: \" + pwFile);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  String extractPassword(String pwFile) {\n    if (pwFile.isEmpty()) {\n      // If there is no password file defined, we\u0027ll assume that we should do\n      // an anonymous bind\n      return \"\";\n    }\n    \n    try {\n      StringBuilder password \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(pwFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        password.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      return password.toString();\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read password file: \" + pwFile);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java"
    }
  }
}