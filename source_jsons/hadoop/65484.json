{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3GuardTool.java",
  "functionName": "compareDir",
  "functionId": "compareDir___msDir-FileStatus__s3Dir-FileStatus__out-PrintStream",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
  "functionStartLine": 969,
  "functionEndLine": 1013,
  "numCommitsSeen": 42,
  "timeTaken": 2224,
  "changeHistory": [
    "55fad6a3de3125d9e7e2e9a5f8fa5b1b22a1de60",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "55fad6a3de3125d9e7e2e9a5f8fa5b1b22a1de60": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55fad6a3de3125d9e7e2e9a5f8fa5b1b22a1de60": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15416. Clear error message in S3Guard diff if source not found. Contributed by Gabor Bota.\n",
      "commitDate": "22/06/18 10:36 AM",
      "commitName": "55fad6a3de3125d9e7e2e9a5f8fa5b1b22a1de60",
      "commitAuthor": "Sean Mackrory",
      "commitDateOld": "05/04/18 8:23 PM",
      "commitNameOld": "ea3849f0ccd32b2f8acbc6107de3b9e91803ed4a",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 77.59,
      "commitsBetweenForRepo": 1077,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,45 @@\n     private void compareDir(FileStatus msDir, FileStatus s3Dir,\n                             PrintStream out) throws IOException {\n-      Preconditions.checkArgument(!(msDir \u003d\u003d null \u0026\u0026 s3Dir \u003d\u003d null));\n+      Preconditions.checkArgument(!(msDir \u003d\u003d null \u0026\u0026 s3Dir \u003d\u003d null),\n+          \"The path does not exist in metadata store and on s3.\");\n+\n       if (msDir !\u003d null \u0026\u0026 s3Dir !\u003d null) {\n         Preconditions.checkArgument(msDir.getPath().equals(s3Dir.getPath()),\n             String.format(\"The path from metadata store and s3 are different:\" +\n              \" ms\u003d%s s3\u003d%s\", msDir.getPath(), s3Dir.getPath()));\n       }\n \n       Map\u003cPath, FileStatus\u003e s3Children \u003d new HashMap\u003c\u003e();\n       if (s3Dir !\u003d null \u0026\u0026 s3Dir.isDirectory()) {\n         for (FileStatus status : getFilesystem().listStatus(s3Dir.getPath())) {\n           s3Children.put(status.getPath(), status);\n         }\n       }\n \n       Map\u003cPath, FileStatus\u003e msChildren \u003d new HashMap\u003c\u003e();\n       if (msDir !\u003d null \u0026\u0026 msDir.isDirectory()) {\n         DirListingMetadata dirMeta \u003d\n             getStore().listChildren(msDir.getPath());\n \n         if (dirMeta !\u003d null) {\n           for (PathMetadata meta : dirMeta.getListing()) {\n             FileStatus status \u003d meta.getFileStatus();\n             msChildren.put(status.getPath(), status);\n           }\n         }\n       }\n \n       Set\u003cPath\u003e allPaths \u003d new HashSet\u003c\u003e(s3Children.keySet());\n       allPaths.addAll(msChildren.keySet());\n \n       for (Path path : allPaths) {\n         FileStatus s3Status \u003d s3Children.get(path);\n         FileStatus msStatus \u003d msChildren.get(path);\n         printDiff(msStatus, s3Status, out);\n         if ((s3Status !\u003d null \u0026\u0026 s3Status.isDirectory()) ||\n             (msStatus !\u003d null \u0026\u0026 msStatus.isDirectory())) {\n           compareDir(msStatus, s3Status, out);\n         }\n       }\n       out.flush();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void compareDir(FileStatus msDir, FileStatus s3Dir,\n                            PrintStream out) throws IOException {\n      Preconditions.checkArgument(!(msDir \u003d\u003d null \u0026\u0026 s3Dir \u003d\u003d null),\n          \"The path does not exist in metadata store and on s3.\");\n\n      if (msDir !\u003d null \u0026\u0026 s3Dir !\u003d null) {\n        Preconditions.checkArgument(msDir.getPath().equals(s3Dir.getPath()),\n            String.format(\"The path from metadata store and s3 are different:\" +\n             \" ms\u003d%s s3\u003d%s\", msDir.getPath(), s3Dir.getPath()));\n      }\n\n      Map\u003cPath, FileStatus\u003e s3Children \u003d new HashMap\u003c\u003e();\n      if (s3Dir !\u003d null \u0026\u0026 s3Dir.isDirectory()) {\n        for (FileStatus status : getFilesystem().listStatus(s3Dir.getPath())) {\n          s3Children.put(status.getPath(), status);\n        }\n      }\n\n      Map\u003cPath, FileStatus\u003e msChildren \u003d new HashMap\u003c\u003e();\n      if (msDir !\u003d null \u0026\u0026 msDir.isDirectory()) {\n        DirListingMetadata dirMeta \u003d\n            getStore().listChildren(msDir.getPath());\n\n        if (dirMeta !\u003d null) {\n          for (PathMetadata meta : dirMeta.getListing()) {\n            FileStatus status \u003d meta.getFileStatus();\n            msChildren.put(status.getPath(), status);\n          }\n        }\n      }\n\n      Set\u003cPath\u003e allPaths \u003d new HashSet\u003c\u003e(s3Children.keySet());\n      allPaths.addAll(msChildren.keySet());\n\n      for (Path path : allPaths) {\n        FileStatus s3Status \u003d s3Children.get(path);\n        FileStatus msStatus \u003d msChildren.get(path);\n        printDiff(msStatus, s3Status, out);\n        if ((s3Status !\u003d null \u0026\u0026 s3Status.isDirectory()) ||\n            (msStatus !\u003d null \u0026\u0026 msStatus.isDirectory())) {\n          compareDir(msStatus, s3Status, out);\n        }\n      }\n      out.flush();\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,43 @@\n+    private void compareDir(FileStatus msDir, FileStatus s3Dir,\n+                            PrintStream out) throws IOException {\n+      Preconditions.checkArgument(!(msDir \u003d\u003d null \u0026\u0026 s3Dir \u003d\u003d null));\n+      if (msDir !\u003d null \u0026\u0026 s3Dir !\u003d null) {\n+        Preconditions.checkArgument(msDir.getPath().equals(s3Dir.getPath()),\n+            String.format(\"The path from metadata store and s3 are different:\" +\n+             \" ms\u003d%s s3\u003d%s\", msDir.getPath(), s3Dir.getPath()));\n+      }\n+\n+      Map\u003cPath, FileStatus\u003e s3Children \u003d new HashMap\u003c\u003e();\n+      if (s3Dir !\u003d null \u0026\u0026 s3Dir.isDirectory()) {\n+        for (FileStatus status : getFilesystem().listStatus(s3Dir.getPath())) {\n+          s3Children.put(status.getPath(), status);\n+        }\n+      }\n+\n+      Map\u003cPath, FileStatus\u003e msChildren \u003d new HashMap\u003c\u003e();\n+      if (msDir !\u003d null \u0026\u0026 msDir.isDirectory()) {\n+        DirListingMetadata dirMeta \u003d\n+            getStore().listChildren(msDir.getPath());\n+\n+        if (dirMeta !\u003d null) {\n+          for (PathMetadata meta : dirMeta.getListing()) {\n+            FileStatus status \u003d meta.getFileStatus();\n+            msChildren.put(status.getPath(), status);\n+          }\n+        }\n+      }\n+\n+      Set\u003cPath\u003e allPaths \u003d new HashSet\u003c\u003e(s3Children.keySet());\n+      allPaths.addAll(msChildren.keySet());\n+\n+      for (Path path : allPaths) {\n+        FileStatus s3Status \u003d s3Children.get(path);\n+        FileStatus msStatus \u003d msChildren.get(path);\n+        printDiff(msStatus, s3Status, out);\n+        if ((s3Status !\u003d null \u0026\u0026 s3Status.isDirectory()) ||\n+            (msStatus !\u003d null \u0026\u0026 msStatus.isDirectory())) {\n+          compareDir(msStatus, s3Status, out);\n+        }\n+      }\n+      out.flush();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void compareDir(FileStatus msDir, FileStatus s3Dir,\n                            PrintStream out) throws IOException {\n      Preconditions.checkArgument(!(msDir \u003d\u003d null \u0026\u0026 s3Dir \u003d\u003d null));\n      if (msDir !\u003d null \u0026\u0026 s3Dir !\u003d null) {\n        Preconditions.checkArgument(msDir.getPath().equals(s3Dir.getPath()),\n            String.format(\"The path from metadata store and s3 are different:\" +\n             \" ms\u003d%s s3\u003d%s\", msDir.getPath(), s3Dir.getPath()));\n      }\n\n      Map\u003cPath, FileStatus\u003e s3Children \u003d new HashMap\u003c\u003e();\n      if (s3Dir !\u003d null \u0026\u0026 s3Dir.isDirectory()) {\n        for (FileStatus status : getFilesystem().listStatus(s3Dir.getPath())) {\n          s3Children.put(status.getPath(), status);\n        }\n      }\n\n      Map\u003cPath, FileStatus\u003e msChildren \u003d new HashMap\u003c\u003e();\n      if (msDir !\u003d null \u0026\u0026 msDir.isDirectory()) {\n        DirListingMetadata dirMeta \u003d\n            getStore().listChildren(msDir.getPath());\n\n        if (dirMeta !\u003d null) {\n          for (PathMetadata meta : dirMeta.getListing()) {\n            FileStatus status \u003d meta.getFileStatus();\n            msChildren.put(status.getPath(), status);\n          }\n        }\n      }\n\n      Set\u003cPath\u003e allPaths \u003d new HashSet\u003c\u003e(s3Children.keySet());\n      allPaths.addAll(msChildren.keySet());\n\n      for (Path path : allPaths) {\n        FileStatus s3Status \u003d s3Children.get(path);\n        FileStatus msStatus \u003d msChildren.get(path);\n        printDiff(msStatus, s3Status, out);\n        if ((s3Status !\u003d null \u0026\u0026 s3Status.isDirectory()) ||\n            (msStatus !\u003d null \u0026\u0026 msStatus.isDirectory())) {\n          compareDir(msStatus, s3Status, out);\n        }\n      }\n      out.flush();\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java"
    }
  }
}