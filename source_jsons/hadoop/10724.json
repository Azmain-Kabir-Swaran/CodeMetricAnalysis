{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ThrottledAsyncChecker.java",
  "functionName": "schedule",
  "functionId": "schedule___target-Checkable__K,V____context-K",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
  "functionStartLine": 120,
  "functionEndLine": 158,
  "numCommitsSeen": 11,
  "timeTaken": 4569,
  "changeHistory": [
    "c12ddbd1de40b32bbe2f6a3e484abf843d6d92ae",
    "645d67bc4f4e29d10ef810386c89e6a7c8c61862",
    "1ff658b2ef3fb933897712c728bc628f3f44bded",
    "3ce2190b581526ad2d49e8c3a47be1547037310c",
    "d69a82c89c1e857a2a86ff614ae11fb5df993614",
    "603f3ef1386048111940b66f3a0750ab84d0588f",
    "3fff1585875ad322ce6e8acb485275e6a4360823"
  ],
  "changeHistoryShort": {
    "c12ddbd1de40b32bbe2f6a3e484abf843d6d92ae": "Ymodifierchange",
    "645d67bc4f4e29d10ef810386c89e6a7c8c61862": "Ybodychange",
    "1ff658b2ef3fb933897712c728bc628f3f44bded": "Ybodychange",
    "3ce2190b581526ad2d49e8c3a47be1547037310c": "Ybodychange",
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": "Ybodychange",
    "603f3ef1386048111940b66f3a0750ab84d0588f": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange,Yparametermetachange)",
    "3fff1585875ad322ce6e8acb485275e6a4360823": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c12ddbd1de40b32bbe2f6a3e484abf843d6d92ae": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-15249 ThrottledAsyncChecker is not thread-safe. (#1922)\n\n",
      "commitDate": "06/04/20 10:38 PM",
      "commitName": "c12ddbd1de40b32bbe2f6a3e484abf843d6d92ae",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "21/06/19 6:27 PM",
      "commitNameOld": "645d67bc4f4e29d10ef810386c89e6a7c8c61862",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 290.17,
      "commitsBetweenForRepo": 1592,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n-  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n-                                                K context) {\n+  public synchronized Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(\n+      Checkable\u003cK, V\u003e target, K context) {\n     if (checksInProgress.containsKey(target)) {\n       return Optional.empty();\n     }\n \n     final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n     if (result !\u003d null) {\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                 \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n         return Optional.empty();\n       }\n     }\n \n     LOG.info(\"Scheduling a check for {}\", target);\n     final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n     final ListenableFuture\u003cV\u003e lf;\n \n     if (diskCheckTimeout \u003e 0) {\n       lf \u003d TimeoutFuture\n           .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n               scheduledExecutorService);\n     } else {\n       lf \u003d lfWithoutTimeout;\n     }\n \n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n     return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(\n      Checkable\u003cK, V\u003e target, K context) {\n    if (checksInProgress.containsKey(target)) {\n      return Optional.empty();\n    }\n\n    final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n    if (result !\u003d null) {\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.empty();\n      }\n    }\n\n    LOG.info(\"Scheduling a check for {}\", target);\n    final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    final ListenableFuture\u003cV\u003e lf;\n\n    if (diskCheckTimeout \u003e 0) {\n      lf \u003d TimeoutFuture\n          .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n              scheduledExecutorService);\n    } else {\n      lf \u003d lfWithoutTimeout;\n    }\n\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "645d67bc4f4e29d10ef810386c89e6a7c8c61862": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14074. DataNode runs async disk checks maybe throws NullPointerException, and DataNode failed to register to NameSpace.  Contributed by guangyi lu.\n",
      "commitDate": "21/06/19 6:27 PM",
      "commitName": "645d67bc4f4e29d10ef810386c89e6a7c8c61862",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "03/04/19 11:59 AM",
      "commitNameOld": "d7979079ea8c6514858b77a78f0119cffc178086",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 79.27,
      "commitsBetweenForRepo": 511,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                 K context) {\n     if (checksInProgress.containsKey(target)) {\n       return Optional.empty();\n     }\n \n-    if (completedChecks.containsKey(target)) {\n-      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n+    final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n+    if (result !\u003d null) {\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                 \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n         return Optional.empty();\n       }\n     }\n \n     LOG.info(\"Scheduling a check for {}\", target);\n     final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n     final ListenableFuture\u003cV\u003e lf;\n \n     if (diskCheckTimeout \u003e 0) {\n       lf \u003d TimeoutFuture\n           .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n               scheduledExecutorService);\n     } else {\n       lf \u003d lfWithoutTimeout;\n     }\n \n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n     return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                K context) {\n    if (checksInProgress.containsKey(target)) {\n      return Optional.empty();\n    }\n\n    final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n    if (result !\u003d null) {\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.empty();\n      }\n    }\n\n    LOG.info(\"Scheduling a check for {}\", target);\n    final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    final ListenableFuture\u003cV\u003e lf;\n\n    if (diskCheckTimeout \u003e 0) {\n      lf \u003d TimeoutFuture\n          .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n              scheduledExecutorService);\n    } else {\n      lf \u003d lfWithoutTimeout;\n    }\n\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
      "extendedDetails": {}
    },
    "1ff658b2ef3fb933897712c728bc628f3f44bded": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14221. Replace Guava Optional with Java Optional. Contributed by Arpit Agarwal.\n",
      "commitDate": "21/01/19 8:44 PM",
      "commitName": "1ff658b2ef3fb933897712c728bc628f3f44bded",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "31/01/18 11:05 AM",
      "commitNameOld": "3ce2190b581526ad2d49e8c3a47be1547037310c",
      "commitAuthorOld": "Hanisha Koneru",
      "daysBetweenCommits": 355.4,
      "commitsBetweenForRepo": 3272,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                 K context) {\n     if (checksInProgress.containsKey(target)) {\n-      return Optional.absent();\n+      return Optional.empty();\n     }\n \n     if (completedChecks.containsKey(target)) {\n       final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                 \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n-        return Optional.absent();\n+        return Optional.empty();\n       }\n     }\n \n     LOG.info(\"Scheduling a check for {}\", target);\n     final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n     final ListenableFuture\u003cV\u003e lf;\n \n     if (diskCheckTimeout \u003e 0) {\n       lf \u003d TimeoutFuture\n           .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n               scheduledExecutorService);\n     } else {\n       lf \u003d lfWithoutTimeout;\n     }\n \n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n     return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                K context) {\n    if (checksInProgress.containsKey(target)) {\n      return Optional.empty();\n    }\n\n    if (completedChecks.containsKey(target)) {\n      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.empty();\n      }\n    }\n\n    LOG.info(\"Scheduling a check for {}\", target);\n    final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    final ListenableFuture\u003cV\u003e lf;\n\n    if (diskCheckTimeout \u003e 0) {\n      lf \u003d TimeoutFuture\n          .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n              scheduledExecutorService);\n    } else {\n      lf \u003d lfWithoutTimeout;\n    }\n\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
      "extendedDetails": {}
    },
    "3ce2190b581526ad2d49e8c3a47be1547037310c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13092. Reduce verbosity for ThrottledAsyncChecker#schedule. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "31/01/18 11:05 AM",
      "commitName": "3ce2190b581526ad2d49e8c3a47be1547037310c",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "05/04/17 5:54 PM",
      "commitNameOld": "8c57aeb5b4fcf9f688c0f00df684b9125f683250",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 300.76,
      "commitsBetweenForRepo": 2022,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                 K context) {\n-    LOG.info(\"Scheduling a check for {}\", target);\n     if (checksInProgress.containsKey(target)) {\n       return Optional.absent();\n     }\n \n     if (completedChecks.containsKey(target)) {\n       final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                 \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n         return Optional.absent();\n       }\n     }\n \n+    LOG.info(\"Scheduling a check for {}\", target);\n     final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n     final ListenableFuture\u003cV\u003e lf;\n \n     if (diskCheckTimeout \u003e 0) {\n       lf \u003d TimeoutFuture\n           .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n               scheduledExecutorService);\n     } else {\n       lf \u003d lfWithoutTimeout;\n     }\n \n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n     return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                K context) {\n    if (checksInProgress.containsKey(target)) {\n      return Optional.absent();\n    }\n\n    if (completedChecks.containsKey(target)) {\n      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.absent();\n      }\n    }\n\n    LOG.info(\"Scheduling a check for {}\", target);\n    final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    final ListenableFuture\u003cV\u003e lf;\n\n    if (diskCheckTimeout \u003e 0) {\n      lf \u003d TimeoutFuture\n          .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n              scheduledExecutorService);\n    } else {\n      lf \u003d lfWithoutTimeout;\n    }\n\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
      "extendedDetails": {}
    },
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11511. Support Timeout when checking single disk. Contributed by Hanisha Koneru.\n",
      "commitDate": "15/03/17 6:01 PM",
      "commitName": "d69a82c89c1e857a2a86ff614ae11fb5df993614",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "28/12/16 10:08 PM",
      "commitNameOld": "603f3ef1386048111940b66f3a0750ab84d0588f",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 76.79,
      "commitsBetweenForRepo": 402,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,39 @@\n   public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                 K context) {\n     LOG.info(\"Scheduling a check for {}\", target);\n     if (checksInProgress.containsKey(target)) {\n       return Optional.absent();\n     }\n \n     if (completedChecks.containsKey(target)) {\n       final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                 \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n         return Optional.absent();\n       }\n     }\n \n-    final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n+    final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n+    final ListenableFuture\u003cV\u003e lf;\n+\n+    if (diskCheckTimeout \u003e 0) {\n+      lf \u003d TimeoutFuture\n+          .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n+              scheduledExecutorService);\n+    } else {\n+      lf \u003d lfWithoutTimeout;\n+    }\n+\n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n     return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                K context) {\n    LOG.info(\"Scheduling a check for {}\", target);\n    if (checksInProgress.containsKey(target)) {\n      return Optional.absent();\n    }\n\n    if (completedChecks.containsKey(target)) {\n      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.absent();\n      }\n    }\n\n    final ListenableFuture\u003cV\u003e lfWithoutTimeout \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    final ListenableFuture\u003cV\u003e lf;\n\n    if (diskCheckTimeout \u003e 0) {\n      lf \u003d TimeoutFuture\n          .create(lfWithoutTimeout, diskCheckTimeout, TimeUnit.MILLISECONDS,\n              scheduledExecutorService);\n    } else {\n      lf \u003d lfWithoutTimeout;\n    }\n\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
      "extendedDetails": {}
    },
    "603f3ef1386048111940b66f3a0750ab84d0588f": {
      "type": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-11274. Datanode should only check the failed volume upon IO errors. Contributed by Xiaoyu Yao.\n",
      "commitDate": "28/12/16 10:08 PM",
      "commitName": "603f3ef1386048111940b66f3a0750ab84d0588f",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-11274. Datanode should only check the failed volume upon IO errors. Contributed by Xiaoyu Yao.\n",
          "commitDate": "28/12/16 10:08 PM",
          "commitName": "603f3ef1386048111940b66f3a0750ab84d0588f",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "07/11/16 6:45 PM",
          "commitNameOld": "3fff1585875ad322ce6e8acb485275e6a4360823",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 51.14,
          "commitsBetweenForRepo": 292,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,29 @@\n-  public synchronized ListenableFuture\u003cV\u003e schedule(\n-      final Checkable\u003cK, V\u003e target,\n-      final K context) {\n-    LOG.debug(\"Scheduling a check of {}\", target);\n-\n+  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n+                                                K context) {\n+    LOG.info(\"Scheduling a check for {}\", target);\n     if (checksInProgress.containsKey(target)) {\n-      return checksInProgress.get(target);\n+      return Optional.absent();\n     }\n \n     if (completedChecks.containsKey(target)) {\n       final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n-            \"is less than the min gap {}ms.\",\n+                \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n-        return result.result !\u003d null ?\n-            Futures.immediateFuture(result.result) :\n-            Futures.immediateFailedFuture(result.exception);\n+        return Optional.absent();\n       }\n     }\n \n     final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n-    return lf;\n+    return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                K context) {\n    LOG.info(\"Scheduling a check for {}\", target);\n    if (checksInProgress.containsKey(target)) {\n      return Optional.absent();\n    }\n\n    if (completedChecks.containsKey(target)) {\n      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.absent();\n      }\n    }\n\n    final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
          "extendedDetails": {
            "oldValue": "ListenableFuture\u003cV\u003e",
            "newValue": "Optional\u003cListenableFuture\u003cV\u003e\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-11274. Datanode should only check the failed volume upon IO errors. Contributed by Xiaoyu Yao.\n",
          "commitDate": "28/12/16 10:08 PM",
          "commitName": "603f3ef1386048111940b66f3a0750ab84d0588f",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "07/11/16 6:45 PM",
          "commitNameOld": "3fff1585875ad322ce6e8acb485275e6a4360823",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 51.14,
          "commitsBetweenForRepo": 292,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,29 @@\n-  public synchronized ListenableFuture\u003cV\u003e schedule(\n-      final Checkable\u003cK, V\u003e target,\n-      final K context) {\n-    LOG.debug(\"Scheduling a check of {}\", target);\n-\n+  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n+                                                K context) {\n+    LOG.info(\"Scheduling a check for {}\", target);\n     if (checksInProgress.containsKey(target)) {\n-      return checksInProgress.get(target);\n+      return Optional.absent();\n     }\n \n     if (completedChecks.containsKey(target)) {\n       final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n-            \"is less than the min gap {}ms.\",\n+                \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n-        return result.result !\u003d null ?\n-            Futures.immediateFuture(result.result) :\n-            Futures.immediateFailedFuture(result.exception);\n+        return Optional.absent();\n       }\n     }\n \n     final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n-    return lf;\n+    return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                K context) {\n    LOG.info(\"Scheduling a check for {}\", target);\n    if (checksInProgress.containsKey(target)) {\n      return Optional.absent();\n    }\n\n    if (completedChecks.containsKey(target)) {\n      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.absent();\n      }\n    }\n\n    final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11274. Datanode should only check the failed volume upon IO errors. Contributed by Xiaoyu Yao.\n",
          "commitDate": "28/12/16 10:08 PM",
          "commitName": "603f3ef1386048111940b66f3a0750ab84d0588f",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "07/11/16 6:45 PM",
          "commitNameOld": "3fff1585875ad322ce6e8acb485275e6a4360823",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 51.14,
          "commitsBetweenForRepo": 292,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,29 @@\n-  public synchronized ListenableFuture\u003cV\u003e schedule(\n-      final Checkable\u003cK, V\u003e target,\n-      final K context) {\n-    LOG.debug(\"Scheduling a check of {}\", target);\n-\n+  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n+                                                K context) {\n+    LOG.info(\"Scheduling a check for {}\", target);\n     if (checksInProgress.containsKey(target)) {\n-      return checksInProgress.get(target);\n+      return Optional.absent();\n     }\n \n     if (completedChecks.containsKey(target)) {\n       final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n-            \"is less than the min gap {}ms.\",\n+                \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n-        return result.result !\u003d null ?\n-            Futures.immediateFuture(result.result) :\n-            Futures.immediateFailedFuture(result.exception);\n+        return Optional.absent();\n       }\n     }\n \n     final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n-    return lf;\n+    return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                K context) {\n    LOG.info(\"Scheduling a check for {}\", target);\n    if (checksInProgress.containsKey(target)) {\n      return Optional.absent();\n    }\n\n    if (completedChecks.containsKey(target)) {\n      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.absent();\n      }\n    }\n\n    final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-11274. Datanode should only check the failed volume upon IO errors. Contributed by Xiaoyu Yao.\n",
          "commitDate": "28/12/16 10:08 PM",
          "commitName": "603f3ef1386048111940b66f3a0750ab84d0588f",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "07/11/16 6:45 PM",
          "commitNameOld": "3fff1585875ad322ce6e8acb485275e6a4360823",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 51.14,
          "commitsBetweenForRepo": 292,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,29 @@\n-  public synchronized ListenableFuture\u003cV\u003e schedule(\n-      final Checkable\u003cK, V\u003e target,\n-      final K context) {\n-    LOG.debug(\"Scheduling a check of {}\", target);\n-\n+  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n+                                                K context) {\n+    LOG.info(\"Scheduling a check for {}\", target);\n     if (checksInProgress.containsKey(target)) {\n-      return checksInProgress.get(target);\n+      return Optional.absent();\n     }\n \n     if (completedChecks.containsKey(target)) {\n       final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n       final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n       if (msSinceLastCheck \u003c minMsBetweenChecks) {\n         LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n-            \"is less than the min gap {}ms.\",\n+                \"is less than the min gap {}ms.\",\n             target, msSinceLastCheck, minMsBetweenChecks);\n-        return result.result !\u003d null ?\n-            Futures.immediateFuture(result.result) :\n-            Futures.immediateFailedFuture(result.exception);\n+        return Optional.absent();\n       }\n     }\n \n     final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n         new Callable\u003cV\u003e() {\n           @Override\n           public V call() throws Exception {\n             return target.check(context);\n           }\n         });\n     checksInProgress.put(target, lf);\n     addResultCachingCallback(target, lf);\n-    return lf;\n+    return Optional.of(lf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Optional\u003cListenableFuture\u003cV\u003e\u003e schedule(Checkable\u003cK, V\u003e target,\n                                                K context) {\n    LOG.info(\"Scheduling a check for {}\", target);\n    if (checksInProgress.containsKey(target)) {\n      return Optional.absent();\n    }\n\n    if (completedChecks.containsKey(target)) {\n      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n                \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return Optional.absent();\n      }\n    }\n\n    final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return Optional.of(lf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java",
          "extendedDetails": {
            "oldValue": "[target-Checkable\u003cK,V\u003e(modifiers-final), context-K(modifiers-final)]",
            "newValue": "[target-Checkable\u003cK,V\u003e, context-K]"
          }
        }
      ]
    },
    "3fff1585875ad322ce6e8acb485275e6a4360823": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11114. Support for running async disk checks in DataNode.\n\nThis closes #153.\n",
      "commitDate": "07/11/16 6:45 PM",
      "commitName": "3fff1585875ad322ce6e8acb485275e6a4360823",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,33 @@\n+  public synchronized ListenableFuture\u003cV\u003e schedule(\n+      final Checkable\u003cK, V\u003e target,\n+      final K context) {\n+    LOG.debug(\"Scheduling a check of {}\", target);\n+\n+    if (checksInProgress.containsKey(target)) {\n+      return checksInProgress.get(target);\n+    }\n+\n+    if (completedChecks.containsKey(target)) {\n+      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n+      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n+      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n+        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n+            \"is less than the min gap {}ms.\",\n+            target, msSinceLastCheck, minMsBetweenChecks);\n+        return result.result !\u003d null ?\n+            Futures.immediateFuture(result.result) :\n+            Futures.immediateFailedFuture(result.exception);\n+      }\n+    }\n+\n+    final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n+        new Callable\u003cV\u003e() {\n+          @Override\n+          public V call() throws Exception {\n+            return target.check(context);\n+          }\n+        });\n+    checksInProgress.put(target, lf);\n+    addResultCachingCallback(target, lf);\n+    return lf;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ListenableFuture\u003cV\u003e schedule(\n      final Checkable\u003cK, V\u003e target,\n      final K context) {\n    LOG.debug(\"Scheduling a check of {}\", target);\n\n    if (checksInProgress.containsKey(target)) {\n      return checksInProgress.get(target);\n    }\n\n    if (completedChecks.containsKey(target)) {\n      final LastCheckResult\u003cV\u003e result \u003d completedChecks.get(target);\n      final long msSinceLastCheck \u003d timer.monotonicNow() - result.completedAt;\n      if (msSinceLastCheck \u003c minMsBetweenChecks) {\n        LOG.debug(\"Skipped checking {}. Time since last check {}ms \" +\n            \"is less than the min gap {}ms.\",\n            target, msSinceLastCheck, minMsBetweenChecks);\n        return result.result !\u003d null ?\n            Futures.immediateFuture(result.result) :\n            Futures.immediateFailedFuture(result.exception);\n      }\n    }\n\n    final ListenableFuture\u003cV\u003e lf \u003d executorService.submit(\n        new Callable\u003cV\u003e() {\n          @Override\n          public V call() throws Exception {\n            return target.check(context);\n          }\n        });\n    checksInProgress.put(target, lf);\n    addResultCachingCallback(target, lf);\n    return lf;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/ThrottledAsyncChecker.java"
    }
  }
}