{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RunJar.java",
  "functionName": "unJar",
  "functionId": "unJar___inputStream-InputStream__toDir-File__unpackRegex-Pattern",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
  "functionStartLine": 115,
  "functionEndLine": 148,
  "numCommitsSeen": 23,
  "timeTaken": 2114,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "e3236a9680709de7a95ffbc11b20e1bdc95a8605",
    "33e6cdbd16baca512a7e25de2b8e253cab07dce3",
    "7288b08330001102f944124d18e02bf0585d3e96"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "e3236a9680709de7a95ffbc11b20e1bdc95a8605": "Ybodychange",
    "33e6cdbd16baca512a7e25de2b8e253cab07dce3": "Ybodychange",
    "7288b08330001102f944124d18e02bf0585d3e96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "29/05/18 12:15 PM",
      "commitNameOld": "e3236a9680709de7a95ffbc11b20e1bdc95a8605",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 338.03,
      "commitsBetweenForRepo": 2580,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public static void unJar(InputStream inputStream, File toDir,\n                            Pattern unpackRegex)\n       throws IOException {\n     try (JarInputStream jar \u003d new JarInputStream(inputStream)) {\n       int numOfFailedLastModifiedSet \u003d 0;\n       String targetDirPath \u003d toDir.getCanonicalPath() + File.separator;\n       for (JarEntry entry \u003d jar.getNextJarEntry();\n            entry !\u003d null;\n            entry \u003d jar.getNextJarEntry()) {\n         if (!entry.isDirectory() \u0026\u0026\n             unpackRegex.matcher(entry.getName()).matches()) {\n           File file \u003d new File(toDir, entry.getName());\n           if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n             throw new IOException(\"expanding \" + entry.getName()\n                 + \" would create file outside of \" + toDir);\n           }\n           ensureDirectory(file.getParentFile());\n-          try (OutputStream out \u003d new FileOutputStream(file)) {\n+          try (OutputStream out \u003d Files.newOutputStream(file.toPath())) {\n             IOUtils.copyBytes(jar, out, BUFFER_SIZE);\n           }\n           if (!file.setLastModified(entry.getTime())) {\n             numOfFailedLastModifiedSet++;\n           }\n         }\n       }\n       if (numOfFailedLastModifiedSet \u003e 0) {\n         LOG.warn(\"Could not set last modfied time for {} file(s)\",\n             numOfFailedLastModifiedSet);\n       }\n       // ZipInputStream does not need the end of the file. Let\u0027s read it out.\n       // This helps with an additional TeeInputStream on the input.\n       IOUtils.copyBytes(inputStream, new NullOutputStream(), BUFFER_SIZE);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(InputStream inputStream, File toDir,\n                           Pattern unpackRegex)\n      throws IOException {\n    try (JarInputStream jar \u003d new JarInputStream(inputStream)) {\n      int numOfFailedLastModifiedSet \u003d 0;\n      String targetDirPath \u003d toDir.getCanonicalPath() + File.separator;\n      for (JarEntry entry \u003d jar.getNextJarEntry();\n           entry !\u003d null;\n           entry \u003d jar.getNextJarEntry()) {\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          File file \u003d new File(toDir, entry.getName());\n          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + entry.getName()\n                + \" would create file outside of \" + toDir);\n          }\n          ensureDirectory(file.getParentFile());\n          try (OutputStream out \u003d Files.newOutputStream(file.toPath())) {\n            IOUtils.copyBytes(jar, out, BUFFER_SIZE);\n          }\n          if (!file.setLastModified(entry.getTime())) {\n            numOfFailedLastModifiedSet++;\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet \u003e 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n      // ZipInputStream does not need the end of the file. Let\u0027s read it out.\n      // This helps with an additional TeeInputStream on the input.\n      IOUtils.copyBytes(inputStream, new NullOutputStream(), BUFFER_SIZE);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "e3236a9680709de7a95ffbc11b20e1bdc95a8605": {
      "type": "Ybodychange",
      "commitMessage": "Additional check when unpacking archives. Contributed by Wilfred Spiegelenburg.\n",
      "commitDate": "29/05/18 12:15 PM",
      "commitName": "e3236a9680709de7a95ffbc11b20e1bdc95a8605",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "28/05/18 1:29 AM",
      "commitNameOld": "d14e26b31fe46fb47a8e99a212c70016fd15a4d9",
      "commitAuthorOld": "Johan Gustavsson",
      "daysBetweenCommits": 1.45,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,34 @@\n   public static void unJar(InputStream inputStream, File toDir,\n                            Pattern unpackRegex)\n       throws IOException {\n     try (JarInputStream jar \u003d new JarInputStream(inputStream)) {\n       int numOfFailedLastModifiedSet \u003d 0;\n+      String targetDirPath \u003d toDir.getCanonicalPath() + File.separator;\n       for (JarEntry entry \u003d jar.getNextJarEntry();\n            entry !\u003d null;\n            entry \u003d jar.getNextJarEntry()) {\n         if (!entry.isDirectory() \u0026\u0026\n             unpackRegex.matcher(entry.getName()).matches()) {\n           File file \u003d new File(toDir, entry.getName());\n+          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n+            throw new IOException(\"expanding \" + entry.getName()\n+                + \" would create file outside of \" + toDir);\n+          }\n           ensureDirectory(file.getParentFile());\n           try (OutputStream out \u003d new FileOutputStream(file)) {\n             IOUtils.copyBytes(jar, out, BUFFER_SIZE);\n           }\n           if (!file.setLastModified(entry.getTime())) {\n             numOfFailedLastModifiedSet++;\n           }\n         }\n       }\n       if (numOfFailedLastModifiedSet \u003e 0) {\n         LOG.warn(\"Could not set last modfied time for {} file(s)\",\n             numOfFailedLastModifiedSet);\n       }\n       // ZipInputStream does not need the end of the file. Let\u0027s read it out.\n       // This helps with an additional TeeInputStream on the input.\n       IOUtils.copyBytes(inputStream, new NullOutputStream(), BUFFER_SIZE);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(InputStream inputStream, File toDir,\n                           Pattern unpackRegex)\n      throws IOException {\n    try (JarInputStream jar \u003d new JarInputStream(inputStream)) {\n      int numOfFailedLastModifiedSet \u003d 0;\n      String targetDirPath \u003d toDir.getCanonicalPath() + File.separator;\n      for (JarEntry entry \u003d jar.getNextJarEntry();\n           entry !\u003d null;\n           entry \u003d jar.getNextJarEntry()) {\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          File file \u003d new File(toDir, entry.getName());\n          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + entry.getName()\n                + \" would create file outside of \" + toDir);\n          }\n          ensureDirectory(file.getParentFile());\n          try (OutputStream out \u003d new FileOutputStream(file)) {\n            IOUtils.copyBytes(jar, out, BUFFER_SIZE);\n          }\n          if (!file.setLastModified(entry.getTime())) {\n            numOfFailedLastModifiedSet++;\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet \u003e 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n      // ZipInputStream does not need the end of the file. Let\u0027s read it out.\n      // This helps with an additional TeeInputStream on the input.\n      IOUtils.copyBytes(inputStream, new NullOutputStream(), BUFFER_SIZE);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "33e6cdbd16baca512a7e25de2b8e253cab07dce3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7876. Localized jars that are expanded after localization are not fully copied. Contributed by Miklos Szegedi\n",
      "commitDate": "05/02/18 10:30 AM",
      "commitName": "33e6cdbd16baca512a7e25de2b8e253cab07dce3",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "31/01/18 7:39 AM",
      "commitNameOld": "7288b08330001102f944124d18e02bf0585d3e96",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 5.12,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   public static void unJar(InputStream inputStream, File toDir,\n                            Pattern unpackRegex)\n       throws IOException {\n     try (JarInputStream jar \u003d new JarInputStream(inputStream)) {\n       int numOfFailedLastModifiedSet \u003d 0;\n       for (JarEntry entry \u003d jar.getNextJarEntry();\n            entry !\u003d null;\n            entry \u003d jar.getNextJarEntry()) {\n         if (!entry.isDirectory() \u0026\u0026\n             unpackRegex.matcher(entry.getName()).matches()) {\n           File file \u003d new File(toDir, entry.getName());\n           ensureDirectory(file.getParentFile());\n           try (OutputStream out \u003d new FileOutputStream(file)) {\n             IOUtils.copyBytes(jar, out, BUFFER_SIZE);\n           }\n           if (!file.setLastModified(entry.getTime())) {\n             numOfFailedLastModifiedSet++;\n           }\n         }\n       }\n       if (numOfFailedLastModifiedSet \u003e 0) {\n         LOG.warn(\"Could not set last modfied time for {} file(s)\",\n             numOfFailedLastModifiedSet);\n       }\n+      // ZipInputStream does not need the end of the file. Let\u0027s read it out.\n+      // This helps with an additional TeeInputStream on the input.\n+      IOUtils.copyBytes(inputStream, new NullOutputStream(), BUFFER_SIZE);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(InputStream inputStream, File toDir,\n                           Pattern unpackRegex)\n      throws IOException {\n    try (JarInputStream jar \u003d new JarInputStream(inputStream)) {\n      int numOfFailedLastModifiedSet \u003d 0;\n      for (JarEntry entry \u003d jar.getNextJarEntry();\n           entry !\u003d null;\n           entry \u003d jar.getNextJarEntry()) {\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          File file \u003d new File(toDir, entry.getName());\n          ensureDirectory(file.getParentFile());\n          try (OutputStream out \u003d new FileOutputStream(file)) {\n            IOUtils.copyBytes(jar, out, BUFFER_SIZE);\n          }\n          if (!file.setLastModified(entry.getTime())) {\n            numOfFailedLastModifiedSet++;\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet \u003e 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n      // ZipInputStream does not need the end of the file. Let\u0027s read it out.\n      // This helps with an additional TeeInputStream on the input.\n      IOUtils.copyBytes(inputStream, new NullOutputStream(), BUFFER_SIZE);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "7288b08330001102f944124d18e02bf0585d3e96": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
      "commitDate": "31/01/18 7:39 AM",
      "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,26 @@\n+  public static void unJar(InputStream inputStream, File toDir,\n+                           Pattern unpackRegex)\n+      throws IOException {\n+    try (JarInputStream jar \u003d new JarInputStream(inputStream)) {\n+      int numOfFailedLastModifiedSet \u003d 0;\n+      for (JarEntry entry \u003d jar.getNextJarEntry();\n+           entry !\u003d null;\n+           entry \u003d jar.getNextJarEntry()) {\n+        if (!entry.isDirectory() \u0026\u0026\n+            unpackRegex.matcher(entry.getName()).matches()) {\n+          File file \u003d new File(toDir, entry.getName());\n+          ensureDirectory(file.getParentFile());\n+          try (OutputStream out \u003d new FileOutputStream(file)) {\n+            IOUtils.copyBytes(jar, out, BUFFER_SIZE);\n+          }\n+          if (!file.setLastModified(entry.getTime())) {\n+            numOfFailedLastModifiedSet++;\n+          }\n+        }\n+      }\n+      if (numOfFailedLastModifiedSet \u003e 0) {\n+        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n+            numOfFailedLastModifiedSet);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(InputStream inputStream, File toDir,\n                           Pattern unpackRegex)\n      throws IOException {\n    try (JarInputStream jar \u003d new JarInputStream(inputStream)) {\n      int numOfFailedLastModifiedSet \u003d 0;\n      for (JarEntry entry \u003d jar.getNextJarEntry();\n           entry !\u003d null;\n           entry \u003d jar.getNextJarEntry()) {\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          File file \u003d new File(toDir, entry.getName());\n          ensureDirectory(file.getParentFile());\n          try (OutputStream out \u003d new FileOutputStream(file)) {\n            IOUtils.copyBytes(jar, out, BUFFER_SIZE);\n          }\n          if (!file.setLastModified(entry.getTime())) {\n            numOfFailedLastModifiedSet++;\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet \u003e 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java"
    }
  }
}