{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeManagerHardwareUtils.java",
  "functionName": "getNodeResources",
  "functionId": "getNodeResources___configuration-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java",
  "functionStartLine": 345,
  "functionEndLine": 384,
  "numCommitsSeen": 10,
  "timeTaken": 2976,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d": "Ybodychange",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "13/12/17 2:56 PM",
      "commitNameOld": "46e18c8da76ea8d91a16e59ba1154c30f37cb9fd",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 457.02,
      "commitsBetweenForRepo": 4006,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public static Resource getNodeResources(Configuration configuration) {\n     Configuration conf \u003d new Configuration(configuration);\n     String memory \u003d ResourceInformation.MEMORY_MB.getName();\n     String vcores \u003d ResourceInformation.VCORES.getName();\n \n     Resource ret \u003d Resource.newInstance(0, 0);\n     Map\u003cString, ResourceInformation\u003e resourceInformation \u003d\n         ResourceUtils.getNodeResourceInformation(conf);\n     for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceInformation\n         .entrySet()) {\n       ret.setResourceInformation(entry.getKey(), entry.getValue());\n-      LOG.debug(\"Setting key \" + entry.getKey() + \" to \" + entry.getValue());\n+      LOG.debug(\"Setting key {} to {}\", entry.getKey(), entry.getValue());\n     }\n     if (resourceInformation.containsKey(memory)) {\n       Long value \u003d resourceInformation.get(memory).getValue();\n       if (value \u003e Integer.MAX_VALUE) {\n         throw new YarnRuntimeException(\"Value \u0027\" + value\n             + \"\u0027 for resource memory is more than the maximum for an integer.\");\n       }\n       ResourceInformation memResInfo \u003d resourceInformation.get(memory);\n       if(memResInfo.getValue() \u003d\u003d 0) {\n         ret.setMemorySize(getContainerMemoryMB(conf));\n-        LOG.debug(\"Set memory to \" + ret.getMemorySize());\n+        LOG.debug(\"Set memory to {}\", ret.getMemorySize());\n       }\n     }\n     if (resourceInformation.containsKey(vcores)) {\n       Long value \u003d resourceInformation.get(vcores).getValue();\n       if (value \u003e Integer.MAX_VALUE) {\n         throw new YarnRuntimeException(\"Value \u0027\" + value\n             + \"\u0027 for resource vcores is more than the maximum for an integer.\");\n       }\n       ResourceInformation vcoresResInfo \u003d resourceInformation.get(vcores);\n       if(vcoresResInfo.getValue() \u003d\u003d 0) {\n         ret.setVirtualCores(getVCores(conf));\n-        LOG.debug(\"Set vcores to \" + ret.getVirtualCores());\n+        LOG.debug(\"Set vcores to {}\", ret.getVirtualCores());\n       }\n     }\n-    LOG.debug(\"Node resource information map is \" + ret);\n+    LOG.debug(\"Node resource information map is {}\", ret);\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Resource getNodeResources(Configuration configuration) {\n    Configuration conf \u003d new Configuration(configuration);\n    String memory \u003d ResourceInformation.MEMORY_MB.getName();\n    String vcores \u003d ResourceInformation.VCORES.getName();\n\n    Resource ret \u003d Resource.newInstance(0, 0);\n    Map\u003cString, ResourceInformation\u003e resourceInformation \u003d\n        ResourceUtils.getNodeResourceInformation(conf);\n    for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceInformation\n        .entrySet()) {\n      ret.setResourceInformation(entry.getKey(), entry.getValue());\n      LOG.debug(\"Setting key {} to {}\", entry.getKey(), entry.getValue());\n    }\n    if (resourceInformation.containsKey(memory)) {\n      Long value \u003d resourceInformation.get(memory).getValue();\n      if (value \u003e Integer.MAX_VALUE) {\n        throw new YarnRuntimeException(\"Value \u0027\" + value\n            + \"\u0027 for resource memory is more than the maximum for an integer.\");\n      }\n      ResourceInformation memResInfo \u003d resourceInformation.get(memory);\n      if(memResInfo.getValue() \u003d\u003d 0) {\n        ret.setMemorySize(getContainerMemoryMB(conf));\n        LOG.debug(\"Set memory to {}\", ret.getMemorySize());\n      }\n    }\n    if (resourceInformation.containsKey(vcores)) {\n      Long value \u003d resourceInformation.get(vcores).getValue();\n      if (value \u003e Integer.MAX_VALUE) {\n        throw new YarnRuntimeException(\"Value \u0027\" + value\n            + \"\u0027 for resource vcores is more than the maximum for an integer.\");\n      }\n      ResourceInformation vcoresResInfo \u003d resourceInformation.get(vcores);\n      if(vcoresResInfo.getValue() \u003d\u003d 0) {\n        ret.setVirtualCores(getVCores(conf));\n        LOG.debug(\"Set vcores to {}\", ret.getVirtualCores());\n      }\n    }\n    LOG.debug(\"Node resource information map is {}\", ret);\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java",
      "extendedDetails": {}
    },
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7039. Fix javac and javadoc errors in YARN-3926 branch. (Sunil G via wangda)\n\nChange-Id: I442bf6d838b3aba83f1f6779cf9dcf8596a2102d\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public static Resource getNodeResources(Configuration configuration) {\n     Configuration conf \u003d new Configuration(configuration);\n     String memory \u003d ResourceInformation.MEMORY_MB.getName();\n     String vcores \u003d ResourceInformation.VCORES.getName();\n \n     Resource ret \u003d Resource.newInstance(0, 0);\n     Map\u003cString, ResourceInformation\u003e resourceInformation \u003d\n         ResourceUtils.getNodeResourceInformation(conf);\n     for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceInformation\n         .entrySet()) {\n       ret.setResourceInformation(entry.getKey(), entry.getValue());\n       LOG.debug(\"Setting key \" + entry.getKey() + \" to \" + entry.getValue());\n     }\n     if (resourceInformation.containsKey(memory)) {\n       Long value \u003d resourceInformation.get(memory).getValue();\n       if (value \u003e Integer.MAX_VALUE) {\n         throw new YarnRuntimeException(\"Value \u0027\" + value\n             + \"\u0027 for resource memory is more than the maximum for an integer.\");\n       }\n       ResourceInformation memResInfo \u003d resourceInformation.get(memory);\n       if(memResInfo.getValue() \u003d\u003d 0) {\n-        ret.setMemory(getContainerMemoryMB(conf));\n-        LOG.debug(\"Set memory to \" + ret.getMemory());\n+        ret.setMemorySize(getContainerMemoryMB(conf));\n+        LOG.debug(\"Set memory to \" + ret.getMemorySize());\n       }\n     }\n     if (resourceInformation.containsKey(vcores)) {\n       Long value \u003d resourceInformation.get(vcores).getValue();\n       if (value \u003e Integer.MAX_VALUE) {\n         throw new YarnRuntimeException(\"Value \u0027\" + value\n             + \"\u0027 for resource vcores is more than the maximum for an integer.\");\n       }\n       ResourceInformation vcoresResInfo \u003d resourceInformation.get(vcores);\n       if(vcoresResInfo.getValue() \u003d\u003d 0) {\n         ret.setVirtualCores(getVCores(conf));\n         LOG.debug(\"Set vcores to \" + ret.getVirtualCores());\n       }\n     }\n     LOG.debug(\"Node resource information map is \" + ret);\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Resource getNodeResources(Configuration configuration) {\n    Configuration conf \u003d new Configuration(configuration);\n    String memory \u003d ResourceInformation.MEMORY_MB.getName();\n    String vcores \u003d ResourceInformation.VCORES.getName();\n\n    Resource ret \u003d Resource.newInstance(0, 0);\n    Map\u003cString, ResourceInformation\u003e resourceInformation \u003d\n        ResourceUtils.getNodeResourceInformation(conf);\n    for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceInformation\n        .entrySet()) {\n      ret.setResourceInformation(entry.getKey(), entry.getValue());\n      LOG.debug(\"Setting key \" + entry.getKey() + \" to \" + entry.getValue());\n    }\n    if (resourceInformation.containsKey(memory)) {\n      Long value \u003d resourceInformation.get(memory).getValue();\n      if (value \u003e Integer.MAX_VALUE) {\n        throw new YarnRuntimeException(\"Value \u0027\" + value\n            + \"\u0027 for resource memory is more than the maximum for an integer.\");\n      }\n      ResourceInformation memResInfo \u003d resourceInformation.get(memory);\n      if(memResInfo.getValue() \u003d\u003d 0) {\n        ret.setMemorySize(getContainerMemoryMB(conf));\n        LOG.debug(\"Set memory to \" + ret.getMemorySize());\n      }\n    }\n    if (resourceInformation.containsKey(vcores)) {\n      Long value \u003d resourceInformation.get(vcores).getValue();\n      if (value \u003e Integer.MAX_VALUE) {\n        throw new YarnRuntimeException(\"Value \u0027\" + value\n            + \"\u0027 for resource vcores is more than the maximum for an integer.\");\n      }\n      ResourceInformation vcoresResInfo \u003d resourceInformation.get(vcores);\n      if(vcoresResInfo.getValue() \u003d\u003d 0) {\n        ret.setVirtualCores(getVCores(conf));\n        LOG.debug(\"Set vcores to \" + ret.getVirtualCores());\n      }\n    }\n    LOG.debug(\"Node resource information map is \" + ret);\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java",
      "extendedDetails": {}
    },
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4830. Add support for resource types in the nodemanager. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,40 @@\n+  public static Resource getNodeResources(Configuration configuration) {\n+    Configuration conf \u003d new Configuration(configuration);\n+    String memory \u003d ResourceInformation.MEMORY_MB.getName();\n+    String vcores \u003d ResourceInformation.VCORES.getName();\n+\n+    Resource ret \u003d Resource.newInstance(0, 0);\n+    Map\u003cString, ResourceInformation\u003e resourceInformation \u003d\n+        ResourceUtils.getNodeResourceInformation(conf);\n+    for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceInformation\n+        .entrySet()) {\n+      ret.setResourceInformation(entry.getKey(), entry.getValue());\n+      LOG.debug(\"Setting key \" + entry.getKey() + \" to \" + entry.getValue());\n+    }\n+    if (resourceInformation.containsKey(memory)) {\n+      Long value \u003d resourceInformation.get(memory).getValue();\n+      if (value \u003e Integer.MAX_VALUE) {\n+        throw new YarnRuntimeException(\"Value \u0027\" + value\n+            + \"\u0027 for resource memory is more than the maximum for an integer.\");\n+      }\n+      ResourceInformation memResInfo \u003d resourceInformation.get(memory);\n+      if(memResInfo.getValue() \u003d\u003d 0) {\n+        ret.setMemory(getContainerMemoryMB(conf));\n+        LOG.debug(\"Set memory to \" + ret.getMemory());\n+      }\n+    }\n+    if (resourceInformation.containsKey(vcores)) {\n+      Long value \u003d resourceInformation.get(vcores).getValue();\n+      if (value \u003e Integer.MAX_VALUE) {\n+        throw new YarnRuntimeException(\"Value \u0027\" + value\n+            + \"\u0027 for resource vcores is more than the maximum for an integer.\");\n+      }\n+      ResourceInformation vcoresResInfo \u003d resourceInformation.get(vcores);\n+      if(vcoresResInfo.getValue() \u003d\u003d 0) {\n+        ret.setVirtualCores(getVCores(conf));\n+        LOG.debug(\"Set vcores to \" + ret.getVirtualCores());\n+      }\n+    }\n+    LOG.debug(\"Node resource information map is \" + ret);\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Resource getNodeResources(Configuration configuration) {\n    Configuration conf \u003d new Configuration(configuration);\n    String memory \u003d ResourceInformation.MEMORY_MB.getName();\n    String vcores \u003d ResourceInformation.VCORES.getName();\n\n    Resource ret \u003d Resource.newInstance(0, 0);\n    Map\u003cString, ResourceInformation\u003e resourceInformation \u003d\n        ResourceUtils.getNodeResourceInformation(conf);\n    for (Map.Entry\u003cString, ResourceInformation\u003e entry : resourceInformation\n        .entrySet()) {\n      ret.setResourceInformation(entry.getKey(), entry.getValue());\n      LOG.debug(\"Setting key \" + entry.getKey() + \" to \" + entry.getValue());\n    }\n    if (resourceInformation.containsKey(memory)) {\n      Long value \u003d resourceInformation.get(memory).getValue();\n      if (value \u003e Integer.MAX_VALUE) {\n        throw new YarnRuntimeException(\"Value \u0027\" + value\n            + \"\u0027 for resource memory is more than the maximum for an integer.\");\n      }\n      ResourceInformation memResInfo \u003d resourceInformation.get(memory);\n      if(memResInfo.getValue() \u003d\u003d 0) {\n        ret.setMemory(getContainerMemoryMB(conf));\n        LOG.debug(\"Set memory to \" + ret.getMemory());\n      }\n    }\n    if (resourceInformation.containsKey(vcores)) {\n      Long value \u003d resourceInformation.get(vcores).getValue();\n      if (value \u003e Integer.MAX_VALUE) {\n        throw new YarnRuntimeException(\"Value \u0027\" + value\n            + \"\u0027 for resource vcores is more than the maximum for an integer.\");\n      }\n      ResourceInformation vcoresResInfo \u003d resourceInformation.get(vcores);\n      if(vcoresResInfo.getValue() \u003d\u003d 0) {\n        ret.setVirtualCores(getVCores(conf));\n        LOG.debug(\"Set vcores to \" + ret.getVirtualCores());\n      }\n    }\n    LOG.debug(\"Node resource information map is \" + ret);\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java"
    }
  }
}