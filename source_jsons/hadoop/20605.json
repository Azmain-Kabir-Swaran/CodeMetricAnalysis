{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MultithreadedMapRunner.java",
  "functionName": "configure",
  "functionId": "configure___jobConf-JobConf",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java",
  "functionStartLine": 71,
  "functionEndLine": 93,
  "numCommitsSeen": 7,
  "timeTaken": 4584,
  "changeHistory": [
    "2440671a117f165dcda5056404bc898df3c50803",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "2440671a117f165dcda5056404bc898df3c50803": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2440671a117f165dcda5056404bc898df3c50803": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6634. Log uncaught exceptions/errors in various thread pools in mapreduce. Contributed by Sidharta Seethana.\n",
      "commitDate": "18/02/16 12:48 AM",
      "commitName": "2440671a117f165dcda5056404bc898df3c50803",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "24/02/15 12:10 PM",
      "commitNameOld": "9a37247a6747d5d1a8749750698a1ae2f7b68414",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 358.53,
      "commitsBetweenForRepo": 2827,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   public void configure(JobConf jobConf) {\n     int numberOfThreads \u003d\n       jobConf.getInt(MultithreadedMapper.NUM_THREADS, 10);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Configuring jobConf \" + jobConf.getJobName() +\n                 \" to use \" + numberOfThreads + \" threads\");\n     }\n \n     this.job \u003d jobConf;\n     //increment processed counter only if skipping feature is enabled\n     this.incrProcCount \u003d SkipBadRecords.getMapperMaxSkipRecords(job)\u003e0 \u0026\u0026 \n       SkipBadRecords.getAutoIncrMapperProcCount(job);\n     this.mapper \u003d ReflectionUtils.newInstance(jobConf.getMapperClass(),\n         jobConf);\n \n     // Creating a threadpool of the configured size to execute the Mapper\n     // map method in parallel.\n-    executorService \u003d new ThreadPoolExecutor(numberOfThreads, numberOfThreads, \n+    executorService \u003d new HadoopThreadPoolExecutor(numberOfThreads,\n+        numberOfThreads,\n                                              0L, TimeUnit.MILLISECONDS,\n                                              new BlockingArrayQueue\n                                                (numberOfThreads));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void configure(JobConf jobConf) {\n    int numberOfThreads \u003d\n      jobConf.getInt(MultithreadedMapper.NUM_THREADS, 10);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Configuring jobConf \" + jobConf.getJobName() +\n                \" to use \" + numberOfThreads + \" threads\");\n    }\n\n    this.job \u003d jobConf;\n    //increment processed counter only if skipping feature is enabled\n    this.incrProcCount \u003d SkipBadRecords.getMapperMaxSkipRecords(job)\u003e0 \u0026\u0026 \n      SkipBadRecords.getAutoIncrMapperProcCount(job);\n    this.mapper \u003d ReflectionUtils.newInstance(jobConf.getMapperClass(),\n        jobConf);\n\n    // Creating a threadpool of the configured size to execute the Mapper\n    // map method in parallel.\n    executorService \u003d new HadoopThreadPoolExecutor(numberOfThreads,\n        numberOfThreads,\n                                             0L, TimeUnit.MILLISECONDS,\n                                             new BlockingArrayQueue\n                                               (numberOfThreads));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void configure(JobConf jobConf) {\n    int numberOfThreads \u003d\n      jobConf.getInt(MultithreadedMapper.NUM_THREADS, 10);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Configuring jobConf \" + jobConf.getJobName() +\n                \" to use \" + numberOfThreads + \" threads\");\n    }\n\n    this.job \u003d jobConf;\n    //increment processed counter only if skipping feature is enabled\n    this.incrProcCount \u003d SkipBadRecords.getMapperMaxSkipRecords(job)\u003e0 \u0026\u0026 \n      SkipBadRecords.getAutoIncrMapperProcCount(job);\n    this.mapper \u003d ReflectionUtils.newInstance(jobConf.getMapperClass(),\n        jobConf);\n\n    // Creating a threadpool of the configured size to execute the Mapper\n    // map method in parallel.\n    executorService \u003d new ThreadPoolExecutor(numberOfThreads, numberOfThreads, \n                                             0L, TimeUnit.MILLISECONDS,\n                                             new BlockingArrayQueue\n                                               (numberOfThreads));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void configure(JobConf jobConf) {\n    int numberOfThreads \u003d\n      jobConf.getInt(MultithreadedMapper.NUM_THREADS, 10);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Configuring jobConf \" + jobConf.getJobName() +\n                \" to use \" + numberOfThreads + \" threads\");\n    }\n\n    this.job \u003d jobConf;\n    //increment processed counter only if skipping feature is enabled\n    this.incrProcCount \u003d SkipBadRecords.getMapperMaxSkipRecords(job)\u003e0 \u0026\u0026 \n      SkipBadRecords.getAutoIncrMapperProcCount(job);\n    this.mapper \u003d ReflectionUtils.newInstance(jobConf.getMapperClass(),\n        jobConf);\n\n    // Creating a threadpool of the configured size to execute the Mapper\n    // map method in parallel.\n    executorService \u003d new ThreadPoolExecutor(numberOfThreads, numberOfThreads, \n                                             0L, TimeUnit.MILLISECONDS,\n                                             new BlockingArrayQueue\n                                               (numberOfThreads));\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+  public void configure(JobConf jobConf) {\n+    int numberOfThreads \u003d\n+      jobConf.getInt(MultithreadedMapper.NUM_THREADS, 10);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Configuring jobConf \" + jobConf.getJobName() +\n+                \" to use \" + numberOfThreads + \" threads\");\n+    }\n+\n+    this.job \u003d jobConf;\n+    //increment processed counter only if skipping feature is enabled\n+    this.incrProcCount \u003d SkipBadRecords.getMapperMaxSkipRecords(job)\u003e0 \u0026\u0026 \n+      SkipBadRecords.getAutoIncrMapperProcCount(job);\n+    this.mapper \u003d ReflectionUtils.newInstance(jobConf.getMapperClass(),\n+        jobConf);\n+\n+    // Creating a threadpool of the configured size to execute the Mapper\n+    // map method in parallel.\n+    executorService \u003d new ThreadPoolExecutor(numberOfThreads, numberOfThreads, \n+                                             0L, TimeUnit.MILLISECONDS,\n+                                             new BlockingArrayQueue\n+                                               (numberOfThreads));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void configure(JobConf jobConf) {\n    int numberOfThreads \u003d\n      jobConf.getInt(MultithreadedMapper.NUM_THREADS, 10);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Configuring jobConf \" + jobConf.getJobName() +\n                \" to use \" + numberOfThreads + \" threads\");\n    }\n\n    this.job \u003d jobConf;\n    //increment processed counter only if skipping feature is enabled\n    this.incrProcCount \u003d SkipBadRecords.getMapperMaxSkipRecords(job)\u003e0 \u0026\u0026 \n      SkipBadRecords.getAutoIncrMapperProcCount(job);\n    this.mapper \u003d ReflectionUtils.newInstance(jobConf.getMapperClass(),\n        jobConf);\n\n    // Creating a threadpool of the configured size to execute the Mapper\n    // map method in parallel.\n    executorService \u003d new ThreadPoolExecutor(numberOfThreads, numberOfThreads, \n                                             0L, TimeUnit.MILLISECONDS,\n                                             new BlockingArrayQueue\n                                               (numberOfThreads));\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/lib/MultithreadedMapRunner.java"
    }
  }
}