{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineClientImpl.java",
  "functionName": "getDelegationToken",
  "functionId": "getDelegationToken___renewer-String(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
  "functionStartLine": 193,
  "functionEndLine": 214,
  "numCommitsSeen": 57,
  "timeTaken": 3680,
  "changeHistory": [
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "9b5636408005676ae580f8d929f8e912c27828e7",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
    "1b4be918664b09272b120bc42de3e5fc02d79047",
    "b2942762d7f76d510ece5621c71116346a6b12f6",
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2"
  ],
  "changeHistoryShort": {
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "9b5636408005676ae580f8d929f8e912c27828e7": "Ybodychange",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": "Ybodychange",
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117": "Ybodychange",
    "1b4be918664b09272b120bc42de3e5fc02d79047": "Ybodychange",
    "b2942762d7f76d510ece5621c71116346a6b12f6": "Ybodychange",
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059": "Ymultichange(Ybodychange,Yparametermetachange)",
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885": "Yfilerename",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "27/12/16 2:14 PM",
      "commitNameOld": "9262797e86453fc04b7ca3710b73b21fcdf9e6b4",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 50.89,
      "commitsBetweenForRepo": 246,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n       final String renewer) throws IOException, YarnException {\n     PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e\n         getDTAction \u003d\n         new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n \n           @Override\n           public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n               throws Exception {\n             DelegationTokenAuthenticatedURL authUrl \u003d\n-                new DelegationTokenAuthenticatedURL(authenticator,\n-                    connConfigurator);\n+                connector.getDelegationTokenAuthenticatedURL();\n             // TODO we should add retry logic here if timelineServiceAddress is\n             // not available immediately.\n             return (Token) authUrl.getDelegationToken(\n-                constructResURI(getConfig(),\n-                    getTimelineServiceAddress(), false).toURL(),\n+                TimelineConnector.constructResURI(getConfig(),\n+                    getTimelineServiceAddress(), RESOURCE_URI_STR_V1).toURL(),\n                 token, renewer, doAsUser);\n           }\n         };\n-    return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n+    return (Token\u003cTimelineDelegationTokenIdentifier\u003e) connector\n+        .operateDelegationToken(getDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      final String renewer) throws IOException, YarnException {\n    PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e\n        getDTAction \u003d\n        new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n\n          @Override\n          public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n              throws Exception {\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                connector.getDelegationTokenAuthenticatedURL();\n            // TODO we should add retry logic here if timelineServiceAddress is\n            // not available immediately.\n            return (Token) authUrl.getDelegationToken(\n                TimelineConnector.constructResURI(getConfig(),\n                    getTimelineServiceAddress(), RESOURCE_URI_STR_V1).toURL(),\n                token, renewer, doAsUser);\n          }\n        };\n    return (Token\u003cTimelineDelegationTokenIdentifier\u003e) connector\n        .operateDelegationToken(getDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "9b5636408005676ae580f8d929f8e912c27828e7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,21 @@\n   public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n       final String renewer) throws IOException, YarnException {\n-    PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e getDTAction \u003d\n+    PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e\n+        getDTAction \u003d\n         new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n \n           @Override\n           public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n               throws Exception {\n             DelegationTokenAuthenticatedURL authUrl \u003d\n                 new DelegationTokenAuthenticatedURL(authenticator,\n                     connConfigurator);\n+            // TODO we should add retry logic here if timelineServiceAddress is\n+            // not available immediately.\n             return (Token) authUrl.getDelegationToken(\n-                constructResURI(getConfig(), timelineServiceAddress, false).toURL(),\n+                constructResURI(getConfig(), getTimelineServiceAddress(), false).toURL(),\n                 token, renewer, doAsUser);\n           }\n         };\n     return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      final String renewer) throws IOException, YarnException {\n    PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e\n        getDTAction \u003d\n        new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n\n          @Override\n          public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n              throws Exception {\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            // TODO we should add retry logic here if timelineServiceAddress is\n            // not available immediately.\n            return (Token) authUrl.getDelegationToken(\n                constructResURI(getConfig(), getTimelineServiceAddress(), false).toURL(),\n                token, renewer, doAsUser);\n          }\n        };\n    return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthor": "Junping Du",
      "commitDateOld": "18/04/16 11:47 AM",
      "commitNameOld": "477003730e6a7c7eff11892f5cedf74073ca867b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 82.87,
      "commitsBetweenForRepo": 551,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n       final String renewer) throws IOException, YarnException {\n     PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e getDTAction \u003d\n         new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n \n           @Override\n           public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n               throws Exception {\n             DelegationTokenAuthenticatedURL authUrl \u003d\n                 new DelegationTokenAuthenticatedURL(authenticator,\n                     connConfigurator);\n             return (Token) authUrl.getDelegationToken(\n-                resURI.toURL(), token, renewer, doAsUser);\n+                constructResURI(getConfig(), timelineServiceAddress, false).toURL(),\n+                token, renewer, doAsUser);\n           }\n         };\n     return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      final String renewer) throws IOException, YarnException {\n    PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e getDTAction \u003d\n        new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n\n          @Override\n          public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n              throws Exception {\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            return (Token) authUrl.getDelegationToken(\n                constructResURI(getConfig(), timelineServiceAddress, false).toURL(),\n                token, renewer, doAsUser);\n          }\n        };\n    return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3287. Made TimelineClient put methods do as the correct login context. Contributed by Daryn Sharp and Jonathan Eagles.\n",
      "commitDate": "09/03/15 1:54 PM",
      "commitName": "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "06/03/15 1:32 PM",
      "commitNameOld": "d1abc5d4fc00bb1b226066684556ba16ace71744",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,17 @@\n   public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n       final String renewer) throws IOException, YarnException {\n-    boolean isProxyAccess \u003d\n-        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n-        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n-    final String doAsUser \u003d isProxyAccess ?\n-        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n     PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e getDTAction \u003d\n         new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n \n           @Override\n           public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n               throws Exception {\n             DelegationTokenAuthenticatedURL authUrl \u003d\n                 new DelegationTokenAuthenticatedURL(authenticator,\n                     connConfigurator);\n             return (Token) authUrl.getDelegationToken(\n                 resURI.toURL(), token, renewer, doAsUser);\n           }\n         };\n     return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      final String renewer) throws IOException, YarnException {\n    PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e getDTAction \u003d\n        new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n\n          @Override\n          public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n              throws Exception {\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            return (Token) authUrl.getDelegationToken(\n                resURI.toURL(), token, renewer, doAsUser);\n          }\n        };\n    return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "1b4be918664b09272b120bc42de3e5fc02d79047": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2770. Added functionality to renew/cancel TimeLineDelegationToken. Contributed by Zhijie Shen\n",
      "commitDate": "31/10/14 1:16 PM",
      "commitName": "1b4be918664b09272b120bc42de3e5fc02d79047",
      "commitAuthor": "Jian He",
      "commitDateOld": "21/10/14 4:06 PM",
      "commitNameOld": "b2942762d7f76d510ece5621c71116346a6b12f6",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 9.88,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,22 @@\n   public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n       final String renewer) throws IOException, YarnException {\n-    // Set up the retry operation\n-    TimelineClientRetryOp tokenRetryOp \u003d new TimelineClientRetryOp() {\n-      @Override\n-      public Object run() throws IOException {\n-        // Try pass the request, if fail, keep retrying\n-        boolean isProxyAccess \u003d\n-            UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n-            \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n-        UserGroupInformation callerUGI \u003d isProxyAccess ?\n-            UserGroupInformation.getCurrentUser().getRealUser()\n-            : UserGroupInformation.getCurrentUser();\n-        final String doAsUser \u003d isProxyAccess ?\n-            UserGroupInformation.getCurrentUser().getShortUserName() : null;\n-        try {\n-          return callerUGI.doAs(\n-              new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n-            @Override\n-            public Token\u003cTimelineDelegationTokenIdentifier\u003e run() throws Exception {\n-              DelegationTokenAuthenticatedURL authUrl \u003d\n-                  new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\n-              return (Token) authUrl.getDelegationToken(\n-                  resURI.toURL(), token, renewer, doAsUser);\n-            }\n-          });\n-        } catch (UndeclaredThrowableException e) {\n-          throw new IOException(e.getCause());\n-        } catch (InterruptedException e) {\n-          throw new IOException(e);\n-        }\n-      }\n-      @Override\n-      public boolean shouldRetryOn(Exception e) {\n-        // Only retry on connection exceptions\n-        return (e instanceof ConnectException);\n-      }\n-    };\n+    boolean isProxyAccess \u003d\n+        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n+        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n+    final String doAsUser \u003d isProxyAccess ?\n+        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n+    PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e getDTAction \u003d\n+        new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n \n-    return (Token\u003cTimelineDelegationTokenIdentifier\u003e)\n-        connectionRetry.retryOn(tokenRetryOp);\n+          @Override\n+          public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n+              throws Exception {\n+            DelegationTokenAuthenticatedURL authUrl \u003d\n+                new DelegationTokenAuthenticatedURL(authenticator,\n+                    connConfigurator);\n+            return (Token) authUrl.getDelegationToken(\n+                resURI.toURL(), token, renewer, doAsUser);\n+          }\n+        };\n+    return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      final String renewer) throws IOException, YarnException {\n    boolean isProxyAccess \u003d\n        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n    final String doAsUser \u003d isProxyAccess ?\n        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n    PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e getDTAction \u003d\n        new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n\n          @Override\n          public Token\u003cTimelineDelegationTokenIdentifier\u003e run()\n              throws Exception {\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            return (Token) authUrl.getDelegationToken(\n                resURI.toURL(), token, renewer, doAsUser);\n          }\n        };\n    return (Token\u003cTimelineDelegationTokenIdentifier\u003e) operateDelegationToken(getDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "b2942762d7f76d510ece5621c71116346a6b12f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2709. Made timeline client getDelegationToken API retry if ConnectException happens. Contributed by Li Lu.\n",
      "commitDate": "21/10/14 4:06 PM",
      "commitName": "b2942762d7f76d510ece5621c71116346a6b12f6",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "20/10/14 12:22 PM",
      "commitNameOld": "89427419a3c5eaab0f73bae98d675979b9efab5f",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,42 @@\n   public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n       final String renewer) throws IOException, YarnException {\n-    boolean isProxyAccess \u003d\n-        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n-        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n-    UserGroupInformation callerUGI \u003d isProxyAccess ?\n-        UserGroupInformation.getCurrentUser().getRealUser()\n-        : UserGroupInformation.getCurrentUser();\n-    final String doAsUser \u003d isProxyAccess ?\n-        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n-    try {\n-      return callerUGI.doAs(\n-          new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n-        @Override\n-        public Token\u003cTimelineDelegationTokenIdentifier\u003e run() throws Exception {\n-          DelegationTokenAuthenticatedURL authUrl \u003d\n-              new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\n-          return (Token) authUrl.getDelegationToken(\n-              resURI.toURL(), token, renewer, doAsUser);\n+    // Set up the retry operation\n+    TimelineClientRetryOp tokenRetryOp \u003d new TimelineClientRetryOp() {\n+      @Override\n+      public Object run() throws IOException {\n+        // Try pass the request, if fail, keep retrying\n+        boolean isProxyAccess \u003d\n+            UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n+            \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n+        UserGroupInformation callerUGI \u003d isProxyAccess ?\n+            UserGroupInformation.getCurrentUser().getRealUser()\n+            : UserGroupInformation.getCurrentUser();\n+        final String doAsUser \u003d isProxyAccess ?\n+            UserGroupInformation.getCurrentUser().getShortUserName() : null;\n+        try {\n+          return callerUGI.doAs(\n+              new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n+            @Override\n+            public Token\u003cTimelineDelegationTokenIdentifier\u003e run() throws Exception {\n+              DelegationTokenAuthenticatedURL authUrl \u003d\n+                  new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\n+              return (Token) authUrl.getDelegationToken(\n+                  resURI.toURL(), token, renewer, doAsUser);\n+            }\n+          });\n+        } catch (UndeclaredThrowableException e) {\n+          throw new IOException(e.getCause());\n+        } catch (InterruptedException e) {\n+          throw new IOException(e);\n         }\n-      });\n-    } catch (UndeclaredThrowableException e) {\n-      throw new IOException(e.getCause());\n-    } catch (InterruptedException e) {\n-      throw new IOException(e);\n-    }\n+      }\n+      @Override\n+      public boolean shouldRetryOn(Exception e) {\n+        // Only retry on connection exceptions\n+        return (e instanceof ConnectException);\n+      }\n+    };\n+\n+    return (Token\u003cTimelineDelegationTokenIdentifier\u003e)\n+        connectionRetry.retryOn(tokenRetryOp);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      final String renewer) throws IOException, YarnException {\n    // Set up the retry operation\n    TimelineClientRetryOp tokenRetryOp \u003d new TimelineClientRetryOp() {\n      @Override\n      public Object run() throws IOException {\n        // Try pass the request, if fail, keep retrying\n        boolean isProxyAccess \u003d\n            UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n            \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n        UserGroupInformation callerUGI \u003d isProxyAccess ?\n            UserGroupInformation.getCurrentUser().getRealUser()\n            : UserGroupInformation.getCurrentUser();\n        final String doAsUser \u003d isProxyAccess ?\n            UserGroupInformation.getCurrentUser().getShortUserName() : null;\n        try {\n          return callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n            @Override\n            public Token\u003cTimelineDelegationTokenIdentifier\u003e run() throws Exception {\n              DelegationTokenAuthenticatedURL authUrl \u003d\n                  new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\n              return (Token) authUrl.getDelegationToken(\n                  resURI.toURL(), token, renewer, doAsUser);\n            }\n          });\n        } catch (UndeclaredThrowableException e) {\n          throw new IOException(e.getCause());\n        } catch (InterruptedException e) {\n          throw new IOException(e);\n        }\n      }\n      @Override\n      public boolean shouldRetryOn(Exception e) {\n        // Only retry on connection exceptions\n        return (e instanceof ConnectException);\n      }\n    };\n\n    return (Token\u003cTimelineDelegationTokenIdentifier\u003e)\n        connectionRetry.retryOn(tokenRetryOp);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-2676. Enhanced Timeline auth-filter to support proxy users. Contributed by Zhijie Shen.\n",
      "commitDate": "17/10/14 10:02 PM",
      "commitName": "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2676. Enhanced Timeline auth-filter to support proxy users. Contributed by Zhijie Shen.\n",
          "commitDate": "17/10/14 10:02 PM",
          "commitName": "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "09/10/14 12:59 PM",
          "commitNameOld": "1d4612f5ad9678c952b416e798dccd20c88f96ef",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 8.38,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,27 @@\n   public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n-      String renewer) throws IOException, YarnException {\n-    return TimelineAuthenticator.getDelegationToken(resURI.toURL(),\n-        urlFactory.token, renewer);\n+      final String renewer) throws IOException, YarnException {\n+    boolean isProxyAccess \u003d\n+        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n+        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n+    UserGroupInformation callerUGI \u003d isProxyAccess ?\n+        UserGroupInformation.getCurrentUser().getRealUser()\n+        : UserGroupInformation.getCurrentUser();\n+    final String doAsUser \u003d isProxyAccess ?\n+        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n+    try {\n+      return callerUGI.doAs(\n+          new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n+        @Override\n+        public Token\u003cTimelineDelegationTokenIdentifier\u003e run() throws Exception {\n+          DelegationTokenAuthenticatedURL authUrl \u003d\n+              new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\n+          return (Token) authUrl.getDelegationToken(\n+              resURI.toURL(), token, renewer, doAsUser);\n+        }\n+      });\n+    } catch (UndeclaredThrowableException e) {\n+      throw new IOException(e.getCause());\n+    } catch (InterruptedException e) {\n+      throw new IOException(e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      final String renewer) throws IOException, YarnException {\n    boolean isProxyAccess \u003d\n        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n    UserGroupInformation callerUGI \u003d isProxyAccess ?\n        UserGroupInformation.getCurrentUser().getRealUser()\n        : UserGroupInformation.getCurrentUser();\n    final String doAsUser \u003d isProxyAccess ?\n        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n    try {\n      return callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n        @Override\n        public Token\u003cTimelineDelegationTokenIdentifier\u003e run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\n          return (Token) authUrl.getDelegationToken(\n              resURI.toURL(), token, renewer, doAsUser);\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new IOException(e.getCause());\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-2676. Enhanced Timeline auth-filter to support proxy users. Contributed by Zhijie Shen.\n",
          "commitDate": "17/10/14 10:02 PM",
          "commitName": "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "09/10/14 12:59 PM",
          "commitNameOld": "1d4612f5ad9678c952b416e798dccd20c88f96ef",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 8.38,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,27 @@\n   public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n-      String renewer) throws IOException, YarnException {\n-    return TimelineAuthenticator.getDelegationToken(resURI.toURL(),\n-        urlFactory.token, renewer);\n+      final String renewer) throws IOException, YarnException {\n+    boolean isProxyAccess \u003d\n+        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n+        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n+    UserGroupInformation callerUGI \u003d isProxyAccess ?\n+        UserGroupInformation.getCurrentUser().getRealUser()\n+        : UserGroupInformation.getCurrentUser();\n+    final String doAsUser \u003d isProxyAccess ?\n+        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n+    try {\n+      return callerUGI.doAs(\n+          new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n+        @Override\n+        public Token\u003cTimelineDelegationTokenIdentifier\u003e run() throws Exception {\n+          DelegationTokenAuthenticatedURL authUrl \u003d\n+              new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\n+          return (Token) authUrl.getDelegationToken(\n+              resURI.toURL(), token, renewer, doAsUser);\n+        }\n+      });\n+    } catch (UndeclaredThrowableException e) {\n+      throw new IOException(e.getCause());\n+    } catch (InterruptedException e) {\n+      throw new IOException(e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      final String renewer) throws IOException, YarnException {\n    boolean isProxyAccess \u003d\n        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n    UserGroupInformation callerUGI \u003d isProxyAccess ?\n        UserGroupInformation.getCurrentUser().getRealUser()\n        : UserGroupInformation.getCurrentUser();\n    final String doAsUser \u003d isProxyAccess ?\n        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n    try {\n      return callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cToken\u003cTimelineDelegationTokenIdentifier\u003e\u003e() {\n        @Override\n        public Token\u003cTimelineDelegationTokenIdentifier\u003e run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\n          return (Token) authUrl.getDelegationToken(\n              resURI.toURL(), token, renewer, doAsUser);\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new IOException(e.getCause());\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {
            "oldValue": "[renewer-String]",
            "newValue": "[renewer-String(modifiers-final)]"
          }
        }
      ]
    },
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2298. Move TimelineClient to yarn-common project (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 10:48 PM",
      "commitName": "b47f65214c7a7b6ca8c77369ebc90dba67f9d885",
      "commitAuthor": "Junping Du",
      "commitDateOld": "05/08/14 5:50 PM",
      "commitNameOld": "812ac91add512c518394178c5162720d61957e1f",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      String renewer) throws IOException, YarnException {\n    return TimelineAuthenticator.getDelegationToken(resURI.toURL(),\n        urlFactory.token, renewer);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
      }
    },
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1936. Added security support for the Timeline Client. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597153 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 11:47 AM",
      "commitName": "af8b09af75b252aa75b86ca42323c5b21eb41ee2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,5 @@\n+  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n+      String renewer) throws IOException, YarnException {\n+    return TimelineAuthenticator.getDelegationToken(resURI.toURL(),\n+        urlFactory.token, renewer);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cTimelineDelegationTokenIdentifier\u003e getDelegationToken(\n      String renewer) throws IOException, YarnException {\n    return TimelineAuthenticator.getDelegationToken(resURI.toURL(),\n        urlFactory.token, renewer);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
    }
  }
}