{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnmanagedApplicationManager.java",
  "functionName": "registerApplicationMaster",
  "functionId": "registerApplicationMaster___request-RegisterApplicationMasterRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
  "functionStartLine": 215,
  "functionEndLine": 245,
  "numCommitsSeen": 15,
  "timeTaken": 4049,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "3090922805699b8374a359e92323884a4177dc4e",
    "f1525825623a1307b5aa55c456b6afa3e0c61135",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "859aa1f9d621d07693825e610bdc0149f7a2770a"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "3090922805699b8374a359e92323884a4177dc4e": "Ybodychange",
    "f1525825623a1307b5aa55c456b6afa3e0c61135": "Ybodychange",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ymultichange(Yrename,Ybodychange)",
    "859aa1f9d621d07693825e610bdc0149f7a2770a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/11/18 3:30 PM",
      "commitNameOld": "989715ec5066c6ac7868e25ad9234dc64723e61e",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 133.04,
      "commitsBetweenForRepo": 965,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public RegisterApplicationMasterResponse registerApplicationMaster(\n       RegisterApplicationMasterRequest request)\n       throws YarnException, IOException {\n     // Save the register request for re-register later\n     this.registerRequest \u003d request;\n \n     LOG.info(\"Registering the Unmanaged application master {}\",\n         this.applicationId);\n     RegisterApplicationMasterResponse response \u003d\n         this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\n     this.heartbeatHandler.resetLastResponseId();\n \n     for (Container container : response.getContainersFromPreviousAttempts()) {\n-      LOG.debug(\"RegisterUAM returned existing running container \"\n-          + container.getId());\n+      LOG.debug(\"RegisterUAM returned existing running container {}\",\n+          container.getId());\n     }\n     for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n-      LOG.debug(\"RegisterUAM returned existing NM token for node \"\n-          + nmToken.getNodeId());\n+      LOG.debug(\"RegisterUAM returned existing NM token for node {}\",\n+          nmToken.getNodeId());\n     }\n     LOG.info(\n         \"RegisterUAM returned {} existing running container and {} NM tokens\",\n         response.getContainersFromPreviousAttempts().size(),\n         response.getNMTokensFromPreviousAttempts().size());\n \n     // Only when register succeed that we start the heartbeat thread\n     this.heartbeatHandler.setDaemon(true);\n     this.heartbeatHandler.start();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // Save the register request for re-register later\n    this.registerRequest \u003d request;\n\n    LOG.info(\"Registering the Unmanaged application master {}\",\n        this.applicationId);\n    RegisterApplicationMasterResponse response \u003d\n        this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\n    this.heartbeatHandler.resetLastResponseId();\n\n    for (Container container : response.getContainersFromPreviousAttempts()) {\n      LOG.debug(\"RegisterUAM returned existing running container {}\",\n          container.getId());\n    }\n    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n      LOG.debug(\"RegisterUAM returned existing NM token for node {}\",\n          nmToken.getNodeId());\n    }\n    LOG.info(\n        \"RegisterUAM returned {} existing running container and {} NM tokens\",\n        response.getContainersFromPreviousAttempts().size(),\n        response.getNMTokensFromPreviousAttempts().size());\n\n    // Only when register succeed that we start the heartbeat thread\n    this.heartbeatHandler.setDaemon(true);\n    this.heartbeatHandler.start();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/09/18 11:46 AM",
      "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n   public RegisterApplicationMasterResponse registerApplicationMaster(\n       RegisterApplicationMasterRequest request)\n       throws YarnException, IOException {\n     // Save the register request for re-register later\n     this.registerRequest \u003d request;\n \n     LOG.info(\"Registering the Unmanaged application master {}\",\n         this.applicationId);\n     RegisterApplicationMasterResponse response \u003d\n         this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\n     this.heartbeatHandler.resetLastResponseId();\n \n     for (Container container : response.getContainersFromPreviousAttempts()) {\n       LOG.debug(\"RegisterUAM returned existing running container \"\n           + container.getId());\n     }\n     for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n       LOG.debug(\"RegisterUAM returned existing NM token for node \"\n           + nmToken.getNodeId());\n     }\n+    LOG.info(\n+        \"RegisterUAM returned {} existing running container and {} NM tokens\",\n+        response.getContainersFromPreviousAttempts().size(),\n+        response.getNMTokensFromPreviousAttempts().size());\n \n     // Only when register succeed that we start the heartbeat thread\n     this.heartbeatHandler.setDaemon(true);\n     this.heartbeatHandler.start();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // Save the register request for re-register later\n    this.registerRequest \u003d request;\n\n    LOG.info(\"Registering the Unmanaged application master {}\",\n        this.applicationId);\n    RegisterApplicationMasterResponse response \u003d\n        this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\n    this.heartbeatHandler.resetLastResponseId();\n\n    for (Container container : response.getContainersFromPreviousAttempts()) {\n      LOG.debug(\"RegisterUAM returned existing running container \"\n          + container.getId());\n    }\n    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n      LOG.debug(\"RegisterUAM returned existing NM token for node \"\n          + nmToken.getNodeId());\n    }\n    LOG.info(\n        \"RegisterUAM returned {} existing running container and {} NM tokens\",\n        response.getContainersFromPreviousAttempts().size(),\n        response.getNMTokensFromPreviousAttempts().size());\n\n    // Only when register succeed that we start the heartbeat thread\n    this.heartbeatHandler.setDaemon(true);\n    this.heartbeatHandler.start();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "f1525825623a1307b5aa55c456b6afa3e0c61135": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
      "commitDate": "27/08/18 10:32 AM",
      "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/08/18 12:22 PM",
      "commitNameOld": "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n   public RegisterApplicationMasterResponse registerApplicationMaster(\n       RegisterApplicationMasterRequest request)\n       throws YarnException, IOException {\n     // Save the register request for re-register later\n     this.registerRequest \u003d request;\n \n     LOG.info(\"Registering the Unmanaged application master {}\",\n         this.applicationId);\n     RegisterApplicationMasterResponse response \u003d\n         this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\n-    this.lastResponseId \u003d 0;\n+    this.heartbeatHandler.resetLastResponseId();\n \n     for (Container container : response.getContainersFromPreviousAttempts()) {\n       LOG.debug(\"RegisterUAM returned existing running container \"\n           + container.getId());\n     }\n     for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n       LOG.debug(\"RegisterUAM returned existing NM token for node \"\n           + nmToken.getNodeId());\n     }\n \n     // Only when register succeed that we start the heartbeat thread\n-    this.handlerThread.setUncaughtExceptionHandler(\n-        new HeartBeatThreadUncaughtExceptionHandler());\n-    this.handlerThread.setDaemon(true);\n-    this.handlerThread.start();\n+    this.heartbeatHandler.setDaemon(true);\n+    this.heartbeatHandler.start();\n \n-    this.lastResponseId \u003d 0;\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // Save the register request for re-register later\n    this.registerRequest \u003d request;\n\n    LOG.info(\"Registering the Unmanaged application master {}\",\n        this.applicationId);\n    RegisterApplicationMasterResponse response \u003d\n        this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\n    this.heartbeatHandler.resetLastResponseId();\n\n    for (Container container : response.getContainersFromPreviousAttempts()) {\n      LOG.debug(\"RegisterUAM returned existing running container \"\n          + container.getId());\n    }\n    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n      LOG.debug(\"RegisterUAM returned existing NM token for node \"\n          + nmToken.getNodeId());\n    }\n\n    // Only when register succeed that we start the heartbeat thread\n    this.heartbeatHandler.setDaemon(true);\n    this.heartbeatHandler.start();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7899. [AMRMProxy] Stateful FederationInterceptor for pending requests. Contributed by Botong Huang.\n",
      "commitDate": "09/07/18 12:27 PM",
      "commitName": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 27.16,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   public RegisterApplicationMasterResponse registerApplicationMaster(\n       RegisterApplicationMasterRequest request)\n       throws YarnException, IOException {\n     // Save the register request for re-register later\n     this.registerRequest \u003d request;\n \n-    // Since we have setKeepContainersAcrossApplicationAttempts \u003d true for UAM.\n-    // We do not expect application already registered exception here\n     LOG.info(\"Registering the Unmanaged application master {}\",\n         this.applicationId);\n     RegisterApplicationMasterResponse response \u003d\n-        this.rmProxy.registerApplicationMaster(this.registerRequest);\n+        this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\n+    this.lastResponseId \u003d 0;\n \n     for (Container container : response.getContainersFromPreviousAttempts()) {\n-      LOG.info(\"RegisterUAM returned existing running container \"\n+      LOG.debug(\"RegisterUAM returned existing running container \"\n           + container.getId());\n     }\n     for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n-      LOG.info(\"RegisterUAM returned existing NM token for node \"\n+      LOG.debug(\"RegisterUAM returned existing NM token for node \"\n           + nmToken.getNodeId());\n     }\n \n     // Only when register succeed that we start the heartbeat thread\n     this.handlerThread.setUncaughtExceptionHandler(\n         new HeartBeatThreadUncaughtExceptionHandler());\n     this.handlerThread.setDaemon(true);\n     this.handlerThread.start();\n \n     this.lastResponseId \u003d 0;\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // Save the register request for re-register later\n    this.registerRequest \u003d request;\n\n    LOG.info(\"Registering the Unmanaged application master {}\",\n        this.applicationId);\n    RegisterApplicationMasterResponse response \u003d\n        this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\n    this.lastResponseId \u003d 0;\n\n    for (Container container : response.getContainersFromPreviousAttempts()) {\n      LOG.debug(\"RegisterUAM returned existing running container \"\n          + container.getId());\n    }\n    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n      LOG.debug(\"RegisterUAM returned existing NM token for node \"\n          + nmToken.getNodeId());\n    }\n\n    // Only when register succeed that we start the heartbeat thread\n    this.handlerThread.setUncaughtExceptionHandler(\n        new HeartBeatThreadUncaughtExceptionHandler());\n    this.handlerThread.setDaemon(true);\n    this.handlerThread.start();\n\n    this.lastResponseId \u003d 0;\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
          "commitDate": "17/11/17 5:39 PM",
          "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "29/08/17 2:53 PM",
          "commitNameOld": "cc8893edc0b7960e958723c81062986c12f06ade",
          "commitAuthorOld": "Carlo Curino",
          "daysBetweenCommits": 80.16,
          "commitsBetweenForRepo": 783,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,31 @@\n-  public RegisterApplicationMasterResponse createAndRegisterApplicationMaster(\n+  public RegisterApplicationMasterResponse registerApplicationMaster(\n       RegisterApplicationMasterRequest request)\n       throws YarnException, IOException {\n-    // This need to be done first in this method, because it is used as an\n-    // indication that this method is called (and perhaps blocked due to RM\n-    // connection and not finished yet)\n+    // Save the register request for re-register later\n     this.registerRequest \u003d request;\n \n-    // attemptId will be available after this call\n-    UnmanagedAMIdentifier identifier \u003d\n-        initializeUnmanagedAM(this.applicationId);\n-\n-    try {\n-      this.userUgi \u003d UserGroupInformation.createProxyUser(\n-          identifier.getAttemptId().toString(),\n-          UserGroupInformation.getCurrentUser());\n-    } catch (IOException e) {\n-      LOG.error(\"Exception while trying to get current user\", e);\n-      throw new YarnRuntimeException(e);\n-    }\n-\n-    this.rmProxy \u003d createRMProxy(ApplicationMasterProtocol.class, this.conf,\n-        this.userUgi, identifier.getToken());\n-\n-    LOG.info(\"Registering the Unmanaged application master {}\", this.attemptId);\n+    // Since we have setKeepContainersAcrossApplicationAttempts \u003d true for UAM.\n+    // We do not expect application already registered exception here\n+    LOG.info(\"Registering the Unmanaged application master {}\",\n+        this.applicationId);\n     RegisterApplicationMasterResponse response \u003d\n         this.rmProxy.registerApplicationMaster(this.registerRequest);\n \n+    for (Container container : response.getContainersFromPreviousAttempts()) {\n+      LOG.info(\"RegisterUAM returned existing running container \"\n+          + container.getId());\n+    }\n+    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n+      LOG.info(\"RegisterUAM returned existing NM token for node \"\n+          + nmToken.getNodeId());\n+    }\n+\n     // Only when register succeed that we start the heartbeat thread\n     this.handlerThread.setUncaughtExceptionHandler(\n         new HeartBeatThreadUncaughtExceptionHandler());\n     this.handlerThread.setDaemon(true);\n     this.handlerThread.start();\n \n     this.lastResponseId \u003d 0;\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // Save the register request for re-register later\n    this.registerRequest \u003d request;\n\n    // Since we have setKeepContainersAcrossApplicationAttempts \u003d true for UAM.\n    // We do not expect application already registered exception here\n    LOG.info(\"Registering the Unmanaged application master {}\",\n        this.applicationId);\n    RegisterApplicationMasterResponse response \u003d\n        this.rmProxy.registerApplicationMaster(this.registerRequest);\n\n    for (Container container : response.getContainersFromPreviousAttempts()) {\n      LOG.info(\"RegisterUAM returned existing running container \"\n          + container.getId());\n    }\n    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n      LOG.info(\"RegisterUAM returned existing NM token for node \"\n          + nmToken.getNodeId());\n    }\n\n    // Only when register succeed that we start the heartbeat thread\n    this.handlerThread.setUncaughtExceptionHandler(\n        new HeartBeatThreadUncaughtExceptionHandler());\n    this.handlerThread.setDaemon(true);\n    this.handlerThread.start();\n\n    this.lastResponseId \u003d 0;\n    return response;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
          "extendedDetails": {
            "oldValue": "createAndRegisterApplicationMaster",
            "newValue": "registerApplicationMaster"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
          "commitDate": "17/11/17 5:39 PM",
          "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "29/08/17 2:53 PM",
          "commitNameOld": "cc8893edc0b7960e958723c81062986c12f06ade",
          "commitAuthorOld": "Carlo Curino",
          "daysBetweenCommits": 80.16,
          "commitsBetweenForRepo": 783,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,31 @@\n-  public RegisterApplicationMasterResponse createAndRegisterApplicationMaster(\n+  public RegisterApplicationMasterResponse registerApplicationMaster(\n       RegisterApplicationMasterRequest request)\n       throws YarnException, IOException {\n-    // This need to be done first in this method, because it is used as an\n-    // indication that this method is called (and perhaps blocked due to RM\n-    // connection and not finished yet)\n+    // Save the register request for re-register later\n     this.registerRequest \u003d request;\n \n-    // attemptId will be available after this call\n-    UnmanagedAMIdentifier identifier \u003d\n-        initializeUnmanagedAM(this.applicationId);\n-\n-    try {\n-      this.userUgi \u003d UserGroupInformation.createProxyUser(\n-          identifier.getAttemptId().toString(),\n-          UserGroupInformation.getCurrentUser());\n-    } catch (IOException e) {\n-      LOG.error(\"Exception while trying to get current user\", e);\n-      throw new YarnRuntimeException(e);\n-    }\n-\n-    this.rmProxy \u003d createRMProxy(ApplicationMasterProtocol.class, this.conf,\n-        this.userUgi, identifier.getToken());\n-\n-    LOG.info(\"Registering the Unmanaged application master {}\", this.attemptId);\n+    // Since we have setKeepContainersAcrossApplicationAttempts \u003d true for UAM.\n+    // We do not expect application already registered exception here\n+    LOG.info(\"Registering the Unmanaged application master {}\",\n+        this.applicationId);\n     RegisterApplicationMasterResponse response \u003d\n         this.rmProxy.registerApplicationMaster(this.registerRequest);\n \n+    for (Container container : response.getContainersFromPreviousAttempts()) {\n+      LOG.info(\"RegisterUAM returned existing running container \"\n+          + container.getId());\n+    }\n+    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n+      LOG.info(\"RegisterUAM returned existing NM token for node \"\n+          + nmToken.getNodeId());\n+    }\n+\n     // Only when register succeed that we start the heartbeat thread\n     this.handlerThread.setUncaughtExceptionHandler(\n         new HeartBeatThreadUncaughtExceptionHandler());\n     this.handlerThread.setDaemon(true);\n     this.handlerThread.start();\n \n     this.lastResponseId \u003d 0;\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // Save the register request for re-register later\n    this.registerRequest \u003d request;\n\n    // Since we have setKeepContainersAcrossApplicationAttempts \u003d true for UAM.\n    // We do not expect application already registered exception here\n    LOG.info(\"Registering the Unmanaged application master {}\",\n        this.applicationId);\n    RegisterApplicationMasterResponse response \u003d\n        this.rmProxy.registerApplicationMaster(this.registerRequest);\n\n    for (Container container : response.getContainersFromPreviousAttempts()) {\n      LOG.info(\"RegisterUAM returned existing running container \"\n          + container.getId());\n    }\n    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\n      LOG.info(\"RegisterUAM returned existing NM token for node \"\n          + nmToken.getNodeId());\n    }\n\n    // Only when register succeed that we start the heartbeat thread\n    this.handlerThread.setUncaughtExceptionHandler(\n        new HeartBeatThreadUncaughtExceptionHandler());\n    this.handlerThread.setDaemon(true);\n    this.handlerThread.start();\n\n    this.lastResponseId \u003d 0;\n    return response;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "859aa1f9d621d07693825e610bdc0149f7a2770a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,37 @@\n+  public RegisterApplicationMasterResponse createAndRegisterApplicationMaster(\n+      RegisterApplicationMasterRequest request)\n+      throws YarnException, IOException {\n+    // This need to be done first in this method, because it is used as an\n+    // indication that this method is called (and perhaps blocked due to RM\n+    // connection and not finished yet)\n+    this.registerRequest \u003d request;\n+\n+    // attemptId will be available after this call\n+    UnmanagedAMIdentifier identifier \u003d\n+        initializeUnmanagedAM(this.applicationId);\n+\n+    try {\n+      this.userUgi \u003d UserGroupInformation.createProxyUser(\n+          identifier.getAttemptId().toString(),\n+          UserGroupInformation.getCurrentUser());\n+    } catch (IOException e) {\n+      LOG.error(\"Exception while trying to get current user\", e);\n+      throw new YarnRuntimeException(e);\n+    }\n+\n+    this.rmProxy \u003d createRMProxy(ApplicationMasterProtocol.class, this.conf,\n+        this.userUgi, identifier.getToken());\n+\n+    LOG.info(\"Registering the Unmanaged application master {}\", this.attemptId);\n+    RegisterApplicationMasterResponse response \u003d\n+        this.rmProxy.registerApplicationMaster(this.registerRequest);\n+\n+    // Only when register succeed that we start the heartbeat thread\n+    this.handlerThread.setUncaughtExceptionHandler(\n+        new HeartBeatThreadUncaughtExceptionHandler());\n+    this.handlerThread.setDaemon(true);\n+    this.handlerThread.start();\n+\n+    this.lastResponseId \u003d 0;\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse createAndRegisterApplicationMaster(\n      RegisterApplicationMasterRequest request)\n      throws YarnException, IOException {\n    // This need to be done first in this method, because it is used as an\n    // indication that this method is called (and perhaps blocked due to RM\n    // connection and not finished yet)\n    this.registerRequest \u003d request;\n\n    // attemptId will be available after this call\n    UnmanagedAMIdentifier identifier \u003d\n        initializeUnmanagedAM(this.applicationId);\n\n    try {\n      this.userUgi \u003d UserGroupInformation.createProxyUser(\n          identifier.getAttemptId().toString(),\n          UserGroupInformation.getCurrentUser());\n    } catch (IOException e) {\n      LOG.error(\"Exception while trying to get current user\", e);\n      throw new YarnRuntimeException(e);\n    }\n\n    this.rmProxy \u003d createRMProxy(ApplicationMasterProtocol.class, this.conf,\n        this.userUgi, identifier.getToken());\n\n    LOG.info(\"Registering the Unmanaged application master {}\", this.attemptId);\n    RegisterApplicationMasterResponse response \u003d\n        this.rmProxy.registerApplicationMaster(this.registerRequest);\n\n    // Only when register succeed that we start the heartbeat thread\n    this.handlerThread.setUncaughtExceptionHandler(\n        new HeartBeatThreadUncaughtExceptionHandler());\n    this.handlerThread.setDaemon(true);\n    this.handlerThread.start();\n\n    this.lastResponseId \u003d 0;\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java"
    }
  }
}