{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoIntraQueuePreemptionPlugin.java",
  "functionName": "validateOutSameAppPriorityFromDemand",
  "functionId": "validateOutSameAppPriorityFromDemand___cluster-Resource__orderedApps-TreeSet__TempAppPerPartition____usersPerPartition-Map__String,TempUserPerPartition____intraQueuePreemptionOrder-IntraQueuePreemptionOrderPolicy",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
  "functionStartLine": 464,
  "functionEndLine": 574,
  "numCommitsSeen": 13,
  "timeTaken": 2602,
  "changeHistory": [
    "c583ab02c730be0a63d974039a78f2dc67dc2db6",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9"
  ],
  "changeHistoryShort": {
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": "Ymultichange(Yparameterchange,Ybodychange)",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
      "commitDate": "22/05/17 2:26 PM",
      "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
          "commitDate": "22/05/17 2:26 PM",
          "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 102.13,
          "commitsBetweenForRepo": 587,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,111 @@\n   public void validateOutSameAppPriorityFromDemand(Resource cluster,\n-      TreeSet\u003cTempAppPerPartition\u003e appsOrderedfromLowerPriority) {\n+      TreeSet\u003cTempAppPerPartition\u003e orderedApps,\n+      Map\u003cString, TempUserPerPartition\u003e usersPerPartition,\n+      IntraQueuePreemptionOrderPolicy intraQueuePreemptionOrder) {\n \n-    TempAppPerPartition[] apps \u003d appsOrderedfromLowerPriority\n-        .toArray(new TempAppPerPartition[appsOrderedfromLowerPriority.size()]);\n+    TempAppPerPartition[] apps \u003d orderedApps\n+        .toArray(new TempAppPerPartition[orderedApps.size()]);\n     if (apps.length \u003c\u003d 0) {\n       return;\n     }\n \n-    int lPriority \u003d 0;\n-    int hPriority \u003d apps.length - 1;\n+    for (int hPriority \u003d apps.length - 1; hPriority \u003e\u003d 0; hPriority--) {\n \n-    while (lPriority \u003c hPriority\n-        \u0026\u0026 !apps[lPriority].equals(apps[hPriority])\n-        \u0026\u0026 apps[lPriority].getPriority() \u003c apps[hPriority].getPriority()) {\n-      Resource toPreemptFromOther \u003d apps[hPriority]\n-          .getToBePreemptFromOther();\n-      Resource actuallyToPreempt \u003d apps[lPriority].getActuallyToBePreempted();\n-      Resource delta \u003d Resources.subtract(apps[lPriority].toBePreempted,\n-          actuallyToPreempt);\n+      // Check whether high priority app with demand needs resource from other\n+      // user.\n+      if (Resources.greaterThan(rc, cluster,\n+          apps[hPriority].getToBePreemptFromOther(), Resources.none())) {\n \n-      if (Resources.greaterThan(rc, cluster, delta, Resources.none())) {\n-        Resource toPreempt \u003d Resources.min(rc, cluster,\n-            toPreemptFromOther, delta);\n+        // Given we have a demand from a high priority app, we can do a reverse\n+        // scan from lower priority apps to select resources.\n+        // Since idealAssigned of each app has considered user-limit, this logic\n+        // will provide eventual consistency w.r.t user-limit as well.\n+        for (int lPriority \u003d 0; lPriority \u003c apps.length; lPriority++) {\n \n-        apps[hPriority].setToBePreemptFromOther(\n-            Resources.subtract(toPreemptFromOther, toPreempt));\n-        apps[lPriority].setActuallyToBePreempted(\n-            Resources.add(actuallyToPreempt, toPreempt));\n-      }\n+          // Check whether app with demand needs resource from other user.\n+          if (Resources.greaterThan(rc, cluster, apps[lPriority].toBePreempted,\n+              Resources.none())) {\n \n-      if (Resources.lessThanOrEqual(rc, cluster,\n-          apps[lPriority].toBePreempted,\n-          apps[lPriority].getActuallyToBePreempted())) {\n-        lPriority++;\n-        continue;\n-      }\n+            // If apps are of same user, and priority is same, then skip.\n+            if ((apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n+                \u0026\u0026 (apps[lPriority].getPriority() \u003e\u003d apps[hPriority]\n+                    .getPriority())) {\n+              continue;\n+            }\n \n-      if (Resources.equals(apps[hPriority].getToBePreemptFromOther(),\n-          Resources.none())) {\n-        hPriority--;\n-        continue;\n+            if (Resources.lessThanOrEqual(rc, cluster,\n+                apps[lPriority].toBePreempted,\n+                apps[lPriority].getActuallyToBePreempted())\n+                || Resources.equals(apps[hPriority].getToBePreemptFromOther(),\n+                    Resources.none())) {\n+              continue;\n+            }\n+\n+            // Ideally if any application has a higher priority, then it can\n+            // force to preempt any lower priority app from any user. However\n+            // if admin enforces user-limit over priority, preemption module\n+            // will not choose lower priority apps from usre\u0027s who are not yet\n+            // met its user-limit.\n+            TempUserPerPartition tmpUser \u003d usersPerPartition\n+                .get(apps[lPriority].getUser());\n+            if ((!apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n+                \u0026\u0026 (!tmpUser.isUserLimitReached(rc, cluster))\n+                \u0026\u0026 (intraQueuePreemptionOrder\n+                    .equals(IntraQueuePreemptionOrderPolicy.USERLIMIT_FIRST))) {\n+              continue;\n+            }\n+\n+            Resource toPreemptFromOther \u003d apps[hPriority]\n+                .getToBePreemptFromOther();\n+            Resource actuallyToPreempt \u003d apps[lPriority]\n+                .getActuallyToBePreempted();\n+\n+            // A lower priority app could offer more resource to preempt, if\n+            // multiple higher priority/under served users needs resources.\n+            // After one iteration, we need to ensure that actuallyToPreempt is\n+            // subtracted from the resource to preempt.\n+            Resource preemptableFromLowerPriorityApp \u003d Resources\n+                .subtract(apps[lPriority].toBePreempted, actuallyToPreempt);\n+\n+            // In case of user-limit preemption, when app\u0027s are from different\n+            // user and of same priority, we will do user-limit preemption if\n+            // there is a demand from under UL quota app.\n+            // However this under UL quota app\u0027s demand may be more.\n+            // Still we should ensure that we are not doing over preemption such\n+            // that only a maximum of (user\u0027s used - UL quota) could be\n+            // preempted.\n+            if ((!apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n+                \u0026\u0026 (apps[lPriority].getPriority() \u003d\u003d apps[hPriority]\n+                    .getPriority())\n+                \u0026\u0026 tmpUser.isUserLimitReached(rc, cluster)) {\n+\n+              Resource deltaULQuota \u003d Resources\n+                  .subtract(tmpUser.getUsedDeductAM(), tmpUser.selected);\n+              Resources.subtractFrom(deltaULQuota, tmpUser.getUserLimit());\n+\n+              if (tmpUser.isPreemptionQuotaForULDeltaDone()) {\n+                deltaULQuota \u003d Resources.createResource(0, 0);\n+              }\n+\n+              if (Resources.lessThan(rc, cluster, deltaULQuota,\n+                  preemptableFromLowerPriorityApp)) {\n+                tmpUser.updatePreemptionQuotaForULDeltaAsDone(true);\n+                preemptableFromLowerPriorityApp \u003d deltaULQuota;\n+              }\n+            }\n+\n+            if (Resources.greaterThan(rc, cluster,\n+                preemptableFromLowerPriorityApp, Resources.none())) {\n+              Resource toPreempt \u003d Resources.min(rc, cluster,\n+                  toPreemptFromOther, preemptableFromLowerPriorityApp);\n+\n+              apps[hPriority].setToBePreemptFromOther(\n+                  Resources.subtract(toPreemptFromOther, toPreempt));\n+              apps[lPriority].setActuallyToBePreempted(\n+                  Resources.add(actuallyToPreempt, toPreempt));\n+            }\n+          }\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void validateOutSameAppPriorityFromDemand(Resource cluster,\n      TreeSet\u003cTempAppPerPartition\u003e orderedApps,\n      Map\u003cString, TempUserPerPartition\u003e usersPerPartition,\n      IntraQueuePreemptionOrderPolicy intraQueuePreemptionOrder) {\n\n    TempAppPerPartition[] apps \u003d orderedApps\n        .toArray(new TempAppPerPartition[orderedApps.size()]);\n    if (apps.length \u003c\u003d 0) {\n      return;\n    }\n\n    for (int hPriority \u003d apps.length - 1; hPriority \u003e\u003d 0; hPriority--) {\n\n      // Check whether high priority app with demand needs resource from other\n      // user.\n      if (Resources.greaterThan(rc, cluster,\n          apps[hPriority].getToBePreemptFromOther(), Resources.none())) {\n\n        // Given we have a demand from a high priority app, we can do a reverse\n        // scan from lower priority apps to select resources.\n        // Since idealAssigned of each app has considered user-limit, this logic\n        // will provide eventual consistency w.r.t user-limit as well.\n        for (int lPriority \u003d 0; lPriority \u003c apps.length; lPriority++) {\n\n          // Check whether app with demand needs resource from other user.\n          if (Resources.greaterThan(rc, cluster, apps[lPriority].toBePreempted,\n              Resources.none())) {\n\n            // If apps are of same user, and priority is same, then skip.\n            if ((apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n                \u0026\u0026 (apps[lPriority].getPriority() \u003e\u003d apps[hPriority]\n                    .getPriority())) {\n              continue;\n            }\n\n            if (Resources.lessThanOrEqual(rc, cluster,\n                apps[lPriority].toBePreempted,\n                apps[lPriority].getActuallyToBePreempted())\n                || Resources.equals(apps[hPriority].getToBePreemptFromOther(),\n                    Resources.none())) {\n              continue;\n            }\n\n            // Ideally if any application has a higher priority, then it can\n            // force to preempt any lower priority app from any user. However\n            // if admin enforces user-limit over priority, preemption module\n            // will not choose lower priority apps from usre\u0027s who are not yet\n            // met its user-limit.\n            TempUserPerPartition tmpUser \u003d usersPerPartition\n                .get(apps[lPriority].getUser());\n            if ((!apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n                \u0026\u0026 (!tmpUser.isUserLimitReached(rc, cluster))\n                \u0026\u0026 (intraQueuePreemptionOrder\n                    .equals(IntraQueuePreemptionOrderPolicy.USERLIMIT_FIRST))) {\n              continue;\n            }\n\n            Resource toPreemptFromOther \u003d apps[hPriority]\n                .getToBePreemptFromOther();\n            Resource actuallyToPreempt \u003d apps[lPriority]\n                .getActuallyToBePreempted();\n\n            // A lower priority app could offer more resource to preempt, if\n            // multiple higher priority/under served users needs resources.\n            // After one iteration, we need to ensure that actuallyToPreempt is\n            // subtracted from the resource to preempt.\n            Resource preemptableFromLowerPriorityApp \u003d Resources\n                .subtract(apps[lPriority].toBePreempted, actuallyToPreempt);\n\n            // In case of user-limit preemption, when app\u0027s are from different\n            // user and of same priority, we will do user-limit preemption if\n            // there is a demand from under UL quota app.\n            // However this under UL quota app\u0027s demand may be more.\n            // Still we should ensure that we are not doing over preemption such\n            // that only a maximum of (user\u0027s used - UL quota) could be\n            // preempted.\n            if ((!apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n                \u0026\u0026 (apps[lPriority].getPriority() \u003d\u003d apps[hPriority]\n                    .getPriority())\n                \u0026\u0026 tmpUser.isUserLimitReached(rc, cluster)) {\n\n              Resource deltaULQuota \u003d Resources\n                  .subtract(tmpUser.getUsedDeductAM(), tmpUser.selected);\n              Resources.subtractFrom(deltaULQuota, tmpUser.getUserLimit());\n\n              if (tmpUser.isPreemptionQuotaForULDeltaDone()) {\n                deltaULQuota \u003d Resources.createResource(0, 0);\n              }\n\n              if (Resources.lessThan(rc, cluster, deltaULQuota,\n                  preemptableFromLowerPriorityApp)) {\n                tmpUser.updatePreemptionQuotaForULDeltaAsDone(true);\n                preemptableFromLowerPriorityApp \u003d deltaULQuota;\n              }\n            }\n\n            if (Resources.greaterThan(rc, cluster,\n                preemptableFromLowerPriorityApp, Resources.none())) {\n              Resource toPreempt \u003d Resources.min(rc, cluster,\n                  toPreemptFromOther, preemptableFromLowerPriorityApp);\n\n              apps[hPriority].setToBePreemptFromOther(\n                  Resources.subtract(toPreemptFromOther, toPreempt));\n              apps[lPriority].setActuallyToBePreempted(\n                  Resources.add(actuallyToPreempt, toPreempt));\n            }\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
          "extendedDetails": {
            "oldValue": "[cluster-Resource, appsOrderedfromLowerPriority-TreeSet\u003cTempAppPerPartition\u003e]",
            "newValue": "[cluster-Resource, orderedApps-TreeSet\u003cTempAppPerPartition\u003e, usersPerPartition-Map\u003cString,TempUserPerPartition\u003e, intraQueuePreemptionOrder-IntraQueuePreemptionOrderPolicy]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
          "commitDate": "22/05/17 2:26 PM",
          "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 102.13,
          "commitsBetweenForRepo": 587,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,111 @@\n   public void validateOutSameAppPriorityFromDemand(Resource cluster,\n-      TreeSet\u003cTempAppPerPartition\u003e appsOrderedfromLowerPriority) {\n+      TreeSet\u003cTempAppPerPartition\u003e orderedApps,\n+      Map\u003cString, TempUserPerPartition\u003e usersPerPartition,\n+      IntraQueuePreemptionOrderPolicy intraQueuePreemptionOrder) {\n \n-    TempAppPerPartition[] apps \u003d appsOrderedfromLowerPriority\n-        .toArray(new TempAppPerPartition[appsOrderedfromLowerPriority.size()]);\n+    TempAppPerPartition[] apps \u003d orderedApps\n+        .toArray(new TempAppPerPartition[orderedApps.size()]);\n     if (apps.length \u003c\u003d 0) {\n       return;\n     }\n \n-    int lPriority \u003d 0;\n-    int hPriority \u003d apps.length - 1;\n+    for (int hPriority \u003d apps.length - 1; hPriority \u003e\u003d 0; hPriority--) {\n \n-    while (lPriority \u003c hPriority\n-        \u0026\u0026 !apps[lPriority].equals(apps[hPriority])\n-        \u0026\u0026 apps[lPriority].getPriority() \u003c apps[hPriority].getPriority()) {\n-      Resource toPreemptFromOther \u003d apps[hPriority]\n-          .getToBePreemptFromOther();\n-      Resource actuallyToPreempt \u003d apps[lPriority].getActuallyToBePreempted();\n-      Resource delta \u003d Resources.subtract(apps[lPriority].toBePreempted,\n-          actuallyToPreempt);\n+      // Check whether high priority app with demand needs resource from other\n+      // user.\n+      if (Resources.greaterThan(rc, cluster,\n+          apps[hPriority].getToBePreemptFromOther(), Resources.none())) {\n \n-      if (Resources.greaterThan(rc, cluster, delta, Resources.none())) {\n-        Resource toPreempt \u003d Resources.min(rc, cluster,\n-            toPreemptFromOther, delta);\n+        // Given we have a demand from a high priority app, we can do a reverse\n+        // scan from lower priority apps to select resources.\n+        // Since idealAssigned of each app has considered user-limit, this logic\n+        // will provide eventual consistency w.r.t user-limit as well.\n+        for (int lPriority \u003d 0; lPriority \u003c apps.length; lPriority++) {\n \n-        apps[hPriority].setToBePreemptFromOther(\n-            Resources.subtract(toPreemptFromOther, toPreempt));\n-        apps[lPriority].setActuallyToBePreempted(\n-            Resources.add(actuallyToPreempt, toPreempt));\n-      }\n+          // Check whether app with demand needs resource from other user.\n+          if (Resources.greaterThan(rc, cluster, apps[lPriority].toBePreempted,\n+              Resources.none())) {\n \n-      if (Resources.lessThanOrEqual(rc, cluster,\n-          apps[lPriority].toBePreempted,\n-          apps[lPriority].getActuallyToBePreempted())) {\n-        lPriority++;\n-        continue;\n-      }\n+            // If apps are of same user, and priority is same, then skip.\n+            if ((apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n+                \u0026\u0026 (apps[lPriority].getPriority() \u003e\u003d apps[hPriority]\n+                    .getPriority())) {\n+              continue;\n+            }\n \n-      if (Resources.equals(apps[hPriority].getToBePreemptFromOther(),\n-          Resources.none())) {\n-        hPriority--;\n-        continue;\n+            if (Resources.lessThanOrEqual(rc, cluster,\n+                apps[lPriority].toBePreempted,\n+                apps[lPriority].getActuallyToBePreempted())\n+                || Resources.equals(apps[hPriority].getToBePreemptFromOther(),\n+                    Resources.none())) {\n+              continue;\n+            }\n+\n+            // Ideally if any application has a higher priority, then it can\n+            // force to preempt any lower priority app from any user. However\n+            // if admin enforces user-limit over priority, preemption module\n+            // will not choose lower priority apps from usre\u0027s who are not yet\n+            // met its user-limit.\n+            TempUserPerPartition tmpUser \u003d usersPerPartition\n+                .get(apps[lPriority].getUser());\n+            if ((!apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n+                \u0026\u0026 (!tmpUser.isUserLimitReached(rc, cluster))\n+                \u0026\u0026 (intraQueuePreemptionOrder\n+                    .equals(IntraQueuePreemptionOrderPolicy.USERLIMIT_FIRST))) {\n+              continue;\n+            }\n+\n+            Resource toPreemptFromOther \u003d apps[hPriority]\n+                .getToBePreemptFromOther();\n+            Resource actuallyToPreempt \u003d apps[lPriority]\n+                .getActuallyToBePreempted();\n+\n+            // A lower priority app could offer more resource to preempt, if\n+            // multiple higher priority/under served users needs resources.\n+            // After one iteration, we need to ensure that actuallyToPreempt is\n+            // subtracted from the resource to preempt.\n+            Resource preemptableFromLowerPriorityApp \u003d Resources\n+                .subtract(apps[lPriority].toBePreempted, actuallyToPreempt);\n+\n+            // In case of user-limit preemption, when app\u0027s are from different\n+            // user and of same priority, we will do user-limit preemption if\n+            // there is a demand from under UL quota app.\n+            // However this under UL quota app\u0027s demand may be more.\n+            // Still we should ensure that we are not doing over preemption such\n+            // that only a maximum of (user\u0027s used - UL quota) could be\n+            // preempted.\n+            if ((!apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n+                \u0026\u0026 (apps[lPriority].getPriority() \u003d\u003d apps[hPriority]\n+                    .getPriority())\n+                \u0026\u0026 tmpUser.isUserLimitReached(rc, cluster)) {\n+\n+              Resource deltaULQuota \u003d Resources\n+                  .subtract(tmpUser.getUsedDeductAM(), tmpUser.selected);\n+              Resources.subtractFrom(deltaULQuota, tmpUser.getUserLimit());\n+\n+              if (tmpUser.isPreemptionQuotaForULDeltaDone()) {\n+                deltaULQuota \u003d Resources.createResource(0, 0);\n+              }\n+\n+              if (Resources.lessThan(rc, cluster, deltaULQuota,\n+                  preemptableFromLowerPriorityApp)) {\n+                tmpUser.updatePreemptionQuotaForULDeltaAsDone(true);\n+                preemptableFromLowerPriorityApp \u003d deltaULQuota;\n+              }\n+            }\n+\n+            if (Resources.greaterThan(rc, cluster,\n+                preemptableFromLowerPriorityApp, Resources.none())) {\n+              Resource toPreempt \u003d Resources.min(rc, cluster,\n+                  toPreemptFromOther, preemptableFromLowerPriorityApp);\n+\n+              apps[hPriority].setToBePreemptFromOther(\n+                  Resources.subtract(toPreemptFromOther, toPreempt));\n+              apps[lPriority].setActuallyToBePreempted(\n+                  Resources.add(actuallyToPreempt, toPreempt));\n+            }\n+          }\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void validateOutSameAppPriorityFromDemand(Resource cluster,\n      TreeSet\u003cTempAppPerPartition\u003e orderedApps,\n      Map\u003cString, TempUserPerPartition\u003e usersPerPartition,\n      IntraQueuePreemptionOrderPolicy intraQueuePreemptionOrder) {\n\n    TempAppPerPartition[] apps \u003d orderedApps\n        .toArray(new TempAppPerPartition[orderedApps.size()]);\n    if (apps.length \u003c\u003d 0) {\n      return;\n    }\n\n    for (int hPriority \u003d apps.length - 1; hPriority \u003e\u003d 0; hPriority--) {\n\n      // Check whether high priority app with demand needs resource from other\n      // user.\n      if (Resources.greaterThan(rc, cluster,\n          apps[hPriority].getToBePreemptFromOther(), Resources.none())) {\n\n        // Given we have a demand from a high priority app, we can do a reverse\n        // scan from lower priority apps to select resources.\n        // Since idealAssigned of each app has considered user-limit, this logic\n        // will provide eventual consistency w.r.t user-limit as well.\n        for (int lPriority \u003d 0; lPriority \u003c apps.length; lPriority++) {\n\n          // Check whether app with demand needs resource from other user.\n          if (Resources.greaterThan(rc, cluster, apps[lPriority].toBePreempted,\n              Resources.none())) {\n\n            // If apps are of same user, and priority is same, then skip.\n            if ((apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n                \u0026\u0026 (apps[lPriority].getPriority() \u003e\u003d apps[hPriority]\n                    .getPriority())) {\n              continue;\n            }\n\n            if (Resources.lessThanOrEqual(rc, cluster,\n                apps[lPriority].toBePreempted,\n                apps[lPriority].getActuallyToBePreempted())\n                || Resources.equals(apps[hPriority].getToBePreemptFromOther(),\n                    Resources.none())) {\n              continue;\n            }\n\n            // Ideally if any application has a higher priority, then it can\n            // force to preempt any lower priority app from any user. However\n            // if admin enforces user-limit over priority, preemption module\n            // will not choose lower priority apps from usre\u0027s who are not yet\n            // met its user-limit.\n            TempUserPerPartition tmpUser \u003d usersPerPartition\n                .get(apps[lPriority].getUser());\n            if ((!apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n                \u0026\u0026 (!tmpUser.isUserLimitReached(rc, cluster))\n                \u0026\u0026 (intraQueuePreemptionOrder\n                    .equals(IntraQueuePreemptionOrderPolicy.USERLIMIT_FIRST))) {\n              continue;\n            }\n\n            Resource toPreemptFromOther \u003d apps[hPriority]\n                .getToBePreemptFromOther();\n            Resource actuallyToPreempt \u003d apps[lPriority]\n                .getActuallyToBePreempted();\n\n            // A lower priority app could offer more resource to preempt, if\n            // multiple higher priority/under served users needs resources.\n            // After one iteration, we need to ensure that actuallyToPreempt is\n            // subtracted from the resource to preempt.\n            Resource preemptableFromLowerPriorityApp \u003d Resources\n                .subtract(apps[lPriority].toBePreempted, actuallyToPreempt);\n\n            // In case of user-limit preemption, when app\u0027s are from different\n            // user and of same priority, we will do user-limit preemption if\n            // there is a demand from under UL quota app.\n            // However this under UL quota app\u0027s demand may be more.\n            // Still we should ensure that we are not doing over preemption such\n            // that only a maximum of (user\u0027s used - UL quota) could be\n            // preempted.\n            if ((!apps[hPriority].getUser().equals(apps[lPriority].getUser()))\n                \u0026\u0026 (apps[lPriority].getPriority() \u003d\u003d apps[hPriority]\n                    .getPriority())\n                \u0026\u0026 tmpUser.isUserLimitReached(rc, cluster)) {\n\n              Resource deltaULQuota \u003d Resources\n                  .subtract(tmpUser.getUsedDeductAM(), tmpUser.selected);\n              Resources.subtractFrom(deltaULQuota, tmpUser.getUserLimit());\n\n              if (tmpUser.isPreemptionQuotaForULDeltaDone()) {\n                deltaULQuota \u003d Resources.createResource(0, 0);\n              }\n\n              if (Resources.lessThan(rc, cluster, deltaULQuota,\n                  preemptableFromLowerPriorityApp)) {\n                tmpUser.updatePreemptionQuotaForULDeltaAsDone(true);\n                preemptableFromLowerPriorityApp \u003d deltaULQuota;\n              }\n            }\n\n            if (Resources.greaterThan(rc, cluster,\n                preemptableFromLowerPriorityApp, Resources.none())) {\n              Resource toPreempt \u003d Resources.min(rc, cluster,\n                  toPreemptFromOther, preemptableFromLowerPriorityApp);\n\n              apps[hPriority].setToBePreemptFromOther(\n                  Resources.subtract(toPreemptFromOther, toPreempt));\n              apps[lPriority].setActuallyToBePreempted(\n                  Resources.add(actuallyToPreempt, toPreempt));\n            }\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
          "extendedDetails": {}
        }
      ]
    },
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,45 @@\n+  public void validateOutSameAppPriorityFromDemand(Resource cluster,\n+      TreeSet\u003cTempAppPerPartition\u003e appsOrderedfromLowerPriority) {\n+\n+    TempAppPerPartition[] apps \u003d appsOrderedfromLowerPriority\n+        .toArray(new TempAppPerPartition[appsOrderedfromLowerPriority.size()]);\n+    if (apps.length \u003c\u003d 0) {\n+      return;\n+    }\n+\n+    int lPriority \u003d 0;\n+    int hPriority \u003d apps.length - 1;\n+\n+    while (lPriority \u003c hPriority\n+        \u0026\u0026 !apps[lPriority].equals(apps[hPriority])\n+        \u0026\u0026 apps[lPriority].getPriority() \u003c apps[hPriority].getPriority()) {\n+      Resource toPreemptFromOther \u003d apps[hPriority]\n+          .getToBePreemptFromOther();\n+      Resource actuallyToPreempt \u003d apps[lPriority].getActuallyToBePreempted();\n+      Resource delta \u003d Resources.subtract(apps[lPriority].toBePreempted,\n+          actuallyToPreempt);\n+\n+      if (Resources.greaterThan(rc, cluster, delta, Resources.none())) {\n+        Resource toPreempt \u003d Resources.min(rc, cluster,\n+            toPreemptFromOther, delta);\n+\n+        apps[hPriority].setToBePreemptFromOther(\n+            Resources.subtract(toPreemptFromOther, toPreempt));\n+        apps[lPriority].setActuallyToBePreempted(\n+            Resources.add(actuallyToPreempt, toPreempt));\n+      }\n+\n+      if (Resources.lessThanOrEqual(rc, cluster,\n+          apps[lPriority].toBePreempted,\n+          apps[lPriority].getActuallyToBePreempted())) {\n+        lPriority++;\n+        continue;\n+      }\n+\n+      if (Resources.equals(apps[hPriority].getToBePreemptFromOther(),\n+          Resources.none())) {\n+        hPriority--;\n+        continue;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void validateOutSameAppPriorityFromDemand(Resource cluster,\n      TreeSet\u003cTempAppPerPartition\u003e appsOrderedfromLowerPriority) {\n\n    TempAppPerPartition[] apps \u003d appsOrderedfromLowerPriority\n        .toArray(new TempAppPerPartition[appsOrderedfromLowerPriority.size()]);\n    if (apps.length \u003c\u003d 0) {\n      return;\n    }\n\n    int lPriority \u003d 0;\n    int hPriority \u003d apps.length - 1;\n\n    while (lPriority \u003c hPriority\n        \u0026\u0026 !apps[lPriority].equals(apps[hPriority])\n        \u0026\u0026 apps[lPriority].getPriority() \u003c apps[hPriority].getPriority()) {\n      Resource toPreemptFromOther \u003d apps[hPriority]\n          .getToBePreemptFromOther();\n      Resource actuallyToPreempt \u003d apps[lPriority].getActuallyToBePreempted();\n      Resource delta \u003d Resources.subtract(apps[lPriority].toBePreempted,\n          actuallyToPreempt);\n\n      if (Resources.greaterThan(rc, cluster, delta, Resources.none())) {\n        Resource toPreempt \u003d Resources.min(rc, cluster,\n            toPreemptFromOther, delta);\n\n        apps[hPriority].setToBePreemptFromOther(\n            Resources.subtract(toPreemptFromOther, toPreempt));\n        apps[lPriority].setActuallyToBePreempted(\n            Resources.add(actuallyToPreempt, toPreempt));\n      }\n\n      if (Resources.lessThanOrEqual(rc, cluster,\n          apps[lPriority].toBePreempted,\n          apps[lPriority].getActuallyToBePreempted())) {\n        lPriority++;\n        continue;\n      }\n\n      if (Resources.equals(apps[hPriority].getToBePreemptFromOther(),\n          Resources.none())) {\n        hPriority--;\n        continue;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java"
    }
  }
}