{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Configuration.java",
  "functionName": "asXmlDocument",
  "functionId": "asXmlDocument___propertyName-String(annotations-@Nullable)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
  "functionStartLine": 3542,
  "functionEndLine": 3577,
  "numCommitsSeen": 251,
  "timeTaken": 5740,
  "changeHistory": [
    "61d19110d4dfdb67e7763ab5b2a603ca041e8830",
    "00160f71b6d98244fcb1cb58b2db9fc24f1cd672",
    "a690a215dba6180090214675393431a589c37f24",
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
    "c8bb6f59b8de48f533414fb92f8220ea60b701bc",
    "4ee39ffe6a1016855ceedd489c5813f40e492815",
    "36d7ab3489dc2c90b8ebc87c38b8524062f2e94f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "160b6fd4966f5189f988eaf0f094867fb2155c04",
    "717579f3bdf01c51437ea1e7f414a737a89de986"
  ],
  "changeHistoryShort": {
    "61d19110d4dfdb67e7763ab5b2a603ca041e8830": "Yparametermetachange",
    "00160f71b6d98244fcb1cb58b2db9fc24f1cd672": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "a690a215dba6180090214675393431a589c37f24": "Ybodychange",
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36": "Ybodychange",
    "c8bb6f59b8de48f533414fb92f8220ea60b701bc": "Ybodychange",
    "4ee39ffe6a1016855ceedd489c5813f40e492815": "Ybodychange",
    "36d7ab3489dc2c90b8ebc87c38b8524062f2e94f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "160b6fd4966f5189f988eaf0f094867fb2155c04": "Ybodychange",
    "717579f3bdf01c51437ea1e7f414a737a89de986": "Yintroduced"
  },
  "changeHistoryDetails": {
    "61d19110d4dfdb67e7763ab5b2a603ca041e8830": {
      "type": "Yparametermetachange",
      "commitMessage": "HADOOP-16218. Findbugs warning of null param to non-nullable method in Configuration with Guava update. (#655)\n\nChange-Id: I461e518ce9a4730b91a8138ad55b39e9a4b0a4b8",
      "commitDate": "02/04/19 1:15 AM",
      "commitName": "61d19110d4dfdb67e7763ab5b2a603ca041e8830",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "13/03/19 1:15 PM",
      "commitNameOld": "66357574ae1da09ced735da36bf7d80a40c3fa1b",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 19.5,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n-  private synchronized Document asXmlDocument(String propertyName)\n+  private synchronized Document asXmlDocument(@Nullable String propertyName)\n       throws IOException, IllegalArgumentException {\n     Document doc;\n     try {\n       doc \u003d DocumentBuilderFactory\n           .newInstance()\n           .newDocumentBuilder()\n           .newDocument();\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n \n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n     handleDeprecation(); //ensure properties is set and deprecation is handled\n \n     if(!Strings.isNullOrEmpty(propertyName)) {\n       if (!properties.containsKey(propertyName)) {\n         // given property not found, illegal argument\n         throw new IllegalArgumentException(\"Property \" +\n             propertyName + \" not found\");\n       } else {\n         // given property is found, write single property\n         appendXMLProperty(doc, conf, propertyName);\n         conf.appendChild(doc.createTextNode(\"\\n\"));\n       }\n     } else {\n       // append all elements\n       for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n         appendXMLProperty(doc, conf, (String)e.nextElement());\n         conf.appendChild(doc.createTextNode(\"\\n\"));\n       }\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Document asXmlDocument(@Nullable String propertyName)\n      throws IOException, IllegalArgumentException {\n    Document doc;\n    try {\n      doc \u003d DocumentBuilderFactory\n          .newInstance()\n          .newDocumentBuilder()\n          .newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    handleDeprecation(); //ensure properties is set and deprecation is handled\n\n    if(!Strings.isNullOrEmpty(propertyName)) {\n      if (!properties.containsKey(propertyName)) {\n        // given property not found, illegal argument\n        throw new IllegalArgumentException(\"Property \" +\n            propertyName + \" not found\");\n      } else {\n        // given property is found, write single property\n        appendXMLProperty(doc, conf, propertyName);\n        conf.appendChild(doc.createTextNode(\"\\n\"));\n      }\n    } else {\n      // append all elements\n      for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n        appendXMLProperty(doc, conf, (String)e.nextElement());\n        conf.appendChild(doc.createTextNode(\"\\n\"));\n      }\n    }\n    return doc;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldValue": "[propertyName-String]",
        "newValue": "[propertyName-String(annotations-@Nullable)]"
      }
    },
    "00160f71b6d98244fcb1cb58b2db9fc24f1cd672": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-13628. Support to retrieve specific property from configuration via REST API. Contributed by Weiwei Yang\n",
      "commitDate": "05/10/16 1:50 PM",
      "commitName": "00160f71b6d98244fcb1cb58b2db9fc24f1cd672",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13628. Support to retrieve specific property from configuration via REST API. Contributed by Weiwei Yang\n",
          "commitDate": "05/10/16 1:50 PM",
          "commitName": "00160f71b6d98244fcb1cb58b2db9fc24f1cd672",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "06/09/16 10:38 AM",
          "commitNameOld": "d37dc5d1b8e022a7085118a2e7066623483c293f",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 29.13,
          "commitsBetweenForRepo": 177,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,36 @@\n-  private synchronized Document asXmlDocument() throws IOException {\n+  private synchronized Document asXmlDocument(String propertyName)\n+      throws IOException, IllegalArgumentException {\n     Document doc;\n     try {\n-      doc \u003d\n-        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+      doc \u003d DocumentBuilderFactory\n+          .newInstance()\n+          .newDocumentBuilder()\n+          .newDocument();\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n+\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n     handleDeprecation(); //ensure properties is set and deprecation is handled\n-    for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n-      String name \u003d (String)e.nextElement();\n-      Object object \u003d properties.get(name);\n-      String value \u003d null;\n-      if (object instanceof String) {\n-        value \u003d (String) object;\n-      }else {\n-        continue;\n+\n+    if(!Strings.isNullOrEmpty(propertyName)) {\n+      if (!properties.containsKey(propertyName)) {\n+        // given property not found, illegal argument\n+        throw new IllegalArgumentException(\"Property \" +\n+            propertyName + \" not found\");\n+      } else {\n+        // given property is found, write single property\n+        appendXMLProperty(doc, conf, propertyName);\n+        conf.appendChild(doc.createTextNode(\"\\n\"));\n       }\n-      Element propNode \u003d doc.createElement(\"property\");\n-      conf.appendChild(propNode);\n-\n-      Element nameNode \u003d doc.createElement(\"name\");\n-      nameNode.appendChild(doc.createTextNode(name));\n-      propNode.appendChild(nameNode);\n-\n-      Element valueNode \u003d doc.createElement(\"value\");\n-      valueNode.appendChild(doc.createTextNode(value));\n-      propNode.appendChild(valueNode);\n-\n-      if (updatingResource !\u003d null) {\n-        String[] sources \u003d updatingResource.get(name);\n-        if(sources !\u003d null) {\n-          for(String s : sources) {\n-            Element sourceNode \u003d doc.createElement(\"source\");\n-            sourceNode.appendChild(doc.createTextNode(s));\n-            propNode.appendChild(sourceNode);\n-          }\n-        }\n+    } else {\n+      // append all elements\n+      for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n+        appendXMLProperty(doc, conf, (String)e.nextElement());\n+        conf.appendChild(doc.createTextNode(\"\\n\"));\n       }\n-      \n-      conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Document asXmlDocument(String propertyName)\n      throws IOException, IllegalArgumentException {\n    Document doc;\n    try {\n      doc \u003d DocumentBuilderFactory\n          .newInstance()\n          .newDocumentBuilder()\n          .newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    handleDeprecation(); //ensure properties is set and deprecation is handled\n\n    if(!Strings.isNullOrEmpty(propertyName)) {\n      if (!properties.containsKey(propertyName)) {\n        // given property not found, illegal argument\n        throw new IllegalArgumentException(\"Property \" +\n            propertyName + \" not found\");\n      } else {\n        // given property is found, write single property\n        appendXMLProperty(doc, conf, propertyName);\n        conf.appendChild(doc.createTextNode(\"\\n\"));\n      }\n    } else {\n      // append all elements\n      for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n        appendXMLProperty(doc, conf, (String)e.nextElement());\n        conf.appendChild(doc.createTextNode(\"\\n\"));\n      }\n    }\n    return doc;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[propertyName-String]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-13628. Support to retrieve specific property from configuration via REST API. Contributed by Weiwei Yang\n",
          "commitDate": "05/10/16 1:50 PM",
          "commitName": "00160f71b6d98244fcb1cb58b2db9fc24f1cd672",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "06/09/16 10:38 AM",
          "commitNameOld": "d37dc5d1b8e022a7085118a2e7066623483c293f",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 29.13,
          "commitsBetweenForRepo": 177,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,36 @@\n-  private synchronized Document asXmlDocument() throws IOException {\n+  private synchronized Document asXmlDocument(String propertyName)\n+      throws IOException, IllegalArgumentException {\n     Document doc;\n     try {\n-      doc \u003d\n-        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+      doc \u003d DocumentBuilderFactory\n+          .newInstance()\n+          .newDocumentBuilder()\n+          .newDocument();\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n+\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n     handleDeprecation(); //ensure properties is set and deprecation is handled\n-    for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n-      String name \u003d (String)e.nextElement();\n-      Object object \u003d properties.get(name);\n-      String value \u003d null;\n-      if (object instanceof String) {\n-        value \u003d (String) object;\n-      }else {\n-        continue;\n+\n+    if(!Strings.isNullOrEmpty(propertyName)) {\n+      if (!properties.containsKey(propertyName)) {\n+        // given property not found, illegal argument\n+        throw new IllegalArgumentException(\"Property \" +\n+            propertyName + \" not found\");\n+      } else {\n+        // given property is found, write single property\n+        appendXMLProperty(doc, conf, propertyName);\n+        conf.appendChild(doc.createTextNode(\"\\n\"));\n       }\n-      Element propNode \u003d doc.createElement(\"property\");\n-      conf.appendChild(propNode);\n-\n-      Element nameNode \u003d doc.createElement(\"name\");\n-      nameNode.appendChild(doc.createTextNode(name));\n-      propNode.appendChild(nameNode);\n-\n-      Element valueNode \u003d doc.createElement(\"value\");\n-      valueNode.appendChild(doc.createTextNode(value));\n-      propNode.appendChild(valueNode);\n-\n-      if (updatingResource !\u003d null) {\n-        String[] sources \u003d updatingResource.get(name);\n-        if(sources !\u003d null) {\n-          for(String s : sources) {\n-            Element sourceNode \u003d doc.createElement(\"source\");\n-            sourceNode.appendChild(doc.createTextNode(s));\n-            propNode.appendChild(sourceNode);\n-          }\n-        }\n+    } else {\n+      // append all elements\n+      for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n+        appendXMLProperty(doc, conf, (String)e.nextElement());\n+        conf.appendChild(doc.createTextNode(\"\\n\"));\n       }\n-      \n-      conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Document asXmlDocument(String propertyName)\n      throws IOException, IllegalArgumentException {\n    Document doc;\n    try {\n      doc \u003d DocumentBuilderFactory\n          .newInstance()\n          .newDocumentBuilder()\n          .newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    handleDeprecation(); //ensure properties is set and deprecation is handled\n\n    if(!Strings.isNullOrEmpty(propertyName)) {\n      if (!properties.containsKey(propertyName)) {\n        // given property not found, illegal argument\n        throw new IllegalArgumentException(\"Property \" +\n            propertyName + \" not found\");\n      } else {\n        // given property is found, write single property\n        appendXMLProperty(doc, conf, propertyName);\n        conf.appendChild(doc.createTextNode(\"\\n\"));\n      }\n    } else {\n      // append all elements\n      for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n        appendXMLProperty(doc, conf, (String)e.nextElement());\n        conf.appendChild(doc.createTextNode(\"\\n\"));\n      }\n    }\n    return doc;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, IllegalArgumentException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13628. Support to retrieve specific property from configuration via REST API. Contributed by Weiwei Yang\n",
          "commitDate": "05/10/16 1:50 PM",
          "commitName": "00160f71b6d98244fcb1cb58b2db9fc24f1cd672",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "06/09/16 10:38 AM",
          "commitNameOld": "d37dc5d1b8e022a7085118a2e7066623483c293f",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 29.13,
          "commitsBetweenForRepo": 177,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,36 @@\n-  private synchronized Document asXmlDocument() throws IOException {\n+  private synchronized Document asXmlDocument(String propertyName)\n+      throws IOException, IllegalArgumentException {\n     Document doc;\n     try {\n-      doc \u003d\n-        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+      doc \u003d DocumentBuilderFactory\n+          .newInstance()\n+          .newDocumentBuilder()\n+          .newDocument();\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n+\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n     handleDeprecation(); //ensure properties is set and deprecation is handled\n-    for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n-      String name \u003d (String)e.nextElement();\n-      Object object \u003d properties.get(name);\n-      String value \u003d null;\n-      if (object instanceof String) {\n-        value \u003d (String) object;\n-      }else {\n-        continue;\n+\n+    if(!Strings.isNullOrEmpty(propertyName)) {\n+      if (!properties.containsKey(propertyName)) {\n+        // given property not found, illegal argument\n+        throw new IllegalArgumentException(\"Property \" +\n+            propertyName + \" not found\");\n+      } else {\n+        // given property is found, write single property\n+        appendXMLProperty(doc, conf, propertyName);\n+        conf.appendChild(doc.createTextNode(\"\\n\"));\n       }\n-      Element propNode \u003d doc.createElement(\"property\");\n-      conf.appendChild(propNode);\n-\n-      Element nameNode \u003d doc.createElement(\"name\");\n-      nameNode.appendChild(doc.createTextNode(name));\n-      propNode.appendChild(nameNode);\n-\n-      Element valueNode \u003d doc.createElement(\"value\");\n-      valueNode.appendChild(doc.createTextNode(value));\n-      propNode.appendChild(valueNode);\n-\n-      if (updatingResource !\u003d null) {\n-        String[] sources \u003d updatingResource.get(name);\n-        if(sources !\u003d null) {\n-          for(String s : sources) {\n-            Element sourceNode \u003d doc.createElement(\"source\");\n-            sourceNode.appendChild(doc.createTextNode(s));\n-            propNode.appendChild(sourceNode);\n-          }\n-        }\n+    } else {\n+      // append all elements\n+      for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n+        appendXMLProperty(doc, conf, (String)e.nextElement());\n+        conf.appendChild(doc.createTextNode(\"\\n\"));\n       }\n-      \n-      conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Document asXmlDocument(String propertyName)\n      throws IOException, IllegalArgumentException {\n    Document doc;\n    try {\n      doc \u003d DocumentBuilderFactory\n          .newInstance()\n          .newDocumentBuilder()\n          .newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    handleDeprecation(); //ensure properties is set and deprecation is handled\n\n    if(!Strings.isNullOrEmpty(propertyName)) {\n      if (!properties.containsKey(propertyName)) {\n        // given property not found, illegal argument\n        throw new IllegalArgumentException(\"Property \" +\n            propertyName + \" not found\");\n      } else {\n        // given property is found, write single property\n        appendXMLProperty(doc, conf, propertyName);\n        conf.appendChild(doc.createTextNode(\"\\n\"));\n      }\n    } else {\n      // append all elements\n      for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n        appendXMLProperty(doc, conf, (String)e.nextElement());\n        conf.appendChild(doc.createTextNode(\"\\n\"));\n      }\n    }\n    return doc;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {}
        }
      ]
    },
    "a690a215dba6180090214675393431a589c37f24": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9756. Remove the deprecated getServer(..) methods from RPC.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507259 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/13 3:59 AM",
      "commitName": "a690a215dba6180090214675393431a589c37f24",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "18/06/13 2:56 PM",
      "commitNameOld": "3ab7f86c16c0c3df89f5157aab0bb5d66fbcc2d5",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 37.54,
      "commitsBetweenForRepo": 200,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private synchronized Document asXmlDocument() throws IOException {\n     Document doc;\n     try {\n       doc \u003d\n         DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n     handleDeprecation(); //ensure properties is set and deprecation is handled\n-    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n+    for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n       String name \u003d (String)e.nextElement();\n       Object object \u003d properties.get(name);\n       String value \u003d null;\n       if (object instanceof String) {\n         value \u003d (String) object;\n       }else {\n         continue;\n       }\n       Element propNode \u003d doc.createElement(\"property\");\n       conf.appendChild(propNode);\n \n       Element nameNode \u003d doc.createElement(\"name\");\n       nameNode.appendChild(doc.createTextNode(name));\n       propNode.appendChild(nameNode);\n \n       Element valueNode \u003d doc.createElement(\"value\");\n       valueNode.appendChild(doc.createTextNode(value));\n       propNode.appendChild(valueNode);\n \n       if (updatingResource !\u003d null) {\n         String[] sources \u003d updatingResource.get(name);\n         if(sources !\u003d null) {\n           for(String s : sources) {\n             Element sourceNode \u003d doc.createElement(\"source\");\n             sourceNode.appendChild(doc.createTextNode(s));\n             propNode.appendChild(sourceNode);\n           }\n         }\n       }\n       \n       conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    handleDeprecation(); //ensure properties is set and deprecation is handled\n    for (Enumeration\u003cObject\u003e e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      if (updatingResource !\u003d null) {\n        String[] sources \u003d updatingResource.get(name);\n        if(sources !\u003d null) {\n          for(String s : sources) {\n            Element sourceNode \u003d doc.createElement(\"source\");\n            sourceNode.appendChild(doc.createTextNode(s));\n            propNode.appendChild(sourceNode);\n          }\n        }\n      }\n      \n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8525. Provide Improved Traceability for Configuration (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359775 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 9:49 AM",
      "commitName": "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "30/06/12 11:40 AM",
      "commitNameOld": "cb5867573e8fd5bf1c5fed793aa554ccb5549661",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 9.92,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,47 @@\n   private synchronized Document asXmlDocument() throws IOException {\n     Document doc;\n     try {\n       doc \u003d\n         DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n     handleDeprecation(); //ensure properties is set and deprecation is handled\n     for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n       String name \u003d (String)e.nextElement();\n       Object object \u003d properties.get(name);\n       String value \u003d null;\n       if (object instanceof String) {\n         value \u003d (String) object;\n       }else {\n         continue;\n       }\n       Element propNode \u003d doc.createElement(\"property\");\n       conf.appendChild(propNode);\n \n-      if (updatingResource !\u003d null) {\n-        Comment commentNode \u003d doc.createComment(\n-          \"Loaded from \" + updatingResource.get(name));\n-        propNode.appendChild(commentNode);\n-      }\n       Element nameNode \u003d doc.createElement(\"name\");\n       nameNode.appendChild(doc.createTextNode(name));\n       propNode.appendChild(nameNode);\n \n       Element valueNode \u003d doc.createElement(\"value\");\n       valueNode.appendChild(doc.createTextNode(value));\n       propNode.appendChild(valueNode);\n \n+      if (updatingResource !\u003d null) {\n+        String[] sources \u003d updatingResource.get(name);\n+        if(sources !\u003d null) {\n+          for(String s : sources) {\n+            Element sourceNode \u003d doc.createElement(\"source\");\n+            sourceNode.appendChild(doc.createTextNode(s));\n+            propNode.appendChild(sourceNode);\n+          }\n+        }\n+      }\n+      \n       conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    handleDeprecation(); //ensure properties is set and deprecation is handled\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      if (updatingResource !\u003d null) {\n        String[] sources \u003d updatingResource.get(name);\n        if(sources !\u003d null) {\n          for(String s : sources) {\n            Element sourceNode \u003d doc.createElement(\"source\");\n            sourceNode.appendChild(doc.createTextNode(s));\n            propNode.appendChild(sourceNode);\n          }\n        }\n      }\n      \n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "c8bb6f59b8de48f533414fb92f8220ea60b701bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7993. Hadoop ignores old-style config options for enabling compressed output. (Anupam Seth via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236506 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/01/12 7:42 PM",
      "commitName": "c8bb6f59b8de48f533414fb92f8220ea60b701bc",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "05/01/12 9:42 PM",
      "commitNameOld": "574f0b4c0a56918f2d0fb859b38331533708f8c8",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private synchronized Document asXmlDocument() throws IOException {\n     Document doc;\n     try {\n       doc \u003d\n         DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n-    getProps(); // ensure properties is set\n+    handleDeprecation(); //ensure properties is set and deprecation is handled\n     for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n       String name \u003d (String)e.nextElement();\n       Object object \u003d properties.get(name);\n       String value \u003d null;\n       if (object instanceof String) {\n         value \u003d (String) object;\n       }else {\n         continue;\n       }\n       Element propNode \u003d doc.createElement(\"property\");\n       conf.appendChild(propNode);\n \n       if (updatingResource !\u003d null) {\n         Comment commentNode \u003d doc.createComment(\n           \"Loaded from \" + updatingResource.get(name));\n         propNode.appendChild(commentNode);\n       }\n       Element nameNode \u003d doc.createElement(\"name\");\n       nameNode.appendChild(doc.createTextNode(name));\n       propNode.appendChild(nameNode);\n \n       Element valueNode \u003d doc.createElement(\"value\");\n       valueNode.appendChild(doc.createTextNode(value));\n       propNode.appendChild(valueNode);\n \n       conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    handleDeprecation(); //ensure properties is set and deprecation is handled\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      if (updatingResource !\u003d null) {\n        Comment commentNode \u003d doc.createComment(\n          \"Loaded from \" + updatingResource.get(name));\n        propNode.appendChild(commentNode);\n      }\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "4ee39ffe6a1016855ceedd489c5813f40e492815": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7542. Reverting the patch to address issues.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178308 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/10/11 11:45 PM",
      "commitName": "4ee39ffe6a1016855ceedd489c5813f40e492815",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/09/11 12:26 AM",
      "commitNameOld": "36d7ab3489dc2c90b8ebc87c38b8524062f2e94f",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 9.97,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,41 @@\n   private synchronized Document asXmlDocument() throws IOException {\n     Document doc;\n     try {\n       doc \u003d\n         DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n-\n-      // Allow a broader set of control characters to appear in job confs.\n-      // cf https://issues.apache.org/jira/browse/MAPREDUCE-109 \n-      doc.setXmlVersion( \"1.1\" );\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n     getProps(); // ensure properties is set\n     for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n       String name \u003d (String)e.nextElement();\n       Object object \u003d properties.get(name);\n       String value \u003d null;\n       if (object instanceof String) {\n         value \u003d (String) object;\n       }else {\n         continue;\n       }\n       Element propNode \u003d doc.createElement(\"property\");\n       conf.appendChild(propNode);\n \n       if (updatingResource !\u003d null) {\n         Comment commentNode \u003d doc.createComment(\n           \"Loaded from \" + updatingResource.get(name));\n         propNode.appendChild(commentNode);\n       }\n       Element nameNode \u003d doc.createElement(\"name\");\n       nameNode.appendChild(doc.createTextNode(name));\n       propNode.appendChild(nameNode);\n \n       Element valueNode \u003d doc.createElement(\"value\");\n       valueNode.appendChild(doc.createTextNode(value));\n       propNode.appendChild(valueNode);\n \n       conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    getProps(); // ensure properties is set\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      if (updatingResource !\u003d null) {\n        Comment commentNode \u003d doc.createComment(\n          \"Loaded from \" + updatingResource.get(name));\n        propNode.appendChild(commentNode);\n      }\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "36d7ab3489dc2c90b8ebc87c38b8524062f2e94f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7542. Change Configuration XML format to 1.1 to support for serializing additional characters Contributed by Christopher Egner.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1174562 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/09/11 12:26 AM",
      "commitName": "36d7ab3489dc2c90b8ebc87c38b8524062f2e94f",
      "commitAuthor": "Harsh J",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 29.3,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   private synchronized Document asXmlDocument() throws IOException {\n     Document doc;\n     try {\n       doc \u003d\n         DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+\n+      // Allow a broader set of control characters to appear in job confs.\n+      // cf https://issues.apache.org/jira/browse/MAPREDUCE-109 \n+      doc.setXmlVersion( \"1.1\" );\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n     getProps(); // ensure properties is set\n     for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n       String name \u003d (String)e.nextElement();\n       Object object \u003d properties.get(name);\n       String value \u003d null;\n       if (object instanceof String) {\n         value \u003d (String) object;\n       }else {\n         continue;\n       }\n       Element propNode \u003d doc.createElement(\"property\");\n       conf.appendChild(propNode);\n \n       if (updatingResource !\u003d null) {\n         Comment commentNode \u003d doc.createComment(\n           \"Loaded from \" + updatingResource.get(name));\n         propNode.appendChild(commentNode);\n       }\n       Element nameNode \u003d doc.createElement(\"name\");\n       nameNode.appendChild(doc.createTextNode(name));\n       propNode.appendChild(nameNode);\n \n       Element valueNode \u003d doc.createElement(\"value\");\n       valueNode.appendChild(doc.createTextNode(value));\n       propNode.appendChild(valueNode);\n \n       conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n\n      // Allow a broader set of control characters to appear in job confs.\n      // cf https://issues.apache.org/jira/browse/MAPREDUCE-109 \n      doc.setXmlVersion( \"1.1\" );\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    getProps(); // ensure properties is set\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      if (updatingResource !\u003d null) {\n        Comment commentNode \u003d doc.createComment(\n          \"Loaded from \" + updatingResource.get(name));\n        propNode.appendChild(commentNode);\n      }\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    getProps(); // ensure properties is set\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      if (updatingResource !\u003d null) {\n        Comment commentNode \u003d doc.createComment(\n          \"Loaded from \" + updatingResource.get(name));\n        propNode.appendChild(commentNode);\n      }\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    getProps(); // ensure properties is set\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      if (updatingResource !\u003d null) {\n        Comment commentNode \u003d doc.createComment(\n          \"Loaded from \" + updatingResource.get(name));\n        propNode.appendChild(commentNode);\n      }\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    getProps(); // ensure properties is set\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      if (updatingResource !\u003d null) {\n        Comment commentNode \u003d doc.createComment(\n          \"Loaded from \" + updatingResource.get(name));\n        propNode.appendChild(commentNode);\n      }\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "common/src/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "common/src/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "160b6fd4966f5189f988eaf0f094867fb2155c04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7118. Fix NPE in Configuration.writeXml. Contributed by Todd Lipcon\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1063613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/11 10:59 PM",
      "commitName": "160b6fd4966f5189f988eaf0f094867fb2155c04",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/01/11 1:58 PM",
      "commitNameOld": "a15d473c464b9ed52f09ff719ec3c53b7473a17d",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 1.38,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   private synchronized Document asXmlDocument() throws IOException {\n     Document doc;\n     try {\n       doc \u003d\n         DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n     } catch (ParserConfigurationException pe) {\n       throw new IOException(pe);\n     }\n     Element conf \u003d doc.createElement(\"configuration\");\n     doc.appendChild(conf);\n     conf.appendChild(doc.createTextNode(\"\\n\"));\n+    getProps(); // ensure properties is set\n     for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n       String name \u003d (String)e.nextElement();\n       Object object \u003d properties.get(name);\n       String value \u003d null;\n       if (object instanceof String) {\n         value \u003d (String) object;\n       }else {\n         continue;\n       }\n       Element propNode \u003d doc.createElement(\"property\");\n       conf.appendChild(propNode);\n \n       if (updatingResource !\u003d null) {\n         Comment commentNode \u003d doc.createComment(\n           \"Loaded from \" + updatingResource.get(name));\n         propNode.appendChild(commentNode);\n       }\n       Element nameNode \u003d doc.createElement(\"name\");\n       nameNode.appendChild(doc.createTextNode(name));\n       propNode.appendChild(nameNode);\n \n       Element valueNode \u003d doc.createElement(\"value\");\n       valueNode.appendChild(doc.createTextNode(value));\n       propNode.appendChild(valueNode);\n \n       conf.appendChild(doc.createTextNode(\"\\n\"));\n     }\n     return doc;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    getProps(); // ensure properties is set\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      if (updatingResource !\u003d null) {\n        Comment commentNode \u003d doc.createComment(\n          \"Loaded from \" + updatingResource.get(name));\n        propNode.appendChild(commentNode);\n      }\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "src/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "717579f3bdf01c51437ea1e7f414a737a89de986": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7082. Configuration.writeXML should not hold lock while outputting. Contributed by Todd Lipcon\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1055206 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/11 2:12 PM",
      "commitName": "717579f3bdf01c51437ea1e7f414a737a89de986",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,40 @@\n+  private synchronized Document asXmlDocument() throws IOException {\n+    Document doc;\n+    try {\n+      doc \u003d\n+        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+    } catch (ParserConfigurationException pe) {\n+      throw new IOException(pe);\n+    }\n+    Element conf \u003d doc.createElement(\"configuration\");\n+    doc.appendChild(conf);\n+    conf.appendChild(doc.createTextNode(\"\\n\"));\n+    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n+      String name \u003d (String)e.nextElement();\n+      Object object \u003d properties.get(name);\n+      String value \u003d null;\n+      if (object instanceof String) {\n+        value \u003d (String) object;\n+      }else {\n+        continue;\n+      }\n+      Element propNode \u003d doc.createElement(\"property\");\n+      conf.appendChild(propNode);\n+\n+      if (updatingResource !\u003d null) {\n+        Comment commentNode \u003d doc.createComment(\n+          \"Loaded from \" + updatingResource.get(name));\n+        propNode.appendChild(commentNode);\n+      }\n+      Element nameNode \u003d doc.createElement(\"name\");\n+      nameNode.appendChild(doc.createTextNode(name));\n+      propNode.appendChild(nameNode);\n+\n+      Element valueNode \u003d doc.createElement(\"value\");\n+      valueNode.appendChild(doc.createTextNode(value));\n+      propNode.appendChild(valueNode);\n+\n+      conf.appendChild(doc.createTextNode(\"\\n\"));\n+    }\n+    return doc;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Document asXmlDocument() throws IOException {\n    Document doc;\n    try {\n      doc \u003d\n        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n    } catch (ParserConfigurationException pe) {\n      throw new IOException(pe);\n    }\n    Element conf \u003d doc.createElement(\"configuration\");\n    doc.appendChild(conf);\n    conf.appendChild(doc.createTextNode(\"\\n\"));\n    for (Enumeration e \u003d properties.keys(); e.hasMoreElements();) {\n      String name \u003d (String)e.nextElement();\n      Object object \u003d properties.get(name);\n      String value \u003d null;\n      if (object instanceof String) {\n        value \u003d (String) object;\n      }else {\n        continue;\n      }\n      Element propNode \u003d doc.createElement(\"property\");\n      conf.appendChild(propNode);\n\n      if (updatingResource !\u003d null) {\n        Comment commentNode \u003d doc.createComment(\n          \"Loaded from \" + updatingResource.get(name));\n        propNode.appendChild(commentNode);\n      }\n      Element nameNode \u003d doc.createElement(\"name\");\n      nameNode.appendChild(doc.createTextNode(name));\n      propNode.appendChild(nameNode);\n\n      Element valueNode \u003d doc.createElement(\"value\");\n      valueNode.appendChild(doc.createTextNode(value));\n      propNode.appendChild(valueNode);\n\n      conf.appendChild(doc.createTextNode(\"\\n\"));\n    }\n    return doc;\n  }",
      "path": "src/java/org/apache/hadoop/conf/Configuration.java"
    }
  }
}