{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementDispatcher.java",
  "functionName": "collect",
  "functionId": "collect___placement-ConstraintPlacementAlgorithmOutput",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementDispatcher.java",
  "functionStartLine": 116,
  "functionEndLine": 144,
  "numCommitsSeen": 3,
  "timeTaken": 1553,
  "changeHistory": [
    "6e5ba9366fc05719906ff2789b1a0fd26001182b",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68"
  ],
  "changeHistoryShort": {
    "6e5ba9366fc05719906ff2789b1a0fd26001182b": "Ybodychange",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e5ba9366fc05719906ff2789b1a0fd26001182b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "02/02/18 10:28 AM",
      "commitName": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 2.37,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public void collect(ConstraintPlacementAlgorithmOutput placement) {\n     if (!placement.getPlacedRequests().isEmpty()) {\n       List\u003cPlacedSchedulingRequest\u003e processed \u003d\n           placedRequests.computeIfAbsent(\n               placement.getApplicationId(), k -\u003e new ArrayList\u003c\u003e());\n       synchronized (processed) {\n         LOG.debug(\n             \"Planning Algorithm has placed for application [{}]\" +\n                 \" the following [{}]\", placement.getApplicationId(),\n             placement.getPlacedRequests());\n         for (PlacedSchedulingRequest esr :\n             placement.getPlacedRequests()) {\n           processed.add(esr);\n         }\n       }\n     }\n     if (!placement.getRejectedRequests().isEmpty()) {\n-      List\u003cSchedulingRequest\u003e rejected \u003d\n+      List\u003cSchedulingRequestWithPlacementAttempt\u003e rejected \u003d\n           rejectedRequests.computeIfAbsent(\n               placement.getApplicationId(), k -\u003e new ArrayList());\n       LOG.warn(\n           \"Planning Algorithm has rejected for application [{}]\" +\n               \" the following [{}]\", placement.getApplicationId(),\n           placement.getRejectedRequests());\n       synchronized (rejected) {\n         rejected.addAll(placement.getRejectedRequests());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void collect(ConstraintPlacementAlgorithmOutput placement) {\n    if (!placement.getPlacedRequests().isEmpty()) {\n      List\u003cPlacedSchedulingRequest\u003e processed \u003d\n          placedRequests.computeIfAbsent(\n              placement.getApplicationId(), k -\u003e new ArrayList\u003c\u003e());\n      synchronized (processed) {\n        LOG.debug(\n            \"Planning Algorithm has placed for application [{}]\" +\n                \" the following [{}]\", placement.getApplicationId(),\n            placement.getPlacedRequests());\n        for (PlacedSchedulingRequest esr :\n            placement.getPlacedRequests()) {\n          processed.add(esr);\n        }\n      }\n    }\n    if (!placement.getRejectedRequests().isEmpty()) {\n      List\u003cSchedulingRequestWithPlacementAttempt\u003e rejected \u003d\n          rejectedRequests.computeIfAbsent(\n              placement.getApplicationId(), k -\u003e new ArrayList());\n      LOG.warn(\n          \"Planning Algorithm has rejected for application [{}]\" +\n              \" the following [{}]\", placement.getApplicationId(),\n          placement.getRejectedRequests());\n      synchronized (rejected) {\n        rejected.addAll(placement.getRejectedRequests());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementDispatcher.java",
      "extendedDetails": {}
    },
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7612. Add Processor Framework for Rich Placement Constraints. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,29 @@\n+  public void collect(ConstraintPlacementAlgorithmOutput placement) {\n+    if (!placement.getPlacedRequests().isEmpty()) {\n+      List\u003cPlacedSchedulingRequest\u003e processed \u003d\n+          placedRequests.computeIfAbsent(\n+              placement.getApplicationId(), k -\u003e new ArrayList\u003c\u003e());\n+      synchronized (processed) {\n+        LOG.debug(\n+            \"Planning Algorithm has placed for application [{}]\" +\n+                \" the following [{}]\", placement.getApplicationId(),\n+            placement.getPlacedRequests());\n+        for (PlacedSchedulingRequest esr :\n+            placement.getPlacedRequests()) {\n+          processed.add(esr);\n+        }\n+      }\n+    }\n+    if (!placement.getRejectedRequests().isEmpty()) {\n+      List\u003cSchedulingRequest\u003e rejected \u003d\n+          rejectedRequests.computeIfAbsent(\n+              placement.getApplicationId(), k -\u003e new ArrayList());\n+      LOG.warn(\n+          \"Planning Algorithm has rejected for application [{}]\" +\n+              \" the following [{}]\", placement.getApplicationId(),\n+          placement.getRejectedRequests());\n+      synchronized (rejected) {\n+        rejected.addAll(placement.getRejectedRequests());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void collect(ConstraintPlacementAlgorithmOutput placement) {\n    if (!placement.getPlacedRequests().isEmpty()) {\n      List\u003cPlacedSchedulingRequest\u003e processed \u003d\n          placedRequests.computeIfAbsent(\n              placement.getApplicationId(), k -\u003e new ArrayList\u003c\u003e());\n      synchronized (processed) {\n        LOG.debug(\n            \"Planning Algorithm has placed for application [{}]\" +\n                \" the following [{}]\", placement.getApplicationId(),\n            placement.getPlacedRequests());\n        for (PlacedSchedulingRequest esr :\n            placement.getPlacedRequests()) {\n          processed.add(esr);\n        }\n      }\n    }\n    if (!placement.getRejectedRequests().isEmpty()) {\n      List\u003cSchedulingRequest\u003e rejected \u003d\n          rejectedRequests.computeIfAbsent(\n              placement.getApplicationId(), k -\u003e new ArrayList());\n      LOG.warn(\n          \"Planning Algorithm has rejected for application [{}]\" +\n              \" the following [{}]\", placement.getApplicationId(),\n          placement.getRejectedRequests());\n      synchronized (rejected) {\n        rejected.addAll(placement.getRejectedRequests());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementDispatcher.java"
    }
  }
}