{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultLinuxContainerRuntime.java",
  "functionName": "signalContainer",
  "functionId": "signalContainer___ctx-ContainerRuntimeContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DefaultLinuxContainerRuntime.java",
  "functionStartLine": 171,
  "functionEndLine": 198,
  "numCommitsSeen": 23,
  "timeTaken": 1889,
  "changeHistory": [
    "e5e1851d803bf8d8b96fec1b5c0058014e9329d0",
    "9d4d30243b0fc9630da51a2c17b543ef671d035c",
    "059caf99891943d9587cac19b48e82efbed06b2d",
    "3e6fce91a471b4a5099de109582e7c6417e8a822"
  ],
  "changeHistoryShort": {
    "e5e1851d803bf8d8b96fec1b5c0058014e9329d0": "Ybodychange",
    "9d4d30243b0fc9630da51a2c17b543ef671d035c": "Ybodychange",
    "059caf99891943d9587cac19b48e82efbed06b2d": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e5e1851d803bf8d8b96fec1b5c0058014e9329d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7034. DefaultLinuxContainerRuntime and DockerLinuxContainerRuntime sends client environment variables to container-executor. Contributed by Miklos Szegedi.\n",
      "commitDate": "21/09/17 2:01 PM",
      "commitName": "e5e1851d803bf8d8b96fec1b5c0058014e9329d0",
      "commitAuthor": "Junping Du",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 30.53,
      "commitsBetweenForRepo": 331,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   public void signalContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n-    Container container \u003d ctx.getContainer();\n     PrivilegedOperation signalOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n \n     signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n         ctx.getExecutionAttribute(USER),\n         Integer.toString(PrivilegedOperation.RunAsUserCommand\n             .SIGNAL_CONTAINER.getValue()),\n         ctx.getExecutionAttribute(PID),\n         Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n \n     //Some failures here are acceptable. Let the calling executor decide.\n     signalOp.disableFailureLogging();\n \n     try {\n       PrivilegedOperationExecutor executor \u003d PrivilegedOperationExecutor\n           .getInstance(conf);\n \n       executor.executePrivilegedOperation(null,\n-          signalOp, null, container.getLaunchContext().getEnvironment(),\n-          false, true);\n+          signalOp, null, null, false, false);\n     } catch (PrivilegedOperationException e) {\n       //Don\u0027t log the failure here. Some kinds of signaling failures are\n       // acceptable. Let the calling executor decide what to do.\n       throw new ContainerExecutionException(\"Signal container failed\", e\n           .getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    PrivilegedOperation signalOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n\n    signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n        ctx.getExecutionAttribute(USER),\n        Integer.toString(PrivilegedOperation.RunAsUserCommand\n            .SIGNAL_CONTAINER.getValue()),\n        ctx.getExecutionAttribute(PID),\n        Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n\n    //Some failures here are acceptable. Let the calling executor decide.\n    signalOp.disableFailureLogging();\n\n    try {\n      PrivilegedOperationExecutor executor \u003d PrivilegedOperationExecutor\n          .getInstance(conf);\n\n      executor.executePrivilegedOperation(null,\n          signalOp, null, null, false, false);\n    } catch (PrivilegedOperationException e) {\n      //Don\u0027t log the failure here. Some kinds of signaling failures are\n      // acceptable. Let the calling executor decide what to do.\n      throw new ContainerExecutionException(\"Signal container failed\", e\n          .getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DefaultLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "9d4d30243b0fc9630da51a2c17b543ef671d035c": {
      "type": "Ybodychange",
      "commitMessage": "Remove parent\u0027s env vars from child processes\n",
      "commitDate": "29/04/16 9:25 AM",
      "commitName": "9d4d30243b0fc9630da51a2c17b543ef671d035c",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "07/03/16 7:40 AM",
      "commitNameOld": "059caf99891943d9587cac19b48e82efbed06b2d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 53.03,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void signalContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n     Container container \u003d ctx.getContainer();\n     PrivilegedOperation signalOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n \n     signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n         ctx.getExecutionAttribute(USER),\n         Integer.toString(PrivilegedOperation.RunAsUserCommand\n             .SIGNAL_CONTAINER.getValue()),\n         ctx.getExecutionAttribute(PID),\n         Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n \n     //Some failures here are acceptable. Let the calling executor decide.\n     signalOp.disableFailureLogging();\n \n     try {\n       PrivilegedOperationExecutor executor \u003d PrivilegedOperationExecutor\n           .getInstance(conf);\n \n       executor.executePrivilegedOperation(null,\n           signalOp, null, container.getLaunchContext().getEnvironment(),\n-          false);\n+          false, true);\n     } catch (PrivilegedOperationException e) {\n       //Don\u0027t log the failure here. Some kinds of signaling failures are\n       // acceptable. Let the calling executor decide what to do.\n       throw new ContainerExecutionException(\"Signal container failed\", e\n           .getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n    PrivilegedOperation signalOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n\n    signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n        ctx.getExecutionAttribute(USER),\n        Integer.toString(PrivilegedOperation.RunAsUserCommand\n            .SIGNAL_CONTAINER.getValue()),\n        ctx.getExecutionAttribute(PID),\n        Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n\n    //Some failures here are acceptable. Let the calling executor decide.\n    signalOp.disableFailureLogging();\n\n    try {\n      PrivilegedOperationExecutor executor \u003d PrivilegedOperationExecutor\n          .getInstance(conf);\n\n      executor.executePrivilegedOperation(null,\n          signalOp, null, container.getLaunchContext().getEnvironment(),\n          false, true);\n    } catch (PrivilegedOperationException e) {\n      //Don\u0027t log the failure here. Some kinds of signaling failures are\n      // acceptable. Let the calling executor decide what to do.\n      throw new ContainerExecutionException(\"Signal container failed\", e\n          .getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DefaultLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "059caf99891943d9587cac19b48e82efbed06b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4744. Too many signal to container failure in case of LCE. Contributed by Sidharta Seethana\n",
      "commitDate": "07/03/16 7:40 AM",
      "commitName": "059caf99891943d9587cac19b48e82efbed06b2d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "27/07/15 11:57 AM",
      "commitNameOld": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 223.86,
      "commitsBetweenForRepo": 1493,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n   public void signalContainer(ContainerRuntimeContext ctx)\n       throws ContainerExecutionException {\n     Container container \u003d ctx.getContainer();\n     PrivilegedOperation signalOp \u003d new PrivilegedOperation(\n-        PrivilegedOperation.OperationType.SIGNAL_CONTAINER, (String) null);\n+        PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n \n     signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n         ctx.getExecutionAttribute(USER),\n         Integer.toString(PrivilegedOperation.RunAsUserCommand\n             .SIGNAL_CONTAINER.getValue()),\n         ctx.getExecutionAttribute(PID),\n         Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n \n+    //Some failures here are acceptable. Let the calling executor decide.\n+    signalOp.disableFailureLogging();\n+\n     try {\n       PrivilegedOperationExecutor executor \u003d PrivilegedOperationExecutor\n           .getInstance(conf);\n \n       executor.executePrivilegedOperation(null,\n           signalOp, null, container.getLaunchContext().getEnvironment(),\n           false);\n     } catch (PrivilegedOperationException e) {\n-      LOG.warn(\"Signal container failed. Exception: \", e);\n-\n+      //Don\u0027t log the failure here. Some kinds of signaling failures are\n+      // acceptable. Let the calling executor decide what to do.\n       throw new ContainerExecutionException(\"Signal container failed\", e\n           .getExitCode(), e.getOutput(), e.getErrorOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n    PrivilegedOperation signalOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n\n    signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n        ctx.getExecutionAttribute(USER),\n        Integer.toString(PrivilegedOperation.RunAsUserCommand\n            .SIGNAL_CONTAINER.getValue()),\n        ctx.getExecutionAttribute(PID),\n        Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n\n    //Some failures here are acceptable. Let the calling executor decide.\n    signalOp.disableFailureLogging();\n\n    try {\n      PrivilegedOperationExecutor executor \u003d PrivilegedOperationExecutor\n          .getInstance(conf);\n\n      executor.executePrivilegedOperation(null,\n          signalOp, null, container.getLaunchContext().getEnvironment(),\n          false);\n    } catch (PrivilegedOperationException e) {\n      //Don\u0027t log the failure here. Some kinds of signaling failures are\n      // acceptable. Let the calling executor decide what to do.\n      throw new ContainerExecutionException(\"Signal container failed\", e\n          .getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DefaultLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,27 @@\n+  public void signalContainer(ContainerRuntimeContext ctx)\n+      throws ContainerExecutionException {\n+    Container container \u003d ctx.getContainer();\n+    PrivilegedOperation signalOp \u003d new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.SIGNAL_CONTAINER, (String) null);\n+\n+    signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n+        ctx.getExecutionAttribute(USER),\n+        Integer.toString(PrivilegedOperation.RunAsUserCommand\n+            .SIGNAL_CONTAINER.getValue()),\n+        ctx.getExecutionAttribute(PID),\n+        Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n+\n+    try {\n+      PrivilegedOperationExecutor executor \u003d PrivilegedOperationExecutor\n+          .getInstance(conf);\n+\n+      executor.executePrivilegedOperation(null,\n+          signalOp, null, container.getLaunchContext().getEnvironment(),\n+          false);\n+    } catch (PrivilegedOperationException e) {\n+      LOG.warn(\"Signal container failed. Exception: \", e);\n+\n+      throw new ContainerExecutionException(\"Signal container failed\", e\n+          .getExitCode(), e.getOutput(), e.getErrorOutput());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(ContainerRuntimeContext ctx)\n      throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n    PrivilegedOperation signalOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.SIGNAL_CONTAINER, (String) null);\n\n    signalOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n        ctx.getExecutionAttribute(USER),\n        Integer.toString(PrivilegedOperation.RunAsUserCommand\n            .SIGNAL_CONTAINER.getValue()),\n        ctx.getExecutionAttribute(PID),\n        Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n\n    try {\n      PrivilegedOperationExecutor executor \u003d PrivilegedOperationExecutor\n          .getInstance(conf);\n\n      executor.executePrivilegedOperation(null,\n          signalOp, null, container.getLaunchContext().getEnvironment(),\n          false);\n    } catch (PrivilegedOperationException e) {\n      LOG.warn(\"Signal container failed. Exception: \", e);\n\n      throw new ContainerExecutionException(\"Signal container failed\", e\n          .getExitCode(), e.getOutput(), e.getErrorOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DefaultLinuxContainerRuntime.java"
    }
  }
}