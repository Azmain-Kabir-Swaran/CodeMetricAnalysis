{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SequenceFileAsBinaryOutputFormat.java",
  "functionName": "getRecordWriter",
  "functionId": "getRecordWriter___ignored-FileSystem__job-JobConf__name-String__progress-Progressable",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SequenceFileAsBinaryOutputFormat.java",
  "functionStartLine": 112,
  "functionEndLine": 156,
  "numCommitsSeen": 5,
  "timeTaken": 4234,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "             getRecordWriter(FileSystem ignored, JobConf job,\n                             String name, Progressable progress)\n    throws IOException {\n    // get the path of the temporary output file \n    Path file \u003d FileOutputFormat.getTaskOutputPath(job, name);\n    \n    FileSystem fs \u003d file.getFileSystem(job);\n    CompressionCodec codec \u003d null;\n    CompressionType compressionType \u003d CompressionType.NONE;\n    if (getCompressOutput(job)) {\n      // find the kind of compression to do\n      compressionType \u003d getOutputCompressionType(job);\n\n      // find the right codec\n      Class\u003c? extends CompressionCodec\u003e codecClass \u003d getOutputCompressorClass(job,\n\t  DefaultCodec.class);\n      codec \u003d ReflectionUtils.newInstance(codecClass, job);\n    }\n    final SequenceFile.Writer out \u003d \n      SequenceFile.createWriter(fs, job, file,\n                    getSequenceFileOutputKeyClass(job),\n                    getSequenceFileOutputValueClass(job),\n                    compressionType,\n                    codec,\n                    progress);\n\n    return new RecordWriter\u003cBytesWritable, BytesWritable\u003e() {\n        \n        private WritableValueBytes wvaluebytes \u003d new WritableValueBytes();\n\n        public void write(BytesWritable bkey, BytesWritable bvalue)\n          throws IOException {\n\n          wvaluebytes.reset(bvalue);\n          out.appendRaw(bkey.getBytes(), 0, bkey.getLength(), wvaluebytes);\n          wvaluebytes.reset(null);\n        }\n\n        public void close(Reporter reporter) throws IOException { \n          out.close();\n        }\n\n      };\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SequenceFileAsBinaryOutputFormat.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SequenceFileAsBinaryOutputFormat.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SequenceFileAsBinaryOutputFormat.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "             getRecordWriter(FileSystem ignored, JobConf job,\n                             String name, Progressable progress)\n    throws IOException {\n    // get the path of the temporary output file \n    Path file \u003d FileOutputFormat.getTaskOutputPath(job, name);\n    \n    FileSystem fs \u003d file.getFileSystem(job);\n    CompressionCodec codec \u003d null;\n    CompressionType compressionType \u003d CompressionType.NONE;\n    if (getCompressOutput(job)) {\n      // find the kind of compression to do\n      compressionType \u003d getOutputCompressionType(job);\n\n      // find the right codec\n      Class\u003c? extends CompressionCodec\u003e codecClass \u003d getOutputCompressorClass(job,\n\t  DefaultCodec.class);\n      codec \u003d ReflectionUtils.newInstance(codecClass, job);\n    }\n    final SequenceFile.Writer out \u003d \n      SequenceFile.createWriter(fs, job, file,\n                    getSequenceFileOutputKeyClass(job),\n                    getSequenceFileOutputValueClass(job),\n                    compressionType,\n                    codec,\n                    progress);\n\n    return new RecordWriter\u003cBytesWritable, BytesWritable\u003e() {\n        \n        private WritableValueBytes wvaluebytes \u003d new WritableValueBytes();\n\n        public void write(BytesWritable bkey, BytesWritable bvalue)\n          throws IOException {\n\n          wvaluebytes.reset(bvalue);\n          out.appendRaw(bkey.getBytes(), 0, bkey.getLength(), wvaluebytes);\n          wvaluebytes.reset(null);\n        }\n\n        public void close(Reporter reporter) throws IOException { \n          out.close();\n        }\n\n      };\n\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SequenceFileAsBinaryOutputFormat.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/SequenceFileAsBinaryOutputFormat.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SequenceFileAsBinaryOutputFormat.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,45 @@\n+             getRecordWriter(FileSystem ignored, JobConf job,\n+                             String name, Progressable progress)\n+    throws IOException {\n+    // get the path of the temporary output file \n+    Path file \u003d FileOutputFormat.getTaskOutputPath(job, name);\n+    \n+    FileSystem fs \u003d file.getFileSystem(job);\n+    CompressionCodec codec \u003d null;\n+    CompressionType compressionType \u003d CompressionType.NONE;\n+    if (getCompressOutput(job)) {\n+      // find the kind of compression to do\n+      compressionType \u003d getOutputCompressionType(job);\n+\n+      // find the right codec\n+      Class\u003c? extends CompressionCodec\u003e codecClass \u003d getOutputCompressorClass(job,\n+\t  DefaultCodec.class);\n+      codec \u003d ReflectionUtils.newInstance(codecClass, job);\n+    }\n+    final SequenceFile.Writer out \u003d \n+      SequenceFile.createWriter(fs, job, file,\n+                    getSequenceFileOutputKeyClass(job),\n+                    getSequenceFileOutputValueClass(job),\n+                    compressionType,\n+                    codec,\n+                    progress);\n+\n+    return new RecordWriter\u003cBytesWritable, BytesWritable\u003e() {\n+        \n+        private WritableValueBytes wvaluebytes \u003d new WritableValueBytes();\n+\n+        public void write(BytesWritable bkey, BytesWritable bvalue)\n+          throws IOException {\n+\n+          wvaluebytes.reset(bvalue);\n+          out.appendRaw(bkey.getBytes(), 0, bkey.getLength(), wvaluebytes);\n+          wvaluebytes.reset(null);\n+        }\n+\n+        public void close(Reporter reporter) throws IOException { \n+          out.close();\n+        }\n+\n+      };\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "             getRecordWriter(FileSystem ignored, JobConf job,\n                             String name, Progressable progress)\n    throws IOException {\n    // get the path of the temporary output file \n    Path file \u003d FileOutputFormat.getTaskOutputPath(job, name);\n    \n    FileSystem fs \u003d file.getFileSystem(job);\n    CompressionCodec codec \u003d null;\n    CompressionType compressionType \u003d CompressionType.NONE;\n    if (getCompressOutput(job)) {\n      // find the kind of compression to do\n      compressionType \u003d getOutputCompressionType(job);\n\n      // find the right codec\n      Class\u003c? extends CompressionCodec\u003e codecClass \u003d getOutputCompressorClass(job,\n\t  DefaultCodec.class);\n      codec \u003d ReflectionUtils.newInstance(codecClass, job);\n    }\n    final SequenceFile.Writer out \u003d \n      SequenceFile.createWriter(fs, job, file,\n                    getSequenceFileOutputKeyClass(job),\n                    getSequenceFileOutputValueClass(job),\n                    compressionType,\n                    codec,\n                    progress);\n\n    return new RecordWriter\u003cBytesWritable, BytesWritable\u003e() {\n        \n        private WritableValueBytes wvaluebytes \u003d new WritableValueBytes();\n\n        public void write(BytesWritable bkey, BytesWritable bvalue)\n          throws IOException {\n\n          wvaluebytes.reset(bvalue);\n          out.appendRaw(bkey.getBytes(), 0, bkey.getLength(), wvaluebytes);\n          wvaluebytes.reset(null);\n        }\n\n        public void close(Reporter reporter) throws IOException { \n          out.close();\n        }\n\n      };\n\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/SequenceFileAsBinaryOutputFormat.java"
    }
  }
}