{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ViewFileSystem.java",
  "functionName": "rename",
  "functionId": "rename___src-Path(modifiers-final)__dst-Path(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
  "functionStartLine": 592,
  "functionEndLine": 623,
  "numCommitsSeen": 61,
  "timeTaken": 2557,
  "changeHistory": [
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
    "6d983cca52f113118bf49fec527ffb3eb869290a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "f1c74df922058e88791ed6971bbb96b53f6770f1"
  ],
  "changeHistoryShort": {
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": "Ybodychange",
    "6d983cca52f113118bf49fec527ffb3eb869290a": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "f1c74df922058e88791ed6971bbb96b53f6770f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12077. Provide a multi-URI replication Inode for ViewFs. Contributed by Gera Shegalov\n",
      "commitDate": "05/09/17 11:51 PM",
      "commitName": "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "25/07/17 8:51 AM",
      "commitNameOld": "6d983cca52f113118bf49fec527ffb3eb869290a",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 42.62,
      "commitsBetweenForRepo": 373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,32 @@\n   public boolean rename(final Path src, final Path dst) throws IOException {\n     // passing resolveLastComponet as false to catch renaming a mount point to \n     // itself. We need to catch this as an internal operation and fail.\n     InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n       fsState.resolve(getUriPath(src), false); \n   \n     if (resSrc.isInternalDir()) {\n       throw readOnlyMountTable(\"rename\", src);\n     }\n       \n     InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n       fsState.resolve(getUriPath(dst), false);\n     if (resDst.isInternalDir()) {\n           throw readOnlyMountTable(\"rename\", dst);\n     }\n \n     URI srcUri \u003d resSrc.targetFileSystem.getUri();\n     URI dstUri \u003d resDst.targetFileSystem.getUri();\n \n     verifyRenameStrategy(srcUri, dstUri,\n         resSrc.targetFileSystem \u003d\u003d resDst.targetFileSystem, renameStrategy);\n \n-    ChRootedFileSystem srcFS \u003d (ChRootedFileSystem) resSrc.targetFileSystem;\n-    ChRootedFileSystem dstFS \u003d (ChRootedFileSystem) resDst.targetFileSystem;\n-    return srcFS.getMyFs().rename(srcFS.fullPath(resSrc.remainingPath),\n-        dstFS.fullPath(resDst.remainingPath));\n+    if (resSrc.targetFileSystem instanceof ChRootedFileSystem \u0026\u0026\n+        resDst.targetFileSystem instanceof ChRootedFileSystem) {\n+      ChRootedFileSystem srcFS \u003d (ChRootedFileSystem) resSrc.targetFileSystem;\n+      ChRootedFileSystem dstFS \u003d (ChRootedFileSystem) resDst.targetFileSystem;\n+      return srcFS.getMyFs().rename(srcFS.fullPath(resSrc.remainingPath),\n+          dstFS.fullPath(resDst.remainingPath));\n+    } else {\n+      return resSrc.targetFileSystem.rename(resSrc.remainingPath, resDst.remainingPath);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(final Path src, final Path dst) throws IOException {\n    // passing resolveLastComponet as false to catch renaming a mount point to \n    // itself. We need to catch this as an internal operation and fail.\n    InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n      fsState.resolve(getUriPath(src), false); \n  \n    if (resSrc.isInternalDir()) {\n      throw readOnlyMountTable(\"rename\", src);\n    }\n      \n    InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n      fsState.resolve(getUriPath(dst), false);\n    if (resDst.isInternalDir()) {\n          throw readOnlyMountTable(\"rename\", dst);\n    }\n\n    URI srcUri \u003d resSrc.targetFileSystem.getUri();\n    URI dstUri \u003d resDst.targetFileSystem.getUri();\n\n    verifyRenameStrategy(srcUri, dstUri,\n        resSrc.targetFileSystem \u003d\u003d resDst.targetFileSystem, renameStrategy);\n\n    if (resSrc.targetFileSystem instanceof ChRootedFileSystem \u0026\u0026\n        resDst.targetFileSystem instanceof ChRootedFileSystem) {\n      ChRootedFileSystem srcFS \u003d (ChRootedFileSystem) resSrc.targetFileSystem;\n      ChRootedFileSystem dstFS \u003d (ChRootedFileSystem) resDst.targetFileSystem;\n      return srcFS.getMyFs().rename(srcFS.fullPath(resSrc.remainingPath),\n          dstFS.fullPath(resDst.remainingPath));\n    } else {\n      return resSrc.targetFileSystem.rename(resSrc.remainingPath, resDst.remainingPath);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "6d983cca52f113118bf49fec527ffb3eb869290a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14455. ViewFileSystem#rename should support be supported within same nameservice with different mountpoints. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "25/07/17 8:51 AM",
      "commitName": "6d983cca52f113118bf49fec527ffb3eb869290a",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "17/05/17 1:12 PM",
      "commitNameOld": "eb7791b4743c593ac7d0f0d08962132723ffe3c6",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 68.82,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,27 @@\n   public boolean rename(final Path src, final Path dst) throws IOException {\n     // passing resolveLastComponet as false to catch renaming a mount point to \n     // itself. We need to catch this as an internal operation and fail.\n     InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n       fsState.resolve(getUriPath(src), false); \n   \n     if (resSrc.isInternalDir()) {\n       throw readOnlyMountTable(\"rename\", src);\n     }\n       \n     InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n       fsState.resolve(getUriPath(dst), false);\n     if (resDst.isInternalDir()) {\n           throw readOnlyMountTable(\"rename\", dst);\n     }\n-    /**\n-    // Alternate 1: renames within same file system - valid but we disallow\n-    // Alternate 2: (as described in next para - valid but we have disallowed it\n-    //\n-    // Note we compare the URIs. the URIs include the link targets. \n-    // hence we allow renames across mount links as long as the mount links\n-    // point to the same target.\n-    if (!resSrc.targetFileSystem.getUri().equals(\n-              resDst.targetFileSystem.getUri())) {\n-      throw new IOException(\"Renames across Mount points not supported\");\n-    }\n-    */\n-    \n-    //\n-    // Alternate 3 : renames ONLY within the the same mount links.\n-    //\n-    if (resSrc.targetFileSystem !\u003dresDst.targetFileSystem) {\n-      throw new IOException(\"Renames across Mount points not supported\");\n-    }\n-    return resSrc.targetFileSystem.rename(resSrc.remainingPath,\n-        resDst.remainingPath);\n+\n+    URI srcUri \u003d resSrc.targetFileSystem.getUri();\n+    URI dstUri \u003d resDst.targetFileSystem.getUri();\n+\n+    verifyRenameStrategy(srcUri, dstUri,\n+        resSrc.targetFileSystem \u003d\u003d resDst.targetFileSystem, renameStrategy);\n+\n+    ChRootedFileSystem srcFS \u003d (ChRootedFileSystem) resSrc.targetFileSystem;\n+    ChRootedFileSystem dstFS \u003d (ChRootedFileSystem) resDst.targetFileSystem;\n+    return srcFS.getMyFs().rename(srcFS.fullPath(resSrc.remainingPath),\n+        dstFS.fullPath(resDst.remainingPath));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(final Path src, final Path dst) throws IOException {\n    // passing resolveLastComponet as false to catch renaming a mount point to \n    // itself. We need to catch this as an internal operation and fail.\n    InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n      fsState.resolve(getUriPath(src), false); \n  \n    if (resSrc.isInternalDir()) {\n      throw readOnlyMountTable(\"rename\", src);\n    }\n      \n    InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n      fsState.resolve(getUriPath(dst), false);\n    if (resDst.isInternalDir()) {\n          throw readOnlyMountTable(\"rename\", dst);\n    }\n\n    URI srcUri \u003d resSrc.targetFileSystem.getUri();\n    URI dstUri \u003d resDst.targetFileSystem.getUri();\n\n    verifyRenameStrategy(srcUri, dstUri,\n        resSrc.targetFileSystem \u003d\u003d resDst.targetFileSystem, renameStrategy);\n\n    ChRootedFileSystem srcFS \u003d (ChRootedFileSystem) resSrc.targetFileSystem;\n    ChRootedFileSystem dstFS \u003d (ChRootedFileSystem) resDst.targetFileSystem;\n    return srcFS.getMyFs().rename(srcFS.fullPath(resSrc.remainingPath),\n        dstFS.fullPath(resDst.remainingPath));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean rename(final Path src, final Path dst) throws IOException {\n    // passing resolveLastComponet as false to catch renaming a mount point to \n    // itself. We need to catch this as an internal operation and fail.\n    InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n      fsState.resolve(getUriPath(src), false); \n  \n    if (resSrc.isInternalDir()) {\n      throw readOnlyMountTable(\"rename\", src);\n    }\n      \n    InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n      fsState.resolve(getUriPath(dst), false);\n    if (resDst.isInternalDir()) {\n          throw readOnlyMountTable(\"rename\", dst);\n    }\n    /**\n    // Alternate 1: renames within same file system - valid but we disallow\n    // Alternate 2: (as described in next para - valid but we have disallowed it\n    //\n    // Note we compare the URIs. the URIs include the link targets. \n    // hence we allow renames across mount links as long as the mount links\n    // point to the same target.\n    if (!resSrc.targetFileSystem.getUri().equals(\n              resDst.targetFileSystem.getUri())) {\n      throw new IOException(\"Renames across Mount points not supported\");\n    }\n    */\n    \n    //\n    // Alternate 3 : renames ONLY within the the same mount links.\n    //\n    if (resSrc.targetFileSystem !\u003dresDst.targetFileSystem) {\n      throw new IOException(\"Renames across Mount points not supported\");\n    }\n    return resSrc.targetFileSystem.rename(resSrc.remainingPath,\n        resDst.remainingPath);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean rename(final Path src, final Path dst) throws IOException {\n    // passing resolveLastComponet as false to catch renaming a mount point to \n    // itself. We need to catch this as an internal operation and fail.\n    InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n      fsState.resolve(getUriPath(src), false); \n  \n    if (resSrc.isInternalDir()) {\n      throw readOnlyMountTable(\"rename\", src);\n    }\n      \n    InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n      fsState.resolve(getUriPath(dst), false);\n    if (resDst.isInternalDir()) {\n          throw readOnlyMountTable(\"rename\", dst);\n    }\n    /**\n    // Alternate 1: renames within same file system - valid but we disallow\n    // Alternate 2: (as described in next para - valid but we have disallowed it\n    //\n    // Note we compare the URIs. the URIs include the link targets. \n    // hence we allow renames across mount links as long as the mount links\n    // point to the same target.\n    if (!resSrc.targetFileSystem.getUri().equals(\n              resDst.targetFileSystem.getUri())) {\n      throw new IOException(\"Renames across Mount points not supported\");\n    }\n    */\n    \n    //\n    // Alternate 3 : renames ONLY within the the same mount links.\n    //\n    if (resSrc.targetFileSystem !\u003dresDst.targetFileSystem) {\n      throw new IOException(\"Renames across Mount points not supported\");\n    }\n    return resSrc.targetFileSystem.rename(resSrc.remainingPath,\n        resDst.remainingPath);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean rename(final Path src, final Path dst) throws IOException {\n    // passing resolveLastComponet as false to catch renaming a mount point to \n    // itself. We need to catch this as an internal operation and fail.\n    InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n      fsState.resolve(getUriPath(src), false); \n  \n    if (resSrc.isInternalDir()) {\n      throw readOnlyMountTable(\"rename\", src);\n    }\n      \n    InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n      fsState.resolve(getUriPath(dst), false);\n    if (resDst.isInternalDir()) {\n          throw readOnlyMountTable(\"rename\", dst);\n    }\n    /**\n    // Alternate 1: renames within same file system - valid but we disallow\n    // Alternate 2: (as described in next para - valid but we have disallowed it\n    //\n    // Note we compare the URIs. the URIs include the link targets. \n    // hence we allow renames across mount links as long as the mount links\n    // point to the same target.\n    if (!resSrc.targetFileSystem.getUri().equals(\n              resDst.targetFileSystem.getUri())) {\n      throw new IOException(\"Renames across Mount points not supported\");\n    }\n    */\n    \n    //\n    // Alternate 3 : renames ONLY within the the same mount links.\n    //\n    if (resSrc.targetFileSystem !\u003dresDst.targetFileSystem) {\n      throw new IOException(\"Renames across Mount points not supported\");\n    }\n    return resSrc.targetFileSystem.rename(resSrc.remainingPath,\n        resDst.remainingPath);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java"
      }
    },
    "f1c74df922058e88791ed6971bbb96b53f6770f1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7257 Client side mount tables (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100026 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/11 7:11 PM",
      "commitName": "f1c74df922058e88791ed6971bbb96b53f6770f1",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,37 @@\n+  public boolean rename(final Path src, final Path dst) throws IOException {\n+    // passing resolveLastComponet as false to catch renaming a mount point to \n+    // itself. We need to catch this as an internal operation and fail.\n+    InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n+      fsState.resolve(getUriPath(src), false); \n+  \n+    if (resSrc.isInternalDir()) {\n+      throw readOnlyMountTable(\"rename\", src);\n+    }\n+      \n+    InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n+      fsState.resolve(getUriPath(dst), false);\n+    if (resDst.isInternalDir()) {\n+          throw readOnlyMountTable(\"rename\", dst);\n+    }\n+    /**\n+    // Alternate 1: renames within same file system - valid but we disallow\n+    // Alternate 2: (as described in next para - valid but we have disallowed it\n+    //\n+    // Note we compare the URIs. the URIs include the link targets. \n+    // hence we allow renames across mount links as long as the mount links\n+    // point to the same target.\n+    if (!resSrc.targetFileSystem.getUri().equals(\n+              resDst.targetFileSystem.getUri())) {\n+      throw new IOException(\"Renames across Mount points not supported\");\n+    }\n+    */\n+    \n+    //\n+    // Alternate 3 : renames ONLY within the the same mount links.\n+    //\n+    if (resSrc.targetFileSystem !\u003dresDst.targetFileSystem) {\n+      throw new IOException(\"Renames across Mount points not supported\");\n+    }\n+    return resSrc.targetFileSystem.rename(resSrc.remainingPath,\n+        resDst.remainingPath);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean rename(final Path src, final Path dst) throws IOException {\n    // passing resolveLastComponet as false to catch renaming a mount point to \n    // itself. We need to catch this as an internal operation and fail.\n    InodeTree.ResolveResult\u003cFileSystem\u003e resSrc \u003d \n      fsState.resolve(getUriPath(src), false); \n  \n    if (resSrc.isInternalDir()) {\n      throw readOnlyMountTable(\"rename\", src);\n    }\n      \n    InodeTree.ResolveResult\u003cFileSystem\u003e resDst \u003d \n      fsState.resolve(getUriPath(dst), false);\n    if (resDst.isInternalDir()) {\n          throw readOnlyMountTable(\"rename\", dst);\n    }\n    /**\n    // Alternate 1: renames within same file system - valid but we disallow\n    // Alternate 2: (as described in next para - valid but we have disallowed it\n    //\n    // Note we compare the URIs. the URIs include the link targets. \n    // hence we allow renames across mount links as long as the mount links\n    // point to the same target.\n    if (!resSrc.targetFileSystem.getUri().equals(\n              resDst.targetFileSystem.getUri())) {\n      throw new IOException(\"Renames across Mount points not supported\");\n    }\n    */\n    \n    //\n    // Alternate 3 : renames ONLY within the the same mount links.\n    //\n    if (resSrc.targetFileSystem !\u003dresDst.targetFileSystem) {\n      throw new IOException(\"Renames across Mount points not supported\");\n    }\n    return resSrc.targetFileSystem.rename(resSrc.remainingPath,\n        resDst.remainingPath);\n  }",
      "path": "src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java"
    }
  }
}