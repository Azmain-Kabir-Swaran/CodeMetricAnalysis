{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineWebServices.java",
  "functionName": "postEntities",
  "functionId": "postEntities___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__entities-TimelineEntities",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
  "functionStartLine": 229,
  "functionEndLine": 249,
  "numCommitsSeen": 29,
  "timeTaken": 2889,
  "changeHistory": [
    "01a641bc447c464b2830d58addd482f47dbd92ae",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "7f0724dddb75d24b91f67b581a08f89f1ecfadf0",
    "892ada8fb35d57a1120d548fdefb056824aa939f",
    "b3ea4aebff42131642af0393748dc751cb3fc31e",
    "f4eb6ddec9b96959f4c8264523722933429a2f2e",
    "84425fb435cb603fd8adcc2f76631c0244175310",
    "23b2e43f5d678517e33590d15dec73225b9c5682",
    "484faadffec97f8e454cf18b821f6ef12a27616c"
  ],
  "changeHistoryShort": {
    "01a641bc447c464b2830d58addd482f47dbd92ae": "Ybodychange",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": "Ybodychange",
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705": "Ybodychange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "7f0724dddb75d24b91f67b581a08f89f1ecfadf0": "Ybodychange",
    "892ada8fb35d57a1120d548fdefb056824aa939f": "Ybodychange",
    "b3ea4aebff42131642af0393748dc751cb3fc31e": "Ybodychange",
    "f4eb6ddec9b96959f4c8264523722933429a2f2e": "Ybodychange",
    "84425fb435cb603fd8adcc2f76631c0244175310": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
    "23b2e43f5d678517e33590d15dec73225b9c5682": "Ybodychange",
    "484faadffec97f8e454cf18b821f6ef12a27616c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "01a641bc447c464b2830d58addd482f47dbd92ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3456. Improve handling of incomplete TimelineEntities. (Varun Saxena via rohithsharmaks)\n",
      "commitDate": "07/12/15 1:46 AM",
      "commitName": "01a641bc447c464b2830d58addd482f47dbd92ae",
      "commitAuthor": "rohithsharmaks",
      "commitDateOld": "18/05/15 1:17 PM",
      "commitNameOld": "76afd28862c1f27011273659a82cd45903a77170",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 202.56,
      "commitsBetweenForRepo": 1571,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineEntities entities) {\n     init(res);\n     UserGroupInformation callerUGI \u003d getUser(req);\n     if (callerUGI \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n     try {\n       return timelineDataManager.postEntities(entities, callerUGI);\n+    } catch (BadRequestException bre) {\n+      throw bre;\n     } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUGI \u003d getUser(req);\n    if (callerUGI \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n    try {\n      return timelineDataManager.postEntities(entities, callerUGI);\n    } catch (BadRequestException bre) {\n      throw bre;\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/14 12:21 AM",
      "commitName": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/07/14 9:33 PM",
      "commitNameOld": "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.12,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,19 @@\n   public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineEntities entities) {\n     init(res);\n-    if (entities \u003d\u003d null) {\n-      return new TimelinePutResponse();\n-    }\n     UserGroupInformation callerUGI \u003d getUser(req);\n     if (callerUGI \u003d\u003d null) {\n       String msg \u003d \"The owner of the posted timeline entities is not set\";\n       LOG.error(msg);\n       throw new ForbiddenException(msg);\n     }\n     try {\n-      List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n-      TimelineEntities entitiesToPut \u003d new TimelineEntities();\n-      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n-          new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n-      for (TimelineEntity entity : entities.getEntities()) {\n-        EntityIdentifier entityID \u003d\n-            new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n-\n-        // check if there is existing entity\n-        TimelineEntity existingEntity \u003d null;\n-        try {\n-          existingEntity \u003d\n-              store.getEntity(entityID.getId(), entityID.getType(),\n-                  EnumSet.of(Field.PRIMARY_FILTERS));\n-          if (existingEntity !\u003d null\n-              \u0026\u0026 !timelineACLsManager.checkAccess(callerUGI, existingEntity)) {\n-            throw new YarnException(\"The timeline entity \" + entityID\n-                + \" was not put by \" + callerUGI + \" before\");\n-          }\n-        } catch (Exception e) {\n-          // Skip the entity which already exists and was put by others\n-          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n-              + e.getMessage());\n-          TimelinePutResponse.TimelinePutError error \u003d\n-              new TimelinePutResponse.TimelinePutError();\n-          error.setEntityId(entityID.getId());\n-          error.setEntityType(entityID.getType());\n-          error.setErrorCode(\n-              TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n-          errors.add(error);\n-          continue;\n-        }\n-\n-        // inject owner information for the access check if this is the first\n-        // time to post the entity, in case it\u0027s the admin who is updating\n-        // the timeline data.\n-        try {\n-          if (existingEntity \u003d\u003d null) {\n-            injectOwnerInfo(entity, callerUGI.getShortUserName());\n-          }\n-        } catch (YarnException e) {\n-          // Skip the entity which messes up the primary filter and record the\n-          // error\n-          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n-              + e.getMessage());\n-          TimelinePutResponse.TimelinePutError error \u003d\n-              new TimelinePutResponse.TimelinePutError();\n-          error.setEntityId(entityID.getId());\n-          error.setEntityType(entityID.getType());\n-          error.setErrorCode(\n-              TimelinePutResponse.TimelinePutError.SYSTEM_FILTER_CONFLICT);\n-          errors.add(error);\n-          continue;\n-        }\n-\n-        entityIDs.add(entityID);\n-        entitiesToPut.addEntity(entity);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n-              + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n-        }\n-      }\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n-      }\n-      TimelinePutResponse response \u003d  store.put(entitiesToPut);\n-      // add the errors of timeline system filter key conflict\n-      response.addErrors(errors);\n-      return response;\n-    } catch (IOException e) {\n+      return timelineDataManager.postEntities(entities, callerUGI);\n+    } catch (Exception e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    UserGroupInformation callerUGI \u003d getUser(req);\n    if (callerUGI \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n    try {\n      return timelineDataManager.postEntities(entities, callerUGI);\n    } catch (Exception e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2228. Augmented TimelineServer to load pseudo authentication filter when authentication \u003d simple. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 9:33 PM",
      "commitName": "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/06/14 10:47 AM",
      "commitNameOld": "d7f5d76869391df15107a6c89ba09d741f990182",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 38.45,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,90 @@\n   public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n       return new TimelinePutResponse();\n     }\n     UserGroupInformation callerUGI \u003d getUser(req);\n+    if (callerUGI \u003d\u003d null) {\n+      String msg \u003d \"The owner of the posted timeline entities is not set\";\n+      LOG.error(msg);\n+      throw new ForbiddenException(msg);\n+    }\n     try {\n       List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n       TimelineEntities entitiesToPut \u003d new TimelineEntities();\n       List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n           new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n       for (TimelineEntity entity : entities.getEntities()) {\n         EntityIdentifier entityID \u003d\n             new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n \n         // check if there is existing entity\n         TimelineEntity existingEntity \u003d null;\n         try {\n           existingEntity \u003d\n               store.getEntity(entityID.getId(), entityID.getType(),\n                   EnumSet.of(Field.PRIMARY_FILTERS));\n           if (existingEntity !\u003d null\n               \u0026\u0026 !timelineACLsManager.checkAccess(callerUGI, existingEntity)) {\n             throw new YarnException(\"The timeline entity \" + entityID\n                 + \" was not put by \" + callerUGI + \" before\");\n           }\n         } catch (Exception e) {\n           // Skip the entity which already exists and was put by others\n           LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n               + e.getMessage());\n           TimelinePutResponse.TimelinePutError error \u003d\n               new TimelinePutResponse.TimelinePutError();\n           error.setEntityId(entityID.getId());\n           error.setEntityType(entityID.getType());\n           error.setErrorCode(\n               TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n           errors.add(error);\n           continue;\n         }\n \n         // inject owner information for the access check if this is the first\n         // time to post the entity, in case it\u0027s the admin who is updating\n         // the timeline data.\n         try {\n           if (existingEntity \u003d\u003d null) {\n-            injectOwnerInfo(entity,\n-                callerUGI \u003d\u003d null ? \"\" : callerUGI.getShortUserName());\n+            injectOwnerInfo(entity, callerUGI.getShortUserName());\n           }\n         } catch (YarnException e) {\n           // Skip the entity which messes up the primary filter and record the\n           // error\n           LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n               + e.getMessage());\n           TimelinePutResponse.TimelinePutError error \u003d\n               new TimelinePutResponse.TimelinePutError();\n           error.setEntityId(entityID.getId());\n           error.setEntityType(entityID.getType());\n           error.setErrorCode(\n               TimelinePutResponse.TimelinePutError.SYSTEM_FILTER_CONFLICT);\n           errors.add(error);\n           continue;\n         }\n \n         entityIDs.add(entityID);\n         entitiesToPut.addEntity(entity);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n               + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n         }\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n       }\n       TimelinePutResponse response \u003d  store.put(entitiesToPut);\n       // add the errors of timeline system filter key conflict\n       response.addErrors(errors);\n       return response;\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    UserGroupInformation callerUGI \u003d getUser(req);\n    if (callerUGI \u003d\u003d null) {\n      String msg \u003d \"The owner of the posted timeline entities is not set\";\n      LOG.error(msg);\n      throw new ForbiddenException(msg);\n    }\n    try {\n      List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n      TimelineEntities entitiesToPut \u003d new TimelineEntities();\n      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n          new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n      for (TimelineEntity entity : entities.getEntities()) {\n        EntityIdentifier entityID \u003d\n            new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n\n        // check if there is existing entity\n        TimelineEntity existingEntity \u003d null;\n        try {\n          existingEntity \u003d\n              store.getEntity(entityID.getId(), entityID.getType(),\n                  EnumSet.of(Field.PRIMARY_FILTERS));\n          if (existingEntity !\u003d null\n              \u0026\u0026 !timelineACLsManager.checkAccess(callerUGI, existingEntity)) {\n            throw new YarnException(\"The timeline entity \" + entityID\n                + \" was not put by \" + callerUGI + \" before\");\n          }\n        } catch (Exception e) {\n          // Skip the entity which already exists and was put by others\n          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n              + e.getMessage());\n          TimelinePutResponse.TimelinePutError error \u003d\n              new TimelinePutResponse.TimelinePutError();\n          error.setEntityId(entityID.getId());\n          error.setEntityType(entityID.getType());\n          error.setErrorCode(\n              TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n          errors.add(error);\n          continue;\n        }\n\n        // inject owner information for the access check if this is the first\n        // time to post the entity, in case it\u0027s the admin who is updating\n        // the timeline data.\n        try {\n          if (existingEntity \u003d\u003d null) {\n            injectOwnerInfo(entity, callerUGI.getShortUserName());\n          }\n        } catch (YarnException e) {\n          // Skip the entity which messes up the primary filter and record the\n          // error\n          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n              + e.getMessage());\n          TimelinePutResponse.TimelinePutError error \u003d\n              new TimelinePutResponse.TimelinePutError();\n          error.setEntityId(entityID.getId());\n          error.setEntityType(entityID.getType());\n          error.setErrorCode(\n              TimelinePutResponse.TimelinePutError.SYSTEM_FILTER_CONFLICT);\n          errors.add(error);\n          continue;\n        }\n\n        entityIDs.add(entityID);\n        entitiesToPut.addEntity(entity);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n              + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n      }\n      TimelinePutResponse response \u003d  store.put(entitiesToPut);\n      // add the errors of timeline system filter key conflict\n      response.addErrors(errors);\n      return response;\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    UserGroupInformation callerUGI \u003d getUser(req);\n    try {\n      List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n      TimelineEntities entitiesToPut \u003d new TimelineEntities();\n      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n          new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n      for (TimelineEntity entity : entities.getEntities()) {\n        EntityIdentifier entityID \u003d\n            new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n\n        // check if there is existing entity\n        TimelineEntity existingEntity \u003d null;\n        try {\n          existingEntity \u003d\n              store.getEntity(entityID.getId(), entityID.getType(),\n                  EnumSet.of(Field.PRIMARY_FILTERS));\n          if (existingEntity !\u003d null\n              \u0026\u0026 !timelineACLsManager.checkAccess(callerUGI, existingEntity)) {\n            throw new YarnException(\"The timeline entity \" + entityID\n                + \" was not put by \" + callerUGI + \" before\");\n          }\n        } catch (Exception e) {\n          // Skip the entity which already exists and was put by others\n          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n              + e.getMessage());\n          TimelinePutResponse.TimelinePutError error \u003d\n              new TimelinePutResponse.TimelinePutError();\n          error.setEntityId(entityID.getId());\n          error.setEntityType(entityID.getType());\n          error.setErrorCode(\n              TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n          errors.add(error);\n          continue;\n        }\n\n        // inject owner information for the access check if this is the first\n        // time to post the entity, in case it\u0027s the admin who is updating\n        // the timeline data.\n        try {\n          if (existingEntity \u003d\u003d null) {\n            injectOwnerInfo(entity,\n                callerUGI \u003d\u003d null ? \"\" : callerUGI.getShortUserName());\n          }\n        } catch (YarnException e) {\n          // Skip the entity which messes up the primary filter and record the\n          // error\n          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n              + e.getMessage());\n          TimelinePutResponse.TimelinePutError error \u003d\n              new TimelinePutResponse.TimelinePutError();\n          error.setEntityId(entityID.getId());\n          error.setEntityType(entityID.getType());\n          error.setErrorCode(\n              TimelinePutResponse.TimelinePutError.SYSTEM_FILTER_CONFLICT);\n          errors.add(error);\n          continue;\n        }\n\n        entityIDs.add(entityID);\n        entitiesToPut.addEntity(entity);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n              + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n      }\n      TimelinePutResponse response \u003d  store.put(entitiesToPut);\n      // add the errors of timeline system filter key conflict\n      response.addErrors(errors);\n      return response;\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java"
      }
    },
    "7f0724dddb75d24b91f67b581a08f89f1ecfadf0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2059. Added admin ACLs support to Timeline Server. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597207 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 3:40 PM",
      "commitName": "7f0724dddb75d24b91f67b581a08f89f1ecfadf0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/05/14 2:19 PM",
      "commitNameOld": "892ada8fb35d57a1120d548fdefb056824aa939f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,86 @@\n   public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n       return new TimelinePutResponse();\n     }\n     UserGroupInformation callerUGI \u003d getUser(req);\n     try {\n       List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n       TimelineEntities entitiesToPut \u003d new TimelineEntities();\n       List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n           new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n       for (TimelineEntity entity : entities.getEntities()) {\n         EntityIdentifier entityID \u003d\n             new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n \n         // check if there is existing entity\n+        TimelineEntity existingEntity \u003d null;\n         try {\n-          TimelineEntity existingEntity \u003d\n+          existingEntity \u003d\n               store.getEntity(entityID.getId(), entityID.getType(),\n                   EnumSet.of(Field.PRIMARY_FILTERS));\n           if (existingEntity !\u003d null\n               \u0026\u0026 !timelineACLsManager.checkAccess(callerUGI, existingEntity)) {\n             throw new YarnException(\"The timeline entity \" + entityID\n                 + \" was not put by \" + callerUGI + \" before\");\n           }\n         } catch (Exception e) {\n           // Skip the entity which already exists and was put by others\n           LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n               + e.getMessage());\n           TimelinePutResponse.TimelinePutError error \u003d\n               new TimelinePutResponse.TimelinePutError();\n           error.setEntityId(entityID.getId());\n           error.setEntityType(entityID.getType());\n           error.setErrorCode(\n               TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n           errors.add(error);\n           continue;\n         }\n \n-        // inject owner information for the access check\n+        // inject owner information for the access check if this is the first\n+        // time to post the entity, in case it\u0027s the admin who is updating\n+        // the timeline data.\n         try {\n-          injectOwnerInfo(entity,\n-              callerUGI \u003d\u003d null ? \"\" : callerUGI.getShortUserName());\n+          if (existingEntity \u003d\u003d null) {\n+            injectOwnerInfo(entity,\n+                callerUGI \u003d\u003d null ? \"\" : callerUGI.getShortUserName());\n+          }\n         } catch (YarnException e) {\n           // Skip the entity which messes up the primary filter and record the\n           // error\n           LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n               + e.getMessage());\n           TimelinePutResponse.TimelinePutError error \u003d\n               new TimelinePutResponse.TimelinePutError();\n           error.setEntityId(entityID.getId());\n           error.setEntityType(entityID.getType());\n           error.setErrorCode(\n               TimelinePutResponse.TimelinePutError.SYSTEM_FILTER_CONFLICT);\n           errors.add(error);\n           continue;\n         }\n \n         entityIDs.add(entityID);\n         entitiesToPut.addEntity(entity);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n               + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n         }\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n       }\n       TimelinePutResponse response \u003d  store.put(entitiesToPut);\n       // add the errors of timeline system filter key conflict\n       response.addErrors(errors);\n       return response;\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    UserGroupInformation callerUGI \u003d getUser(req);\n    try {\n      List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n      TimelineEntities entitiesToPut \u003d new TimelineEntities();\n      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n          new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n      for (TimelineEntity entity : entities.getEntities()) {\n        EntityIdentifier entityID \u003d\n            new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n\n        // check if there is existing entity\n        TimelineEntity existingEntity \u003d null;\n        try {\n          existingEntity \u003d\n              store.getEntity(entityID.getId(), entityID.getType(),\n                  EnumSet.of(Field.PRIMARY_FILTERS));\n          if (existingEntity !\u003d null\n              \u0026\u0026 !timelineACLsManager.checkAccess(callerUGI, existingEntity)) {\n            throw new YarnException(\"The timeline entity \" + entityID\n                + \" was not put by \" + callerUGI + \" before\");\n          }\n        } catch (Exception e) {\n          // Skip the entity which already exists and was put by others\n          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n              + e.getMessage());\n          TimelinePutResponse.TimelinePutError error \u003d\n              new TimelinePutResponse.TimelinePutError();\n          error.setEntityId(entityID.getId());\n          error.setEntityType(entityID.getType());\n          error.setErrorCode(\n              TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n          errors.add(error);\n          continue;\n        }\n\n        // inject owner information for the access check if this is the first\n        // time to post the entity, in case it\u0027s the admin who is updating\n        // the timeline data.\n        try {\n          if (existingEntity \u003d\u003d null) {\n            injectOwnerInfo(entity,\n                callerUGI \u003d\u003d null ? \"\" : callerUGI.getShortUserName());\n          }\n        } catch (YarnException e) {\n          // Skip the entity which messes up the primary filter and record the\n          // error\n          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n              + e.getMessage());\n          TimelinePutResponse.TimelinePutError error \u003d\n              new TimelinePutResponse.TimelinePutError();\n          error.setEntityId(entityID.getId());\n          error.setEntityType(entityID.getType());\n          error.setErrorCode(\n              TimelinePutResponse.TimelinePutError.SYSTEM_FILTER_CONFLICT);\n          errors.add(error);\n          continue;\n        }\n\n        entityIDs.add(entityID);\n        entitiesToPut.addEntity(entity);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n              + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n      }\n      TimelinePutResponse response \u003d  store.put(entitiesToPut);\n      // add the errors of timeline system filter key conflict\n      response.addErrors(errors);\n      return response;\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "892ada8fb35d57a1120d548fdefb056824aa939f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1937. Added owner-only ACLs support for Timeline Client and server. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597186 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 2:19 PM",
      "commitName": "892ada8fb35d57a1120d548fdefb056824aa939f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/03/14 11:14 AM",
      "commitNameOld": "0f1eda6bbf895a1239b25cdf8b17fabd3759e806",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 60.13,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,81 @@\n   public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n       return new TimelinePutResponse();\n     }\n+    UserGroupInformation callerUGI \u003d getUser(req);\n     try {\n       List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n+      TimelineEntities entitiesToPut \u003d new TimelineEntities();\n+      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n+          new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n       for (TimelineEntity entity : entities.getEntities()) {\n         EntityIdentifier entityID \u003d\n             new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n+\n+        // check if there is existing entity\n+        try {\n+          TimelineEntity existingEntity \u003d\n+              store.getEntity(entityID.getId(), entityID.getType(),\n+                  EnumSet.of(Field.PRIMARY_FILTERS));\n+          if (existingEntity !\u003d null\n+              \u0026\u0026 !timelineACLsManager.checkAccess(callerUGI, existingEntity)) {\n+            throw new YarnException(\"The timeline entity \" + entityID\n+                + \" was not put by \" + callerUGI + \" before\");\n+          }\n+        } catch (Exception e) {\n+          // Skip the entity which already exists and was put by others\n+          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n+              + e.getMessage());\n+          TimelinePutResponse.TimelinePutError error \u003d\n+              new TimelinePutResponse.TimelinePutError();\n+          error.setEntityId(entityID.getId());\n+          error.setEntityType(entityID.getType());\n+          error.setErrorCode(\n+              TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n+          errors.add(error);\n+          continue;\n+        }\n+\n+        // inject owner information for the access check\n+        try {\n+          injectOwnerInfo(entity,\n+              callerUGI \u003d\u003d null ? \"\" : callerUGI.getShortUserName());\n+        } catch (YarnException e) {\n+          // Skip the entity which messes up the primary filter and record the\n+          // error\n+          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n+              + e.getMessage());\n+          TimelinePutResponse.TimelinePutError error \u003d\n+              new TimelinePutResponse.TimelinePutError();\n+          error.setEntityId(entityID.getId());\n+          error.setEntityType(entityID.getType());\n+          error.setErrorCode(\n+              TimelinePutResponse.TimelinePutError.SYSTEM_FILTER_CONFLICT);\n+          errors.add(error);\n+          continue;\n+        }\n+\n         entityIDs.add(entityID);\n+        entitiesToPut.addEntity(entity);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n               + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n         }\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n       }\n-      return store.put(entities);\n+      TimelinePutResponse response \u003d  store.put(entitiesToPut);\n+      // add the errors of timeline system filter key conflict\n+      response.addErrors(errors);\n+      return response;\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    UserGroupInformation callerUGI \u003d getUser(req);\n    try {\n      List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n      TimelineEntities entitiesToPut \u003d new TimelineEntities();\n      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d\n          new ArrayList\u003cTimelinePutResponse.TimelinePutError\u003e();\n      for (TimelineEntity entity : entities.getEntities()) {\n        EntityIdentifier entityID \u003d\n            new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n\n        // check if there is existing entity\n        try {\n          TimelineEntity existingEntity \u003d\n              store.getEntity(entityID.getId(), entityID.getType(),\n                  EnumSet.of(Field.PRIMARY_FILTERS));\n          if (existingEntity !\u003d null\n              \u0026\u0026 !timelineACLsManager.checkAccess(callerUGI, existingEntity)) {\n            throw new YarnException(\"The timeline entity \" + entityID\n                + \" was not put by \" + callerUGI + \" before\");\n          }\n        } catch (Exception e) {\n          // Skip the entity which already exists and was put by others\n          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n              + e.getMessage());\n          TimelinePutResponse.TimelinePutError error \u003d\n              new TimelinePutResponse.TimelinePutError();\n          error.setEntityId(entityID.getId());\n          error.setEntityType(entityID.getType());\n          error.setErrorCode(\n              TimelinePutResponse.TimelinePutError.ACCESS_DENIED);\n          errors.add(error);\n          continue;\n        }\n\n        // inject owner information for the access check\n        try {\n          injectOwnerInfo(entity,\n              callerUGI \u003d\u003d null ? \"\" : callerUGI.getShortUserName());\n        } catch (YarnException e) {\n          // Skip the entity which messes up the primary filter and record the\n          // error\n          LOG.warn(\"Skip the timeline entity: \" + entityID + \", because \"\n              + e.getMessage());\n          TimelinePutResponse.TimelinePutError error \u003d\n              new TimelinePutResponse.TimelinePutError();\n          error.setEntityId(entityID.getId());\n          error.setEntityType(entityID.getType());\n          error.setErrorCode(\n              TimelinePutResponse.TimelinePutError.SYSTEM_FILTER_CONFLICT);\n          errors.add(error);\n          continue;\n        }\n\n        entityIDs.add(entityID);\n        entitiesToPut.addEntity(entity);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n              + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n      }\n      TimelinePutResponse response \u003d  store.put(entitiesToPut);\n      // add the errors of timeline system filter key conflict\n      response.addErrors(errors);\n      return response;\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "b3ea4aebff42131642af0393748dc751cb3fc31e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1717. Enabled periodically discarding old data in LeveldbTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577693 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 1:35 PM",
      "commitName": "b3ea4aebff42131642af0393748dc751cb3fc31e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "06/03/14 7:52 PM",
      "commitNameOld": "f4eb6ddec9b96959f4c8264523722933429a2f2e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.7,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n       return new TimelinePutResponse();\n     }\n     try {\n       List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n       for (TimelineEntity entity : entities.getEntities()) {\n         EntityIdentifier entityID \u003d\n             new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n         entityIDs.add(entityID);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n               + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n         }\n       }\n-      LOG.info(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n+      }\n       return store.put(entities);\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    try {\n      List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n      for (TimelineEntity entity : entities.getEntities()) {\n        EntityIdentifier entityID \u003d\n            new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n        entityIDs.add(entityID);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n              + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n      }\n      return store.put(entities);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "f4eb6ddec9b96959f4c8264523722933429a2f2e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1780. Improved logging in the Timeline client and server. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575141 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/14 7:52 PM",
      "commitName": "f4eb6ddec9b96959f4c8264523722933429a2f2e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/03/14 4:20 PM",
      "commitNameOld": "33714d9ad66622f545a030a7d3df94f4b0e73794",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,27 @@\n   public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n       return new TimelinePutResponse();\n     }\n     try {\n+      List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n+      for (TimelineEntity entity : entities.getEntities()) {\n+        EntityIdentifier entityID \u003d\n+            new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n+        entityIDs.add(entityID);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n+              + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n+        }\n+      }\n+      LOG.info(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n       return store.put(entities);\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    try {\n      List\u003cEntityIdentifier\u003e entityIDs \u003d new ArrayList\u003cEntityIdentifier\u003e();\n      for (TimelineEntity entity : entities.getEntities()) {\n        EntityIdentifier entityID \u003d\n            new EntityIdentifier(entity.getEntityId(), entity.getEntityType());\n        entityIDs.add(entityID);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing the entity \" + entityID + \", JSON-style content: \"\n              + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n        }\n      }\n      LOG.info(\"Storing entities: \" + CSV_JOINER.join(entityIDs));\n      return store.put(entities);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "84425fb435cb603fd8adcc2f76631c0244175310": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:55 PM",
      "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public ATSPutErrors postEntities(\n+  public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      ATSEntities entities) {\n+      TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n-      return new ATSPutErrors();\n+      return new TimelinePutResponse();\n     }\n     try {\n       return store.put(entities);\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    try {\n      return store.put(entities);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public ATSPutErrors postEntities(\n+  public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      ATSEntities entities) {\n+      TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n-      return new ATSPutErrors();\n+      return new TimelinePutResponse();\n     }\n     try {\n       return store.put(entities);\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    try {\n      return store.put(entities);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {
            "oldValue": "ATSPutErrors",
            "newValue": "TimelinePutResponse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public ATSPutErrors postEntities(\n+  public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      ATSEntities entities) {\n+      TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n-      return new ATSPutErrors();\n+      return new TimelinePutResponse();\n     }\n     try {\n       return store.put(entities);\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    try {\n      return store.put(entities);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public ATSPutErrors postEntities(\n+  public TimelinePutResponse postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      ATSEntities entities) {\n+      TimelineEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n-      return new ATSPutErrors();\n+      return new TimelinePutResponse();\n     }\n     try {\n       return store.put(entities);\n     } catch (IOException e) {\n       LOG.error(\"Error putting entities\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelinePutResponse postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      TimelineEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new TimelinePutResponse();\n    }\n    try {\n      return store.put(entities);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), entities-ATSEntities]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), entities-TimelineEntities]"
          }
        }
      ]
    },
    "23b2e43f5d678517e33590d15dec73225b9c5682": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1635. Implemented a Leveldb based ApplicationTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1565868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 6:15 PM",
      "commitName": "23b2e43f5d678517e33590d15dec73225b9c5682",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "05/02/14 9:02 AM",
      "commitNameOld": "484faadffec97f8e454cf18b821f6ef12a27616c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.38,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,16 @@\n   public ATSPutErrors postEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       ATSEntities entities) {\n     init(res);\n     if (entities \u003d\u003d null) {\n       return new ATSPutErrors();\n     }\n-    return store.put(entities);\n+    try {\n+      return store.put(entities);\n+    } catch (IOException e) {\n+      LOG.error(\"Error putting entities\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSPutErrors postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      ATSEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new ATSPutErrors();\n    }\n    try {\n      return store.put(entities);\n    } catch (IOException e) {\n      LOG.error(\"Error putting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java",
      "extendedDetails": {}
    },
    "484faadffec97f8e454cf18b821f6ef12a27616c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1636. Augmented Application-history server\u0027s web-services to also expose new APIs for retrieving and storing timeline information. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/14 9:02 AM",
      "commitName": "484faadffec97f8e454cf18b821f6ef12a27616c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,10 @@\n+  public ATSPutErrors postEntities(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      ATSEntities entities) {\n+    init(res);\n+    if (entities \u003d\u003d null) {\n+      return new ATSPutErrors();\n+    }\n+    return store.put(entities);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSPutErrors postEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      ATSEntities entities) {\n    init(res);\n    if (entities \u003d\u003d null) {\n      return new ATSPutErrors();\n    }\n    return store.put(entities);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java"
    }
  }
}