{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MapFile.java",
  "functionName": "seekInternal",
  "functionId": "seekInternal___key-WritableComparable__before-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
  "functionStartLine": 592,
  "functionEndLine": 651,
  "numCommitsSeen": 18,
  "timeTaken": 1087,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized int seekInternal(WritableComparable key,\n        final boolean before)\n      throws IOException {\n      readIndex();                                // make sure index is read\n\n      if (seekIndex !\u003d -1                         // seeked before\n          \u0026\u0026 seekIndex+1 \u003c count           \n          \u0026\u0026 comparator.compare(key, keys[seekIndex+1])\u003c0 // before next indexed\n          \u0026\u0026 comparator.compare(key, nextKey)\n          \u003e\u003d 0) {                                 // but after last seeked\n        // do nothing\n      } else {\n        seekIndex \u003d binarySearch(key);\n        if (seekIndex \u003c 0)                        // decode insertion point\n          seekIndex \u003d -seekIndex-2;\n\n        if (seekIndex \u003d\u003d -1)                      // belongs before first entry\n          seekPosition \u003d firstPosition;           // use beginning of file\n        else\n          seekPosition \u003d positions[seekIndex];    // else use index\n      }\n      data.seek(seekPosition);\n      \n      if (nextKey \u003d\u003d null)\n        nextKey \u003d comparator.newKey();\n     \n      // If we\u0027re looking for the key before, we need to keep track\n      // of the position we got the current key as well as the position\n      // of the key before it.\n      long prevPosition \u003d -1;\n      long curPosition \u003d seekPosition;\n\n      while (data.next(nextKey)) {\n        int c \u003d comparator.compare(key, nextKey);\n        if (c \u003c\u003d 0) {                             // at or beyond desired\n          if (before \u0026\u0026 c !\u003d 0) {\n            if (prevPosition \u003d\u003d -1) {\n              // We\u0027re on the first record of this index block\n              // and we\u0027ve already passed the search key. Therefore\n              // we must be at the beginning of the file, so seek\n              // to the beginning of this block and return c\n              data.seek(curPosition);\n            } else {\n              // We have a previous record to back up to\n              data.seek(prevPosition);\n              data.next(nextKey);\n              // now that we\u0027ve rewound, the search key must be greater than this key\n              return 1;\n            }\n          }\n          return c;\n        }\n        if (before) {\n          prevPosition \u003d curPosition;\n          curPosition \u003d data.getPosition();\n        }\n      }\n\n      return 1;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized int seekInternal(WritableComparable key,\n        final boolean before)\n      throws IOException {\n      readIndex();                                // make sure index is read\n\n      if (seekIndex !\u003d -1                         // seeked before\n          \u0026\u0026 seekIndex+1 \u003c count           \n          \u0026\u0026 comparator.compare(key, keys[seekIndex+1])\u003c0 // before next indexed\n          \u0026\u0026 comparator.compare(key, nextKey)\n          \u003e\u003d 0) {                                 // but after last seeked\n        // do nothing\n      } else {\n        seekIndex \u003d binarySearch(key);\n        if (seekIndex \u003c 0)                        // decode insertion point\n          seekIndex \u003d -seekIndex-2;\n\n        if (seekIndex \u003d\u003d -1)                      // belongs before first entry\n          seekPosition \u003d firstPosition;           // use beginning of file\n        else\n          seekPosition \u003d positions[seekIndex];    // else use index\n      }\n      data.seek(seekPosition);\n      \n      if (nextKey \u003d\u003d null)\n        nextKey \u003d comparator.newKey();\n     \n      // If we\u0027re looking for the key before, we need to keep track\n      // of the position we got the current key as well as the position\n      // of the key before it.\n      long prevPosition \u003d -1;\n      long curPosition \u003d seekPosition;\n\n      while (data.next(nextKey)) {\n        int c \u003d comparator.compare(key, nextKey);\n        if (c \u003c\u003d 0) {                             // at or beyond desired\n          if (before \u0026\u0026 c !\u003d 0) {\n            if (prevPosition \u003d\u003d -1) {\n              // We\u0027re on the first record of this index block\n              // and we\u0027ve already passed the search key. Therefore\n              // we must be at the beginning of the file, so seek\n              // to the beginning of this block and return c\n              data.seek(curPosition);\n            } else {\n              // We have a previous record to back up to\n              data.seek(prevPosition);\n              data.next(nextKey);\n              // now that we\u0027ve rewound, the search key must be greater than this key\n              return 1;\n            }\n          }\n          return c;\n        }\n        if (before) {\n          prevPosition \u003d curPosition;\n          curPosition \u003d data.getPosition();\n        }\n      }\n\n      return 1;\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized int seekInternal(WritableComparable key,\n        final boolean before)\n      throws IOException {\n      readIndex();                                // make sure index is read\n\n      if (seekIndex !\u003d -1                         // seeked before\n          \u0026\u0026 seekIndex+1 \u003c count           \n          \u0026\u0026 comparator.compare(key, keys[seekIndex+1])\u003c0 // before next indexed\n          \u0026\u0026 comparator.compare(key, nextKey)\n          \u003e\u003d 0) {                                 // but after last seeked\n        // do nothing\n      } else {\n        seekIndex \u003d binarySearch(key);\n        if (seekIndex \u003c 0)                        // decode insertion point\n          seekIndex \u003d -seekIndex-2;\n\n        if (seekIndex \u003d\u003d -1)                      // belongs before first entry\n          seekPosition \u003d firstPosition;           // use beginning of file\n        else\n          seekPosition \u003d positions[seekIndex];    // else use index\n      }\n      data.seek(seekPosition);\n      \n      if (nextKey \u003d\u003d null)\n        nextKey \u003d comparator.newKey();\n     \n      // If we\u0027re looking for the key before, we need to keep track\n      // of the position we got the current key as well as the position\n      // of the key before it.\n      long prevPosition \u003d -1;\n      long curPosition \u003d seekPosition;\n\n      while (data.next(nextKey)) {\n        int c \u003d comparator.compare(key, nextKey);\n        if (c \u003c\u003d 0) {                             // at or beyond desired\n          if (before \u0026\u0026 c !\u003d 0) {\n            if (prevPosition \u003d\u003d -1) {\n              // We\u0027re on the first record of this index block\n              // and we\u0027ve already passed the search key. Therefore\n              // we must be at the beginning of the file, so seek\n              // to the beginning of this block and return c\n              data.seek(curPosition);\n            } else {\n              // We have a previous record to back up to\n              data.seek(prevPosition);\n              data.next(nextKey);\n              // now that we\u0027ve rewound, the search key must be greater than this key\n              return 1;\n            }\n          }\n          return c;\n        }\n        if (before) {\n          prevPosition \u003d curPosition;\n          curPosition \u003d data.getPosition();\n        }\n      }\n\n      return 1;\n    }",
      "path": "common/src/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "common/src/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,60 @@\n+    private synchronized int seekInternal(WritableComparable key,\n+        final boolean before)\n+      throws IOException {\n+      readIndex();                                // make sure index is read\n+\n+      if (seekIndex !\u003d -1                         // seeked before\n+          \u0026\u0026 seekIndex+1 \u003c count           \n+          \u0026\u0026 comparator.compare(key, keys[seekIndex+1])\u003c0 // before next indexed\n+          \u0026\u0026 comparator.compare(key, nextKey)\n+          \u003e\u003d 0) {                                 // but after last seeked\n+        // do nothing\n+      } else {\n+        seekIndex \u003d binarySearch(key);\n+        if (seekIndex \u003c 0)                        // decode insertion point\n+          seekIndex \u003d -seekIndex-2;\n+\n+        if (seekIndex \u003d\u003d -1)                      // belongs before first entry\n+          seekPosition \u003d firstPosition;           // use beginning of file\n+        else\n+          seekPosition \u003d positions[seekIndex];    // else use index\n+      }\n+      data.seek(seekPosition);\n+      \n+      if (nextKey \u003d\u003d null)\n+        nextKey \u003d comparator.newKey();\n+     \n+      // If we\u0027re looking for the key before, we need to keep track\n+      // of the position we got the current key as well as the position\n+      // of the key before it.\n+      long prevPosition \u003d -1;\n+      long curPosition \u003d seekPosition;\n+\n+      while (data.next(nextKey)) {\n+        int c \u003d comparator.compare(key, nextKey);\n+        if (c \u003c\u003d 0) {                             // at or beyond desired\n+          if (before \u0026\u0026 c !\u003d 0) {\n+            if (prevPosition \u003d\u003d -1) {\n+              // We\u0027re on the first record of this index block\n+              // and we\u0027ve already passed the search key. Therefore\n+              // we must be at the beginning of the file, so seek\n+              // to the beginning of this block and return c\n+              data.seek(curPosition);\n+            } else {\n+              // We have a previous record to back up to\n+              data.seek(prevPosition);\n+              data.next(nextKey);\n+              // now that we\u0027ve rewound, the search key must be greater than this key\n+              return 1;\n+            }\n+          }\n+          return c;\n+        }\n+        if (before) {\n+          prevPosition \u003d curPosition;\n+          curPosition \u003d data.getPosition();\n+        }\n+      }\n+\n+      return 1;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized int seekInternal(WritableComparable key,\n        final boolean before)\n      throws IOException {\n      readIndex();                                // make sure index is read\n\n      if (seekIndex !\u003d -1                         // seeked before\n          \u0026\u0026 seekIndex+1 \u003c count           \n          \u0026\u0026 comparator.compare(key, keys[seekIndex+1])\u003c0 // before next indexed\n          \u0026\u0026 comparator.compare(key, nextKey)\n          \u003e\u003d 0) {                                 // but after last seeked\n        // do nothing\n      } else {\n        seekIndex \u003d binarySearch(key);\n        if (seekIndex \u003c 0)                        // decode insertion point\n          seekIndex \u003d -seekIndex-2;\n\n        if (seekIndex \u003d\u003d -1)                      // belongs before first entry\n          seekPosition \u003d firstPosition;           // use beginning of file\n        else\n          seekPosition \u003d positions[seekIndex];    // else use index\n      }\n      data.seek(seekPosition);\n      \n      if (nextKey \u003d\u003d null)\n        nextKey \u003d comparator.newKey();\n     \n      // If we\u0027re looking for the key before, we need to keep track\n      // of the position we got the current key as well as the position\n      // of the key before it.\n      long prevPosition \u003d -1;\n      long curPosition \u003d seekPosition;\n\n      while (data.next(nextKey)) {\n        int c \u003d comparator.compare(key, nextKey);\n        if (c \u003c\u003d 0) {                             // at or beyond desired\n          if (before \u0026\u0026 c !\u003d 0) {\n            if (prevPosition \u003d\u003d -1) {\n              // We\u0027re on the first record of this index block\n              // and we\u0027ve already passed the search key. Therefore\n              // we must be at the beginning of the file, so seek\n              // to the beginning of this block and return c\n              data.seek(curPosition);\n            } else {\n              // We have a previous record to back up to\n              data.seek(prevPosition);\n              data.next(nextKey);\n              // now that we\u0027ve rewound, the search key must be greater than this key\n              return 1;\n            }\n          }\n          return c;\n        }\n        if (before) {\n          prevPosition \u003d curPosition;\n          curPosition \u003d data.getPosition();\n        }\n      }\n\n      return 1;\n    }",
      "path": "src/java/org/apache/hadoop/io/MapFile.java"
    }
  }
}