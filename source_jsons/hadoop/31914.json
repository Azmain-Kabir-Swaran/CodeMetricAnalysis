{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowRunCoprocessor.java",
  "functionName": "prePut",
  "functionId": "prePut___e-ObserverContext__RegionCoprocessorEnvironment____put-Put__edit-WALEdit__durability-Durability",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
  "functionStartLine": 93,
  "functionEndLine": 129,
  "numCommitsSeen": 20,
  "timeTaken": 6085,
  "changeHistory": [
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
    "10663b78c8596693322dc3636f173035195bf607",
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "d62932c3b2fcacc81dc1f5048cdeb60fb0d38504",
    "580d884913c200f6c6cae475d8c183a4b61ff710",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "55f5886ea24671ff3db87a64aaba2e76b3355455",
    "69dc561b61bf694cfdf0d2059f4f3dcee30e0632",
    "b51d0fef56a59b15489f5b932025718b4e9613d2",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60"
  ],
  "changeHistoryShort": {
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b": "Ymultichange(Yfilerename,Ybodychange)",
    "10663b78c8596693322dc3636f173035195bf607": "Ymultichange(Yfilerename,Ybodychange)",
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c": "Ymultichange(Yfilerename,Ybodychange)",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "d62932c3b2fcacc81dc1f5048cdeb60fb0d38504": "Ybodychange",
    "580d884913c200f6c6cae475d8c183a4b61ff710": "Ybodychange",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "55f5886ea24671ff3db87a64aaba2e76b3355455": "Ybodychange",
    "69dc561b61bf694cfdf0d2059f4f3dcee30e0632": "Ybodychange",
    "b51d0fef56a59b15489f5b932025718b4e9613d2": "Ybodychange",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7346. Add a profile to allow optional compilation for ATSv2 with HBase-2.0. Contributed by Haibo Chen and Rohith.\n",
      "commitDate": "05/03/18 10:25 PM",
      "commitName": "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7346. Add a profile to allow optional compilation for ATSv2 with HBase-2.0. Contributed by Haibo Chen and Rohith.\n",
          "commitDate": "05/03/18 10:25 PM",
          "commitName": "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "05/03/18 6:15 PM",
          "commitNameOld": "745190ecdca8f7dfc5eebffdd1c1aa4f86229120",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n         if (t !\u003d null) {\n           tags.add(t);\n         }\n       }\n-      byte[] tagByteArray \u003d Tag.fromList(tags);\n+      byte[] tagByteArray \u003d\n+          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d\n          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7346. Add a profile to allow optional compilation for ATSv2 with HBase-2.0. Contributed by Haibo Chen and Rohith.\n",
          "commitDate": "05/03/18 10:25 PM",
          "commitName": "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "05/03/18 6:15 PM",
          "commitNameOld": "745190ecdca8f7dfc5eebffdd1c1aa4f86229120",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n         if (t !\u003d null) {\n           tags.add(t);\n         }\n       }\n-      byte[] tagByteArray \u003d Tag.fromList(tags);\n+      byte[] tagByteArray \u003d\n+          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d\n          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
          "extendedDetails": {}
        }
      ]
    },
    "10663b78c8596693322dc3636f173035195bf607": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Revert \"yarn-7346.07.patch\"\n\nThis reverts commit 5e37ca5bb49f945e27f49a413d08baab562dfa9c.\n",
      "commitDate": "28/02/18 9:11 PM",
      "commitName": "10663b78c8596693322dc3636f173035195bf607",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert \"yarn-7346.07.patch\"\n\nThis reverts commit 5e37ca5bb49f945e27f49a413d08baab562dfa9c.\n",
          "commitDate": "28/02/18 9:11 PM",
          "commitName": "10663b78c8596693322dc3636f173035195bf607",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "28/02/18 9:10 PM",
          "commitNameOld": "d1274c3b71549cb000868500c293cafd880b3713",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n         if (t !\u003d null) {\n           tags.add(t);\n         }\n       }\n-      byte[] tagByteArray \u003d\n-          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n+      byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"yarn-7346.07.patch\"\n\nThis reverts commit 5e37ca5bb49f945e27f49a413d08baab562dfa9c.\n",
          "commitDate": "28/02/18 9:11 PM",
          "commitName": "10663b78c8596693322dc3636f173035195bf607",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "28/02/18 9:10 PM",
          "commitNameOld": "d1274c3b71549cb000868500c293cafd880b3713",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n         if (t !\u003d null) {\n           tags.add(t);\n         }\n       }\n-      byte[] tagByteArray \u003d\n-          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n+      byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
          "extendedDetails": {}
        }
      ]
    },
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "yarn-7346.07.patch\n",
      "commitDate": "28/02/18 9:04 PM",
      "commitName": "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "yarn-7346.07.patch\n",
          "commitDate": "28/02/18 9:04 PM",
          "commitName": "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "28/02/18 6:18 PM",
          "commitNameOld": "6e6945cd78d76c6beaec85c963f27e28bf96c0f2",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n         if (t !\u003d null) {\n           tags.add(t);\n         }\n       }\n-      byte[] tagByteArray \u003d Tag.fromList(tags);\n+      byte[] tagByteArray \u003d\n+          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d\n          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "yarn-7346.07.patch\n",
          "commitDate": "28/02/18 9:04 PM",
          "commitName": "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "28/02/18 6:18 PM",
          "commitNameOld": "6e6945cd78d76c6beaec85c963f27e28bf96c0f2",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n         if (t !\u003d null) {\n           tags.add(t);\n         }\n       }\n-      byte[] tagByteArray \u003d Tag.fromList(tags);\n+      byte[] tagByteArray \u003d\n+          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d\n          HBaseTimelineServerUtils.convertTagListToByteArray(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
          "extendedDetails": {}
        }
      ]
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n-        Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n+        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n         if (t !\u003d null) {\n           tags.add(t);\n         }\n       }\n       byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n-        Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n+        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n         if (t !\u003d null) {\n           tags.add(t);\n         }\n       }\n       byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineServerUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
          "extendedDetails": {}
        }
      ]
    },
    "d62932c3b2fcacc81dc1f5048cdeb60fb0d38504": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7032. [ATSv2] NPE while starting hbase co-processor when HBase authorization is enabled. Contributed by Rohith Sharma K S.\n",
      "commitDate": "19/12/17 10:01 PM",
      "commitName": "d62932c3b2fcacc81dc1f5048cdeb60fb0d38504",
      "commitAuthor": "Sunil G",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "580d884913c200f6c6cae475d8c183a4b61ff710",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 112.0,
      "commitsBetweenForRepo": 966,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,36 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n-        tags.add(t);\n+        if (t !\u003d null) {\n+          tags.add(t);\n+        }\n       }\n       byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n        if (t !\u003d null) {\n          tags.add(t);\n        }\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
      "extendedDetails": {}
    },
    "580d884913c200f6c6cae475d8c183a4b61ff710": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6094. Update the coprocessor to be a dynamically loaded one. Contributed by Vrushali C.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "580d884913c200f6c6cae475d8c183a4b61ff710",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "9bb5cc3d4929d55124fc3143d3c88122c6bee597",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,34 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n-\n-    if (!isFlowRunRegion) {\n-      return;\n-    }\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n         tags.add(t);\n       }\n       byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n        tags.add(t);\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
      "extendedDetails": {}
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n\n    if (!isFlowRunRegion) {\n      return;\n    }\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n        tags.add(t);\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java"
      }
    },
    "55f5886ea24671ff3db87a64aaba2e76b3355455": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5925. Extract hbase-backend-exclusive utility methods from TimelineStorageUtil. Contributed by Haibo Chen.\n",
      "commitDate": "09/12/16 4:17 PM",
      "commitName": "55f5886ea24671ff3db87a64aaba2e76b3355455",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "1a227744ac0ceff178171fc4ddbf3d27275bdc4f",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 152.36,
      "commitsBetweenForRepo": 1107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n \n     if (!isFlowRunRegion) {\n       return;\n     }\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n-        Tag t \u003d TimelineStorageUtils.getTagFromAttribute(attribute);\n+        Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n         tags.add(t);\n       }\n       byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n\n    if (!isFlowRunRegion) {\n      return;\n    }\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d HBaseTimelineStorageUtils.getTagFromAttribute(attribute);\n        tags.add(t);\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
      "extendedDetails": {}
    },
    "69dc561b61bf694cfdf0d2059f4f3dcee30e0632": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4986. Add a check in the coprocessor for table to operated on (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "69dc561b61bf694cfdf0d2059f4f3dcee30e0632",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n \n+    if (!isFlowRunRegion) {\n+      return;\n+    }\n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n         Tag t \u003d TimelineStorageUtils.getTagFromAttribute(attribute);\n         tags.add(t);\n       }\n       byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n\n    if (!isFlowRunRegion) {\n      return;\n    }\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d TimelineStorageUtils.getTagFromAttribute(attribute);\n        tags.add(t);\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
      "extendedDetails": {}
    },
    "b51d0fef56a59b15489f5b932025718b4e9613d2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4178. [storage implementation] app id as string in row keys can cause incorrect ordering (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "b51d0fef56a59b15489f5b932025718b4e9613d2",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n       WALEdit edit, Durability durability) throws IOException {\n     Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n \n     // Assumption is that all the cells in a put are the same operation.\n     List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n     if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n       for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n-        Tag t \u003d TimelineWriterUtils.getTagFromAttribute(attribute);\n+        Tag t \u003d TimelineStorageUtils.getTagFromAttribute(attribute);\n         tags.add(t);\n       }\n       byte[] tagByteArray \u003d Tag.fromList(tags);\n       NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n           Bytes.BYTES_COMPARATOR);\n       for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n           .entrySet()) {\n         List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n         for (Cell cell : entry.getValue()) {\n           // for each cell in the put add the tags\n           // Assumption is that all the cells in\n           // one put are the same operation\n           // also, get a unique cell timestamp for non-metric cells\n           // this way we don\u0027t inadvertently overwrite cell versions\n           long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n           newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n               CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n               cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n               tagByteArray));\n         }\n         newFamilyMap.put(entry.getKey(), newCells);\n       } // for each entry\n       // Update the family map for the Put\n       put.setFamilyCellMap(newFamilyMap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d TimelineStorageUtils.getTagFromAttribute(attribute);\n        tags.add(t);\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java",
      "extendedDetails": {}
    },
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3901. Populate flow run data in the flow_run \u0026 flow activity tables (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,35 @@\n+  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n+      WALEdit edit, Durability durability) throws IOException {\n+    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n+\n+    // Assumption is that all the cells in a put are the same operation.\n+    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n+    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n+      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n+        Tag t \u003d TimelineWriterUtils.getTagFromAttribute(attribute);\n+        tags.add(t);\n+      }\n+      byte[] tagByteArray \u003d Tag.fromList(tags);\n+      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n+          Bytes.BYTES_COMPARATOR);\n+      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n+          .entrySet()) {\n+        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n+        for (Cell cell : entry.getValue()) {\n+          // for each cell in the put add the tags\n+          // Assumption is that all the cells in\n+          // one put are the same operation\n+          // also, get a unique cell timestamp for non-metric cells\n+          // this way we don\u0027t inadvertently overwrite cell versions\n+          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n+          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n+              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n+              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n+              tagByteArray));\n+        }\n+        newFamilyMap.put(entry.getKey(), newCells);\n+      } // for each entry\n+      // Update the family map for the Put\n+      put.setFamilyCellMap(newFamilyMap);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void prePut(ObserverContext\u003cRegionCoprocessorEnvironment\u003e e, Put put,\n      WALEdit edit, Durability durability) throws IOException {\n    Map\u003cString, byte[]\u003e attributes \u003d put.getAttributesMap();\n\n    // Assumption is that all the cells in a put are the same operation.\n    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();\n    if ((attributes !\u003d null) \u0026\u0026 (attributes.size() \u003e 0)) {\n      for (Map.Entry\u003cString, byte[]\u003e attribute : attributes.entrySet()) {\n        Tag t \u003d TimelineWriterUtils.getTagFromAttribute(attribute);\n        tags.add(t);\n      }\n      byte[] tagByteArray \u003d Tag.fromList(tags);\n      NavigableMap\u003cbyte[], List\u003cCell\u003e\u003e newFamilyMap \u003d new TreeMap\u003c\u003e(\n          Bytes.BYTES_COMPARATOR);\n      for (Map.Entry\u003cbyte[], List\u003cCell\u003e\u003e entry : put.getFamilyCellMap()\n          .entrySet()) {\n        List\u003cCell\u003e newCells \u003d new ArrayList\u003c\u003e(entry.getValue().size());\n        for (Cell cell : entry.getValue()) {\n          // for each cell in the put add the tags\n          // Assumption is that all the cells in\n          // one put are the same operation\n          // also, get a unique cell timestamp for non-metric cells\n          // this way we don\u0027t inadvertently overwrite cell versions\n          long cellTimestamp \u003d getCellTimestamp(cell.getTimestamp(), tags);\n          newCells.add(CellUtil.createCell(CellUtil.cloneRow(cell),\n              CellUtil.cloneFamily(cell), CellUtil.cloneQualifier(cell),\n              cellTimestamp, KeyValue.Type.Put, CellUtil.cloneValue(cell),\n              tagByteArray));\n        }\n        newFamilyMap.put(entry.getKey(), newCells);\n      } // for each entry\n      // Update the family map for the Put\n      put.setFamilyCellMap(newFamilyMap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunCoprocessor.java"
    }
  }
}