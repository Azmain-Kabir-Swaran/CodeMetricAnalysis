{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Balancer.java",
  "functionName": "parse",
  "functionId": "parse___args-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
  "functionStartLine": 882,
  "functionEndLine": 966,
  "numCommitsSeen": 100,
  "timeTaken": 8630,
  "changeHistory": [
    "1f26cc8705b5af12eefedda019e7ab5c261d9bfb",
    "083b44c136ea5aba660fcd1dddbb2d21513b4456",
    "d31a41c35927f02f2fb40d19380b5df4bb2b6d57",
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51",
    "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f",
    "b94c1117a28e996adee68fe0e181eb6f536289f4",
    "c3cf331dc91e2beef2afeed11105084843b02858",
    "7e12b1912f8cdbe6d88ac0b8eb71d7c4dc1bf78e",
    "b8b8f3f5e7214d6fcfc30e1b94ff097e52868f4f",
    "28e87740c5797e87a9038d7f151c8b21a5b04592",
    "231a52a7dfa73f7f302cc3bf671d433312373873",
    "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0",
    "07295260b10cd2376660a673ceb9d8ce0570b528",
    "d37ec9d09e02f16396c296e72ff8c1b7c3e6ed10",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "1f26cc8705b5af12eefedda019e7ab5c261d9bfb": "Ybodychange",
    "083b44c136ea5aba660fcd1dddbb2d21513b4456": "Ymultichange(Yreturntypechange,Ybodychange)",
    "d31a41c35927f02f2fb40d19380b5df4bb2b6d57": "Ybodychange",
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51": "Ybodychange",
    "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f": "Ybodychange",
    "b94c1117a28e996adee68fe0e181eb6f536289f4": "Ybodychange",
    "c3cf331dc91e2beef2afeed11105084843b02858": "Ybodychange",
    "7e12b1912f8cdbe6d88ac0b8eb71d7c4dc1bf78e": "Ybodychange",
    "b8b8f3f5e7214d6fcfc30e1b94ff097e52868f4f": "Ybodychange",
    "28e87740c5797e87a9038d7f151c8b21a5b04592": "Ybodychange",
    "231a52a7dfa73f7f302cc3bf671d433312373873": "Ybodychange",
    "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0": "Ybodychange",
    "07295260b10cd2376660a673ceb9d8ce0570b528": "Ybodychange",
    "d37ec9d09e02f16396c296e72ff8c1b7c3e6ed10": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f26cc8705b5af12eefedda019e7ab5c261d9bfb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13783. Add an option to the Balancer to make it run as a long-running service. Contributed by Chen Zhang.\n",
      "commitDate": "30/07/19 3:42 PM",
      "commitName": "1f26cc8705b5af12eefedda019e7ab5c261d9bfb",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "13/03/19 1:15 PM",
      "commitNameOld": "66357574ae1da09ced735da36bf7d80a40c3fa1b",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 139.1,
      "commitsBetweenForRepo": 973,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,85 @@\n     static BalancerParameters parse(String[] args) {\n       Set\u003cString\u003e excludedNodes \u003d null;\n       Set\u003cString\u003e includedNodes \u003d null;\n       BalancerParameters.Builder b \u003d new BalancerParameters.Builder();\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 double threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n                 b.setThreshold(threshold);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 b.setBalancingPolicy(BalancingPolicy.parse(args[i]));\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n               excludedNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n               b.setExcludedNodes(excludedNodes);\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n               includedNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"include\", includedNodes);\n               b.setIncludedNodes(includedNodes);\n             } else if (\"-source\".equalsIgnoreCase(args[i])) {\n               Set\u003cString\u003e sourceNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"source\", sourceNodes);\n               b.setSourceNodes(sourceNodes);\n             } else if (\"-blockpools\".equalsIgnoreCase(args[i])) {\n               checkArgument(\n                   ++i \u003c args.length,\n                   \"blockpools value is missing: args \u003d \"\n                       + Arrays.toString(args));\n               Set\u003cString\u003e blockpools \u003d parseBlockPoolList(args[i]);\n               LOG.info(\"Balancer will run on the following blockpools: \"\n                   + blockpools.toString());\n               b.setBlockpools(blockpools);\n             } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                   \"idleiterations value is missing: args \u003d \" + Arrays\n                       .toString(args));\n               int maxIdleIteration \u003d Integer.parseInt(args[i]);\n               LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n               b.setMaxIdleIteration(maxIdleIteration);\n             } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n               b.setRunDuringUpgrade(true);\n               LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                   + \"upgrade. Most users will not want to run the balancer \"\n                   + \"during an upgrade since it will not affect used space \"\n                   + \"on over-utilized machines.\");\n+            } else if (\"-asService\".equalsIgnoreCase(args[i])) {\n+              b.setRunAsService(true);\n+              LOG.info(\"Balancer will run as a long running service\");\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n           checkArgument(excludedNodes \u003d\u003d null || includedNodes \u003d\u003d null,\n               \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n       return b.build();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static BalancerParameters parse(String[] args) {\n      Set\u003cString\u003e excludedNodes \u003d null;\n      Set\u003cString\u003e includedNodes \u003d null;\n      BalancerParameters.Builder b \u003d new BalancerParameters.Builder();\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                double threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n                b.setThreshold(threshold);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                b.setBalancingPolicy(BalancingPolicy.parse(args[i]));\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              excludedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n              b.setExcludedNodes(excludedNodes);\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              includedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"include\", includedNodes);\n              b.setIncludedNodes(includedNodes);\n            } else if (\"-source\".equalsIgnoreCase(args[i])) {\n              Set\u003cString\u003e sourceNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"source\", sourceNodes);\n              b.setSourceNodes(sourceNodes);\n            } else if (\"-blockpools\".equalsIgnoreCase(args[i])) {\n              checkArgument(\n                  ++i \u003c args.length,\n                  \"blockpools value is missing: args \u003d \"\n                      + Arrays.toString(args));\n              Set\u003cString\u003e blockpools \u003d parseBlockPoolList(args[i]);\n              LOG.info(\"Balancer will run on the following blockpools: \"\n                  + blockpools.toString());\n              b.setBlockpools(blockpools);\n            } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"idleiterations value is missing: args \u003d \" + Arrays\n                      .toString(args));\n              int maxIdleIteration \u003d Integer.parseInt(args[i]);\n              LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n              b.setMaxIdleIteration(maxIdleIteration);\n            } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n              b.setRunDuringUpgrade(true);\n              LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                  + \"upgrade. Most users will not want to run the balancer \"\n                  + \"during an upgrade since it will not affect used space \"\n                  + \"on over-utilized machines.\");\n            } else if (\"-asService\".equalsIgnoreCase(args[i])) {\n              b.setRunAsService(true);\n              LOG.info(\"Balancer will run as a long running service\");\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(excludedNodes \u003d\u003d null || includedNodes \u003d\u003d null,\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      return b.build();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "083b44c136ea5aba660fcd1dddbb2d21513b4456": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-9008. Balancer#Parameters class could use a builder pattern. (Chris Trezzo via mingma)\n",
      "commitDate": "15/09/15 10:16 AM",
      "commitName": "083b44c136ea5aba660fcd1dddbb2d21513b4456",
      "commitAuthor": "Ming Ma",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-9008. Balancer#Parameters class could use a builder pattern. (Chris Trezzo via mingma)\n",
          "commitDate": "15/09/15 10:16 AM",
          "commitName": "083b44c136ea5aba660fcd1dddbb2d21513b4456",
          "commitAuthor": "Ming Ma",
          "commitDateOld": "02/09/15 3:55 PM",
          "commitNameOld": "d31a41c35927f02f2fb40d19380b5df4bb2b6d57",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 12.76,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,83 +1,82 @@\n-    static Parameters parse(String[] args) {\n-      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n-      double threshold \u003d Parameters.DEFAULT.threshold;\n-      int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n-      Set\u003cString\u003e excludedNodes \u003d Parameters.DEFAULT.excludedNodes;\n-      Set\u003cString\u003e includedNodes \u003d Parameters.DEFAULT.includedNodes;\n-      Set\u003cString\u003e sourceNodes \u003d Parameters.DEFAULT.sourceNodes;\n-      Set\u003cString\u003e blockpools \u003d Parameters.DEFAULT.blockpools;\n-      boolean runDuringUpgrade \u003d Parameters.DEFAULT.runDuringUpgrade;\n+    static BalancerParameters parse(String[] args) {\n+      Set\u003cString\u003e excludedNodes \u003d null;\n+      Set\u003cString\u003e includedNodes \u003d null;\n+      BalancerParameters.Builder b \u003d new BalancerParameters.Builder();\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n-                threshold \u003d Double.parseDouble(args[i]);\n+                double threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n+                b.setThreshold(threshold);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n-                policy \u003d BalancingPolicy.parse(args[i]);\n+                b.setBalancingPolicy(BalancingPolicy.parse(args[i]));\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n               excludedNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n+              b.setExcludedNodes(excludedNodes);\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n               includedNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"include\", includedNodes);\n+              b.setIncludedNodes(includedNodes);\n             } else if (\"-source\".equalsIgnoreCase(args[i])) {\n-              sourceNodes \u003d new HashSet\u003c\u003e();\n+              Set\u003cString\u003e sourceNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"source\", sourceNodes);\n+              b.setSourceNodes(sourceNodes);\n             } else if (\"-blockpools\".equalsIgnoreCase(args[i])) {\n               checkArgument(\n                   ++i \u003c args.length,\n                   \"blockpools value is missing: args \u003d \"\n                       + Arrays.toString(args));\n-              blockpools \u003d parseBlockPoolList(args[i]);\n+              Set\u003cString\u003e blockpools \u003d parseBlockPoolList(args[i]);\n               LOG.info(\"Balancer will run on the following blockpools: \"\n                   + blockpools.toString());\n+              b.setBlockpools(blockpools);\n             } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                   \"idleiterations value is missing: args \u003d \" + Arrays\n                       .toString(args));\n-              maxIdleIteration \u003d Integer.parseInt(args[i]);\n+              int maxIdleIteration \u003d Integer.parseInt(args[i]);\n               LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n+              b.setMaxIdleIteration(maxIdleIteration);\n             } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n-              runDuringUpgrade \u003d true;\n+              b.setRunDuringUpgrade(true);\n               LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                   + \"upgrade. Most users will not want to run the balancer \"\n                   + \"during an upgrade since it will not affect used space \"\n                   + \"on over-utilized machines.\");\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n-          checkArgument(excludedNodes.isEmpty() || includedNodes.isEmpty(),\n+          checkArgument(excludedNodes \u003d\u003d null || includedNodes \u003d\u003d null,\n               \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n-      \n-      return new Parameters(policy, threshold, maxIdleIteration, excludedNodes,\n-          includedNodes, sourceNodes, blockpools, runDuringUpgrade);\n+      return b.build();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static BalancerParameters parse(String[] args) {\n      Set\u003cString\u003e excludedNodes \u003d null;\n      Set\u003cString\u003e includedNodes \u003d null;\n      BalancerParameters.Builder b \u003d new BalancerParameters.Builder();\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                double threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n                b.setThreshold(threshold);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                b.setBalancingPolicy(BalancingPolicy.parse(args[i]));\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              excludedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n              b.setExcludedNodes(excludedNodes);\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              includedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"include\", includedNodes);\n              b.setIncludedNodes(includedNodes);\n            } else if (\"-source\".equalsIgnoreCase(args[i])) {\n              Set\u003cString\u003e sourceNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"source\", sourceNodes);\n              b.setSourceNodes(sourceNodes);\n            } else if (\"-blockpools\".equalsIgnoreCase(args[i])) {\n              checkArgument(\n                  ++i \u003c args.length,\n                  \"blockpools value is missing: args \u003d \"\n                      + Arrays.toString(args));\n              Set\u003cString\u003e blockpools \u003d parseBlockPoolList(args[i]);\n              LOG.info(\"Balancer will run on the following blockpools: \"\n                  + blockpools.toString());\n              b.setBlockpools(blockpools);\n            } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"idleiterations value is missing: args \u003d \" + Arrays\n                      .toString(args));\n              int maxIdleIteration \u003d Integer.parseInt(args[i]);\n              LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n              b.setMaxIdleIteration(maxIdleIteration);\n            } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n              b.setRunDuringUpgrade(true);\n              LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                  + \"upgrade. Most users will not want to run the balancer \"\n                  + \"during an upgrade since it will not affect used space \"\n                  + \"on over-utilized machines.\");\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(excludedNodes \u003d\u003d null || includedNodes \u003d\u003d null,\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      return b.build();\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {
            "oldValue": "Parameters",
            "newValue": "BalancerParameters"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9008. Balancer#Parameters class could use a builder pattern. (Chris Trezzo via mingma)\n",
          "commitDate": "15/09/15 10:16 AM",
          "commitName": "083b44c136ea5aba660fcd1dddbb2d21513b4456",
          "commitAuthor": "Ming Ma",
          "commitDateOld": "02/09/15 3:55 PM",
          "commitNameOld": "d31a41c35927f02f2fb40d19380b5df4bb2b6d57",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 12.76,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,83 +1,82 @@\n-    static Parameters parse(String[] args) {\n-      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n-      double threshold \u003d Parameters.DEFAULT.threshold;\n-      int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n-      Set\u003cString\u003e excludedNodes \u003d Parameters.DEFAULT.excludedNodes;\n-      Set\u003cString\u003e includedNodes \u003d Parameters.DEFAULT.includedNodes;\n-      Set\u003cString\u003e sourceNodes \u003d Parameters.DEFAULT.sourceNodes;\n-      Set\u003cString\u003e blockpools \u003d Parameters.DEFAULT.blockpools;\n-      boolean runDuringUpgrade \u003d Parameters.DEFAULT.runDuringUpgrade;\n+    static BalancerParameters parse(String[] args) {\n+      Set\u003cString\u003e excludedNodes \u003d null;\n+      Set\u003cString\u003e includedNodes \u003d null;\n+      BalancerParameters.Builder b \u003d new BalancerParameters.Builder();\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n-                threshold \u003d Double.parseDouble(args[i]);\n+                double threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n+                b.setThreshold(threshold);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n-                policy \u003d BalancingPolicy.parse(args[i]);\n+                b.setBalancingPolicy(BalancingPolicy.parse(args[i]));\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n               excludedNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n+              b.setExcludedNodes(excludedNodes);\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n               includedNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"include\", includedNodes);\n+              b.setIncludedNodes(includedNodes);\n             } else if (\"-source\".equalsIgnoreCase(args[i])) {\n-              sourceNodes \u003d new HashSet\u003c\u003e();\n+              Set\u003cString\u003e sourceNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"source\", sourceNodes);\n+              b.setSourceNodes(sourceNodes);\n             } else if (\"-blockpools\".equalsIgnoreCase(args[i])) {\n               checkArgument(\n                   ++i \u003c args.length,\n                   \"blockpools value is missing: args \u003d \"\n                       + Arrays.toString(args));\n-              blockpools \u003d parseBlockPoolList(args[i]);\n+              Set\u003cString\u003e blockpools \u003d parseBlockPoolList(args[i]);\n               LOG.info(\"Balancer will run on the following blockpools: \"\n                   + blockpools.toString());\n+              b.setBlockpools(blockpools);\n             } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                   \"idleiterations value is missing: args \u003d \" + Arrays\n                       .toString(args));\n-              maxIdleIteration \u003d Integer.parseInt(args[i]);\n+              int maxIdleIteration \u003d Integer.parseInt(args[i]);\n               LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n+              b.setMaxIdleIteration(maxIdleIteration);\n             } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n-              runDuringUpgrade \u003d true;\n+              b.setRunDuringUpgrade(true);\n               LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                   + \"upgrade. Most users will not want to run the balancer \"\n                   + \"during an upgrade since it will not affect used space \"\n                   + \"on over-utilized machines.\");\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n-          checkArgument(excludedNodes.isEmpty() || includedNodes.isEmpty(),\n+          checkArgument(excludedNodes \u003d\u003d null || includedNodes \u003d\u003d null,\n               \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n-      \n-      return new Parameters(policy, threshold, maxIdleIteration, excludedNodes,\n-          includedNodes, sourceNodes, blockpools, runDuringUpgrade);\n+      return b.build();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static BalancerParameters parse(String[] args) {\n      Set\u003cString\u003e excludedNodes \u003d null;\n      Set\u003cString\u003e includedNodes \u003d null;\n      BalancerParameters.Builder b \u003d new BalancerParameters.Builder();\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                double threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n                b.setThreshold(threshold);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                b.setBalancingPolicy(BalancingPolicy.parse(args[i]));\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              excludedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n              b.setExcludedNodes(excludedNodes);\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              includedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"include\", includedNodes);\n              b.setIncludedNodes(includedNodes);\n            } else if (\"-source\".equalsIgnoreCase(args[i])) {\n              Set\u003cString\u003e sourceNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"source\", sourceNodes);\n              b.setSourceNodes(sourceNodes);\n            } else if (\"-blockpools\".equalsIgnoreCase(args[i])) {\n              checkArgument(\n                  ++i \u003c args.length,\n                  \"blockpools value is missing: args \u003d \"\n                      + Arrays.toString(args));\n              Set\u003cString\u003e blockpools \u003d parseBlockPoolList(args[i]);\n              LOG.info(\"Balancer will run on the following blockpools: \"\n                  + blockpools.toString());\n              b.setBlockpools(blockpools);\n            } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"idleiterations value is missing: args \u003d \" + Arrays\n                      .toString(args));\n              int maxIdleIteration \u003d Integer.parseInt(args[i]);\n              LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n              b.setMaxIdleIteration(maxIdleIteration);\n            } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n              b.setRunDuringUpgrade(true);\n              LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                  + \"upgrade. Most users will not want to run the balancer \"\n                  + \"during an upgrade since it will not affect used space \"\n                  + \"on over-utilized machines.\");\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(excludedNodes \u003d\u003d null || includedNodes \u003d\u003d null,\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      return b.build();\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {}
        }
      ]
    },
    "d31a41c35927f02f2fb40d19380b5df4bb2b6d57": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8890. Allow admin to specify which blockpools the balancer should run on. (Chris Trezzo via mingma)\n",
      "commitDate": "02/09/15 3:55 PM",
      "commitName": "d31a41c35927f02f2fb40d19380b5df4bb2b6d57",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "18/08/15 7:25 PM",
      "commitNameOld": "7ecbfd44aa57f5f54c214b7fdedda2500be76f51",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 14.85,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,83 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n       double threshold \u003d Parameters.DEFAULT.threshold;\n       int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n       Set\u003cString\u003e excludedNodes \u003d Parameters.DEFAULT.excludedNodes;\n       Set\u003cString\u003e includedNodes \u003d Parameters.DEFAULT.includedNodes;\n       Set\u003cString\u003e sourceNodes \u003d Parameters.DEFAULT.sourceNodes;\n+      Set\u003cString\u003e blockpools \u003d Parameters.DEFAULT.blockpools;\n       boolean runDuringUpgrade \u003d Parameters.DEFAULT.runDuringUpgrade;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n               excludedNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n               includedNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"include\", includedNodes);\n             } else if (\"-source\".equalsIgnoreCase(args[i])) {\n               sourceNodes \u003d new HashSet\u003c\u003e();\n               i \u003d processHostList(args, i, \"source\", sourceNodes);\n+            } else if (\"-blockpools\".equalsIgnoreCase(args[i])) {\n+              checkArgument(\n+                  ++i \u003c args.length,\n+                  \"blockpools value is missing: args \u003d \"\n+                      + Arrays.toString(args));\n+              blockpools \u003d parseBlockPoolList(args[i]);\n+              LOG.info(\"Balancer will run on the following blockpools: \"\n+                  + blockpools.toString());\n             } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                   \"idleiterations value is missing: args \u003d \" + Arrays\n                       .toString(args));\n               maxIdleIteration \u003d Integer.parseInt(args[i]);\n               LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n             } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n               runDuringUpgrade \u003d true;\n               LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                   + \"upgrade. Most users will not want to run the balancer \"\n                   + \"during an upgrade since it will not affect used space \"\n                   + \"on over-utilized machines.\");\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n           checkArgument(excludedNodes.isEmpty() || includedNodes.isEmpty(),\n               \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n       \n-      return new Parameters(policy, threshold, maxIdleIteration,\n-          excludedNodes, includedNodes, sourceNodes, runDuringUpgrade);\n+      return new Parameters(policy, threshold, maxIdleIteration, excludedNodes,\n+          includedNodes, sourceNodes, blockpools, runDuringUpgrade);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n      double threshold \u003d Parameters.DEFAULT.threshold;\n      int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n      Set\u003cString\u003e excludedNodes \u003d Parameters.DEFAULT.excludedNodes;\n      Set\u003cString\u003e includedNodes \u003d Parameters.DEFAULT.includedNodes;\n      Set\u003cString\u003e sourceNodes \u003d Parameters.DEFAULT.sourceNodes;\n      Set\u003cString\u003e blockpools \u003d Parameters.DEFAULT.blockpools;\n      boolean runDuringUpgrade \u003d Parameters.DEFAULT.runDuringUpgrade;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              excludedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              includedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"include\", includedNodes);\n            } else if (\"-source\".equalsIgnoreCase(args[i])) {\n              sourceNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"source\", sourceNodes);\n            } else if (\"-blockpools\".equalsIgnoreCase(args[i])) {\n              checkArgument(\n                  ++i \u003c args.length,\n                  \"blockpools value is missing: args \u003d \"\n                      + Arrays.toString(args));\n              blockpools \u003d parseBlockPoolList(args[i]);\n              LOG.info(\"Balancer will run on the following blockpools: \"\n                  + blockpools.toString());\n            } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"idleiterations value is missing: args \u003d \" + Arrays\n                      .toString(args));\n              maxIdleIteration \u003d Integer.parseInt(args[i]);\n              LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n            } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n              runDuringUpgrade \u003d true;\n              LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                  + \"upgrade. Most users will not want to run the balancer \"\n                  + \"during an upgrade since it will not affect used space \"\n                  + \"on over-utilized machines.\");\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(excludedNodes.isEmpty() || includedNodes.isEmpty(),\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold, maxIdleIteration, excludedNodes,\n          includedNodes, sourceNodes, blockpools, runDuringUpgrade);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8826. In Balancer, add an option to specify the source node list so that balancer only selects blocks to move from those nodes.\n",
      "commitDate": "18/08/15 7:25 PM",
      "commitName": "7ecbfd44aa57f5f54c214b7fdedda2500be76f51",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "17/08/15 5:55 PM",
      "commitNameOld": "51a00964da0e399718d1cec25ff692a32d7642b7",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,74 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n       double threshold \u003d Parameters.DEFAULT.threshold;\n       int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n-      Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n-      Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n+      Set\u003cString\u003e excludedNodes \u003d Parameters.DEFAULT.excludedNodes;\n+      Set\u003cString\u003e includedNodes \u003d Parameters.DEFAULT.includedNodes;\n+      Set\u003cString\u003e sourceNodes \u003d Parameters.DEFAULT.sourceNodes;\n       boolean runDuringUpgrade \u003d Parameters.DEFAULT.runDuringUpgrade;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n-              checkArgument(++i \u003c args.length,\n-                  \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n-                  + Arrays.toString(args));\n-              if (\"-f\".equalsIgnoreCase(args[i])) {\n-                checkArgument(++i \u003c args.length,\n-                    \"File containing nodes to exclude is not specified: args \u003d \"\n-                    + Arrays.toString(args));\n-                nodesTobeExcluded \u003d Util.getHostListFromFile(args[i], \"exclude\");\n-              } else {\n-                nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n-              }\n+              excludedNodes \u003d new HashSet\u003c\u003e();\n+              i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n-              checkArgument(++i \u003c args.length,\n-                \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n-                + Arrays.toString(args));\n-              if (\"-f\".equalsIgnoreCase(args[i])) {\n-                checkArgument(++i \u003c args.length,\n-                    \"File containing nodes to include is not specified: args \u003d \"\n-                    + Arrays.toString(args));\n-                nodesTobeIncluded \u003d Util.getHostListFromFile(args[i], \"include\");\n-               } else {\n-                nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n-              }\n+              includedNodes \u003d new HashSet\u003c\u003e();\n+              i \u003d processHostList(args, i, \"include\", includedNodes);\n+            } else if (\"-source\".equalsIgnoreCase(args[i])) {\n+              sourceNodes \u003d new HashSet\u003c\u003e();\n+              i \u003d processHostList(args, i, \"source\", sourceNodes);\n             } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                   \"idleiterations value is missing: args \u003d \" + Arrays\n                       .toString(args));\n               maxIdleIteration \u003d Integer.parseInt(args[i]);\n               LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n             } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n               runDuringUpgrade \u003d true;\n               LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                   + \"upgrade. Most users will not want to run the balancer \"\n                   + \"during an upgrade since it will not affect used space \"\n                   + \"on over-utilized machines.\");\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n-          checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n+          checkArgument(excludedNodes.isEmpty() || includedNodes.isEmpty(),\n               \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n       \n       return new Parameters(policy, threshold, maxIdleIteration,\n-          nodesTobeExcluded, nodesTobeIncluded, runDuringUpgrade);\n+          excludedNodes, includedNodes, sourceNodes, runDuringUpgrade);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n      double threshold \u003d Parameters.DEFAULT.threshold;\n      int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n      Set\u003cString\u003e excludedNodes \u003d Parameters.DEFAULT.excludedNodes;\n      Set\u003cString\u003e includedNodes \u003d Parameters.DEFAULT.includedNodes;\n      Set\u003cString\u003e sourceNodes \u003d Parameters.DEFAULT.sourceNodes;\n      boolean runDuringUpgrade \u003d Parameters.DEFAULT.runDuringUpgrade;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              excludedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"exclude\", excludedNodes);\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              includedNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"include\", includedNodes);\n            } else if (\"-source\".equalsIgnoreCase(args[i])) {\n              sourceNodes \u003d new HashSet\u003c\u003e();\n              i \u003d processHostList(args, i, \"source\", sourceNodes);\n            } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"idleiterations value is missing: args \u003d \" + Arrays\n                      .toString(args));\n              maxIdleIteration \u003d Integer.parseInt(args[i]);\n              LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n            } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n              runDuringUpgrade \u003d true;\n              LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                  + \"upgrade. Most users will not want to run the balancer \"\n                  + \"during an upgrade since it will not affect used space \"\n                  + \"on over-utilized machines.\");\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(excludedNodes.isEmpty() || includedNodes.isEmpty(),\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold, maxIdleIteration,\n          excludedNodes, includedNodes, sourceNodes, runDuringUpgrade);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8549. Abort the balancer if an upgrade is in progress.\n",
      "commitDate": "10/06/15 1:42 PM",
      "commitName": "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "20/03/15 12:02 PM",
      "commitNameOld": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 82.07,
      "commitsBetweenForRepo": 760,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,88 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n       double threshold \u003d Parameters.DEFAULT.threshold;\n       int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n       Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n       Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n+      boolean runDuringUpgrade \u003d Parameters.DEFAULT.runDuringUpgrade;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                   \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n                   + Arrays.toString(args));\n               if (\"-f\".equalsIgnoreCase(args[i])) {\n                 checkArgument(++i \u003c args.length,\n                     \"File containing nodes to exclude is not specified: args \u003d \"\n                     + Arrays.toString(args));\n                 nodesTobeExcluded \u003d Util.getHostListFromFile(args[i], \"exclude\");\n               } else {\n                 nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n               }\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n                 + Arrays.toString(args));\n               if (\"-f\".equalsIgnoreCase(args[i])) {\n                 checkArgument(++i \u003c args.length,\n                     \"File containing nodes to include is not specified: args \u003d \"\n                     + Arrays.toString(args));\n                 nodesTobeIncluded \u003d Util.getHostListFromFile(args[i], \"include\");\n                } else {\n                 nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n               }\n             } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n-                  \"idleiterations value is missing: args \u003d \" + Arrays.toString(args));\n+                  \"idleiterations value is missing: args \u003d \" + Arrays\n+                      .toString(args));\n               maxIdleIteration \u003d Integer.parseInt(args[i]);\n               LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n+            } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n+              runDuringUpgrade \u003d true;\n+              LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n+                  + \"upgrade. Most users will not want to run the balancer \"\n+                  + \"during an upgrade since it will not affect used space \"\n+                  + \"on over-utilized machines.\");\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n           checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n               \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n       \n-      return new Parameters(policy, threshold, maxIdleIteration, nodesTobeExcluded, nodesTobeIncluded);\n+      return new Parameters(policy, threshold, maxIdleIteration,\n+          nodesTobeExcluded, nodesTobeIncluded, runDuringUpgrade);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n      double threshold \u003d Parameters.DEFAULT.threshold;\n      int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n      Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n      Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n      boolean runDuringUpgrade \u003d Parameters.DEFAULT.runDuringUpgrade;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n                  + Arrays.toString(args));\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                checkArgument(++i \u003c args.length,\n                    \"File containing nodes to exclude is not specified: args \u003d \"\n                    + Arrays.toString(args));\n                nodesTobeExcluded \u003d Util.getHostListFromFile(args[i], \"exclude\");\n              } else {\n                nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n              }\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n                + Arrays.toString(args));\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                checkArgument(++i \u003c args.length,\n                    \"File containing nodes to include is not specified: args \u003d \"\n                    + Arrays.toString(args));\n                nodesTobeIncluded \u003d Util.getHostListFromFile(args[i], \"include\");\n               } else {\n                nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n              }\n            } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"idleiterations value is missing: args \u003d \" + Arrays\n                      .toString(args));\n              maxIdleIteration \u003d Integer.parseInt(args[i]);\n              LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n            } else if (\"-runDuringUpgrade\".equalsIgnoreCase(args[i])) {\n              runDuringUpgrade \u003d true;\n              LOG.info(\"Will run the balancer even during an ongoing HDFS \"\n                  + \"upgrade. Most users will not want to run the balancer \"\n                  + \"during an upgrade since it will not affect used space \"\n                  + \"on over-utilized machines.\");\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold, maxIdleIteration,\n          nodesTobeExcluded, nodesTobeIncluded, runDuringUpgrade);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "b94c1117a28e996adee68fe0e181eb6f536289f4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-316. Balancer should run for a configurable # of iterations (Xiaoyu Yao via aw)\n",
      "commitDate": "11/02/15 8:10 AM",
      "commitName": "b94c1117a28e996adee68fe0e181eb6f536289f4",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "06/11/14 5:48 PM",
      "commitNameOld": "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 96.6,
      "commitsBetweenForRepo": 668,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,79 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n       double threshold \u003d Parameters.DEFAULT.threshold;\n+      int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n       Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n       Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                   \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n                   + Arrays.toString(args));\n               if (\"-f\".equalsIgnoreCase(args[i])) {\n                 checkArgument(++i \u003c args.length,\n                     \"File containing nodes to exclude is not specified: args \u003d \"\n                     + Arrays.toString(args));\n                 nodesTobeExcluded \u003d Util.getHostListFromFile(args[i], \"exclude\");\n               } else {\n                 nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n               }\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n                 + Arrays.toString(args));\n               if (\"-f\".equalsIgnoreCase(args[i])) {\n                 checkArgument(++i \u003c args.length,\n                     \"File containing nodes to include is not specified: args \u003d \"\n                     + Arrays.toString(args));\n                 nodesTobeIncluded \u003d Util.getHostListFromFile(args[i], \"include\");\n                } else {\n                 nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n               }\n+            } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n+              checkArgument(++i \u003c args.length,\n+                  \"idleiterations value is missing: args \u003d \" + Arrays.toString(args));\n+              maxIdleIteration \u003d Integer.parseInt(args[i]);\n+              LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n           checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n               \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n       \n-      return new Parameters(policy, threshold, nodesTobeExcluded, nodesTobeIncluded);\n+      return new Parameters(policy, threshold, maxIdleIteration, nodesTobeExcluded, nodesTobeIncluded);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n      double threshold \u003d Parameters.DEFAULT.threshold;\n      int maxIdleIteration \u003d Parameters.DEFAULT.maxIdleIteration;\n      Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n      Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n                  + Arrays.toString(args));\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                checkArgument(++i \u003c args.length,\n                    \"File containing nodes to exclude is not specified: args \u003d \"\n                    + Arrays.toString(args));\n                nodesTobeExcluded \u003d Util.getHostListFromFile(args[i], \"exclude\");\n              } else {\n                nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n              }\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n                + Arrays.toString(args));\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                checkArgument(++i \u003c args.length,\n                    \"File containing nodes to include is not specified: args \u003d \"\n                    + Arrays.toString(args));\n                nodesTobeIncluded \u003d Util.getHostListFromFile(args[i], \"include\");\n               } else {\n                nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n              }\n            } else if (\"-idleiterations\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"idleiterations value is missing: args \u003d \" + Arrays.toString(args));\n              maxIdleIteration \u003d Integer.parseInt(args[i]);\n              LOG.info(\"Using a idleiterations of \" + maxIdleIteration);\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold, maxIdleIteration, nodesTobeExcluded, nodesTobeIncluded);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "c3cf331dc91e2beef2afeed11105084843b02858": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6828. Separate block replica dispatching from Balancer. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 2:33 PM",
      "commitName": "c3cf331dc91e2beef2afeed11105084843b02858",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "07/08/14 12:18 AM",
      "commitNameOld": "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.59,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n       double threshold \u003d Parameters.DEFAULT.threshold;\n       Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n       Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                   \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n                   + Arrays.toString(args));\n               if (\"-f\".equalsIgnoreCase(args[i])) {\n                 checkArgument(++i \u003c args.length,\n                     \"File containing nodes to exclude is not specified: args \u003d \"\n                     + Arrays.toString(args));\n-                nodesTobeExcluded \u003d Util.getHostListFromFile(args[i]);\n+                nodesTobeExcluded \u003d Util.getHostListFromFile(args[i], \"exclude\");\n               } else {\n                 nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n               }\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n               checkArgument(++i \u003c args.length,\n                 \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n                 + Arrays.toString(args));\n               if (\"-f\".equalsIgnoreCase(args[i])) {\n                 checkArgument(++i \u003c args.length,\n                     \"File containing nodes to include is not specified: args \u003d \"\n                     + Arrays.toString(args));\n-                nodesTobeIncluded \u003d Util.getHostListFromFile(args[i]);\n+                nodesTobeIncluded \u003d Util.getHostListFromFile(args[i], \"include\");\n                } else {\n                 nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n               }\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n           checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n               \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n       \n       return new Parameters(policy, threshold, nodesTobeExcluded, nodesTobeIncluded);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n      double threshold \u003d Parameters.DEFAULT.threshold;\n      Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n      Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n                  + Arrays.toString(args));\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                checkArgument(++i \u003c args.length,\n                    \"File containing nodes to exclude is not specified: args \u003d \"\n                    + Arrays.toString(args));\n                nodesTobeExcluded \u003d Util.getHostListFromFile(args[i], \"exclude\");\n              } else {\n                nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n              }\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n                + Arrays.toString(args));\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                checkArgument(++i \u003c args.length,\n                    \"File containing nodes to include is not specified: args \u003d \"\n                    + Arrays.toString(args));\n                nodesTobeIncluded \u003d Util.getHostListFromFile(args[i], \"include\");\n               } else {\n                nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold, nodesTobeExcluded, nodesTobeIncluded);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "7e12b1912f8cdbe6d88ac0b8eb71d7c4dc1bf78e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6796. Improve the argument check during balancer command line parsing.  Contributed by Benoy Antony\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 7:12 AM",
      "commitName": "7e12b1912f8cdbe6d88ac0b8eb71d7c4dc1bf78e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "31/07/14 6:05 PM",
      "commitNameOld": "b8597e6a10b2e8df1bee4e8ce0c8be345f7e007d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.55,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,73 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n       double threshold \u003d Parameters.DEFAULT.threshold;\n       Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n       Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n-            checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n-              i++;\n+              checkArgument(++i \u003c args.length,\n+                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n-              i++;\n+              checkArgument(++i \u003c args.length,\n+                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n-              i++;\n+              checkArgument(++i \u003c args.length,\n+                  \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n+                  + Arrays.toString(args));\n               if (\"-f\".equalsIgnoreCase(args[i])) {\n-                nodesTobeExcluded \u003d Util.getHostListFromFile(args[++i]);\n+                checkArgument(++i \u003c args.length,\n+                    \"File containing nodes to exclude is not specified: args \u003d \"\n+                    + Arrays.toString(args));\n+                nodesTobeExcluded \u003d Util.getHostListFromFile(args[i]);\n               } else {\n                 nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n               }\n             } else if (\"-include\".equalsIgnoreCase(args[i])) {\n-              i++;\n+              checkArgument(++i \u003c args.length,\n+                \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n+                + Arrays.toString(args));\n               if (\"-f\".equalsIgnoreCase(args[i])) {\n-                nodesTobeIncluded \u003d Util.getHostListFromFile(args[++i]);\n+                checkArgument(++i \u003c args.length,\n+                    \"File containing nodes to include is not specified: args \u003d \"\n+                    + Arrays.toString(args));\n+                nodesTobeIncluded \u003d Util.getHostListFromFile(args[i]);\n                } else {\n                 nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n               }\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n-          if (!nodesTobeExcluded.isEmpty() \u0026\u0026 !nodesTobeIncluded.isEmpty()) {\n-            System.err.println(\n-                \"-exclude and -include options cannot be specified together.\");\n-            throw new IllegalArgumentException(\n-                \"-exclude and -include options cannot be specified together.\");\n-          }\n+          checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n+              \"-exclude and -include options cannot be specified together.\");\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n       \n       return new Parameters(policy, threshold, nodesTobeExcluded, nodesTobeIncluded);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n      double threshold \u003d Parameters.DEFAULT.threshold;\n      Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n      Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Threshold value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"Policy value is missing: args \u003d \" + Arrays.toString(args));\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                  \"List of nodes to exclude | -f \u003cfilename\u003e is missing: args \u003d \"\n                  + Arrays.toString(args));\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                checkArgument(++i \u003c args.length,\n                    \"File containing nodes to exclude is not specified: args \u003d \"\n                    + Arrays.toString(args));\n                nodesTobeExcluded \u003d Util.getHostListFromFile(args[i]);\n              } else {\n                nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n              }\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              checkArgument(++i \u003c args.length,\n                \"List of nodes to include | -f \u003cfilename\u003e is missing: args \u003d \"\n                + Arrays.toString(args));\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                checkArgument(++i \u003c args.length,\n                    \"File containing nodes to include is not specified: args \u003d \"\n                    + Arrays.toString(args));\n                nodesTobeIncluded \u003d Util.getHostListFromFile(args[i]);\n               } else {\n                nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),\n              \"-exclude and -include options cannot be specified together.\");\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold, nodesTobeExcluded, nodesTobeIncluded);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "b8b8f3f5e7214d6fcfc30e1b94ff097e52868f4f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6441. Add ability to exclude/include specific datanodes while balancing. (Contributed by Benoy Antony and Yu Li)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/14 11:02 PM",
      "commitName": "b8b8f3f5e7214d6fcfc30e1b94ff097e52868f4f",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/07/14 12:41 AM",
      "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 8.93,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,66 @@\n     static Parameters parse(String[] args) {\n-      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n-      double threshold \u003d Parameters.DEFALUT.threshold;\n+      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n+      double threshold \u003d Parameters.DEFAULT.threshold;\n+      Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n+      Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n+            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n+              i++;\n+              if (\"-f\".equalsIgnoreCase(args[i])) {\n+                nodesTobeExcluded \u003d Util.getHostListFromFile(args[++i]);\n+              } else {\n+                nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n+              }\n+            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n+              i++;\n+              if (\"-f\".equalsIgnoreCase(args[i])) {\n+                nodesTobeIncluded \u003d Util.getHostListFromFile(args[++i]);\n+               } else {\n+                nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n+              }\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n+          if (!nodesTobeExcluded.isEmpty() \u0026\u0026 !nodesTobeIncluded.isEmpty()) {\n+            System.err.println(\n+                \"-exclude and -include options cannot be specified together.\");\n+            throw new IllegalArgumentException(\n+                \"-exclude and -include options cannot be specified together.\");\n+          }\n         } catch(RuntimeException e) {\n           printUsage(System.err);\n           throw e;\n         }\n       }\n       \n-      return new Parameters(policy, threshold);\n+      return new Parameters(policy, threshold, nodesTobeExcluded, nodesTobeIncluded);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFAULT.policy;\n      double threshold \u003d Parameters.DEFAULT.threshold;\n      Set\u003cString\u003e nodesTobeExcluded \u003d Parameters.DEFAULT.nodesToBeExcluded;\n      Set\u003cString\u003e nodesTobeIncluded \u003d Parameters.DEFAULT.nodesToBeIncluded;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else if (\"-exclude\".equalsIgnoreCase(args[i])) {\n              i++;\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                nodesTobeExcluded \u003d Util.getHostListFromFile(args[++i]);\n              } else {\n                nodesTobeExcluded \u003d Util.parseHostList(args[i]);\n              }\n            } else if (\"-include\".equalsIgnoreCase(args[i])) {\n              i++;\n              if (\"-f\".equalsIgnoreCase(args[i])) {\n                nodesTobeIncluded \u003d Util.getHostListFromFile(args[++i]);\n               } else {\n                nodesTobeIncluded \u003d Util.parseHostList(args[i]);\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n          if (!nodesTobeExcluded.isEmpty() \u0026\u0026 !nodesTobeIncluded.isEmpty()) {\n            System.err.println(\n                \"-exclude and -include options cannot be specified together.\");\n            throw new IllegalArgumentException(\n                \"-exclude and -include options cannot be specified together.\");\n          }\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold, nodesTobeExcluded, nodesTobeIncluded);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "28e87740c5797e87a9038d7f151c8b21a5b04592": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3723. Add support -h, -help to all the commands. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:28 PM",
      "commitName": "28e87740c5797e87a9038d7f151c8b21a5b04592",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "14/08/12 5:25 PM",
      "commitNameOld": "231a52a7dfa73f7f302cc3bf671d433312373873",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n       double threshold \u003d Parameters.DEFALUT.threshold;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));           \n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n         } catch(RuntimeException e) {\n-          printUsage();\n+          printUsage(System.err);\n           throw e;\n         }\n       }\n       \n       return new Parameters(policy, threshold);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n      double threshold \u003d Parameters.DEFALUT.threshold;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));           \n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "231a52a7dfa73f7f302cc3bf671d433312373873": {
      "type": "Ybodychange",
      "commitMessage": "Reverting previous incomplete change r1373170 for HDFS-3723\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373172 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:25 PM",
      "commitName": "231a52a7dfa73f7f302cc3bf671d433312373873",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "14/08/12 5:03 PM",
      "commitNameOld": "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n       double threshold \u003d Parameters.DEFALUT.threshold;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));           \n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n         } catch(RuntimeException e) {\n-          printUsage(System.err);\n+          printUsage();\n           throw e;\n         }\n       }\n       \n       return new Parameters(policy, threshold);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n      double threshold \u003d Parameters.DEFALUT.threshold;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));           \n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n        } catch(RuntimeException e) {\n          printUsage();\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3723. Add support -h, -help to all the commands. Contributed by Jing Zhao.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373170 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:03 PM",
      "commitName": "f026d8bb1ba6f9b059db5526f1fb1261f818ffd0",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "07/08/12 9:40 AM",
      "commitNameOld": "9b4a7900c7dfc0590316eedaa97144f938885651",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 7.31,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n       double threshold \u003d Parameters.DEFALUT.threshold;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));           \n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n         } catch(RuntimeException e) {\n-          printUsage();\n+          printUsage(System.err);\n           throw e;\n         }\n       }\n       \n       return new Parameters(policy, threshold);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n      double threshold \u003d Parameters.DEFALUT.threshold;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));           \n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n        } catch(RuntimeException e) {\n          printUsage(System.err);\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "07295260b10cd2376660a673ceb9d8ce0570b528": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3482. hdfs balancer throws ArrayIndexOutOfBoundsException if option is specified without values. Contributed by Madhukara Phatak. \n\nSubmitted by:\tMadhukara Phatak.\nReviewed by:\tUma Maheswara Rao G.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/12 11:39 AM",
      "commitName": "07295260b10cd2376660a673ceb9d8ce0570b528",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "15/05/12 12:03 PM",
      "commitNameOld": "7428aeca8666aeaf5f6682efbdb5349f44d1753e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 53.98,
      "commitsBetweenForRepo": 243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n       double threshold \u003d Parameters.DEFALUT.threshold;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n+            checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));           \n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n                 if (threshold \u003c 1 || threshold \u003e 100) {\n                   throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\n                     \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n         } catch(RuntimeException e) {\n           printUsage();\n           throw e;\n         }\n       }\n       \n       return new Parameters(policy, threshold);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n      double threshold \u003d Parameters.DEFALUT.threshold;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            checkArgument(args.length \u003e\u003d 2, \"args \u003d \" + Arrays.toString(args));           \n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n        } catch(RuntimeException e) {\n          printUsage();\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "d37ec9d09e02f16396c296e72ff8c1b7c3e6ed10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3286. When the threshold value for balancer is zero, unexpected output is displayed. Contributed by Ashish Singhi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332531 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/12 11:44 PM",
      "commitName": "d37ec9d09e02f16396c296e72ff8c1b7c3e6ed10",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "01/04/12 3:12 PM",
      "commitNameOld": "be7dd8333a7e56e732171db0781786987de03195",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 29.36,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     static Parameters parse(String[] args) {\n       BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n       double threshold \u003d Parameters.DEFALUT.threshold;\n \n       if (args !\u003d null) {\n         try {\n           for(int i \u003d 0; i \u003c args.length; i++) {\n             if (\"-threshold\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 threshold \u003d Double.parseDouble(args[i]);\n-                if (threshold \u003c 0 || threshold \u003e 100) {\n-                  throw new NumberFormatException(\n+                if (threshold \u003c 1 || threshold \u003e 100) {\n+                  throw new IllegalArgumentException(\n                       \"Number out of range: threshold \u003d \" + threshold);\n                 }\n                 LOG.info( \"Using a threshold of \" + threshold );\n-              } catch(NumberFormatException e) {\n+              } catch(IllegalArgumentException e) {\n                 System.err.println(\n-                    \"Expecting a number in the range of [0.0, 100.0]: \"\n+                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                     + args[i]);\n                 throw e;\n               }\n             } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n               i++;\n               try {\n                 policy \u003d BalancingPolicy.parse(args[i]);\n               } catch(IllegalArgumentException e) {\n                 System.err.println(\"Illegal policy name: \" + args[i]);\n                 throw e;\n               }\n             } else {\n               throw new IllegalArgumentException(\"args \u003d \"\n                   + Arrays.toString(args));\n             }\n           }\n         } catch(RuntimeException e) {\n           printUsage();\n           throw e;\n         }\n       }\n       \n       return new Parameters(policy, threshold);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n      double threshold \u003d Parameters.DEFALUT.threshold;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 1 || threshold \u003e 100) {\n                  throw new IllegalArgumentException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(IllegalArgumentException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [1.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n        } catch(RuntimeException e) {\n          printUsage();\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n      double threshold \u003d Parameters.DEFALUT.threshold;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 0 || threshold \u003e 100) {\n                  throw new NumberFormatException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(NumberFormatException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [0.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n        } catch(RuntimeException e) {\n          printUsage();\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n      double threshold \u003d Parameters.DEFALUT.threshold;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 0 || threshold \u003e 100) {\n                  throw new NumberFormatException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(NumberFormatException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [0.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n        } catch(RuntimeException e) {\n          printUsage();\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold);\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,43 @@\n+    static Parameters parse(String[] args) {\n+      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n+      double threshold \u003d Parameters.DEFALUT.threshold;\n+\n+      if (args !\u003d null) {\n+        try {\n+          for(int i \u003d 0; i \u003c args.length; i++) {\n+            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n+              i++;\n+              try {\n+                threshold \u003d Double.parseDouble(args[i]);\n+                if (threshold \u003c 0 || threshold \u003e 100) {\n+                  throw new NumberFormatException(\n+                      \"Number out of range: threshold \u003d \" + threshold);\n+                }\n+                LOG.info( \"Using a threshold of \" + threshold );\n+              } catch(NumberFormatException e) {\n+                System.err.println(\n+                    \"Expecting a number in the range of [0.0, 100.0]: \"\n+                    + args[i]);\n+                throw e;\n+              }\n+            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n+              i++;\n+              try {\n+                policy \u003d BalancingPolicy.parse(args[i]);\n+              } catch(IllegalArgumentException e) {\n+                System.err.println(\"Illegal policy name: \" + args[i]);\n+                throw e;\n+              }\n+            } else {\n+              throw new IllegalArgumentException(\"args \u003d \"\n+                  + Arrays.toString(args));\n+            }\n+          }\n+        } catch(RuntimeException e) {\n+          printUsage();\n+          throw e;\n+        }\n+      }\n+      \n+      return new Parameters(policy, threshold);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    static Parameters parse(String[] args) {\n      BalancingPolicy policy \u003d Parameters.DEFALUT.policy;\n      double threshold \u003d Parameters.DEFALUT.threshold;\n\n      if (args !\u003d null) {\n        try {\n          for(int i \u003d 0; i \u003c args.length; i++) {\n            if (\"-threshold\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                threshold \u003d Double.parseDouble(args[i]);\n                if (threshold \u003c 0 || threshold \u003e 100) {\n                  throw new NumberFormatException(\n                      \"Number out of range: threshold \u003d \" + threshold);\n                }\n                LOG.info( \"Using a threshold of \" + threshold );\n              } catch(NumberFormatException e) {\n                System.err.println(\n                    \"Expecting a number in the range of [0.0, 100.0]: \"\n                    + args[i]);\n                throw e;\n              }\n            } else if (\"-policy\".equalsIgnoreCase(args[i])) {\n              i++;\n              try {\n                policy \u003d BalancingPolicy.parse(args[i]);\n              } catch(IllegalArgumentException e) {\n                System.err.println(\"Illegal policy name: \" + args[i]);\n                throw e;\n              }\n            } else {\n              throw new IllegalArgumentException(\"args \u003d \"\n                  + Arrays.toString(args));\n            }\n          }\n        } catch(RuntimeException e) {\n          printUsage();\n          throw e;\n        }\n      }\n      \n      return new Parameters(policy, threshold);\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
    }
  }
}