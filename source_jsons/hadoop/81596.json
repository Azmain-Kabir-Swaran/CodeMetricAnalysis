{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VersionUtil.java",
  "functionName": "compareVersions",
  "functionId": "compareVersions___version1-String__version2-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionUtil.java",
  "functionStartLine": 39,
  "functionEndLine": 43,
  "numCommitsSeen": 10,
  "timeTaken": 1999,
  "changeHistory": [
    "e21a03f7175dd2c563adc252de2574bd82c9e55e",
    "b75f0187c836aea2a95bac08e77f8802d7dbd4bd",
    "c21bd72a2f1ff9de49dad102e43788f2667e9c49",
    "1675c18ded4ae7a03c2236a773f4f4b6c8057af3",
    "551468385cb4522ef99dab6595a8dfc8b5a617ec",
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7"
  ],
  "changeHistoryShort": {
    "e21a03f7175dd2c563adc252de2574bd82c9e55e": "Ybodychange",
    "b75f0187c836aea2a95bac08e77f8802d7dbd4bd": "Ybodychange",
    "c21bd72a2f1ff9de49dad102e43788f2667e9c49": "Yfilerename",
    "1675c18ded4ae7a03c2236a773f4f4b6c8057af3": "Yfilerename",
    "551468385cb4522ef99dab6595a8dfc8b5a617ec": "Yfilerename",
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e21a03f7175dd2c563adc252de2574bd82c9e55e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10250. VersionUtil returns wrong value when comparing two versions. Contributed by Yongjun Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 1:36 PM",
      "commitName": "e21a03f7175dd2c563adc252de2574bd82c9e55e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "09/05/12 5:30 PM",
      "commitNameOld": "b75f0187c836aea2a95bac08e77f8802d7dbd4bd",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 627.88,
      "commitsBetweenForRepo": 3636,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,5 @@\n   public static int compareVersions(String version1, String version2) {\n-    boolean isSnapshot1 \u003d version1.endsWith(SNAPSHOT_SUFFIX);\n-    boolean isSnapshot2 \u003d version2.endsWith(SNAPSHOT_SUFFIX);\n-    version1 \u003d stripSnapshotSuffix(version1);\n-    version2 \u003d stripSnapshotSuffix(version2);\n-    \n-    String[] version1Parts \u003d version1.split(\"\\\\.\");\n-    String[] version2Parts \u003d version2.split(\"\\\\.\");\n-    \n-    for (int i \u003d 0; i \u003c version1Parts.length \u0026\u0026 i \u003c version2Parts.length; i++) {\n-      String component1 \u003d version1Parts[i];\n-      String component2 \u003d version2Parts[i];\n-      if (!component1.equals(component2)) {\n-        Matcher matcher1 \u003d COMPONENT_GROUPS.matcher(component1);\n-        Matcher matcher2 \u003d COMPONENT_GROUPS.matcher(component2);\n-        \n-        while (matcher1.find() \u0026\u0026 matcher2.find()) {\n-          String group1 \u003d matcher1.group();\n-          String group2 \u003d matcher2.group();\n-          if (!group1.equals(group2)) {\n-            if (isNumeric(group1) \u0026\u0026 isNumeric(group2)) {\n-              return Integer.parseInt(group1) - Integer.parseInt(group2);\n-            } else if (!isNumeric(group1) \u0026\u0026 !isNumeric(group2)) {\n-              return group1.compareTo(group2);\n-            } else {\n-              return isNumeric(group1) ? -1 : 1;\n-            }\n-          }\n-        }\n-        return component1.length() - component2.length();\n-      }\n-    }\n-    \n-    return ComparisonChain.start()\n-      .compare(version1Parts.length, version2Parts.length)\n-      .compare(isSnapshot2, isSnapshot1)\n-      .result();\n+    ComparableVersion v1 \u003d new ComparableVersion(version1);\n+    ComparableVersion v2 \u003d new ComparableVersion(version2);\n+    return v1.compareTo(v2);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int compareVersions(String version1, String version2) {\n    ComparableVersion v1 \u003d new ComparableVersion(version1);\n    ComparableVersion v2 \u003d new ComparableVersion(version2);\n    return v1.compareTo(v2);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionUtil.java",
      "extendedDetails": {}
    },
    "b75f0187c836aea2a95bac08e77f8802d7dbd4bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3341, HADOOP-8340. SNAPSHOT build versions should compare as less than their eventual release. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336459 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/12 5:30 PM",
      "commitName": "b75f0187c836aea2a95bac08e77f8802d7dbd4bd",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "17/04/12 10:06 AM",
      "commitNameOld": "c21bd72a2f1ff9de49dad102e43788f2667e9c49",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 22.31,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,38 @@\n   public static int compareVersions(String version1, String version2) {\n+    boolean isSnapshot1 \u003d version1.endsWith(SNAPSHOT_SUFFIX);\n+    boolean isSnapshot2 \u003d version2.endsWith(SNAPSHOT_SUFFIX);\n+    version1 \u003d stripSnapshotSuffix(version1);\n+    version2 \u003d stripSnapshotSuffix(version2);\n+    \n     String[] version1Parts \u003d version1.split(\"\\\\.\");\n     String[] version2Parts \u003d version2.split(\"\\\\.\");\n     \n     for (int i \u003d 0; i \u003c version1Parts.length \u0026\u0026 i \u003c version2Parts.length; i++) {\n       String component1 \u003d version1Parts[i];\n       String component2 \u003d version2Parts[i];\n       if (!component1.equals(component2)) {\n         Matcher matcher1 \u003d COMPONENT_GROUPS.matcher(component1);\n         Matcher matcher2 \u003d COMPONENT_GROUPS.matcher(component2);\n         \n         while (matcher1.find() \u0026\u0026 matcher2.find()) {\n           String group1 \u003d matcher1.group();\n           String group2 \u003d matcher2.group();\n           if (!group1.equals(group2)) {\n             if (isNumeric(group1) \u0026\u0026 isNumeric(group2)) {\n               return Integer.parseInt(group1) - Integer.parseInt(group2);\n             } else if (!isNumeric(group1) \u0026\u0026 !isNumeric(group2)) {\n               return group1.compareTo(group2);\n             } else {\n               return isNumeric(group1) ? -1 : 1;\n             }\n           }\n         }\n         return component1.length() - component2.length();\n       }\n     }\n-    return version1Parts.length - version2Parts.length;\n+    \n+    return ComparisonChain.start()\n+      .compare(version1Parts.length, version2Parts.length)\n+      .compare(isSnapshot2, isSnapshot1)\n+      .result();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int compareVersions(String version1, String version2) {\n    boolean isSnapshot1 \u003d version1.endsWith(SNAPSHOT_SUFFIX);\n    boolean isSnapshot2 \u003d version2.endsWith(SNAPSHOT_SUFFIX);\n    version1 \u003d stripSnapshotSuffix(version1);\n    version2 \u003d stripSnapshotSuffix(version2);\n    \n    String[] version1Parts \u003d version1.split(\"\\\\.\");\n    String[] version2Parts \u003d version2.split(\"\\\\.\");\n    \n    for (int i \u003d 0; i \u003c version1Parts.length \u0026\u0026 i \u003c version2Parts.length; i++) {\n      String component1 \u003d version1Parts[i];\n      String component2 \u003d version2Parts[i];\n      if (!component1.equals(component2)) {\n        Matcher matcher1 \u003d COMPONENT_GROUPS.matcher(component1);\n        Matcher matcher2 \u003d COMPONENT_GROUPS.matcher(component2);\n        \n        while (matcher1.find() \u0026\u0026 matcher2.find()) {\n          String group1 \u003d matcher1.group();\n          String group2 \u003d matcher2.group();\n          if (!group1.equals(group2)) {\n            if (isNumeric(group1) \u0026\u0026 isNumeric(group2)) {\n              return Integer.parseInt(group1) - Integer.parseInt(group2);\n            } else if (!isNumeric(group1) \u0026\u0026 !isNumeric(group2)) {\n              return group1.compareTo(group2);\n            } else {\n              return isNumeric(group1) ? -1 : 1;\n            }\n          }\n        }\n        return component1.length() - component2.length();\n      }\n    }\n    \n    return ComparisonChain.start()\n      .compare(version1Parts.length, version2Parts.length)\n      .compare(isSnapshot2, isSnapshot1)\n      .result();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionUtil.java",
      "extendedDetails": {}
    },
    "c21bd72a2f1ff9de49dad102e43788f2667e9c49": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-8280. Move VersionUtil/TestVersionUtil and GenericTestUtils from HDFS into Common. Contributed by Ahmed Radwan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327182 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 10:06 AM",
      "commitName": "c21bd72a2f1ff9de49dad102e43788f2667e9c49",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "17/04/12 9:49 AM",
      "commitNameOld": "1675c18ded4ae7a03c2236a773f4f4b6c8057af3",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int compareVersions(String version1, String version2) {\n    String[] version1Parts \u003d version1.split(\"\\\\.\");\n    String[] version2Parts \u003d version2.split(\"\\\\.\");\n    \n    for (int i \u003d 0; i \u003c version1Parts.length \u0026\u0026 i \u003c version2Parts.length; i++) {\n      String component1 \u003d version1Parts[i];\n      String component2 \u003d version2Parts[i];\n      if (!component1.equals(component2)) {\n        Matcher matcher1 \u003d COMPONENT_GROUPS.matcher(component1);\n        Matcher matcher2 \u003d COMPONENT_GROUPS.matcher(component2);\n        \n        while (matcher1.find() \u0026\u0026 matcher2.find()) {\n          String group1 \u003d matcher1.group();\n          String group2 \u003d matcher2.group();\n          if (!group1.equals(group2)) {\n            if (isNumeric(group1) \u0026\u0026 isNumeric(group2)) {\n              return Integer.parseInt(group1) - Integer.parseInt(group2);\n            } else if (!isNumeric(group1) \u0026\u0026 !isNumeric(group2)) {\n              return group1.compareTo(group2);\n            } else {\n              return isNumeric(group1) ? -1 : 1;\n            }\n          }\n        }\n        return component1.length() - component2.length();\n      }\n    }\n    return version1Parts.length - version2Parts.length;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/VersionUtil.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionUtil.java"
      }
    },
    "1675c18ded4ae7a03c2236a773f4f4b6c8057af3": {
      "type": "Yfilerename",
      "commitMessage": "Revert HADOOP-8280 so it can be recommitted using `svn mv\u0027\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327179 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 9:49 AM",
      "commitName": "1675c18ded4ae7a03c2236a773f4f4b6c8057af3",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "17/04/12 8:23 AM",
      "commitNameOld": "c7fb5ad40e2e96f70a90cd78fea814b63274742d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int compareVersions(String version1, String version2) {\n    String[] version1Parts \u003d version1.split(\"\\\\.\");\n    String[] version2Parts \u003d version2.split(\"\\\\.\");\n    \n    for (int i \u003d 0; i \u003c version1Parts.length \u0026\u0026 i \u003c version2Parts.length; i++) {\n      String component1 \u003d version1Parts[i];\n      String component2 \u003d version2Parts[i];\n      if (!component1.equals(component2)) {\n        Matcher matcher1 \u003d COMPONENT_GROUPS.matcher(component1);\n        Matcher matcher2 \u003d COMPONENT_GROUPS.matcher(component2);\n        \n        while (matcher1.find() \u0026\u0026 matcher2.find()) {\n          String group1 \u003d matcher1.group();\n          String group2 \u003d matcher2.group();\n          if (!group1.equals(group2)) {\n            if (isNumeric(group1) \u0026\u0026 isNumeric(group2)) {\n              return Integer.parseInt(group1) - Integer.parseInt(group2);\n            } else if (!isNumeric(group1) \u0026\u0026 !isNumeric(group2)) {\n              return group1.compareTo(group2);\n            } else {\n              return isNumeric(group1) ? -1 : 1;\n            }\n          }\n        }\n        return component1.length() - component2.length();\n      }\n    }\n    return version1Parts.length - version2Parts.length;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/VersionUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionUtil.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/VersionUtil.java"
      }
    },
    "551468385cb4522ef99dab6595a8dfc8b5a617ec": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-8280. Move VersionUtil/TestVersionUtil and GenericTestUtils from HDFS into Common. Contributed by Ahmed Radwan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1326727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/04/12 11:28 AM",
      "commitName": "551468385cb4522ef99dab6595a8dfc8b5a617ec",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "16/04/12 11:02 AM",
      "commitNameOld": "24d6a8b29ceac12337ab94d7d4c042094e107560",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int compareVersions(String version1, String version2) {\n    String[] version1Parts \u003d version1.split(\"\\\\.\");\n    String[] version2Parts \u003d version2.split(\"\\\\.\");\n    \n    for (int i \u003d 0; i \u003c version1Parts.length \u0026\u0026 i \u003c version2Parts.length; i++) {\n      String component1 \u003d version1Parts[i];\n      String component2 \u003d version2Parts[i];\n      if (!component1.equals(component2)) {\n        Matcher matcher1 \u003d COMPONENT_GROUPS.matcher(component1);\n        Matcher matcher2 \u003d COMPONENT_GROUPS.matcher(component2);\n        \n        while (matcher1.find() \u0026\u0026 matcher2.find()) {\n          String group1 \u003d matcher1.group();\n          String group2 \u003d matcher2.group();\n          if (!group1.equals(group2)) {\n            if (isNumeric(group1) \u0026\u0026 isNumeric(group2)) {\n              return Integer.parseInt(group1) - Integer.parseInt(group2);\n            } else if (!isNumeric(group1) \u0026\u0026 !isNumeric(group2)) {\n              return group1.compareTo(group2);\n            } else {\n              return isNumeric(group1) ? -1 : 1;\n            }\n          }\n        }\n        return component1.length() - component2.length();\n      }\n    }\n    return version1Parts.length - version2Parts.length;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/VersionUtil.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/VersionUtil.java"
      }
    },
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2983. Relax the build version check to permit rolling upgrades within a release. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1325110 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/12 8:36 PM",
      "commitName": "7f427646dfe80f9a4dfac0a979709f367e74a7e7",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,29 @@\n+  public static int compareVersions(String version1, String version2) {\n+    String[] version1Parts \u003d version1.split(\"\\\\.\");\n+    String[] version2Parts \u003d version2.split(\"\\\\.\");\n+    \n+    for (int i \u003d 0; i \u003c version1Parts.length \u0026\u0026 i \u003c version2Parts.length; i++) {\n+      String component1 \u003d version1Parts[i];\n+      String component2 \u003d version2Parts[i];\n+      if (!component1.equals(component2)) {\n+        Matcher matcher1 \u003d COMPONENT_GROUPS.matcher(component1);\n+        Matcher matcher2 \u003d COMPONENT_GROUPS.matcher(component2);\n+        \n+        while (matcher1.find() \u0026\u0026 matcher2.find()) {\n+          String group1 \u003d matcher1.group();\n+          String group2 \u003d matcher2.group();\n+          if (!group1.equals(group2)) {\n+            if (isNumeric(group1) \u0026\u0026 isNumeric(group2)) {\n+              return Integer.parseInt(group1) - Integer.parseInt(group2);\n+            } else if (!isNumeric(group1) \u0026\u0026 !isNumeric(group2)) {\n+              return group1.compareTo(group2);\n+            } else {\n+              return isNumeric(group1) ? -1 : 1;\n+            }\n+          }\n+        }\n+        return component1.length() - component2.length();\n+      }\n+    }\n+    return version1Parts.length - version2Parts.length;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int compareVersions(String version1, String version2) {\n    String[] version1Parts \u003d version1.split(\"\\\\.\");\n    String[] version2Parts \u003d version2.split(\"\\\\.\");\n    \n    for (int i \u003d 0; i \u003c version1Parts.length \u0026\u0026 i \u003c version2Parts.length; i++) {\n      String component1 \u003d version1Parts[i];\n      String component2 \u003d version2Parts[i];\n      if (!component1.equals(component2)) {\n        Matcher matcher1 \u003d COMPONENT_GROUPS.matcher(component1);\n        Matcher matcher2 \u003d COMPONENT_GROUPS.matcher(component2);\n        \n        while (matcher1.find() \u0026\u0026 matcher2.find()) {\n          String group1 \u003d matcher1.group();\n          String group2 \u003d matcher2.group();\n          if (!group1.equals(group2)) {\n            if (isNumeric(group1) \u0026\u0026 isNumeric(group2)) {\n              return Integer.parseInt(group1) - Integer.parseInt(group2);\n            } else if (!isNumeric(group1) \u0026\u0026 !isNumeric(group2)) {\n              return group1.compareTo(group2);\n            } else {\n              return isNumeric(group1) ? -1 : 1;\n            }\n          }\n        }\n        return component1.length() - component2.length();\n      }\n    }\n    return version1Parts.length - version2Parts.length;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/VersionUtil.java"
    }
  }
}