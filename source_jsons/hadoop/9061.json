{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "renameTo",
  "functionId": "renameTo___src-String(modifiers-final)__dst-String(modifiers-final)__logRetryCache-boolean__options-Options.Rename",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 3223,
  "functionEndLine": 3258,
  "numCommitsSeen": 1814,
  "timeTaken": 34313,
  "changeHistory": [
    "62c26b91fd06f505a6e64fd32a36e5e67d06fa30",
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd",
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893",
    "5f34402adae191232fe78e62990396ca07f314bb",
    "3fa33b5c2c289ceaced30c6c5451f3569110459d",
    "7817674a3a4d097b647dd77f1345787dd376d5ea",
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
    "8e253cb93030642f5a7324bad0f161cd0ad33206",
    "c95b878abf313507666ea018f9e6033c4c166e10",
    "3425ae5d7eaa27b2526d0e0c07bdfea9440359f8"
  ],
  "changeHistoryShort": {
    "62c26b91fd06f505a6e64fd32a36e5e67d06fa30": "Ybodychange",
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": "Ybodychange",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": "Ybodychange",
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ybodychange",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": "Ybodychange",
    "5f34402adae191232fe78e62990396ca07f314bb": "Ybodychange",
    "3fa33b5c2c289ceaced30c6c5451f3569110459d": "Ybodychange",
    "7817674a3a4d097b647dd77f1345787dd376d5ea": "Ybodychange",
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "8e253cb93030642f5a7324bad0f161cd0ad33206": "Ymultichange(Yparameterchange,Ybodychange)",
    "c95b878abf313507666ea018f9e6033c4c166e10": "Ybodychange",
    "3425ae5d7eaa27b2526d0e0c07bdfea9440359f8": "Ybodychange"
  },
  "changeHistoryDetails": {
    "62c26b91fd06f505a6e64fd32a36e5e67d06fa30": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15298 Fix the findbugs warnings introduced in HDFS-15217 (#1979)\n\n",
      "commitDate": "27/04/20 1:20 AM",
      "commitName": "62c26b91fd06f505a6e64fd32a36e5e67d06fa30",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "18/04/20 1:52 PM",
      "commitNameOld": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthorOld": "Toshihiro Suzuki",
      "daysBetweenCommits": 8.48,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     final String operationName \u003d \"rename\";\n     FSDirRenameOp.RenameResult res \u003d null;\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     FSPermissionChecker.setOperationType(operationName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot rename \" + src);\n         res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n             options);\n       } finally {\n         FileStatus status \u003d res !\u003d null ? res.auditStat : null;\n         writeUnlock(operationName,\n             getLockReportInfoSupplier(src, dst, status));\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName + \" (options\u003d\" +\n           Arrays.toString(options) + \")\", src, dst, null);\n       throw e;\n     }\n     getEditLog().logSync();\n-\n+    assert res !\u003d null;\n     BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n     logAuditEvent(true, operationName + \" (options\u003d\" +\n         Arrays.toString(options) + \")\", src, dst, res.auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    final String operationName \u003d \"rename\";\n    FSDirRenameOp.RenameResult res \u003d null;\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot rename \" + src);\n        res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n            options);\n      } finally {\n        FileStatus status \u003d res !\u003d null ? res.auditStat : null;\n        writeUnlock(operationName,\n            getLockReportInfoSupplier(src, dst, status));\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName + \" (options\u003d\" +\n          Arrays.toString(options) + \")\", src, dst, null);\n      throw e;\n    }\n    getEditLog().logSync();\n    assert res !\u003d null;\n    BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, operationName + \" (options\u003d\" +\n        Arrays.toString(options) + \")\", src, dst, res.auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,36 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     final String operationName \u003d \"rename\";\n     FSDirRenameOp.RenameResult res \u003d null;\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     FSPermissionChecker.setOperationType(operationName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot rename \" + src);\n         res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n             options);\n       } finally {\n-        writeUnlock(operationName);\n+        FileStatus status \u003d res !\u003d null ? res.auditStat : null;\n+        writeUnlock(operationName,\n+            getLockReportInfoSupplier(src, dst, status));\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName + \" (options\u003d\" +\n           Arrays.toString(options) + \")\", src, dst, null);\n       throw e;\n     }\n     getEditLog().logSync();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n     logAuditEvent(true, operationName + \" (options\u003d\" +\n         Arrays.toString(options) + \")\", src, dst, res.auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    final String operationName \u003d \"rename\";\n    FSDirRenameOp.RenameResult res \u003d null;\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot rename \" + src);\n        res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n            options);\n      } finally {\n        FileStatus status \u003d res !\u003d null ? res.auditStat : null;\n        writeUnlock(operationName,\n            getLockReportInfoSupplier(src, dst, status));\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName + \" (options\u003d\" +\n          Arrays.toString(options) + \")\", src, dst, null);\n      throw e;\n    }\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, operationName + \" (options\u003d\" +\n        Arrays.toString(options) + \")\", src, dst, res.auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14743. Enhance INodeAttributeProvider/ AccessControlEnforcer Interface in HDFS to support Authorization of mkdir, rm, rmdir, copy, move etc... (#1829)\n\nReviewed-by: Xiaoyu Yao \u003cxyao@apache.org\u003e",
      "commitDate": "13/03/20 11:29 AM",
      "commitName": "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/02/20 8:49 AM",
      "commitNameOld": "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 15.07,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     final String operationName \u003d \"rename\";\n     FSDirRenameOp.RenameResult res \u003d null;\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n+    FSPermissionChecker.setOperationType(operationName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot rename \" + src);\n         res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n             options);\n       } finally {\n         writeUnlock(operationName);\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName + \" (options\u003d\" +\n           Arrays.toString(options) + \")\", src, dst, null);\n       throw e;\n     }\n     getEditLog().logSync();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n     logAuditEvent(true, operationName + \" (options\u003d\" +\n         Arrays.toString(options) + \")\", src, dst, res.auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    final String operationName \u003d \"rename\";\n    FSDirRenameOp.RenameResult res \u003d null;\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot rename \" + src);\n        res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n            options);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName + \" (options\u003d\" +\n          Arrays.toString(options) + \")\", src, dst, null);\n      throw e;\n    }\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, operationName + \" (options\u003d\" +\n        Arrays.toString(options) + \")\", src, dst, res.auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11246. FSNameSystem#logAuditEvent should be called outside the read or write locks. Contributed by He Xiaoqiao, Kuhu Shukla.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nCo-authored-by: Kuhu Shukla \u003ckshukla@apache.org\u003e\n",
      "commitDate": "29/08/19 10:10 AM",
      "commitName": "f600fbb6c4987c69292faea6b5abf022bb213ffd",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "27/08/19 3:26 PM",
      "commitNameOld": "dde9399b37bffb77da17c025f0b9b673d7088bc6",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     final String operationName \u003d \"rename\";\n     FSDirRenameOp.RenameResult res \u003d null;\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n-          options);\n+      writeLock();\n+      try {\n+        checkOperation(OperationCategory.WRITE);\n+        checkNameNodeSafeMode(\"Cannot rename \" + src);\n+        res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n+            options);\n+      } finally {\n+        writeUnlock(operationName);\n+      }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName + \" (options\u003d\" +\n           Arrays.toString(options) + \")\", src, dst, null);\n       throw e;\n-    } finally {\n-      writeUnlock(operationName);\n     }\n-\n     getEditLog().logSync();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n     logAuditEvent(true, operationName + \" (options\u003d\" +\n         Arrays.toString(options) + \")\", src, dst, res.auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    final String operationName \u003d \"rename\";\n    FSDirRenameOp.RenameResult res \u003d null;\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot rename \" + src);\n        res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n            options);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName + \" (options\u003d\" +\n          Arrays.toString(options) + \")\", src, dst, null);\n      throw e;\n    }\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, operationName + \" (options\u003d\" +\n        Arrays.toString(options) + \")\", src, dst, res.auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     final String operationName \u003d \"rename\";\n     FSDirRenameOp.RenameResult res \u003d null;\n+    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n+      res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n+          options);\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName + \" (options\u003d\" +\n           Arrays.toString(options) + \")\", src, dst, null);\n       throw e;\n     } finally {\n       writeUnlock(operationName);\n     }\n \n     getEditLog().logSync();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n     logAuditEvent(true, operationName + \" (options\u003d\" +\n         Arrays.toString(options) + \")\", src, dst, res.auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    final String operationName \u003d \"rename\";\n    FSDirRenameOp.RenameResult res \u003d null;\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      res \u003d FSDirRenameOp.renameToInt(dir, pc, src, dst, logRetryCache,\n          options);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName + \" (options\u003d\" +\n          Arrays.toString(options) + \")\", src, dst, null);\n      throw e;\n    } finally {\n      writeUnlock(operationName);\n    }\n\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, operationName + \" (options\u003d\" +\n        Arrays.toString(options) + \")\", src, dst, res.auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.\n",
      "commitDate": "14/11/16 11:05 AM",
      "commitName": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "08/11/16 6:17 PM",
      "commitNameOld": "ed0bebabaaf27cd730f7f8eb002d92c9c7db327d",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n+    final String operationName \u003d \"rename\";\n     FSDirRenameOp.RenameResult res \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n       res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n     } catch (AccessControlException e) {\n-      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n-          \")\", src, dst, null);\n+      logAuditEvent(false, operationName + \" (options\u003d\" +\n+          Arrays.toString(options) + \")\", src, dst, null);\n       throw e;\n     } finally {\n-      writeUnlock();\n+      writeUnlock(operationName);\n     }\n \n     getEditLog().logSync();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n-    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n-        \")\", src, dst, res.auditStat);\n+    logAuditEvent(true, operationName + \" (options\u003d\" +\n+        Arrays.toString(options) + \")\", src, dst, res.auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    final String operationName \u003d \"rename\";\n    FSDirRenameOp.RenameResult res \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName + \" (options\u003d\" +\n          Arrays.toString(options) + \")\", src, dst, null);\n      throw e;\n    } finally {\n      writeUnlock(operationName);\n    }\n\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, operationName + \" (options\u003d\" +\n        Arrays.toString(options) + \")\", src, dst, res.auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "5f34402adae191232fe78e62990396ca07f314bb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10779. Rename does not need to re-solve destination. Contributed by Daryn Sharp.\n",
      "commitDate": "28/09/16 3:57 PM",
      "commitName": "5f34402adae191232fe78e62990396ca07f314bb",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "26/09/16 5:09 PM",
      "commitNameOld": "059058f9614613667d5385f76022294e07e140aa",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n-    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n+    FSDirRenameOp.RenameResult res \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n       res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n     } catch (AccessControlException e) {\n       logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n           \")\", src, dst, null);\n       throw e;\n     } finally {\n       writeUnlock();\n     }\n \n     getEditLog().logSync();\n \n-    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n-    HdfsFileStatus auditStat \u003d res.getValue();\n+    BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n     logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n-        \")\", src, dst, auditStat);\n+        \")\", src, dst, res.auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    FSDirRenameOp.RenameResult res \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n          \")\", src, dst, null);\n      throw e;\n    } finally {\n      writeUnlock();\n    }\n\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.collectedBlocks;\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n        \")\", src, dst, res.auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "3fa33b5c2c289ceaced30c6c5451f3569110459d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9430 Remove waitForLoadingFSImage since checkNNStartup has ensured image loaded and namenode started. (Brahma Reddy Battula via mingma)\n",
      "commitDate": "04/12/15 9:47 AM",
      "commitName": "3fa33b5c2c289ceaced30c6c5451f3569110459d",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "01/12/15 4:09 PM",
      "commitNameOld": "a49cc74b4c72195dee1dfb6f9548e5e411dff553",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.74,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n-    waitForLoadingFSImage();\n     Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n       res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n     } catch (AccessControlException e) {\n       logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n           \")\", src, dst, null);\n       throw e;\n     } finally {\n       writeUnlock();\n     }\n \n     getEditLog().logSync();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n     HdfsFileStatus auditStat \u003d res.getValue();\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n     logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n         \")\", src, dst, auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n          \")\", src, dst, null);\n      throw e;\n    } finally {\n      writeUnlock();\n    }\n\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n    HdfsFileStatus auditStat \u003d res.getValue();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n        \")\", src, dst, auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "7817674a3a4d097b647dd77f1345787dd376d5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7609. Avoid retry cache collision when Standby NameNode loading edits. Contributed by Ming Ma.\n",
      "commitDate": "29/05/15 11:05 AM",
      "commitName": "7817674a3a4d097b647dd77f1345787dd376d5ea",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/05/15 3:42 PM",
      "commitNameOld": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   void renameTo(final String src, final String dst,\n                 boolean logRetryCache, Options.Rename... options)\n       throws IOException {\n     waitForLoadingFSImage();\n-    checkOperation(OperationCategory.WRITE);\n     Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n       res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n     } catch (AccessControlException e) {\n       logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n           \")\", src, dst, null);\n       throw e;\n     } finally {\n       writeUnlock();\n     }\n \n     getEditLog().logSync();\n \n     BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n     HdfsFileStatus auditStat \u003d res.getValue();\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n \n     logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n         \")\", src, dst, auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    waitForLoadingFSImage();\n    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n          \")\", src, dst, null);\n      throw e;\n    } finally {\n      writeUnlock();\n    }\n\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n    HdfsFileStatus auditStat \u003d res.getValue();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n        \")\", src, dst, auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "01/12/14 9:48 PM",
      "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,31 @@\n-  void renameTo(final String srcArg, final String dstArg, boolean logRetryCache,\n-      Options.Rename... options) throws IOException, UnresolvedLinkException {\n-    String src \u003d srcArg;\n-    String dst \u003d dstArg;\n-    if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n-          + src + \" to \" + dst);\n-    }\n-    if (!DFSUtil.isValidName(dst)) {\n-      throw new InvalidPathException(\"Invalid name: \" + dst);\n-    }\n-    final FSPermissionChecker pc \u003d getPermissionChecker();\n-    \n+  void renameTo(final String src, final String dst,\n+                boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n+    waitForLoadingFSImage();\n     checkOperation(OperationCategory.WRITE);\n-\n-    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    HdfsFileStatus resultingStat \u003d null;\n+    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n     writeLock();\n-    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      renameToInternal(pc, src, dst, logRetryCache, collectedBlocks, options);\n-      resultingStat \u003d getAuditFileInfo(dst, false);\n+      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n+    } catch (AccessControlException e) {\n+      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n+          \")\", src, dst, null);\n+      throw e;\n     } finally {\n       writeUnlock();\n     }\n+\n     getEditLog().logSync();\n+\n+    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n+    HdfsFileStatus auditStat \u003d res.getValue();\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n-    if (resultingStat !\u003d null) {\n-      StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n-      for (Rename option : options) {\n-        cmd.append(option.value()).append(\" \");\n-      }\n-      logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n-    }\n+\n+    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n+        \")\", src, dst, auditStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    waitForLoadingFSImage();\n    checkOperation(OperationCategory.WRITE);\n    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n          \")\", src, dst, null);\n      throw e;\n    } finally {\n      writeUnlock();\n    }\n\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n    HdfsFileStatus auditStat \u003d res.getValue();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n        \")\", src, dst, auditStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), dstArg-String(modifiers-final), logRetryCache-boolean, options-Options.Rename]",
            "newValue": "[src-String(modifiers-final), dst-String(modifiers-final), logRetryCache-boolean, options-Options.Rename]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,31 @@\n-  void renameTo(final String srcArg, final String dstArg, boolean logRetryCache,\n-      Options.Rename... options) throws IOException, UnresolvedLinkException {\n-    String src \u003d srcArg;\n-    String dst \u003d dstArg;\n-    if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n-          + src + \" to \" + dst);\n-    }\n-    if (!DFSUtil.isValidName(dst)) {\n-      throw new InvalidPathException(\"Invalid name: \" + dst);\n-    }\n-    final FSPermissionChecker pc \u003d getPermissionChecker();\n-    \n+  void renameTo(final String src, final String dst,\n+                boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n+    waitForLoadingFSImage();\n     checkOperation(OperationCategory.WRITE);\n-\n-    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    HdfsFileStatus resultingStat \u003d null;\n+    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n     writeLock();\n-    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      renameToInternal(pc, src, dst, logRetryCache, collectedBlocks, options);\n-      resultingStat \u003d getAuditFileInfo(dst, false);\n+      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n+    } catch (AccessControlException e) {\n+      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n+          \")\", src, dst, null);\n+      throw e;\n     } finally {\n       writeUnlock();\n     }\n+\n     getEditLog().logSync();\n+\n+    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n+    HdfsFileStatus auditStat \u003d res.getValue();\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n-    if (resultingStat !\u003d null) {\n-      StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n-      for (Rename option : options) {\n-        cmd.append(option.value()).append(\" \");\n-      }\n-      logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n-    }\n+\n+    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n+        \")\", src, dst, auditStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    waitForLoadingFSImage();\n    checkOperation(OperationCategory.WRITE);\n    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n          \")\", src, dst, null);\n      throw e;\n    } finally {\n      writeUnlock();\n    }\n\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n    HdfsFileStatus auditStat \u003d res.getValue();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n        \")\", src, dst, auditStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[IOException, UnresolvedLinkException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,31 @@\n-  void renameTo(final String srcArg, final String dstArg, boolean logRetryCache,\n-      Options.Rename... options) throws IOException, UnresolvedLinkException {\n-    String src \u003d srcArg;\n-    String dst \u003d dstArg;\n-    if (NameNode.stateChangeLog.isDebugEnabled()) {\n-      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n-          + src + \" to \" + dst);\n-    }\n-    if (!DFSUtil.isValidName(dst)) {\n-      throw new InvalidPathException(\"Invalid name: \" + dst);\n-    }\n-    final FSPermissionChecker pc \u003d getPermissionChecker();\n-    \n+  void renameTo(final String src, final String dst,\n+                boolean logRetryCache, Options.Rename... options)\n+      throws IOException {\n+    waitForLoadingFSImage();\n     checkOperation(OperationCategory.WRITE);\n-\n-    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n-    HdfsFileStatus resultingStat \u003d null;\n+    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n     writeLock();\n-    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      src \u003d dir.resolvePath(pc, src, srcComponents);\n-      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      renameToInternal(pc, src, dst, logRetryCache, collectedBlocks, options);\n-      resultingStat \u003d getAuditFileInfo(dst, false);\n+      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n+    } catch (AccessControlException e) {\n+      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n+          \")\", src, dst, null);\n+      throw e;\n     } finally {\n       writeUnlock();\n     }\n+\n     getEditLog().logSync();\n+\n+    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n+    HdfsFileStatus auditStat \u003d res.getValue();\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n-    if (resultingStat !\u003d null) {\n-      StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n-      for (Rename option : options) {\n-        cmd.append(option.value()).append(\" \");\n-      }\n-      logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n-    }\n+\n+    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n+        \")\", src, dst, auditStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void renameTo(final String src, final String dst,\n                boolean logRetryCache, Options.Rename... options)\n      throws IOException {\n    waitForLoadingFSImage();\n    checkOperation(OperationCategory.WRITE);\n    Map.Entry\u003cBlocksMapUpdateInfo, HdfsFileStatus\u003e res \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      res \u003d FSDirRenameOp.renameToInt(dir, src, dst, logRetryCache, options);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, \"rename (options\u003d\" + Arrays.toString(options) +\n          \")\", src, dst, null);\n      throw e;\n    } finally {\n      writeUnlock();\n    }\n\n    getEditLog().logSync();\n\n    BlocksMapUpdateInfo collectedBlocks \u003d res.getKey();\n    HdfsFileStatus auditStat \u003d res.getValue();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n\n    logAuditEvent(true, \"rename (options\u003d\" + Arrays.toString(options) +\n        \")\", src, dst, auditStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "8e253cb93030642f5a7324bad0f161cd0ad33206": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
      "commitDate": "24/11/14 11:11 AM",
      "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
          "commitDate": "24/11/14 11:11 AM",
          "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/11/14 10:46 AM",
          "commitNameOld": "daacbc18d739d030822df0b75205eeb067f89850",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,43 @@\n-  void renameTo(final String srcArg, final String dstArg,\n+  void renameTo(final String srcArg, final String dstArg, boolean logRetryCache,\n       Options.Rename... options) throws IOException, UnresolvedLinkException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n           + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     \n     checkOperation(OperationCategory.WRITE);\n-    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n-    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n-      return; // Return previous response\n-    }\n+\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n     HdfsFileStatus resultingStat \u003d null;\n-    boolean success \u003d false;\n     writeLock();\n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n       src \u003d dir.resolvePath(pc, src, srcComponents);\n       dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      renameToInternal(pc, src, dst, cacheEntry !\u003d null, \n-          collectedBlocks, options);\n+      renameToInternal(pc, src, dst, logRetryCache, collectedBlocks, options);\n       resultingStat \u003d getAuditFileInfo(dst, false);\n-      success \u003d true;\n     } finally {\n       writeUnlock();\n-      RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n     if (resultingStat !\u003d null) {\n       StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n       for (Rename option : options) {\n         cmd.append(option.value()).append(\" \");\n       }\n       logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void renameTo(final String srcArg, final String dstArg, boolean logRetryCache,\n      Options.Rename... options) throws IOException, UnresolvedLinkException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n          + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    \n    checkOperation(OperationCategory.WRITE);\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    HdfsFileStatus resultingStat \u003d null;\n    writeLock();\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      src \u003d dir.resolvePath(pc, src, srcComponents);\n      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n      renameToInternal(pc, src, dst, logRetryCache, collectedBlocks, options);\n      resultingStat \u003d getAuditFileInfo(dst, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n    if (resultingStat !\u003d null) {\n      StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n      for (Rename option : options) {\n        cmd.append(option.value()).append(\" \");\n      }\n      logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), dstArg-String(modifiers-final), options-Options.Rename]",
            "newValue": "[srcArg-String(modifiers-final), dstArg-String(modifiers-final), logRetryCache-boolean, options-Options.Rename]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
          "commitDate": "24/11/14 11:11 AM",
          "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/11/14 10:46 AM",
          "commitNameOld": "daacbc18d739d030822df0b75205eeb067f89850",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,43 @@\n-  void renameTo(final String srcArg, final String dstArg,\n+  void renameTo(final String srcArg, final String dstArg, boolean logRetryCache,\n       Options.Rename... options) throws IOException, UnresolvedLinkException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n           + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     \n     checkOperation(OperationCategory.WRITE);\n-    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n-    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n-      return; // Return previous response\n-    }\n+\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n     HdfsFileStatus resultingStat \u003d null;\n-    boolean success \u003d false;\n     writeLock();\n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n       src \u003d dir.resolvePath(pc, src, srcComponents);\n       dst \u003d dir.resolvePath(pc, dst, dstComponents);\n-      renameToInternal(pc, src, dst, cacheEntry !\u003d null, \n-          collectedBlocks, options);\n+      renameToInternal(pc, src, dst, logRetryCache, collectedBlocks, options);\n       resultingStat \u003d getAuditFileInfo(dst, false);\n-      success \u003d true;\n     } finally {\n       writeUnlock();\n-      RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n     if (resultingStat !\u003d null) {\n       StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n       for (Rename option : options) {\n         cmd.append(option.value()).append(\" \");\n       }\n       logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void renameTo(final String srcArg, final String dstArg, boolean logRetryCache,\n      Options.Rename... options) throws IOException, UnresolvedLinkException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n          + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    \n    checkOperation(OperationCategory.WRITE);\n\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    HdfsFileStatus resultingStat \u003d null;\n    writeLock();\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      src \u003d dir.resolvePath(pc, src, srcComponents);\n      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n      renameToInternal(pc, src, dst, logRetryCache, collectedBlocks, options);\n      resultingStat \u003d getAuditFileInfo(dst, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n    if (resultingStat !\u003d null) {\n      StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n      for (Rename option : options) {\n        cmd.append(option.value()).append(\" \");\n      }\n      logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "c95b878abf313507666ea018f9e6033c4c166e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7415. Move FSNameSystem.resolvePath() to FSDirectory. Contributed by Haohui Mai.\n",
      "commitDate": "20/11/14 7:23 PM",
      "commitName": "c95b878abf313507666ea018f9e6033c4c166e10",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 5:33 PM",
      "commitNameOld": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   void renameTo(final String srcArg, final String dstArg,\n       Options.Rename... options) throws IOException, UnresolvedLinkException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n           + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     \n     checkOperation(OperationCategory.WRITE);\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return; // Return previous response\n     }\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n     HdfsFileStatus resultingStat \u003d null;\n     boolean success \u003d false;\n     writeLock();\n     BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n-      src \u003d resolvePath(src, srcComponents);\n-      dst \u003d resolvePath(dst, dstComponents);\n+      src \u003d dir.resolvePath(pc, src, srcComponents);\n+      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n       renameToInternal(pc, src, dst, cacheEntry !\u003d null, \n           collectedBlocks, options);\n       resultingStat \u003d getAuditFileInfo(dst, false);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n     if (!collectedBlocks.getToDeleteList().isEmpty()) {\n       removeBlocks(collectedBlocks);\n       collectedBlocks.clear();\n     }\n     if (resultingStat !\u003d null) {\n       StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n       for (Rename option : options) {\n         cmd.append(option.value()).append(\" \");\n       }\n       logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String srcArg, final String dstArg,\n      Options.Rename... options) throws IOException, UnresolvedLinkException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n          + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    \n    checkOperation(OperationCategory.WRITE);\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return; // Return previous response\n    }\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    HdfsFileStatus resultingStat \u003d null;\n    boolean success \u003d false;\n    writeLock();\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      src \u003d dir.resolvePath(pc, src, srcComponents);\n      dst \u003d dir.resolvePath(pc, dst, dstComponents);\n      renameToInternal(pc, src, dst, cacheEntry !\u003d null, \n          collectedBlocks, options);\n      resultingStat \u003d getAuditFileInfo(dst, false);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n    if (resultingStat !\u003d null) {\n      StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n      for (Rename option : options) {\n        cmd.append(option.value()).append(\" \");\n      }\n      logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "3425ae5d7eaa27b2526d0e0c07bdfea9440359f8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2975. Rename with overwrite flag true can make NameNode to stuck in safemode on NN (crash + restart). (Yi Liu via umamahesh)\n",
      "commitDate": "03/09/14 6:23 AM",
      "commitName": "3425ae5d7eaa27b2526d0e0c07bdfea9440359f8",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "27/08/14 11:14 AM",
      "commitNameOld": "26ebdd849b23243b31e58c44d0d363e11b42fc52",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,50 @@\n   void renameTo(final String srcArg, final String dstArg,\n       Options.Rename... options) throws IOException, UnresolvedLinkException {\n     String src \u003d srcArg;\n     String dst \u003d dstArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n           + src + \" to \" + dst);\n     }\n     if (!DFSUtil.isValidName(dst)) {\n       throw new InvalidPathException(\"Invalid name: \" + dst);\n     }\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     \n     checkOperation(OperationCategory.WRITE);\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return; // Return previous response\n     }\n     byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n     HdfsFileStatus resultingStat \u003d null;\n     boolean success \u003d false;\n     writeLock();\n+    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot rename \" + src);\n       src \u003d resolvePath(src, srcComponents);\n       dst \u003d resolvePath(dst, dstComponents);\n-      renameToInternal(pc, src, dst, cacheEntry !\u003d null, options);\n+      renameToInternal(pc, src, dst, cacheEntry !\u003d null, \n+          collectedBlocks, options);\n       resultingStat \u003d getAuditFileInfo(dst, false);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n+    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n+      removeBlocks(collectedBlocks);\n+      collectedBlocks.clear();\n+    }\n     if (resultingStat !\u003d null) {\n       StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n       for (Rename option : options) {\n         cmd.append(option.value()).append(\" \");\n       }\n       logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void renameTo(final String srcArg, final String dstArg,\n      Options.Rename... options) throws IOException, UnresolvedLinkException {\n    String src \u003d srcArg;\n    String dst \u003d dstArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.renameTo: with options - \"\n          + src + \" to \" + dst);\n    }\n    if (!DFSUtil.isValidName(dst)) {\n      throw new InvalidPathException(\"Invalid name: \" + dst);\n    }\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    \n    checkOperation(OperationCategory.WRITE);\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return; // Return previous response\n    }\n    byte[][] srcComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    byte[][] dstComponents \u003d FSDirectory.getPathComponentsForReservedPath(dst);\n    HdfsFileStatus resultingStat \u003d null;\n    boolean success \u003d false;\n    writeLock();\n    BlocksMapUpdateInfo collectedBlocks \u003d new BlocksMapUpdateInfo();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot rename \" + src);\n      src \u003d resolvePath(src, srcComponents);\n      dst \u003d resolvePath(dst, dstComponents);\n      renameToInternal(pc, src, dst, cacheEntry !\u003d null, \n          collectedBlocks, options);\n      resultingStat \u003d getAuditFileInfo(dst, false);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n    if (!collectedBlocks.getToDeleteList().isEmpty()) {\n      removeBlocks(collectedBlocks);\n      collectedBlocks.clear();\n    }\n    if (resultingStat !\u003d null) {\n      StringBuilder cmd \u003d new StringBuilder(\"rename options\u003d\");\n      for (Rename option : options) {\n        cmd.append(option.value()).append(\" \");\n      }\n      logAuditEvent(true, cmd.toString(), srcArg, dstArg, resultingStat);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}