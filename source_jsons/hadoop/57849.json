{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebAppUtils.java",
  "functionName": "getResolvedRMWebAppURLWithoutScheme",
  "functionId": "getResolvedRMWebAppURLWithoutScheme___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
  "functionStartLine": 240,
  "functionEndLine": 243,
  "numCommitsSeen": 29,
  "timeTaken": 1296,
  "changeHistory": [
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
    "21181b65531449e5fda321c11f0672c3067641aa",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434"
  ],
  "changeHistoryShort": {
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": "Ybodychange",
    "21181b65531449e5fda321c11f0672c3067641aa": "Ybodychange",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": "Yintroduced"
  },
  "changeHistoryDetails": {
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 12:01 PM",
      "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 19.63,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n   public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n     return getResolvedRMWebAppURLWithoutScheme(conf,\n-        HttpConfig.isSecure() ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY);\n+        YarnConfiguration.useHttps(conf) ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n    return getResolvedRMWebAppURLWithoutScheme(conf,\n        YarnConfiguration.useHttps(conf) ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
      "extendedDetails": {}
    },
    "21181b65531449e5fda321c11f0672c3067641aa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1277. Added a policy based configuration for http/https in common HttpServer and using the same in YARN - related\nto per project https config support via HADOOP-10022. Contributed by Suresh Srinivas and Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529662 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 11:43 AM",
      "commitName": "21181b65531449e5fda321c11f0672c3067641aa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/09/13 10:20 AM",
      "commitNameOld": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.06,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,4 @@\n   public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n-    InetSocketAddress address \u003d null;\n-    if (HttpConfig.isSecure()) {\n-      address \u003d\n-          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n-              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n-              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n-    } else {\n-      address \u003d\n-          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n-              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n-              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n-    }\n-    address \u003d NetUtils.getConnectAddress(address);\n-    StringBuffer sb \u003d new StringBuffer();\n-    InetAddress resolved \u003d address.getAddress();\n-    if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n-        resolved.isLoopbackAddress()) {\n-      String lh \u003d address.getHostName();\n-      try {\n-        lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n-      } catch (UnknownHostException e) {\n-        //Ignore and fallback.\n-      }\n-      sb.append(lh);\n-    } else {\n-      sb.append(address.getHostName());\n-    }\n-    sb.append(\":\").append(address.getPort());\n-    return sb.toString();\n+    return getResolvedRMWebAppURLWithoutScheme(conf,\n+        HttpConfig.isSecure() ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n    return getResolvedRMWebAppURLWithoutScheme(conf,\n        HttpConfig.isSecure() ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
      "extendedDetails": {}
    },
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1204. Added separate configuration properties for https for RM and NM without which servers enabled with https will also start on http ports. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5523. Added separate configuration properties for https for JHS without which even when https is enabled, it starts on http port itself. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1525947 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/09/13 10:20 AM",
      "commitName": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,31 @@\n+  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n+    InetSocketAddress address \u003d null;\n+    if (HttpConfig.isSecure()) {\n+      address \u003d\n+          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n+    } else {\n+      address \u003d\n+          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n+              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n+    }\n+    address \u003d NetUtils.getConnectAddress(address);\n+    StringBuffer sb \u003d new StringBuffer();\n+    InetAddress resolved \u003d address.getAddress();\n+    if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n+        resolved.isLoopbackAddress()) {\n+      String lh \u003d address.getHostName();\n+      try {\n+        lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n+      } catch (UnknownHostException e) {\n+        //Ignore and fallback.\n+      }\n+      sb.append(lh);\n+    } else {\n+      sb.append(address.getHostName());\n+    }\n+    sb.append(\":\").append(address.getPort());\n+    return sb.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getResolvedRMWebAppURLWithoutScheme(Configuration conf) {\n    InetSocketAddress address \u003d null;\n    if (HttpConfig.isSecure()) {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\n    } else {\n      address \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);      \n    }\n    address \u003d NetUtils.getConnectAddress(address);\n    StringBuffer sb \u003d new StringBuffer();\n    InetAddress resolved \u003d address.getAddress();\n    if (resolved \u003d\u003d null || resolved.isAnyLocalAddress() || \n        resolved.isLoopbackAddress()) {\n      String lh \u003d address.getHostName();\n      try {\n        lh \u003d InetAddress.getLocalHost().getCanonicalHostName();\n      } catch (UnknownHostException e) {\n        //Ignore and fallback.\n      }\n      sb.append(lh);\n    } else {\n      sb.append(address.getHostName());\n    }\n    sb.append(\":\").append(address.getPort());\n    return sb.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java"
    }
  }
}