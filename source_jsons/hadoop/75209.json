{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UserGroupInformation.java",
  "functionName": "getKerberosEntry",
  "functionId": "getKerberosEntry",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
  "functionStartLine": 2115,
  "functionEndLine": 2168,
  "numCommitsSeen": 104,
  "timeTaken": 1198,
  "changeHistory": [
    "59cf7588779145ad5850ad63426743dfe03d8347"
  ],
  "changeHistoryShort": {
    "59cf7588779145ad5850ad63426743dfe03d8347": "Yintroduced"
  },
  "changeHistoryDetails": {
    "59cf7588779145ad5850ad63426743dfe03d8347": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
      "commitDate": "23/02/18 11:10 AM",
      "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,54 @@\n+    private AppConfigurationEntry getKerberosEntry() {\n+      final Map\u003cString,String\u003e options \u003d new HashMap\u003c\u003e(BASIC_JAAS_OPTIONS);\n+      LoginModuleControlFlag controlFlag \u003d LoginModuleControlFlag.OPTIONAL;\n+      // kerberos login is mandatory if principal is specified.  principal\n+      // will not be set for initial default login, but will always be set\n+      // for relogins.\n+      final String principal \u003d params.get(LoginParam.PRINCIPAL);\n+      if (principal !\u003d null) {\n+        options.put(\"principal\", principal);\n+        controlFlag \u003d LoginModuleControlFlag.REQUIRED;\n+      }\n+\n+      // use keytab if given else fallback to ticket cache.\n+      if (IBM_JAVA) {\n+        if (params.containsKey(LoginParam.KEYTAB)) {\n+          final String keytab \u003d params.get(LoginParam.KEYTAB);\n+          if (keytab !\u003d null) {\n+            options.put(\"useKeytab\", prependFileAuthority(keytab));\n+          } else {\n+            options.put(\"useDefaultKeytab\", \"true\");\n+          }\n+          options.put(\"credsType\", \"both\");\n+        } else {\n+          String ticketCache \u003d params.get(LoginParam.CCACHE);\n+          if (ticketCache !\u003d null) {\n+            options.put(\"useCcache\", prependFileAuthority(ticketCache));\n+          } else {\n+            options.put(\"useDefaultCcache\", \"true\");\n+          }\n+          options.put(\"renewTGT\", \"true\");\n+        }\n+      } else {\n+        if (params.containsKey(LoginParam.KEYTAB)) {\n+          options.put(\"useKeyTab\", \"true\");\n+          final String keytab \u003d params.get(LoginParam.KEYTAB);\n+          if (keytab !\u003d null) {\n+            options.put(\"keyTab\", keytab);\n+          }\n+          options.put(\"storeKey\", \"true\");\n+        } else {\n+          options.put(\"useTicketCache\", \"true\");\n+          String ticketCache \u003d params.get(LoginParam.CCACHE);\n+          if (ticketCache !\u003d null) {\n+            options.put(\"ticketCache\", ticketCache);\n+          }\n+          options.put(\"renewTGT\", \"true\");\n+        }\n+        options.put(\"doNotPrompt\", \"true\");\n+      }\n+      options.put(\"refreshKrb5Config\", \"true\");\n+\n+      return new AppConfigurationEntry(\n+          KRB5_LOGIN_MODULE, controlFlag, options);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private AppConfigurationEntry getKerberosEntry() {\n      final Map\u003cString,String\u003e options \u003d new HashMap\u003c\u003e(BASIC_JAAS_OPTIONS);\n      LoginModuleControlFlag controlFlag \u003d LoginModuleControlFlag.OPTIONAL;\n      // kerberos login is mandatory if principal is specified.  principal\n      // will not be set for initial default login, but will always be set\n      // for relogins.\n      final String principal \u003d params.get(LoginParam.PRINCIPAL);\n      if (principal !\u003d null) {\n        options.put(\"principal\", principal);\n        controlFlag \u003d LoginModuleControlFlag.REQUIRED;\n      }\n\n      // use keytab if given else fallback to ticket cache.\n      if (IBM_JAVA) {\n        if (params.containsKey(LoginParam.KEYTAB)) {\n          final String keytab \u003d params.get(LoginParam.KEYTAB);\n          if (keytab !\u003d null) {\n            options.put(\"useKeytab\", prependFileAuthority(keytab));\n          } else {\n            options.put(\"useDefaultKeytab\", \"true\");\n          }\n          options.put(\"credsType\", \"both\");\n        } else {\n          String ticketCache \u003d params.get(LoginParam.CCACHE);\n          if (ticketCache !\u003d null) {\n            options.put(\"useCcache\", prependFileAuthority(ticketCache));\n          } else {\n            options.put(\"useDefaultCcache\", \"true\");\n          }\n          options.put(\"renewTGT\", \"true\");\n        }\n      } else {\n        if (params.containsKey(LoginParam.KEYTAB)) {\n          options.put(\"useKeyTab\", \"true\");\n          final String keytab \u003d params.get(LoginParam.KEYTAB);\n          if (keytab !\u003d null) {\n            options.put(\"keyTab\", keytab);\n          }\n          options.put(\"storeKey\", \"true\");\n        } else {\n          options.put(\"useTicketCache\", \"true\");\n          String ticketCache \u003d params.get(LoginParam.CCACHE);\n          if (ticketCache !\u003d null) {\n            options.put(\"ticketCache\", ticketCache);\n          }\n          options.put(\"renewTGT\", \"true\");\n        }\n        options.put(\"doNotPrompt\", \"true\");\n      }\n      options.put(\"refreshKrb5Config\", \"true\");\n\n      return new AppConfigurationEntry(\n          KRB5_LOGIN_MODULE, controlFlag, options);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
    }
  }
}