{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FiCaSchedulerApp.java",
  "functionName": "containerCompleted",
  "functionId": "containerCompleted___rmContainer-RMContainer__containerStatus-ContainerStatus__event-RMContainerEventType__partition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
  "functionStartLine": 201,
  "functionEndLine": 245,
  "numCommitsSeen": 138,
  "timeTaken": 14225,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "43589a8df70d4dbaf86609961e27cc4e23dda993",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cdfabf5ae289836968b3d296668593b9500b6f26",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6": "Ybodychange",
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1": "Ybodychange",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": "Ybodychange",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ymultichange(Yparameterchange,Ybodychange)",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "43589a8df70d4dbaf86609961e27cc4e23dda993": "Ybodychange",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Ymultichange(Yreturntypechange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yfilerename",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "cdfabf5ae289836968b3d296668593b9500b6f26": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       ContainerId containerId \u003d rmContainer.getContainerId();\n \n       // Remove from the list of containers\n       if (null \u003d\u003d liveContainers.remove(containerId)) {\n         return false;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n \n       containersToPreempt.remove(containerId);\n \n       // In order to save space in the audit log, only include the partition\n       // if it is not the default partition.\n       String containerPartition \u003d null;\n       if (partition !\u003d null \u0026\u0026 !partition.isEmpty()) {\n         containerPartition \u003d partition;\n       }\n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n           getQueueName(), containerPartition);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(partition,\n           getUser(), 1, containerResource);\n       attemptResourceUsage.decUsed(partition, containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n       return true;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n    writeLock.lock();\n    try {\n      ContainerId containerId \u003d rmContainer.getContainerId();\n\n      // Remove from the list of containers\n      if (null \u003d\u003d liveContainers.remove(containerId)) {\n        return false;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n      containersToPreempt.remove(containerId);\n\n      // In order to save space in the audit log, only include the partition\n      // if it is not the default partition.\n      String containerPartition \u003d null;\n      if (partition !\u003d null \u0026\u0026 !partition.isEmpty()) {\n        containerPartition \u003d partition;\n      }\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n          getQueueName(), containerPartition);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(partition,\n          getUser(), 1, containerResource);\n      attemptResourceUsage.decUsed(partition, containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n      return true;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7225. Add queue and partition info to RM audit log. Contributed by Eric Payne\n",
      "commitDate": "01/11/18 2:22 PM",
      "commitName": "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "21/08/18 7:42 AM",
      "commitNameOld": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 72.28,
      "commitsBetweenForRepo": 682,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,45 @@\n   public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n     try {\n       writeLock.lock();\n       ContainerId containerId \u003d rmContainer.getContainerId();\n \n       // Remove from the list of containers\n       if (null \u003d\u003d liveContainers.remove(containerId)) {\n         return false;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n \n       containersToPreempt.remove(containerId);\n \n+      // In order to save space in the audit log, only include the partition\n+      // if it is not the default partition.\n+      String containerPartition \u003d null;\n+      if (partition !\u003d null \u0026\u0026 !partition.isEmpty()) {\n+        containerPartition \u003d partition;\n+      }\n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n-          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n+          \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n+          getQueueName(), containerPartition);\n \n       // Update usage metrics\n       queue.getMetrics().releaseResources(partition,\n           getUser(), 1, containerResource);\n       attemptResourceUsage.decUsed(partition, containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n       return true;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n    try {\n      writeLock.lock();\n      ContainerId containerId \u003d rmContainer.getContainerId();\n\n      // Remove from the list of containers\n      if (null \u003d\u003d liveContainers.remove(containerId)) {\n        return false;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n      containersToPreempt.remove(containerId);\n\n      // In order to save space in the audit log, only include the partition\n      // if it is not the default partition.\n      String containerPartition \u003d null;\n      if (partition !\u003d null \u0026\u0026 !partition.isEmpty()) {\n        containerPartition \u003d partition;\n      }\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource,\n          getQueueName(), containerPartition);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(partition,\n          getUser(), 1, containerResource);\n      attemptResourceUsage.decUsed(partition, containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n      return true;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "27/03/17 5:23 PM",
      "commitNameOld": "9bae6720cb8432efd78c909dc624c00e367cedf5",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 83.65,
      "commitsBetweenForRepo": 437,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n     try {\n       writeLock.lock();\n       ContainerId containerId \u003d rmContainer.getContainerId();\n \n       // Remove from the list of containers\n       if (null \u003d\u003d liveContainers.remove(containerId)) {\n         return false;\n       }\n \n       // Remove from the list of newly allocated containers if found\n       newlyAllocatedContainers.remove(rmContainer);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerFinishedEvent(containerId, containerStatus, event));\n \n       containersToPreempt.remove(containerId);\n \n       Resource containerResource \u003d rmContainer.getContainer().getResource();\n       RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n           \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n \n       // Update usage metrics\n-      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n+      queue.getMetrics().releaseResources(partition,\n+          getUser(), 1, containerResource);\n       attemptResourceUsage.decUsed(partition, containerResource);\n \n       // Clear resource utilization metrics cache.\n       lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n       return true;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n    try {\n      writeLock.lock();\n      ContainerId containerId \u003d rmContainer.getContainerId();\n\n      // Remove from the list of containers\n      if (null \u003d\u003d liveContainers.remove(containerId)) {\n        return false;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n      containersToPreempt.remove(containerId);\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(partition,\n          getUser(), 1, containerResource);\n      attemptResourceUsage.decUsed(partition, containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n      return true;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "02/09/16 3:32 AM",
          "commitNameOld": "05f5c0f631680cffc36a79550c351620615445db",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 16.94,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,37 @@\n-  public synchronized boolean containerCompleted(RMContainer rmContainer,\n+  public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n-    ContainerId containerId \u003d rmContainer.getContainerId();\n+    try {\n+      writeLock.lock();\n+      ContainerId containerId \u003d rmContainer.getContainerId();\n \n-    // Remove from the list of containers\n-    if (null \u003d\u003d liveContainers.remove(containerId)) {\n-      return false;\n+      // Remove from the list of containers\n+      if (null \u003d\u003d liveContainers.remove(containerId)) {\n+        return false;\n+      }\n+\n+      // Remove from the list of newly allocated containers if found\n+      newlyAllocatedContainers.remove(rmContainer);\n+\n+      // Inform the container\n+      rmContainer.handle(\n+          new RMContainerFinishedEvent(containerId, containerStatus, event));\n+\n+      containersToPreempt.remove(containerId);\n+\n+      Resource containerResource \u003d rmContainer.getContainer().getResource();\n+      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n+          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n+\n+      // Update usage metrics\n+      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n+      attemptResourceUsage.decUsed(partition, containerResource);\n+\n+      // Clear resource utilization metrics cache.\n+      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n+\n+      return true;\n+    } finally {\n+      writeLock.unlock();\n     }\n-\n-    // Remove from the list of newly allocated containers if found\n-    newlyAllocatedContainers.remove(rmContainer);\n-\n-    // Inform the container\n-    rmContainer.handle(\n-        new RMContainerFinishedEvent(containerId, containerStatus, event));\n-\n-    containersToPreempt.remove(containerId);\n-\n-    Resource containerResource \u003d rmContainer.getContainer().getResource();\n-    RMAuditLogger.logSuccess(getUser(),\n-        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n-        getApplicationId(), containerId, containerResource);\n-    \n-    // Update usage metrics \n-    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n-    attemptResourceUsage.decUsed(partition, containerResource);\n-\n-    // Clear resource utilization metrics cache.\n-    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n-\n-    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n    try {\n      writeLock.lock();\n      ContainerId containerId \u003d rmContainer.getContainerId();\n\n      // Remove from the list of containers\n      if (null \u003d\u003d liveContainers.remove(containerId)) {\n        return false;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n      containersToPreempt.remove(containerId);\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n      attemptResourceUsage.decUsed(partition, containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n      return true;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "02/09/16 3:32 AM",
          "commitNameOld": "05f5c0f631680cffc36a79550c351620615445db",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 16.94,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,37 @@\n-  public synchronized boolean containerCompleted(RMContainer rmContainer,\n+  public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n-    ContainerId containerId \u003d rmContainer.getContainerId();\n+    try {\n+      writeLock.lock();\n+      ContainerId containerId \u003d rmContainer.getContainerId();\n \n-    // Remove from the list of containers\n-    if (null \u003d\u003d liveContainers.remove(containerId)) {\n-      return false;\n+      // Remove from the list of containers\n+      if (null \u003d\u003d liveContainers.remove(containerId)) {\n+        return false;\n+      }\n+\n+      // Remove from the list of newly allocated containers if found\n+      newlyAllocatedContainers.remove(rmContainer);\n+\n+      // Inform the container\n+      rmContainer.handle(\n+          new RMContainerFinishedEvent(containerId, containerStatus, event));\n+\n+      containersToPreempt.remove(containerId);\n+\n+      Resource containerResource \u003d rmContainer.getContainer().getResource();\n+      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n+          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n+\n+      // Update usage metrics\n+      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n+      attemptResourceUsage.decUsed(partition, containerResource);\n+\n+      // Clear resource utilization metrics cache.\n+      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n+\n+      return true;\n+    } finally {\n+      writeLock.unlock();\n     }\n-\n-    // Remove from the list of newly allocated containers if found\n-    newlyAllocatedContainers.remove(rmContainer);\n-\n-    // Inform the container\n-    rmContainer.handle(\n-        new RMContainerFinishedEvent(containerId, containerStatus, event));\n-\n-    containersToPreempt.remove(containerId);\n-\n-    Resource containerResource \u003d rmContainer.getContainer().getResource();\n-    RMAuditLogger.logSuccess(getUser(),\n-        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n-        getApplicationId(), containerId, containerResource);\n-    \n-    // Update usage metrics \n-    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n-    attemptResourceUsage.decUsed(partition, containerResource);\n-\n-    // Clear resource utilization metrics cache.\n-    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n-\n-    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n    try {\n      writeLock.lock();\n      ContainerId containerId \u003d rmContainer.getContainerId();\n\n      // Remove from the list of containers\n      if (null \u003d\u003d liveContainers.remove(containerId)) {\n        return false;\n      }\n\n      // Remove from the list of newly allocated containers if found\n      newlyAllocatedContainers.remove(rmContainer);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n      containersToPreempt.remove(containerId);\n\n      Resource containerResource \u003d rmContainer.getContainer().getResource();\n      RMAuditLogger.logSuccess(getUser(), AuditConstants.RELEASE_CONTAINER,\n          \"SchedulerApp\", getApplicationId(), containerId, containerResource);\n\n      // Update usage metrics\n      queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n      attemptResourceUsage.decUsed(partition, containerResource);\n\n      // Clear resource utilization metrics cache.\n      lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n      return true;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5003. Add container resource to RM audit log. Contributed by Nathan Roberts\n",
      "commitDate": "03/05/16 1:03 PM",
      "commitName": "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "16/04/16 10:47 PM",
      "commitNameOld": "fdc46bfb37776d8c41b68f6c33a2379d0f329994",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public synchronized boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n     ContainerId containerId \u003d rmContainer.getContainerId();\n \n     // Remove from the list of containers\n     if (null \u003d\u003d liveContainers.remove(containerId)) {\n       return false;\n     }\n \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(containerId, containerStatus, event));\n \n     containersToPreempt.remove(containerId);\n \n+    Resource containerResource \u003d rmContainer.getContainer().getResource();\n     RMAuditLogger.logSuccess(getUser(),\n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n-        getApplicationId(), containerId);\n+        getApplicationId(), containerId, containerResource);\n     \n     // Update usage metrics \n-    Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     attemptResourceUsage.decUsed(partition, containerResource);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n    ContainerId containerId \u003d rmContainer.getContainerId();\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(containerId)) {\n      return false;\n    }\n\n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n    containersToPreempt.remove(containerId);\n\n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    RMAuditLogger.logSuccess(getUser(),\n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n        getApplicationId(), containerId, containerResource);\n    \n    // Update usage metrics \n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    attemptResourceUsage.decUsed(partition, containerResource);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n-  synchronized public boolean containerCompleted(RMContainer rmContainer,\n+  public synchronized boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n+    ContainerId containerId \u003d rmContainer.getContainerId();\n \n     // Remove from the list of containers\n-    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n+    if (null \u003d\u003d liveContainers.remove(containerId)) {\n       return false;\n     }\n-    \n+\n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n \n-    Container container \u003d rmContainer.getContainer();\n-    ContainerId containerId \u003d container.getId();\n-\n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(containerId, containerStatus, event));\n \n-    containersToPreempt.remove(rmContainer.getContainerId());\n+    containersToPreempt.remove(containerId);\n \n     RMAuditLogger.logSuccess(getUser(),\n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     attemptResourceUsage.decUsed(partition, containerResource);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n    ContainerId containerId \u003d rmContainer.getContainerId();\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(containerId)) {\n      return false;\n    }\n\n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n    containersToPreempt.remove(containerId);\n\n    RMAuditLogger.logSuccess(getUser(),\n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    attemptResourceUsage.decUsed(partition, containerResource);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n-  public synchronized boolean containerCompleted(RMContainer rmContainer,\n+  synchronized public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n-    ContainerId containerId \u003d rmContainer.getContainerId();\n \n     // Remove from the list of containers\n-    if (null \u003d\u003d liveContainers.remove(containerId)) {\n+    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n       return false;\n     }\n-\n+    \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n \n+    Container container \u003d rmContainer.getContainer();\n+    ContainerId containerId \u003d container.getId();\n+\n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(containerId, containerStatus, event));\n \n-    containersToPreempt.remove(containerId);\n+    containersToPreempt.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(),\n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     attemptResourceUsage.decUsed(partition, containerResource);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n      return false;\n    }\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n    containersToPreempt.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(),\n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    attemptResourceUsage.decUsed(partition, containerResource);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/02/16 9:35 AM",
      "commitNameOld": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.27,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n-  synchronized public boolean containerCompleted(RMContainer rmContainer,\n+  public synchronized boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n+    ContainerId containerId \u003d rmContainer.getContainerId();\n \n     // Remove from the list of containers\n-    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n+    if (null \u003d\u003d liveContainers.remove(containerId)) {\n       return false;\n     }\n-    \n+\n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n \n-    Container container \u003d rmContainer.getContainer();\n-    ContainerId containerId \u003d container.getId();\n-\n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(containerId, containerStatus, event));\n \n-    containersToPreempt.remove(rmContainer.getContainerId());\n+    containersToPreempt.remove(containerId);\n \n     RMAuditLogger.logSuccess(getUser(),\n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     attemptResourceUsage.decUsed(partition, containerResource);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n    ContainerId containerId \u003d rmContainer.getContainerId();\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(containerId)) {\n      return false;\n    }\n\n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n    containersToPreempt.remove(containerId);\n\n    RMAuditLogger.logSuccess(getUser(),\n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\",\n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    attemptResourceUsage.decUsed(partition, containerResource);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3966. Fix excessive loggings in CapacityScheduler. (Jian He via wangda)\n",
      "commitDate": "07/08/15 9:46 AM",
      "commitName": "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/08/15 1:47 PM",
      "commitNameOld": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,35 @@\n   synchronized public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event,\n       String partition) {\n \n     // Remove from the list of containers\n     if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n       return false;\n     }\n     \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n \n     // Inform the container\n     rmContainer.handle(\n-        new RMContainerFinishedEvent(\n-            containerId,\n-            containerStatus, \n-            event)\n-        );\n-    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n-        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n+        new RMContainerFinishedEvent(containerId, containerStatus, event));\n \n     containersToPreempt.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     attemptResourceUsage.decUsed(partition, containerResource);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n      return false;\n    }\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(containerId, containerStatus, event));\n\n    containersToPreempt.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    attemptResourceUsage.decUsed(partition, containerResource);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
          "commitDate": "20/03/15 1:54 PM",
          "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/03/15 9:30 PM",
          "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 2.68,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n   synchronized public boolean containerCompleted(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event,\n+      String partition) {\n \n     // Remove from the list of containers\n     if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n       return false;\n     }\n     \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus, \n             event)\n         );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState() + \" event:\" + event);\n \n     containersToPreempt.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n-    Resources.subtractFrom(currentConsumption, containerResource);\n+    attemptResourceUsage.decUsed(partition, containerResource);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n      return false;\n    }\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n\n    containersToPreempt.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    attemptResourceUsage.decUsed(partition, containerResource);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]",
            "newValue": "[rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType, partition-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
          "commitDate": "20/03/15 1:54 PM",
          "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/03/15 9:30 PM",
          "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 2.68,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n   synchronized public boolean containerCompleted(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event,\n+      String partition) {\n \n     // Remove from the list of containers\n     if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n       return false;\n     }\n     \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus, \n             event)\n         );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState() + \" event:\" + event);\n \n     containersToPreempt.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n-    Resources.subtractFrom(currentConsumption, containerResource);\n+    attemptResourceUsage.decUsed(partition, containerResource);\n \n     // Clear resource utilization metrics cache.\n     lastMemoryAggregateAllocationUpdateTime \u003d -1;\n \n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event,\n      String partition) {\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n      return false;\n    }\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n\n    containersToPreempt.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    attemptResourceUsage.decUsed(partition, containerResource);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/07/14 2:48 PM",
      "commitNameOld": "43589a8df70d4dbaf86609961e27cc4e23dda993",
      "commitAuthorOld": "Mayank Bansal",
      "daysBetweenCommits": 57.15,
      "commitsBetweenForRepo": 476,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   synchronized public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n \n     // Remove from the list of containers\n     if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n       return false;\n     }\n     \n     // Remove from the list of newly allocated containers if found\n     newlyAllocatedContainers.remove(rmContainer);\n \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus, \n             event)\n         );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState() + \" event:\" + event);\n \n     containersToPreempt.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     Resources.subtractFrom(currentConsumption, containerResource);\n \n+    // Clear resource utilization metrics cache.\n+    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n+\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n      return false;\n    }\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n\n    containersToPreempt.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n\n    // Clear resource utilization metrics cache.\n    lastMemoryAggregateAllocationUpdateTime \u003d -1;\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "43589a8df70d4dbaf86609961e27cc4e23dda993": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1408 Preemption caused Invalid State Event: ACQUIRED at KILLED and caused a task timeout for 30mins. (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/14 2:48 PM",
      "commitName": "43589a8df70d4dbaf86609961e27cc4e23dda993",
      "commitAuthor": "Mayank Bansal",
      "commitDateOld": "19/02/14 3:39 PM",
      "commitNameOld": "5fd5c9900cfd299428acbc8dff767273e44647c0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 145.92,
      "commitsBetweenForRepo": 979,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   synchronized public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n \n     // Remove from the list of containers\n     if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n       return false;\n     }\n+    \n+    // Remove from the list of newly allocated containers if found\n+    newlyAllocatedContainers.remove(rmContainer);\n \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n \n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus, \n             event)\n         );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState() + \" event:\" + event);\n \n     containersToPreempt.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     Resources.subtractFrom(currentConsumption, containerResource);\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n      return false;\n    }\n    \n    // Remove from the list of newly allocated containers if found\n    newlyAllocatedContainers.remove(rmContainer);\n\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n\n    containersToPreempt.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/07/13 6:20 PM",
          "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
          "commitAuthor": "Christopher Douglas",
          "commitDateOld": "04/07/13 4:31 PM",
          "commitNameOld": "eff5d9b17e0853e82968a695b498b4be37148a05",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 6.08,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,34 @@\n-  synchronized public void containerCompleted(RMContainer rmContainer,\n+  synchronized public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n-    \n+\n+    // Remove from the list of containers\n+    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n+      return false;\n+    }\n+\n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n-    \n+\n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus, \n             event)\n         );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState() + \" event:\" + event);\n-    \n-    // Remove from the list of containers\n-    liveContainers.remove(rmContainer.getContainerId());\n+\n+    containersToPreempt.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     Resources.subtractFrom(currentConsumption, containerResource);\n+\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n      return false;\n    }\n\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n\n    containersToPreempt.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/07/13 6:20 PM",
          "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
          "commitAuthor": "Christopher Douglas",
          "commitDateOld": "04/07/13 4:31 PM",
          "commitNameOld": "eff5d9b17e0853e82968a695b498b4be37148a05",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 6.08,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,34 @@\n-  synchronized public void containerCompleted(RMContainer rmContainer,\n+  synchronized public boolean containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n-    \n+\n+    // Remove from the list of containers\n+    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n+      return false;\n+    }\n+\n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n-    \n+\n     // Inform the container\n     rmContainer.handle(\n         new RMContainerFinishedEvent(\n             containerId,\n             containerStatus, \n             event)\n         );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState() + \" event:\" + event);\n-    \n-    // Remove from the list of containers\n-    liveContainers.remove(rmContainer.getContainerId());\n+\n+    containersToPreempt.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     Resources.subtractFrom(currentConsumption, containerResource);\n+\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public boolean containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n\n    // Remove from the list of containers\n    if (null \u003d\u003d liveContainers.remove(rmContainer.getContainerId())) {\n      return false;\n    }\n\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n\n    containersToPreempt.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/07/12 3:41 PM",
      "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
      }
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n   synchronized public void containerCompleted(RMContainer rmContainer,\n-      RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n     \n     // Inform the container\n-    if (event.equals(RMContainerEventType.FINISHED)) {\n-      // Have to send diagnostics for finished containers.\n-      rmContainer.handle(new RMContainerFinishedEvent(containerId,\n-          container.getContainerStatus()));\n-    } else {\n-      rmContainer.handle(new RMContainerEvent(containerId, event));\n-    }\n+    rmContainer.handle(\n+        new RMContainerFinishedEvent(\n+            containerId,\n+            containerStatus, \n+            event)\n+        );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n-        \" in state: \" + rmContainer.getState());\n+        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n     \n     // Remove from the list of containers\n     liveContainers.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     Resources.subtractFrom(currentConsumption, containerResource);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[rmContainer-RMContainer, event-RMContainerEventType]",
            "newValue": "[rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n   synchronized public void containerCompleted(RMContainer rmContainer,\n-      RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n     \n     // Inform the container\n-    if (event.equals(RMContainerEventType.FINISHED)) {\n-      // Have to send diagnostics for finished containers.\n-      rmContainer.handle(new RMContainerFinishedEvent(containerId,\n-          container.getContainerStatus()));\n-    } else {\n-      rmContainer.handle(new RMContainerEvent(containerId, event));\n-    }\n+    rmContainer.handle(\n+        new RMContainerFinishedEvent(\n+            containerId,\n+            containerStatus, \n+            event)\n+        );\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n-        \" in state: \" + rmContainer.getState());\n+        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n     \n     // Remove from the list of containers\n     liveContainers.remove(rmContainer.getContainerId());\n \n     RMAuditLogger.logSuccess(getUser(), \n         AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n         getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     Resources.subtractFrom(currentConsumption, containerResource);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Inform the container\n    rmContainer.handle(\n        new RMContainerFinishedEvent(\n            containerId,\n            containerStatus, \n            event)\n        );\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState() + \" event:\" + event);\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "cdfabf5ae289836968b3d296668593b9500b6f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2655. Add audit logs to ResourceManager and NodeManager. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165949 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 6:24 PM",
      "commitName": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "31/08/11 12:52 PM",
      "commitNameOld": "b9a5fd51904a074a7a33f38266378f0f6f97b531",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 6.23,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,29 @@\n   synchronized public void containerCompleted(RMContainer rmContainer,\n       RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n     \n     // Inform the container\n     if (event.equals(RMContainerEventType.FINISHED)) {\n       // Have to send diagnostics for finished containers.\n       rmContainer.handle(new RMContainerFinishedEvent(containerId,\n           container.getContainerStatus()));\n     } else {\n       rmContainer.handle(new RMContainerEvent(containerId, event));\n     }\n     LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n         \" in state: \" + rmContainer.getState());\n     \n     // Remove from the list of containers\n     liveContainers.remove(rmContainer.getContainerId());\n+\n+    RMAuditLogger.logSuccess(getUser(), \n+        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n+        getApplicationId(), containerId);\n     \n     // Update usage metrics \n     Resource containerResource \u003d rmContainer.getContainer().getResource();\n     queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n     Resources.subtractFrom(currentConsumption, containerResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Inform the container\n    if (event.equals(RMContainerEventType.FINISHED)) {\n      // Have to send diagnostics for finished containers.\n      rmContainer.handle(new RMContainerFinishedEvent(containerId,\n          container.getContainerStatus()));\n    } else {\n      rmContainer.handle(new RMContainerEvent(containerId, event));\n    }\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState());\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n\n    RMAuditLogger.logSuccess(getUser(), \n        AuditConstants.RELEASE_CONTAINER, \"SchedulerApp\", \n        getApplicationId(), containerId);\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Inform the container\n    if (event.equals(RMContainerEventType.FINISHED)) {\n      // Have to send diagnostics for finished containers.\n      rmContainer.handle(new RMContainerFinishedEvent(containerId,\n          container.getContainerStatus()));\n    } else {\n      rmContainer.handle(new RMContainerEvent(containerId, event));\n    }\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState());\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,25 @@\n+  synchronized public void containerCompleted(RMContainer rmContainer,\n+      RMContainerEventType event) {\n+    \n+    Container container \u003d rmContainer.getContainer();\n+    ContainerId containerId \u003d container.getId();\n+    \n+    // Inform the container\n+    if (event.equals(RMContainerEventType.FINISHED)) {\n+      // Have to send diagnostics for finished containers.\n+      rmContainer.handle(new RMContainerFinishedEvent(containerId,\n+          container.getContainerStatus()));\n+    } else {\n+      rmContainer.handle(new RMContainerEvent(containerId, event));\n+    }\n+    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n+        \" in state: \" + rmContainer.getState());\n+    \n+    // Remove from the list of containers\n+    liveContainers.remove(rmContainer.getContainerId());\n+    \n+    // Update usage metrics \n+    Resource containerResource \u003d rmContainer.getContainer().getResource();\n+    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n+    Resources.subtractFrom(currentConsumption, containerResource);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void containerCompleted(RMContainer rmContainer,\n      RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Inform the container\n    if (event.equals(RMContainerEventType.FINISHED)) {\n      // Have to send diagnostics for finished containers.\n      rmContainer.handle(new RMContainerFinishedEvent(containerId,\n          container.getContainerStatus()));\n    } else {\n      rmContainer.handle(new RMContainerEvent(containerId, event));\n    }\n    LOG.info(\"Completed container: \" + rmContainer.getContainerId() + \n        \" in state: \" + rmContainer.getState());\n    \n    // Remove from the list of containers\n    liveContainers.remove(rmContainer.getContainerId());\n    \n    // Update usage metrics \n    Resource containerResource \u003d rmContainer.getContainer().getResource();\n    queue.getMetrics().releaseResources(getUser(), 1, containerResource);\n    Resources.subtractFrom(currentConsumption, containerResource);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java"
    }
  }
}