{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNode.java",
  "functionName": "reconfReplicationParameters",
  "functionId": "reconfReplicationParameters___newVal-String(modifiers-final)__property-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
  "functionStartLine": 2196,
  "functionEndLine": 2232,
  "numCommitsSeen": 210,
  "timeTaken": 1661,
  "changeHistory": [
    "4f455290b15902e7e44c4b1a762bf915414b2bb6"
  ],
  "changeHistoryShort": {
    "4f455290b15902e7e44c4b1a762bf915414b2bb6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4f455290b15902e7e44c4b1a762bf915414b2bb6": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14560. Allow block replication parameters to be refreshable. Contributed by Stephen O\u0027Donnell.\n",
      "commitDate": "13/06/19 6:26 PM",
      "commitName": "4f455290b15902e7e44c4b1a762bf915414b2bb6",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,37 @@\n+  private String reconfReplicationParameters(final String newVal,\n+      final String property) throws ReconfigurationException {\n+    BlockManager bm \u003d namesystem.getBlockManager();\n+    int newSetting;\n+    namesystem.writeLock();\n+    try {\n+      if (property.equals(DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY)) {\n+        bm.setMaxReplicationStreams(\n+            adjustNewVal(DFS_NAMENODE_REPLICATION_MAX_STREAMS_DEFAULT, newVal));\n+        newSetting \u003d bm.getMaxReplicationStreams();\n+      } else if (property.equals(\n+          DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_KEY)) {\n+        bm.setReplicationStreamsHardLimit(\n+            adjustNewVal(DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_DEFAULT,\n+                newVal));\n+        newSetting \u003d bm.getReplicationStreamsHardLimit();\n+      } else if (\n+          property.equals(\n+              DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION)) {\n+        bm.setBlocksReplWorkMultiplier(\n+            adjustNewVal(\n+                DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION_DEFAULT,\n+                newVal));\n+        newSetting \u003d bm.getBlocksReplWorkMultiplier();\n+      } else {\n+        throw new IllegalArgumentException(\"Unexpected property \" +\n+            property + \"in reconfReplicationParameters\");\n+      }\n+      LOG.info(\"RECONFIGURE* changed {} to {}\", property, newSetting);\n+      return String.valueOf(newSetting);\n+    } catch (IllegalArgumentException e) {\n+      throw new ReconfigurationException(property, newVal, getConf().get(\n+          property), e);\n+    } finally {\n+      namesystem.writeUnlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String reconfReplicationParameters(final String newVal,\n      final String property) throws ReconfigurationException {\n    BlockManager bm \u003d namesystem.getBlockManager();\n    int newSetting;\n    namesystem.writeLock();\n    try {\n      if (property.equals(DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY)) {\n        bm.setMaxReplicationStreams(\n            adjustNewVal(DFS_NAMENODE_REPLICATION_MAX_STREAMS_DEFAULT, newVal));\n        newSetting \u003d bm.getMaxReplicationStreams();\n      } else if (property.equals(\n          DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_KEY)) {\n        bm.setReplicationStreamsHardLimit(\n            adjustNewVal(DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_DEFAULT,\n                newVal));\n        newSetting \u003d bm.getReplicationStreamsHardLimit();\n      } else if (\n          property.equals(\n              DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION)) {\n        bm.setBlocksReplWorkMultiplier(\n            adjustNewVal(\n                DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION_DEFAULT,\n                newVal));\n        newSetting \u003d bm.getBlocksReplWorkMultiplier();\n      } else {\n        throw new IllegalArgumentException(\"Unexpected property \" +\n            property + \"in reconfReplicationParameters\");\n      }\n      LOG.info(\"RECONFIGURE* changed {} to {}\", property, newSetting);\n      return String.valueOf(newSetting);\n    } catch (IllegalArgumentException e) {\n      throw new ReconfigurationException(property, newVal, getConf().get(\n          property), e);\n    } finally {\n      namesystem.writeUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
    }
  }
}