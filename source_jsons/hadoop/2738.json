{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ObserverReadProxyProvider.java",
  "functionName": "autoMsyncIfNecessary",
  "functionId": "autoMsyncIfNecessary",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/ObserverReadProxyProvider.java",
  "functionStartLine": 380,
  "functionEndLine": 398,
  "numCommitsSeen": 24,
  "timeTaken": 650,
  "changeHistory": [
    "5847e0014343f60f853cb796781ca1fa03a72efd",
    "55b3a718e95e62cdd01789050376b36d8e6a0f20"
  ],
  "changeHistoryShort": {
    "5847e0014343f60f853cb796781ca1fa03a72efd": "Ybodychange",
    "55b3a718e95e62cdd01789050376b36d8e6a0f20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5847e0014343f60f853cb796781ca1fa03a72efd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14245. [SBN read] Enable ObserverReadProxyProvider to work with non-ClientProtocol proxy types. Contributed by Erik Krogen.\n",
      "commitDate": "13/05/19 8:39 AM",
      "commitName": "5847e0014343f60f853cb796781ca1fa03a72efd",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "22/04/19 1:29 PM",
      "commitNameOld": "174b7d3126e215c519b1c4a74892c7020712f9df",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 20.8,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   private void autoMsyncIfNecessary() throws IOException {\n     if (autoMsyncPeriodMs \u003d\u003d 0) {\n       // Always msync\n-      failoverProxy.getProxy().proxy.msync();\n+      getProxyAsClientProtocol(failoverProxy.getProxy().proxy).msync();\n     } else if (autoMsyncPeriodMs \u003e 0) {\n       if (Time.monotonicNow() - lastMsyncTimeMs \u003e autoMsyncPeriodMs) {\n         synchronized (this) {\n           // Use a synchronized block so that only one thread will msync\n           // if many operations are submitted around the same time.\n           // Re-check the entry criterion since the status may have changed\n           // while waiting for the lock.\n           if (Time.monotonicNow() - lastMsyncTimeMs \u003e autoMsyncPeriodMs) {\n-            failoverProxy.getProxy().proxy.msync();\n+            getProxyAsClientProtocol(failoverProxy.getProxy().proxy).msync();\n             lastMsyncTimeMs \u003d Time.monotonicNow();\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void autoMsyncIfNecessary() throws IOException {\n    if (autoMsyncPeriodMs \u003d\u003d 0) {\n      // Always msync\n      getProxyAsClientProtocol(failoverProxy.getProxy().proxy).msync();\n    } else if (autoMsyncPeriodMs \u003e 0) {\n      if (Time.monotonicNow() - lastMsyncTimeMs \u003e autoMsyncPeriodMs) {\n        synchronized (this) {\n          // Use a synchronized block so that only one thread will msync\n          // if many operations are submitted around the same time.\n          // Re-check the entry criterion since the status may have changed\n          // while waiting for the lock.\n          if (Time.monotonicNow() - lastMsyncTimeMs \u003e autoMsyncPeriodMs) {\n            getProxyAsClientProtocol(failoverProxy.getProxy().proxy).msync();\n            lastMsyncTimeMs \u003d Time.monotonicNow();\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/ObserverReadProxyProvider.java",
      "extendedDetails": {}
    },
    "55b3a718e95e62cdd01789050376b36d8e6a0f20": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14211. [SBN Read]. Add a configurable flag to enable always-msync mode to ObserverReadProxyProvider. Contributed by Erik Krogen.\n",
      "commitDate": "19/03/19 8:14 AM",
      "commitName": "55b3a718e95e62cdd01789050376b36d8e6a0f20",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,19 @@\n+  private void autoMsyncIfNecessary() throws IOException {\n+    if (autoMsyncPeriodMs \u003d\u003d 0) {\n+      // Always msync\n+      failoverProxy.getProxy().proxy.msync();\n+    } else if (autoMsyncPeriodMs \u003e 0) {\n+      if (Time.monotonicNow() - lastMsyncTimeMs \u003e autoMsyncPeriodMs) {\n+        synchronized (this) {\n+          // Use a synchronized block so that only one thread will msync\n+          // if many operations are submitted around the same time.\n+          // Re-check the entry criterion since the status may have changed\n+          // while waiting for the lock.\n+          if (Time.monotonicNow() - lastMsyncTimeMs \u003e autoMsyncPeriodMs) {\n+            failoverProxy.getProxy().proxy.msync();\n+            lastMsyncTimeMs \u003d Time.monotonicNow();\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void autoMsyncIfNecessary() throws IOException {\n    if (autoMsyncPeriodMs \u003d\u003d 0) {\n      // Always msync\n      failoverProxy.getProxy().proxy.msync();\n    } else if (autoMsyncPeriodMs \u003e 0) {\n      if (Time.monotonicNow() - lastMsyncTimeMs \u003e autoMsyncPeriodMs) {\n        synchronized (this) {\n          // Use a synchronized block so that only one thread will msync\n          // if many operations are submitted around the same time.\n          // Re-check the entry criterion since the status may have changed\n          // while waiting for the lock.\n          if (Time.monotonicNow() - lastMsyncTimeMs \u003e autoMsyncPeriodMs) {\n            failoverProxy.getProxy().proxy.msync();\n            lastMsyncTimeMs \u003d Time.monotonicNow();\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/ObserverReadProxyProvider.java"
    }
  }
}