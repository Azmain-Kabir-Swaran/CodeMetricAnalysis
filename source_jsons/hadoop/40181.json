{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerConfiguration.java",
  "functionName": "updateResourceValuesFromConfig",
  "functionId": "updateResourceValuesFromConfig___resourceTypes-Set__String____resource-Resource__splits-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
  "functionStartLine": 2182,
  "functionEndLine": 2214,
  "numCommitsSeen": 90,
  "timeTaken": 3180,
  "changeHistory": [
    "daa1cdd062657a47acbf4b23f895860296241199",
    "5e798b1a0ddceeaf54703b94052501867156e979"
  ],
  "changeHistoryShort": {
    "daa1cdd062657a47acbf4b23f895860296241199": "Ybodychange",
    "5e798b1a0ddceeaf54703b94052501867156e979": "Yintroduced"
  },
  "changeHistoryDetails": {
    "daa1cdd062657a47acbf4b23f895860296241199": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7564. Cleanup to fix checkstyle issues of YARN-5881 branch. Contributed by Sunil G.\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "daa1cdd062657a47acbf4b23f895860296241199",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "1012b901c8eeeb46c7c792c94ed0befca1c860b4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   private void updateResourceValuesFromConfig(Set\u003cString\u003e resourceTypes,\n       Resource resource, String[] splits) {\n \n     // If key is not a valid type, skip it.\n     if (!resourceTypes.contains(splits[0])) {\n       return;\n     }\n \n     String units \u003d getUnits(splits[1]);\n     Long resourceValue \u003d Long\n         .valueOf(splits[1].substring(0, splits[1].length() - units.length()));\n \n     // Convert all incoming units to MB if units is configured.\n     if (!units.isEmpty()) {\n       resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n     }\n \n     // map it based on key.\n     AbsoluteResourceType resType \u003d AbsoluteResourceType\n         .valueOf(StringUtils.toUpperCase(splits[0].trim()));\n     switch (resType) {\n-      case MEMORY :\n-        resource.setMemorySize(resourceValue);\n-        break;\n-      case VCORES :\n-        resource.setVirtualCores(resourceValue.intValue());\n-        break;\n-      default :\n-        break;\n+    case MEMORY :\n+      resource.setMemorySize(resourceValue);\n+      break;\n+    case VCORES :\n+      resource.setVirtualCores(resourceValue.intValue());\n+      break;\n+    default :\n+      resource.setResourceInformation(splits[0].trim(), ResourceInformation\n+          .newInstance(splits[0].trim(), units, resourceValue));\n+      break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateResourceValuesFromConfig(Set\u003cString\u003e resourceTypes,\n      Resource resource, String[] splits) {\n\n    // If key is not a valid type, skip it.\n    if (!resourceTypes.contains(splits[0])) {\n      return;\n    }\n\n    String units \u003d getUnits(splits[1]);\n    Long resourceValue \u003d Long\n        .valueOf(splits[1].substring(0, splits[1].length() - units.length()));\n\n    // Convert all incoming units to MB if units is configured.\n    if (!units.isEmpty()) {\n      resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n    }\n\n    // map it based on key.\n    AbsoluteResourceType resType \u003d AbsoluteResourceType\n        .valueOf(StringUtils.toUpperCase(splits[0].trim()));\n    switch (resType) {\n    case MEMORY :\n      resource.setMemorySize(resourceValue);\n      break;\n    case VCORES :\n      resource.setVirtualCores(resourceValue.intValue());\n      break;\n    default :\n      resource.setResourceInformation(splits[0].trim(), ResourceInformation\n          .newInstance(splits[0].trim(), units, resourceValue));\n      break;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "5e798b1a0ddceeaf54703b94052501867156e979": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6471. Support to add min/max resource configuration for a queue. (Sunil G via wangda)\n\nChange-Id: I9213f5297a6841fab5c573e85ee4c4e5f4a0b7ff\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,31 @@\n+  private void updateResourceValuesFromConfig(Set\u003cString\u003e resourceTypes,\n+      Resource resource, String[] splits) {\n+\n+    // If key is not a valid type, skip it.\n+    if (!resourceTypes.contains(splits[0])) {\n+      return;\n+    }\n+\n+    String units \u003d getUnits(splits[1]);\n+    Long resourceValue \u003d Long\n+        .valueOf(splits[1].substring(0, splits[1].length() - units.length()));\n+\n+    // Convert all incoming units to MB if units is configured.\n+    if (!units.isEmpty()) {\n+      resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n+    }\n+\n+    // map it based on key.\n+    AbsoluteResourceType resType \u003d AbsoluteResourceType\n+        .valueOf(StringUtils.toUpperCase(splits[0].trim()));\n+    switch (resType) {\n+      case MEMORY :\n+        resource.setMemorySize(resourceValue);\n+        break;\n+      case VCORES :\n+        resource.setVirtualCores(resourceValue.intValue());\n+        break;\n+      default :\n+        break;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateResourceValuesFromConfig(Set\u003cString\u003e resourceTypes,\n      Resource resource, String[] splits) {\n\n    // If key is not a valid type, skip it.\n    if (!resourceTypes.contains(splits[0])) {\n      return;\n    }\n\n    String units \u003d getUnits(splits[1]);\n    Long resourceValue \u003d Long\n        .valueOf(splits[1].substring(0, splits[1].length() - units.length()));\n\n    // Convert all incoming units to MB if units is configured.\n    if (!units.isEmpty()) {\n      resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n    }\n\n    // map it based on key.\n    AbsoluteResourceType resType \u003d AbsoluteResourceType\n        .valueOf(StringUtils.toUpperCase(splits[0].trim()));\n    switch (resType) {\n      case MEMORY :\n        resource.setMemorySize(resourceValue);\n        break;\n      case VCORES :\n        resource.setVirtualCores(resourceValue.intValue());\n        break;\n      default :\n        break;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java"
    }
  }
}