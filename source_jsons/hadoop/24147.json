{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileNameIndexUtils.java",
  "functionName": "trimURLEncodedString",
  "functionId": "trimURLEncodedString___encodedString-String__limitLength-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/FileNameIndexUtils.java",
  "functionStartLine": 311,
  "functionEndLine": 363,
  "numCommitsSeen": 11,
  "timeTaken": 1395,
  "changeHistory": [
    "b3579305268bffc44a8041c5b75f15f01ebb9ce4",
    "df99ea8a92d600e669606d41d3887bd004e7a3cc"
  ],
  "changeHistoryShort": {
    "b3579305268bffc44a8041c5b75f15f01ebb9ce4": "Ybodychange",
    "df99ea8a92d600e669606d41d3887bd004e7a3cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3579305268bffc44a8041c5b75f15f01ebb9ce4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6693. ArrayIndexOutOfBoundsException occurs when the length of the job name is equal to mapreduce.jobhistory.jobname.limit. Contributed by Ajith S.\n",
      "commitDate": "17/05/16 4:19 AM",
      "commitName": "b3579305268bffc44a8041c5b75f15f01ebb9ce4",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "28/01/16 11:20 PM",
      "commitNameOld": "df99ea8a92d600e669606d41d3887bd004e7a3cc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 109.17,
      "commitsBetweenForRepo": 681,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private static String trimURLEncodedString(\n       String encodedString, int limitLength) {\n     assert(limitLength \u003e\u003d 0) : \"limitLength should be positive integer\";\n \n-    if (encodedString.length() \u003c limitLength) {\n+    if (encodedString.length() \u003c\u003d limitLength) {\n       return encodedString;\n     }\n \n     int index \u003d 0;\n     int increase \u003d 0;\n     byte[] strBytes \u003d encodedString.getBytes(UTF_8);\n \n     // calculate effective character length based on UTF-8 specification.\n     // The size of a character coded in UTF-8 should be 4-byte at most.\n     // See RFC3629\n     while (true) {\n       byte b \u003d strBytes[index];\n       if (b \u003d\u003d \u0027%\u0027) {\n         byte minuend1 \u003d strBytes[index + 1];\n         byte subtrahend1 \u003d (byte)(Character.isDigit(\n             minuend1) ? \u00270\u0027 : \u0027A\u0027 - 10);\n         byte minuend2 \u003d strBytes[index + 2];\n         byte subtrahend2 \u003d (byte)(Character.isDigit(\n             minuend2) ? \u00270\u0027 : \u0027A\u0027 - 10);\n         int initialHex \u003d\n             ((Character.toUpperCase(minuend1) - subtrahend1) \u003c\u003c 4) +\n             (Character.toUpperCase(minuend2) - subtrahend2);\n \n         if (0x00 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0x7F) {\n           // For 1-byte UTF-8 characters\n           increase \u003d 3;\n         } else if (0xC2 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0xDF) {\n           // For 2-byte UTF-8 characters\n           increase \u003d 6;\n         } else if (0xE0 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0xEF) {\n           // For 3-byte UTF-8 characters\n           increase \u003d 9;\n         } else {\n           // For 4-byte UTF-8 characters\n           increase \u003d 12;\n         }\n       } else {\n         increase \u003d 1;\n       }\n       if (index + increase \u003e limitLength) {\n         break;\n       } else {\n         index +\u003d increase;\n       }\n     }\n \n     return encodedString.substring(0, index);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static String trimURLEncodedString(\n      String encodedString, int limitLength) {\n    assert(limitLength \u003e\u003d 0) : \"limitLength should be positive integer\";\n\n    if (encodedString.length() \u003c\u003d limitLength) {\n      return encodedString;\n    }\n\n    int index \u003d 0;\n    int increase \u003d 0;\n    byte[] strBytes \u003d encodedString.getBytes(UTF_8);\n\n    // calculate effective character length based on UTF-8 specification.\n    // The size of a character coded in UTF-8 should be 4-byte at most.\n    // See RFC3629\n    while (true) {\n      byte b \u003d strBytes[index];\n      if (b \u003d\u003d \u0027%\u0027) {\n        byte minuend1 \u003d strBytes[index + 1];\n        byte subtrahend1 \u003d (byte)(Character.isDigit(\n            minuend1) ? \u00270\u0027 : \u0027A\u0027 - 10);\n        byte minuend2 \u003d strBytes[index + 2];\n        byte subtrahend2 \u003d (byte)(Character.isDigit(\n            minuend2) ? \u00270\u0027 : \u0027A\u0027 - 10);\n        int initialHex \u003d\n            ((Character.toUpperCase(minuend1) - subtrahend1) \u003c\u003c 4) +\n            (Character.toUpperCase(minuend2) - subtrahend2);\n\n        if (0x00 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0x7F) {\n          // For 1-byte UTF-8 characters\n          increase \u003d 3;\n        } else if (0xC2 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0xDF) {\n          // For 2-byte UTF-8 characters\n          increase \u003d 6;\n        } else if (0xE0 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0xEF) {\n          // For 3-byte UTF-8 characters\n          increase \u003d 9;\n        } else {\n          // For 4-byte UTF-8 characters\n          increase \u003d 12;\n        }\n      } else {\n        increase \u003d 1;\n      }\n      if (index + increase \u003e limitLength) {\n        break;\n      } else {\n        index +\u003d increase;\n      }\n    }\n\n    return encodedString.substring(0, index);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/FileNameIndexUtils.java",
      "extendedDetails": {}
    },
    "df99ea8a92d600e669606d41d3887bd004e7a3cc": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6616. Fail to create jobhistory file if there are some multibyte characters in the job name. Contributed by Kousuke Saruta.\n",
      "commitDate": "28/01/16 11:20 PM",
      "commitName": "df99ea8a92d600e669606d41d3887bd004e7a3cc",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,53 @@\n+  private static String trimURLEncodedString(\n+      String encodedString, int limitLength) {\n+    assert(limitLength \u003e\u003d 0) : \"limitLength should be positive integer\";\n+\n+    if (encodedString.length() \u003c limitLength) {\n+      return encodedString;\n+    }\n+\n+    int index \u003d 0;\n+    int increase \u003d 0;\n+    byte[] strBytes \u003d encodedString.getBytes(UTF_8);\n+\n+    // calculate effective character length based on UTF-8 specification.\n+    // The size of a character coded in UTF-8 should be 4-byte at most.\n+    // See RFC3629\n+    while (true) {\n+      byte b \u003d strBytes[index];\n+      if (b \u003d\u003d \u0027%\u0027) {\n+        byte minuend1 \u003d strBytes[index + 1];\n+        byte subtrahend1 \u003d (byte)(Character.isDigit(\n+            minuend1) ? \u00270\u0027 : \u0027A\u0027 - 10);\n+        byte minuend2 \u003d strBytes[index + 2];\n+        byte subtrahend2 \u003d (byte)(Character.isDigit(\n+            minuend2) ? \u00270\u0027 : \u0027A\u0027 - 10);\n+        int initialHex \u003d\n+            ((Character.toUpperCase(minuend1) - subtrahend1) \u003c\u003c 4) +\n+            (Character.toUpperCase(minuend2) - subtrahend2);\n+\n+        if (0x00 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0x7F) {\n+          // For 1-byte UTF-8 characters\n+          increase \u003d 3;\n+        } else if (0xC2 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0xDF) {\n+          // For 2-byte UTF-8 characters\n+          increase \u003d 6;\n+        } else if (0xE0 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0xEF) {\n+          // For 3-byte UTF-8 characters\n+          increase \u003d 9;\n+        } else {\n+          // For 4-byte UTF-8 characters\n+          increase \u003d 12;\n+        }\n+      } else {\n+        increase \u003d 1;\n+      }\n+      if (index + increase \u003e limitLength) {\n+        break;\n+      } else {\n+        index +\u003d increase;\n+      }\n+    }\n+\n+    return encodedString.substring(0, index);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static String trimURLEncodedString(\n      String encodedString, int limitLength) {\n    assert(limitLength \u003e\u003d 0) : \"limitLength should be positive integer\";\n\n    if (encodedString.length() \u003c limitLength) {\n      return encodedString;\n    }\n\n    int index \u003d 0;\n    int increase \u003d 0;\n    byte[] strBytes \u003d encodedString.getBytes(UTF_8);\n\n    // calculate effective character length based on UTF-8 specification.\n    // The size of a character coded in UTF-8 should be 4-byte at most.\n    // See RFC3629\n    while (true) {\n      byte b \u003d strBytes[index];\n      if (b \u003d\u003d \u0027%\u0027) {\n        byte minuend1 \u003d strBytes[index + 1];\n        byte subtrahend1 \u003d (byte)(Character.isDigit(\n            minuend1) ? \u00270\u0027 : \u0027A\u0027 - 10);\n        byte minuend2 \u003d strBytes[index + 2];\n        byte subtrahend2 \u003d (byte)(Character.isDigit(\n            minuend2) ? \u00270\u0027 : \u0027A\u0027 - 10);\n        int initialHex \u003d\n            ((Character.toUpperCase(minuend1) - subtrahend1) \u003c\u003c 4) +\n            (Character.toUpperCase(minuend2) - subtrahend2);\n\n        if (0x00 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0x7F) {\n          // For 1-byte UTF-8 characters\n          increase \u003d 3;\n        } else if (0xC2 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0xDF) {\n          // For 2-byte UTF-8 characters\n          increase \u003d 6;\n        } else if (0xE0 \u003c\u003d initialHex \u0026\u0026 initialHex \u003c\u003d 0xEF) {\n          // For 3-byte UTF-8 characters\n          increase \u003d 9;\n        } else {\n          // For 4-byte UTF-8 characters\n          increase \u003d 12;\n        }\n      } else {\n        increase \u003d 1;\n      }\n      if (index + increase \u003e limitLength) {\n        break;\n      } else {\n        index +\u003d increase;\n      }\n    }\n\n    return encodedString.substring(0, index);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/FileNameIndexUtils.java"
    }
  }
}