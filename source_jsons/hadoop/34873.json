{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "generateBaseAllocationResponse",
  "functionId": "generateBaseAllocationResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 1302,
  "functionEndLine": 1327,
  "numCommitsSeen": 21,
  "timeTaken": 1353,
  "changeHistory": [
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa"
  ],
  "changeHistoryShort": {
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8933. [AMRMProxy] Fix potential empty fields in allocation response, move SubClusterTimeout to FederationInterceptor. Contributed by Botong Huang.\n",
      "commitDate": "11/11/18 11:12 AM",
      "commitName": "b5ec85d96615e8214c14b57f8980a1dee6197ffa",
      "commitAuthor": "Botong Huang",
      "diff": "@@ -0,0 +1,26 @@\n+  protected AllocateResponse generateBaseAllocationResponse() {\n+    AllocateResponse baseResponse \u003d\n+        RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\n+\n+    baseResponse.setAvailableResources(Resource.newInstance(0, 0));\n+    baseResponse.setNumClusterNodes(0);\n+\n+    Set\u003cSubClusterId\u003e expiredSC \u003d getTimedOutSCs(false);\n+    for (Entry\u003cSubClusterId, AllocateResponse\u003e entry : lastSCResponse\n+        .entrySet()) {\n+      if (expiredSC.contains(entry.getKey())) {\n+        // Skip expired sub-clusters\n+        continue;\n+      }\n+      AllocateResponse response \u003d entry.getValue();\n+\n+      if (response.getAvailableResources() !\u003d null) {\n+        baseResponse.setAvailableResources(\n+            Resources.add(baseResponse.getAvailableResources(),\n+                response.getAvailableResources()));\n+      }\n+      baseResponse.setNumClusterNodes(\n+          baseResponse.getNumClusterNodes() + response.getNumClusterNodes());\n+    }\n+    return baseResponse;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse generateBaseAllocationResponse() {\n    AllocateResponse baseResponse \u003d\n        RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\n\n    baseResponse.setAvailableResources(Resource.newInstance(0, 0));\n    baseResponse.setNumClusterNodes(0);\n\n    Set\u003cSubClusterId\u003e expiredSC \u003d getTimedOutSCs(false);\n    for (Entry\u003cSubClusterId, AllocateResponse\u003e entry : lastSCResponse\n        .entrySet()) {\n      if (expiredSC.contains(entry.getKey())) {\n        // Skip expired sub-clusters\n        continue;\n      }\n      AllocateResponse response \u003d entry.getValue();\n\n      if (response.getAvailableResources() !\u003d null) {\n        baseResponse.setAvailableResources(\n            Resources.add(baseResponse.getAvailableResources(),\n                response.getAvailableResources()));\n      }\n      baseResponse.setNumClusterNodes(\n          baseResponse.getNumClusterNodes() + response.getNumClusterNodes());\n    }\n    return baseResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}