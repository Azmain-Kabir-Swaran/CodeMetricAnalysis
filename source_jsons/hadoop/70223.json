{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResponseReceivedMetricUpdater.java",
  "functionName": "eventOccurred",
  "functionId": "eventOccurred___eventArg-ResponseReceivedEvent",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/metrics/ResponseReceivedMetricUpdater.java",
  "functionStartLine": 101,
  "functionEndLine": 145,
  "numCommitsSeen": 3,
  "timeTaken": 704,
  "changeHistory": [
    "0d91576ec31f63402f2db6107a04155368e2632d"
  ],
  "changeHistoryShort": {
    "0d91576ec31f63402f2db6107a04155368e2632d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0d91576ec31f63402f2db6107a04155368e2632d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10728. Metrics system for Windows Azure Storage Filesystem. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 1:52 PM",
      "commitName": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,45 @@\n+  public void eventOccurred(ResponseReceivedEvent eventArg) {\n+    instrumentation.webResponse();\n+    if (!(eventArg.getConnectionObject() instanceof HttpURLConnection)) {\n+      // Typically this shouldn\u0027t happen, but just let it pass\n+      return;\n+    }\n+    HttpURLConnection connection \u003d\n+        (HttpURLConnection) eventArg.getConnectionObject();\n+    RequestResult currentResult \u003d eventArg.getRequestResult();\n+    if (currentResult \u003d\u003d null) {\n+      // Again, typically shouldn\u0027t happen, but let it pass\n+      return;\n+    }\n+\n+    long requestLatency \u003d currentResult.getStopDate().getTime() \n+        - currentResult.getStartDate().getTime();\n+\n+    if (currentResult.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_CREATED \n+        \u0026\u0026 connection.getRequestMethod().equalsIgnoreCase(\"PUT\")) {\n+      // If it\u0027s a PUT with an HTTP_CREATED status then it\u0027s a successful\n+      // block upload.\n+      long length \u003d getRequestContentLength(connection);\n+      if (length \u003e 0) {\n+        blockUploadGaugeUpdater.blockUploaded(\n+            currentResult.getStartDate(),\n+            currentResult.getStopDate(),\n+            length);\n+        instrumentation.rawBytesUploaded(length);\n+        instrumentation.blockUploaded(requestLatency);\n+      }\n+    } else if (currentResult.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_PARTIAL \n+        \u0026\u0026 connection.getRequestMethod().equalsIgnoreCase(\"GET\")) {\n+      // If it\u0027s a GET with an HTTP_PARTIAL status then it\u0027s a successful\n+      // block download.\n+      long length \u003d getResponseContentLength(connection);\n+      if (length \u003e 0) {\n+        blockUploadGaugeUpdater.blockDownloaded(\n+            currentResult.getStartDate(),\n+            currentResult.getStopDate(),\n+            length);\n+        instrumentation.rawBytesDownloaded(length);\n+        instrumentation.blockDownloaded(requestLatency);\n+      }\n+    } \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void eventOccurred(ResponseReceivedEvent eventArg) {\n    instrumentation.webResponse();\n    if (!(eventArg.getConnectionObject() instanceof HttpURLConnection)) {\n      // Typically this shouldn\u0027t happen, but just let it pass\n      return;\n    }\n    HttpURLConnection connection \u003d\n        (HttpURLConnection) eventArg.getConnectionObject();\n    RequestResult currentResult \u003d eventArg.getRequestResult();\n    if (currentResult \u003d\u003d null) {\n      // Again, typically shouldn\u0027t happen, but let it pass\n      return;\n    }\n\n    long requestLatency \u003d currentResult.getStopDate().getTime() \n        - currentResult.getStartDate().getTime();\n\n    if (currentResult.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_CREATED \n        \u0026\u0026 connection.getRequestMethod().equalsIgnoreCase(\"PUT\")) {\n      // If it\u0027s a PUT with an HTTP_CREATED status then it\u0027s a successful\n      // block upload.\n      long length \u003d getRequestContentLength(connection);\n      if (length \u003e 0) {\n        blockUploadGaugeUpdater.blockUploaded(\n            currentResult.getStartDate(),\n            currentResult.getStopDate(),\n            length);\n        instrumentation.rawBytesUploaded(length);\n        instrumentation.blockUploaded(requestLatency);\n      }\n    } else if (currentResult.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_PARTIAL \n        \u0026\u0026 connection.getRequestMethod().equalsIgnoreCase(\"GET\")) {\n      // If it\u0027s a GET with an HTTP_PARTIAL status then it\u0027s a successful\n      // block download.\n      long length \u003d getResponseContentLength(connection);\n      if (length \u003e 0) {\n        blockUploadGaugeUpdater.blockDownloaded(\n            currentResult.getStartDate(),\n            currentResult.getStopDate(),\n            length);\n        instrumentation.rawBytesDownloaded(length);\n        instrumentation.blockDownloaded(requestLatency);\n      }\n    } \n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/metrics/ResponseReceivedMetricUpdater.java"
    }
  }
}