{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "parse",
  "functionId": "parse___f-File__sums-Map__Parameter,List__TaskResult____",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/pi/Parser.java",
  "functionStartLine": 67,
  "functionEndLine": 106,
  "numCommitsSeen": 7,
  "timeTaken": 4736,
  "changeHistory": [
    "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3",
    "905b17876c44634545a68300ff2f2d73fb86d3b7",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3": "Ybodychange",
    "905b17876c44634545a68300ff2f2d73fb86d3b7": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6881. Fix warnings from Spotbugs in hadoop-mapreduce. Contributed by Weiwei Yang.\n",
      "commitDate": "26/04/17 11:45 PM",
      "commitName": "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/12/14 10:49 AM",
      "commitNameOld": "be86237c09533a6691ed9eb4864643657331a11a",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 869.5,
      "commitsBetweenForRepo": 6270,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n   private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n     if (f.isDirectory()) {\n       println(\"Process directory \" + f);\n-      for(File child : f.listFiles())\n-        parse(child, sums);\n+      File[] files \u003d f.listFiles();\n+      if (files !\u003d null) {\n+        for(File child : files) {\n+          parse(child, sums);\n+        }\n+      }\n     } else if (f.getName().endsWith(\".txt\")) {\n       println(\"Parse file \" + f);\n       final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n       for(Parameter p : Parameter.values())\n         m.put(p, new ArrayList\u003cTaskResult\u003e());\n \n       final BufferedReader in \u003d new BufferedReader(\n           new InputStreamReader(new FileInputStream(f), Charsets.UTF_8)); \n       try {\n         for(String line; (line \u003d in.readLine()) !\u003d null; )\n           try {\n             parseLine(line, m);\n           } catch(RuntimeException e) {\n             Util.err.println(\"line \u003d \" + line);\n             throw e;\n           }\n       } finally {\n         in.close();\n       }\n \n       for(Parameter p : Parameter.values()) {\n         final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n         if (!combined.isEmpty()) {\n           println(p + \" (size\u003d\" + combined.size() + \"):\");\n           for(TaskResult r : combined)\n             println(\"  \" + r);\n         }\n         sums.get(p).addAll(m.get(p));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n    if (f.isDirectory()) {\n      println(\"Process directory \" + f);\n      File[] files \u003d f.listFiles();\n      if (files !\u003d null) {\n        for(File child : files) {\n          parse(child, sums);\n        }\n      }\n    } else if (f.getName().endsWith(\".txt\")) {\n      println(\"Parse file \" + f);\n      final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n      for(Parameter p : Parameter.values())\n        m.put(p, new ArrayList\u003cTaskResult\u003e());\n\n      final BufferedReader in \u003d new BufferedReader(\n          new InputStreamReader(new FileInputStream(f), Charsets.UTF_8)); \n      try {\n        for(String line; (line \u003d in.readLine()) !\u003d null; )\n          try {\n            parseLine(line, m);\n          } catch(RuntimeException e) {\n            Util.err.println(\"line \u003d \" + line);\n            throw e;\n          }\n      } finally {\n        in.close();\n      }\n\n      for(Parameter p : Parameter.values()) {\n        final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n        if (!combined.isEmpty()) {\n          println(p + \" (size\u003d\" + combined.size() + \"):\");\n          for(TaskResult r : combined)\n            println(\"  \" + r);\n        }\n        sums.get(p).addAll(m.get(p));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/pi/Parser.java",
      "extendedDetails": {}
    },
    "905b17876c44634545a68300ff2f2d73fb86d3b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4723. Fix warnings found by findbugs 2. Contributed by Sandy Ryza\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 4:16 PM",
      "commitName": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "18/11/11 5:24 PM",
      "commitNameOld": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 361.95,
      "commitsBetweenForRepo": 2325,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n     if (f.isDirectory()) {\n       println(\"Process directory \" + f);\n       for(File child : f.listFiles())\n         parse(child, sums);\n     } else if (f.getName().endsWith(\".txt\")) {\n       println(\"Parse file \" + f);\n       final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n       for(Parameter p : Parameter.values())\n         m.put(p, new ArrayList\u003cTaskResult\u003e());\n \n-      final BufferedReader in \u003d new BufferedReader(new FileReader(f)); \n+      final BufferedReader in \u003d new BufferedReader(\n+          new InputStreamReader(new FileInputStream(f), Charsets.UTF_8)); \n       try {\n         for(String line; (line \u003d in.readLine()) !\u003d null; )\n           try {\n             parseLine(line, m);\n           } catch(RuntimeException e) {\n             Util.err.println(\"line \u003d \" + line);\n             throw e;\n           }\n       } finally {\n         in.close();\n       }\n \n       for(Parameter p : Parameter.values()) {\n         final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n         if (!combined.isEmpty()) {\n           println(p + \" (size\u003d\" + combined.size() + \"):\");\n           for(TaskResult r : combined)\n             println(\"  \" + r);\n         }\n         sums.get(p).addAll(m.get(p));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n    if (f.isDirectory()) {\n      println(\"Process directory \" + f);\n      for(File child : f.listFiles())\n        parse(child, sums);\n    } else if (f.getName().endsWith(\".txt\")) {\n      println(\"Parse file \" + f);\n      final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n      for(Parameter p : Parameter.values())\n        m.put(p, new ArrayList\u003cTaskResult\u003e());\n\n      final BufferedReader in \u003d new BufferedReader(\n          new InputStreamReader(new FileInputStream(f), Charsets.UTF_8)); \n      try {\n        for(String line; (line \u003d in.readLine()) !\u003d null; )\n          try {\n            parseLine(line, m);\n          } catch(RuntimeException e) {\n            Util.err.println(\"line \u003d \" + line);\n            throw e;\n          }\n      } finally {\n        in.close();\n      }\n\n      for(Parameter p : Parameter.values()) {\n        final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n        if (!combined.isEmpty()) {\n          println(p + \" (size\u003d\" + combined.size() + \"):\");\n          for(TaskResult r : combined)\n            println(\"  \" + r);\n        }\n        sums.get(p).addAll(m.get(p));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/pi/Parser.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n    if (f.isDirectory()) {\n      println(\"Process directory \" + f);\n      for(File child : f.listFiles())\n        parse(child, sums);\n    } else if (f.getName().endsWith(\".txt\")) {\n      println(\"Parse file \" + f);\n      final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n      for(Parameter p : Parameter.values())\n        m.put(p, new ArrayList\u003cTaskResult\u003e());\n\n      final BufferedReader in \u003d new BufferedReader(new FileReader(f)); \n      try {\n        for(String line; (line \u003d in.readLine()) !\u003d null; )\n          try {\n            parseLine(line, m);\n          } catch(RuntimeException e) {\n            Util.err.println(\"line \u003d \" + line);\n            throw e;\n          }\n      } finally {\n        in.close();\n      }\n\n      for(Parameter p : Parameter.values()) {\n        final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n        if (!combined.isEmpty()) {\n          println(p + \" (size\u003d\" + combined.size() + \"):\");\n          for(TaskResult r : combined)\n            println(\"  \" + r);\n        }\n        sums.get(p).addAll(m.get(p));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/pi/Parser.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/pi/Parser.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/pi/Parser.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n    if (f.isDirectory()) {\n      println(\"Process directory \" + f);\n      for(File child : f.listFiles())\n        parse(child, sums);\n    } else if (f.getName().endsWith(\".txt\")) {\n      println(\"Parse file \" + f);\n      final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n      for(Parameter p : Parameter.values())\n        m.put(p, new ArrayList\u003cTaskResult\u003e());\n\n      final BufferedReader in \u003d new BufferedReader(new FileReader(f)); \n      try {\n        for(String line; (line \u003d in.readLine()) !\u003d null; )\n          try {\n            parseLine(line, m);\n          } catch(RuntimeException e) {\n            Util.err.println(\"line \u003d \" + line);\n            throw e;\n          }\n      } finally {\n        in.close();\n      }\n\n      for(Parameter p : Parameter.values()) {\n        final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n        if (!combined.isEmpty()) {\n          println(p + \" (size\u003d\" + combined.size() + \"):\");\n          for(TaskResult r : combined)\n            println(\"  \" + r);\n        }\n        sums.get(p).addAll(m.get(p));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/pi/Parser.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/pi/Parser.java",
        "newPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/pi/Parser.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n    if (f.isDirectory()) {\n      println(\"Process directory \" + f);\n      for(File child : f.listFiles())\n        parse(child, sums);\n    } else if (f.getName().endsWith(\".txt\")) {\n      println(\"Parse file \" + f);\n      final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n      for(Parameter p : Parameter.values())\n        m.put(p, new ArrayList\u003cTaskResult\u003e());\n\n      final BufferedReader in \u003d new BufferedReader(new FileReader(f)); \n      try {\n        for(String line; (line \u003d in.readLine()) !\u003d null; )\n          try {\n            parseLine(line, m);\n          } catch(RuntimeException e) {\n            Util.err.println(\"line \u003d \" + line);\n            throw e;\n          }\n      } finally {\n        in.close();\n      }\n\n      for(Parameter p : Parameter.values()) {\n        final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n        if (!combined.isEmpty()) {\n          println(p + \" (size\u003d\" + combined.size() + \"):\");\n          for(TaskResult r : combined)\n            println(\"  \" + r);\n        }\n        sums.get(p).addAll(m.get(p));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/pi/Parser.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/examples/org/apache/hadoop/examples/pi/Parser.java",
        "newPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/pi/Parser.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,35 @@\n+  private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n+    if (f.isDirectory()) {\n+      println(\"Process directory \" + f);\n+      for(File child : f.listFiles())\n+        parse(child, sums);\n+    } else if (f.getName().endsWith(\".txt\")) {\n+      println(\"Parse file \" + f);\n+      final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n+      for(Parameter p : Parameter.values())\n+        m.put(p, new ArrayList\u003cTaskResult\u003e());\n+\n+      final BufferedReader in \u003d new BufferedReader(new FileReader(f)); \n+      try {\n+        for(String line; (line \u003d in.readLine()) !\u003d null; )\n+          try {\n+            parseLine(line, m);\n+          } catch(RuntimeException e) {\n+            Util.err.println(\"line \u003d \" + line);\n+            throw e;\n+          }\n+      } finally {\n+        in.close();\n+      }\n+\n+      for(Parameter p : Parameter.values()) {\n+        final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n+        if (!combined.isEmpty()) {\n+          println(p + \" (size\u003d\" + combined.size() + \"):\");\n+          for(TaskResult r : combined)\n+            println(\"  \" + r);\n+        }\n+        sums.get(p).addAll(m.get(p));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void parse(File f, Map\u003cParameter, List\u003cTaskResult\u003e\u003e sums) throws IOException {\n    if (f.isDirectory()) {\n      println(\"Process directory \" + f);\n      for(File child : f.listFiles())\n        parse(child, sums);\n    } else if (f.getName().endsWith(\".txt\")) {\n      println(\"Parse file \" + f);\n      final Map\u003cParameter, List\u003cTaskResult\u003e\u003e m \u003d new TreeMap\u003cParameter, List\u003cTaskResult\u003e\u003e();    \n      for(Parameter p : Parameter.values())\n        m.put(p, new ArrayList\u003cTaskResult\u003e());\n\n      final BufferedReader in \u003d new BufferedReader(new FileReader(f)); \n      try {\n        for(String line; (line \u003d in.readLine()) !\u003d null; )\n          try {\n            parseLine(line, m);\n          } catch(RuntimeException e) {\n            Util.err.println(\"line \u003d \" + line);\n            throw e;\n          }\n      } finally {\n        in.close();\n      }\n\n      for(Parameter p : Parameter.values()) {\n        final List\u003cTaskResult\u003e combined \u003d Util.combine(m.get(p));\n        if (!combined.isEmpty()) {\n          println(p + \" (size\u003d\" + combined.size() + \"):\");\n          for(TaskResult r : combined)\n            println(\"  \" + r);\n        }\n        sums.get(p).addAll(m.get(p));\n      }\n    }\n  }",
      "path": "mapreduce/src/examples/org/apache/hadoop/examples/pi/Parser.java"
    }
  }
}