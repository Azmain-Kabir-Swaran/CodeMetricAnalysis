{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "markContainerForNonKillable",
  "functionId": "markContainerForNonKillable___nonKillableContainer-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2244,
  "functionEndLine": 2270,
  "numCommitsSeen": 239,
  "timeTaken": 7400,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "c96cbe8659587cfc114a96aab1be5cc85029fe44",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "ae14e5d07f1b6702a5160637438028bb03d9387e"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "c96cbe8659587cfc114a96aab1be5cc85029fe44": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "19/03/20 12:25 AM",
      "commitNameOld": "f2d3ac2a3f27a849e00f529c5c2df6ef0bd82911",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void markContainerForNonKillable(\n       RMContainer nonKillableContainer) {\n     writeLock.lock();\n     try {\n       LOG.debug(\"{}: container {}\", SchedulerEventType.\n           MARK_CONTAINER_FOR_NONKILLABLE, nonKillableContainer);\n \n       FiCaSchedulerNode node \u003d getSchedulerNode(\n           nonKillableContainer.getAllocatedNode());\n \n       FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n           nonKillableContainer.getContainerId());\n \n       node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n \n       // notify PreemptionManager\n       // Get the application for the finished container\n       if (null !\u003d application) {\n-        String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n+        String leafQueuePath \u003d application.getCSLeafQueue().getQueuePath();\n         getPreemptionManager().removeKillableContainer(\n             new KillableContainer(nonKillableContainer, node.getPartition(),\n-                leafQueueName));\n+                leafQueuePath));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void markContainerForNonKillable(\n      RMContainer nonKillableContainer) {\n    writeLock.lock();\n    try {\n      LOG.debug(\"{}: container {}\", SchedulerEventType.\n          MARK_CONTAINER_FOR_NONKILLABLE, nonKillableContainer);\n\n      FiCaSchedulerNode node \u003d getSchedulerNode(\n          nonKillableContainer.getAllocatedNode());\n\n      FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n          nonKillableContainer.getContainerId());\n\n      node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n\n      // notify PreemptionManager\n      // Get the application for the finished container\n      if (null !\u003d application) {\n        String leafQueuePath \u003d application.getCSLeafQueue().getQueuePath();\n        getPreemptionManager().removeKillableContainer(\n            new KillableContainer(nonKillableContainer, node.getPartition(),\n                leafQueuePath));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n   private void markContainerForNonKillable(\n       RMContainer nonKillableContainer) {\n     writeLock.lock();\n     try {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n-                + nonKillableContainer.toString());\n-      }\n+      LOG.debug(\"{}: container {}\", SchedulerEventType.\n+          MARK_CONTAINER_FOR_NONKILLABLE, nonKillableContainer);\n \n       FiCaSchedulerNode node \u003d getSchedulerNode(\n           nonKillableContainer.getAllocatedNode());\n \n       FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n           nonKillableContainer.getContainerId());\n \n       node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n \n       // notify PreemptionManager\n       // Get the application for the finished container\n       if (null !\u003d application) {\n         String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n         getPreemptionManager().removeKillableContainer(\n             new KillableContainer(nonKillableContainer, node.getPartition(),\n                 leafQueueName));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void markContainerForNonKillable(\n      RMContainer nonKillableContainer) {\n    writeLock.lock();\n    try {\n      LOG.debug(\"{}: container {}\", SchedulerEventType.\n          MARK_CONTAINER_FOR_NONKILLABLE, nonKillableContainer);\n\n      FiCaSchedulerNode node \u003d getSchedulerNode(\n          nonKillableContainer.getAllocatedNode());\n\n      FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n          nonKillableContainer.getContainerId());\n\n      node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n\n      // notify PreemptionManager\n      // Get the application for the finished container\n      if (null !\u003d application) {\n        String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n        getPreemptionManager().removeKillableContainer(\n            new KillableContainer(nonKillableContainer, node.getPartition(),\n                leafQueueName));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void markContainerForNonKillable(\n       RMContainer nonKillableContainer) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n                 + nonKillableContainer.toString());\n       }\n \n       FiCaSchedulerNode node \u003d getSchedulerNode(\n           nonKillableContainer.getAllocatedNode());\n \n       FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n           nonKillableContainer.getContainerId());\n \n       node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n \n       // notify PreemptionManager\n       // Get the application for the finished container\n       if (null !\u003d application) {\n         String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n         getPreemptionManager().removeKillableContainer(\n             new KillableContainer(nonKillableContainer, node.getPartition(),\n                 leafQueueName));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void markContainerForNonKillable(\n      RMContainer nonKillableContainer) {\n    writeLock.lock();\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n                + nonKillableContainer.toString());\n      }\n\n      FiCaSchedulerNode node \u003d getSchedulerNode(\n          nonKillableContainer.getAllocatedNode());\n\n      FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n          nonKillableContainer.getContainerId());\n\n      node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n\n      // notify PreemptionManager\n      // Get the application for the finished container\n      if (null !\u003d application) {\n        String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n        getPreemptionManager().removeKillableContainer(\n            new KillableContainer(nonKillableContainer, node.getPartition(),\n                leafQueueName));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "c96cbe8659587cfc114a96aab1be5cc85029fe44": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8977. Remove unnecessary type casting when calling AbstractYarnScheduler#getSchedulerNode. Contributed by Wanqiang Ji.\n",
      "commitDate": "07/11/18 6:42 AM",
      "commitName": "c96cbe8659587cfc114a96aab1be5cc85029fe44",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "06/11/18 6:17 PM",
      "commitNameOld": "951c98f89059d64fda8456366f680eff4a7a6785",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void markContainerForNonKillable(\n       RMContainer nonKillableContainer) {\n     try {\n       writeLock.lock();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n                 + nonKillableContainer.toString());\n       }\n \n-      FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n+      FiCaSchedulerNode node \u003d getSchedulerNode(\n           nonKillableContainer.getAllocatedNode());\n \n       FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n           nonKillableContainer.getContainerId());\n \n       node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n \n       // notify PreemptionManager\n       // Get the application for the finished container\n       if (null !\u003d application) {\n         String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n         getPreemptionManager().removeKillableContainer(\n             new KillableContainer(nonKillableContainer, node.getPartition(),\n                 leafQueueName));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void markContainerForNonKillable(\n      RMContainer nonKillableContainer) {\n    try {\n      writeLock.lock();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n                + nonKillableContainer.toString());\n      }\n\n      FiCaSchedulerNode node \u003d getSchedulerNode(\n          nonKillableContainer.getAllocatedNode());\n\n      FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n          nonKillableContainer.getContainerId());\n\n      node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n\n      // notify PreemptionManager\n      // Get the application for the finished container\n      if (null !\u003d application) {\n        String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n        getPreemptionManager().removeKillableContainer(\n            new KillableContainer(nonKillableContainer, node.getPartition(),\n                leafQueueName));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,30 @@\n-  private synchronized void markContainerForNonKillable(\n+  private void markContainerForNonKillable(\n       RMContainer nonKillableContainer) {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\n-          SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n-              + nonKillableContainer.toString());\n-    }\n+    try {\n+      writeLock.lock();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n+                + nonKillableContainer.toString());\n+      }\n \n-    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n-        nonKillableContainer.getAllocatedNode());\n+      FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n+          nonKillableContainer.getAllocatedNode());\n \n-    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n-        nonKillableContainer.getContainerId());\n+      FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n+          nonKillableContainer.getContainerId());\n \n-    node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n+      node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n \n-    // notify PreemptionManager\n-    // Get the application for the finished container\n-    if (null !\u003d application) {\n-      String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n-      getPreemptionManager().removeKillableContainer(\n-          new KillableContainer(nonKillableContainer, node.getPartition(),\n-              leafQueueName));\n+      // notify PreemptionManager\n+      // Get the application for the finished container\n+      if (null !\u003d application) {\n+        String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n+        getPreemptionManager().removeKillableContainer(\n+            new KillableContainer(nonKillableContainer, node.getPartition(),\n+                leafQueueName));\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void markContainerForNonKillable(\n      RMContainer nonKillableContainer) {\n    try {\n      writeLock.lock();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n                + nonKillableContainer.toString());\n      }\n\n      FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n          nonKillableContainer.getAllocatedNode());\n\n      FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n          nonKillableContainer.getContainerId());\n\n      node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n\n      // notify PreemptionManager\n      // Get the application for the finished container\n      if (null !\u003d application) {\n        String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n        getPreemptionManager().removeKillableContainer(\n            new KillableContainer(nonKillableContainer, node.getPartition(),\n                leafQueueName));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,30 @@\n-  private synchronized void markContainerForNonKillable(\n+  private void markContainerForNonKillable(\n       RMContainer nonKillableContainer) {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\n-          SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n-              + nonKillableContainer.toString());\n-    }\n+    try {\n+      writeLock.lock();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n+                + nonKillableContainer.toString());\n+      }\n \n-    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n-        nonKillableContainer.getAllocatedNode());\n+      FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n+          nonKillableContainer.getAllocatedNode());\n \n-    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n-        nonKillableContainer.getContainerId());\n+      FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n+          nonKillableContainer.getContainerId());\n \n-    node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n+      node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n \n-    // notify PreemptionManager\n-    // Get the application for the finished container\n-    if (null !\u003d application) {\n-      String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n-      getPreemptionManager().removeKillableContainer(\n-          new KillableContainer(nonKillableContainer, node.getPartition(),\n-              leafQueueName));\n+      // notify PreemptionManager\n+      // Get the application for the finished container\n+      if (null !\u003d application) {\n+        String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n+        getPreemptionManager().removeKillableContainer(\n+            new KillableContainer(nonKillableContainer, node.getPartition(),\n+                leafQueueName));\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void markContainerForNonKillable(\n      RMContainer nonKillableContainer) {\n    try {\n      writeLock.lock();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n                + nonKillableContainer.toString());\n      }\n\n      FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n          nonKillableContainer.getAllocatedNode());\n\n      FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n          nonKillableContainer.getContainerId());\n\n      node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n\n      // notify PreemptionManager\n      // Get the application for the finished container\n      if (null !\u003d application) {\n        String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n        getPreemptionManager().removeKillableContainer(\n            new KillableContainer(nonKillableContainer, node.getPartition(),\n                leafQueueName));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,25 @@\n+  private synchronized void markContainerForNonKillable(\n+      RMContainer nonKillableContainer) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\n+          SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n+              + nonKillableContainer.toString());\n+    }\n+\n+    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n+        nonKillableContainer.getAllocatedNode());\n+\n+    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n+        nonKillableContainer.getContainerId());\n+\n+    node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n+\n+    // notify PreemptionManager\n+    // Get the application for the finished container\n+    if (null !\u003d application) {\n+      String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n+      getPreemptionManager().removeKillableContainer(\n+          new KillableContainer(nonKillableContainer, node.getPartition(),\n+              leafQueueName));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void markContainerForNonKillable(\n      RMContainer nonKillableContainer) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\n          SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + \": container\"\n              + nonKillableContainer.toString());\n    }\n\n    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getSchedulerNode(\n        nonKillableContainer.getAllocatedNode());\n\n    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n        nonKillableContainer.getContainerId());\n\n    node.markContainerToNonKillable(nonKillableContainer.getContainerId());\n\n    // notify PreemptionManager\n    // Get the application for the finished container\n    if (null !\u003d application) {\n      String leafQueueName \u003d application.getCSLeafQueue().getQueueName();\n      getPreemptionManager().removeKillableContainer(\n          new KillableContainer(nonKillableContainer, node.getPartition(),\n              leafQueueName));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}