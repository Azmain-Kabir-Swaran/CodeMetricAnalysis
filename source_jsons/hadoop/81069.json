{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Configuration.java",
  "functionName": "readTagFromConfig",
  "functionId": "readTagFromConfig___attributeValue-String__confName-String__confValue-String__confSource-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
  "functionStartLine": 3416,
  "functionEndLine": 3438,
  "numCommitsSeen": 250,
  "timeTaken": 4207,
  "changeHistory": [
    "f51da9c4d1423c2ac92eb4f40e973264e7e968cc",
    "28790b81ecb719ac26a01ad0c400ee5f1c29ccf8",
    "3688e491d528edb9efe54c4ef110d2ded62db3e8",
    "0889e5a8b7102ca1b64af6806537ad99c2018dfd",
    "a4cd101934ae5a5cad9663de872fb4ecee0d7560"
  ],
  "changeHistoryShort": {
    "f51da9c4d1423c2ac92eb4f40e973264e7e968cc": "Ymultichange(Yparameterchange,Ybodychange)",
    "28790b81ecb719ac26a01ad0c400ee5f1c29ccf8": "Ybodychange",
    "3688e491d528edb9efe54c4ef110d2ded62db3e8": "Ybodychange",
    "0889e5a8b7102ca1b64af6806537ad99c2018dfd": "Ybodychange",
    "a4cd101934ae5a5cad9663de872fb4ecee0d7560": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f51da9c4d1423c2ac92eb4f40e973264e7e968cc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15554. Improve JIT performance for Configuration parsing. Contributed by Todd Lipcon.\n",
      "commitDate": "02/07/18 9:31 AM",
      "commitName": "f51da9c4d1423c2ac92eb4f40e973264e7e968cc",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15554. Improve JIT performance for Configuration parsing. Contributed by Todd Lipcon.\n",
          "commitDate": "02/07/18 9:31 AM",
          "commitName": "f51da9c4d1423c2ac92eb4f40e973264e7e968cc",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "20/06/18 4:43 PM",
          "commitNameOld": "43541a18907d2303b708ae27a9a2cb5df891da4f",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 11.7,
          "commitsBetweenForRepo": 51,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   private void readTagFromConfig(String attributeValue, String confName, String\n-      confValue, List\u003cString\u003e confSource) {\n+      confValue, String[] confSource) {\n     for (String tagStr : attributeValue.split(\",\")) {\n       try {\n         tagStr \u003d tagStr.trim();\n         // Handle property with no/null value\n         if (confValue \u003d\u003d null) {\n           confValue \u003d \"\";\n         }\n         if (propertyTagsMap.containsKey(tagStr)) {\n           propertyTagsMap.get(tagStr).setProperty(confName, confValue);\n         } else {\n           Properties props \u003d new Properties();\n           props.setProperty(confName, confValue);\n           propertyTagsMap.put(tagStr, props);\n         }\n       } catch (Exception ex) {\n         // Log the exception at trace level.\n         LOG.trace(\"Tag \u0027{}\u0027 for property:{} Source:{}\", tagStr, confName,\n-            Arrays.toString(confSource.toArray()), ex);\n+            confSource, ex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void readTagFromConfig(String attributeValue, String confName, String\n      confValue, String[] confSource) {\n    for (String tagStr : attributeValue.split(\",\")) {\n      try {\n        tagStr \u003d tagStr.trim();\n        // Handle property with no/null value\n        if (confValue \u003d\u003d null) {\n          confValue \u003d \"\";\n        }\n        if (propertyTagsMap.containsKey(tagStr)) {\n          propertyTagsMap.get(tagStr).setProperty(confName, confValue);\n        } else {\n          Properties props \u003d new Properties();\n          props.setProperty(confName, confValue);\n          propertyTagsMap.put(tagStr, props);\n        }\n      } catch (Exception ex) {\n        // Log the exception at trace level.\n        LOG.trace(\"Tag \u0027{}\u0027 for property:{} Source:{}\", tagStr, confName,\n            confSource, ex);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {
            "oldValue": "[attributeValue-String, confName-String, confValue-String, confSource-List\u003cString\u003e]",
            "newValue": "[attributeValue-String, confName-String, confValue-String, confSource-String[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15554. Improve JIT performance for Configuration parsing. Contributed by Todd Lipcon.\n",
          "commitDate": "02/07/18 9:31 AM",
          "commitName": "f51da9c4d1423c2ac92eb4f40e973264e7e968cc",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "20/06/18 4:43 PM",
          "commitNameOld": "43541a18907d2303b708ae27a9a2cb5df891da4f",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 11.7,
          "commitsBetweenForRepo": 51,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   private void readTagFromConfig(String attributeValue, String confName, String\n-      confValue, List\u003cString\u003e confSource) {\n+      confValue, String[] confSource) {\n     for (String tagStr : attributeValue.split(\",\")) {\n       try {\n         tagStr \u003d tagStr.trim();\n         // Handle property with no/null value\n         if (confValue \u003d\u003d null) {\n           confValue \u003d \"\";\n         }\n         if (propertyTagsMap.containsKey(tagStr)) {\n           propertyTagsMap.get(tagStr).setProperty(confName, confValue);\n         } else {\n           Properties props \u003d new Properties();\n           props.setProperty(confName, confValue);\n           propertyTagsMap.put(tagStr, props);\n         }\n       } catch (Exception ex) {\n         // Log the exception at trace level.\n         LOG.trace(\"Tag \u0027{}\u0027 for property:{} Source:{}\", tagStr, confName,\n-            Arrays.toString(confSource.toArray()), ex);\n+            confSource, ex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void readTagFromConfig(String attributeValue, String confName, String\n      confValue, String[] confSource) {\n    for (String tagStr : attributeValue.split(\",\")) {\n      try {\n        tagStr \u003d tagStr.trim();\n        // Handle property with no/null value\n        if (confValue \u003d\u003d null) {\n          confValue \u003d \"\";\n        }\n        if (propertyTagsMap.containsKey(tagStr)) {\n          propertyTagsMap.get(tagStr).setProperty(confName, confValue);\n        } else {\n          Properties props \u003d new Properties();\n          props.setProperty(confName, confValue);\n          propertyTagsMap.put(tagStr, props);\n        }\n      } catch (Exception ex) {\n        // Log the exception at trace level.\n        LOG.trace(\"Tag \u0027{}\u0027 for property:{} Source:{}\", tagStr, confName,\n            confSource, ex);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {}
        }
      ]
    },
    "28790b81ecb719ac26a01ad0c400ee5f1c29ccf8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15295. Remove redundant logging related to tags from Configuration. Contributed by Ajay Kumar.\n",
      "commitDate": "23/03/18 9:17 PM",
      "commitName": "28790b81ecb719ac26a01ad0c400ee5f1c29ccf8",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "22/03/18 11:04 AM",
      "commitNameOld": "268c29a5f541449659f4b4ea1975c6f04c7b6a70",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 1.43,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private void readTagFromConfig(String attributeValue, String confName, String\n       confValue, List\u003cString\u003e confSource) {\n     for (String tagStr : attributeValue.split(\",\")) {\n-      tagStr \u003d tagStr.trim();\n       try {\n+        tagStr \u003d tagStr.trim();\n         // Handle property with no/null value\n         if (confValue \u003d\u003d null) {\n           confValue \u003d \"\";\n         }\n         if (propertyTagsMap.containsKey(tagStr)) {\n           propertyTagsMap.get(tagStr).setProperty(confName, confValue);\n         } else {\n           Properties props \u003d new Properties();\n           props.setProperty(confName, confValue);\n           propertyTagsMap.put(tagStr, props);\n         }\n       } catch (Exception ex) {\n         // Log the exception at trace level.\n         LOG.trace(\"Tag \u0027{}\u0027 for property:{} Source:{}\", tagStr, confName,\n             Arrays.toString(confSource.toArray()), ex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTagFromConfig(String attributeValue, String confName, String\n      confValue, List\u003cString\u003e confSource) {\n    for (String tagStr : attributeValue.split(\",\")) {\n      try {\n        tagStr \u003d tagStr.trim();\n        // Handle property with no/null value\n        if (confValue \u003d\u003d null) {\n          confValue \u003d \"\";\n        }\n        if (propertyTagsMap.containsKey(tagStr)) {\n          propertyTagsMap.get(tagStr).setProperty(confName, confValue);\n        } else {\n          Properties props \u003d new Properties();\n          props.setProperty(confName, confValue);\n          propertyTagsMap.put(tagStr, props);\n        }\n      } catch (Exception ex) {\n        // Log the exception at trace level.\n        LOG.trace(\"Tag \u0027{}\u0027 for property:{} Source:{}\", tagStr, confName,\n            Arrays.toString(confSource.toArray()), ex);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "3688e491d528edb9efe54c4ef110d2ded62db3e8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15007. Stabilize and document Configuration \u003ctag\u003e element. Contributed by Ajay Kumar.\n",
      "commitDate": "23/02/18 10:26 AM",
      "commitName": "3688e491d528edb9efe54c4ef110d2ded62db3e8",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "14/02/18 1:11 PM",
      "commitNameOld": "8f66affd6265c9e4231e18d7ca352fb3035dae9a",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 8.89,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,23 @@\n   private void readTagFromConfig(String attributeValue, String confName, String\n       confValue, List\u003cString\u003e confSource) {\n     for (String tagStr : attributeValue.split(\",\")) {\n       tagStr \u003d tagStr.trim();\n       try {\n-        if (confSource.size() \u003e 0) {\n-          for (String source : confSource) {\n-            PropertyTag tag1 \u003d this.getPropertyTag(tagStr,\n-                FilenameUtils.getName(source).split(\"-\")[0]);\n-            if (tag1 !\u003d null) {\n-              //Handle property with no/null value\n-              if (confValue \u003d\u003d null) {\n-                confValue \u003d \"\";\n-              }\n-              if (propertyTagsMap.containsKey(tag1)) {\n-                propertyTagsMap.get(tag1).setProperty(confName, confValue);\n-              } else {\n-                Properties props \u003d new Properties();\n-                props.setProperty(confName, confValue);\n-                propertyTagsMap.put(tag1, props);\n-              }\n-            }\n-          }\n+        // Handle property with no/null value\n+        if (confValue \u003d\u003d null) {\n+          confValue \u003d \"\";\n+        }\n+        if (propertyTagsMap.containsKey(tagStr)) {\n+          propertyTagsMap.get(tagStr).setProperty(confName, confValue);\n         } else {\n-          // If no source is set try to find tag in CorePropertyTag\n-          if (propertyTagsMap.containsKey(CorePropertyTag.valueOf(tagStr))) {\n-            propertyTagsMap.get(CorePropertyTag.valueOf(tagStr))\n-                .setProperty(confName, confValue);\n-          } else {\n-            Properties props \u003d new Properties();\n-            props.setProperty(confName, confValue);\n-            propertyTagsMap.put(CorePropertyTag.valueOf(tagStr),\n-                props);\n-          }\n+          Properties props \u003d new Properties();\n+          props.setProperty(confName, confValue);\n+          propertyTagsMap.put(tagStr, props);\n         }\n       } catch (Exception ex) {\n-        // Log the invalid tag and continue to parse rest of the properties.\n-        LOG.info(\"Invalid tag \u0027\" + tagStr + \"\u0027 found for \"\n-            + \"property:\" + confName + \" Source:\" + Arrays\n-            .toString(confSource.toArray()), ex);\n+        // Log the exception at trace level.\n+        LOG.trace(\"Tag \u0027{}\u0027 for property:{} Source:{}\", tagStr, confName,\n+            Arrays.toString(confSource.toArray()), ex);\n       }\n-\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTagFromConfig(String attributeValue, String confName, String\n      confValue, List\u003cString\u003e confSource) {\n    for (String tagStr : attributeValue.split(\",\")) {\n      tagStr \u003d tagStr.trim();\n      try {\n        // Handle property with no/null value\n        if (confValue \u003d\u003d null) {\n          confValue \u003d \"\";\n        }\n        if (propertyTagsMap.containsKey(tagStr)) {\n          propertyTagsMap.get(tagStr).setProperty(confName, confValue);\n        } else {\n          Properties props \u003d new Properties();\n          props.setProperty(confName, confValue);\n          propertyTagsMap.put(tagStr, props);\n        }\n      } catch (Exception ex) {\n        // Log the exception at trace level.\n        LOG.trace(\"Tag \u0027{}\u0027 for property:{} Source:{}\", tagStr, confName,\n            Arrays.toString(confSource.toArray()), ex);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "0889e5a8b7102ca1b64af6806537ad99c2018dfd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12529. Get source for config tags from file name. Contributed by Ajay Kumar.\n",
      "commitDate": "25/09/17 1:55 PM",
      "commitName": "0889e5a8b7102ca1b64af6806537ad99c2018dfd",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "07/09/17 12:40 PM",
      "commitNameOld": "a4cd101934ae5a5cad9663de872fb4ecee0d7560",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n   private void readTagFromConfig(String attributeValue, String confName, String\n       confValue, List\u003cString\u003e confSource) {\n     for (String tagStr : attributeValue.split(\",\")) {\n       tagStr \u003d tagStr.trim();\n       try {\n         if (confSource.size() \u003e 0) {\n           for (String source : confSource) {\n             PropertyTag tag1 \u003d this.getPropertyTag(tagStr,\n-                source.split(\"-\")[0]);\n-            if (propertyTagsMap.containsKey(tag1)) {\n-              propertyTagsMap.get(tag1)\n-                  .setProperty(confName, confValue);\n-            } else {\n-              Properties props \u003d new Properties();\n-              props.setProperty(confName, confValue);\n-              propertyTagsMap.put(tag1, props);\n+                FilenameUtils.getName(source).split(\"-\")[0]);\n+            if (tag1 !\u003d null) {\n+              //Handle property with no/null value\n+              if (confValue \u003d\u003d null) {\n+                confValue \u003d \"\";\n+              }\n+              if (propertyTagsMap.containsKey(tag1)) {\n+                propertyTagsMap.get(tag1).setProperty(confName, confValue);\n+              } else {\n+                Properties props \u003d new Properties();\n+                props.setProperty(confName, confValue);\n+                propertyTagsMap.put(tag1, props);\n+              }\n             }\n           }\n         } else {\n-          //If no source is set try to find tag in CorePropertyTag\n-          if (propertyTagsMap\n-              .containsKey(CorePropertyTag.valueOf(tagStr)\n-              )) {\n+          // If no source is set try to find tag in CorePropertyTag\n+          if (propertyTagsMap.containsKey(CorePropertyTag.valueOf(tagStr))) {\n             propertyTagsMap.get(CorePropertyTag.valueOf(tagStr))\n                 .setProperty(confName, confValue);\n           } else {\n             Properties props \u003d new Properties();\n             props.setProperty(confName, confValue);\n             propertyTagsMap.put(CorePropertyTag.valueOf(tagStr),\n                 props);\n           }\n         }\n-      } catch (IllegalArgumentException iae) {\n-        //Log the invalid tag and continue to parse rest of the\n-        // properties.\n+      } catch (Exception ex) {\n+        // Log the invalid tag and continue to parse rest of the properties.\n         LOG.info(\"Invalid tag \u0027\" + tagStr + \"\u0027 found for \"\n-            + \"property:\" + confName, iae);\n+            + \"property:\" + confName + \" Source:\" + Arrays\n+            .toString(confSource.toArray()), ex);\n       }\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTagFromConfig(String attributeValue, String confName, String\n      confValue, List\u003cString\u003e confSource) {\n    for (String tagStr : attributeValue.split(\",\")) {\n      tagStr \u003d tagStr.trim();\n      try {\n        if (confSource.size() \u003e 0) {\n          for (String source : confSource) {\n            PropertyTag tag1 \u003d this.getPropertyTag(tagStr,\n                FilenameUtils.getName(source).split(\"-\")[0]);\n            if (tag1 !\u003d null) {\n              //Handle property with no/null value\n              if (confValue \u003d\u003d null) {\n                confValue \u003d \"\";\n              }\n              if (propertyTagsMap.containsKey(tag1)) {\n                propertyTagsMap.get(tag1).setProperty(confName, confValue);\n              } else {\n                Properties props \u003d new Properties();\n                props.setProperty(confName, confValue);\n                propertyTagsMap.put(tag1, props);\n              }\n            }\n          }\n        } else {\n          // If no source is set try to find tag in CorePropertyTag\n          if (propertyTagsMap.containsKey(CorePropertyTag.valueOf(tagStr))) {\n            propertyTagsMap.get(CorePropertyTag.valueOf(tagStr))\n                .setProperty(confName, confValue);\n          } else {\n            Properties props \u003d new Properties();\n            props.setProperty(confName, confValue);\n            propertyTagsMap.put(CorePropertyTag.valueOf(tagStr),\n                props);\n          }\n        }\n      } catch (Exception ex) {\n        // Log the invalid tag and continue to parse rest of the properties.\n        LOG.info(\"Invalid tag \u0027\" + tagStr + \"\u0027 found for \"\n            + \"property:\" + confName + \" Source:\" + Arrays\n            .toString(confSource.toArray()), ex);\n      }\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "a4cd101934ae5a5cad9663de872fb4ecee0d7560": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12350. Support meta tags in configs. Contributed by Ajay Kumar.\n",
      "commitDate": "07/09/17 12:40 PM",
      "commitName": "a4cd101934ae5a5cad9663de872fb4ecee0d7560",
      "commitAuthor": "Anu Engineer",
      "diff": "@@ -0,0 +1,41 @@\n+  private void readTagFromConfig(String attributeValue, String confName, String\n+      confValue, List\u003cString\u003e confSource) {\n+    for (String tagStr : attributeValue.split(\",\")) {\n+      tagStr \u003d tagStr.trim();\n+      try {\n+        if (confSource.size() \u003e 0) {\n+          for (String source : confSource) {\n+            PropertyTag tag1 \u003d this.getPropertyTag(tagStr,\n+                source.split(\"-\")[0]);\n+            if (propertyTagsMap.containsKey(tag1)) {\n+              propertyTagsMap.get(tag1)\n+                  .setProperty(confName, confValue);\n+            } else {\n+              Properties props \u003d new Properties();\n+              props.setProperty(confName, confValue);\n+              propertyTagsMap.put(tag1, props);\n+            }\n+          }\n+        } else {\n+          //If no source is set try to find tag in CorePropertyTag\n+          if (propertyTagsMap\n+              .containsKey(CorePropertyTag.valueOf(tagStr)\n+              )) {\n+            propertyTagsMap.get(CorePropertyTag.valueOf(tagStr))\n+                .setProperty(confName, confValue);\n+          } else {\n+            Properties props \u003d new Properties();\n+            props.setProperty(confName, confValue);\n+            propertyTagsMap.put(CorePropertyTag.valueOf(tagStr),\n+                props);\n+          }\n+        }\n+      } catch (IllegalArgumentException iae) {\n+        //Log the invalid tag and continue to parse rest of the\n+        // properties.\n+        LOG.info(\"Invalid tag \u0027\" + tagStr + \"\u0027 found for \"\n+            + \"property:\" + confName, iae);\n+      }\n+\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTagFromConfig(String attributeValue, String confName, String\n      confValue, List\u003cString\u003e confSource) {\n    for (String tagStr : attributeValue.split(\",\")) {\n      tagStr \u003d tagStr.trim();\n      try {\n        if (confSource.size() \u003e 0) {\n          for (String source : confSource) {\n            PropertyTag tag1 \u003d this.getPropertyTag(tagStr,\n                source.split(\"-\")[0]);\n            if (propertyTagsMap.containsKey(tag1)) {\n              propertyTagsMap.get(tag1)\n                  .setProperty(confName, confValue);\n            } else {\n              Properties props \u003d new Properties();\n              props.setProperty(confName, confValue);\n              propertyTagsMap.put(tag1, props);\n            }\n          }\n        } else {\n          //If no source is set try to find tag in CorePropertyTag\n          if (propertyTagsMap\n              .containsKey(CorePropertyTag.valueOf(tagStr)\n              )) {\n            propertyTagsMap.get(CorePropertyTag.valueOf(tagStr))\n                .setProperty(confName, confValue);\n          } else {\n            Properties props \u003d new Properties();\n            props.setProperty(confName, confValue);\n            propertyTagsMap.put(CorePropertyTag.valueOf(tagStr),\n                props);\n          }\n        }\n      } catch (IllegalArgumentException iae) {\n        //Log the invalid tag and continue to parse rest of the\n        // properties.\n        LOG.info(\"Invalid tag \u0027\" + tagStr + \"\u0027 found for \"\n            + \"property:\" + confName, iae);\n      }\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
    }
  }
}