{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpExceptionUtils.java",
  "functionName": "validateResponse",
  "functionId": "validateResponse___conn-HttpURLConnection__expectedStatus-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
  "functionStartLine": 138,
  "functionEndLine": 182,
  "numCommitsSeen": 20,
  "timeTaken": 3290,
  "changeHistory": [
    "840d02ca5ba013bddd28d7c1abd242b5bb8cc39f",
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
    "e1b32e0959dea5f5a40055157476f9320519a618",
    "70b218748badf079c859c3af2b468a0b7b49c333",
    "e932365d6d46b5be16d0e79b751fac0b0b661400",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "840d02ca5ba013bddd28d7c1abd242b5bb8cc39f": "Ybodychange",
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939": "Ybodychange",
    "e1b32e0959dea5f5a40055157476f9320519a618": "Ybodychange",
    "70b218748badf079c859c3af2b468a0b7b49c333": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "e932365d6d46b5be16d0e79b751fac0b0b661400": "Ybodychange",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "840d02ca5ba013bddd28d7c1abd242b5bb8cc39f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14385. HttpExceptionUtils#validateResponse swallows exceptions. Contributed by Wei-Chiu Chuang.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "20/06/19 7:57 PM",
      "commitName": "840d02ca5ba013bddd28d7c1abd242b5bb8cc39f",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 252.92,
      "commitsBetweenForRepo": 1828,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,45 @@\n   public static void validateResponse(HttpURLConnection conn,\n       int expectedStatus) throws IOException {\n     if (conn.getResponseCode() !\u003d expectedStatus) {\n       Exception toThrow;\n       InputStream es \u003d null;\n       try {\n         es \u003d conn.getErrorStream();\n         Map json \u003d JsonSerialization.mapReader().readValue(es);\n         json \u003d (Map) json.get(ERROR_JSON);\n         String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n         String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n         if (exClass !\u003d null) {\n           try {\n             ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n             Class klass \u003d cl.loadClass(exClass);\n             Constructor constr \u003d klass.getConstructor(String.class);\n             toThrow \u003d (Exception) constr.newInstance(exMsg);\n           } catch (Exception ex) {\n             toThrow \u003d new IOException(String.format(\n-                \"HTTP status [%d], exception [%s], message [%s] \",\n-                conn.getResponseCode(), exClass, exMsg));\n+                \"HTTP status [%d], exception [%s], message [%s], URL [%s]\",\n+                conn.getResponseCode(), exClass, exMsg, conn.getURL()));\n           }\n         } else {\n           String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n           toThrow \u003d new IOException(String.format(\n-              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n+              \"HTTP status [%d], message [%s], URL [%s]\",\n+              conn.getResponseCode(), msg, conn.getURL()));\n         }\n       } catch (Exception ex) {\n         toThrow \u003d new IOException(String.format(\n-            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n-            conn.getResponseMessage()));\n+            \"HTTP status [%d], message [%s], URL [%s], exception [%s]\",\n+            conn.getResponseCode(), conn.getResponseMessage(), conn.getURL(),\n+            ex.toString()), ex);\n       } finally {\n         if (es !\u003d null) {\n           try {\n             es.close();\n           } catch (IOException ex) {\n             //ignore\n           }\n         }\n       }\n       throwEx(toThrow);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateResponse(HttpURLConnection conn,\n      int expectedStatus) throws IOException {\n    if (conn.getResponseCode() !\u003d expectedStatus) {\n      Exception toThrow;\n      InputStream es \u003d null;\n      try {\n        es \u003d conn.getErrorStream();\n        Map json \u003d JsonSerialization.mapReader().readValue(es);\n        json \u003d (Map) json.get(ERROR_JSON);\n        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n        if (exClass !\u003d null) {\n          try {\n            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n            Class klass \u003d cl.loadClass(exClass);\n            Constructor constr \u003d klass.getConstructor(String.class);\n            toThrow \u003d (Exception) constr.newInstance(exMsg);\n          } catch (Exception ex) {\n            toThrow \u003d new IOException(String.format(\n                \"HTTP status [%d], exception [%s], message [%s], URL [%s]\",\n                conn.getResponseCode(), exClass, exMsg, conn.getURL()));\n          }\n        } else {\n          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n          toThrow \u003d new IOException(String.format(\n              \"HTTP status [%d], message [%s], URL [%s]\",\n              conn.getResponseCode(), msg, conn.getURL()));\n        }\n      } catch (Exception ex) {\n        toThrow \u003d new IOException(String.format(\n            \"HTTP status [%d], message [%s], URL [%s], exception [%s]\",\n            conn.getResponseCode(), conn.getResponseMessage(), conn.getURL(),\n            ex.toString()), ex);\n      } finally {\n        if (es !\u003d null) {\n          try {\n            es.close();\n          } catch (IOException ex) {\n            //ignore\n          }\n        }\n      }\n      throwEx(toThrow);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
      "extendedDetails": {}
    },
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15550. Avoid static initialization of ObjectMappers\n",
      "commitDate": "25/06/18 3:36 PM",
      "commitName": "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "22/09/17 3:45 PM",
      "commitNameOld": "e1b32e0959dea5f5a40055157476f9320519a618",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 275.99,
      "commitsBetweenForRepo": 2526,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public static void validateResponse(HttpURLConnection conn,\n       int expectedStatus) throws IOException {\n     if (conn.getResponseCode() !\u003d expectedStatus) {\n       Exception toThrow;\n       InputStream es \u003d null;\n       try {\n         es \u003d conn.getErrorStream();\n-        Map json \u003d READER.readValue(es);\n+        Map json \u003d JsonSerialization.mapReader().readValue(es);\n         json \u003d (Map) json.get(ERROR_JSON);\n         String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n         String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n         if (exClass !\u003d null) {\n           try {\n             ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n             Class klass \u003d cl.loadClass(exClass);\n             Constructor constr \u003d klass.getConstructor(String.class);\n             toThrow \u003d (Exception) constr.newInstance(exMsg);\n           } catch (Exception ex) {\n             toThrow \u003d new IOException(String.format(\n                 \"HTTP status [%d], exception [%s], message [%s] \",\n                 conn.getResponseCode(), exClass, exMsg));\n           }\n         } else {\n           String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n           toThrow \u003d new IOException(String.format(\n               \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n         }\n       } catch (Exception ex) {\n         toThrow \u003d new IOException(String.format(\n             \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n             conn.getResponseMessage()));\n       } finally {\n         if (es !\u003d null) {\n           try {\n             es.close();\n           } catch (IOException ex) {\n             //ignore\n           }\n         }\n       }\n       throwEx(toThrow);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateResponse(HttpURLConnection conn,\n      int expectedStatus) throws IOException {\n    if (conn.getResponseCode() !\u003d expectedStatus) {\n      Exception toThrow;\n      InputStream es \u003d null;\n      try {\n        es \u003d conn.getErrorStream();\n        Map json \u003d JsonSerialization.mapReader().readValue(es);\n        json \u003d (Map) json.get(ERROR_JSON);\n        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n        if (exClass !\u003d null) {\n          try {\n            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n            Class klass \u003d cl.loadClass(exClass);\n            Constructor constr \u003d klass.getConstructor(String.class);\n            toThrow \u003d (Exception) constr.newInstance(exMsg);\n          } catch (Exception ex) {\n            toThrow \u003d new IOException(String.format(\n                \"HTTP status [%d], exception [%s], message [%s] \",\n                conn.getResponseCode(), exClass, exMsg));\n          }\n        } else {\n          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n          toThrow \u003d new IOException(String.format(\n              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n        }\n      } catch (Exception ex) {\n        toThrow \u003d new IOException(String.format(\n            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n            conn.getResponseMessage()));\n      } finally {\n        if (es !\u003d null) {\n          try {\n            es.close();\n          } catch (IOException ex) {\n            //ignore\n          }\n        }\n      }\n      throwEx(toThrow);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
      "extendedDetails": {}
    },
    "e1b32e0959dea5f5a40055157476f9320519a618": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14901. ReuseObjectMapper in Hadoop Common. Contributed by Hanisha Koneru.\n",
      "commitDate": "22/09/17 3:45 PM",
      "commitName": "e1b32e0959dea5f5a40055157476f9320519a618",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "28/11/16 9:07 PM",
      "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 297.73,
      "commitsBetweenForRepo": 1811,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   public static void validateResponse(HttpURLConnection conn,\n       int expectedStatus) throws IOException {\n     if (conn.getResponseCode() !\u003d expectedStatus) {\n       Exception toThrow;\n       InputStream es \u003d null;\n       try {\n         es \u003d conn.getErrorStream();\n-        ObjectMapper mapper \u003d new ObjectMapper();\n-        Map json \u003d mapper.readValue(es, Map.class);\n+        Map json \u003d READER.readValue(es);\n         json \u003d (Map) json.get(ERROR_JSON);\n         String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n         String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n         if (exClass !\u003d null) {\n           try {\n             ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n             Class klass \u003d cl.loadClass(exClass);\n             Constructor constr \u003d klass.getConstructor(String.class);\n             toThrow \u003d (Exception) constr.newInstance(exMsg);\n           } catch (Exception ex) {\n             toThrow \u003d new IOException(String.format(\n                 \"HTTP status [%d], exception [%s], message [%s] \",\n                 conn.getResponseCode(), exClass, exMsg));\n           }\n         } else {\n           String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n           toThrow \u003d new IOException(String.format(\n               \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n         }\n       } catch (Exception ex) {\n         toThrow \u003d new IOException(String.format(\n             \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n             conn.getResponseMessage()));\n       } finally {\n         if (es !\u003d null) {\n           try {\n             es.close();\n           } catch (IOException ex) {\n             //ignore\n           }\n         }\n       }\n       throwEx(toThrow);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateResponse(HttpURLConnection conn,\n      int expectedStatus) throws IOException {\n    if (conn.getResponseCode() !\u003d expectedStatus) {\n      Exception toThrow;\n      InputStream es \u003d null;\n      try {\n        es \u003d conn.getErrorStream();\n        Map json \u003d READER.readValue(es);\n        json \u003d (Map) json.get(ERROR_JSON);\n        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n        if (exClass !\u003d null) {\n          try {\n            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n            Class klass \u003d cl.loadClass(exClass);\n            Constructor constr \u003d klass.getConstructor(String.class);\n            toThrow \u003d (Exception) constr.newInstance(exMsg);\n          } catch (Exception ex) {\n            toThrow \u003d new IOException(String.format(\n                \"HTTP status [%d], exception [%s], message [%s] \",\n                conn.getResponseCode(), exClass, exMsg));\n          }\n        } else {\n          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n          toThrow \u003d new IOException(String.format(\n              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n        }\n      } catch (Exception ex) {\n        toThrow \u003d new IOException(String.format(\n            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n            conn.getResponseMessage()));\n      } finally {\n        if (es !\u003d null) {\n          try {\n            es.close();\n          } catch (IOException ex) {\n            //ignore\n          }\n        }\n      }\n      throwEx(toThrow);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
      "extendedDetails": {}
    },
    "70b218748badf079c859c3af2b468a0b7b49c333": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-11015. Http server/client utils to propagate and recreate Exceptions from server to client. (tucu)\n",
      "commitDate": "04/09/14 9:11 AM",
      "commitName": "70b218748badf079c859c3af2b468a0b7b49c333",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-11015. Http server/client utils to propagate and recreate Exceptions from server to client. (tucu)\n",
          "commitDate": "04/09/14 9:11 AM",
          "commitName": "70b218748badf079c859c3af2b468a0b7b49c333",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "04/09/14 9:09 AM",
          "commitNameOld": "41f1662d467ec0b295b742bb80c87482504fbf25",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,44 @@\n-  private static void validateResponse(HttpURLConnection conn, int expected)\n-      throws IOException {\n-    int status \u003d conn.getResponseCode();\n-    if (status !\u003d expected) {\n+  public static void validateResponse(HttpURLConnection conn,\n+      int expectedStatus) throws IOException {\n+    if (conn.getResponseCode() !\u003d expectedStatus) {\n+      Exception toThrow;\n       InputStream es \u003d null;\n       try {\n-        Exception toThrow;\n-        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n-        if (contentType !\u003d null \u0026\u0026\n-            contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) {\n-          es \u003d conn.getErrorStream();\n-          ObjectMapper mapper \u003d new ObjectMapper();\n-          Map json \u003d mapper.readValue(es, Map.class);\n-          String exClass \u003d (String) json.get(\n-              KMSRESTConstants.ERROR_EXCEPTION_JSON);\n-          String exMsg \u003d (String)\n-              json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n+        es \u003d conn.getErrorStream();\n+        ObjectMapper mapper \u003d new ObjectMapper();\n+        Map json \u003d mapper.readValue(es, Map.class);\n+        json \u003d (Map) json.get(ERROR_JSON);\n+        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n+        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n+        if (exClass !\u003d null) {\n           try {\n-            ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n+            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n             Class klass \u003d cl.loadClass(exClass);\n             Constructor constr \u003d klass.getConstructor(String.class);\n             toThrow \u003d (Exception) constr.newInstance(exMsg);\n           } catch (Exception ex) {\n-            toThrow \u003d new IOException(MessageFormat.format(\n-                \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+            toThrow \u003d new IOException(String.format(\n+                \"HTTP status [%d], exception [%s], message [%s] \",\n+                conn.getResponseCode(), exClass, exMsg));\n           }\n         } else {\n-          toThrow \u003d new IOException(MessageFormat.format(\n-              \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n+          toThrow \u003d new IOException(String.format(\n+              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n         }\n-        throwEx(toThrow);\n+      } catch (Exception ex) {\n+        toThrow \u003d new IOException(String.format(\n+            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n+            conn.getResponseMessage()));\n       } finally {\n         if (es !\u003d null) {\n-          es.close();\n+          try {\n+            es.close();\n+          } catch (IOException ex) {\n+            //ignore\n+          }\n         }\n       }\n+      throwEx(toThrow);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateResponse(HttpURLConnection conn,\n      int expectedStatus) throws IOException {\n    if (conn.getResponseCode() !\u003d expectedStatus) {\n      Exception toThrow;\n      InputStream es \u003d null;\n      try {\n        es \u003d conn.getErrorStream();\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map json \u003d mapper.readValue(es, Map.class);\n        json \u003d (Map) json.get(ERROR_JSON);\n        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n        if (exClass !\u003d null) {\n          try {\n            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n            Class klass \u003d cl.loadClass(exClass);\n            Constructor constr \u003d klass.getConstructor(String.class);\n            toThrow \u003d (Exception) constr.newInstance(exMsg);\n          } catch (Exception ex) {\n            toThrow \u003d new IOException(String.format(\n                \"HTTP status [%d], exception [%s], message [%s] \",\n                conn.getResponseCode(), exClass, exMsg));\n          }\n        } else {\n          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n          toThrow \u003d new IOException(String.format(\n              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n        }\n      } catch (Exception ex) {\n        toThrow \u003d new IOException(String.format(\n            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n            conn.getResponseMessage()));\n      } finally {\n        if (es !\u003d null) {\n          try {\n            es.close();\n          } catch (IOException ex) {\n            //ignore\n          }\n        }\n      }\n      throwEx(toThrow);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
            "oldMethodName": "validateResponse",
            "newMethodName": "validateResponse"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-11015. Http server/client utils to propagate and recreate Exceptions from server to client. (tucu)\n",
          "commitDate": "04/09/14 9:11 AM",
          "commitName": "70b218748badf079c859c3af2b468a0b7b49c333",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "04/09/14 9:09 AM",
          "commitNameOld": "41f1662d467ec0b295b742bb80c87482504fbf25",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,44 @@\n-  private static void validateResponse(HttpURLConnection conn, int expected)\n-      throws IOException {\n-    int status \u003d conn.getResponseCode();\n-    if (status !\u003d expected) {\n+  public static void validateResponse(HttpURLConnection conn,\n+      int expectedStatus) throws IOException {\n+    if (conn.getResponseCode() !\u003d expectedStatus) {\n+      Exception toThrow;\n       InputStream es \u003d null;\n       try {\n-        Exception toThrow;\n-        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n-        if (contentType !\u003d null \u0026\u0026\n-            contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) {\n-          es \u003d conn.getErrorStream();\n-          ObjectMapper mapper \u003d new ObjectMapper();\n-          Map json \u003d mapper.readValue(es, Map.class);\n-          String exClass \u003d (String) json.get(\n-              KMSRESTConstants.ERROR_EXCEPTION_JSON);\n-          String exMsg \u003d (String)\n-              json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n+        es \u003d conn.getErrorStream();\n+        ObjectMapper mapper \u003d new ObjectMapper();\n+        Map json \u003d mapper.readValue(es, Map.class);\n+        json \u003d (Map) json.get(ERROR_JSON);\n+        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n+        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n+        if (exClass !\u003d null) {\n           try {\n-            ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n+            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n             Class klass \u003d cl.loadClass(exClass);\n             Constructor constr \u003d klass.getConstructor(String.class);\n             toThrow \u003d (Exception) constr.newInstance(exMsg);\n           } catch (Exception ex) {\n-            toThrow \u003d new IOException(MessageFormat.format(\n-                \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+            toThrow \u003d new IOException(String.format(\n+                \"HTTP status [%d], exception [%s], message [%s] \",\n+                conn.getResponseCode(), exClass, exMsg));\n           }\n         } else {\n-          toThrow \u003d new IOException(MessageFormat.format(\n-              \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n+          toThrow \u003d new IOException(String.format(\n+              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n         }\n-        throwEx(toThrow);\n+      } catch (Exception ex) {\n+        toThrow \u003d new IOException(String.format(\n+            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n+            conn.getResponseMessage()));\n       } finally {\n         if (es !\u003d null) {\n-          es.close();\n+          try {\n+            es.close();\n+          } catch (IOException ex) {\n+            //ignore\n+          }\n         }\n       }\n+      throwEx(toThrow);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateResponse(HttpURLConnection conn,\n      int expectedStatus) throws IOException {\n    if (conn.getResponseCode() !\u003d expectedStatus) {\n      Exception toThrow;\n      InputStream es \u003d null;\n      try {\n        es \u003d conn.getErrorStream();\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map json \u003d mapper.readValue(es, Map.class);\n        json \u003d (Map) json.get(ERROR_JSON);\n        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n        if (exClass !\u003d null) {\n          try {\n            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n            Class klass \u003d cl.loadClass(exClass);\n            Constructor constr \u003d klass.getConstructor(String.class);\n            toThrow \u003d (Exception) constr.newInstance(exMsg);\n          } catch (Exception ex) {\n            toThrow \u003d new IOException(String.format(\n                \"HTTP status [%d], exception [%s], message [%s] \",\n                conn.getResponseCode(), exClass, exMsg));\n          }\n        } else {\n          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n          toThrow \u003d new IOException(String.format(\n              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n        }\n      } catch (Exception ex) {\n        toThrow \u003d new IOException(String.format(\n            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n            conn.getResponseMessage()));\n      } finally {\n        if (es !\u003d null) {\n          try {\n            es.close();\n          } catch (IOException ex) {\n            //ignore\n          }\n        }\n      }\n      throwEx(toThrow);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11015. Http server/client utils to propagate and recreate Exceptions from server to client. (tucu)\n",
          "commitDate": "04/09/14 9:11 AM",
          "commitName": "70b218748badf079c859c3af2b468a0b7b49c333",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "04/09/14 9:09 AM",
          "commitNameOld": "41f1662d467ec0b295b742bb80c87482504fbf25",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,44 @@\n-  private static void validateResponse(HttpURLConnection conn, int expected)\n-      throws IOException {\n-    int status \u003d conn.getResponseCode();\n-    if (status !\u003d expected) {\n+  public static void validateResponse(HttpURLConnection conn,\n+      int expectedStatus) throws IOException {\n+    if (conn.getResponseCode() !\u003d expectedStatus) {\n+      Exception toThrow;\n       InputStream es \u003d null;\n       try {\n-        Exception toThrow;\n-        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n-        if (contentType !\u003d null \u0026\u0026\n-            contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) {\n-          es \u003d conn.getErrorStream();\n-          ObjectMapper mapper \u003d new ObjectMapper();\n-          Map json \u003d mapper.readValue(es, Map.class);\n-          String exClass \u003d (String) json.get(\n-              KMSRESTConstants.ERROR_EXCEPTION_JSON);\n-          String exMsg \u003d (String)\n-              json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n+        es \u003d conn.getErrorStream();\n+        ObjectMapper mapper \u003d new ObjectMapper();\n+        Map json \u003d mapper.readValue(es, Map.class);\n+        json \u003d (Map) json.get(ERROR_JSON);\n+        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n+        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n+        if (exClass !\u003d null) {\n           try {\n-            ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n+            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n             Class klass \u003d cl.loadClass(exClass);\n             Constructor constr \u003d klass.getConstructor(String.class);\n             toThrow \u003d (Exception) constr.newInstance(exMsg);\n           } catch (Exception ex) {\n-            toThrow \u003d new IOException(MessageFormat.format(\n-                \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+            toThrow \u003d new IOException(String.format(\n+                \"HTTP status [%d], exception [%s], message [%s] \",\n+                conn.getResponseCode(), exClass, exMsg));\n           }\n         } else {\n-          toThrow \u003d new IOException(MessageFormat.format(\n-              \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n+          toThrow \u003d new IOException(String.format(\n+              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n         }\n-        throwEx(toThrow);\n+      } catch (Exception ex) {\n+        toThrow \u003d new IOException(String.format(\n+            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n+            conn.getResponseMessage()));\n       } finally {\n         if (es !\u003d null) {\n-          es.close();\n+          try {\n+            es.close();\n+          } catch (IOException ex) {\n+            //ignore\n+          }\n         }\n       }\n+      throwEx(toThrow);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateResponse(HttpURLConnection conn,\n      int expectedStatus) throws IOException {\n    if (conn.getResponseCode() !\u003d expectedStatus) {\n      Exception toThrow;\n      InputStream es \u003d null;\n      try {\n        es \u003d conn.getErrorStream();\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map json \u003d mapper.readValue(es, Map.class);\n        json \u003d (Map) json.get(ERROR_JSON);\n        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n        if (exClass !\u003d null) {\n          try {\n            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n            Class klass \u003d cl.loadClass(exClass);\n            Constructor constr \u003d klass.getConstructor(String.class);\n            toThrow \u003d (Exception) constr.newInstance(exMsg);\n          } catch (Exception ex) {\n            toThrow \u003d new IOException(String.format(\n                \"HTTP status [%d], exception [%s], message [%s] \",\n                conn.getResponseCode(), exClass, exMsg));\n          }\n        } else {\n          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n          toThrow \u003d new IOException(String.format(\n              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n        }\n      } catch (Exception ex) {\n        toThrow \u003d new IOException(String.format(\n            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n            conn.getResponseMessage()));\n      } finally {\n        if (es !\u003d null) {\n          try {\n            es.close();\n          } catch (IOException ex) {\n            //ignore\n          }\n        }\n      }\n      throwEx(toThrow);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11015. Http server/client utils to propagate and recreate Exceptions from server to client. (tucu)\n",
          "commitDate": "04/09/14 9:11 AM",
          "commitName": "70b218748badf079c859c3af2b468a0b7b49c333",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "04/09/14 9:09 AM",
          "commitNameOld": "41f1662d467ec0b295b742bb80c87482504fbf25",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,44 @@\n-  private static void validateResponse(HttpURLConnection conn, int expected)\n-      throws IOException {\n-    int status \u003d conn.getResponseCode();\n-    if (status !\u003d expected) {\n+  public static void validateResponse(HttpURLConnection conn,\n+      int expectedStatus) throws IOException {\n+    if (conn.getResponseCode() !\u003d expectedStatus) {\n+      Exception toThrow;\n       InputStream es \u003d null;\n       try {\n-        Exception toThrow;\n-        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n-        if (contentType !\u003d null \u0026\u0026\n-            contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) {\n-          es \u003d conn.getErrorStream();\n-          ObjectMapper mapper \u003d new ObjectMapper();\n-          Map json \u003d mapper.readValue(es, Map.class);\n-          String exClass \u003d (String) json.get(\n-              KMSRESTConstants.ERROR_EXCEPTION_JSON);\n-          String exMsg \u003d (String)\n-              json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n+        es \u003d conn.getErrorStream();\n+        ObjectMapper mapper \u003d new ObjectMapper();\n+        Map json \u003d mapper.readValue(es, Map.class);\n+        json \u003d (Map) json.get(ERROR_JSON);\n+        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n+        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n+        if (exClass !\u003d null) {\n           try {\n-            ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n+            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n             Class klass \u003d cl.loadClass(exClass);\n             Constructor constr \u003d klass.getConstructor(String.class);\n             toThrow \u003d (Exception) constr.newInstance(exMsg);\n           } catch (Exception ex) {\n-            toThrow \u003d new IOException(MessageFormat.format(\n-                \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+            toThrow \u003d new IOException(String.format(\n+                \"HTTP status [%d], exception [%s], message [%s] \",\n+                conn.getResponseCode(), exClass, exMsg));\n           }\n         } else {\n-          toThrow \u003d new IOException(MessageFormat.format(\n-              \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n+          toThrow \u003d new IOException(String.format(\n+              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n         }\n-        throwEx(toThrow);\n+      } catch (Exception ex) {\n+        toThrow \u003d new IOException(String.format(\n+            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n+            conn.getResponseMessage()));\n       } finally {\n         if (es !\u003d null) {\n-          es.close();\n+          try {\n+            es.close();\n+          } catch (IOException ex) {\n+            //ignore\n+          }\n         }\n       }\n+      throwEx(toThrow);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateResponse(HttpURLConnection conn,\n      int expectedStatus) throws IOException {\n    if (conn.getResponseCode() !\u003d expectedStatus) {\n      Exception toThrow;\n      InputStream es \u003d null;\n      try {\n        es \u003d conn.getErrorStream();\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map json \u003d mapper.readValue(es, Map.class);\n        json \u003d (Map) json.get(ERROR_JSON);\n        String exClass \u003d (String) json.get(ERROR_CLASSNAME_JSON);\n        String exMsg \u003d (String) json.get(ERROR_MESSAGE_JSON);\n        if (exClass !\u003d null) {\n          try {\n            ClassLoader cl \u003d HttpExceptionUtils.class.getClassLoader();\n            Class klass \u003d cl.loadClass(exClass);\n            Constructor constr \u003d klass.getConstructor(String.class);\n            toThrow \u003d (Exception) constr.newInstance(exMsg);\n          } catch (Exception ex) {\n            toThrow \u003d new IOException(String.format(\n                \"HTTP status [%d], exception [%s], message [%s] \",\n                conn.getResponseCode(), exClass, exMsg));\n          }\n        } else {\n          String msg \u003d (exMsg !\u003d null) ? exMsg : conn.getResponseMessage();\n          toThrow \u003d new IOException(String.format(\n              \"HTTP status [%d], message [%s]\", conn.getResponseCode(), msg));\n        }\n      } catch (Exception ex) {\n        toThrow \u003d new IOException(String.format(\n            \"HTTP status [%d], message [%s]\", conn.getResponseCode(),\n            conn.getResponseMessage()));\n      } finally {\n        if (es !\u003d null) {\n          try {\n            es.close();\n          } catch (IOException ex) {\n            //ignore\n          }\n        }\n      }\n      throwEx(toThrow);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HttpExceptionUtils.java",
          "extendedDetails": {
            "oldValue": "[conn-HttpURLConnection, expected-int]",
            "newValue": "[conn-HttpURLConnection, expectedStatus-int]"
          }
        }
      ]
    },
    "e932365d6d46b5be16d0e79b751fac0b0b661400": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10698. KMS, add proxyuser support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618217 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/08/14 8:53 AM",
      "commitName": "e932365d6d46b5be16d0e79b751fac0b0b661400",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "14/08/14 10:03 PM",
      "commitNameOld": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,38 @@\n   private static void validateResponse(HttpURLConnection conn, int expected)\n       throws IOException {\n     int status \u003d conn.getResponseCode();\n     if (status !\u003d expected) {\n       InputStream es \u003d null;\n       try {\n-        es \u003d conn.getErrorStream();\n-        ObjectMapper mapper \u003d new ObjectMapper();\n-        Map json \u003d mapper.readValue(es, Map.class);\n-        String exClass \u003d (String) json.get(\n-            KMSRESTConstants.ERROR_EXCEPTION_JSON);\n-        String exMsg \u003d (String)\n-            json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n         Exception toThrow;\n-        try {\n-          ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n-          Class klass \u003d cl.loadClass(exClass);\n-          Constructor constr \u003d klass.getConstructor(String.class);\n-          toThrow \u003d (Exception) constr.newInstance(exMsg);\n-        } catch (Exception ex) {\n+        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n+        if (contentType !\u003d null \u0026\u0026\n+            contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) {\n+          es \u003d conn.getErrorStream();\n+          ObjectMapper mapper \u003d new ObjectMapper();\n+          Map json \u003d mapper.readValue(es, Map.class);\n+          String exClass \u003d (String) json.get(\n+              KMSRESTConstants.ERROR_EXCEPTION_JSON);\n+          String exMsg \u003d (String)\n+              json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n+          try {\n+            ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n+            Class klass \u003d cl.loadClass(exClass);\n+            Constructor constr \u003d klass.getConstructor(String.class);\n+            toThrow \u003d (Exception) constr.newInstance(exMsg);\n+          } catch (Exception ex) {\n+            toThrow \u003d new IOException(MessageFormat.format(\n+                \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+          }\n+        } else {\n           toThrow \u003d new IOException(MessageFormat.format(\n               \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n         }\n         throwEx(toThrow);\n       } finally {\n         if (es !\u003d null) {\n           es.close();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResponse(HttpURLConnection conn, int expected)\n      throws IOException {\n    int status \u003d conn.getResponseCode();\n    if (status !\u003d expected) {\n      InputStream es \u003d null;\n      try {\n        Exception toThrow;\n        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n        if (contentType !\u003d null \u0026\u0026\n            contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) {\n          es \u003d conn.getErrorStream();\n          ObjectMapper mapper \u003d new ObjectMapper();\n          Map json \u003d mapper.readValue(es, Map.class);\n          String exClass \u003d (String) json.get(\n              KMSRESTConstants.ERROR_EXCEPTION_JSON);\n          String exMsg \u003d (String)\n              json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n          try {\n            ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n            Class klass \u003d cl.loadClass(exClass);\n            Constructor constr \u003d klass.getConstructor(String.class);\n            toThrow \u003d (Exception) constr.newInstance(exMsg);\n          } catch (Exception ex) {\n            toThrow \u003d new IOException(MessageFormat.format(\n                \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n          }\n        } else {\n          toThrow \u003d new IOException(MessageFormat.format(\n              \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n        }\n        throwEx(toThrow);\n      } finally {\n        if (es !\u003d null) {\n          es.close();\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,31 @@\n+  private static void validateResponse(HttpURLConnection conn, int expected)\n+      throws IOException {\n+    int status \u003d conn.getResponseCode();\n+    if (status !\u003d expected) {\n+      InputStream es \u003d null;\n+      try {\n+        es \u003d conn.getErrorStream();\n+        ObjectMapper mapper \u003d new ObjectMapper();\n+        Map json \u003d mapper.readValue(es, Map.class);\n+        String exClass \u003d (String) json.get(\n+            KMSRESTConstants.ERROR_EXCEPTION_JSON);\n+        String exMsg \u003d (String)\n+            json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n+        Exception toThrow;\n+        try {\n+          ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n+          Class klass \u003d cl.loadClass(exClass);\n+          Constructor constr \u003d klass.getConstructor(String.class);\n+          toThrow \u003d (Exception) constr.newInstance(exMsg);\n+        } catch (Exception ex) {\n+          toThrow \u003d new IOException(MessageFormat.format(\n+              \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n+        }\n+        throwEx(toThrow);\n+      } finally {\n+        if (es !\u003d null) {\n+          es.close();\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResponse(HttpURLConnection conn, int expected)\n      throws IOException {\n    int status \u003d conn.getResponseCode();\n    if (status !\u003d expected) {\n      InputStream es \u003d null;\n      try {\n        es \u003d conn.getErrorStream();\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map json \u003d mapper.readValue(es, Map.class);\n        String exClass \u003d (String) json.get(\n            KMSRESTConstants.ERROR_EXCEPTION_JSON);\n        String exMsg \u003d (String)\n            json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);\n        Exception toThrow;\n        try {\n          ClassLoader cl \u003d KMSClientProvider.class.getClassLoader();\n          Class klass \u003d cl.loadClass(exClass);\n          Constructor constr \u003d klass.getConstructor(String.class);\n          toThrow \u003d (Exception) constr.newInstance(exMsg);\n        } catch (Exception ex) {\n          toThrow \u003d new IOException(MessageFormat.format(\n              \"HTTP status [{0}], {1}\", status, conn.getResponseMessage()));\n        }\n        throwEx(toThrow);\n      } finally {\n        if (es !\u003d null) {\n          es.close();\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}