{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintProcessor.java",
  "functionName": "handleSchedulingResponse",
  "functionId": "handleSchedulingResponse___schedulerResponse-SchedulingResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
  "functionStartLine": 293,
  "functionEndLine": 323,
  "numCommitsSeen": 7,
  "timeTaken": 1828,
  "changeHistory": [
    "0b489e564ce5a50324a530e29c18aa8a75276c50",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68"
  ],
  "changeHistoryShort": {
    "0b489e564ce5a50324a530e29c18aa8a75276c50": "Yfilerename",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b489e564ce5a50324a530e29c18aa8a75276c50": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7920. Simplify configuration for PlacementConstraints. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 2:23 PM",
      "commitName": "0b489e564ce5a50324a530e29c18aa8a75276c50",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void handleSchedulingResponse(SchedulingResponse schedulerResponse) {\n    int placementAttempt \u003d ((Response)schedulerResponse).placementAttempt;\n    // Retry this placement as it is not successful and we are still\n    // under max retry. The req is batched with other unsuccessful\n    // requests from the same app\n    if (!schedulerResponse.isSuccess() \u0026\u0026 placementAttempt \u003c retryAttempts) {\n      List\u003cBatchedRequests\u003e reqsToRetry \u003d\n          requestsToRetry.computeIfAbsent(\n              schedulerResponse.getApplicationId(),\n              k -\u003e new ArrayList\u003c\u003e());\n      synchronized (reqsToRetry) {\n        addToRetryList(schedulerResponse, placementAttempt, reqsToRetry);\n      }\n      LOG.warn(\"Going to retry request for application [{}] after [{}]\" +\n              \" attempts: [{}]\", schedulerResponse.getApplicationId(),\n          placementAttempt, schedulerResponse.getSchedulingRequest());\n    } else {\n      if (!schedulerResponse.isSuccess()) {\n        LOG.warn(\"Not retrying request for application [{}] after [{}]\" +\n                \" attempts: [{}]\", schedulerResponse.getApplicationId(),\n            placementAttempt, schedulerResponse.getSchedulingRequest());\n        List\u003cSchedulingRequest\u003e reqsToReject \u003d\n            requestsToReject.computeIfAbsent(\n                schedulerResponse.getApplicationId(),\n                k -\u003e new ArrayList\u003c\u003e());\n        synchronized (reqsToReject) {\n          reqsToReject.add(schedulerResponse.getSchedulingRequest());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java"
      }
    },
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7612. Add Processor Framework for Rich Placement Constraints. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,31 @@\n+  private void handleSchedulingResponse(SchedulingResponse schedulerResponse) {\n+    int placementAttempt \u003d ((Response)schedulerResponse).placementAttempt;\n+    // Retry this placement as it is not successful and we are still\n+    // under max retry. The req is batched with other unsuccessful\n+    // requests from the same app\n+    if (!schedulerResponse.isSuccess() \u0026\u0026 placementAttempt \u003c retryAttempts) {\n+      List\u003cBatchedRequests\u003e reqsToRetry \u003d\n+          requestsToRetry.computeIfAbsent(\n+              schedulerResponse.getApplicationId(),\n+              k -\u003e new ArrayList\u003c\u003e());\n+      synchronized (reqsToRetry) {\n+        addToRetryList(schedulerResponse, placementAttempt, reqsToRetry);\n+      }\n+      LOG.warn(\"Going to retry request for application [{}] after [{}]\" +\n+              \" attempts: [{}]\", schedulerResponse.getApplicationId(),\n+          placementAttempt, schedulerResponse.getSchedulingRequest());\n+    } else {\n+      if (!schedulerResponse.isSuccess()) {\n+        LOG.warn(\"Not retrying request for application [{}] after [{}]\" +\n+                \" attempts: [{}]\", schedulerResponse.getApplicationId(),\n+            placementAttempt, schedulerResponse.getSchedulingRequest());\n+        List\u003cSchedulingRequest\u003e reqsToReject \u003d\n+            requestsToReject.computeIfAbsent(\n+                schedulerResponse.getApplicationId(),\n+                k -\u003e new ArrayList\u003c\u003e());\n+        synchronized (reqsToReject) {\n+          reqsToReject.add(schedulerResponse.getSchedulingRequest());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleSchedulingResponse(SchedulingResponse schedulerResponse) {\n    int placementAttempt \u003d ((Response)schedulerResponse).placementAttempt;\n    // Retry this placement as it is not successful and we are still\n    // under max retry. The req is batched with other unsuccessful\n    // requests from the same app\n    if (!schedulerResponse.isSuccess() \u0026\u0026 placementAttempt \u003c retryAttempts) {\n      List\u003cBatchedRequests\u003e reqsToRetry \u003d\n          requestsToRetry.computeIfAbsent(\n              schedulerResponse.getApplicationId(),\n              k -\u003e new ArrayList\u003c\u003e());\n      synchronized (reqsToRetry) {\n        addToRetryList(schedulerResponse, placementAttempt, reqsToRetry);\n      }\n      LOG.warn(\"Going to retry request for application [{}] after [{}]\" +\n              \" attempts: [{}]\", schedulerResponse.getApplicationId(),\n          placementAttempt, schedulerResponse.getSchedulingRequest());\n    } else {\n      if (!schedulerResponse.isSuccess()) {\n        LOG.warn(\"Not retrying request for application [{}] after [{}]\" +\n                \" attempts: [{}]\", schedulerResponse.getApplicationId(),\n            placementAttempt, schedulerResponse.getSchedulingRequest());\n        List\u003cSchedulingRequest\u003e reqsToReject \u003d\n            requestsToReject.computeIfAbsent(\n                schedulerResponse.getApplicationId(),\n                k -\u003e new ArrayList\u003c\u003e());\n        synchronized (reqsToReject) {\n          reqsToReject.add(schedulerResponse.getSchedulingRequest());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java"
    }
  }
}