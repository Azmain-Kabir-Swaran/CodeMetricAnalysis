{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "killContainersToEnforceMaxQueueCapacity",
  "functionId": "killContainersToEnforceMaxQueueCapacity___partition-String__clusterResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 1295,
  "functionEndLine": 1330,
  "numCommitsSeen": 85,
  "timeTaken": 3490,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "5e798b1a0ddceeaf54703b94052501867156e979",
    "ae14e5d07f1b6702a5160637438028bb03d9387e"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "5e798b1a0ddceeaf54703b94052501867156e979": "Ybodychange",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "29/08/19 3:14 AM",
      "commitNameOld": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 209.05,
      "commitsBetweenForRepo": 935,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void killContainersToEnforceMaxQueueCapacity(String partition,\n       Resource clusterResource) {\n     Iterator\u003cRMContainer\u003e killableContainerIter \u003d getKillableContainers(\n         partition);\n     if (!killableContainerIter.hasNext()) {\n       return;\n     }\n \n     Resource partitionResource \u003d labelManager.getResourceByLabel(partition,\n         null);\n     Resource maxResource \u003d getEffectiveMaxCapacity(partition);\n \n     while (Resources.greaterThan(resourceCalculator, partitionResource,\n         queueUsage.getUsed(partition), maxResource)) {\n       RMContainer toKillContainer \u003d killableContainerIter.next();\n       FiCaSchedulerApp attempt \u003d csContext.getApplicationAttempt(\n           toKillContainer.getContainerId().getApplicationAttemptId());\n       FiCaSchedulerNode node \u003d csContext.getNode(\n           toKillContainer.getAllocatedNode());\n       if (null !\u003d attempt \u0026\u0026 null !\u003d node) {\n         LeafQueue lq \u003d attempt.getCSLeafQueue();\n         lq.completedContainer(clusterResource, attempt, node, toKillContainer,\n             SchedulerUtils.createPreemptedContainerStatus(\n                 toKillContainer.getContainerId(),\n                 SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL,\n             null, false);\n         LOG.info(\"Killed container\u003d\" + toKillContainer.getContainerId()\n-            + \" from queue\u003d\" + lq.getQueueName() + \" to make queue\u003d\" + this\n-            .getQueueName() + \"\u0027s max-capacity enforced\");\n+            + \" from queue\u003d\" + lq.getQueuePath() + \" to make queue\u003d\" + this\n+            .getQueuePath() + \"\u0027s max-capacity enforced\");\n       }\n \n       if (!killableContainerIter.hasNext()) {\n         break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void killContainersToEnforceMaxQueueCapacity(String partition,\n      Resource clusterResource) {\n    Iterator\u003cRMContainer\u003e killableContainerIter \u003d getKillableContainers(\n        partition);\n    if (!killableContainerIter.hasNext()) {\n      return;\n    }\n\n    Resource partitionResource \u003d labelManager.getResourceByLabel(partition,\n        null);\n    Resource maxResource \u003d getEffectiveMaxCapacity(partition);\n\n    while (Resources.greaterThan(resourceCalculator, partitionResource,\n        queueUsage.getUsed(partition), maxResource)) {\n      RMContainer toKillContainer \u003d killableContainerIter.next();\n      FiCaSchedulerApp attempt \u003d csContext.getApplicationAttempt(\n          toKillContainer.getContainerId().getApplicationAttemptId());\n      FiCaSchedulerNode node \u003d csContext.getNode(\n          toKillContainer.getAllocatedNode());\n      if (null !\u003d attempt \u0026\u0026 null !\u003d node) {\n        LeafQueue lq \u003d attempt.getCSLeafQueue();\n        lq.completedContainer(clusterResource, attempt, node, toKillContainer,\n            SchedulerUtils.createPreemptedContainerStatus(\n                toKillContainer.getContainerId(),\n                SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL,\n            null, false);\n        LOG.info(\"Killed container\u003d\" + toKillContainer.getContainerId()\n            + \" from queue\u003d\" + lq.getQueuePath() + \" to make queue\u003d\" + this\n            .getQueuePath() + \"\u0027s max-capacity enforced\");\n      }\n\n      if (!killableContainerIter.hasNext()) {\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "5e798b1a0ddceeaf54703b94052501867156e979": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6471. Support to add min/max resource configuration for a queue. (Sunil G via wangda)\n\nChange-Id: I9213f5297a6841fab5c573e85ee4c4e5f4a0b7ff\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/11/17 11:25 AM",
      "commitNameOld": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 21.31,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,36 @@\n   private void killContainersToEnforceMaxQueueCapacity(String partition,\n       Resource clusterResource) {\n     Iterator\u003cRMContainer\u003e killableContainerIter \u003d getKillableContainers(\n         partition);\n     if (!killableContainerIter.hasNext()) {\n       return;\n     }\n \n     Resource partitionResource \u003d labelManager.getResourceByLabel(partition,\n         null);\n-    Resource maxResource \u003d Resources.multiply(partitionResource,\n-        getQueueCapacities().getAbsoluteMaximumCapacity(partition));\n+    Resource maxResource \u003d getEffectiveMaxCapacity(partition);\n \n     while (Resources.greaterThan(resourceCalculator, partitionResource,\n         queueUsage.getUsed(partition), maxResource)) {\n       RMContainer toKillContainer \u003d killableContainerIter.next();\n       FiCaSchedulerApp attempt \u003d csContext.getApplicationAttempt(\n           toKillContainer.getContainerId().getApplicationAttemptId());\n       FiCaSchedulerNode node \u003d csContext.getNode(\n           toKillContainer.getAllocatedNode());\n       if (null !\u003d attempt \u0026\u0026 null !\u003d node) {\n         LeafQueue lq \u003d attempt.getCSLeafQueue();\n         lq.completedContainer(clusterResource, attempt, node, toKillContainer,\n             SchedulerUtils.createPreemptedContainerStatus(\n                 toKillContainer.getContainerId(),\n                 SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL,\n             null, false);\n         LOG.info(\"Killed container\u003d\" + toKillContainer.getContainerId()\n             + \" from queue\u003d\" + lq.getQueueName() + \" to make queue\u003d\" + this\n             .getQueueName() + \"\u0027s max-capacity enforced\");\n       }\n \n       if (!killableContainerIter.hasNext()) {\n         break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void killContainersToEnforceMaxQueueCapacity(String partition,\n      Resource clusterResource) {\n    Iterator\u003cRMContainer\u003e killableContainerIter \u003d getKillableContainers(\n        partition);\n    if (!killableContainerIter.hasNext()) {\n      return;\n    }\n\n    Resource partitionResource \u003d labelManager.getResourceByLabel(partition,\n        null);\n    Resource maxResource \u003d getEffectiveMaxCapacity(partition);\n\n    while (Resources.greaterThan(resourceCalculator, partitionResource,\n        queueUsage.getUsed(partition), maxResource)) {\n      RMContainer toKillContainer \u003d killableContainerIter.next();\n      FiCaSchedulerApp attempt \u003d csContext.getApplicationAttempt(\n          toKillContainer.getContainerId().getApplicationAttemptId());\n      FiCaSchedulerNode node \u003d csContext.getNode(\n          toKillContainer.getAllocatedNode());\n      if (null !\u003d attempt \u0026\u0026 null !\u003d node) {\n        LeafQueue lq \u003d attempt.getCSLeafQueue();\n        lq.completedContainer(clusterResource, attempt, node, toKillContainer,\n            SchedulerUtils.createPreemptedContainerStatus(\n                toKillContainer.getContainerId(),\n                SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL,\n            null, false);\n        LOG.info(\"Killed container\u003d\" + toKillContainer.getContainerId()\n            + \" from queue\u003d\" + lq.getQueueName() + \" to make queue\u003d\" + this\n            .getQueueName() + \"\u0027s max-capacity enforced\");\n      }\n\n      if (!killableContainerIter.hasNext()) {\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,37 @@\n+  private void killContainersToEnforceMaxQueueCapacity(String partition,\n+      Resource clusterResource) {\n+    Iterator\u003cRMContainer\u003e killableContainerIter \u003d getKillableContainers(\n+        partition);\n+    if (!killableContainerIter.hasNext()) {\n+      return;\n+    }\n+\n+    Resource partitionResource \u003d labelManager.getResourceByLabel(partition,\n+        null);\n+    Resource maxResource \u003d Resources.multiply(partitionResource,\n+        getQueueCapacities().getAbsoluteMaximumCapacity(partition));\n+\n+    while (Resources.greaterThan(resourceCalculator, partitionResource,\n+        queueUsage.getUsed(partition), maxResource)) {\n+      RMContainer toKillContainer \u003d killableContainerIter.next();\n+      FiCaSchedulerApp attempt \u003d csContext.getApplicationAttempt(\n+          toKillContainer.getContainerId().getApplicationAttemptId());\n+      FiCaSchedulerNode node \u003d csContext.getNode(\n+          toKillContainer.getAllocatedNode());\n+      if (null !\u003d attempt \u0026\u0026 null !\u003d node) {\n+        LeafQueue lq \u003d attempt.getCSLeafQueue();\n+        lq.completedContainer(clusterResource, attempt, node, toKillContainer,\n+            SchedulerUtils.createPreemptedContainerStatus(\n+                toKillContainer.getContainerId(),\n+                SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL,\n+            null, false);\n+        LOG.info(\"Killed container\u003d\" + toKillContainer.getContainerId()\n+            + \" from queue\u003d\" + lq.getQueueName() + \" to make queue\u003d\" + this\n+            .getQueueName() + \"\u0027s max-capacity enforced\");\n+      }\n+\n+      if (!killableContainerIter.hasNext()) {\n+        break;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void killContainersToEnforceMaxQueueCapacity(String partition,\n      Resource clusterResource) {\n    Iterator\u003cRMContainer\u003e killableContainerIter \u003d getKillableContainers(\n        partition);\n    if (!killableContainerIter.hasNext()) {\n      return;\n    }\n\n    Resource partitionResource \u003d labelManager.getResourceByLabel(partition,\n        null);\n    Resource maxResource \u003d Resources.multiply(partitionResource,\n        getQueueCapacities().getAbsoluteMaximumCapacity(partition));\n\n    while (Resources.greaterThan(resourceCalculator, partitionResource,\n        queueUsage.getUsed(partition), maxResource)) {\n      RMContainer toKillContainer \u003d killableContainerIter.next();\n      FiCaSchedulerApp attempt \u003d csContext.getApplicationAttempt(\n          toKillContainer.getContainerId().getApplicationAttemptId());\n      FiCaSchedulerNode node \u003d csContext.getNode(\n          toKillContainer.getAllocatedNode());\n      if (null !\u003d attempt \u0026\u0026 null !\u003d node) {\n        LeafQueue lq \u003d attempt.getCSLeafQueue();\n        lq.completedContainer(clusterResource, attempt, node, toKillContainer,\n            SchedulerUtils.createPreemptedContainerStatus(\n                toKillContainer.getContainerId(),\n                SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL,\n            null, false);\n        LOG.info(\"Killed container\u003d\" + toKillContainer.getContainerId()\n            + \" from queue\u003d\" + lq.getQueueName() + \" to make queue\u003d\" + this\n            .getQueueName() + \"\u0027s max-capacity enforced\");\n      }\n\n      if (!killableContainerIter.hasNext()) {\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}