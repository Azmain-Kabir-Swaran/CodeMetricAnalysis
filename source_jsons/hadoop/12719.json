{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryAliasMap.java",
  "functionName": "createSnapshot",
  "functionId": "createSnapshot___aliasMap-InMemoryAliasMap",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/aliasmap/InMemoryAliasMap.java",
  "functionStartLine": 283,
  "functionEndLine": 312,
  "numCommitsSeen": 7,
  "timeTaken": 1302,
  "changeHistory": [
    "8fc0d04517912766a3102f3e611f7d0fabd2f815"
  ],
  "changeHistoryShort": {
    "8fc0d04517912766a3102f3e611f7d0fabd2f815": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8fc0d04517912766a3102f3e611f7d0fabd2f815": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14001. [PROVIDED Storage] bootstrapStandby should manage the InMemoryAliasMap. Contributed by Virajith Jalaparti.\n",
      "commitDate": "07/12/18 6:30 PM",
      "commitName": "8fc0d04517912766a3102f3e611f7d0fabd2f815",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,30 @@\n+  static File createSnapshot(InMemoryAliasMap aliasMap) throws IOException {\n+    File originalAliasMapDir \u003d new File(aliasMap.aliasMapURI);\n+    String bpid \u003d originalAliasMapDir.getName();\n+    File snapshotDir \u003d\n+        new File(originalAliasMapDir.getParent(), SNAPSHOT_COPY_DIR);\n+    File newLevelDBDir \u003d new File(snapshotDir, bpid);\n+    if (!newLevelDBDir.mkdirs()) {\n+      throw new IOException(\n+          \"Unable to create aliasmap snapshot directory \" + newLevelDBDir);\n+    }\n+    // get a snapshot for the original DB.\n+    DB originalDB \u003d aliasMap.levelDb;\n+    try (Snapshot snapshot \u003d originalDB.getSnapshot()) {\n+      // create a new DB for the snapshot and copy all K,V pairs.\n+      Options options \u003d new Options();\n+      options.createIfMissing(true);\n+      try (DB snapshotDB \u003d JniDBFactory.factory.open(newLevelDBDir, options)) {\n+        try (DBIterator iterator \u003d\n+            originalDB.iterator(new ReadOptions().snapshot(snapshot))) {\n+          iterator.seekToFirst();\n+          while (iterator.hasNext()) {\n+            Map.Entry\u003cbyte[], byte[]\u003e entry \u003d iterator.next();\n+            snapshotDB.put(entry.getKey(), entry.getValue());\n+          }\n+        }\n+      }\n+    }\n+\n+    return snapshotDir;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static File createSnapshot(InMemoryAliasMap aliasMap) throws IOException {\n    File originalAliasMapDir \u003d new File(aliasMap.aliasMapURI);\n    String bpid \u003d originalAliasMapDir.getName();\n    File snapshotDir \u003d\n        new File(originalAliasMapDir.getParent(), SNAPSHOT_COPY_DIR);\n    File newLevelDBDir \u003d new File(snapshotDir, bpid);\n    if (!newLevelDBDir.mkdirs()) {\n      throw new IOException(\n          \"Unable to create aliasmap snapshot directory \" + newLevelDBDir);\n    }\n    // get a snapshot for the original DB.\n    DB originalDB \u003d aliasMap.levelDb;\n    try (Snapshot snapshot \u003d originalDB.getSnapshot()) {\n      // create a new DB for the snapshot and copy all K,V pairs.\n      Options options \u003d new Options();\n      options.createIfMissing(true);\n      try (DB snapshotDB \u003d JniDBFactory.factory.open(newLevelDBDir, options)) {\n        try (DBIterator iterator \u003d\n            originalDB.iterator(new ReadOptions().snapshot(snapshot))) {\n          iterator.seekToFirst();\n          while (iterator.hasNext()) {\n            Map.Entry\u003cbyte[], byte[]\u003e entry \u003d iterator.next();\n            snapshotDB.put(entry.getKey(), entry.getValue());\n          }\n        }\n      }\n    }\n\n    return snapshotDir;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/aliasmap/InMemoryAliasMap.java"
    }
  }
}