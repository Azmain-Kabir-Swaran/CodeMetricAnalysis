{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKRMStateStore.java",
  "functionName": "loadApplicationAttemptState",
  "functionId": "loadApplicationAttemptState___appState-ApplicationStateData__appPath-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
  "functionStartLine": 744,
  "functionEndLine": 761,
  "numCommitsSeen": 171,
  "timeTaken": 5503,
  "changeHistory": [
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
    "e516706b896743e47e2852be81944eb5613e3e76",
    "5805a81efbc024024d8172489dfdc6cf77879416",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "3de66011c2e80d7c458a67f80042af986fcc677d",
    "d16470025aa0c51a04c530863a96108895d72ddf",
    "d1d6bb70f4de66f393f2d5c52d4611b1f87b152e",
    "93907baa0b033c1431dc7055116746fc9db508cc"
  ],
  "changeHistoryShort": {
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210": "Ymultichange(Yparameterchange,Ybodychange)",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": "Ybodychange",
    "e516706b896743e47e2852be81944eb5613e3e76": "Ybodychange",
    "5805a81efbc024024d8172489dfdc6cf77879416": "Ymultichange(Yparameterchange,Ybodychange)",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "3de66011c2e80d7c458a67f80042af986fcc677d": "Ybodychange",
    "d16470025aa0c51a04c530863a96108895d72ddf": "Ybodychange",
    "d1d6bb70f4de66f393f2d5c52d4611b1f87b152e": "Ybodychange",
    "93907baa0b033c1431dc7055116746fc9db508cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2962. ZKRMStateStore: Limit the number of znodes under a znode (Contributed by Varun Sexena via Daniel Templeton)\n",
      "commitDate": "28/04/17 1:30 PM",
      "commitName": "2e52789edf68016e7a3f450164f8bd3d8e6cb210",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2962. ZKRMStateStore: Limit the number of znodes under a znode (Contributed by Varun Sexena via Daniel Templeton)\n",
          "commitDate": "28/04/17 1:30 PM",
          "commitName": "2e52789edf68016e7a3f450164f8bd3d8e6cb210",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "30/01/17 9:44 PM",
          "commitNameOld": "87852b6ef4b9d973b7b3999974d41c8860fb1495",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 87.62,
          "commitsBetweenForRepo": 498,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,18 @@\n   private void loadApplicationAttemptState(ApplicationStateData appState,\n-      ApplicationId appId)\n-      throws Exception {\n-    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n+      String appPath) throws Exception {\n     List\u003cString\u003e attempts \u003d getChildren(appPath);\n \n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getData(attemptPath);\n \n         ApplicationAttemptStateDataPBImpl attemptState \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n-\n     LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadApplicationAttemptState(ApplicationStateData appState,\n      String appPath) throws Exception {\n    List\u003cString\u003e attempts \u003d getChildren(appPath);\n\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getData(attemptPath);\n\n        ApplicationAttemptStateDataPBImpl attemptState \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {
            "oldValue": "[appState-ApplicationStateData, appId-ApplicationId]",
            "newValue": "[appState-ApplicationStateData, appPath-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2962. ZKRMStateStore: Limit the number of znodes under a znode (Contributed by Varun Sexena via Daniel Templeton)\n",
          "commitDate": "28/04/17 1:30 PM",
          "commitName": "2e52789edf68016e7a3f450164f8bd3d8e6cb210",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "30/01/17 9:44 PM",
          "commitNameOld": "87852b6ef4b9d973b7b3999974d41c8860fb1495",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 87.62,
          "commitsBetweenForRepo": 498,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,18 @@\n   private void loadApplicationAttemptState(ApplicationStateData appState,\n-      ApplicationId appId)\n-      throws Exception {\n-    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n+      String appPath) throws Exception {\n     List\u003cString\u003e attempts \u003d getChildren(appPath);\n \n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getData(attemptPath);\n \n         ApplicationAttemptStateDataPBImpl attemptState \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n-\n     LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadApplicationAttemptState(ApplicationStateData appState,\n      String appPath) throws Exception {\n    List\u003cString\u003e attempts \u003d getChildren(appPath);\n\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getData(attemptPath);\n\n        ApplicationAttemptStateDataPBImpl attemptState \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2716. Refactor ZKRMStateStore retry code with Apache Curator. Contributed by Karthik Kambatla\n",
      "commitDate": "08/06/15 2:50 PM",
      "commitName": "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/05/15 3:12 PM",
      "commitNameOld": "d0b73287c26983f32b0efe01862150e9fd28086f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.99,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   private void loadApplicationAttemptState(ApplicationStateData appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n-    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n+    List\u003cString\u003e attempts \u003d getChildren(appPath);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n-        byte[] attemptData \u003d getDataWithRetries(attemptPath, false);\n+        byte[] attemptData \u003d getData(attemptPath);\n \n         ApplicationAttemptStateDataPBImpl attemptState \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n     LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadApplicationAttemptState(ApplicationStateData appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildren(appPath);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getData(attemptPath);\n\n        ApplicationAttemptStateDataPBImpl attemptState \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "e516706b896743e47e2852be81944eb5613e3e76": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3469. ZKRMStateStore: Avoid setting watches that are not required. (Jun Hong via kasha)\n",
      "commitDate": "10/04/15 11:20 AM",
      "commitName": "e516706b896743e47e2852be81944eb5613e3e76",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/03/15 7:49 PM",
      "commitNameOld": "8d88691d162f87f95c9ed7e0a569ef08e8385d4f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 36.61,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   private void loadApplicationAttemptState(ApplicationStateData appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n     List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n-        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n+        byte[] attemptData \u003d getDataWithRetries(attemptPath, false);\n \n         ApplicationAttemptStateDataPBImpl attemptState \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n     LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadApplicationAttemptState(ApplicationStateData appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, false);\n\n        ApplicationAttemptStateDataPBImpl attemptState \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "5805a81efbc024024d8172489dfdc6cf77879416": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "25/11/14 12:48 PM",
      "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
          "commitDate": "25/11/14 12:48 PM",
          "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
          "commitAuthor": "Jian He",
          "commitDateOld": "26/10/14 11:14 AM",
          "commitNameOld": "018664550507981297fd9f91e29408e6b7801ea9",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 30.11,
          "commitsBetweenForRepo": 280,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,19 @@\n-  private void loadApplicationAttemptState(ApplicationState appState,\n+  private void loadApplicationAttemptState(ApplicationStateData appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n     List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n \n-        ApplicationAttemptId attemptId \u003d\n-            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n-        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+        ApplicationAttemptStateDataPBImpl attemptState \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n-        Credentials credentials \u003d null;\n-        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n-          credentials \u003d new Credentials();\n-          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n-          dibb.reset(attemptStateData.getAppAttemptTokens());\n-          credentials.readTokenStorageStream(dibb);\n-        }\n-\n-        ApplicationAttemptState attemptState \u003d\n-            new ApplicationAttemptState(attemptId,\n-              attemptStateData.getMasterContainer(), credentials,\n-              attemptStateData.getStartTime(), attemptStateData.getState(),\n-              attemptStateData.getFinalTrackingUrl(),\n-              attemptStateData.getDiagnostics(),\n-              attemptStateData.getFinalApplicationStatus(),\n-              attemptStateData.getAMContainerExitStatus(),\n-              attemptStateData.getFinishTime(),\n-              attemptStateData.getMemorySeconds(),\n-              attemptStateData.getVcoreSeconds());\n-\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n     LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadApplicationAttemptState(ApplicationStateData appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n\n        ApplicationAttemptStateDataPBImpl attemptState \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {
            "oldValue": "[appState-ApplicationState, appId-ApplicationId]",
            "newValue": "[appState-ApplicationStateData, appId-ApplicationId]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
          "commitDate": "25/11/14 12:48 PM",
          "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
          "commitAuthor": "Jian He",
          "commitDateOld": "26/10/14 11:14 AM",
          "commitNameOld": "018664550507981297fd9f91e29408e6b7801ea9",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 30.11,
          "commitsBetweenForRepo": 280,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,19 @@\n-  private void loadApplicationAttemptState(ApplicationState appState,\n+  private void loadApplicationAttemptState(ApplicationStateData appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n     List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n \n-        ApplicationAttemptId attemptId \u003d\n-            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n-        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+        ApplicationAttemptStateDataPBImpl attemptState \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n-        Credentials credentials \u003d null;\n-        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n-          credentials \u003d new Credentials();\n-          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n-          dibb.reset(attemptStateData.getAppAttemptTokens());\n-          credentials.readTokenStorageStream(dibb);\n-        }\n-\n-        ApplicationAttemptState attemptState \u003d\n-            new ApplicationAttemptState(attemptId,\n-              attemptStateData.getMasterContainer(), credentials,\n-              attemptStateData.getStartTime(), attemptStateData.getState(),\n-              attemptStateData.getFinalTrackingUrl(),\n-              attemptStateData.getDiagnostics(),\n-              attemptStateData.getFinalApplicationStatus(),\n-              attemptStateData.getAMContainerExitStatus(),\n-              attemptStateData.getFinishTime(),\n-              attemptStateData.getMemorySeconds(),\n-              attemptStateData.getVcoreSeconds());\n-\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n     LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadApplicationAttemptState(ApplicationStateData appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n\n        ApplicationAttemptStateDataPBImpl attemptState \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": {
      "type": "Ybodychange",
      "commitMessage": "YARN-611. Added an API to let apps specify an interval beyond which AM failures should be ignored towards counting max-attempts. Contributed by Xuan Gong.\n",
      "commitDate": "13/09/14 6:04 PM",
      "commitName": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/09/14 10:33 AM",
      "commitNameOld": "3122daa80261b466e309e88d88d1e2c030525e3f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   private void loadApplicationAttemptState(ApplicationState appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n     List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n \n         ApplicationAttemptId attemptId \u003d\n             ConverterUtils.toApplicationAttemptId(attemptIDStr);\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n         Credentials credentials \u003d null;\n         if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n           credentials \u003d new Credentials();\n           DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n           dibb.reset(attemptStateData.getAppAttemptTokens());\n           credentials.readTokenStorageStream(dibb);\n         }\n \n         ApplicationAttemptState attemptState \u003d\n             new ApplicationAttemptState(attemptId,\n               attemptStateData.getMasterContainer(), credentials,\n               attemptStateData.getStartTime(), attemptStateData.getState(),\n               attemptStateData.getFinalTrackingUrl(),\n               attemptStateData.getDiagnostics(),\n               attemptStateData.getFinalApplicationStatus(),\n               attemptStateData.getAMContainerExitStatus(),\n+              attemptStateData.getFinishTime(),\n               attemptStateData.getMemorySeconds(),\n               attemptStateData.getVcoreSeconds());\n \n+\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n     LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadApplicationAttemptState(ApplicationState appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n              attemptStateData.getMasterContainer(), credentials,\n              attemptStateData.getStartTime(), attemptStateData.getState(),\n              attemptStateData.getFinalTrackingUrl(),\n              attemptStateData.getDiagnostics(),\n              attemptStateData.getFinalApplicationStatus(),\n              attemptStateData.getAMContainerExitStatus(),\n              attemptStateData.getFinishTime(),\n              attemptStateData.getMemorySeconds(),\n              attemptStateData.getVcoreSeconds());\n\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/08/14 11:16 AM",
      "commitNameOld": "3de66011c2e80d7c458a67f80042af986fcc677d",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 12.29,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   private void loadApplicationAttemptState(ApplicationState appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n     List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n \n         ApplicationAttemptId attemptId \u003d\n             ConverterUtils.toApplicationAttemptId(attemptIDStr);\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n         Credentials credentials \u003d null;\n         if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n           credentials \u003d new Credentials();\n           DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n           dibb.reset(attemptStateData.getAppAttemptTokens());\n           credentials.readTokenStorageStream(dibb);\n         }\n \n         ApplicationAttemptState attemptState \u003d\n             new ApplicationAttemptState(attemptId,\n               attemptStateData.getMasterContainer(), credentials,\n               attemptStateData.getStartTime(), attemptStateData.getState(),\n               attemptStateData.getFinalTrackingUrl(),\n               attemptStateData.getDiagnostics(),\n               attemptStateData.getFinalApplicationStatus(),\n-              attemptStateData.getAMContainerExitStatus());\n+              attemptStateData.getAMContainerExitStatus(),\n+              attemptStateData.getMemorySeconds(),\n+              attemptStateData.getVcoreSeconds());\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n     LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadApplicationAttemptState(ApplicationState appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n              attemptStateData.getMasterContainer(), credentials,\n              attemptStateData.getStartTime(), attemptStateData.getState(),\n              attemptStateData.getFinalTrackingUrl(),\n              attemptStateData.getDiagnostics(),\n              attemptStateData.getFinalApplicationStatus(),\n              attemptStateData.getAMContainerExitStatus(),\n              attemptStateData.getMemorySeconds(),\n              attemptStateData.getVcoreSeconds());\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "3de66011c2e80d7c458a67f80042af986fcc677d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2450. Fix typos in log messages. Contributed by Ray Chiang.\n",
      "commitDate": "29/08/14 11:16 AM",
      "commitName": "3de66011c2e80d7c458a67f80042af986fcc677d",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "28/08/14 9:47 PM",
      "commitNameOld": "7b3e27ab7393214e35a575bc9093100e94dd8c89",
      "commitAuthorOld": "Jian",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void loadApplicationAttemptState(ApplicationState appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n     List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n \n         ApplicationAttemptId attemptId \u003d\n             ConverterUtils.toApplicationAttemptId(attemptIDStr);\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n         Credentials credentials \u003d null;\n         if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n           credentials \u003d new Credentials();\n           DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n           dibb.reset(attemptStateData.getAppAttemptTokens());\n           credentials.readTokenStorageStream(dibb);\n         }\n \n         ApplicationAttemptState attemptState \u003d\n             new ApplicationAttemptState(attemptId,\n               attemptStateData.getMasterContainer(), credentials,\n               attemptStateData.getStartTime(), attemptStateData.getState(),\n               attemptStateData.getFinalTrackingUrl(),\n               attemptStateData.getDiagnostics(),\n               attemptStateData.getFinalApplicationStatus(),\n               attemptStateData.getAMContainerExitStatus());\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n-    LOG.debug(\"Done Loading applications from ZK state store\");\n+    LOG.debug(\"Done loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadApplicationAttemptState(ApplicationState appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n              attemptStateData.getMasterContainer(), credentials,\n              attemptStateData.getStartTime(), attemptStateData.getState(),\n              attemptStateData.getFinalTrackingUrl(),\n              attemptStateData.getDiagnostics(),\n              attemptStateData.getFinalApplicationStatus(),\n              attemptStateData.getAMContainerExitStatus());\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "d16470025aa0c51a04c530863a96108895d72ddf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2074. Changed ResourceManager to not count AM preemptions towards app failures. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 8:15 AM",
      "commitName": "d16470025aa0c51a04c530863a96108895d72ddf",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/06/14 12:44 PM",
      "commitNameOld": "c94f2cec3a4d46718aa4cd144fb32e328406b9b3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.81,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void loadApplicationAttemptState(ApplicationState appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n     List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n \n         ApplicationAttemptId attemptId \u003d\n             ConverterUtils.toApplicationAttemptId(attemptIDStr);\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n         Credentials credentials \u003d null;\n         if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n           credentials \u003d new Credentials();\n           DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n           dibb.reset(attemptStateData.getAppAttemptTokens());\n           credentials.readTokenStorageStream(dibb);\n         }\n \n         ApplicationAttemptState attemptState \u003d\n             new ApplicationAttemptState(attemptId,\n-                attemptStateData.getMasterContainer(), credentials,\n-                attemptStateData.getStartTime(),\n-                attemptStateData.getState(),\n-                attemptStateData.getFinalTrackingUrl(),\n-                attemptStateData.getDiagnostics(),\n-                attemptStateData.getFinalApplicationStatus());\n+              attemptStateData.getMasterContainer(), credentials,\n+              attemptStateData.getStartTime(), attemptStateData.getState(),\n+              attemptStateData.getFinalTrackingUrl(),\n+              attemptStateData.getDiagnostics(),\n+              attemptStateData.getFinalApplicationStatus(),\n+              attemptStateData.getAMContainerExitStatus());\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n     LOG.debug(\"Done Loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadApplicationAttemptState(ApplicationState appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n              attemptStateData.getMasterContainer(), credentials,\n              attemptStateData.getStartTime(), attemptStateData.getState(),\n              attemptStateData.getFinalTrackingUrl(),\n              attemptStateData.getDiagnostics(),\n              attemptStateData.getFinalApplicationStatus(),\n              attemptStateData.getAMContainerExitStatus());\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done Loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "d1d6bb70f4de66f393f2d5c52d4611b1f87b152e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2061. Revisit logging levels in ZKRMStateStore. (Ray Chiang via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/14 2:11 PM",
      "commitName": "d1d6bb70f4de66f393f2d5c52d4611b1f87b152e",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/05/14 8:24 AM",
      "commitNameOld": "49a3a0cd0ceb0dfe84367a2adfb8f9f0990a5548",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.24,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void loadApplicationAttemptState(ApplicationState appState,\n       ApplicationId appId)\n       throws Exception {\n     String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n     List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n     for (String attemptIDStr : attempts) {\n       if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n         byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n \n         ApplicationAttemptId attemptId \u003d\n             ConverterUtils.toApplicationAttemptId(attemptIDStr);\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(attemptData));\n         Credentials credentials \u003d null;\n         if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n           credentials \u003d new Credentials();\n           DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n           dibb.reset(attemptStateData.getAppAttemptTokens());\n           credentials.readTokenStorageStream(dibb);\n         }\n \n         ApplicationAttemptState attemptState \u003d\n             new ApplicationAttemptState(attemptId,\n                 attemptStateData.getMasterContainer(), credentials,\n                 attemptStateData.getStartTime(),\n                 attemptStateData.getState(),\n                 attemptStateData.getFinalTrackingUrl(),\n                 attemptStateData.getDiagnostics(),\n                 attemptStateData.getFinalApplicationStatus());\n \n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     }\n-    LOG.info(\"Done Loading applications from ZK state store\");\n+    LOG.debug(\"Done Loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadApplicationAttemptState(ApplicationState appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials,\n                attemptStateData.getStartTime(),\n                attemptStateData.getState(),\n                attemptStateData.getFinalTrackingUrl(),\n                attemptStateData.getDiagnostics(),\n                attemptStateData.getFinalApplicationStatus());\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.debug(\"Done Loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "93907baa0b033c1431dc7055116746fc9db508cc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1307. Redesign znode structure for Zookeeper based RM state-store for better organization and scalability. Contributed by Tsuyoshi OZAWA.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552209 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 6:33 PM",
      "commitName": "93907baa0b033c1431dc7055116746fc9db508cc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,37 @@\n+  private void loadApplicationAttemptState(ApplicationState appState,\n+      ApplicationId appId)\n+      throws Exception {\n+    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n+    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n+    for (String attemptIDStr : attempts) {\n+      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n+        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n+        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n+\n+        ApplicationAttemptId attemptId \u003d\n+            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n+        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+            new ApplicationAttemptStateDataPBImpl(\n+                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n+        Credentials credentials \u003d null;\n+        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n+          credentials \u003d new Credentials();\n+          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n+          dibb.reset(attemptStateData.getAppAttemptTokens());\n+          credentials.readTokenStorageStream(dibb);\n+        }\n+\n+        ApplicationAttemptState attemptState \u003d\n+            new ApplicationAttemptState(attemptId,\n+                attemptStateData.getMasterContainer(), credentials,\n+                attemptStateData.getStartTime(),\n+                attemptStateData.getState(),\n+                attemptStateData.getFinalTrackingUrl(),\n+                attemptStateData.getDiagnostics(),\n+                attemptStateData.getFinalApplicationStatus());\n+\n+        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n+      }\n+    }\n+    LOG.info(\"Done Loading applications from ZK state store\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadApplicationAttemptState(ApplicationState appState,\n      ApplicationId appId)\n      throws Exception {\n    String appPath \u003d getNodePath(rmAppRoot, appId.toString());\n    List\u003cString\u003e attempts \u003d getChildrenWithRetries(appPath, false);\n    for (String attemptIDStr : attempts) {\n      if (attemptIDStr.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        String attemptPath \u003d getNodePath(appPath, attemptIDStr);\n        byte[] attemptData \u003d getDataWithRetries(attemptPath, true);\n\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(attemptIDStr);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(attemptData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials,\n                attemptStateData.getStartTime(),\n                attemptStateData.getState(),\n                attemptStateData.getFinalTrackingUrl(),\n                attemptStateData.getDiagnostics(),\n                attemptStateData.getFinalApplicationStatus());\n\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    }\n    LOG.info(\"Done Loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java"
    }
  }
}