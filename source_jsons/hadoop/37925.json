{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceTrackerService.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
  "functionStartLine": 237,
  "functionEndLine": 267,
  "numCommitsSeen": 131,
  "timeTaken": 9132,
  "changeHistory": [
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "0928502029ef141759008997335ea2cd836a7154",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "48414b08277b86cdbc34ae36d7c4d204fd838294",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
    "d19cfe01642f9582e1fe5d567beb480399c37a01",
    "66137cf17cb4abccd6065819d97edc63c6510477",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1": "Ybodychange",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": "Ybodychange",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "48414b08277b86cdbc34ae36d7c4d204fd838294": "Ybodychange",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": "Ybodychange",
    "d19cfe01642f9582e1fe5d567beb480399c37a01": "Ybodychange",
    "66137cf17cb4abccd6065819d97edc63c6510477": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "16/06/14 4:56 PM",
      "commitNameOld": "95897ca14b7abd7fe047fdcf150473a8a2cbb024",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 44.84,
      "commitsBetweenForRepo": 313,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   protected void serviceStart() throws Exception {\n     super.serviceStart();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n-\n+ \n     this.server.start();\n-    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n+    conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n+\t\t\t   YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n+\t\t\t   YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    super.serviceStart();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n \n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n\t\t\t   YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n\t\t\t   YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1758. Fixed ResourceManager to not mandate the presence of site specific configuration files and thus fix failures in downstream tests. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573695 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/14 11:41 AM",
      "commitName": "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/02/14 9:52 AM",
      "commitNameOld": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.08,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,30 @@\n   protected void serviceStart() throws Exception {\n     super.serviceStart();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      conf.addResource(this.rmContext.getConfigurationProvider()\n-          .getConfigurationInputStream(conf,\n-              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n+      InputStream inputStream \u003d\n+          this.rmContext.getConfigurationProvider()\n+              .getConfigurationInputStream(conf,\n+                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n+      if (inputStream !\u003d null) {\n+        conf.addResource(inputStream);\n+      }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    super.serviceStart();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 9:52 AM",
      "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/02/14 2:50 PM",
      "commitNameOld": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.79,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected void serviceStart() throws Exception {\n     super.serviceStart();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      refreshServiceAcls(\n-          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n-              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n-          RMPolicyProvider.getInstance());\n+      conf.addResource(this.rmContext.getConfigurationProvider()\n+          .getConfigurationInputStream(conf,\n+              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n+      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    super.serviceStart();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      conf.addResource(this.rmContext.getConfigurationProvider()\n          .getConfigurationInputStream(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/14 2:46 PM",
      "commitNameOld": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   protected void serviceStart() throws Exception {\n     super.serviceStart();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      refreshServiceAcls(conf, new RMPolicyProvider());\n+      refreshServiceAcls(\n+          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n+              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n+          RMPolicyProvider.getInstance());\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    super.serviceStart();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(\n          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n          RMPolicyProvider.getInstance());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  public synchronized void start() {\n-    super.start();\n+  protected void serviceStart() throws Exception {\n+    super.serviceStart();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    super.serviceStart();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  public synchronized void start() {\n-    super.start();\n+  protected void serviceStart() throws Exception {\n+    super.serviceStart();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    super.serviceStart();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  public synchronized void start() {\n-    super.start();\n+  protected void serviceStart() throws Exception {\n+    super.serviceStart();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    super.serviceStart();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  public synchronized void start() {\n-    super.start();\n+  protected void serviceStart() throws Exception {\n+    super.serviceStart();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    super.serviceStart();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void start() {\n    super.start();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"
      }
    },
    "48414b08277b86cdbc34ae36d7c4d204fd838294": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4163. consistently set the bind address (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 11:35 AM",
      "commitName": "48414b08277b86cdbc34ae36d7c4d204fd838294",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "19/04/12 1:33 PM",
      "commitNameOld": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 13.92,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,23 @@\n   public synchronized void start() {\n     super.start();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n     this.server.start();\n-    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n-      String resolvedAddress \u003d\n-        server.getListenerAddress().getHostName() + \":\" + server.getListenerAddress().getPort();\n-      conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, resolvedAddress);\n-    }\n+    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n+                           server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    super.start();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n                           server.getListenerAddress());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3867. MiniMRYarn/MiniYarn uses fixed ports (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328109 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/12 1:33 PM",
      "commitName": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/04/12 11:46 AM",
      "commitNameOld": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,26 @@\n   public synchronized void start() {\n     super.start();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n     this.server.start();\n+    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n+      String resolvedAddress \u003d\n+        server.getListenerAddress().getHostName() + \":\" + server.getListenerAddress().getPort();\n+      conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, resolvedAddress);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    super.start();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    this.server.start();\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String resolvedAddress \u003d\n        server.getListenerAddress().getHostName() + \":\" + server.getListenerAddress().getPort();\n      conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, resolvedAddress);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "d19cfe01642f9582e1fe5d567beb480399c37a01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2746. Yarn servers can\u0027t communicate with each other with hadoop.security.authorization set to true (acmurthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188522 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 11:07 PM",
      "commitName": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "21/10/11 2:36 PM",
      "commitNameOld": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,21 @@\n   public synchronized void start() {\n     super.start();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           conf, null,\n           conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n-    this.server.start();\n+    \n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n+        false)) {\n+      refreshServiceAcls(conf, new RMPolicyProvider());\n+    }\n \n+    this.server.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    super.start();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    this.server.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "66137cf17cb4abccd6065819d97edc63c6510477": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3013. Removed YarnConfiguration.YARN_SECURITY_INFO and its usage as it doesn\u0027t affect security any more. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:43 AM",
      "commitName": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/11 2:31 PM",
      "commitNameOld": "8ae3cdeac7152ced75752f653b3fa11b2d881d09",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.59,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,14 @@\n   public synchronized void start() {\n     super.start();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n-    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-    Configuration rtServerConf \u003d new Configuration(getConfig());\n-    rtServerConf.setClass(\n-        YarnConfiguration.YARN_SECURITY_INFO,\n-        RMNMSecurityInfoClass.class, SecurityInfo.class);\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n-          rtServerConf, null,\n-          rtServerConf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n+          conf, null,\n+          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n               YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     this.server.start();\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    super.start();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          conf, null,\n          conf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    this.server.start();\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public synchronized void start() {\n     super.start();\n     // ResourceTrackerServer authenticates NodeManager via Kerberos if\n     // security is enabled, so no secretManager.\n     YarnRPC rpc \u003d YarnRPC.create(getConfig());\n     Configuration rtServerConf \u003d new Configuration(getConfig());\n     rtServerConf.setClass(\n         YarnConfiguration.YARN_SECURITY_INFO,\n         RMNMSecurityInfoClass.class, SecurityInfo.class);\n     this.server \u003d\n       rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n           rtServerConf, null,\n-          rtServerConf.getInt(RMConfig.RM_RESOURCE_TRACKER_THREADS, \n-              RMConfig.DEFAULT_RM_RESOURCE_TRACKER_THREADS));\n+          rtServerConf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n+              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n     this.server.start();\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    super.start();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration rtServerConf \u003d new Configuration(getConfig());\n    rtServerConf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        RMNMSecurityInfoClass.class, SecurityInfo.class);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          rtServerConf, null,\n          rtServerConf.getInt(YarnConfiguration.RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT, \n              YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT));\n    this.server.start();\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void start() {\n    super.start();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration rtServerConf \u003d new Configuration(getConfig());\n    rtServerConf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        RMNMSecurityInfoClass.class, SecurityInfo.class);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          rtServerConf, null,\n          rtServerConf.getInt(RMConfig.RM_RESOURCE_TRACKER_THREADS, \n              RMConfig.DEFAULT_RM_RESOURCE_TRACKER_THREADS));\n    this.server.start();\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,17 @@\n+  public synchronized void start() {\n+    super.start();\n+    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n+    // security is enabled, so no secretManager.\n+    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+    Configuration rtServerConf \u003d new Configuration(getConfig());\n+    rtServerConf.setClass(\n+        YarnConfiguration.YARN_SECURITY_INFO,\n+        RMNMSecurityInfoClass.class, SecurityInfo.class);\n+    this.server \u003d\n+      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n+          rtServerConf, null,\n+          rtServerConf.getInt(RMConfig.RM_RESOURCE_TRACKER_THREADS, \n+              RMConfig.DEFAULT_RM_RESOURCE_TRACKER_THREADS));\n+    this.server.start();\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    super.start();\n    // ResourceTrackerServer authenticates NodeManager via Kerberos if\n    // security is enabled, so no secretManager.\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration rtServerConf \u003d new Configuration(getConfig());\n    rtServerConf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        RMNMSecurityInfoClass.class, SecurityInfo.class);\n    this.server \u003d\n      rpc.getServer(ResourceTracker.class, this, resourceTrackerAddress,\n          rtServerConf, null,\n          rtServerConf.getInt(RMConfig.RM_RESOURCE_TRACKER_THREADS, \n              RMConfig.DEFAULT_RM_RESOURCE_TRACKER_THREADS));\n    this.server.start();\n\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"
    }
  }
}