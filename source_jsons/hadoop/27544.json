{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeTimelineCollectorManager.java",
  "functionName": "updateTimelineCollectorContext",
  "functionId": "updateTimelineCollectorContext___appId-ApplicationId__collector-TimelineCollector",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
  "functionStartLine": 346,
  "functionEndLine": 374,
  "numCommitsSeen": 20,
  "timeTaken": 2779,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "a3cf40e532d17b176663bb99248ed159aae6a9ed",
    "d275677e240cca469a4cec3dc7238e3f18b3f7e9",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "a3cf40e532d17b176663bb99248ed159aae6a9ed": "Ybodychange",
    "d275677e240cca469a4cec3dc7238e3f18b3f7e9": "Ybodychange",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": "Ymovefromfile",
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40": "Ybodychange",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/01/19 12:37 AM",
      "commitNameOld": "8c6978c3baef96a333ebd7e98e02098c99df7313",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 70.61,
      "commitsBetweenForRepo": 573,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,29 @@\n   private void updateTimelineCollectorContext(\n       ApplicationId appId, TimelineCollector collector)\n       throws YarnException, IOException {\n     GetTimelineCollectorContextRequest request \u003d\n         GetTimelineCollectorContextRequest.newInstance(appId);\n     LOG.info(\"Get timeline collector context for \" + appId);\n     GetTimelineCollectorContextResponse response \u003d\n         getNMCollectorService().getTimelineCollectorContext(request);\n     String userId \u003d response.getUserId();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Setting the user in the context: \" + userId);\n-      }\n+      LOG.debug(\"Setting the user in the context: {}\", userId);\n       collector.getTimelineEntityContext().setUserId(userId);\n     }\n     String flowName \u003d response.getFlowName();\n     if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Setting the flow name: \" + flowName);\n-      }\n+      LOG.debug(\"Setting the flow name: {}\", flowName);\n       collector.getTimelineEntityContext().setFlowName(flowName);\n     }\n     String flowVersion \u003d response.getFlowVersion();\n     if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Setting the flow version: \" + flowVersion);\n-      }\n+      LOG.debug(\"Setting the flow version: {}\", flowVersion);\n       collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n     }\n     long flowRunId \u003d response.getFlowRunId();\n     if (flowRunId !\u003d 0L) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Setting the flow run id: \" + flowRunId);\n-      }\n+      LOG.debug(\"Setting the flow run id: {}\", flowRunId);\n       collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateTimelineCollectorContext(\n      ApplicationId appId, TimelineCollector collector)\n      throws YarnException, IOException {\n    GetTimelineCollectorContextRequest request \u003d\n        GetTimelineCollectorContextRequest.newInstance(appId);\n    LOG.info(\"Get timeline collector context for \" + appId);\n    GetTimelineCollectorContextResponse response \u003d\n        getNMCollectorService().getTimelineCollectorContext(request);\n    String userId \u003d response.getUserId();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      LOG.debug(\"Setting the user in the context: {}\", userId);\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    String flowName \u003d response.getFlowName();\n    if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n      LOG.debug(\"Setting the flow name: {}\", flowName);\n      collector.getTimelineEntityContext().setFlowName(flowName);\n    }\n    String flowVersion \u003d response.getFlowVersion();\n    if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n      LOG.debug(\"Setting the flow version: {}\", flowVersion);\n      collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n    }\n    long flowRunId \u003d response.getFlowRunId();\n    if (flowRunId !\u003d 0L) {\n      LOG.debug(\"Setting the flow run id: {}\", flowRunId);\n      collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "a3cf40e532d17b176663bb99248ed159aae6a9ed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3461. Consolidate flow name/version/run defaults. (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,37 @@\n   private void updateTimelineCollectorContext(\n       ApplicationId appId, TimelineCollector collector)\n       throws YarnException, IOException {\n     GetTimelineCollectorContextRequest request \u003d\n         GetTimelineCollectorContextRequest.newInstance(appId);\n     LOG.info(\"Get timeline collector context for \" + appId);\n     GetTimelineCollectorContextResponse response \u003d\n         getNMCollectorService().getTimelineCollectorContext(request);\n     String userId \u003d response.getUserId();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Setting the user in the context: \" + userId);\n+      }\n       collector.getTimelineEntityContext().setUserId(userId);\n     }\n     String flowName \u003d response.getFlowName();\n     if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Setting the flow name: \" + flowName);\n+      }\n       collector.getTimelineEntityContext().setFlowName(flowName);\n     }\n     String flowVersion \u003d response.getFlowVersion();\n     if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Setting the flow version: \" + flowVersion);\n+      }\n       collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n     }\n     long flowRunId \u003d response.getFlowRunId();\n     if (flowRunId !\u003d 0L) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Setting the flow run id: \" + flowRunId);\n+      }\n       collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateTimelineCollectorContext(\n      ApplicationId appId, TimelineCollector collector)\n      throws YarnException, IOException {\n    GetTimelineCollectorContextRequest request \u003d\n        GetTimelineCollectorContextRequest.newInstance(appId);\n    LOG.info(\"Get timeline collector context for \" + appId);\n    GetTimelineCollectorContextResponse response \u003d\n        getNMCollectorService().getTimelineCollectorContext(request);\n    String userId \u003d response.getUserId();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Setting the user in the context: \" + userId);\n      }\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    String flowName \u003d response.getFlowName();\n    if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Setting the flow name: \" + flowName);\n      }\n      collector.getTimelineEntityContext().setFlowName(flowName);\n    }\n    String flowVersion \u003d response.getFlowVersion();\n    if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Setting the flow version: \" + flowVersion);\n      }\n      collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n    }\n    long flowRunId \u003d response.getFlowRunId();\n    if (flowRunId !\u003d 0L) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Setting the flow run id: \" + flowRunId);\n      }\n      collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "d275677e240cca469a4cec3dc7238e3f18b3f7e9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3634. TestMRTimelineEventHandling and TestApplication are broken. Contributed by Sangjin Lee.\n\n(cherry picked from commit b059dd4882fd759e4762cc11c019be4b68fb74c1)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d275677e240cca469a4cec3dc7238e3f18b3f7e9",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void updateTimelineCollectorContext(\n       ApplicationId appId, TimelineCollector collector)\n       throws YarnException, IOException {\n     GetTimelineCollectorContextRequest request \u003d\n         GetTimelineCollectorContextRequest.newInstance(appId);\n     LOG.info(\"Get timeline collector context for \" + appId);\n     GetTimelineCollectorContextResponse response \u003d\n-        nmCollectorService.getTimelineCollectorContext(request);\n+        getNMCollectorService().getTimelineCollectorContext(request);\n     String userId \u003d response.getUserId();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       collector.getTimelineEntityContext().setUserId(userId);\n     }\n     String flowName \u003d response.getFlowName();\n     if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n       collector.getTimelineEntityContext().setFlowName(flowName);\n     }\n     String flowVersion \u003d response.getFlowVersion();\n     if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n       collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n     }\n     long flowRunId \u003d response.getFlowRunId();\n     if (flowRunId !\u003d 0L) {\n       collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateTimelineCollectorContext(\n      ApplicationId appId, TimelineCollector collector)\n      throws YarnException, IOException {\n    GetTimelineCollectorContextRequest request \u003d\n        GetTimelineCollectorContextRequest.newInstance(appId);\n    LOG.info(\"Get timeline collector context for \" + appId);\n    GetTimelineCollectorContextResponse response \u003d\n        getNMCollectorService().getTimelineCollectorContext(request);\n    String userId \u003d response.getUserId();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    String flowName \u003d response.getFlowName();\n    if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n      collector.getTimelineEntityContext().setFlowName(flowName);\n    }\n    String flowVersion \u003d response.getFlowVersion();\n    if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n      collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n    }\n    long flowRunId \u003d response.getFlowRunId();\n    if (flowRunId !\u003d 0L) {\n      collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-3390. Reuse TimelineCollectorManager for RM (Zhijie Shen via sjlee)\n\n(cherry picked from commit 58221188811e0f61d842dac89e1f4ad4fd8aa182)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void updateTimelineCollectorContext(\n      ApplicationId appId, TimelineCollector collector)\n      throws YarnException, IOException {\n    GetTimelineCollectorContextRequest request \u003d\n        GetTimelineCollectorContextRequest.newInstance(appId);\n    LOG.info(\"Get timeline collector context for \" + appId);\n    GetTimelineCollectorContextResponse response \u003d\n        nmCollectorService.getTimelineCollectorContext(request);\n    String userId \u003d response.getUserId();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    String flowName \u003d response.getFlowName();\n    if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n      collector.getTimelineEntityContext().setFlowName(flowName);\n    }\n    String flowVersion \u003d response.getFlowVersion();\n    if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n      collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n    }\n    long flowRunId \u003d response.getFlowRunId();\n    if (flowRunId !\u003d 0L) {\n      collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
        "oldMethodName": "updateTimelineCollectorContext",
        "newMethodName": "updateTimelineCollectorContext"
      }
    },
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3391. Clearly define flow ID/ flow run / flow version in API and storage. Contributed by Zhijie Shen\n\n(cherry picked from commit 68c6232f8423e55b4d152ef3d1d66aeb2d6a555e)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "42e49399cecea39637434287948ba4c00ee805d4",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   private void updateTimelineCollectorContext(\n       ApplicationId appId, TimelineCollector collector)\n       throws YarnException, IOException {\n     GetTimelineCollectorContextRequest request \u003d\n         GetTimelineCollectorContextRequest.newInstance(appId);\n     LOG.info(\"Get timeline collector context for \" + appId);\n     GetTimelineCollectorContextResponse response \u003d\n         nmCollectorService.getTimelineCollectorContext(request);\n     String userId \u003d response.getUserId();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       collector.getTimelineEntityContext().setUserId(userId);\n     }\n-    String flowId \u003d response.getFlowId();\n-    if (flowId !\u003d null \u0026\u0026 !flowId.isEmpty()) {\n-      collector.getTimelineEntityContext().setFlowId(flowId);\n+    String flowName \u003d response.getFlowName();\n+    if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n+      collector.getTimelineEntityContext().setFlowName(flowName);\n     }\n-    String flowRunId \u003d response.getFlowRunId();\n-    if (flowRunId !\u003d null \u0026\u0026 !flowRunId.isEmpty()) {\n+    String flowVersion \u003d response.getFlowVersion();\n+    if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n+      collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n+    }\n+    long flowRunId \u003d response.getFlowRunId();\n+    if (flowRunId !\u003d 0L) {\n       collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateTimelineCollectorContext(\n      ApplicationId appId, TimelineCollector collector)\n      throws YarnException, IOException {\n    GetTimelineCollectorContextRequest request \u003d\n        GetTimelineCollectorContextRequest.newInstance(appId);\n    LOG.info(\"Get timeline collector context for \" + appId);\n    GetTimelineCollectorContextResponse response \u003d\n        nmCollectorService.getTimelineCollectorContext(request);\n    String userId \u003d response.getUserId();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    String flowName \u003d response.getFlowName();\n    if (flowName !\u003d null \u0026\u0026 !flowName.isEmpty()) {\n      collector.getTimelineEntityContext().setFlowName(flowName);\n    }\n    String flowVersion \u003d response.getFlowVersion();\n    if (flowVersion !\u003d null \u0026\u0026 !flowVersion.isEmpty()) {\n      collector.getTimelineEntityContext().setFlowVersion(flowVersion);\n    }\n    long flowRunId \u003d response.getFlowRunId();\n    if (flowRunId !\u003d 0L) {\n      collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3040. Make putEntities operation be aware of the app\u0027s context. Contributed by Zhijie Shen\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,21 @@\n+  private void updateTimelineCollectorContext(\n+      ApplicationId appId, TimelineCollector collector)\n+      throws YarnException, IOException {\n+    GetTimelineCollectorContextRequest request \u003d\n+        GetTimelineCollectorContextRequest.newInstance(appId);\n+    LOG.info(\"Get timeline collector context for \" + appId);\n+    GetTimelineCollectorContextResponse response \u003d\n+        nmCollectorService.getTimelineCollectorContext(request);\n+    String userId \u003d response.getUserId();\n+    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n+      collector.getTimelineEntityContext().setUserId(userId);\n+    }\n+    String flowId \u003d response.getFlowId();\n+    if (flowId !\u003d null \u0026\u0026 !flowId.isEmpty()) {\n+      collector.getTimelineEntityContext().setFlowId(flowId);\n+    }\n+    String flowRunId \u003d response.getFlowRunId();\n+    if (flowRunId !\u003d null \u0026\u0026 !flowRunId.isEmpty()) {\n+      collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateTimelineCollectorContext(\n      ApplicationId appId, TimelineCollector collector)\n      throws YarnException, IOException {\n    GetTimelineCollectorContextRequest request \u003d\n        GetTimelineCollectorContextRequest.newInstance(appId);\n    LOG.info(\"Get timeline collector context for \" + appId);\n    GetTimelineCollectorContextResponse response \u003d\n        nmCollectorService.getTimelineCollectorContext(request);\n    String userId \u003d response.getUserId();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    String flowId \u003d response.getFlowId();\n    if (flowId !\u003d null \u0026\u0026 !flowId.isEmpty()) {\n      collector.getTimelineEntityContext().setFlowId(flowId);\n    }\n    String flowRunId \u003d response.getFlowRunId();\n    if (flowRunId !\u003d null \u0026\u0026 !flowRunId.isEmpty()) {\n      collector.getTimelineEntityContext().setFlowRunId(flowRunId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java"
    }
  }
}