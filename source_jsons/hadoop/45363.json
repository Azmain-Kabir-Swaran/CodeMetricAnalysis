{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMClientUtils.java",
  "functionName": "removeFromOutstandingSchedulingRequests",
  "functionId": "removeFromOutstandingSchedulingRequests___containers-Collection__Container____outstandingSchedRequests-Map__Set__String__,List__SchedulingRequest____",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/AMRMClientUtils.java",
  "functionStartLine": 193,
  "functionEndLine": 223,
  "numCommitsSeen": 5,
  "timeTaken": 1057,
  "changeHistory": [
    "176bb3f812e49b0fe3abddf54eebfc7219b5d718",
    "3159bffce23abf35754da2d7d51de7d8c2631ae3"
  ],
  "changeHistoryShort": {
    "176bb3f812e49b0fe3abddf54eebfc7219b5d718": "Ybodychange",
    "3159bffce23abf35754da2d7d51de7d8c2631ae3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "176bb3f812e49b0fe3abddf54eebfc7219b5d718": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8984. AMRMClient#OutstandingSchedRequests leaks when AllocationTags is null or empty. Contributed by Yang Wang.\n",
      "commitDate": "22/11/18 12:52 AM",
      "commitName": "176bb3f812e49b0fe3abddf54eebfc7219b5d718",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "24/09/18 11:37 AM",
      "commitNameOld": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 58.59,
      "commitsBetweenForRepo": 522,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n   public static void removeFromOutstandingSchedulingRequests(\n       Collection\u003cContainer\u003e containers,\n       Map\u003cSet\u003cString\u003e, List\u003cSchedulingRequest\u003e\u003e outstandingSchedRequests) {\n     if (containers \u003d\u003d null || containers.isEmpty()) {\n       return;\n     }\n     for (Container container : containers) {\n-      if (container.getAllocationTags() !\u003d null\n-          \u0026\u0026 !container.getAllocationTags().isEmpty()) {\n+      if (container.getAllocationTags() !\u003d null) {\n         List\u003cSchedulingRequest\u003e schedReqs \u003d\n             outstandingSchedRequests.get(container.getAllocationTags());\n         if (schedReqs !\u003d null \u0026\u0026 !schedReqs.isEmpty()) {\n           Iterator\u003cSchedulingRequest\u003e iter \u003d schedReqs.iterator();\n           while (iter.hasNext()) {\n             SchedulingRequest schedReq \u003d iter.next();\n             if (schedReq.getPriority().equals(container.getPriority())\n                 \u0026\u0026 schedReq.getAllocationRequestId() \u003d\u003d container\n                     .getAllocationRequestId()) {\n               int numAllocations \u003d\n                   schedReq.getResourceSizing().getNumAllocations();\n               numAllocations--;\n               if (numAllocations \u003d\u003d 0) {\n                 iter.remove();\n               } else {\n                 schedReq.getResourceSizing().setNumAllocations(numAllocations);\n               }\n             }\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void removeFromOutstandingSchedulingRequests(\n      Collection\u003cContainer\u003e containers,\n      Map\u003cSet\u003cString\u003e, List\u003cSchedulingRequest\u003e\u003e outstandingSchedRequests) {\n    if (containers \u003d\u003d null || containers.isEmpty()) {\n      return;\n    }\n    for (Container container : containers) {\n      if (container.getAllocationTags() !\u003d null) {\n        List\u003cSchedulingRequest\u003e schedReqs \u003d\n            outstandingSchedRequests.get(container.getAllocationTags());\n        if (schedReqs !\u003d null \u0026\u0026 !schedReqs.isEmpty()) {\n          Iterator\u003cSchedulingRequest\u003e iter \u003d schedReqs.iterator();\n          while (iter.hasNext()) {\n            SchedulingRequest schedReq \u003d iter.next();\n            if (schedReq.getPriority().equals(container.getPriority())\n                \u0026\u0026 schedReq.getAllocationRequestId() \u003d\u003d container\n                    .getAllocationRequestId()) {\n              int numAllocations \u003d\n                  schedReq.getResourceSizing().getNumAllocations();\n              numAllocations--;\n              if (numAllocations \u003d\u003d 0) {\n                iter.remove();\n              } else {\n                schedReq.getResourceSizing().setNumAllocations(numAllocations);\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/AMRMClientUtils.java",
      "extendedDetails": {}
    },
    "3159bffce23abf35754da2d7d51de7d8c2631ae3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7900. [AMRMProxy] AMRMClientRelayer for stateful FederationInterceptor. (Botong Huang via asuresh)\n",
      "commitDate": "17/05/18 8:00 PM",
      "commitName": "3159bffce23abf35754da2d7d51de7d8c2631ae3",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,32 @@\n+  public static void removeFromOutstandingSchedulingRequests(\n+      Collection\u003cContainer\u003e containers,\n+      Map\u003cSet\u003cString\u003e, List\u003cSchedulingRequest\u003e\u003e outstandingSchedRequests) {\n+    if (containers \u003d\u003d null || containers.isEmpty()) {\n+      return;\n+    }\n+    for (Container container : containers) {\n+      if (container.getAllocationTags() !\u003d null\n+          \u0026\u0026 !container.getAllocationTags().isEmpty()) {\n+        List\u003cSchedulingRequest\u003e schedReqs \u003d\n+            outstandingSchedRequests.get(container.getAllocationTags());\n+        if (schedReqs !\u003d null \u0026\u0026 !schedReqs.isEmpty()) {\n+          Iterator\u003cSchedulingRequest\u003e iter \u003d schedReqs.iterator();\n+          while (iter.hasNext()) {\n+            SchedulingRequest schedReq \u003d iter.next();\n+            if (schedReq.getPriority().equals(container.getPriority())\n+                \u0026\u0026 schedReq.getAllocationRequestId() \u003d\u003d container\n+                    .getAllocationRequestId()) {\n+              int numAllocations \u003d\n+                  schedReq.getResourceSizing().getNumAllocations();\n+              numAllocations--;\n+              if (numAllocations \u003d\u003d 0) {\n+                iter.remove();\n+              } else {\n+                schedReq.getResourceSizing().setNumAllocations(numAllocations);\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void removeFromOutstandingSchedulingRequests(\n      Collection\u003cContainer\u003e containers,\n      Map\u003cSet\u003cString\u003e, List\u003cSchedulingRequest\u003e\u003e outstandingSchedRequests) {\n    if (containers \u003d\u003d null || containers.isEmpty()) {\n      return;\n    }\n    for (Container container : containers) {\n      if (container.getAllocationTags() !\u003d null\n          \u0026\u0026 !container.getAllocationTags().isEmpty()) {\n        List\u003cSchedulingRequest\u003e schedReqs \u003d\n            outstandingSchedRequests.get(container.getAllocationTags());\n        if (schedReqs !\u003d null \u0026\u0026 !schedReqs.isEmpty()) {\n          Iterator\u003cSchedulingRequest\u003e iter \u003d schedReqs.iterator();\n          while (iter.hasNext()) {\n            SchedulingRequest schedReq \u003d iter.next();\n            if (schedReq.getPriority().equals(container.getPriority())\n                \u0026\u0026 schedReq.getAllocationRequestId() \u003d\u003d container\n                    .getAllocationRequestId()) {\n              int numAllocations \u003d\n                  schedReq.getResourceSizing().getNumAllocations();\n              numAllocations--;\n              if (numAllocations \u003d\u003d 0) {\n                iter.remove();\n              } else {\n                schedReq.getResourceSizing().setNumAllocations(numAllocations);\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/AMRMClientUtils.java"
    }
  }
}