{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerId.java",
  "functionName": "fromString",
  "functionId": "fromString___containerIdStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerId.java",
  "functionStartLine": 189,
  "functionEndLine": 244,
  "numCommitsSeen": 17,
  "timeTaken": 1765,
  "changeHistory": [
    "24853bf32a045b8f029fb136edca2af03836c8d5",
    "7bc492adab90c4533c20d48c004e92cb917cd199",
    "43cd07b408c6613d2c9aa89203cfa3110d830538",
    "eb6ce5e97c6a379caf9de0b34cc7770c4447bb1a",
    "3122daa80261b466e309e88d88d1e2c030525e3f",
    "0974f434c47ffbf4b77a8478937fd99106c8ddbd"
  ],
  "changeHistoryShort": {
    "24853bf32a045b8f029fb136edca2af03836c8d5": "Ybodychange",
    "7bc492adab90c4533c20d48c004e92cb917cd199": "Ybodychange",
    "43cd07b408c6613d2c9aa89203cfa3110d830538": "Ybodychange",
    "eb6ce5e97c6a379caf9de0b34cc7770c4447bb1a": "Ybodychange",
    "3122daa80261b466e309e88d88d1e2c030525e3f": "Ybodychange",
    "0974f434c47ffbf4b77a8478937fd99106c8ddbd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "24853bf32a045b8f029fb136edca2af03836c8d5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6768. Improve performance of yarn api record toString and fromString. Contributed by Jonathan Eagles\n",
      "commitDate": "24/07/17 8:19 AM",
      "commitName": "24853bf32a045b8f029fb136edca2af03836c8d5",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 404.72,
      "commitsBetweenForRepo": 2550,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,56 @@\n   public static ContainerId fromString(String containerIdStr) {\n-    Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n-    if (!it.next().equals(CONTAINER_PREFIX)) {\n+    if (!containerIdStr.startsWith(CONTAINER_PREFIX)) {\n       throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n           + containerIdStr);\n     }\n     try {\n-      String epochOrClusterTimestampStr \u003d it.next();\n+      int pos1 \u003d CONTAINER_PREFIX.length() - 1;\n+\n       long epoch \u003d 0;\n-      ApplicationAttemptId appAttemptID \u003d null;\n-      if (epochOrClusterTimestampStr.startsWith(EPOCH_PREFIX)) {\n-        String epochStr \u003d epochOrClusterTimestampStr;\n-        epoch \u003d Integer.parseInt(epochStr.substring(EPOCH_PREFIX.length()));\n-        appAttemptID \u003d toApplicationAttemptId(it);\n-      } else {\n-        String clusterTimestampStr \u003d epochOrClusterTimestampStr;\n-        long clusterTimestamp \u003d Long.parseLong(clusterTimestampStr);\n-        appAttemptID \u003d toApplicationAttemptId(clusterTimestamp, it);\n+      if (containerIdStr.regionMatches(pos1 + 1, EPOCH_PREFIX, 0,\n+            EPOCH_PREFIX.length())) {\n+        int pos2 \u003d containerIdStr.indexOf(\u0027_\u0027, pos1 + 1);\n+        if (pos2 \u003c 0) {\n+          throw new IllegalArgumentException(\"Invalid ContainerId: \"\n+              + containerIdStr);\n+        }\n+        String epochStr \u003d containerIdStr.substring(\n+            pos1 + 1 + EPOCH_PREFIX.length(), pos2);\n+        epoch \u003d Integer.parseInt(epochStr);\n+        // rewind the current position\n+        pos1 \u003d pos2;\n       }\n-      long id \u003d Long.parseLong(it.next());\n+      int pos2 \u003d containerIdStr.indexOf(\u0027_\u0027, pos1 + 1);\n+      if (pos2 \u003c 0) {\n+        throw new IllegalArgumentException(\"Invalid ContainerId: \"\n+            + containerIdStr);\n+      }\n+      long clusterTimestamp \u003d Long.parseLong(\n+        containerIdStr.substring(pos1 + 1, pos2));\n+\n+      int pos3 \u003d containerIdStr.indexOf(\u0027_\u0027, pos2 + 1);\n+      if (pos3 \u003c 0) {\n+        throw new IllegalArgumentException(\"Invalid ContainerId: \"\n+            + containerIdStr);\n+      }\n+      int appId \u003d Integer.parseInt(containerIdStr.substring(pos2 + 1, pos3));\n+      ApplicationId applicationId \u003d ApplicationId.newInstance(clusterTimestamp,\n+          appId);\n+      int pos4 \u003d containerIdStr.indexOf(\u0027_\u0027, pos3 + 1);\n+      if (pos4 \u003c 0) {\n+        throw new IllegalArgumentException(\"Invalid ContainerId: \"\n+            + containerIdStr);\n+      }\n+      int attemptId \u003d Integer.parseInt(\n+          containerIdStr.substring(pos3 + 1, pos4));\n+      ApplicationAttemptId appAttemptId \u003d\n+        ApplicationAttemptId.newInstance(applicationId, attemptId);\n+      long id \u003d Long.parseLong(containerIdStr.substring(pos4 + 1));\n       long cid \u003d (epoch \u003c\u003c 40) | id;\n-      ContainerId containerId \u003d ContainerId.newContainerId(appAttemptID, cid);\n+      ContainerId containerId \u003d ContainerId.newContainerId(appAttemptId, cid);\n       return containerId;\n     } catch (NumberFormatException n) {\n       throw new IllegalArgumentException(\"Invalid ContainerId: \"\n           + containerIdStr, n);\n-    } catch (NoSuchElementException e) {\n-      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n-          + containerIdStr, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ContainerId fromString(String containerIdStr) {\n    if (!containerIdStr.startsWith(CONTAINER_PREFIX)) {\n      throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n          + containerIdStr);\n    }\n    try {\n      int pos1 \u003d CONTAINER_PREFIX.length() - 1;\n\n      long epoch \u003d 0;\n      if (containerIdStr.regionMatches(pos1 + 1, EPOCH_PREFIX, 0,\n            EPOCH_PREFIX.length())) {\n        int pos2 \u003d containerIdStr.indexOf(\u0027_\u0027, pos1 + 1);\n        if (pos2 \u003c 0) {\n          throw new IllegalArgumentException(\"Invalid ContainerId: \"\n              + containerIdStr);\n        }\n        String epochStr \u003d containerIdStr.substring(\n            pos1 + 1 + EPOCH_PREFIX.length(), pos2);\n        epoch \u003d Integer.parseInt(epochStr);\n        // rewind the current position\n        pos1 \u003d pos2;\n      }\n      int pos2 \u003d containerIdStr.indexOf(\u0027_\u0027, pos1 + 1);\n      if (pos2 \u003c 0) {\n        throw new IllegalArgumentException(\"Invalid ContainerId: \"\n            + containerIdStr);\n      }\n      long clusterTimestamp \u003d Long.parseLong(\n        containerIdStr.substring(pos1 + 1, pos2));\n\n      int pos3 \u003d containerIdStr.indexOf(\u0027_\u0027, pos2 + 1);\n      if (pos3 \u003c 0) {\n        throw new IllegalArgumentException(\"Invalid ContainerId: \"\n            + containerIdStr);\n      }\n      int appId \u003d Integer.parseInt(containerIdStr.substring(pos2 + 1, pos3));\n      ApplicationId applicationId \u003d ApplicationId.newInstance(clusterTimestamp,\n          appId);\n      int pos4 \u003d containerIdStr.indexOf(\u0027_\u0027, pos3 + 1);\n      if (pos4 \u003c 0) {\n        throw new IllegalArgumentException(\"Invalid ContainerId: \"\n            + containerIdStr);\n      }\n      int attemptId \u003d Integer.parseInt(\n          containerIdStr.substring(pos3 + 1, pos4));\n      ApplicationAttemptId appAttemptId \u003d\n        ApplicationAttemptId.newInstance(applicationId, attemptId);\n      long id \u003d Long.parseLong(containerIdStr.substring(pos4 + 1));\n      long cid \u003d (epoch \u003c\u003c 40) | id;\n      ContainerId containerId \u003d ContainerId.newContainerId(appAttemptId, cid);\n      return containerId;\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n          + containerIdStr, n);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerId.java",
      "extendedDetails": {}
    },
    "7bc492adab90c4533c20d48c004e92cb917cd199": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3157. Refactor the exception handling in ConverterUtils#to*Id. Contributed by Bibin A Chundatt.\n",
      "commitDate": "12/02/15 6:48 AM",
      "commitName": "7bc492adab90c4533c20d48c004e92cb917cd199",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "09/11/14 2:57 PM",
      "commitNameOld": "43cd07b408c6613d2c9aa89203cfa3110d830538",
      "commitAuthorOld": "Arun C. Murthy",
      "daysBetweenCommits": 94.66,
      "commitsBetweenForRepo": 670,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   public static ContainerId fromString(String containerIdStr) {\n     Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n     if (!it.next().equals(CONTAINER_PREFIX)) {\n       throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n           + containerIdStr);\n     }\n     try {\n       String epochOrClusterTimestampStr \u003d it.next();\n       long epoch \u003d 0;\n       ApplicationAttemptId appAttemptID \u003d null;\n       if (epochOrClusterTimestampStr.startsWith(EPOCH_PREFIX)) {\n         String epochStr \u003d epochOrClusterTimestampStr;\n         epoch \u003d Integer.parseInt(epochStr.substring(EPOCH_PREFIX.length()));\n         appAttemptID \u003d toApplicationAttemptId(it);\n       } else {\n         String clusterTimestampStr \u003d epochOrClusterTimestampStr;\n         long clusterTimestamp \u003d Long.parseLong(clusterTimestampStr);\n         appAttemptID \u003d toApplicationAttemptId(clusterTimestamp, it);\n       }\n       long id \u003d Long.parseLong(it.next());\n       long cid \u003d (epoch \u003c\u003c 40) | id;\n       ContainerId containerId \u003d ContainerId.newContainerId(appAttemptID, cid);\n       return containerId;\n     } catch (NumberFormatException n) {\n       throw new IllegalArgumentException(\"Invalid ContainerId: \"\n           + containerIdStr, n);\n+    } catch (NoSuchElementException e) {\n+      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n+          + containerIdStr, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ContainerId fromString(String containerIdStr) {\n    Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n    if (!it.next().equals(CONTAINER_PREFIX)) {\n      throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n          + containerIdStr);\n    }\n    try {\n      String epochOrClusterTimestampStr \u003d it.next();\n      long epoch \u003d 0;\n      ApplicationAttemptId appAttemptID \u003d null;\n      if (epochOrClusterTimestampStr.startsWith(EPOCH_PREFIX)) {\n        String epochStr \u003d epochOrClusterTimestampStr;\n        epoch \u003d Integer.parseInt(epochStr.substring(EPOCH_PREFIX.length()));\n        appAttemptID \u003d toApplicationAttemptId(it);\n      } else {\n        String clusterTimestampStr \u003d epochOrClusterTimestampStr;\n        long clusterTimestamp \u003d Long.parseLong(clusterTimestampStr);\n        appAttemptID \u003d toApplicationAttemptId(clusterTimestamp, it);\n      }\n      long id \u003d Long.parseLong(it.next());\n      long cid \u003d (epoch \u003c\u003c 40) | id;\n      ContainerId containerId \u003d ContainerId.newContainerId(appAttemptID, cid);\n      return containerId;\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n          + containerIdStr, n);\n    } catch (NoSuchElementException e) {\n      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n          + containerIdStr, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerId.java",
      "extendedDetails": {}
    },
    "43cd07b408c6613d2c9aa89203cfa3110d830538": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2830. Add backwords compatible ContainerId.newInstance constructor. Contributed by Jonathan Eagles.\n",
      "commitDate": "09/11/14 2:57 PM",
      "commitName": "43cd07b408c6613d2c9aa89203cfa3110d830538",
      "commitAuthor": "Arun C. Murthy",
      "commitDateOld": "15/10/14 3:22 PM",
      "commitNameOld": "0af1a2b5bc1469ba22edb63cd58f9b436b1dc4d3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 25.02,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public static ContainerId fromString(String containerIdStr) {\n     Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n     if (!it.next().equals(CONTAINER_PREFIX)) {\n       throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n           + containerIdStr);\n     }\n     try {\n       String epochOrClusterTimestampStr \u003d it.next();\n       long epoch \u003d 0;\n       ApplicationAttemptId appAttemptID \u003d null;\n       if (epochOrClusterTimestampStr.startsWith(EPOCH_PREFIX)) {\n         String epochStr \u003d epochOrClusterTimestampStr;\n         epoch \u003d Integer.parseInt(epochStr.substring(EPOCH_PREFIX.length()));\n         appAttemptID \u003d toApplicationAttemptId(it);\n       } else {\n         String clusterTimestampStr \u003d epochOrClusterTimestampStr;\n         long clusterTimestamp \u003d Long.parseLong(clusterTimestampStr);\n         appAttemptID \u003d toApplicationAttemptId(clusterTimestamp, it);\n       }\n       long id \u003d Long.parseLong(it.next());\n       long cid \u003d (epoch \u003c\u003c 40) | id;\n-      ContainerId containerId \u003d ContainerId.newInstance(appAttemptID, cid);\n+      ContainerId containerId \u003d ContainerId.newContainerId(appAttemptID, cid);\n       return containerId;\n     } catch (NumberFormatException n) {\n       throw new IllegalArgumentException(\"Invalid ContainerId: \"\n           + containerIdStr, n);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ContainerId fromString(String containerIdStr) {\n    Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n    if (!it.next().equals(CONTAINER_PREFIX)) {\n      throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n          + containerIdStr);\n    }\n    try {\n      String epochOrClusterTimestampStr \u003d it.next();\n      long epoch \u003d 0;\n      ApplicationAttemptId appAttemptID \u003d null;\n      if (epochOrClusterTimestampStr.startsWith(EPOCH_PREFIX)) {\n        String epochStr \u003d epochOrClusterTimestampStr;\n        epoch \u003d Integer.parseInt(epochStr.substring(EPOCH_PREFIX.length()));\n        appAttemptID \u003d toApplicationAttemptId(it);\n      } else {\n        String clusterTimestampStr \u003d epochOrClusterTimestampStr;\n        long clusterTimestamp \u003d Long.parseLong(clusterTimestampStr);\n        appAttemptID \u003d toApplicationAttemptId(clusterTimestamp, it);\n      }\n      long id \u003d Long.parseLong(it.next());\n      long cid \u003d (epoch \u003c\u003c 40) | id;\n      ContainerId containerId \u003d ContainerId.newContainerId(appAttemptID, cid);\n      return containerId;\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n          + containerIdStr, n);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerId.java",
      "extendedDetails": {}
    },
    "eb6ce5e97c6a379caf9de0b34cc7770c4447bb1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2562. Changed ContainerId#toString() to be more readable. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "03/10/14 11:04 AM",
      "commitName": "eb6ce5e97c6a379caf9de0b34cc7770c4447bb1a",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/09/14 10:33 AM",
      "commitNameOld": "3122daa80261b466e309e88d88d1e2c030525e3f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 21.02,
      "commitsBetweenForRepo": 246,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,28 @@\n   public static ContainerId fromString(String containerIdStr) {\n     Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n     if (!it.next().equals(CONTAINER_PREFIX)) {\n       throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n           + containerIdStr);\n     }\n     try {\n-      ApplicationAttemptId appAttemptID \u003d toApplicationAttemptId(it);\n-      long id \u003d Long.parseLong(it.next());\n+      String epochOrClusterTimestampStr \u003d it.next();\n       long epoch \u003d 0;\n-      if (it.hasNext()) {\n-        epoch \u003d Integer.parseInt(it.next());\n+      ApplicationAttemptId appAttemptID \u003d null;\n+      if (epochOrClusterTimestampStr.startsWith(EPOCH_PREFIX)) {\n+        String epochStr \u003d epochOrClusterTimestampStr;\n+        epoch \u003d Integer.parseInt(epochStr.substring(EPOCH_PREFIX.length()));\n+        appAttemptID \u003d toApplicationAttemptId(it);\n+      } else {\n+        String clusterTimestampStr \u003d epochOrClusterTimestampStr;\n+        long clusterTimestamp \u003d Long.parseLong(clusterTimestampStr);\n+        appAttemptID \u003d toApplicationAttemptId(clusterTimestamp, it);\n       }\n+      long id \u003d Long.parseLong(it.next());\n       long cid \u003d (epoch \u003c\u003c 40) | id;\n       ContainerId containerId \u003d ContainerId.newInstance(appAttemptID, cid);\n       return containerId;\n     } catch (NumberFormatException n) {\n       throw new IllegalArgumentException(\"Invalid ContainerId: \"\n           + containerIdStr, n);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ContainerId fromString(String containerIdStr) {\n    Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n    if (!it.next().equals(CONTAINER_PREFIX)) {\n      throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n          + containerIdStr);\n    }\n    try {\n      String epochOrClusterTimestampStr \u003d it.next();\n      long epoch \u003d 0;\n      ApplicationAttemptId appAttemptID \u003d null;\n      if (epochOrClusterTimestampStr.startsWith(EPOCH_PREFIX)) {\n        String epochStr \u003d epochOrClusterTimestampStr;\n        epoch \u003d Integer.parseInt(epochStr.substring(EPOCH_PREFIX.length()));\n        appAttemptID \u003d toApplicationAttemptId(it);\n      } else {\n        String clusterTimestampStr \u003d epochOrClusterTimestampStr;\n        long clusterTimestamp \u003d Long.parseLong(clusterTimestampStr);\n        appAttemptID \u003d toApplicationAttemptId(clusterTimestamp, it);\n      }\n      long id \u003d Long.parseLong(it.next());\n      long cid \u003d (epoch \u003c\u003c 40) | id;\n      ContainerId containerId \u003d ContainerId.newInstance(appAttemptID, cid);\n      return containerId;\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n          + containerIdStr, n);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerId.java",
      "extendedDetails": {}
    },
    "3122daa80261b466e309e88d88d1e2c030525e3f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2229. Changed the integer field of ContainerId to be long type. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "12/09/14 10:33 AM",
      "commitName": "3122daa80261b466e309e88d88d1e2c030525e3f",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/09/14 6:29 PM",
      "commitNameOld": "0974f434c47ffbf4b77a8478937fd99106c8ddbd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 4.67,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public static ContainerId fromString(String containerIdStr) {\n     Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n     if (!it.next().equals(CONTAINER_PREFIX)) {\n       throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n           + containerIdStr);\n     }\n     try {\n       ApplicationAttemptId appAttemptID \u003d toApplicationAttemptId(it);\n-      int id \u003d Integer.parseInt(it.next());\n-      int epoch \u003d 0;\n+      long id \u003d Long.parseLong(it.next());\n+      long epoch \u003d 0;\n       if (it.hasNext()) {\n         epoch \u003d Integer.parseInt(it.next());\n       }\n-      int cid \u003d (epoch \u003c\u003c 22) | id;\n+      long cid \u003d (epoch \u003c\u003c 40) | id;\n       ContainerId containerId \u003d ContainerId.newInstance(appAttemptID, cid);\n       return containerId;\n     } catch (NumberFormatException n) {\n       throw new IllegalArgumentException(\"Invalid ContainerId: \"\n           + containerIdStr, n);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ContainerId fromString(String containerIdStr) {\n    Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n    if (!it.next().equals(CONTAINER_PREFIX)) {\n      throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n          + containerIdStr);\n    }\n    try {\n      ApplicationAttemptId appAttemptID \u003d toApplicationAttemptId(it);\n      long id \u003d Long.parseLong(it.next());\n      long epoch \u003d 0;\n      if (it.hasNext()) {\n        epoch \u003d Integer.parseInt(it.next());\n      }\n      long cid \u003d (epoch \u003c\u003c 40) | id;\n      ContainerId containerId \u003d ContainerId.newInstance(appAttemptID, cid);\n      return containerId;\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n          + containerIdStr, n);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerId.java",
      "extendedDetails": {}
    },
    "0974f434c47ffbf4b77a8478937fd99106c8ddbd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2515. Updated ConverterUtils#toContainerId to parse epoch. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "07/09/14 6:29 PM",
      "commitName": "0974f434c47ffbf4b77a8478937fd99106c8ddbd",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,21 @@\n+  public static ContainerId fromString(String containerIdStr) {\n+    Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n+    if (!it.next().equals(CONTAINER_PREFIX)) {\n+      throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n+          + containerIdStr);\n+    }\n+    try {\n+      ApplicationAttemptId appAttemptID \u003d toApplicationAttemptId(it);\n+      int id \u003d Integer.parseInt(it.next());\n+      int epoch \u003d 0;\n+      if (it.hasNext()) {\n+        epoch \u003d Integer.parseInt(it.next());\n+      }\n+      int cid \u003d (epoch \u003c\u003c 22) | id;\n+      ContainerId containerId \u003d ContainerId.newInstance(appAttemptID, cid);\n+      return containerId;\n+    } catch (NumberFormatException n) {\n+      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n+          + containerIdStr, n);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static ContainerId fromString(String containerIdStr) {\n    Iterator\u003cString\u003e it \u003d _SPLITTER.split(containerIdStr).iterator();\n    if (!it.next().equals(CONTAINER_PREFIX)) {\n      throw new IllegalArgumentException(\"Invalid ContainerId prefix: \"\n          + containerIdStr);\n    }\n    try {\n      ApplicationAttemptId appAttemptID \u003d toApplicationAttemptId(it);\n      int id \u003d Integer.parseInt(it.next());\n      int epoch \u003d 0;\n      if (it.hasNext()) {\n        epoch \u003d Integer.parseInt(it.next());\n      }\n      int cid \u003d (epoch \u003c\u003c 22) | id;\n      ContainerId containerId \u003d ContainerId.newInstance(appAttemptID, cid);\n      return containerId;\n    } catch (NumberFormatException n) {\n      throw new IllegalArgumentException(\"Invalid ContainerId: \"\n          + containerIdStr, n);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerId.java"
    }
  }
}