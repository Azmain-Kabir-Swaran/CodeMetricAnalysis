{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "handleExitCode",
  "functionId": "handleExitCode___e-ContainerExecutionException__container-Container__containerId-ContainerId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 600,
  "functionEndLine": 641,
  "numCommitsSeen": 84,
  "timeTaken": 2854,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "95372657fc25c02399b01793833021ccf88dada2",
    "7d623343879ce9a8f8e64601024d018efc02794c",
    "c467f311d0c7155c09052d93fac12045af925583"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "7d623343879ce9a8f8e64601024d018efc02794c": "Ybodychange",
    "c467f311d0c7155c09052d93fac12045af925583": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private int handleExitCode(ContainerExecutionException e, Container container,\n       ContainerId containerId) throws ConfigurationException {\n     int exitCode \u003d e.getExitCode();\n-    LOG.warn(\"Exit code from container \" + containerId + \" is : \" + exitCode);\n+    LOG.warn(\"Exit code from container {} is : {}\", containerId, exitCode);\n     // 143 (SIGTERM) and 137 (SIGKILL) exit codes means the container was\n     // terminated/killed forcefully. In all other cases, log the\n     // output\n     if (exitCode !\u003d ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode()\n         \u0026\u0026 exitCode !\u003d ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\n-      LOG.warn(\"Exception from container-launch with container ID: \"\n-          + containerId + \" and exit code: \" + exitCode, e);\n+      LOG.warn(\"Exception from container-launch with container ID: {} \"\n+          + \"and exit code: {}\", containerId, exitCode, e);\n \n       StringBuilder builder \u003d new StringBuilder();\n       builder.append(\"Exception from container-launch.\\n\")\n           .append(\"Container id: \" + containerId + \"\\n\")\n           .append(\"Exit code: \" + exitCode + \"\\n\")\n           .append(\"Exception message: \" + e.getMessage() + \"\\n\");\n       if (!Optional.fromNullable(e.getErrorOutput()).or(\"\").isEmpty()) {\n         builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\n       }\n       //Skip stack trace\n       String output \u003d e.getOutput();\n       if (output !\u003d null \u0026\u0026 !output.isEmpty()) {\n         builder.append(\"Shell output: \" + output + \"\\n\");\n       }\n       String diagnostics \u003d builder.toString();\n       logOutput(diagnostics);\n       container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n           diagnostics));\n       if (exitCode \u003d\u003d\n           ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() ||\n           exitCode \u003d\u003d\n               ExitCode.INVALID_CONFIG_FILE.getExitCode()) {\n         throw new ConfigurationException(\n             \"Linux Container Executor reached unrecoverable exception\", e);\n       }\n     } else {\n       container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n           \"Container killed on request. Exit code is \" + exitCode));\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int handleExitCode(ContainerExecutionException e, Container container,\n      ContainerId containerId) throws ConfigurationException {\n    int exitCode \u003d e.getExitCode();\n    LOG.warn(\"Exit code from container {} is : {}\", containerId, exitCode);\n    // 143 (SIGTERM) and 137 (SIGKILL) exit codes means the container was\n    // terminated/killed forcefully. In all other cases, log the\n    // output\n    if (exitCode !\u003d ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode()\n        \u0026\u0026 exitCode !\u003d ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\n      LOG.warn(\"Exception from container-launch with container ID: {} \"\n          + \"and exit code: {}\", containerId, exitCode, e);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"Exception from container-launch.\\n\")\n          .append(\"Container id: \" + containerId + \"\\n\")\n          .append(\"Exit code: \" + exitCode + \"\\n\")\n          .append(\"Exception message: \" + e.getMessage() + \"\\n\");\n      if (!Optional.fromNullable(e.getErrorOutput()).or(\"\").isEmpty()) {\n        builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\n      }\n      //Skip stack trace\n      String output \u003d e.getOutput();\n      if (output !\u003d null \u0026\u0026 !output.isEmpty()) {\n        builder.append(\"Shell output: \" + output + \"\\n\");\n      }\n      String diagnostics \u003d builder.toString();\n      logOutput(diagnostics);\n      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n          diagnostics));\n      if (exitCode \u003d\u003d\n          ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.INVALID_CONFIG_FILE.getExitCode()) {\n        throw new ConfigurationException(\n            \"Linux Container Executor reached unrecoverable exception\", e);\n      }\n    } else {\n      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n          \"Container killed on request. Exit code is \" + exitCode));\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "15/02/19 1:47 AM",
      "commitNameOld": "9385ec45d75109a2e6565faa10527cc56637bf5f",
      "commitAuthorOld": "Adam Antal",
      "daysBetweenCommits": 10.42,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private int handleExitCode(ContainerExecutionException e, Container container,\n       ContainerId containerId) throws ConfigurationException {\n     int exitCode \u003d e.getExitCode();\n     LOG.warn(\"Exit code from container \" + containerId + \" is : \" + exitCode);\n     // 143 (SIGTERM) and 137 (SIGKILL) exit codes means the container was\n     // terminated/killed forcefully. In all other cases, log the\n     // output\n     if (exitCode !\u003d ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode()\n         \u0026\u0026 exitCode !\u003d ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\n       LOG.warn(\"Exception from container-launch with container ID: \"\n           + containerId + \" and exit code: \" + exitCode, e);\n \n       StringBuilder builder \u003d new StringBuilder();\n-      builder.append(\"Exception from container-launch.\\n\");\n-      builder.append(\"Container id: \" + containerId + \"\\n\");\n-      builder.append(\"Exit code: \" + exitCode + \"\\n\");\n-      builder.append(\"Exception message: \" + e.getMessage() + \"\\n\");\n+      builder.append(\"Exception from container-launch.\\n\")\n+          .append(\"Container id: \" + containerId + \"\\n\")\n+          .append(\"Exit code: \" + exitCode + \"\\n\")\n+          .append(\"Exception message: \" + e.getMessage() + \"\\n\");\n       if (!Optional.fromNullable(e.getErrorOutput()).or(\"\").isEmpty()) {\n         builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\n       }\n       //Skip stack trace\n       String output \u003d e.getOutput();\n       if (output !\u003d null \u0026\u0026 !output.isEmpty()) {\n         builder.append(\"Shell output: \" + output + \"\\n\");\n       }\n       String diagnostics \u003d builder.toString();\n       logOutput(diagnostics);\n       container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n           diagnostics));\n       if (exitCode \u003d\u003d\n           ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() ||\n           exitCode \u003d\u003d\n               ExitCode.INVALID_CONFIG_FILE.getExitCode()) {\n         throw new ConfigurationException(\n             \"Linux Container Executor reached unrecoverable exception\", e);\n       }\n     } else {\n       container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n           \"Container killed on request. Exit code is \" + exitCode));\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int handleExitCode(ContainerExecutionException e, Container container,\n      ContainerId containerId) throws ConfigurationException {\n    int exitCode \u003d e.getExitCode();\n    LOG.warn(\"Exit code from container \" + containerId + \" is : \" + exitCode);\n    // 143 (SIGTERM) and 137 (SIGKILL) exit codes means the container was\n    // terminated/killed forcefully. In all other cases, log the\n    // output\n    if (exitCode !\u003d ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode()\n        \u0026\u0026 exitCode !\u003d ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\n      LOG.warn(\"Exception from container-launch with container ID: \"\n          + containerId + \" and exit code: \" + exitCode, e);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"Exception from container-launch.\\n\")\n          .append(\"Container id: \" + containerId + \"\\n\")\n          .append(\"Exit code: \" + exitCode + \"\\n\")\n          .append(\"Exception message: \" + e.getMessage() + \"\\n\");\n      if (!Optional.fromNullable(e.getErrorOutput()).or(\"\").isEmpty()) {\n        builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\n      }\n      //Skip stack trace\n      String output \u003d e.getOutput();\n      if (output !\u003d null \u0026\u0026 !output.isEmpty()) {\n        builder.append(\"Shell output: \" + output + \"\\n\");\n      }\n      String diagnostics \u003d builder.toString();\n      logOutput(diagnostics);\n      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n          diagnostics));\n      if (exitCode \u003d\u003d\n          ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.INVALID_CONFIG_FILE.getExitCode()) {\n        throw new ConfigurationException(\n            \"Linux Container Executor reached unrecoverable exception\", e);\n      }\n    } else {\n      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n          \"Container killed on request. Exit code is \" + exitCode));\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "7d623343879ce9a8f8e64601024d018efc02794c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8751. Reduce conditions that mark node manager as unhealthy.\n           Contributed by Craig Condit\n",
      "commitDate": "07/09/18 4:46 PM",
      "commitName": "7d623343879ce9a8f8e64601024d018efc02794c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/08/18 8:43 AM",
      "commitNameOld": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 36.34,
      "commitsBetweenForRepo": 289,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,42 @@\n   private int handleExitCode(ContainerExecutionException e, Container container,\n       ContainerId containerId) throws ConfigurationException {\n     int exitCode \u003d e.getExitCode();\n     LOG.warn(\"Exit code from container \" + containerId + \" is : \" + exitCode);\n     // 143 (SIGTERM) and 137 (SIGKILL) exit codes means the container was\n     // terminated/killed forcefully. In all other cases, log the\n     // output\n     if (exitCode !\u003d ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode()\n         \u0026\u0026 exitCode !\u003d ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\n       LOG.warn(\"Exception from container-launch with container ID: \"\n           + containerId + \" and exit code: \" + exitCode, e);\n \n       StringBuilder builder \u003d new StringBuilder();\n       builder.append(\"Exception from container-launch.\\n\");\n       builder.append(\"Container id: \" + containerId + \"\\n\");\n       builder.append(\"Exit code: \" + exitCode + \"\\n\");\n       builder.append(\"Exception message: \" + e.getMessage() + \"\\n\");\n       if (!Optional.fromNullable(e.getErrorOutput()).or(\"\").isEmpty()) {\n         builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\n       }\n       //Skip stack trace\n       String output \u003d e.getOutput();\n       if (output !\u003d null \u0026\u0026 !output.isEmpty()) {\n         builder.append(\"Shell output: \" + output + \"\\n\");\n       }\n       String diagnostics \u003d builder.toString();\n       logOutput(diagnostics);\n       container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n           diagnostics));\n       if (exitCode \u003d\u003d\n           ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() ||\n           exitCode \u003d\u003d\n-              ExitCode.INVALID_CONFIG_FILE.getExitCode() ||\n-          exitCode \u003d\u003d\n-              ExitCode.COULD_NOT_CREATE_SCRIPT_COPY.getExitCode() ||\n-          exitCode \u003d\u003d\n-              ExitCode.COULD_NOT_CREATE_CREDENTIALS_FILE.getExitCode() ||\n-          exitCode \u003d\u003d\n-              ExitCode.COULD_NOT_CREATE_WORK_DIRECTORIES.getExitCode() ||\n-          exitCode \u003d\u003d\n-              ExitCode.COULD_NOT_CREATE_APP_LOG_DIRECTORIES.getExitCode() ||\n-          exitCode \u003d\u003d\n-              ExitCode.COULD_NOT_CREATE_TMP_DIRECTORIES.getExitCode()) {\n+              ExitCode.INVALID_CONFIG_FILE.getExitCode()) {\n         throw new ConfigurationException(\n             \"Linux Container Executor reached unrecoverable exception\", e);\n       }\n     } else {\n       container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n           \"Container killed on request. Exit code is \" + exitCode));\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int handleExitCode(ContainerExecutionException e, Container container,\n      ContainerId containerId) throws ConfigurationException {\n    int exitCode \u003d e.getExitCode();\n    LOG.warn(\"Exit code from container \" + containerId + \" is : \" + exitCode);\n    // 143 (SIGTERM) and 137 (SIGKILL) exit codes means the container was\n    // terminated/killed forcefully. In all other cases, log the\n    // output\n    if (exitCode !\u003d ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode()\n        \u0026\u0026 exitCode !\u003d ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\n      LOG.warn(\"Exception from container-launch with container ID: \"\n          + containerId + \" and exit code: \" + exitCode, e);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"Exception from container-launch.\\n\");\n      builder.append(\"Container id: \" + containerId + \"\\n\");\n      builder.append(\"Exit code: \" + exitCode + \"\\n\");\n      builder.append(\"Exception message: \" + e.getMessage() + \"\\n\");\n      if (!Optional.fromNullable(e.getErrorOutput()).or(\"\").isEmpty()) {\n        builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\n      }\n      //Skip stack trace\n      String output \u003d e.getOutput();\n      if (output !\u003d null \u0026\u0026 !output.isEmpty()) {\n        builder.append(\"Shell output: \" + output + \"\\n\");\n      }\n      String diagnostics \u003d builder.toString();\n      logOutput(diagnostics);\n      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n          diagnostics));\n      if (exitCode \u003d\u003d\n          ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.INVALID_CONFIG_FILE.getExitCode()) {\n        throw new ConfigurationException(\n            \"Linux Container Executor reached unrecoverable exception\", e);\n      }\n    } else {\n      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n          \"Container killed on request. Exit code is \" + exitCode));\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "c467f311d0c7155c09052d93fac12045af925583": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
      "commitDate": "10/04/18 4:25 PM",
      "commitName": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,52 @@\n+  private int handleExitCode(ContainerExecutionException e, Container container,\n+      ContainerId containerId) throws ConfigurationException {\n+    int exitCode \u003d e.getExitCode();\n+    LOG.warn(\"Exit code from container \" + containerId + \" is : \" + exitCode);\n+    // 143 (SIGTERM) and 137 (SIGKILL) exit codes means the container was\n+    // terminated/killed forcefully. In all other cases, log the\n+    // output\n+    if (exitCode !\u003d ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode()\n+        \u0026\u0026 exitCode !\u003d ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\n+      LOG.warn(\"Exception from container-launch with container ID: \"\n+          + containerId + \" and exit code: \" + exitCode, e);\n+\n+      StringBuilder builder \u003d new StringBuilder();\n+      builder.append(\"Exception from container-launch.\\n\");\n+      builder.append(\"Container id: \" + containerId + \"\\n\");\n+      builder.append(\"Exit code: \" + exitCode + \"\\n\");\n+      builder.append(\"Exception message: \" + e.getMessage() + \"\\n\");\n+      if (!Optional.fromNullable(e.getErrorOutput()).or(\"\").isEmpty()) {\n+        builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\n+      }\n+      //Skip stack trace\n+      String output \u003d e.getOutput();\n+      if (output !\u003d null \u0026\u0026 !output.isEmpty()) {\n+        builder.append(\"Shell output: \" + output + \"\\n\");\n+      }\n+      String diagnostics \u003d builder.toString();\n+      logOutput(diagnostics);\n+      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n+          diagnostics));\n+      if (exitCode \u003d\u003d\n+          ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() ||\n+          exitCode \u003d\u003d\n+              ExitCode.INVALID_CONFIG_FILE.getExitCode() ||\n+          exitCode \u003d\u003d\n+              ExitCode.COULD_NOT_CREATE_SCRIPT_COPY.getExitCode() ||\n+          exitCode \u003d\u003d\n+              ExitCode.COULD_NOT_CREATE_CREDENTIALS_FILE.getExitCode() ||\n+          exitCode \u003d\u003d\n+              ExitCode.COULD_NOT_CREATE_WORK_DIRECTORIES.getExitCode() ||\n+          exitCode \u003d\u003d\n+              ExitCode.COULD_NOT_CREATE_APP_LOG_DIRECTORIES.getExitCode() ||\n+          exitCode \u003d\u003d\n+              ExitCode.COULD_NOT_CREATE_TMP_DIRECTORIES.getExitCode()) {\n+        throw new ConfigurationException(\n+            \"Linux Container Executor reached unrecoverable exception\", e);\n+      }\n+    } else {\n+      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n+          \"Container killed on request. Exit code is \" + exitCode));\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int handleExitCode(ContainerExecutionException e, Container container,\n      ContainerId containerId) throws ConfigurationException {\n    int exitCode \u003d e.getExitCode();\n    LOG.warn(\"Exit code from container \" + containerId + \" is : \" + exitCode);\n    // 143 (SIGTERM) and 137 (SIGKILL) exit codes means the container was\n    // terminated/killed forcefully. In all other cases, log the\n    // output\n    if (exitCode !\u003d ContainerExecutor.ExitCode.FORCE_KILLED.getExitCode()\n        \u0026\u0026 exitCode !\u003d ContainerExecutor.ExitCode.TERMINATED.getExitCode()) {\n      LOG.warn(\"Exception from container-launch with container ID: \"\n          + containerId + \" and exit code: \" + exitCode, e);\n\n      StringBuilder builder \u003d new StringBuilder();\n      builder.append(\"Exception from container-launch.\\n\");\n      builder.append(\"Container id: \" + containerId + \"\\n\");\n      builder.append(\"Exit code: \" + exitCode + \"\\n\");\n      builder.append(\"Exception message: \" + e.getMessage() + \"\\n\");\n      if (!Optional.fromNullable(e.getErrorOutput()).or(\"\").isEmpty()) {\n        builder.append(\"Shell error output: \" + e.getErrorOutput() + \"\\n\");\n      }\n      //Skip stack trace\n      String output \u003d e.getOutput();\n      if (output !\u003d null \u0026\u0026 !output.isEmpty()) {\n        builder.append(\"Shell output: \" + output + \"\\n\");\n      }\n      String diagnostics \u003d builder.toString();\n      logOutput(diagnostics);\n      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n          diagnostics));\n      if (exitCode \u003d\u003d\n          ExitCode.INVALID_CONTAINER_EXEC_PERMISSIONS.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.INVALID_CONFIG_FILE.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.COULD_NOT_CREATE_SCRIPT_COPY.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.COULD_NOT_CREATE_CREDENTIALS_FILE.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.COULD_NOT_CREATE_WORK_DIRECTORIES.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.COULD_NOT_CREATE_APP_LOG_DIRECTORIES.getExitCode() ||\n          exitCode \u003d\u003d\n              ExitCode.COULD_NOT_CREATE_TMP_DIRECTORIES.getExitCode()) {\n        throw new ConfigurationException(\n            \"Linux Container Executor reached unrecoverable exception\", e);\n      }\n    } else {\n      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,\n          \"Container killed on request. Exit code is \" + exitCode));\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}