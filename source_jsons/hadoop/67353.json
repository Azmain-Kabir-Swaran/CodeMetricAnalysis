{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HadoopLogsAnalyzer.java",
  "functionName": "readBalancedLine",
  "functionId": "readBalancedLine",
  "sourceFilePath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java",
  "functionStartLine": 623,
  "functionEndLine": 701,
  "numCommitsSeen": 13,
  "timeTaken": 4601,
  "changeHistory": [
    "10325d97329c214bb3899c8535df5a366bc86d2f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "10325d97329c214bb3899c8535df5a366bc86d2f": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10325d97329c214bb3899c8535df5a366bc86d2f": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3582. Move successfully passing MR1 tests to MR2 maven tree.(ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1233090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/01/12 2:10 PM",
      "commitName": "10325d97329c214bb3899c8535df5a366bc86d2f",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/01/12 10:20 AM",
      "commitNameOld": "8b2f6909ec7df5cffb5ef417f5c9cffdee43e38a",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Pair\u003cString, String\u003e readBalancedLine() throws IOException {\n    String line \u003d readCountedLine();\n\n    if (line \u003d\u003d null) {\n      return null;\n    }\n\n    while (line.indexOf(\u0027\\f\u0027) \u003e 0) {\n      line \u003d line.substring(line.indexOf(\u0027\\f\u0027));\n    }\n\n    if (line.length() !\u003d 0 \u0026\u0026 line.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n      String subjectLine \u003d readCountedLine();\n\n      if (subjectLine !\u003d null \u0026\u0026 subjectLine.length() !\u003d 0\n          \u0026\u0026 apparentConfFileHeader(line) \u0026\u0026 apparentXMLFileStart(subjectLine)) {\n        StringBuilder sb \u003d new StringBuilder();\n\n        while (subjectLine !\u003d null \u0026\u0026 subjectLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n          subjectLine \u003d subjectLine.substring(subjectLine.indexOf(\u0027\\f\u0027));\n        }\n\n        while (subjectLine !\u003d null\n            \u0026\u0026 (subjectLine.length() \u003d\u003d 0 || subjectLine.charAt(0) !\u003d \u0027\\f\u0027)) {\n          sb.append(subjectLine);\n          subjectLine \u003d readCountedLine();\n        }\n\n        if (subjectLine !\u003d null) {\n          unreadCountedLine(subjectLine);\n        }\n\n        return new Pair\u003cString, String\u003e(line, sb.toString());\n      }\n\n      // here we had a file line, but it introduced a log segment, not\n      // a conf file. We want to just ignore the file line.\n\n      return readBalancedLine();\n    }\n\n    String endlineString \u003d (version \u003d\u003d 0 ? \" \" : \" .\");\n\n    if (line.length() \u003c endlineString.length()) {\n      return new Pair\u003cString, String\u003e(null, line);\n    }\n\n    if (!endlineString.equals(line.substring(line.length()\n        - endlineString.length()))) {\n      StringBuilder sb \u003d new StringBuilder(line);\n\n      String addedLine;\n\n      do {\n        addedLine \u003d readCountedLine();\n\n        if (addedLine \u003d\u003d null) {\n          return new Pair\u003cString, String\u003e(null, sb.toString());\n        }\n\n        while (addedLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n          addedLine \u003d addedLine.substring(addedLine.indexOf(\u0027\\f\u0027));\n        }\n\n        if (addedLine.length() \u003e 0 \u0026\u0026 addedLine.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n          unreadCountedLine(addedLine);\n          return new Pair\u003cString, String\u003e(null, sb.toString());\n        }\n\n        sb.append(\"\\n\");\n        sb.append(addedLine);\n      } while (!endlineString.equals(addedLine.substring(addedLine.length()\n          - endlineString.length())));\n\n      line \u003d sb.toString();\n    }\n\n    return new Pair\u003cString, String\u003e(null, line);\n  }",
      "path": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java",
        "newPath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Pair\u003cString, String\u003e readBalancedLine() throws IOException {\n    String line \u003d readCountedLine();\n\n    if (line \u003d\u003d null) {\n      return null;\n    }\n\n    while (line.indexOf(\u0027\\f\u0027) \u003e 0) {\n      line \u003d line.substring(line.indexOf(\u0027\\f\u0027));\n    }\n\n    if (line.length() !\u003d 0 \u0026\u0026 line.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n      String subjectLine \u003d readCountedLine();\n\n      if (subjectLine !\u003d null \u0026\u0026 subjectLine.length() !\u003d 0\n          \u0026\u0026 apparentConfFileHeader(line) \u0026\u0026 apparentXMLFileStart(subjectLine)) {\n        StringBuilder sb \u003d new StringBuilder();\n\n        while (subjectLine !\u003d null \u0026\u0026 subjectLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n          subjectLine \u003d subjectLine.substring(subjectLine.indexOf(\u0027\\f\u0027));\n        }\n\n        while (subjectLine !\u003d null\n            \u0026\u0026 (subjectLine.length() \u003d\u003d 0 || subjectLine.charAt(0) !\u003d \u0027\\f\u0027)) {\n          sb.append(subjectLine);\n          subjectLine \u003d readCountedLine();\n        }\n\n        if (subjectLine !\u003d null) {\n          unreadCountedLine(subjectLine);\n        }\n\n        return new Pair\u003cString, String\u003e(line, sb.toString());\n      }\n\n      // here we had a file line, but it introduced a log segment, not\n      // a conf file. We want to just ignore the file line.\n\n      return readBalancedLine();\n    }\n\n    String endlineString \u003d (version \u003d\u003d 0 ? \" \" : \" .\");\n\n    if (line.length() \u003c endlineString.length()) {\n      return new Pair\u003cString, String\u003e(null, line);\n    }\n\n    if (!endlineString.equals(line.substring(line.length()\n        - endlineString.length()))) {\n      StringBuilder sb \u003d new StringBuilder(line);\n\n      String addedLine;\n\n      do {\n        addedLine \u003d readCountedLine();\n\n        if (addedLine \u003d\u003d null) {\n          return new Pair\u003cString, String\u003e(null, sb.toString());\n        }\n\n        while (addedLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n          addedLine \u003d addedLine.substring(addedLine.indexOf(\u0027\\f\u0027));\n        }\n\n        if (addedLine.length() \u003e 0 \u0026\u0026 addedLine.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n          unreadCountedLine(addedLine);\n          return new Pair\u003cString, String\u003e(null, sb.toString());\n        }\n\n        sb.append(\"\\n\");\n        sb.append(addedLine);\n      } while (!endlineString.equals(addedLine.substring(addedLine.length()\n          - endlineString.length())));\n\n      line \u003d sb.toString();\n    }\n\n    return new Pair\u003cString, String\u003e(null, line);\n  }",
      "path": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/tools/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java",
        "newPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Pair\u003cString, String\u003e readBalancedLine() throws IOException {\n    String line \u003d readCountedLine();\n\n    if (line \u003d\u003d null) {\n      return null;\n    }\n\n    while (line.indexOf(\u0027\\f\u0027) \u003e 0) {\n      line \u003d line.substring(line.indexOf(\u0027\\f\u0027));\n    }\n\n    if (line.length() !\u003d 0 \u0026\u0026 line.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n      String subjectLine \u003d readCountedLine();\n\n      if (subjectLine !\u003d null \u0026\u0026 subjectLine.length() !\u003d 0\n          \u0026\u0026 apparentConfFileHeader(line) \u0026\u0026 apparentXMLFileStart(subjectLine)) {\n        StringBuilder sb \u003d new StringBuilder();\n\n        while (subjectLine !\u003d null \u0026\u0026 subjectLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n          subjectLine \u003d subjectLine.substring(subjectLine.indexOf(\u0027\\f\u0027));\n        }\n\n        while (subjectLine !\u003d null\n            \u0026\u0026 (subjectLine.length() \u003d\u003d 0 || subjectLine.charAt(0) !\u003d \u0027\\f\u0027)) {\n          sb.append(subjectLine);\n          subjectLine \u003d readCountedLine();\n        }\n\n        if (subjectLine !\u003d null) {\n          unreadCountedLine(subjectLine);\n        }\n\n        return new Pair\u003cString, String\u003e(line, sb.toString());\n      }\n\n      // here we had a file line, but it introduced a log segment, not\n      // a conf file. We want to just ignore the file line.\n\n      return readBalancedLine();\n    }\n\n    String endlineString \u003d (version \u003d\u003d 0 ? \" \" : \" .\");\n\n    if (line.length() \u003c endlineString.length()) {\n      return new Pair\u003cString, String\u003e(null, line);\n    }\n\n    if (!endlineString.equals(line.substring(line.length()\n        - endlineString.length()))) {\n      StringBuilder sb \u003d new StringBuilder(line);\n\n      String addedLine;\n\n      do {\n        addedLine \u003d readCountedLine();\n\n        if (addedLine \u003d\u003d null) {\n          return new Pair\u003cString, String\u003e(null, sb.toString());\n        }\n\n        while (addedLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n          addedLine \u003d addedLine.substring(addedLine.indexOf(\u0027\\f\u0027));\n        }\n\n        if (addedLine.length() \u003e 0 \u0026\u0026 addedLine.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n          unreadCountedLine(addedLine);\n          return new Pair\u003cString, String\u003e(null, sb.toString());\n        }\n\n        sb.append(\"\\n\");\n        sb.append(addedLine);\n      } while (!endlineString.equals(addedLine.substring(addedLine.length()\n          - endlineString.length())));\n\n      line \u003d sb.toString();\n    }\n\n    return new Pair\u003cString, String\u003e(null, line);\n  }",
      "path": "hadoop-mapreduce/src/tools/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/tools/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java",
        "newPath": "hadoop-mapreduce/src/tools/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,79 @@\n+  private Pair\u003cString, String\u003e readBalancedLine() throws IOException {\n+    String line \u003d readCountedLine();\n+\n+    if (line \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    while (line.indexOf(\u0027\\f\u0027) \u003e 0) {\n+      line \u003d line.substring(line.indexOf(\u0027\\f\u0027));\n+    }\n+\n+    if (line.length() !\u003d 0 \u0026\u0026 line.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n+      String subjectLine \u003d readCountedLine();\n+\n+      if (subjectLine !\u003d null \u0026\u0026 subjectLine.length() !\u003d 0\n+          \u0026\u0026 apparentConfFileHeader(line) \u0026\u0026 apparentXMLFileStart(subjectLine)) {\n+        StringBuilder sb \u003d new StringBuilder();\n+\n+        while (subjectLine !\u003d null \u0026\u0026 subjectLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n+          subjectLine \u003d subjectLine.substring(subjectLine.indexOf(\u0027\\f\u0027));\n+        }\n+\n+        while (subjectLine !\u003d null\n+            \u0026\u0026 (subjectLine.length() \u003d\u003d 0 || subjectLine.charAt(0) !\u003d \u0027\\f\u0027)) {\n+          sb.append(subjectLine);\n+          subjectLine \u003d readCountedLine();\n+        }\n+\n+        if (subjectLine !\u003d null) {\n+          unreadCountedLine(subjectLine);\n+        }\n+\n+        return new Pair\u003cString, String\u003e(line, sb.toString());\n+      }\n+\n+      // here we had a file line, but it introduced a log segment, not\n+      // a conf file. We want to just ignore the file line.\n+\n+      return readBalancedLine();\n+    }\n+\n+    String endlineString \u003d (version \u003d\u003d 0 ? \" \" : \" .\");\n+\n+    if (line.length() \u003c endlineString.length()) {\n+      return new Pair\u003cString, String\u003e(null, line);\n+    }\n+\n+    if (!endlineString.equals(line.substring(line.length()\n+        - endlineString.length()))) {\n+      StringBuilder sb \u003d new StringBuilder(line);\n+\n+      String addedLine;\n+\n+      do {\n+        addedLine \u003d readCountedLine();\n+\n+        if (addedLine \u003d\u003d null) {\n+          return new Pair\u003cString, String\u003e(null, sb.toString());\n+        }\n+\n+        while (addedLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n+          addedLine \u003d addedLine.substring(addedLine.indexOf(\u0027\\f\u0027));\n+        }\n+\n+        if (addedLine.length() \u003e 0 \u0026\u0026 addedLine.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n+          unreadCountedLine(addedLine);\n+          return new Pair\u003cString, String\u003e(null, sb.toString());\n+        }\n+\n+        sb.append(\"\\n\");\n+        sb.append(addedLine);\n+      } while (!endlineString.equals(addedLine.substring(addedLine.length()\n+          - endlineString.length())));\n+\n+      line \u003d sb.toString();\n+    }\n+\n+    return new Pair\u003cString, String\u003e(null, line);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Pair\u003cString, String\u003e readBalancedLine() throws IOException {\n    String line \u003d readCountedLine();\n\n    if (line \u003d\u003d null) {\n      return null;\n    }\n\n    while (line.indexOf(\u0027\\f\u0027) \u003e 0) {\n      line \u003d line.substring(line.indexOf(\u0027\\f\u0027));\n    }\n\n    if (line.length() !\u003d 0 \u0026\u0026 line.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n      String subjectLine \u003d readCountedLine();\n\n      if (subjectLine !\u003d null \u0026\u0026 subjectLine.length() !\u003d 0\n          \u0026\u0026 apparentConfFileHeader(line) \u0026\u0026 apparentXMLFileStart(subjectLine)) {\n        StringBuilder sb \u003d new StringBuilder();\n\n        while (subjectLine !\u003d null \u0026\u0026 subjectLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n          subjectLine \u003d subjectLine.substring(subjectLine.indexOf(\u0027\\f\u0027));\n        }\n\n        while (subjectLine !\u003d null\n            \u0026\u0026 (subjectLine.length() \u003d\u003d 0 || subjectLine.charAt(0) !\u003d \u0027\\f\u0027)) {\n          sb.append(subjectLine);\n          subjectLine \u003d readCountedLine();\n        }\n\n        if (subjectLine !\u003d null) {\n          unreadCountedLine(subjectLine);\n        }\n\n        return new Pair\u003cString, String\u003e(line, sb.toString());\n      }\n\n      // here we had a file line, but it introduced a log segment, not\n      // a conf file. We want to just ignore the file line.\n\n      return readBalancedLine();\n    }\n\n    String endlineString \u003d (version \u003d\u003d 0 ? \" \" : \" .\");\n\n    if (line.length() \u003c endlineString.length()) {\n      return new Pair\u003cString, String\u003e(null, line);\n    }\n\n    if (!endlineString.equals(line.substring(line.length()\n        - endlineString.length()))) {\n      StringBuilder sb \u003d new StringBuilder(line);\n\n      String addedLine;\n\n      do {\n        addedLine \u003d readCountedLine();\n\n        if (addedLine \u003d\u003d null) {\n          return new Pair\u003cString, String\u003e(null, sb.toString());\n        }\n\n        while (addedLine.indexOf(\u0027\\f\u0027) \u003e 0) {\n          addedLine \u003d addedLine.substring(addedLine.indexOf(\u0027\\f\u0027));\n        }\n\n        if (addedLine.length() \u003e 0 \u0026\u0026 addedLine.charAt(0) \u003d\u003d \u0027\\f\u0027) {\n          unreadCountedLine(addedLine);\n          return new Pair\u003cString, String\u003e(null, sb.toString());\n        }\n\n        sb.append(\"\\n\");\n        sb.append(addedLine);\n      } while (!endlineString.equals(addedLine.substring(addedLine.length()\n          - endlineString.length())));\n\n      line \u003d sb.toString();\n    }\n\n    return new Pair\u003cString, String\u003e(null, line);\n  }",
      "path": "mapreduce/src/tools/org/apache/hadoop/tools/rumen/HadoopLogsAnalyzer.java"
    }
  }
}