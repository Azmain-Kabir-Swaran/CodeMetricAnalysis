{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Component.java",
  "functionName": "checkAndScheduleHealthThresholdMonitor",
  "functionId": "checkAndScheduleHealthThresholdMonitor",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
  "functionStartLine": 273,
  "functionEndLine": 338,
  "numCommitsSeen": 33,
  "timeTaken": 692,
  "changeHistory": [
    "93979db8400186d6e557c46a2a1e2622821013c1"
  ],
  "changeHistoryShort": {
    "93979db8400186d6e557c46a2a1e2622821013c1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "93979db8400186d6e557c46a2a1e2622821013c1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8122.  Added component health monitoring for YARN service.\n            Contributed by Gour Saha\n",
      "commitDate": "26/04/18 4:17 PM",
      "commitName": "93979db8400186d6e557c46a2a1e2622821013c1",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,66 @@\n+  private void checkAndScheduleHealthThresholdMonitor() {\n+    // Determine health threshold percent\n+    int healthThresholdPercent \u003d YarnServiceConf.getInt(\n+        CONTAINER_HEALTH_THRESHOLD_PERCENT,\n+        DEFAULT_CONTAINER_HEALTH_THRESHOLD_PERCENT,\n+        componentSpec.getConfiguration(), scheduler.getConfig());\n+    // Validations\n+    if (healthThresholdPercent \u003d\u003d CONTAINER_HEALTH_THRESHOLD_PERCENT_DISABLED) {\n+      LOG.info(\"No health threshold monitor enabled for component {}\",\n+          componentSpec.getName());\n+      return;\n+    }\n+    // If threshold is set to outside acceptable range then don\u0027t enable monitor\n+    if (healthThresholdPercent \u003c\u003d 0 || healthThresholdPercent \u003e 100) {\n+      LOG.error(\n+          \"Invalid health threshold percent {}% for component {}. Monitor not \"\n+              + \"enabled.\",\n+          healthThresholdPercent, componentSpec.getName());\n+      return;\n+    }\n+    // Determine the threshold properties\n+    long window \u003d YarnServiceConf.getLong(CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC,\n+        DEFAULT_CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC,\n+        componentSpec.getConfiguration(), scheduler.getConfig());\n+    long initDelay \u003d YarnServiceConf.getLong(\n+        CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC,\n+        DEFAULT_CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC,\n+        componentSpec.getConfiguration(), scheduler.getConfig());\n+    long pollFrequency \u003d YarnServiceConf.getLong(\n+        CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC,\n+        DEFAULT_CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC,\n+        componentSpec.getConfiguration(), scheduler.getConfig());\n+    // Validations\n+    if (window \u003c\u003d 0) {\n+      LOG.error(\n+          \"Invalid health monitor window {} secs for component {}. Monitor not \"\n+              + \"enabled.\",\n+          window, componentSpec.getName());\n+      return;\n+    }\n+    if (initDelay \u003c 0) {\n+      LOG.error(\"Invalid health monitor init delay {} secs for component {}. \"\n+          + \"Monitor not enabled.\", initDelay, componentSpec.getName());\n+      return;\n+    }\n+    if (pollFrequency \u003c\u003d 0) {\n+      LOG.error(\n+          \"Invalid health monitor poll frequency {} secs for component {}. \"\n+              + \"Monitor not enabled.\",\n+          pollFrequency, componentSpec.getName());\n+      return;\n+    }\n+    LOG.info(\n+        \"Scheduling the health threshold monitor for component {} with percent \"\n+            + \"\u003d {}%, window \u003d {} secs, poll freq \u003d {} secs, init-delay \u003d {} \"\n+            + \"secs\",\n+        componentSpec.getName(), healthThresholdPercent, window, pollFrequency,\n+        initDelay);\n+    // Add 3 extra seconds to initial delay to account for the time taken to\n+    // request containers before the monitor starts calculating health.\n+    this.scheduler.executorService.scheduleAtFixedRate(\n+        new ComponentHealthThresholdMonitor(this, healthThresholdPercent,\n+            window),\n+        initDelay + 3, pollFrequency, TimeUnit.SECONDS);\n+    setHealthThresholdMonitorEnabled(true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkAndScheduleHealthThresholdMonitor() {\n    // Determine health threshold percent\n    int healthThresholdPercent \u003d YarnServiceConf.getInt(\n        CONTAINER_HEALTH_THRESHOLD_PERCENT,\n        DEFAULT_CONTAINER_HEALTH_THRESHOLD_PERCENT,\n        componentSpec.getConfiguration(), scheduler.getConfig());\n    // Validations\n    if (healthThresholdPercent \u003d\u003d CONTAINER_HEALTH_THRESHOLD_PERCENT_DISABLED) {\n      LOG.info(\"No health threshold monitor enabled for component {}\",\n          componentSpec.getName());\n      return;\n    }\n    // If threshold is set to outside acceptable range then don\u0027t enable monitor\n    if (healthThresholdPercent \u003c\u003d 0 || healthThresholdPercent \u003e 100) {\n      LOG.error(\n          \"Invalid health threshold percent {}% for component {}. Monitor not \"\n              + \"enabled.\",\n          healthThresholdPercent, componentSpec.getName());\n      return;\n    }\n    // Determine the threshold properties\n    long window \u003d YarnServiceConf.getLong(CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC,\n        DEFAULT_CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC,\n        componentSpec.getConfiguration(), scheduler.getConfig());\n    long initDelay \u003d YarnServiceConf.getLong(\n        CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC,\n        DEFAULT_CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC,\n        componentSpec.getConfiguration(), scheduler.getConfig());\n    long pollFrequency \u003d YarnServiceConf.getLong(\n        CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC,\n        DEFAULT_CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC,\n        componentSpec.getConfiguration(), scheduler.getConfig());\n    // Validations\n    if (window \u003c\u003d 0) {\n      LOG.error(\n          \"Invalid health monitor window {} secs for component {}. Monitor not \"\n              + \"enabled.\",\n          window, componentSpec.getName());\n      return;\n    }\n    if (initDelay \u003c 0) {\n      LOG.error(\"Invalid health monitor init delay {} secs for component {}. \"\n          + \"Monitor not enabled.\", initDelay, componentSpec.getName());\n      return;\n    }\n    if (pollFrequency \u003c\u003d 0) {\n      LOG.error(\n          \"Invalid health monitor poll frequency {} secs for component {}. \"\n              + \"Monitor not enabled.\",\n          pollFrequency, componentSpec.getName());\n      return;\n    }\n    LOG.info(\n        \"Scheduling the health threshold monitor for component {} with percent \"\n            + \"\u003d {}%, window \u003d {} secs, poll freq \u003d {} secs, init-delay \u003d {} \"\n            + \"secs\",\n        componentSpec.getName(), healthThresholdPercent, window, pollFrequency,\n        initDelay);\n    // Add 3 extra seconds to initial delay to account for the time taken to\n    // request containers before the monitor starts calculating health.\n    this.scheduler.executorService.scheduleAtFixedRate(\n        new ComponentHealthThresholdMonitor(this, healthThresholdPercent,\n            window),\n        initDelay + 3, pollFrequency, TimeUnit.SECONDS);\n    setHealthThresholdMonitorEnabled(true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java"
    }
  }
}