{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerConfiguration.java",
  "functionName": "internalGetLabeledResourceRequirementForQueue",
  "functionId": "internalGetLabeledResourceRequirementForQueue___queue-String__label-String__resourceTypes-Set__String____suffix-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
  "functionStartLine": 2136,
  "functionEndLine": 2180,
  "numCommitsSeen": 90,
  "timeTaken": 3546,
  "changeHistory": [
    "daa1cdd062657a47acbf4b23f895860296241199",
    "1012b901c8eeeb46c7c792c94ed0befca1c860b4",
    "5e798b1a0ddceeaf54703b94052501867156e979"
  ],
  "changeHistoryShort": {
    "daa1cdd062657a47acbf4b23f895860296241199": "Ybodychange",
    "1012b901c8eeeb46c7c792c94ed0befca1c860b4": "Ybodychange",
    "5e798b1a0ddceeaf54703b94052501867156e979": "Yintroduced"
  },
  "changeHistoryDetails": {
    "daa1cdd062657a47acbf4b23f895860296241199": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7564. Cleanup to fix checkstyle issues of YARN-5881 branch. Contributed by Sunil G.\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "daa1cdd062657a47acbf4b23f895860296241199",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "1012b901c8eeeb46c7c792c94ed0befca1c860b4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private Resource internalGetLabeledResourceRequirementForQueue(String queue,\n       String label, Set\u003cString\u003e resourceTypes, String suffix) {\n     String propertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n     String resourceString \u003d get(propertyName);\n     if (resourceString \u003d\u003d null || resourceString.isEmpty()) {\n       return Resources.none();\n     }\n \n     // Define resource here.\n-    Resource resource \u003d Resource.newInstance(0l, 0);\n+    Resource resource \u003d Resource.newInstance(0L, 0);\n     Matcher matcher \u003d RESOURCE_PATTERN.matcher(resourceString);\n \n     /*\n      * Absolute resource configuration for a queue will be grouped by \"[]\".\n      * Syntax of absolute resource config could be like below\n      * \"memory\u003d4Gi vcores\u003d2\". Ideally this means \"4GB of memory and 2 vcores\".\n      */\n     if (matcher.find()) {\n       // Get the sub-group.\n       String subGroup \u003d matcher.group(0);\n       if (subGroup.trim().isEmpty()) {\n         return Resources.none();\n       }\n \n       subGroup \u003d subGroup.substring(1, subGroup.length() - 1);\n       for (String kvPair : subGroup.trim().split(\",\")) {\n         String[] splits \u003d kvPair.split(\"\u003d\");\n \n         // Ensure that each sub string is key value pair separated by \u0027\u003d\u0027.\n         if (splits !\u003d null \u0026\u0026 splits.length \u003e 1) {\n           updateResourceValuesFromConfig(resourceTypes, resource, splits);\n         }\n       }\n     }\n \n     // Memory has to be configured always.\n-    if (resource.getMemorySize() \u003d\u003d 0l) {\n+    if (resource.getMemorySize() \u003d\u003d 0L) {\n       return Resources.none();\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"CSConf - getAbsolueResourcePerQueue: prefix\u003d\"\n           + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + resource);\n     }\n     return resource;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource internalGetLabeledResourceRequirementForQueue(String queue,\n      String label, Set\u003cString\u003e resourceTypes, String suffix) {\n    String propertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n    String resourceString \u003d get(propertyName);\n    if (resourceString \u003d\u003d null || resourceString.isEmpty()) {\n      return Resources.none();\n    }\n\n    // Define resource here.\n    Resource resource \u003d Resource.newInstance(0L, 0);\n    Matcher matcher \u003d RESOURCE_PATTERN.matcher(resourceString);\n\n    /*\n     * Absolute resource configuration for a queue will be grouped by \"[]\".\n     * Syntax of absolute resource config could be like below\n     * \"memory\u003d4Gi vcores\u003d2\". Ideally this means \"4GB of memory and 2 vcores\".\n     */\n    if (matcher.find()) {\n      // Get the sub-group.\n      String subGroup \u003d matcher.group(0);\n      if (subGroup.trim().isEmpty()) {\n        return Resources.none();\n      }\n\n      subGroup \u003d subGroup.substring(1, subGroup.length() - 1);\n      for (String kvPair : subGroup.trim().split(\",\")) {\n        String[] splits \u003d kvPair.split(\"\u003d\");\n\n        // Ensure that each sub string is key value pair separated by \u0027\u003d\u0027.\n        if (splits !\u003d null \u0026\u0026 splits.length \u003e 1) {\n          updateResourceValuesFromConfig(resourceTypes, resource, splits);\n        }\n      }\n    }\n\n    // Memory has to be configured always.\n    if (resource.getMemorySize() \u003d\u003d 0L) {\n      return Resources.none();\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"CSConf - getAbsolueResourcePerQueue: prefix\u003d\"\n          + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + resource);\n    }\n    return resource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "1012b901c8eeeb46c7c792c94ed0befca1c860b4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7544. Use queue-path.capacity/maximum-capacity to specify absolute min/max resources. (Sunil G via wangda)\n\nChange-Id: I685341be213eee500f51e02f01c91def89391c17\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "1012b901c8eeeb46c7c792c94ed0befca1c860b4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   private Resource internalGetLabeledResourceRequirementForQueue(String queue,\n       String label, Set\u003cString\u003e resourceTypes, String suffix) {\n     String propertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n     String resourceString \u003d get(propertyName);\n     if (resourceString \u003d\u003d null || resourceString.isEmpty()) {\n       return Resources.none();\n     }\n \n     // Define resource here.\n     Resource resource \u003d Resource.newInstance(0l, 0);\n-    Matcher matcher \u003d Pattern.compile(PATTERN_FOR_ABSOLUTE_RESOURCE)\n-        .matcher(resourceString);\n+    Matcher matcher \u003d RESOURCE_PATTERN.matcher(resourceString);\n+\n     /*\n      * Absolute resource configuration for a queue will be grouped by \"[]\".\n      * Syntax of absolute resource config could be like below\n      * \"memory\u003d4Gi vcores\u003d2\". Ideally this means \"4GB of memory and 2 vcores\".\n      */\n     if (matcher.find()) {\n       // Get the sub-group.\n-      String subGroup \u003d matcher.group(1);\n+      String subGroup \u003d matcher.group(0);\n       if (subGroup.trim().isEmpty()) {\n         return Resources.none();\n       }\n \n+      subGroup \u003d subGroup.substring(1, subGroup.length() - 1);\n       for (String kvPair : subGroup.trim().split(\",\")) {\n         String[] splits \u003d kvPair.split(\"\u003d\");\n \n         // Ensure that each sub string is key value pair separated by \u0027\u003d\u0027.\n         if (splits !\u003d null \u0026\u0026 splits.length \u003e 1) {\n           updateResourceValuesFromConfig(resourceTypes, resource, splits);\n         }\n       }\n     }\n \n     // Memory has to be configured always.\n     if (resource.getMemorySize() \u003d\u003d 0l) {\n       return Resources.none();\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"CSConf - getAbsolueResourcePerQueue: prefix\u003d\"\n           + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + resource);\n     }\n     return resource;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource internalGetLabeledResourceRequirementForQueue(String queue,\n      String label, Set\u003cString\u003e resourceTypes, String suffix) {\n    String propertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n    String resourceString \u003d get(propertyName);\n    if (resourceString \u003d\u003d null || resourceString.isEmpty()) {\n      return Resources.none();\n    }\n\n    // Define resource here.\n    Resource resource \u003d Resource.newInstance(0l, 0);\n    Matcher matcher \u003d RESOURCE_PATTERN.matcher(resourceString);\n\n    /*\n     * Absolute resource configuration for a queue will be grouped by \"[]\".\n     * Syntax of absolute resource config could be like below\n     * \"memory\u003d4Gi vcores\u003d2\". Ideally this means \"4GB of memory and 2 vcores\".\n     */\n    if (matcher.find()) {\n      // Get the sub-group.\n      String subGroup \u003d matcher.group(0);\n      if (subGroup.trim().isEmpty()) {\n        return Resources.none();\n      }\n\n      subGroup \u003d subGroup.substring(1, subGroup.length() - 1);\n      for (String kvPair : subGroup.trim().split(\",\")) {\n        String[] splits \u003d kvPair.split(\"\u003d\");\n\n        // Ensure that each sub string is key value pair separated by \u0027\u003d\u0027.\n        if (splits !\u003d null \u0026\u0026 splits.length \u003e 1) {\n          updateResourceValuesFromConfig(resourceTypes, resource, splits);\n        }\n      }\n    }\n\n    // Memory has to be configured always.\n    if (resource.getMemorySize() \u003d\u003d 0l) {\n      return Resources.none();\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"CSConf - getAbsolueResourcePerQueue: prefix\u003d\"\n          + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + resource);\n    }\n    return resource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java",
      "extendedDetails": {}
    },
    "5e798b1a0ddceeaf54703b94052501867156e979": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6471. Support to add min/max resource configuration for a queue. (Sunil G via wangda)\n\nChange-Id: I9213f5297a6841fab5c573e85ee4c4e5f4a0b7ff\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,45 @@\n+  private Resource internalGetLabeledResourceRequirementForQueue(String queue,\n+      String label, Set\u003cString\u003e resourceTypes, String suffix) {\n+    String propertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n+    String resourceString \u003d get(propertyName);\n+    if (resourceString \u003d\u003d null || resourceString.isEmpty()) {\n+      return Resources.none();\n+    }\n+\n+    // Define resource here.\n+    Resource resource \u003d Resource.newInstance(0l, 0);\n+    Matcher matcher \u003d Pattern.compile(PATTERN_FOR_ABSOLUTE_RESOURCE)\n+        .matcher(resourceString);\n+    /*\n+     * Absolute resource configuration for a queue will be grouped by \"[]\".\n+     * Syntax of absolute resource config could be like below\n+     * \"memory\u003d4Gi vcores\u003d2\". Ideally this means \"4GB of memory and 2 vcores\".\n+     */\n+    if (matcher.find()) {\n+      // Get the sub-group.\n+      String subGroup \u003d matcher.group(1);\n+      if (subGroup.trim().isEmpty()) {\n+        return Resources.none();\n+      }\n+\n+      for (String kvPair : subGroup.trim().split(\",\")) {\n+        String[] splits \u003d kvPair.split(\"\u003d\");\n+\n+        // Ensure that each sub string is key value pair separated by \u0027\u003d\u0027.\n+        if (splits !\u003d null \u0026\u0026 splits.length \u003e 1) {\n+          updateResourceValuesFromConfig(resourceTypes, resource, splits);\n+        }\n+      }\n+    }\n+\n+    // Memory has to be configured always.\n+    if (resource.getMemorySize() \u003d\u003d 0l) {\n+      return Resources.none();\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"CSConf - getAbsolueResourcePerQueue: prefix\u003d\"\n+          + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + resource);\n+    }\n+    return resource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource internalGetLabeledResourceRequirementForQueue(String queue,\n      String label, Set\u003cString\u003e resourceTypes, String suffix) {\n    String propertyName \u003d getNodeLabelPrefix(queue, label) + suffix;\n    String resourceString \u003d get(propertyName);\n    if (resourceString \u003d\u003d null || resourceString.isEmpty()) {\n      return Resources.none();\n    }\n\n    // Define resource here.\n    Resource resource \u003d Resource.newInstance(0l, 0);\n    Matcher matcher \u003d Pattern.compile(PATTERN_FOR_ABSOLUTE_RESOURCE)\n        .matcher(resourceString);\n    /*\n     * Absolute resource configuration for a queue will be grouped by \"[]\".\n     * Syntax of absolute resource config could be like below\n     * \"memory\u003d4Gi vcores\u003d2\". Ideally this means \"4GB of memory and 2 vcores\".\n     */\n    if (matcher.find()) {\n      // Get the sub-group.\n      String subGroup \u003d matcher.group(1);\n      if (subGroup.trim().isEmpty()) {\n        return Resources.none();\n      }\n\n      for (String kvPair : subGroup.trim().split(\",\")) {\n        String[] splits \u003d kvPair.split(\"\u003d\");\n\n        // Ensure that each sub string is key value pair separated by \u0027\u003d\u0027.\n        if (splits !\u003d null \u0026\u0026 splits.length \u003e 1) {\n          updateResourceValuesFromConfig(resourceTypes, resource, splits);\n        }\n      }\n    }\n\n    // Memory has to be configured always.\n    if (resource.getMemorySize() \u003d\u003d 0l) {\n      return Resources.none();\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"CSConf - getAbsolueResourcePerQueue: prefix\u003d\"\n          + getNodeLabelPrefix(queue, label) + \", capacity\u003d\" + resource);\n    }\n    return resource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java"
    }
  }
}