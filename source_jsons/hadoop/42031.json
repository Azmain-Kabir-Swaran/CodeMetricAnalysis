{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKRMStateStore.java",
  "functionName": "updateRMDelegationTokenState",
  "functionId": "updateRMDelegationTokenState___rmDTIdentifier-RMDelegationTokenIdentifier__renewDate-Long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
  "functionStartLine": 1093,
  "functionEndLine": 1122,
  "numCommitsSeen": 116,
  "timeTaken": 5559,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03",
    "87852b6ef4b9d973b7b3999974d41c8860fb1495",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
    "4c7b9b6abe2452c9752a11214762be2e7665fb32",
    "e516706b896743e47e2852be81944eb5613e3e76",
    "562a701945be3a672f9cb5a52cc6db2c1589ba2b",
    "4f18018b7abb405f38d269da096ec9fd80c81d9a",
    "d1d6bb70f4de66f393f2d5c52d4611b1f87b152e",
    "38d5ca2e47e8ca1b08d77fe2de6e1e83c6440344",
    "ce56616037fc160ba875b496bdc369411bb873be"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9": "Ybodychange",
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03": "Ybodychange",
    "87852b6ef4b9d973b7b3999974d41c8860fb1495": "Ybodychange",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": "Ybodychange",
    "4c7b9b6abe2452c9752a11214762be2e7665fb32": "Ybodychange",
    "e516706b896743e47e2852be81944eb5613e3e76": "Ybodychange",
    "562a701945be3a672f9cb5a52cc6db2c1589ba2b": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "4f18018b7abb405f38d269da096ec9fd80c81d9a": "Ymodifierchange",
    "d1d6bb70f4de66f393f2d5c52d4611b1f87b152e": "Ybodychange",
    "38d5ca2e47e8ca1b08d77fe2de6e1e83c6440344": "Ybodychange",
    "ce56616037fc160ba875b496bdc369411bb873be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   protected synchronized void updateRMDelegationTokenState(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n       throws Exception {\n     String nodeUpdatePath \u003d getLeafDelegationTokenNodePath(\n         rmDTIdentifier.getSequenceNumber(), false);\n     boolean pathExists \u003d true;\n     // Look for paths based on other split indices if path as per split index\n     // does not exist.\n     if (!exists(nodeUpdatePath)) {\n       ZnodeSplitInfo alternatePathInfo \u003d\n           getAlternateDTPath(rmDTIdentifier.getSequenceNumber());\n       if (alternatePathInfo !\u003d null) {\n         nodeUpdatePath \u003d alternatePathInfo.path;\n       } else {\n         pathExists \u003d false;\n       }\n     }\n \n     if (pathExists) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Updating \" + DELEGATION_TOKEN_PREFIX\n-            + rmDTIdentifier.getSequenceNumber());\n-      }\n+      LOG.debug(\"Updating {}{}\", DELEGATION_TOKEN_PREFIX,\n+          rmDTIdentifier.getSequenceNumber());\n+\n       RMDelegationTokenIdentifierData identifierData \u003d\n           new RMDelegationTokenIdentifierData(rmDTIdentifier, renewDate);\n       zkManager.safeSetData(nodeUpdatePath, identifierData.toByteArray(), -1,\n           zkAcl, fencingNodePath);\n     } else {\n       storeRMDelegationTokenState(rmDTIdentifier, renewDate);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    String nodeUpdatePath \u003d getLeafDelegationTokenNodePath(\n        rmDTIdentifier.getSequenceNumber(), false);\n    boolean pathExists \u003d true;\n    // Look for paths based on other split indices if path as per split index\n    // does not exist.\n    if (!exists(nodeUpdatePath)) {\n      ZnodeSplitInfo alternatePathInfo \u003d\n          getAlternateDTPath(rmDTIdentifier.getSequenceNumber());\n      if (alternatePathInfo !\u003d null) {\n        nodeUpdatePath \u003d alternatePathInfo.path;\n      } else {\n        pathExists \u003d false;\n      }\n    }\n\n    if (pathExists) {\n      LOG.debug(\"Updating {}{}\", DELEGATION_TOKEN_PREFIX,\n          rmDTIdentifier.getSequenceNumber());\n\n      RMDelegationTokenIdentifierData identifierData \u003d\n          new RMDelegationTokenIdentifierData(rmDTIdentifier, renewDate);\n      zkManager.safeSetData(nodeUpdatePath, identifierData.toByteArray(), -1,\n          zkAcl, fencingNodePath);\n    } else {\n      storeRMDelegationTokenState(rmDTIdentifier, renewDate);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7262. Add a hierarchy into the ZKRMStateStore for delegation token znodes to prevent jute buffer overflow (rkanter)\n",
      "commitDate": "26/10/17 5:47 PM",
      "commitName": "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 17.28,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,31 @@\n   protected synchronized void updateRMDelegationTokenState(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n       throws Exception {\n-    SafeTransaction trx \u003d zkManager.createTransaction(zkAcl, fencingNodePath);\n-    String nodeRemovePath \u003d\n-        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n-            + rmDTIdentifier.getSequenceNumber());\n-\n-    if (exists(nodeRemovePath)) {\n-      // in case znode exists\n-      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, true);\n-    } else {\n-      // in case znode doesn\u0027t exist\n-      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, false);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n+    String nodeUpdatePath \u003d getLeafDelegationTokenNodePath(\n+        rmDTIdentifier.getSequenceNumber(), false);\n+    boolean pathExists \u003d true;\n+    // Look for paths based on other split indices if path as per split index\n+    // does not exist.\n+    if (!exists(nodeUpdatePath)) {\n+      ZnodeSplitInfo alternatePathInfo \u003d\n+          getAlternateDTPath(rmDTIdentifier.getSequenceNumber());\n+      if (alternatePathInfo !\u003d null) {\n+        nodeUpdatePath \u003d alternatePathInfo.path;\n+      } else {\n+        pathExists \u003d false;\n       }\n     }\n \n-    trx.commit();\n+    if (pathExists) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Updating \" + DELEGATION_TOKEN_PREFIX\n+            + rmDTIdentifier.getSequenceNumber());\n+      }\n+      RMDelegationTokenIdentifierData identifierData \u003d\n+          new RMDelegationTokenIdentifierData(rmDTIdentifier, renewDate);\n+      zkManager.safeSetData(nodeUpdatePath, identifierData.toByteArray(), -1,\n+          zkAcl, fencingNodePath);\n+    } else {\n+      storeRMDelegationTokenState(rmDTIdentifier, renewDate);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    String nodeUpdatePath \u003d getLeafDelegationTokenNodePath(\n        rmDTIdentifier.getSequenceNumber(), false);\n    boolean pathExists \u003d true;\n    // Look for paths based on other split indices if path as per split index\n    // does not exist.\n    if (!exists(nodeUpdatePath)) {\n      ZnodeSplitInfo alternatePathInfo \u003d\n          getAlternateDTPath(rmDTIdentifier.getSequenceNumber());\n      if (alternatePathInfo !\u003d null) {\n        nodeUpdatePath \u003d alternatePathInfo.path;\n      } else {\n        pathExists \u003d false;\n      }\n    }\n\n    if (pathExists) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updating \" + DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n      }\n      RMDelegationTokenIdentifierData identifierData \u003d\n          new RMDelegationTokenIdentifierData(rmDTIdentifier, renewDate);\n      zkManager.safeSetData(nodeUpdatePath, identifierData.toByteArray(), -1,\n          zkAcl, fencingNodePath);\n    } else {\n      storeRMDelegationTokenState(rmDTIdentifier, renewDate);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7053. Move curator transaction support to ZKCuratorManager. (Jonathan Hung via Subru).\n",
      "commitDate": "22/08/17 7:20 PM",
      "commitName": "4249172e1419acdb2b69ae3db43dc59da2aa2e03",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "15/08/17 4:53 PM",
      "commitNameOld": "75dd866bfb8b63cb9f13179d4365b05c48e0907d",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 7.1,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   protected synchronized void updateRMDelegationTokenState(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n       throws Exception {\n-    SafeTransaction trx \u003d new SafeTransaction();\n+    SafeTransaction trx \u003d zkManager.createTransaction(zkAcl, fencingNodePath);\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n \n     if (exists(nodeRemovePath)) {\n       // in case znode exists\n       addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, true);\n     } else {\n       // in case znode doesn\u0027t exist\n       addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, false);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n       }\n     }\n \n     trx.commit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    SafeTransaction trx \u003d zkManager.createTransaction(zkAcl, fencingNodePath);\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n\n    if (exists(nodeRemovePath)) {\n      // in case znode exists\n      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, true);\n    } else {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, false);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n      }\n    }\n\n    trx.commit();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "87852b6ef4b9d973b7b3999974d41c8860fb1495": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6103. Log updates for ZKRMStateStore (Contributed by Daniel Sturman via Daniel Templeton)\n",
      "commitDate": "30/01/17 9:44 PM",
      "commitName": "87852b6ef4b9d973b7b3999974d41c8860fb1495",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "14/11/16 9:28 PM",
      "commitNameOld": "b7070f3308fc4c6a8a9a25021562169cae87d223",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 77.01,
      "commitsBetweenForRepo": 397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   protected synchronized void updateRMDelegationTokenState(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n       throws Exception {\n     SafeTransaction trx \u003d new SafeTransaction();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n \n     if (exists(nodeRemovePath)) {\n       // in case znode exists\n       addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, true);\n     } else {\n       // in case znode doesn\u0027t exist\n       addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, false);\n-      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n+      }\n     }\n \n     trx.commit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    SafeTransaction trx \u003d new SafeTransaction();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n\n    if (exists(nodeRemovePath)) {\n      // in case znode exists\n      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, true);\n    } else {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, false);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n      }\n    }\n\n    trx.commit();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2716. Refactor ZKRMStateStore retry code with Apache Curator. Contributed by Karthik Kambatla\n",
      "commitDate": "08/06/15 2:50 PM",
      "commitName": "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/05/15 3:12 PM",
      "commitNameOld": "d0b73287c26983f32b0efe01862150e9fd28086f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.99,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   protected synchronized void updateRMDelegationTokenState(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n       throws Exception {\n-    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n+    SafeTransaction trx \u003d new SafeTransaction();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n-    if (existsWithRetries(nodeRemovePath, false) \u003d\u003d null) {\n-      // in case znode doesn\u0027t exist\n-      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n-      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n-    } else {\n+    if (exists(nodeRemovePath)) {\n       // in case znode exists\n-      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n+      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, true);\n+    } else {\n+      // in case znode doesn\u0027t exist\n+      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, false);\n+      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     }\n-    doStoreMultiWithRetries(opList);\n+    trx.commit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    SafeTransaction trx \u003d new SafeTransaction();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (exists(nodeRemovePath)) {\n      // in case znode exists\n      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, true);\n    } else {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(trx, rmDTIdentifier, renewDate, false);\n      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    }\n    trx.commit();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "4c7b9b6abe2452c9752a11214762be2e7665fb32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3385. Fixed a race-condition in ResourceManager\u0027s ZooKeeper based state-store to avoid crashing on duplicate deletes. Contributed by Zhihai Xu.\n",
      "commitDate": "06/05/15 5:51 PM",
      "commitName": "4c7b9b6abe2452c9752a11214762be2e7665fb32",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/05/15 4:13 PM",
      "commitNameOld": "d701acc9c67adc578ba18035edde1166eedaae98",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.07,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   protected synchronized void updateRMDelegationTokenState(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n       throws Exception {\n     ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n     if (existsWithRetries(nodeRemovePath, false) \u003d\u003d null) {\n       // in case znode doesn\u0027t exist\n       addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n       LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     } else {\n       // in case znode exists\n       addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n     }\n-    doMultiWithRetries(opList);\n+    doStoreMultiWithRetries(opList);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (existsWithRetries(nodeRemovePath, false) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n    }\n    doStoreMultiWithRetries(opList);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "e516706b896743e47e2852be81944eb5613e3e76": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3469. ZKRMStateStore: Avoid setting watches that are not required. (Jun Hong via kasha)\n",
      "commitDate": "10/04/15 11:20 AM",
      "commitName": "e516706b896743e47e2852be81944eb5613e3e76",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/03/15 7:49 PM",
      "commitNameOld": "8d88691d162f87f95c9ed7e0a569ef08e8385d4f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 36.61,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   protected synchronized void updateRMDelegationTokenState(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n       throws Exception {\n     ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n-    if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n+    if (existsWithRetries(nodeRemovePath, false) \u003d\u003d null) {\n       // in case znode doesn\u0027t exist\n       addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n       LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     } else {\n       // in case znode exists\n       addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n     }\n     doMultiWithRetries(opList);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (existsWithRetries(nodeRemovePath, false) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n    }\n    doMultiWithRetries(opList);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "562a701945be3a672f9cb5a52cc6db2c1589ba2b": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2958. Made RMStateStore not update the last sequence number when updating the delegation token. Contributed by Varun Saxena.\n",
      "commitDate": "05/01/15 1:33 PM",
      "commitName": "562a701945be3a672f9cb5a52cc6db2c1589ba2b",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2958. Made RMStateStore not update the last sequence number when updating the delegation token. Contributed by Varun Saxena.\n",
          "commitDate": "05/01/15 1:33 PM",
          "commitName": "562a701945be3a672f9cb5a52cc6db2c1589ba2b",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "29/12/14 9:59 AM",
          "commitNameOld": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 7.15,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n-  protected synchronized void updateRMDelegationTokenAndSequenceNumberInternal(\n-      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n-      int latestSequenceNumber) throws Exception {\n+  protected synchronized void updateRMDelegationTokenState(\n+      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n+      throws Exception {\n     ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n     if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n       // in case znode doesn\u0027t exist\n-      addStoreOrUpdateOps(\n-          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n+      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n       LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     } else {\n       // in case znode exists\n-      addStoreOrUpdateOps(\n-          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n+      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n     }\n     doMultiWithRetries(opList);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n    }\n    doMultiWithRetries(opList);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {
            "oldValue": "updateRMDelegationTokenAndSequenceNumberInternal",
            "newValue": "updateRMDelegationTokenState"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2958. Made RMStateStore not update the last sequence number when updating the delegation token. Contributed by Varun Saxena.\n",
          "commitDate": "05/01/15 1:33 PM",
          "commitName": "562a701945be3a672f9cb5a52cc6db2c1589ba2b",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "29/12/14 9:59 AM",
          "commitNameOld": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 7.15,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n-  protected synchronized void updateRMDelegationTokenAndSequenceNumberInternal(\n-      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n-      int latestSequenceNumber) throws Exception {\n+  protected synchronized void updateRMDelegationTokenState(\n+      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n+      throws Exception {\n     ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n     if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n       // in case znode doesn\u0027t exist\n-      addStoreOrUpdateOps(\n-          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n+      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n       LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     } else {\n       // in case znode exists\n-      addStoreOrUpdateOps(\n-          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n+      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n     }\n     doMultiWithRetries(opList);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n    }\n    doMultiWithRetries(opList);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {
            "oldValue": "[rmDTIdentifier-RMDelegationTokenIdentifier, renewDate-Long, latestSequenceNumber-int]",
            "newValue": "[rmDTIdentifier-RMDelegationTokenIdentifier, renewDate-Long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2958. Made RMStateStore not update the last sequence number when updating the delegation token. Contributed by Varun Saxena.\n",
          "commitDate": "05/01/15 1:33 PM",
          "commitName": "562a701945be3a672f9cb5a52cc6db2c1589ba2b",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "29/12/14 9:59 AM",
          "commitNameOld": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 7.15,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n-  protected synchronized void updateRMDelegationTokenAndSequenceNumberInternal(\n-      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n-      int latestSequenceNumber) throws Exception {\n+  protected synchronized void updateRMDelegationTokenState(\n+      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n+      throws Exception {\n     ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n     if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n       // in case znode doesn\u0027t exist\n-      addStoreOrUpdateOps(\n-          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n+      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n       LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     } else {\n       // in case znode exists\n-      addStoreOrUpdateOps(\n-          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n+      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n     }\n     doMultiWithRetries(opList);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void updateRMDelegationTokenState(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate)\n      throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, false);\n      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(opList, rmDTIdentifier, renewDate, true);\n    }\n    doMultiWithRetries(opList);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "4f18018b7abb405f38d269da096ec9fd80c81d9a": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-2946. Fixed potential deadlock in RMStateStore. Contributed by Rohith Sharmaks\n",
      "commitDate": "23/12/14 10:14 PM",
      "commitName": "4f18018b7abb405f38d269da096ec9fd80c81d9a",
      "commitAuthor": "Jian He",
      "commitDateOld": "02/12/14 10:54 AM",
      "commitNameOld": "52bcefca8bb13d3757009f1f08203e7dca3b1e16",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 21.47,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-  protected void updateRMDelegationTokenAndSequenceNumberInternal(\n+  protected synchronized void updateRMDelegationTokenAndSequenceNumberInternal(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n       int latestSequenceNumber) throws Exception {\n     ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n     if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n       // in case znode doesn\u0027t exist\n       addStoreOrUpdateOps(\n           opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n       LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     } else {\n       // in case znode exists\n       addStoreOrUpdateOps(\n           opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n     }\n     doMultiWithRetries(opList);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void updateRMDelegationTokenAndSequenceNumberInternal(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n      int latestSequenceNumber) throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(\n          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(\n          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n    }\n    doMultiWithRetries(opList);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[protected, synchronized]"
      }
    },
    "d1d6bb70f4de66f393f2d5c52d4611b1f87b152e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2061. Revisit logging levels in ZKRMStateStore. (Ray Chiang via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/14 2:11 PM",
      "commitName": "d1d6bb70f4de66f393f2d5c52d4611b1f87b152e",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/05/14 8:24 AM",
      "commitNameOld": "49a3a0cd0ceb0dfe84367a2adfb8f9f0990a5548",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.24,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   protected void updateRMDelegationTokenAndSequenceNumberInternal(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n       int latestSequenceNumber) throws Exception {\n     ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n     if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n       // in case znode doesn\u0027t exist\n       addStoreOrUpdateOps(\n           opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n-      LOG.info(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n+      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     } else {\n       // in case znode exists\n       addStoreOrUpdateOps(\n           opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n     }\n     doMultiWithRetries(opList);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void updateRMDelegationTokenAndSequenceNumberInternal(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n      int latestSequenceNumber) throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(\n          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n      LOG.debug(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(\n          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n    }\n    doMultiWithRetries(opList);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "38d5ca2e47e8ca1b08d77fe2de6e1e83c6440344": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1934. Fixed a potential NPE in ZKRMStateStore caused by handling Disconnected event from ZK. Contributed by Karthik Kambatla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587776 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/04/14 7:02 PM",
      "commitName": "38d5ca2e47e8ca1b08d77fe2de6e1e83c6440344",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/04/14 2:51 PM",
      "commitNameOld": "c6b70f4760bc9d4028616de779ccf86219f38ec8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.17,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   protected void updateRMDelegationTokenAndSequenceNumberInternal(\n       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n       int latestSequenceNumber) throws Exception {\n     ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n     String nodeRemovePath \u003d\n         getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n             + rmDTIdentifier.getSequenceNumber());\n-    if (zkClient.exists(nodeRemovePath, true) \u003d\u003d null) {\n+    if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n       // in case znode doesn\u0027t exist\n       addStoreOrUpdateOps(\n           opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n       LOG.info(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n     } else {\n       // in case znode exists\n       addStoreOrUpdateOps(\n           opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n     }\n     doMultiWithRetries(opList);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void updateRMDelegationTokenAndSequenceNumberInternal(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n      int latestSequenceNumber) throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (existsWithRetries(nodeRemovePath, true) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(\n          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n      LOG.info(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(\n          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n    }\n    doMultiWithRetries(opList);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "ce56616037fc160ba875b496bdc369411bb873be": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1776. Fixed DelegationToken renewal to survive RM failover. Contributed by Zhijie Shen\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580154 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 9:12 PM",
      "commitName": "ce56616037fc160ba875b496bdc369411bb873be",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,19 @@\n+  protected void updateRMDelegationTokenAndSequenceNumberInternal(\n+      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n+      int latestSequenceNumber) throws Exception {\n+    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n+    String nodeRemovePath \u003d\n+        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n+            + rmDTIdentifier.getSequenceNumber());\n+    if (zkClient.exists(nodeRemovePath, true) \u003d\u003d null) {\n+      // in case znode doesn\u0027t exist\n+      addStoreOrUpdateOps(\n+          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n+      LOG.info(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n+    } else {\n+      // in case znode exists\n+      addStoreOrUpdateOps(\n+          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n+    }\n+    doMultiWithRetries(opList);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void updateRMDelegationTokenAndSequenceNumberInternal(\n      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,\n      int latestSequenceNumber) throws Exception {\n    ArrayList\u003cOp\u003e opList \u003d new ArrayList\u003cOp\u003e();\n    String nodeRemovePath \u003d\n        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX\n            + rmDTIdentifier.getSequenceNumber());\n    if (zkClient.exists(nodeRemovePath, true) \u003d\u003d null) {\n      // in case znode doesn\u0027t exist\n      addStoreOrUpdateOps(\n          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);\n      LOG.info(\"Attempted to update a non-existing znode \" + nodeRemovePath);\n    } else {\n      // in case znode exists\n      addStoreOrUpdateOps(\n          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);\n    }\n    doMultiWithRetries(opList);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java"
    }
  }
}