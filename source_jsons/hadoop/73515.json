{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "handleSaslConnectionFailure",
  "functionId": "handleSaslConnectionFailure___currRetries-int(modifiers-final)__maxRetries-int(modifiers-final)__ex-Exception(modifiers-final)__rand-Random(modifiers-final)__ugi-UserGroupInformation(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 728,
  "functionEndLine": 781,
  "numCommitsSeen": 159,
  "timeTaken": 4412,
  "changeHistory": [
    "d887e49dd4ed2b94bbb53b7608586f5da6cee037",
    "7dae5b5a880205fd0125c143c44498db79c19392",
    "943d3f641cd7256ee6c9c0fe72314aee7ce15e91",
    "65be21267587f04a2c33af65b951211cc9085b15",
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7efb9640be26aabe3878310e82248a1b6b767a9a",
    "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f"
  ],
  "changeHistoryShort": {
    "d887e49dd4ed2b94bbb53b7608586f5da6cee037": "Ybodychange",
    "7dae5b5a880205fd0125c143c44498db79c19392": "Ybodychange",
    "943d3f641cd7256ee6c9c0fe72314aee7ce15e91": "Ybodychange",
    "65be21267587f04a2c33af65b951211cc9085b15": "Ybodychange",
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7efb9640be26aabe3878310e82248a1b6b767a9a": "Ybodychange",
    "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d887e49dd4ed2b94bbb53b7608586f5da6cee037": {
      "type": "Ybodychange",
      "commitMessage": "Remove WARN log when ipc connection interrupted in Client#handleSaslConnectionFailure()\n\nSigned-off-by: sunlisheng \u003csunlisheng@xiaomi.com\u003e\n",
      "commitDate": "21/01/20 1:22 AM",
      "commitName": "d887e49dd4ed2b94bbb53b7608586f5da6cee037",
      "commitAuthor": "sunlisheng",
      "commitDateOld": "01/08/19 3:50 PM",
      "commitNameOld": "b94eba9f11af66b10638dd255c224e946d842b8c",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 172.44,
      "commitsBetweenForRepo": 1012,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,54 @@\n     private synchronized void handleSaslConnectionFailure(\n         final int currRetries, final int maxRetries, final Exception ex,\n         final Random rand, final UserGroupInformation ugi) throws IOException,\n         InterruptedException {\n       ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws IOException, InterruptedException {\n           final short MAX_BACKOFF \u003d 5000;\n           closeConnection();\n           disposeSasl();\n           if (shouldAuthenticateOverKrb()) {\n             if (currRetries \u003c maxRetries) {\n               if(LOG.isDebugEnabled()) {\n                 LOG.debug(\"Exception encountered while connecting to \"\n                     + \"the server : \" + ex);\n               }\n               // try re-login\n               if (UserGroupInformation.isLoginKeytabBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromKeytab();\n               } else if (UserGroupInformation.isLoginTicketBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromTicketCache();\n               }\n               // have granularity of milliseconds\n               //we are sleeping with the Connection lock held but since this\n               //connection instance is being used for connecting to the server\n               //in question, it is okay\n               Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n               return null;\n             } else {\n               String msg \u003d \"Couldn\u0027t setup connection for \"\n                   + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                   + remoteId;\n               LOG.warn(msg, ex);\n               throw (IOException) new IOException(msg).initCause(ex);\n             }\n           } else {\n-            LOG.warn(\"Exception encountered while connecting to \"\n-                + \"the server : \" + ex);\n+            // With RequestHedgingProxyProvider, one rpc call will send multiple\n+            // requests to all namenodes. After one request return successfully,\n+            // all other requests will be interrupted. It\u0027s not a big problem,\n+            // and should not print a warning log.\n+            if (ex instanceof InterruptedIOException) {\n+              LOG.debug(\"Exception encountered while connecting to the server\",\n+                  ex);\n+            } else {\n+              LOG.warn(\"Exception encountered while connecting to the server \",\n+                  ex);\n+            }\n           }\n           if (ex instanceof RemoteException)\n             throw (RemoteException) ex;\n           throw new IOException(ex);\n         }\n       });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else if (UserGroupInformation.isLoginTicketBased()) {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + remoteId;\n              LOG.warn(msg, ex);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            // With RequestHedgingProxyProvider, one rpc call will send multiple\n            // requests to all namenodes. After one request return successfully,\n            // all other requests will be interrupted. It\u0027s not a big problem,\n            // and should not print a warning log.\n            if (ex instanceof InterruptedIOException) {\n              LOG.debug(\"Exception encountered while connecting to the server\",\n                  ex);\n            } else {\n              LOG.warn(\"Exception encountered while connecting to the server \",\n                  ex);\n            }\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "7dae5b5a880205fd0125c143c44498db79c19392": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11291. Log the cause of SASL connection failures. Contributed by Stephen Chu.\n",
      "commitDate": "12/11/14 9:54 PM",
      "commitName": "7dae5b5a880205fd0125c143c44498db79c19392",
      "commitAuthor": "cnauroth",
      "commitDateOld": "19/09/14 9:23 PM",
      "commitNameOld": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 54.06,
      "commitsBetweenForRepo": 534,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private synchronized void handleSaslConnectionFailure(\n         final int currRetries, final int maxRetries, final Exception ex,\n         final Random rand, final UserGroupInformation ugi) throws IOException,\n         InterruptedException {\n       ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws IOException, InterruptedException {\n           final short MAX_BACKOFF \u003d 5000;\n           closeConnection();\n           disposeSasl();\n           if (shouldAuthenticateOverKrb()) {\n             if (currRetries \u003c maxRetries) {\n               if(LOG.isDebugEnabled()) {\n                 LOG.debug(\"Exception encountered while connecting to \"\n                     + \"the server : \" + ex);\n               }\n               // try re-login\n               if (UserGroupInformation.isLoginKeytabBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromKeytab();\n               } else if (UserGroupInformation.isLoginTicketBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromTicketCache();\n               }\n               // have granularity of milliseconds\n               //we are sleeping with the Connection lock held but since this\n               //connection instance is being used for connecting to the server\n               //in question, it is okay\n               Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n               return null;\n             } else {\n               String msg \u003d \"Couldn\u0027t setup connection for \"\n                   + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                   + remoteId;\n-              LOG.warn(msg);\n+              LOG.warn(msg, ex);\n               throw (IOException) new IOException(msg).initCause(ex);\n             }\n           } else {\n             LOG.warn(\"Exception encountered while connecting to \"\n                 + \"the server : \" + ex);\n           }\n           if (ex instanceof RemoteException)\n             throw (RemoteException) ex;\n           throw new IOException(ex);\n         }\n       });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else if (UserGroupInformation.isLoginTicketBased()) {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + remoteId;\n              LOG.warn(msg, ex);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "943d3f641cd7256ee6c9c0fe72314aee7ce15e91": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10342. Add a new method to UGI to use a Kerberos login subject to\nbuild a new UGI. (Larry McCay via omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568525 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 1:25 PM",
      "commitName": "943d3f641cd7256ee6c9c0fe72314aee7ce15e91",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "11/02/14 11:01 PM",
      "commitNameOld": "fa78a7a99a30ed8845498bb22fe3af1c7b26b1dd",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 2.6,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private synchronized void handleSaslConnectionFailure(\n         final int currRetries, final int maxRetries, final Exception ex,\n         final Random rand, final UserGroupInformation ugi) throws IOException,\n         InterruptedException {\n       ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws IOException, InterruptedException {\n           final short MAX_BACKOFF \u003d 5000;\n           closeConnection();\n           disposeSasl();\n           if (shouldAuthenticateOverKrb()) {\n             if (currRetries \u003c maxRetries) {\n               if(LOG.isDebugEnabled()) {\n                 LOG.debug(\"Exception encountered while connecting to \"\n                     + \"the server : \" + ex);\n               }\n               // try re-login\n               if (UserGroupInformation.isLoginKeytabBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromKeytab();\n-              } else {\n+              } else if (UserGroupInformation.isLoginTicketBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromTicketCache();\n               }\n               // have granularity of milliseconds\n               //we are sleeping with the Connection lock held but since this\n               //connection instance is being used for connecting to the server\n               //in question, it is okay\n               Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n               return null;\n             } else {\n               String msg \u003d \"Couldn\u0027t setup connection for \"\n                   + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                   + remoteId;\n               LOG.warn(msg);\n               throw (IOException) new IOException(msg).initCause(ex);\n             }\n           } else {\n             LOG.warn(\"Exception encountered while connecting to \"\n                 + \"the server : \" + ex);\n           }\n           if (ex instanceof RemoteException)\n             throw (RemoteException) ex;\n           throw new IOException(ex);\n         }\n       });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else if (UserGroupInformation.isLoginTicketBased()) {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + remoteId;\n              LOG.warn(msg);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "65be21267587f04a2c33af65b951211cc9085b15": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9698. [RPC v9] Client must honor server\u0027s SASL negotiate response (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 7:44 AM",
      "commitName": "65be21267587f04a2c33af65b951211cc9085b15",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "22/07/13 12:22 AM",
      "commitNameOld": "3eb61be352589491117ac2781bb18f55988a8084",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.31,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private synchronized void handleSaslConnectionFailure(\n         final int currRetries, final int maxRetries, final Exception ex,\n         final Random rand, final UserGroupInformation ugi) throws IOException,\n         InterruptedException {\n       ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws IOException, InterruptedException {\n           final short MAX_BACKOFF \u003d 5000;\n           closeConnection();\n           disposeSasl();\n           if (shouldAuthenticateOverKrb()) {\n             if (currRetries \u003c maxRetries) {\n               if(LOG.isDebugEnabled()) {\n                 LOG.debug(\"Exception encountered while connecting to \"\n                     + \"the server : \" + ex);\n               }\n               // try re-login\n               if (UserGroupInformation.isLoginKeytabBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromKeytab();\n               } else {\n                 UserGroupInformation.getLoginUser().reloginFromTicketCache();\n               }\n               // have granularity of milliseconds\n               //we are sleeping with the Connection lock held but since this\n               //connection instance is being used for connecting to the server\n               //in question, it is okay\n               Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n               return null;\n             } else {\n               String msg \u003d \"Couldn\u0027t setup connection for \"\n                   + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n-                  + serverPrincipal;\n+                  + remoteId;\n               LOG.warn(msg);\n               throw (IOException) new IOException(msg).initCause(ex);\n             }\n           } else {\n             LOG.warn(\"Exception encountered while connecting to \"\n                 + \"the server : \" + ex);\n           }\n           if (ex instanceof RemoteException)\n             throw (RemoteException) ex;\n           throw new IOException(ex);\n         }\n       });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + remoteId;\n              LOG.warn(msg);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3844. Add @Override and remove {@inheritdoc} and unnecessary imports. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 6:03 PM",
      "commitName": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "26/07/12 11:22 AM",
      "commitNameOld": "2f478ac89cb592165ab462cd52235814507df9fe",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 29.28,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n     private synchronized void handleSaslConnectionFailure(\n         final int currRetries, final int maxRetries, final Exception ex,\n         final Random rand, final UserGroupInformation ugi) throws IOException,\n         InterruptedException {\n       ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n+        @Override\n         public Object run() throws IOException, InterruptedException {\n           final short MAX_BACKOFF \u003d 5000;\n           closeConnection();\n           disposeSasl();\n           if (shouldAuthenticateOverKrb()) {\n             if (currRetries \u003c maxRetries) {\n               if(LOG.isDebugEnabled()) {\n                 LOG.debug(\"Exception encountered while connecting to \"\n                     + \"the server : \" + ex);\n               }\n               // try re-login\n               if (UserGroupInformation.isLoginKeytabBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromKeytab();\n               } else {\n                 UserGroupInformation.getLoginUser().reloginFromTicketCache();\n               }\n               // have granularity of milliseconds\n               //we are sleeping with the Connection lock held but since this\n               //connection instance is being used for connecting to the server\n               //in question, it is okay\n               Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n               return null;\n             } else {\n               String msg \u003d \"Couldn\u0027t setup connection for \"\n                   + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                   + serverPrincipal;\n               LOG.warn(msg);\n               throw (IOException) new IOException(msg).initCause(ex);\n             }\n           } else {\n             LOG.warn(\"Exception encountered while connecting to \"\n                 + \"the server : \" + ex);\n           }\n           if (ex instanceof RemoteException)\n             throw (RemoteException) ex;\n           throw new IOException(ex);\n         }\n       });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + serverPrincipal;\n              LOG.warn(msg);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + serverPrincipal;\n              LOG.warn(msg);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + serverPrincipal;\n              LOG.warn(msg);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + serverPrincipal;\n              LOG.warn(msg);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "7efb9640be26aabe3878310e82248a1b6b767a9a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6884. Add LOG.isDebugEnabled() guard for each LOG.debug(..).  Contributed by Erik Steffl\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@990460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/08/10 3:44 PM",
      "commitName": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/08/10 7:53 PM",
      "commitNameOld": "97ce72a97efb57a5dbfb759ac8144c0890583068",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n     private synchronized void handleSaslConnectionFailure(\n         final int currRetries, final int maxRetries, final Exception ex,\n         final Random rand, final UserGroupInformation ugi) throws IOException,\n         InterruptedException {\n       ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         public Object run() throws IOException, InterruptedException {\n           final short MAX_BACKOFF \u003d 5000;\n           closeConnection();\n           disposeSasl();\n           if (shouldAuthenticateOverKrb()) {\n             if (currRetries \u003c maxRetries) {\n-              LOG.debug(\"Exception encountered while connecting to \"\n-                  + \"the server : \" + ex);\n+              if(LOG.isDebugEnabled()) {\n+                LOG.debug(\"Exception encountered while connecting to \"\n+                    + \"the server : \" + ex);\n+              }\n               // try re-login\n               if (UserGroupInformation.isLoginKeytabBased()) {\n                 UserGroupInformation.getLoginUser().reloginFromKeytab();\n               } else {\n                 UserGroupInformation.getLoginUser().reloginFromTicketCache();\n               }\n               // have granularity of milliseconds\n               //we are sleeping with the Connection lock held but since this\n               //connection instance is being used for connecting to the server\n               //in question, it is okay\n               Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n               return null;\n             } else {\n               String msg \u003d \"Couldn\u0027t setup connection for \"\n                   + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                   + serverPrincipal;\n               LOG.warn(msg);\n               throw (IOException) new IOException(msg).initCause(ex);\n             }\n           } else {\n             LOG.warn(\"Exception encountered while connecting to \"\n                 + \"the server : \" + ex);\n           }\n           if (ex instanceof RemoteException)\n             throw (RemoteException) ex;\n           throw new IOException(ex);\n         }\n       });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              if(LOG.isDebugEnabled()) {\n                LOG.debug(\"Exception encountered while connecting to \"\n                    + \"the server : \" + ex);\n              }\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + serverPrincipal;\n              LOG.warn(msg);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6706. Improves the sasl failure handling due to expired tickets, and other server detected failures. Contributed by Jitendra Pandey and Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@981714 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/10 5:51 PM",
      "commitName": "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,42 @@\n+    private synchronized void handleSaslConnectionFailure(\n+        final int currRetries, final int maxRetries, final Exception ex,\n+        final Random rand, final UserGroupInformation ugi) throws IOException,\n+        InterruptedException {\n+      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n+        public Object run() throws IOException, InterruptedException {\n+          final short MAX_BACKOFF \u003d 5000;\n+          closeConnection();\n+          disposeSasl();\n+          if (shouldAuthenticateOverKrb()) {\n+            if (currRetries \u003c maxRetries) {\n+              LOG.debug(\"Exception encountered while connecting to \"\n+                  + \"the server : \" + ex);\n+              // try re-login\n+              if (UserGroupInformation.isLoginKeytabBased()) {\n+                UserGroupInformation.getLoginUser().reloginFromKeytab();\n+              } else {\n+                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n+              }\n+              // have granularity of milliseconds\n+              //we are sleeping with the Connection lock held but since this\n+              //connection instance is being used for connecting to the server\n+              //in question, it is okay\n+              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n+              return null;\n+            } else {\n+              String msg \u003d \"Couldn\u0027t setup connection for \"\n+                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n+                  + serverPrincipal;\n+              LOG.warn(msg);\n+              throw (IOException) new IOException(msg).initCause(ex);\n+            }\n+          } else {\n+            LOG.warn(\"Exception encountered while connecting to \"\n+                + \"the server : \" + ex);\n+          }\n+          if (ex instanceof RemoteException)\n+            throw (RemoteException) ex;\n+          throw new IOException(ex);\n+        }\n+      });\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void handleSaslConnectionFailure(\n        final int currRetries, final int maxRetries, final Exception ex,\n        final Random rand, final UserGroupInformation ugi) throws IOException,\n        InterruptedException {\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        public Object run() throws IOException, InterruptedException {\n          final short MAX_BACKOFF \u003d 5000;\n          closeConnection();\n          disposeSasl();\n          if (shouldAuthenticateOverKrb()) {\n            if (currRetries \u003c maxRetries) {\n              LOG.debug(\"Exception encountered while connecting to \"\n                  + \"the server : \" + ex);\n              // try re-login\n              if (UserGroupInformation.isLoginKeytabBased()) {\n                UserGroupInformation.getLoginUser().reloginFromKeytab();\n              } else {\n                UserGroupInformation.getLoginUser().reloginFromTicketCache();\n              }\n              // have granularity of milliseconds\n              //we are sleeping with the Connection lock held but since this\n              //connection instance is being used for connecting to the server\n              //in question, it is okay\n              Thread.sleep((rand.nextInt(MAX_BACKOFF) + 1));\n              return null;\n            } else {\n              String msg \u003d \"Couldn\u0027t setup connection for \"\n                  + UserGroupInformation.getLoginUser().getUserName() + \" to \"\n                  + serverPrincipal;\n              LOG.warn(msg);\n              throw (IOException) new IOException(msg).initCause(ex);\n            }\n          } else {\n            LOG.warn(\"Exception encountered while connecting to \"\n                + \"the server : \" + ex);\n          }\n          if (ex instanceof RemoteException)\n            throw (RemoteException) ex;\n          throw new IOException(ex);\n        }\n      });\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}