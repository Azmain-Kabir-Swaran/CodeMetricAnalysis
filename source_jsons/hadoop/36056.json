{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppManager.java",
  "functionName": "validateAndCreateResourceRequest",
  "functionId": "validateAndCreateResourceRequest___submissionContext-ApplicationSubmissionContext__isRecovery-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
  "functionStartLine": 522,
  "functionEndLine": 608,
  "numCommitsSeen": 177,
  "timeTaken": 7487,
  "changeHistory": [
    "c2731d4b6399f88f76341ed697e80652ed1b61ea",
    "570fa2da20706490dc7823efd0ce0cef3ddc81f9",
    "fd6be5898ad1a650e3bceacb8169a53520da57e5",
    "f1a893fdbc2dbe949cae786f08bdb2651b88d673",
    "9bae6720cb8432efd78c909dc624c00e367cedf5",
    "ac16400e1fb85a4186e5bf5bbc9cf204735ae74f",
    "25f9872be63423ada6a18481eaad2888e731fdac",
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
    "f65eeb412d140a3808bcf99344a9f3a965918f70",
    "968425e9f7b850ff9c2ab8ca37a64c3fdbe77dbf",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "512475e56f0a27bf3c3ff596184f96993bb4bef4"
  ],
  "changeHistoryShort": {
    "c2731d4b6399f88f76341ed697e80652ed1b61ea": "Ybodychange",
    "570fa2da20706490dc7823efd0ce0cef3ddc81f9": "Ybodychange",
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": "Ybodychange",
    "f1a893fdbc2dbe949cae786f08bdb2651b88d673": "Ybodychange",
    "9bae6720cb8432efd78c909dc624c00e367cedf5": "Ymultichange(Yreturntypechange,Ybodychange)",
    "ac16400e1fb85a4186e5bf5bbc9cf204735ae74f": "Ybodychange",
    "25f9872be63423ada6a18481eaad2888e731fdac": "Ybodychange",
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1": "Ybodychange",
    "f65eeb412d140a3808bcf99344a9f3a965918f70": "Ymultichange(Yparameterchange,Ybodychange)",
    "968425e9f7b850ff9c2ab8ca37a64c3fdbe77dbf": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "512475e56f0a27bf3c3ff596184f96993bb4bef4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2731d4b6399f88f76341ed697e80652ed1b61ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9730. Support forcing configured partitions to be exclusive based on app node label\n",
      "commitDate": "24/09/19 1:51 PM",
      "commitName": "c2731d4b6399f88f76341ed697e80652ed1b61ea",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "08/09/19 7:07 PM",
      "commitNameOld": "43e389b9801e09741fdf78fef067b8ac60f691c8",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 15.78,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,87 @@\n   private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n       List\u003cResourceRequest\u003e amReqs \u003d\n           submissionContext.getAMContainerResourceRequests();\n       if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n         if (submissionContext.getResource() !\u003d null) {\n           amReqs \u003d Collections.singletonList(BuilderUtils\n               .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                   ResourceRequest.ANY, submissionContext.getResource(), 1));\n         } else {\n           throw new InvalidResourceRequestException(\"Invalid resource request, \"\n               + \"no resources requested\");\n         }\n       }\n \n       try {\n         // Find the ANY request and ensure there\u0027s only one\n         ResourceRequest anyReq \u003d null;\n         for (ResourceRequest amReq : amReqs) {\n           if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n             if (anyReq \u003d\u003d null) {\n               anyReq \u003d amReq;\n             } else {\n               throw new InvalidResourceRequestException(\"Invalid resource \"\n                   + \"request, only one resource request with \"\n                   + ResourceRequest.ANY + \" is allowed\");\n             }\n           }\n         }\n         if (anyReq \u003d\u003d null) {\n           throw new InvalidResourceRequestException(\"Invalid resource request, \"\n               + \"no resource request specified with \" + ResourceRequest.ANY);\n         }\n+        SchedulerUtils.enforcePartitionExclusivity(anyReq,\n+            exclusiveEnforcedPartitions,\n+            submissionContext.getNodeLabelExpression());\n \n         // Make sure that all of the requests agree with the ANY request\n         // and have correct values\n         for (ResourceRequest amReq : amReqs) {\n           amReq.setCapability(anyReq.getCapability());\n           amReq.setExecutionTypeRequest(\n               ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n           amReq.setNumContainers(1);\n           amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n         }\n \n         // set label expression for AM ANY request if not set\n         if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n           anyReq.setNodeLabelExpression(submissionContext\n               .getNodeLabelExpression());\n         }\n \n         // Put ANY request at the front\n         if (!amReqs.get(0).equals(anyReq)) {\n           amReqs.remove(anyReq);\n           amReqs.add(0, anyReq);\n         }\n \n         // Normalize all requests\n         String queue \u003d submissionContext.getQueue();\n         Resource maxAllocation \u003d scheduler.getMaximumResourceCapability(queue);\n         for (ResourceRequest amReq : amReqs) {\n           SchedulerUtils.normalizeAndValidateRequest(amReq, maxAllocation,\n               queue, isRecovery, rmContext, null, nodeLabelsEnabled);\n \n           amReq.setCapability(scheduler.getNormalizedResource(\n               amReq.getCapability(), maxAllocation));\n         }\n         return amReqs;\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      List\u003cResourceRequest\u003e amReqs \u003d\n          submissionContext.getAMContainerResourceRequests();\n      if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n        if (submissionContext.getResource() !\u003d null) {\n          amReqs \u003d Collections.singletonList(BuilderUtils\n              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                  ResourceRequest.ANY, submissionContext.getResource(), 1));\n        } else {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resources requested\");\n        }\n      }\n\n      try {\n        // Find the ANY request and ensure there\u0027s only one\n        ResourceRequest anyReq \u003d null;\n        for (ResourceRequest amReq : amReqs) {\n          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n            if (anyReq \u003d\u003d null) {\n              anyReq \u003d amReq;\n            } else {\n              throw new InvalidResourceRequestException(\"Invalid resource \"\n                  + \"request, only one resource request with \"\n                  + ResourceRequest.ANY + \" is allowed\");\n            }\n          }\n        }\n        if (anyReq \u003d\u003d null) {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resource request specified with \" + ResourceRequest.ANY);\n        }\n        SchedulerUtils.enforcePartitionExclusivity(anyReq,\n            exclusiveEnforcedPartitions,\n            submissionContext.getNodeLabelExpression());\n\n        // Make sure that all of the requests agree with the ANY request\n        // and have correct values\n        for (ResourceRequest amReq : amReqs) {\n          amReq.setCapability(anyReq.getCapability());\n          amReq.setExecutionTypeRequest(\n              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n          amReq.setNumContainers(1);\n          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n        }\n\n        // set label expression for AM ANY request if not set\n        if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n          anyReq.setNodeLabelExpression(submissionContext\n              .getNodeLabelExpression());\n        }\n\n        // Put ANY request at the front\n        if (!amReqs.get(0).equals(anyReq)) {\n          amReqs.remove(anyReq);\n          amReqs.add(0, anyReq);\n        }\n\n        // Normalize all requests\n        String queue \u003d submissionContext.getQueue();\n        Resource maxAllocation \u003d scheduler.getMaximumResourceCapability(queue);\n        for (ResourceRequest amReq : amReqs) {\n          SchedulerUtils.normalizeAndValidateRequest(amReq, maxAllocation,\n              queue, isRecovery, rmContext, null, nodeLabelsEnabled);\n\n          amReq.setCapability(scheduler.getNormalizedResource(\n              amReq.getCapability(), maxAllocation));\n        }\n        return amReqs;\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "570fa2da20706490dc7823efd0ce0cef3ddc81f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9508. YarnConfiguration areNodeLabel enabled is costly in allocation flow. Contributed by Bilwa S T.\n",
      "commitDate": "15/05/19 1:00 AM",
      "commitName": "570fa2da20706490dc7823efd0ce0cef3ddc81f9",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "25/03/19 10:47 PM",
      "commitNameOld": "5257f50abb71905ef3068fd45541d00ce9e8f355",
      "commitAuthorOld": "yufei",
      "daysBetweenCommits": 50.09,
      "commitsBetweenForRepo": 297,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n   private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n       List\u003cResourceRequest\u003e amReqs \u003d\n           submissionContext.getAMContainerResourceRequests();\n       if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n         if (submissionContext.getResource() !\u003d null) {\n           amReqs \u003d Collections.singletonList(BuilderUtils\n               .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                   ResourceRequest.ANY, submissionContext.getResource(), 1));\n         } else {\n           throw new InvalidResourceRequestException(\"Invalid resource request, \"\n               + \"no resources requested\");\n         }\n       }\n \n       try {\n         // Find the ANY request and ensure there\u0027s only one\n         ResourceRequest anyReq \u003d null;\n         for (ResourceRequest amReq : amReqs) {\n           if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n             if (anyReq \u003d\u003d null) {\n               anyReq \u003d amReq;\n             } else {\n               throw new InvalidResourceRequestException(\"Invalid resource \"\n                   + \"request, only one resource request with \"\n                   + ResourceRequest.ANY + \" is allowed\");\n             }\n           }\n         }\n         if (anyReq \u003d\u003d null) {\n           throw new InvalidResourceRequestException(\"Invalid resource request, \"\n               + \"no resource request specified with \" + ResourceRequest.ANY);\n         }\n \n         // Make sure that all of the requests agree with the ANY request\n         // and have correct values\n         for (ResourceRequest amReq : amReqs) {\n           amReq.setCapability(anyReq.getCapability());\n           amReq.setExecutionTypeRequest(\n               ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n           amReq.setNumContainers(1);\n           amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n         }\n \n         // set label expression for AM ANY request if not set\n         if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n           anyReq.setNodeLabelExpression(submissionContext\n               .getNodeLabelExpression());\n         }\n \n         // Put ANY request at the front\n         if (!amReqs.get(0).equals(anyReq)) {\n           amReqs.remove(anyReq);\n           amReqs.add(0, anyReq);\n         }\n \n         // Normalize all requests\n         String queue \u003d submissionContext.getQueue();\n         Resource maxAllocation \u003d scheduler.getMaximumResourceCapability(queue);\n         for (ResourceRequest amReq : amReqs) {\n           SchedulerUtils.normalizeAndValidateRequest(amReq, maxAllocation,\n-              queue, scheduler, isRecovery, rmContext, null);\n+              queue, isRecovery, rmContext, null, nodeLabelsEnabled);\n \n           amReq.setCapability(scheduler.getNormalizedResource(\n               amReq.getCapability(), maxAllocation));\n         }\n         return amReqs;\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      List\u003cResourceRequest\u003e amReqs \u003d\n          submissionContext.getAMContainerResourceRequests();\n      if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n        if (submissionContext.getResource() !\u003d null) {\n          amReqs \u003d Collections.singletonList(BuilderUtils\n              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                  ResourceRequest.ANY, submissionContext.getResource(), 1));\n        } else {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resources requested\");\n        }\n      }\n\n      try {\n        // Find the ANY request and ensure there\u0027s only one\n        ResourceRequest anyReq \u003d null;\n        for (ResourceRequest amReq : amReqs) {\n          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n            if (anyReq \u003d\u003d null) {\n              anyReq \u003d amReq;\n            } else {\n              throw new InvalidResourceRequestException(\"Invalid resource \"\n                  + \"request, only one resource request with \"\n                  + ResourceRequest.ANY + \" is allowed\");\n            }\n          }\n        }\n        if (anyReq \u003d\u003d null) {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resource request specified with \" + ResourceRequest.ANY);\n        }\n\n        // Make sure that all of the requests agree with the ANY request\n        // and have correct values\n        for (ResourceRequest amReq : amReqs) {\n          amReq.setCapability(anyReq.getCapability());\n          amReq.setExecutionTypeRequest(\n              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n          amReq.setNumContainers(1);\n          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n        }\n\n        // set label expression for AM ANY request if not set\n        if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n          anyReq.setNodeLabelExpression(submissionContext\n              .getNodeLabelExpression());\n        }\n\n        // Put ANY request at the front\n        if (!amReqs.get(0).equals(anyReq)) {\n          amReqs.remove(anyReq);\n          amReqs.add(0, anyReq);\n        }\n\n        // Normalize all requests\n        String queue \u003d submissionContext.getQueue();\n        Resource maxAllocation \u003d scheduler.getMaximumResourceCapability(queue);\n        for (ResourceRequest amReq : amReqs) {\n          SchedulerUtils.normalizeAndValidateRequest(amReq, maxAllocation,\n              queue, isRecovery, rmContext, null, nodeLabelsEnabled);\n\n          amReq.setCapability(scheduler.getNormalizedResource(\n              amReq.getCapability(), maxAllocation));\n        }\n        return amReqs;\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal Bálint Steinbach.\n",
      "commitDate": "29/09/18 2:47 AM",
      "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "14/09/18 1:33 AM",
      "commitNameOld": "f1a893fdbc2dbe949cae786f08bdb2651b88d673",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 15.05,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n   private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n       List\u003cResourceRequest\u003e amReqs \u003d\n           submissionContext.getAMContainerResourceRequests();\n       if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n         if (submissionContext.getResource() !\u003d null) {\n           amReqs \u003d Collections.singletonList(BuilderUtils\n               .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                   ResourceRequest.ANY, submissionContext.getResource(), 1));\n         } else {\n           throw new InvalidResourceRequestException(\"Invalid resource request, \"\n               + \"no resources requested\");\n         }\n       }\n \n       try {\n         // Find the ANY request and ensure there\u0027s only one\n         ResourceRequest anyReq \u003d null;\n         for (ResourceRequest amReq : amReqs) {\n           if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n             if (anyReq \u003d\u003d null) {\n               anyReq \u003d amReq;\n             } else {\n               throw new InvalidResourceRequestException(\"Invalid resource \"\n                   + \"request, only one resource request with \"\n                   + ResourceRequest.ANY + \" is allowed\");\n             }\n           }\n         }\n         if (anyReq \u003d\u003d null) {\n           throw new InvalidResourceRequestException(\"Invalid resource request, \"\n               + \"no resource request specified with \" + ResourceRequest.ANY);\n         }\n \n         // Make sure that all of the requests agree with the ANY request\n         // and have correct values\n         for (ResourceRequest amReq : amReqs) {\n           amReq.setCapability(anyReq.getCapability());\n           amReq.setExecutionTypeRequest(\n               ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n           amReq.setNumContainers(1);\n           amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n         }\n \n         // set label expression for AM ANY request if not set\n         if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n           anyReq.setNodeLabelExpression(submissionContext\n               .getNodeLabelExpression());\n         }\n \n         // Put ANY request at the front\n         if (!amReqs.get(0).equals(anyReq)) {\n           amReqs.remove(anyReq);\n           amReqs.add(0, anyReq);\n         }\n \n         // Normalize all requests\n         String queue \u003d submissionContext.getQueue();\n+        Resource maxAllocation \u003d scheduler.getMaximumResourceCapability(queue);\n         for (ResourceRequest amReq : amReqs) {\n-          SchedulerUtils.normalizeAndValidateRequest(amReq,\n-              scheduler.getMaximumResourceCapability(queue),\n-              queue, scheduler, isRecovery, rmContext);\n+          SchedulerUtils.normalizeAndValidateRequest(amReq, maxAllocation,\n+              queue, scheduler, isRecovery, rmContext, null);\n \n-          amReq.setCapability(\n-              scheduler.getNormalizedResource(amReq.getCapability()));\n+          amReq.setCapability(scheduler.getNormalizedResource(\n+              amReq.getCapability(), maxAllocation));\n         }\n         return amReqs;\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      List\u003cResourceRequest\u003e amReqs \u003d\n          submissionContext.getAMContainerResourceRequests();\n      if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n        if (submissionContext.getResource() !\u003d null) {\n          amReqs \u003d Collections.singletonList(BuilderUtils\n              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                  ResourceRequest.ANY, submissionContext.getResource(), 1));\n        } else {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resources requested\");\n        }\n      }\n\n      try {\n        // Find the ANY request and ensure there\u0027s only one\n        ResourceRequest anyReq \u003d null;\n        for (ResourceRequest amReq : amReqs) {\n          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n            if (anyReq \u003d\u003d null) {\n              anyReq \u003d amReq;\n            } else {\n              throw new InvalidResourceRequestException(\"Invalid resource \"\n                  + \"request, only one resource request with \"\n                  + ResourceRequest.ANY + \" is allowed\");\n            }\n          }\n        }\n        if (anyReq \u003d\u003d null) {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resource request specified with \" + ResourceRequest.ANY);\n        }\n\n        // Make sure that all of the requests agree with the ANY request\n        // and have correct values\n        for (ResourceRequest amReq : amReqs) {\n          amReq.setCapability(anyReq.getCapability());\n          amReq.setExecutionTypeRequest(\n              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n          amReq.setNumContainers(1);\n          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n        }\n\n        // set label expression for AM ANY request if not set\n        if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n          anyReq.setNodeLabelExpression(submissionContext\n              .getNodeLabelExpression());\n        }\n\n        // Put ANY request at the front\n        if (!amReqs.get(0).equals(anyReq)) {\n          amReqs.remove(anyReq);\n          amReqs.add(0, anyReq);\n        }\n\n        // Normalize all requests\n        String queue \u003d submissionContext.getQueue();\n        Resource maxAllocation \u003d scheduler.getMaximumResourceCapability(queue);\n        for (ResourceRequest amReq : amReqs) {\n          SchedulerUtils.normalizeAndValidateRequest(amReq, maxAllocation,\n              queue, scheduler, isRecovery, rmContext, null);\n\n          amReq.setCapability(scheduler.getNormalizedResource(\n              amReq.getCapability(), maxAllocation));\n        }\n        return amReqs;\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "f1a893fdbc2dbe949cae786f08bdb2651b88d673": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8720. CapacityScheduler does not enforce max resource allocation check at queue level. Contributed by Tarun Parimi.\n",
      "commitDate": "14/09/18 1:33 AM",
      "commitName": "f1a893fdbc2dbe949cae786f08bdb2651b88d673",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "09/08/18 2:58 PM",
      "commitNameOld": "b2517dd66b3c88fdd478411cf208921bd3023755",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 35.44,
      "commitsBetweenForRepo": 322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,84 @@\n   private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n       List\u003cResourceRequest\u003e amReqs \u003d\n           submissionContext.getAMContainerResourceRequests();\n       if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n         if (submissionContext.getResource() !\u003d null) {\n           amReqs \u003d Collections.singletonList(BuilderUtils\n               .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                   ResourceRequest.ANY, submissionContext.getResource(), 1));\n         } else {\n           throw new InvalidResourceRequestException(\"Invalid resource request, \"\n               + \"no resources requested\");\n         }\n       }\n \n       try {\n         // Find the ANY request and ensure there\u0027s only one\n         ResourceRequest anyReq \u003d null;\n         for (ResourceRequest amReq : amReqs) {\n           if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n             if (anyReq \u003d\u003d null) {\n               anyReq \u003d amReq;\n             } else {\n               throw new InvalidResourceRequestException(\"Invalid resource \"\n                   + \"request, only one resource request with \"\n                   + ResourceRequest.ANY + \" is allowed\");\n             }\n           }\n         }\n         if (anyReq \u003d\u003d null) {\n           throw new InvalidResourceRequestException(\"Invalid resource request, \"\n               + \"no resource request specified with \" + ResourceRequest.ANY);\n         }\n \n         // Make sure that all of the requests agree with the ANY request\n         // and have correct values\n         for (ResourceRequest amReq : amReqs) {\n           amReq.setCapability(anyReq.getCapability());\n           amReq.setExecutionTypeRequest(\n               ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n           amReq.setNumContainers(1);\n           amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n         }\n \n         // set label expression for AM ANY request if not set\n         if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n           anyReq.setNodeLabelExpression(submissionContext\n               .getNodeLabelExpression());\n         }\n \n         // Put ANY request at the front\n         if (!amReqs.get(0).equals(anyReq)) {\n           amReqs.remove(anyReq);\n           amReqs.add(0, anyReq);\n         }\n \n         // Normalize all requests\n+        String queue \u003d submissionContext.getQueue();\n         for (ResourceRequest amReq : amReqs) {\n           SchedulerUtils.normalizeAndValidateRequest(amReq,\n-              scheduler.getMaximumResourceCapability(),\n-              submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n+              scheduler.getMaximumResourceCapability(queue),\n+              queue, scheduler, isRecovery, rmContext);\n \n           amReq.setCapability(\n               scheduler.getNormalizedResource(amReq.getCapability()));\n         }\n         return amReqs;\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      List\u003cResourceRequest\u003e amReqs \u003d\n          submissionContext.getAMContainerResourceRequests();\n      if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n        if (submissionContext.getResource() !\u003d null) {\n          amReqs \u003d Collections.singletonList(BuilderUtils\n              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                  ResourceRequest.ANY, submissionContext.getResource(), 1));\n        } else {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resources requested\");\n        }\n      }\n\n      try {\n        // Find the ANY request and ensure there\u0027s only one\n        ResourceRequest anyReq \u003d null;\n        for (ResourceRequest amReq : amReqs) {\n          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n            if (anyReq \u003d\u003d null) {\n              anyReq \u003d amReq;\n            } else {\n              throw new InvalidResourceRequestException(\"Invalid resource \"\n                  + \"request, only one resource request with \"\n                  + ResourceRequest.ANY + \" is allowed\");\n            }\n          }\n        }\n        if (anyReq \u003d\u003d null) {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resource request specified with \" + ResourceRequest.ANY);\n        }\n\n        // Make sure that all of the requests agree with the ANY request\n        // and have correct values\n        for (ResourceRequest amReq : amReqs) {\n          amReq.setCapability(anyReq.getCapability());\n          amReq.setExecutionTypeRequest(\n              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n          amReq.setNumContainers(1);\n          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n        }\n\n        // set label expression for AM ANY request if not set\n        if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n          anyReq.setNodeLabelExpression(submissionContext\n              .getNodeLabelExpression());\n        }\n\n        // Put ANY request at the front\n        if (!amReqs.get(0).equals(anyReq)) {\n          amReqs.remove(anyReq);\n          amReqs.add(0, anyReq);\n        }\n\n        // Normalize all requests\n        String queue \u003d submissionContext.getQueue();\n        for (ResourceRequest amReq : amReqs) {\n          SchedulerUtils.normalizeAndValidateRequest(amReq,\n              scheduler.getMaximumResourceCapability(queue),\n              queue, scheduler, isRecovery, rmContext);\n\n          amReq.setCapability(\n              scheduler.getNormalizedResource(amReq.getCapability()));\n        }\n        return amReqs;\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "9bae6720cb8432efd78c909dc624c00e367cedf5": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6050. AMs can\u0027t be scheduled on racks or nodes (rkanter)\n",
      "commitDate": "27/03/17 5:23 PM",
      "commitName": "9bae6720cb8432efd78c909dc624c00e367cedf5",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6050. AMs can\u0027t be scheduled on racks or nodes (rkanter)\n",
          "commitDate": "27/03/17 5:23 PM",
          "commitName": "9bae6720cb8432efd78c909dc624c00e367cedf5",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "24/03/17 6:06 PM",
          "commitNameOld": "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a",
          "commitAuthorOld": "Tsuyoshi Ozawa",
          "daysBetweenCommits": 2.97,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,83 @@\n-  private ResourceRequest validateAndCreateResourceRequest(\n+  private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n-      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n-      if (amReq \u003d\u003d null) {\n-        amReq \u003d BuilderUtils\n-            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n-                ResourceRequest.ANY, submissionContext.getResource(), 1);\n-      }\n-\n-      // set label expression for AM container\n-      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n-        amReq.setNodeLabelExpression(submissionContext\n-            .getNodeLabelExpression());\n+      List\u003cResourceRequest\u003e amReqs \u003d\n+          submissionContext.getAMContainerResourceRequests();\n+      if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n+        if (submissionContext.getResource() !\u003d null) {\n+          amReqs \u003d Collections.singletonList(BuilderUtils\n+              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n+                  ResourceRequest.ANY, submissionContext.getResource(), 1));\n+        } else {\n+          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n+              + \"no resources requested\");\n+        }\n       }\n \n       try {\n-        SchedulerUtils.normalizeAndValidateRequest(amReq,\n-            scheduler.getMaximumResourceCapability(),\n-            submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n+        // Find the ANY request and ensure there\u0027s only one\n+        ResourceRequest anyReq \u003d null;\n+        for (ResourceRequest amReq : amReqs) {\n+          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n+            if (anyReq \u003d\u003d null) {\n+              anyReq \u003d amReq;\n+            } else {\n+              throw new InvalidResourceRequestException(\"Invalid resource \"\n+                  + \"request, only one resource request with \"\n+                  + ResourceRequest.ANY + \" is allowed\");\n+            }\n+          }\n+        }\n+        if (anyReq \u003d\u003d null) {\n+          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n+              + \"no resource request specified with \" + ResourceRequest.ANY);\n+        }\n+\n+        // Make sure that all of the requests agree with the ANY request\n+        // and have correct values\n+        for (ResourceRequest amReq : amReqs) {\n+          amReq.setCapability(anyReq.getCapability());\n+          amReq.setExecutionTypeRequest(\n+              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n+          amReq.setNumContainers(1);\n+          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n+        }\n+\n+        // set label expression for AM ANY request if not set\n+        if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n+          anyReq.setNodeLabelExpression(submissionContext\n+              .getNodeLabelExpression());\n+        }\n+\n+        // Put ANY request at the front\n+        if (!amReqs.get(0).equals(anyReq)) {\n+          amReqs.remove(anyReq);\n+          amReqs.add(0, anyReq);\n+        }\n+\n+        // Normalize all requests\n+        for (ResourceRequest amReq : amReqs) {\n+          SchedulerUtils.normalizeAndValidateRequest(amReq,\n+              scheduler.getMaximumResourceCapability(),\n+              submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n+\n+          amReq.setCapability(\n+              scheduler.getNormalizedResource(amReq.getCapability()));\n+        }\n+        return amReqs;\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n-\n-      amReq.setCapability(scheduler.getNormalizedResource(amReq.getCapability()));\n-      return amReq;\n     }\n-    \n+\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      List\u003cResourceRequest\u003e amReqs \u003d\n          submissionContext.getAMContainerResourceRequests();\n      if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n        if (submissionContext.getResource() !\u003d null) {\n          amReqs \u003d Collections.singletonList(BuilderUtils\n              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                  ResourceRequest.ANY, submissionContext.getResource(), 1));\n        } else {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resources requested\");\n        }\n      }\n\n      try {\n        // Find the ANY request and ensure there\u0027s only one\n        ResourceRequest anyReq \u003d null;\n        for (ResourceRequest amReq : amReqs) {\n          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n            if (anyReq \u003d\u003d null) {\n              anyReq \u003d amReq;\n            } else {\n              throw new InvalidResourceRequestException(\"Invalid resource \"\n                  + \"request, only one resource request with \"\n                  + ResourceRequest.ANY + \" is allowed\");\n            }\n          }\n        }\n        if (anyReq \u003d\u003d null) {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resource request specified with \" + ResourceRequest.ANY);\n        }\n\n        // Make sure that all of the requests agree with the ANY request\n        // and have correct values\n        for (ResourceRequest amReq : amReqs) {\n          amReq.setCapability(anyReq.getCapability());\n          amReq.setExecutionTypeRequest(\n              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n          amReq.setNumContainers(1);\n          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n        }\n\n        // set label expression for AM ANY request if not set\n        if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n          anyReq.setNodeLabelExpression(submissionContext\n              .getNodeLabelExpression());\n        }\n\n        // Put ANY request at the front\n        if (!amReqs.get(0).equals(anyReq)) {\n          amReqs.remove(anyReq);\n          amReqs.add(0, anyReq);\n        }\n\n        // Normalize all requests\n        for (ResourceRequest amReq : amReqs) {\n          SchedulerUtils.normalizeAndValidateRequest(amReq,\n              scheduler.getMaximumResourceCapability(),\n              submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n\n          amReq.setCapability(\n              scheduler.getNormalizedResource(amReq.getCapability()));\n        }\n        return amReqs;\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n    }\n\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {
            "oldValue": "ResourceRequest",
            "newValue": "List\u003cResourceRequest\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6050. AMs can\u0027t be scheduled on racks or nodes (rkanter)\n",
          "commitDate": "27/03/17 5:23 PM",
          "commitName": "9bae6720cb8432efd78c909dc624c00e367cedf5",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "24/03/17 6:06 PM",
          "commitNameOld": "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a",
          "commitAuthorOld": "Tsuyoshi Ozawa",
          "daysBetweenCommits": 2.97,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,83 @@\n-  private ResourceRequest validateAndCreateResourceRequest(\n+  private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n-      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n-      if (amReq \u003d\u003d null) {\n-        amReq \u003d BuilderUtils\n-            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n-                ResourceRequest.ANY, submissionContext.getResource(), 1);\n-      }\n-\n-      // set label expression for AM container\n-      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n-        amReq.setNodeLabelExpression(submissionContext\n-            .getNodeLabelExpression());\n+      List\u003cResourceRequest\u003e amReqs \u003d\n+          submissionContext.getAMContainerResourceRequests();\n+      if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n+        if (submissionContext.getResource() !\u003d null) {\n+          amReqs \u003d Collections.singletonList(BuilderUtils\n+              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n+                  ResourceRequest.ANY, submissionContext.getResource(), 1));\n+        } else {\n+          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n+              + \"no resources requested\");\n+        }\n       }\n \n       try {\n-        SchedulerUtils.normalizeAndValidateRequest(amReq,\n-            scheduler.getMaximumResourceCapability(),\n-            submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n+        // Find the ANY request and ensure there\u0027s only one\n+        ResourceRequest anyReq \u003d null;\n+        for (ResourceRequest amReq : amReqs) {\n+          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n+            if (anyReq \u003d\u003d null) {\n+              anyReq \u003d amReq;\n+            } else {\n+              throw new InvalidResourceRequestException(\"Invalid resource \"\n+                  + \"request, only one resource request with \"\n+                  + ResourceRequest.ANY + \" is allowed\");\n+            }\n+          }\n+        }\n+        if (anyReq \u003d\u003d null) {\n+          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n+              + \"no resource request specified with \" + ResourceRequest.ANY);\n+        }\n+\n+        // Make sure that all of the requests agree with the ANY request\n+        // and have correct values\n+        for (ResourceRequest amReq : amReqs) {\n+          amReq.setCapability(anyReq.getCapability());\n+          amReq.setExecutionTypeRequest(\n+              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n+          amReq.setNumContainers(1);\n+          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n+        }\n+\n+        // set label expression for AM ANY request if not set\n+        if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n+          anyReq.setNodeLabelExpression(submissionContext\n+              .getNodeLabelExpression());\n+        }\n+\n+        // Put ANY request at the front\n+        if (!amReqs.get(0).equals(anyReq)) {\n+          amReqs.remove(anyReq);\n+          amReqs.add(0, anyReq);\n+        }\n+\n+        // Normalize all requests\n+        for (ResourceRequest amReq : amReqs) {\n+          SchedulerUtils.normalizeAndValidateRequest(amReq,\n+              scheduler.getMaximumResourceCapability(),\n+              submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n+\n+          amReq.setCapability(\n+              scheduler.getNormalizedResource(amReq.getCapability()));\n+        }\n+        return amReqs;\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n-\n-      amReq.setCapability(scheduler.getNormalizedResource(amReq.getCapability()));\n-      return amReq;\n     }\n-    \n+\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cResourceRequest\u003e validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      List\u003cResourceRequest\u003e amReqs \u003d\n          submissionContext.getAMContainerResourceRequests();\n      if (amReqs \u003d\u003d null || amReqs.isEmpty()) {\n        if (submissionContext.getResource() !\u003d null) {\n          amReqs \u003d Collections.singletonList(BuilderUtils\n              .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                  ResourceRequest.ANY, submissionContext.getResource(), 1));\n        } else {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resources requested\");\n        }\n      }\n\n      try {\n        // Find the ANY request and ensure there\u0027s only one\n        ResourceRequest anyReq \u003d null;\n        for (ResourceRequest amReq : amReqs) {\n          if (amReq.getResourceName().equals(ResourceRequest.ANY)) {\n            if (anyReq \u003d\u003d null) {\n              anyReq \u003d amReq;\n            } else {\n              throw new InvalidResourceRequestException(\"Invalid resource \"\n                  + \"request, only one resource request with \"\n                  + ResourceRequest.ANY + \" is allowed\");\n            }\n          }\n        }\n        if (anyReq \u003d\u003d null) {\n          throw new InvalidResourceRequestException(\"Invalid resource request, \"\n              + \"no resource request specified with \" + ResourceRequest.ANY);\n        }\n\n        // Make sure that all of the requests agree with the ANY request\n        // and have correct values\n        for (ResourceRequest amReq : amReqs) {\n          amReq.setCapability(anyReq.getCapability());\n          amReq.setExecutionTypeRequest(\n              ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\n          amReq.setNumContainers(1);\n          amReq.setPriority(RMAppAttemptImpl.AM_CONTAINER_PRIORITY);\n        }\n\n        // set label expression for AM ANY request if not set\n        if (null \u003d\u003d anyReq.getNodeLabelExpression()) {\n          anyReq.setNodeLabelExpression(submissionContext\n              .getNodeLabelExpression());\n        }\n\n        // Put ANY request at the front\n        if (!amReqs.get(0).equals(anyReq)) {\n          amReqs.remove(anyReq);\n          amReqs.add(0, anyReq);\n        }\n\n        // Normalize all requests\n        for (ResourceRequest amReq : amReqs) {\n          SchedulerUtils.normalizeAndValidateRequest(amReq,\n              scheduler.getMaximumResourceCapability(),\n              submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n\n          amReq.setCapability(\n              scheduler.getNormalizedResource(amReq.getCapability()));\n        }\n        return amReqs;\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n    }\n\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "ac16400e1fb85a4186e5bf5bbc9cf204735ae74f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6022. Revert changes of AbstractResourceRequest (Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "07/01/17 8:24 AM",
      "commitName": "ac16400e1fb85a4186e5bf5bbc9cf204735ae74f",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "06/01/17 6:19 PM",
      "commitNameOld": "020316458dfe6059b700f8d93a9791e4cb817b3f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.59,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private ResourceRequest validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n       ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n       if (amReq \u003d\u003d null) {\n         amReq \u003d BuilderUtils\n             .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                 ResourceRequest.ANY, submissionContext.getResource(), 1);\n       }\n \n       // set label expression for AM container\n       if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n         amReq.setNodeLabelExpression(submissionContext\n             .getNodeLabelExpression());\n       }\n \n       try {\n         SchedulerUtils.normalizeAndValidateRequest(amReq,\n             scheduler.getMaximumResourceCapability(),\n             submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n \n-      scheduler.normalizeRequest(amReq);\n+      amReq.setCapability(scheduler.getNormalizedResource(amReq.getCapability()));\n       return amReq;\n     }\n     \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n      if (amReq \u003d\u003d null) {\n        amReq \u003d BuilderUtils\n            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                ResourceRequest.ANY, submissionContext.getResource(), 1);\n      }\n\n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.normalizeAndValidateRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n\n      amReq.setCapability(scheduler.getNormalizedResource(amReq.getCapability()));\n      return amReq;\n    }\n    \n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "25f9872be63423ada6a18481eaad2888e731fdac": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5774. MR Job stuck in ACCEPTED status without any progress in Fair Scheduler\nif set yarn.scheduler.minimum-allocation-mb to 0. (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "29/11/16 9:40 AM",
      "commitName": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "22/11/16 1:19 AM",
      "commitNameOld": "a926f895c11cd69cf2117c3b970304f3f1f53d92",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 7.35,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,39 @@\n   private ResourceRequest validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n       ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n       if (amReq \u003d\u003d null) {\n         amReq \u003d BuilderUtils\n             .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                 ResourceRequest.ANY, submissionContext.getResource(), 1);\n       }\n \n       // set label expression for AM container\n       if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n         amReq.setNodeLabelExpression(submissionContext\n             .getNodeLabelExpression());\n       }\n \n       try {\n         SchedulerUtils.normalizeAndValidateRequest(amReq,\n             scheduler.getMaximumResourceCapability(),\n             submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n \n-      SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n-          scheduler.getClusterResource(),\n-          scheduler.getMinimumResourceCapability(),\n-          scheduler.getMaximumResourceCapability(),\n-          scheduler.getMinimumResourceCapability());\n+      scheduler.normalizeRequest(amReq);\n       return amReq;\n     }\n     \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n      if (amReq \u003d\u003d null) {\n        amReq \u003d BuilderUtils\n            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                ResourceRequest.ANY, submissionContext.getResource(), 1);\n      }\n\n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.normalizeAndValidateRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n\n      scheduler.normalizeRequest(amReq);\n      return amReq;\n    }\n    \n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2918. RM should not fail on startup if queue\u0027s configured labels do not exist in cluster-node-labels. Contributed by Wangda Tan\n",
      "commitDate": "07/05/15 5:35 PM",
      "commitName": "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/05/15 6:18 PM",
      "commitNameOld": "f8204e241d9271497defd4d42646fb89c61cefe3",
      "commitAuthorOld": "Gera Shegalov",
      "daysBetweenCommits": 5.97,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private ResourceRequest validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n       ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n       if (amReq \u003d\u003d null) {\n         amReq \u003d BuilderUtils\n             .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                 ResourceRequest.ANY, submissionContext.getResource(), 1);\n       }\n \n       // set label expression for AM container\n       if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n         amReq.setNodeLabelExpression(submissionContext\n             .getNodeLabelExpression());\n       }\n \n       try {\n         SchedulerUtils.normalizeAndValidateRequest(amReq,\n             scheduler.getMaximumResourceCapability(),\n-            submissionContext.getQueue(), scheduler, isRecovery);\n+            submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n \n       SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n           scheduler.getClusterResource(),\n           scheduler.getMinimumResourceCapability(),\n           scheduler.getMaximumResourceCapability(),\n           scheduler.getMinimumResourceCapability());\n       return amReq;\n     }\n     \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n      if (amReq \u003d\u003d null) {\n        amReq \u003d BuilderUtils\n            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                ResourceRequest.ANY, submissionContext.getResource(), 1);\n      }\n\n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.normalizeAndValidateRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler, isRecovery, rmContext);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n\n      SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n          scheduler.getClusterResource(),\n          scheduler.getMinimumResourceCapability(),\n          scheduler.getMaximumResourceCapability(),\n          scheduler.getMinimumResourceCapability());\n      return amReq;\n    }\n    \n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "f65eeb412d140a3808bcf99344a9f3a965918f70": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3493. RM fails to come up with error \"Failed to load/recover state\" when mem settings are changed. (Jian He via wangda)\n",
      "commitDate": "17/04/15 5:11 PM",
      "commitName": "f65eeb412d140a3808bcf99344a9f3a965918f70",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3493. RM fails to come up with error \"Failed to load/recover state\" when mem settings are changed. (Jian He via wangda)\n",
          "commitDate": "17/04/15 5:11 PM",
          "commitName": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/03/15 1:49 PM",
          "commitNameOld": "968425e9f7b850ff9c2ab8ca37a64c3fdbe77dbf",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 31.14,
          "commitsBetweenForRepo": 283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n   private ResourceRequest validateAndCreateResourceRequest(\n-      ApplicationSubmissionContext submissionContext)\n+      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n-      ResourceRequest amReq;\n-      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n-        amReq \u003d submissionContext.getAMContainerResourceRequest();\n-      } else {\n-        amReq \u003d\n-            BuilderUtils.newResourceRequest(\n-                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n-                submissionContext.getResource(), 1);\n+      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n+      if (amReq \u003d\u003d null) {\n+        amReq \u003d BuilderUtils\n+            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n+                ResourceRequest.ANY, submissionContext.getResource(), 1);\n       }\n-      \n+\n       // set label expression for AM container\n       if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n         amReq.setNodeLabelExpression(submissionContext\n             .getNodeLabelExpression());\n       }\n \n       try {\n-        SchedulerUtils.validateResourceRequest(amReq,\n+        SchedulerUtils.normalizeAndValidateRequest(amReq,\n             scheduler.getMaximumResourceCapability(),\n-            submissionContext.getQueue(), scheduler);\n+            submissionContext.getQueue(), scheduler, isRecovery);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n+\n       SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n           scheduler.getClusterResource(),\n           scheduler.getMinimumResourceCapability(),\n           scheduler.getMaximumResourceCapability(),\n           scheduler.getMinimumResourceCapability());\n       return amReq;\n     }\n     \n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n      if (amReq \u003d\u003d null) {\n        amReq \u003d BuilderUtils\n            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                ResourceRequest.ANY, submissionContext.getResource(), 1);\n      }\n\n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.normalizeAndValidateRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler, isRecovery);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n\n      SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n          scheduler.getClusterResource(),\n          scheduler.getMinimumResourceCapability(),\n          scheduler.getMaximumResourceCapability(),\n          scheduler.getMinimumResourceCapability());\n      return amReq;\n    }\n    \n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {
            "oldValue": "[submissionContext-ApplicationSubmissionContext]",
            "newValue": "[submissionContext-ApplicationSubmissionContext, isRecovery-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3493. RM fails to come up with error \"Failed to load/recover state\" when mem settings are changed. (Jian He via wangda)\n",
          "commitDate": "17/04/15 5:11 PM",
          "commitName": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/03/15 1:49 PM",
          "commitNameOld": "968425e9f7b850ff9c2ab8ca37a64c3fdbe77dbf",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 31.14,
          "commitsBetweenForRepo": 283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n   private ResourceRequest validateAndCreateResourceRequest(\n-      ApplicationSubmissionContext submissionContext)\n+      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n-      ResourceRequest amReq;\n-      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n-        amReq \u003d submissionContext.getAMContainerResourceRequest();\n-      } else {\n-        amReq \u003d\n-            BuilderUtils.newResourceRequest(\n-                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n-                submissionContext.getResource(), 1);\n+      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n+      if (amReq \u003d\u003d null) {\n+        amReq \u003d BuilderUtils\n+            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n+                ResourceRequest.ANY, submissionContext.getResource(), 1);\n       }\n-      \n+\n       // set label expression for AM container\n       if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n         amReq.setNodeLabelExpression(submissionContext\n             .getNodeLabelExpression());\n       }\n \n       try {\n-        SchedulerUtils.validateResourceRequest(amReq,\n+        SchedulerUtils.normalizeAndValidateRequest(amReq,\n             scheduler.getMaximumResourceCapability(),\n-            submissionContext.getQueue(), scheduler);\n+            submissionContext.getQueue(), scheduler, isRecovery);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n+\n       SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n           scheduler.getClusterResource(),\n           scheduler.getMinimumResourceCapability(),\n           scheduler.getMaximumResourceCapability(),\n           scheduler.getMinimumResourceCapability());\n       return amReq;\n     }\n     \n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext, boolean isRecovery)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq \u003d submissionContext.getAMContainerResourceRequest();\n      if (amReq \u003d\u003d null) {\n        amReq \u003d BuilderUtils\n            .newResourceRequest(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,\n                ResourceRequest.ANY, submissionContext.getResource(), 1);\n      }\n\n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.normalizeAndValidateRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler, isRecovery);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n\n      SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n          scheduler.getClusterResource(),\n          scheduler.getMinimumResourceCapability(),\n          scheduler.getMaximumResourceCapability(),\n          scheduler.getMinimumResourceCapability());\n      return amReq;\n    }\n    \n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "968425e9f7b850ff9c2ab8ca37a64c3fdbe77dbf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3305. Normalize AM resource request on app submission. Contributed by Rohith Sharmaks\n",
      "commitDate": "17/03/15 1:49 PM",
      "commitName": "968425e9f7b850ff9c2ab8ca37a64c3fdbe77dbf",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/02/15 6:56 AM",
      "commitNameOld": "a761bf8726cb6285a505f1773ea3403eb985a65f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 42.25,
      "commitsBetweenForRepo": 418,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   private ResourceRequest validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n       ResourceRequest amReq;\n       if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n         amReq \u003d submissionContext.getAMContainerResourceRequest();\n       } else {\n         amReq \u003d\n             BuilderUtils.newResourceRequest(\n                 RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n                 submissionContext.getResource(), 1);\n       }\n       \n       // set label expression for AM container\n       if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n         amReq.setNodeLabelExpression(submissionContext\n             .getNodeLabelExpression());\n       }\n \n       try {\n         SchedulerUtils.validateResourceRequest(amReq,\n             scheduler.getMaximumResourceCapability(),\n             submissionContext.getQueue(), scheduler);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n-      \n+      SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n+          scheduler.getClusterResource(),\n+          scheduler.getMinimumResourceCapability(),\n+          scheduler.getMaximumResourceCapability(),\n+          scheduler.getMinimumResourceCapability());\n       return amReq;\n     }\n     \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq;\n      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n        amReq \u003d submissionContext.getAMContainerResourceRequest();\n      } else {\n        amReq \u003d\n            BuilderUtils.newResourceRequest(\n                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n                submissionContext.getResource(), 1);\n      }\n      \n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.validateResourceRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n      SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),\n          scheduler.getClusterResource(),\n          scheduler.getMinimumResourceCapability(),\n          scheduler.getMaximumResourceCapability(),\n          scheduler.getMinimumResourceCapability());\n      return amReq;\n    }\n    \n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/09/14 6:20 PM",
          "commitNameOld": "90a0c03f0a696d32e871a5da4560828edea8cfa9",
          "commitAuthorOld": "junping_du",
          "daysBetweenCommits": 29.01,
          "commitsBetweenForRepo": 311,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,41 @@\n-  private void validateResourceRequest(\n+  private ResourceRequest validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n-      ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n-          RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n-          submissionContext.getResource(), 1);\n+      ResourceRequest amReq;\n+      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n+        amReq \u003d submissionContext.getAMContainerResourceRequest();\n+      } else {\n+        amReq \u003d\n+            BuilderUtils.newResourceRequest(\n+                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n+                submissionContext.getResource(), 1);\n+      }\n+      \n+      // set label expression for AM container\n+      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n+        amReq.setNodeLabelExpression(submissionContext\n+            .getNodeLabelExpression());\n+      }\n+\n       try {\n         SchedulerUtils.validateResourceRequest(amReq,\n-            scheduler.getMaximumResourceCapability());\n+            scheduler.getMaximumResourceCapability(),\n+            submissionContext.getQueue(), scheduler);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n+      \n+      return amReq;\n     }\n+    \n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq;\n      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n        amReq \u003d submissionContext.getAMContainerResourceRequest();\n      } else {\n        amReq \u003d\n            BuilderUtils.newResourceRequest(\n                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n                submissionContext.getResource(), 1);\n      }\n      \n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.validateResourceRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n      \n      return amReq;\n    }\n    \n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {
            "oldValue": "validateResourceRequest",
            "newValue": "validateAndCreateResourceRequest"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/09/14 6:20 PM",
          "commitNameOld": "90a0c03f0a696d32e871a5da4560828edea8cfa9",
          "commitAuthorOld": "junping_du",
          "daysBetweenCommits": 29.01,
          "commitsBetweenForRepo": 311,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,41 @@\n-  private void validateResourceRequest(\n+  private ResourceRequest validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n-      ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n-          RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n-          submissionContext.getResource(), 1);\n+      ResourceRequest amReq;\n+      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n+        amReq \u003d submissionContext.getAMContainerResourceRequest();\n+      } else {\n+        amReq \u003d\n+            BuilderUtils.newResourceRequest(\n+                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n+                submissionContext.getResource(), 1);\n+      }\n+      \n+      // set label expression for AM container\n+      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n+        amReq.setNodeLabelExpression(submissionContext\n+            .getNodeLabelExpression());\n+      }\n+\n       try {\n         SchedulerUtils.validateResourceRequest(amReq,\n-            scheduler.getMaximumResourceCapability());\n+            scheduler.getMaximumResourceCapability(),\n+            submissionContext.getQueue(), scheduler);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n+      \n+      return amReq;\n     }\n+    \n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq;\n      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n        amReq \u003d submissionContext.getAMContainerResourceRequest();\n      } else {\n        amReq \u003d\n            BuilderUtils.newResourceRequest(\n                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n                submissionContext.getResource(), 1);\n      }\n      \n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.validateResourceRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n      \n      return amReq;\n    }\n    \n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "ResourceRequest"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/09/14 6:20 PM",
          "commitNameOld": "90a0c03f0a696d32e871a5da4560828edea8cfa9",
          "commitAuthorOld": "junping_du",
          "daysBetweenCommits": 29.01,
          "commitsBetweenForRepo": 311,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,41 @@\n-  private void validateResourceRequest(\n+  private ResourceRequest validateAndCreateResourceRequest(\n       ApplicationSubmissionContext submissionContext)\n       throws InvalidResourceRequestException {\n     // Validation of the ApplicationSubmissionContext needs to be completed\n     // here. Only those fields that are dependent on RM\u0027s configuration are\n     // checked here as they have to be validated whether they are part of new\n     // submission or just being recovered.\n \n     // Check whether AM resource requirements are within required limits\n     if (!submissionContext.getUnmanagedAM()) {\n-      ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n-          RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n-          submissionContext.getResource(), 1);\n+      ResourceRequest amReq;\n+      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n+        amReq \u003d submissionContext.getAMContainerResourceRequest();\n+      } else {\n+        amReq \u003d\n+            BuilderUtils.newResourceRequest(\n+                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n+                submissionContext.getResource(), 1);\n+      }\n+      \n+      // set label expression for AM container\n+      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n+        amReq.setNodeLabelExpression(submissionContext\n+            .getNodeLabelExpression());\n+      }\n+\n       try {\n         SchedulerUtils.validateResourceRequest(amReq,\n-            scheduler.getMaximumResourceCapability());\n+            scheduler.getMaximumResourceCapability(),\n+            submissionContext.getQueue(), scheduler);\n       } catch (InvalidResourceRequestException e) {\n         LOG.warn(\"RM app submission failed in validating AM resource request\"\n             + \" for application \" + submissionContext.getApplicationId(), e);\n         throw e;\n       }\n+      \n+      return amReq;\n     }\n+    \n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ResourceRequest validateAndCreateResourceRequest(\n      ApplicationSubmissionContext submissionContext)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq;\n      if (submissionContext.getAMContainerResourceRequest() !\u003d null) {\n        amReq \u003d submissionContext.getAMContainerResourceRequest();\n      } else {\n        amReq \u003d\n            BuilderUtils.newResourceRequest(\n                RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n                submissionContext.getResource(), 1);\n      }\n      \n      // set label expression for AM container\n      if (null \u003d\u003d amReq.getNodeLabelExpression()) {\n        amReq.setNodeLabelExpression(submissionContext\n            .getNodeLabelExpression());\n      }\n\n      try {\n        SchedulerUtils.validateResourceRequest(amReq,\n            scheduler.getMaximumResourceCapability(),\n            submissionContext.getQueue(), scheduler);\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n      \n      return amReq;\n    }\n    \n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "512475e56f0a27bf3c3ff596184f96993bb4bef4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-674. Fixed ResourceManager to renew DelegationTokens on submission asynchronously to work around potential slowness in state-store. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543312 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 9:20 PM",
      "commitName": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,23 @@\n+  private void validateResourceRequest(\n+      ApplicationSubmissionContext submissionContext)\n+      throws InvalidResourceRequestException {\n+    // Validation of the ApplicationSubmissionContext needs to be completed\n+    // here. Only those fields that are dependent on RM\u0027s configuration are\n+    // checked here as they have to be validated whether they are part of new\n+    // submission or just being recovered.\n+\n+    // Check whether AM resource requirements are within required limits\n+    if (!submissionContext.getUnmanagedAM()) {\n+      ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n+          RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n+          submissionContext.getResource(), 1);\n+      try {\n+        SchedulerUtils.validateResourceRequest(amReq,\n+            scheduler.getMaximumResourceCapability());\n+      } catch (InvalidResourceRequestException e) {\n+        LOG.warn(\"RM app submission failed in validating AM resource request\"\n+            + \" for application \" + submissionContext.getApplicationId(), e);\n+        throw e;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateResourceRequest(\n      ApplicationSubmissionContext submissionContext)\n      throws InvalidResourceRequestException {\n    // Validation of the ApplicationSubmissionContext needs to be completed\n    // here. Only those fields that are dependent on RM\u0027s configuration are\n    // checked here as they have to be validated whether they are part of new\n    // submission or just being recovered.\n\n    // Check whether AM resource requirements are within required limits\n    if (!submissionContext.getUnmanagedAM()) {\n      ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n          RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n          submissionContext.getResource(), 1);\n      try {\n        SchedulerUtils.validateResourceRequest(amReq,\n            scheduler.getMaximumResourceCapability());\n      } catch (InvalidResourceRequestException e) {\n        LOG.warn(\"RM app submission failed in validating AM resource request\"\n            + \" for application \" + submissionContext.getApplicationId(), e);\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java"
    }
  }
}