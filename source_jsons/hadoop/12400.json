{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalReplicaInPipeline.java",
  "functionName": "createStreams",
  "functionId": "createStreams___isCreate-boolean__requestedChecksum-DataChecksum",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
  "functionStartLine": 286,
  "functionEndLine": 364,
  "numCommitsSeen": 38,
  "timeTaken": 11586,
  "changeHistory": [
    "91bf504440967ccdff1cb1cbe7801a5ce2ba88ab",
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
    "df983b524ab68ea0c70cee9033bfff2d28052cbf",
    "dcedb72af468128458e597f08d22f5c34b744ae5",
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
    "86c9862bec0248d671e657aa56094a2919b8ac14",
    "463aec11718e47d4aabb86a7a539cb973460aae6",
    "662b1887af4e39f3eadd7dda4953c7f2529b43bc",
    "f84552ac35bb5221290be68fece9c779ebeaf4bc",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "91bf504440967ccdff1cb1cbe7801a5ce2ba88ab": "Ybodychange",
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": "Ymultichange(Yparameterchange,Ybodychange)",
    "df983b524ab68ea0c70cee9033bfff2d28052cbf": "Ymultichange(Yparameterchange,Ybodychange)",
    "dcedb72af468128458e597f08d22f5c34b744ae5": "Ymultichange(Yparameterchange,Ybodychange)",
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e": "Ymultichange(Yparameterchange,Ybodychange)",
    "86c9862bec0248d671e657aa56094a2919b8ac14": "Ymovefromfile",
    "463aec11718e47d4aabb86a7a539cb973460aae6": "Ybodychange",
    "662b1887af4e39f3eadd7dda4953c7f2529b43bc": "Ymultichange(Yreturntypechange,Ybodychange)",
    "f84552ac35bb5221290be68fece9c779ebeaf4bc": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "91bf504440967ccdff1cb1cbe7801a5ce2ba88ab": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11301. Double wrapping over RandomAccessFile in LocalReplicaInPipeline#createStreams. Contributed by Hanisha Koneru.\n",
      "commitDate": "09/01/17 10:32 AM",
      "commitName": "91bf504440967ccdff1cb1cbe7801a5ce2ba88ab",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "14/12/16 11:18 AM",
      "commitNameOld": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 25.97,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,79 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n       DataChecksum requestedChecksum) throws IOException {\n     final File blockFile \u003d getBlockFile();\n     final File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n     final RandomAccessFile metaRAF \u003d\n         getFileIoProvider().getRandomAccessFile(getVolume(), metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d\n             BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n     final FileIoProvider fileIoProvider \u003d getFileIoProvider();\n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d fileIoProvider.getFileOutputStream(\n-          getVolume(),\n-          fileIoProvider.getRandomAccessFile(getVolume(), blockFile, \"rw\")\n-              .getFD());\n+          getVolume(), new RandomAccessFile(blockFile, \"rw\").getFD());\n       crcOut \u003d fileIoProvider.getFileOutputStream(getVolume(), metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n           getVolume(), fileIoProvider);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(crcOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum) throws IOException {\n    final File blockFile \u003d getBlockFile();\n    final File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    final RandomAccessFile metaRAF \u003d\n        getFileIoProvider().getRandomAccessFile(getVolume(), metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d\n            BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    final FileIoProvider fileIoProvider \u003d getFileIoProvider();\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d fileIoProvider.getFileOutputStream(\n          getVolume(), new RandomAccessFile(blockFile, \"rw\").getFD());\n      crcOut \u003d fileIoProvider.getFileOutputStream(getVolume(), metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume(), fileIoProvider);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(crcOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
      "extendedDetails": {}
    },
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
      "commitDate": "14/12/16 11:18 AM",
      "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
          "commitDate": "14/12/16 11:18 AM",
          "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "06/12/16 11:05 AM",
          "commitNameOld": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 8.01,
          "commitsBetweenForRepo": 51,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,81 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n-      DataChecksum requestedChecksum, long slowLogThresholdMs)\n-      throws IOException {\n-    File blockFile \u003d getBlockFile();\n-    File metaFile \u003d getMetaFile();\n+      DataChecksum requestedChecksum) throws IOException {\n+    final File blockFile \u003d getBlockFile();\n+    final File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n-    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n+    final RandomAccessFile metaRAF \u003d\n+        getFileIoProvider().getRandomAccessFile(getVolume(), metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n-        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n+        BlockMetadataHeader header \u003d\n+            BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n+    final FileIoProvider fileIoProvider \u003d getFileIoProvider();\n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n-      blockOut \u003d new FileOutputStream(\n-          new RandomAccessFile(blockFile, \"rw\").getFD());\n-      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n+      blockOut \u003d fileIoProvider.getFileOutputStream(\n+          getVolume(),\n+          fileIoProvider.getRandomAccessFile(getVolume(), blockFile, \"rw\")\n+              .getFD());\n+      crcOut \u003d fileIoProvider.getFileOutputStream(getVolume(), metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n-          getVolume().isTransientStorage(), slowLogThresholdMs);\n+          getVolume(), fileIoProvider);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n+      IOUtils.closeStream(crcOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum) throws IOException {\n    final File blockFile \u003d getBlockFile();\n    final File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    final RandomAccessFile metaRAF \u003d\n        getFileIoProvider().getRandomAccessFile(getVolume(), metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d\n            BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    final FileIoProvider fileIoProvider \u003d getFileIoProvider();\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d fileIoProvider.getFileOutputStream(\n          getVolume(),\n          fileIoProvider.getRandomAccessFile(getVolume(), blockFile, \"rw\")\n              .getFD());\n      crcOut \u003d fileIoProvider.getFileOutputStream(getVolume(), metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume(), fileIoProvider);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(crcOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
          "extendedDetails": {
            "oldValue": "[isCreate-boolean, requestedChecksum-DataChecksum, slowLogThresholdMs-long]",
            "newValue": "[isCreate-boolean, requestedChecksum-DataChecksum]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
          "commitDate": "14/12/16 11:18 AM",
          "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "06/12/16 11:05 AM",
          "commitNameOld": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 8.01,
          "commitsBetweenForRepo": 51,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,81 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n-      DataChecksum requestedChecksum, long slowLogThresholdMs)\n-      throws IOException {\n-    File blockFile \u003d getBlockFile();\n-    File metaFile \u003d getMetaFile();\n+      DataChecksum requestedChecksum) throws IOException {\n+    final File blockFile \u003d getBlockFile();\n+    final File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n-    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n+    final RandomAccessFile metaRAF \u003d\n+        getFileIoProvider().getRandomAccessFile(getVolume(), metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n-        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n+        BlockMetadataHeader header \u003d\n+            BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n+    final FileIoProvider fileIoProvider \u003d getFileIoProvider();\n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n-      blockOut \u003d new FileOutputStream(\n-          new RandomAccessFile(blockFile, \"rw\").getFD());\n-      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n+      blockOut \u003d fileIoProvider.getFileOutputStream(\n+          getVolume(),\n+          fileIoProvider.getRandomAccessFile(getVolume(), blockFile, \"rw\")\n+              .getFD());\n+      crcOut \u003d fileIoProvider.getFileOutputStream(getVolume(), metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n-          getVolume().isTransientStorage(), slowLogThresholdMs);\n+          getVolume(), fileIoProvider);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n+      IOUtils.closeStream(crcOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum) throws IOException {\n    final File blockFile \u003d getBlockFile();\n    final File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    final RandomAccessFile metaRAF \u003d\n        getFileIoProvider().getRandomAccessFile(getVolume(), metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d\n            BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    final FileIoProvider fileIoProvider \u003d getFileIoProvider();\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d fileIoProvider.getFileOutputStream(\n          getVolume(),\n          fileIoProvider.getRandomAccessFile(getVolume(), blockFile, \"rw\")\n              .getFD());\n      crcOut \u003d fileIoProvider.getFileOutputStream(getVolume(), metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume(), fileIoProvider);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(crcOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
          "extendedDetails": {}
        }
      ]
    },
    "df983b524ab68ea0c70cee9033bfff2d28052cbf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
      "commitDate": "06/12/16 11:05 AM",
      "commitName": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
          "commitDate": "06/12/16 11:05 AM",
          "commitName": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "05/12/16 12:44 PM",
          "commitNameOld": "dcedb72af468128458e597f08d22f5c34b744ae5",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.93,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,76 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n-      DataChecksum requestedChecksum) throws IOException {\n+      DataChecksum requestedChecksum, long slowLogThresholdMs)\n+      throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile(blockFile, \"rw\").getFD());\n       crcOut \u003d new FileOutputStream(metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n-          getVolume().isTransientStorage());\n+          getVolume().isTransientStorage(), slowLogThresholdMs);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum, long slowLogThresholdMs)\n      throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile(blockFile, \"rw\").getFD());\n      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume().isTransientStorage(), slowLogThresholdMs);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
          "extendedDetails": {
            "oldValue": "[isCreate-boolean, requestedChecksum-DataChecksum]",
            "newValue": "[isCreate-boolean, requestedChecksum-DataChecksum, slowLogThresholdMs-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
          "commitDate": "06/12/16 11:05 AM",
          "commitName": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "05/12/16 12:44 PM",
          "commitNameOld": "dcedb72af468128458e597f08d22f5c34b744ae5",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.93,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,76 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n-      DataChecksum requestedChecksum) throws IOException {\n+      DataChecksum requestedChecksum, long slowLogThresholdMs)\n+      throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile(blockFile, \"rw\").getFD());\n       crcOut \u003d new FileOutputStream(metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n-          getVolume().isTransientStorage());\n+          getVolume().isTransientStorage(), slowLogThresholdMs);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum, long slowLogThresholdMs)\n      throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile(blockFile, \"rw\").getFD());\n      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume().isTransientStorage(), slowLogThresholdMs);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
          "extendedDetails": {}
        }
      ]
    },
    "dcedb72af468128458e597f08d22f5c34b744ae5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit aeecfa24f4fb6af289920cbf8830c394e66bd78e.\n",
      "commitDate": "05/12/16 12:44 PM",
      "commitName": "dcedb72af468128458e597f08d22f5c34b744ae5",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit aeecfa24f4fb6af289920cbf8830c394e66bd78e.\n",
          "commitDate": "05/12/16 12:44 PM",
          "commitName": "dcedb72af468128458e597f08d22f5c34b744ae5",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "29/11/16 8:52 PM",
          "commitNameOld": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 5.66,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,75 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n-      DataChecksum requestedChecksum, long slowLogThresholdMs)\n-      throws IOException {\n+      DataChecksum requestedChecksum) throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile(blockFile, \"rw\").getFD());\n       crcOut \u003d new FileOutputStream(metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n-          getVolume().isTransientStorage(), slowLogThresholdMs);\n+          getVolume().isTransientStorage());\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile(blockFile, \"rw\").getFD());\n      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume().isTransientStorage());\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
          "extendedDetails": {
            "oldValue": "[isCreate-boolean, requestedChecksum-DataChecksum, slowLogThresholdMs-long]",
            "newValue": "[isCreate-boolean, requestedChecksum-DataChecksum]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit aeecfa24f4fb6af289920cbf8830c394e66bd78e.\n",
          "commitDate": "05/12/16 12:44 PM",
          "commitName": "dcedb72af468128458e597f08d22f5c34b744ae5",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "29/11/16 8:52 PM",
          "commitNameOld": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 5.66,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,75 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n-      DataChecksum requestedChecksum, long slowLogThresholdMs)\n-      throws IOException {\n+      DataChecksum requestedChecksum) throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile(blockFile, \"rw\").getFD());\n       crcOut \u003d new FileOutputStream(metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n-          getVolume().isTransientStorage(), slowLogThresholdMs);\n+          getVolume().isTransientStorage());\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile(blockFile, \"rw\").getFD());\n      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume().isTransientStorage());\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
          "extendedDetails": {}
        }
      ]
    },
    "aeecfa24f4fb6af289920cbf8830c394e66bd78e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
      "commitDate": "29/11/16 8:52 PM",
      "commitName": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
          "commitDate": "29/11/16 8:52 PM",
          "commitName": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "13/09/16 12:54 PM",
          "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 77.37,
          "commitsBetweenForRepo": 595,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,76 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n-      DataChecksum requestedChecksum) throws IOException {\n+      DataChecksum requestedChecksum, long slowLogThresholdMs)\n+      throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile(blockFile, \"rw\").getFD());\n       crcOut \u003d new FileOutputStream(metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n-          getVolume().isTransientStorage());\n+          getVolume().isTransientStorage(), slowLogThresholdMs);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum, long slowLogThresholdMs)\n      throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile(blockFile, \"rw\").getFD());\n      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume().isTransientStorage(), slowLogThresholdMs);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
          "extendedDetails": {
            "oldValue": "[isCreate-boolean, requestedChecksum-DataChecksum]",
            "newValue": "[isCreate-boolean, requestedChecksum-DataChecksum, slowLogThresholdMs-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.\n",
          "commitDate": "29/11/16 8:52 PM",
          "commitName": "aeecfa24f4fb6af289920cbf8830c394e66bd78e",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "13/09/16 12:54 PM",
          "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 77.37,
          "commitsBetweenForRepo": 595,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,76 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate,\n-      DataChecksum requestedChecksum) throws IOException {\n+      DataChecksum requestedChecksum, long slowLogThresholdMs)\n+      throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize \u003e 0 \u0026\u0026\n             (blockDiskSize \u003e blockFile.length() ||\n                crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile(blockFile, \"rw\").getFD());\n       crcOut \u003d new FileOutputStream(metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n-          getVolume().isTransientStorage());\n+          getVolume().isTransientStorage(), slowLogThresholdMs);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum, long slowLogThresholdMs)\n      throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile(blockFile, \"rw\").getFD());\n      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume().isTransientStorage(), slowLogThresholdMs);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
          "extendedDetails": {}
        }
      ]
    },
    "86c9862bec0248d671e657aa56094a2919b8ac14": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "13/09/16 12:54 PM",
      "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "13/09/16 12:42 PM",
      "commitNameOld": "1c0d18f32289837b8981aed80e7bdcd360adfb85",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,75 @@\n-  public ReplicaOutputStreams createStreams(boolean isCreate, \n+  public ReplicaOutputStreams createStreams(boolean isCreate,\n       DataChecksum requestedChecksum) throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n-    \n+\n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     final DataChecksum checksum;\n-    \n+\n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n-    \n+\n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n-        \n+\n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n-        \n+\n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n-        \n+\n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n-        if (blockDiskSize\u003e0 \u0026\u0026 \n-            (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n+        if (blockDiskSize \u003e 0 \u0026\u0026\n+            (blockDiskSize \u003e blockFile.length() ||\n+               crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n-    \n+\n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n-          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n-      crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n+          new RandomAccessFile(blockFile, \"rw\").getFD());\n+      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n       return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n           getVolume().isTransientStorage());\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate,\n      DataChecksum requestedChecksum) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n\n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n\n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n\n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n\n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n\n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n\n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize \u003e 0 \u0026\u0026\n            (blockDiskSize \u003e blockFile.length() ||\n               crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile(blockFile, \"rw\").getFD());\n      crcOut \u003d new FileOutputStream(metaRAF.getFD());\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume().isTransientStorage());\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/LocalReplicaInPipeline.java",
        "oldMethodName": "createStreams",
        "newMethodName": "createStreams"
      }
    },
    "463aec11718e47d4aabb86a7a539cb973460aae6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
      "commitDate": "27/10/14 9:38 AM",
      "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
      "commitAuthor": "cnauroth",
      "commitDateOld": "07/09/14 2:46 PM",
      "commitNameOld": "eb8284d50e1aa9f196556ed20b4b5e3f330e65fe",
      "commitAuthorOld": "",
      "daysBetweenCommits": 49.79,
      "commitsBetweenForRepo": 498,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,74 @@\n   public ReplicaOutputStreams createStreams(boolean isCreate, \n       DataChecksum requestedChecksum) throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n     \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n-    DataChecksum checksum;\n+    final DataChecksum checksum;\n     \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n     \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n         \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n         \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n         \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize\u003e0 \u0026\u0026 \n             (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n-\t\t\t// for create, we can use the requested checksum\n+      // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n     \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n       crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n-      return new ReplicaOutputStreams(blockOut, crcOut, checksum);\n+      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n+          getVolume().isTransientStorage());\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate, \n      DataChecksum requestedChecksum) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n    \n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    final DataChecksum checksum;\n    \n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n    \n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n        \n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n        \n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n        \n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize\u003e0 \u0026\u0026 \n            (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n    \n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n      crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum,\n          getVolume().isTransientStorage());\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
      "extendedDetails": {}
    },
    "662b1887af4e39f3eadd7dda4953c7f2529b43bc": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-3088. Move FSDatasetInterface inner classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301661 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/03/12 10:32 AM",
      "commitName": "662b1887af4e39f3eadd7dda4953c7f2529b43bc",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-3088. Move FSDatasetInterface inner classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301661 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/03/12 10:32 AM",
          "commitName": "662b1887af4e39f3eadd7dda4953c7f2529b43bc",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "08/02/12 12:58 PM",
          "commitNameOld": "b6ffb08a467f1b5bc89e5114c462c3117b337be6",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 36.86,
          "commitsBetweenForRepo": 266,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public BlockWriteStreams createStreams(boolean isCreate, \n+  public ReplicaOutputStreams createStreams(boolean isCreate, \n       DataChecksum requestedChecksum) throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n     \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     DataChecksum checksum;\n     \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n     \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n         \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n         \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n         \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize\u003e0 \u0026\u0026 \n             (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n     \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n       crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n-      return new BlockWriteStreams(blockOut, crcOut, checksum);\n+      return new ReplicaOutputStreams(blockOut, crcOut, checksum);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate, \n      DataChecksum requestedChecksum) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n    \n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    DataChecksum checksum;\n    \n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n    \n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n        \n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n        \n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n        \n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize\u003e0 \u0026\u0026 \n            (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n    \n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n      crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
          "extendedDetails": {
            "oldValue": "BlockWriteStreams",
            "newValue": "ReplicaOutputStreams"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3088. Move FSDatasetInterface inner classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301661 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/03/12 10:32 AM",
          "commitName": "662b1887af4e39f3eadd7dda4953c7f2529b43bc",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "08/02/12 12:58 PM",
          "commitNameOld": "b6ffb08a467f1b5bc89e5114c462c3117b337be6",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 36.86,
          "commitsBetweenForRepo": 266,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public BlockWriteStreams createStreams(boolean isCreate, \n+  public ReplicaOutputStreams createStreams(boolean isCreate, \n       DataChecksum requestedChecksum) throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n     \n     // the checksum that should actually be used -- this\n     // may differ from requestedChecksum for appends.\n     DataChecksum checksum;\n     \n     RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n     \n     if (!isCreate) {\n       // For append or recovery, we must enforce the existing checksum.\n       // Also, verify that the file has correct lengths, etc.\n       boolean checkedMeta \u003d false;\n       try {\n         BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n         checksum \u003d header.getChecksum();\n         \n         if (checksum.getBytesPerChecksum() !\u003d\n             requestedChecksum.getBytesPerChecksum()) {\n           throw new IOException(\"Client requested checksum \" +\n               requestedChecksum + \" when appending to an existing block \" +\n               \"with different chunk size: \" + checksum);\n         }\n         \n         int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n         int checksumSize \u003d checksum.getChecksumSize();\n         \n         blockDiskSize \u003d bytesOnDisk;\n         crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n           (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n         if (blockDiskSize\u003e0 \u0026\u0026 \n             (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n           throw new IOException(\"Corrupted block: \" + this);\n         }\n         checkedMeta \u003d true;\n       } finally {\n         if (!checkedMeta) {\n           // clean up in case of exceptions.\n           IOUtils.closeStream(metaRAF);\n         }\n       }\n     } else {\n       // for create, we can use the requested checksum\n       checksum \u003d requestedChecksum;\n     }\n     \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n       crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n-      return new BlockWriteStreams(blockOut, crcOut, checksum);\n+      return new ReplicaOutputStreams(blockOut, crcOut, checksum);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n       IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaOutputStreams createStreams(boolean isCreate, \n      DataChecksum requestedChecksum) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n    \n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    DataChecksum checksum;\n    \n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n    \n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n        \n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n        \n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n        \n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize\u003e0 \u0026\u0026 \n            (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n    \n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n      crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new ReplicaOutputStreams(blockOut, crcOut, checksum);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
          "extendedDetails": {}
        }
      ]
    },
    "f84552ac35bb5221290be68fece9c779ebeaf4bc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2130. Switch default checksum to CRC32C. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1196889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/11/11 5:35 PM",
      "commitName": "f84552ac35bb5221290be68fece9c779ebeaf4bc",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2130. Switch default checksum to CRC32C. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1196889 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/11/11 5:35 PM",
          "commitName": "f84552ac35bb5221290be68fece9c779ebeaf4bc",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "04/09/11 12:30 PM",
          "commitNameOld": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 59.21,
          "commitsBetweenForRepo": 491,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,73 @@\n   public BlockWriteStreams createStreams(boolean isCreate, \n-      int bytesPerChunk, int checksumSize) throws IOException {\n+      DataChecksum requestedChecksum) throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n-    if (!isCreate) { // check on disk file\n-      blockDiskSize \u003d bytesOnDisk;\n-      crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n-      (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n-      if (blockDiskSize\u003e0 \u0026\u0026 \n-          (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n-        throw new IOException(\"Corrupted block: \" + this);\n+    \n+    // the checksum that should actually be used -- this\n+    // may differ from requestedChecksum for appends.\n+    DataChecksum checksum;\n+    \n+    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n+    \n+    if (!isCreate) {\n+      // For append or recovery, we must enforce the existing checksum.\n+      // Also, verify that the file has correct lengths, etc.\n+      boolean checkedMeta \u003d false;\n+      try {\n+        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n+        checksum \u003d header.getChecksum();\n+        \n+        if (checksum.getBytesPerChecksum() !\u003d\n+            requestedChecksum.getBytesPerChecksum()) {\n+          throw new IOException(\"Client requested checksum \" +\n+              requestedChecksum + \" when appending to an existing block \" +\n+              \"with different chunk size: \" + checksum);\n+        }\n+        \n+        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n+        int checksumSize \u003d checksum.getChecksumSize();\n+        \n+        blockDiskSize \u003d bytesOnDisk;\n+        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n+          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n+        if (blockDiskSize\u003e0 \u0026\u0026 \n+            (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n+          throw new IOException(\"Corrupted block: \" + this);\n+        }\n+        checkedMeta \u003d true;\n+      } finally {\n+        if (!checkedMeta) {\n+          // clean up in case of exceptions.\n+          IOUtils.closeStream(metaRAF);\n+        }\n       }\n+    } else {\n+      // for create, we can use the requested checksum\n+      checksum \u003d requestedChecksum;\n     }\n+    \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n-      crcOut \u003d new FileOutputStream(\n-          new RandomAccessFile( metaFile, \"rw\" ).getFD() );\n+      crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n-      return new BlockWriteStreams(blockOut, crcOut);\n+      return new BlockWriteStreams(blockOut, crcOut, checksum);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n-      IOUtils.closeStream(crcOut);\n+      IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public BlockWriteStreams createStreams(boolean isCreate, \n      DataChecksum requestedChecksum) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n    \n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    DataChecksum checksum;\n    \n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n    \n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n        \n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n        \n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n        \n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize\u003e0 \u0026\u0026 \n            (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n    \n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n      crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new BlockWriteStreams(blockOut, crcOut, checksum);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
          "extendedDetails": {
            "oldValue": "[isCreate-boolean, bytesPerChunk-int, checksumSize-int]",
            "newValue": "[isCreate-boolean, requestedChecksum-DataChecksum]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2130. Switch default checksum to CRC32C. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1196889 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/11/11 5:35 PM",
          "commitName": "f84552ac35bb5221290be68fece9c779ebeaf4bc",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "04/09/11 12:30 PM",
          "commitNameOld": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 59.21,
          "commitsBetweenForRepo": 491,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,73 @@\n   public BlockWriteStreams createStreams(boolean isCreate, \n-      int bytesPerChunk, int checksumSize) throws IOException {\n+      DataChecksum requestedChecksum) throws IOException {\n     File blockFile \u003d getBlockFile();\n     File metaFile \u003d getMetaFile();\n     if (DataNode.LOG.isDebugEnabled()) {\n       DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                          \" of size \" + blockFile.length());\n       DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                          \" of size \" + metaFile.length());\n     }\n     long blockDiskSize \u003d 0L;\n     long crcDiskSize \u003d 0L;\n-    if (!isCreate) { // check on disk file\n-      blockDiskSize \u003d bytesOnDisk;\n-      crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n-      (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n-      if (blockDiskSize\u003e0 \u0026\u0026 \n-          (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n-        throw new IOException(\"Corrupted block: \" + this);\n+    \n+    // the checksum that should actually be used -- this\n+    // may differ from requestedChecksum for appends.\n+    DataChecksum checksum;\n+    \n+    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n+    \n+    if (!isCreate) {\n+      // For append or recovery, we must enforce the existing checksum.\n+      // Also, verify that the file has correct lengths, etc.\n+      boolean checkedMeta \u003d false;\n+      try {\n+        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n+        checksum \u003d header.getChecksum();\n+        \n+        if (checksum.getBytesPerChecksum() !\u003d\n+            requestedChecksum.getBytesPerChecksum()) {\n+          throw new IOException(\"Client requested checksum \" +\n+              requestedChecksum + \" when appending to an existing block \" +\n+              \"with different chunk size: \" + checksum);\n+        }\n+        \n+        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n+        int checksumSize \u003d checksum.getChecksumSize();\n+        \n+        blockDiskSize \u003d bytesOnDisk;\n+        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n+          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n+        if (blockDiskSize\u003e0 \u0026\u0026 \n+            (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n+          throw new IOException(\"Corrupted block: \" + this);\n+        }\n+        checkedMeta \u003d true;\n+      } finally {\n+        if (!checkedMeta) {\n+          // clean up in case of exceptions.\n+          IOUtils.closeStream(metaRAF);\n+        }\n       }\n+    } else {\n+      // for create, we can use the requested checksum\n+      checksum \u003d requestedChecksum;\n     }\n+    \n     FileOutputStream blockOut \u003d null;\n     FileOutputStream crcOut \u003d null;\n     try {\n       blockOut \u003d new FileOutputStream(\n           new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n-      crcOut \u003d new FileOutputStream(\n-          new RandomAccessFile( metaFile, \"rw\" ).getFD() );\n+      crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n       if (!isCreate) {\n         blockOut.getChannel().position(blockDiskSize);\n         crcOut.getChannel().position(crcDiskSize);\n       }\n-      return new BlockWriteStreams(blockOut, crcOut);\n+      return new BlockWriteStreams(blockOut, crcOut, checksum);\n     } catch (IOException e) {\n       IOUtils.closeStream(blockOut);\n-      IOUtils.closeStream(crcOut);\n+      IOUtils.closeStream(metaRAF);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public BlockWriteStreams createStreams(boolean isCreate, \n      DataChecksum requestedChecksum) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n    \n    // the checksum that should actually be used -- this\n    // may differ from requestedChecksum for appends.\n    DataChecksum checksum;\n    \n    RandomAccessFile metaRAF \u003d new RandomAccessFile(metaFile, \"rw\");\n    \n    if (!isCreate) {\n      // For append or recovery, we must enforce the existing checksum.\n      // Also, verify that the file has correct lengths, etc.\n      boolean checkedMeta \u003d false;\n      try {\n        BlockMetadataHeader header \u003d BlockMetadataHeader.readHeader(metaRAF);\n        checksum \u003d header.getChecksum();\n        \n        if (checksum.getBytesPerChecksum() !\u003d\n            requestedChecksum.getBytesPerChecksum()) {\n          throw new IOException(\"Client requested checksum \" +\n              requestedChecksum + \" when appending to an existing block \" +\n              \"with different chunk size: \" + checksum);\n        }\n        \n        int bytesPerChunk \u003d checksum.getBytesPerChecksum();\n        int checksumSize \u003d checksum.getChecksumSize();\n        \n        blockDiskSize \u003d bytesOnDisk;\n        crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n          (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n        if (blockDiskSize\u003e0 \u0026\u0026 \n            (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n          throw new IOException(\"Corrupted block: \" + this);\n        }\n        checkedMeta \u003d true;\n      } finally {\n        if (!checkedMeta) {\n          // clean up in case of exceptions.\n          IOUtils.closeStream(metaRAF);\n        }\n      }\n    } else {\n      // for create, we can use the requested checksum\n      checksum \u003d requestedChecksum;\n    }\n    \n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n      crcOut \u003d new FileOutputStream(metaRAF.getFD() );\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new BlockWriteStreams(blockOut, crcOut, checksum);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(metaRAF);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public BlockWriteStreams createStreams(boolean isCreate, \n      int bytesPerChunk, int checksumSize) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n    if (!isCreate) { // check on disk file\n      blockDiskSize \u003d bytesOnDisk;\n      crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n      (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n      if (blockDiskSize\u003e0 \u0026\u0026 \n          (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n        throw new IOException(\"Corrupted block: \" + this);\n      }\n    }\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n      crcOut \u003d new FileOutputStream(\n          new RandomAccessFile( metaFile, \"rw\" ).getFD() );\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new BlockWriteStreams(blockOut, crcOut);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(crcOut);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public BlockWriteStreams createStreams(boolean isCreate, \n      int bytesPerChunk, int checksumSize) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n    if (!isCreate) { // check on disk file\n      blockDiskSize \u003d bytesOnDisk;\n      crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n      (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n      if (blockDiskSize\u003e0 \u0026\u0026 \n          (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n        throw new IOException(\"Corrupted block: \" + this);\n      }\n    }\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n      crcOut \u003d new FileOutputStream(\n          new RandomAccessFile( metaFile, \"rw\" ).getFD() );\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new BlockWriteStreams(blockOut, crcOut);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(crcOut);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,39 @@\n+  public BlockWriteStreams createStreams(boolean isCreate, \n+      int bytesPerChunk, int checksumSize) throws IOException {\n+    File blockFile \u003d getBlockFile();\n+    File metaFile \u003d getMetaFile();\n+    if (DataNode.LOG.isDebugEnabled()) {\n+      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n+                         \" of size \" + blockFile.length());\n+      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n+                         \" of size \" + metaFile.length());\n+    }\n+    long blockDiskSize \u003d 0L;\n+    long crcDiskSize \u003d 0L;\n+    if (!isCreate) { // check on disk file\n+      blockDiskSize \u003d bytesOnDisk;\n+      crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n+      (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n+      if (blockDiskSize\u003e0 \u0026\u0026 \n+          (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n+        throw new IOException(\"Corrupted block: \" + this);\n+      }\n+    }\n+    FileOutputStream blockOut \u003d null;\n+    FileOutputStream crcOut \u003d null;\n+    try {\n+      blockOut \u003d new FileOutputStream(\n+          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n+      crcOut \u003d new FileOutputStream(\n+          new RandomAccessFile( metaFile, \"rw\" ).getFD() );\n+      if (!isCreate) {\n+        blockOut.getChannel().position(blockDiskSize);\n+        crcOut.getChannel().position(crcDiskSize);\n+      }\n+      return new BlockWriteStreams(blockOut, crcOut);\n+    } catch (IOException e) {\n+      IOUtils.closeStream(blockOut);\n+      IOUtils.closeStream(crcOut);\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public BlockWriteStreams createStreams(boolean isCreate, \n      int bytesPerChunk, int checksumSize) throws IOException {\n    File blockFile \u003d getBlockFile();\n    File metaFile \u003d getMetaFile();\n    if (DataNode.LOG.isDebugEnabled()) {\n      DataNode.LOG.debug(\"writeTo blockfile is \" + blockFile +\n                         \" of size \" + blockFile.length());\n      DataNode.LOG.debug(\"writeTo metafile is \" + metaFile +\n                         \" of size \" + metaFile.length());\n    }\n    long blockDiskSize \u003d 0L;\n    long crcDiskSize \u003d 0L;\n    if (!isCreate) { // check on disk file\n      blockDiskSize \u003d bytesOnDisk;\n      crcDiskSize \u003d BlockMetadataHeader.getHeaderSize() +\n      (blockDiskSize+bytesPerChunk-1)/bytesPerChunk*checksumSize;\n      if (blockDiskSize\u003e0 \u0026\u0026 \n          (blockDiskSize\u003eblockFile.length() || crcDiskSize\u003emetaFile.length())) {\n        throw new IOException(\"Corrupted block: \" + this);\n      }\n    }\n    FileOutputStream blockOut \u003d null;\n    FileOutputStream crcOut \u003d null;\n    try {\n      blockOut \u003d new FileOutputStream(\n          new RandomAccessFile( blockFile, \"rw\" ).getFD() );\n      crcOut \u003d new FileOutputStream(\n          new RandomAccessFile( metaFile, \"rw\" ).getFD() );\n      if (!isCreate) {\n        blockOut.getChannel().position(blockDiskSize);\n        crcOut.getChannel().position(crcDiskSize);\n      }\n      return new BlockWriteStreams(blockOut, crcOut);\n    } catch (IOException e) {\n      IOUtils.closeStream(blockOut);\n      IOUtils.closeStream(crcOut);\n      throw e;\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/ReplicaInPipeline.java"
    }
  }
}