{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OutlierDetector.java",
  "functionName": "computeMad",
  "functionId": "computeMad___sortedValues-List__Double__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/metrics/OutlierDetector.java",
  "functionStartLine": 146,
  "functionEndLine": 165,
  "numCommitsSeen": 3,
  "timeTaken": 2484,
  "changeHistory": [
    "b3ec531f400dd0a6506dc71233d38ae57b764a43",
    "b57368b6f893cb27d77fc9425e116f1312f4790f"
  ],
  "changeHistoryShort": {
    "b3ec531f400dd0a6506dc71233d38ae57b764a43": "Yfilerename",
    "b57368b6f893cb27d77fc9425e116f1312f4790f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ec531f400dd0a6506dc71233d38ae57b764a43": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-11461. DataNode Disk Outlier Detection. Contributed by Hanisha Koneru.\n",
      "commitDate": "02/03/17 12:45 PM",
      "commitName": "b3ec531f400dd0a6506dc71233d38ae57b764a43",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "02/03/17 10:58 AM",
      "commitNameOld": "747bafaf969857b66233a8b4660590bdd712ed7d",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Double computeMad(List\u003cDouble\u003e sortedValues) {\n    if (sortedValues.size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          \"Cannot compute the Median Absolute Deviation \" +\n              \"of an empty list.\");\n    }\n\n    // First get the median of the values.\n    Double median \u003d computeMedian(sortedValues);\n    List\u003cDouble\u003e deviations \u003d new ArrayList\u003c\u003e(sortedValues);\n\n    // Then update the list to store deviation from the median.\n    for (int i \u003d 0; i \u003c sortedValues.size(); ++i) {\n      deviations.set(i, Math.abs(sortedValues.get(i) - median));\n    }\n\n    // Finally get the median absolute deviation.\n    Collections.sort(deviations);\n    return computeMedian(deviations) * MAD_MULTIPLIER;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/metrics/OutlierDetector.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/metrics/SlowNodeDetector.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/metrics/OutlierDetector.java"
      }
    },
    "b57368b6f893cb27d77fc9425e116f1312f4790f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11194. Maintain aggregated peer performance metrics on NameNode.\n",
      "commitDate": "24/01/17 4:58 PM",
      "commitName": "b57368b6f893cb27d77fc9425e116f1312f4790f",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,20 @@\n+  public static Double computeMad(List\u003cDouble\u003e sortedValues) {\n+    if (sortedValues.size() \u003d\u003d 0) {\n+      throw new IllegalArgumentException(\n+          \"Cannot compute the Median Absolute Deviation \" +\n+              \"of an empty list.\");\n+    }\n+\n+    // First get the median of the values.\n+    Double median \u003d computeMedian(sortedValues);\n+    List\u003cDouble\u003e deviations \u003d new ArrayList\u003c\u003e(sortedValues);\n+\n+    // Then update the list to store deviation from the median.\n+    for (int i \u003d 0; i \u003c sortedValues.size(); ++i) {\n+      deviations.set(i, Math.abs(sortedValues.get(i) - median));\n+    }\n+\n+    // Finally get the median absolute deviation.\n+    Collections.sort(deviations);\n+    return computeMedian(deviations) * MAD_MULTIPLIER;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Double computeMad(List\u003cDouble\u003e sortedValues) {\n    if (sortedValues.size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          \"Cannot compute the Median Absolute Deviation \" +\n              \"of an empty list.\");\n    }\n\n    // First get the median of the values.\n    Double median \u003d computeMedian(sortedValues);\n    List\u003cDouble\u003e deviations \u003d new ArrayList\u003c\u003e(sortedValues);\n\n    // Then update the list to store deviation from the median.\n    for (int i \u003d 0; i \u003c sortedValues.size(); ++i) {\n      deviations.set(i, Math.abs(sortedValues.get(i) - median));\n    }\n\n    // Finally get the median absolute deviation.\n    Collections.sort(deviations);\n    return computeMedian(deviations) * MAD_MULTIPLIER;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/metrics/SlowNodeDetector.java"
    }
  }
}