{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StringUtils.java",
  "functionName": "wrap",
  "functionId": "wrap___str-String__wrapLength-int__newLineStr-String__wrapLongWords-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/StringUtils.java",
  "functionStartLine": 1224,
  "functionEndLine": 1271,
  "numCommitsSeen": 44,
  "timeTaken": 1982,
  "changeHistory": [
    "2b2399d623539ab68e71a38fa9fbfc9a405bddb8"
  ],
  "changeHistoryShort": {
    "2b2399d623539ab68e71a38fa9fbfc9a405bddb8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2b2399d623539ab68e71a38fa9fbfc9a405bddb8": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15495. Upgrade commons-lang version to 3.7 in hadoop-common-project and hadoop-tools. Contributed by Takanobu Asanuma.\n",
      "commitDate": "27/06/18 10:37 PM",
      "commitName": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,48 @@\n+  public static String wrap(String str, int wrapLength, String newLineStr,\n+      boolean wrapLongWords) {\n+    if(str \u003d\u003d null) {\n+      return null;\n+    } else {\n+      if(newLineStr \u003d\u003d null) {\n+        newLineStr \u003d System.lineSeparator();\n+      }\n+\n+      if(wrapLength \u003c 1) {\n+        wrapLength \u003d 1;\n+      }\n+\n+      int inputLineLength \u003d str.length();\n+      int offset \u003d 0;\n+      StringBuffer wrappedLine \u003d new StringBuffer(inputLineLength + 32);\n+\n+      while(inputLineLength - offset \u003e wrapLength) {\n+        if(str.charAt(offset) \u003d\u003d 32) {\n+          ++offset;\n+        } else {\n+          int spaceToWrapAt \u003d str.lastIndexOf(32, wrapLength + offset);\n+          if(spaceToWrapAt \u003e\u003d offset) {\n+            wrappedLine.append(str.substring(offset, spaceToWrapAt));\n+            wrappedLine.append(newLineStr);\n+            offset \u003d spaceToWrapAt + 1;\n+          } else if(wrapLongWords) {\n+            wrappedLine.append(str.substring(offset, wrapLength + offset));\n+            wrappedLine.append(newLineStr);\n+            offset +\u003d wrapLength;\n+          } else {\n+            spaceToWrapAt \u003d str.indexOf(32, wrapLength + offset);\n+            if(spaceToWrapAt \u003e\u003d 0) {\n+              wrappedLine.append(str.substring(offset, spaceToWrapAt));\n+              wrappedLine.append(newLineStr);\n+              offset \u003d spaceToWrapAt + 1;\n+            } else {\n+              wrappedLine.append(str.substring(offset));\n+              offset \u003d inputLineLength;\n+            }\n+          }\n+        }\n+      }\n+\n+      wrappedLine.append(str.substring(offset));\n+      return wrappedLine.toString();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String wrap(String str, int wrapLength, String newLineStr,\n      boolean wrapLongWords) {\n    if(str \u003d\u003d null) {\n      return null;\n    } else {\n      if(newLineStr \u003d\u003d null) {\n        newLineStr \u003d System.lineSeparator();\n      }\n\n      if(wrapLength \u003c 1) {\n        wrapLength \u003d 1;\n      }\n\n      int inputLineLength \u003d str.length();\n      int offset \u003d 0;\n      StringBuffer wrappedLine \u003d new StringBuffer(inputLineLength + 32);\n\n      while(inputLineLength - offset \u003e wrapLength) {\n        if(str.charAt(offset) \u003d\u003d 32) {\n          ++offset;\n        } else {\n          int spaceToWrapAt \u003d str.lastIndexOf(32, wrapLength + offset);\n          if(spaceToWrapAt \u003e\u003d offset) {\n            wrappedLine.append(str.substring(offset, spaceToWrapAt));\n            wrappedLine.append(newLineStr);\n            offset \u003d spaceToWrapAt + 1;\n          } else if(wrapLongWords) {\n            wrappedLine.append(str.substring(offset, wrapLength + offset));\n            wrappedLine.append(newLineStr);\n            offset +\u003d wrapLength;\n          } else {\n            spaceToWrapAt \u003d str.indexOf(32, wrapLength + offset);\n            if(spaceToWrapAt \u003e\u003d 0) {\n              wrappedLine.append(str.substring(offset, spaceToWrapAt));\n              wrappedLine.append(newLineStr);\n              offset \u003d spaceToWrapAt + 1;\n            } else {\n              wrappedLine.append(str.substring(offset));\n              offset \u003d inputLineLength;\n            }\n          }\n        }\n      }\n\n      wrappedLine.append(str.substring(offset));\n      return wrappedLine.toString();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/StringUtils.java"
    }
  }
}