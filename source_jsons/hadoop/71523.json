{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryCli.java",
  "functionName": "bind",
  "functionId": "bind___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java",
  "functionStartLine": 248,
  "functionEndLine": 382,
  "numCommitsSeen": 4,
  "timeTaken": 1330,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "362565cf5a8cbc1e7e66847649c29666d79f6938",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "362565cf5a8cbc1e7e66847649c29666d79f6938": "Ybodychange",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int bind(String[] args) {\n    Option rest \u003d OptionBuilder.withArgName(\"rest\")\n                               .hasArg()\n                               .withDescription(\"rest Option\")\n                               .create(\"rest\");\n    Option webui \u003d OptionBuilder.withArgName(\"webui\")\n                                .hasArg()\n                                .withDescription(\"webui Option\")\n                                .create(\"webui\");\n    Option inet \u003d OptionBuilder.withArgName(\"inet\")\n                               .withDescription(\"inet Option\")\n                               .create(\"inet\");\n    Option port \u003d OptionBuilder.withArgName(\"port\")\n                               .hasArg()\n                               .withDescription(\"port to listen on [9999]\")\n                               .create(\"p\");\n    Option host \u003d OptionBuilder.withArgName(\"host\")\n                               .hasArg()\n                               .withDescription(\"host name\")\n                               .create(\"h\");\n    Option apiOpt \u003d OptionBuilder.withArgName(\"api\")\n                                 .hasArg()\n                                 .withDescription(\"api\")\n                                 .create(\"api\");\n    Options inetOption \u003d new Options();\n    inetOption.addOption(inet);\n    inetOption.addOption(port);\n    inetOption.addOption(host);\n    inetOption.addOption(apiOpt);\n\n    Options webuiOpt \u003d new Options();\n    webuiOpt.addOption(webui);\n    webuiOpt.addOption(apiOpt);\n\n    Options restOpt \u003d new Options();\n    restOpt.addOption(rest);\n    restOpt.addOption(apiOpt);\n\n\n    CommandLineParser parser \u003d new GnuParser();\n    ServiceRecord sr \u003d new ServiceRecord();\n    CommandLine line;\n    if (args.length \u003c\u003d 1) {\n      return usageError(\"Invalid syntax \", BIND_USAGE);\n    }\n    if (args[1].equals(\"-inet\")) {\n      int portNum;\n      String hostName;\n      String api;\n\n      try {\n        line \u003d parser.parse(inetOption, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"inet\") \u0026\u0026 line.hasOption(\"p\") \u0026\u0026\n          line.hasOption(\"h\") \u0026\u0026 line.hasOption(\"api\")) {\n        try {\n          portNum \u003d Integer.parseInt(line.getOptionValue(\"p\"));\n        } catch (NumberFormatException exp) {\n          return usageError(\"Invalid Port - int required\" + exp.getMessage(),\n              BIND_USAGE);\n        }\n        hostName \u003d line.getOptionValue(\"h\");\n        api \u003d line.getOptionValue(\"api\");\n        sr.addExternalEndpoint(\n            inetAddrEndpoint(api, ProtocolTypes.PROTOCOL_HADOOP_IPC, hostName,\n                portNum));\n\n      } else {\n        return usageError(\"Missing options: must have host, port and api\",\n            BIND_USAGE);\n      }\n\n    } else if (args[1].equals(\"-webui\")) {\n      try {\n        line \u003d parser.parse(webuiOpt, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"webui\") \u0026\u0026 line.hasOption(\"api\")) {\n        URI theUri;\n        try {\n          theUri \u003d new URI(line.getOptionValue(\"webui\"));\n        } catch (URISyntaxException e) {\n          return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n        }\n        sr.addExternalEndpoint(webEndpoint(line.getOptionValue(\"api\"), theUri));\n\n      } else {\n        return usageError(\"Missing options: must have value for uri and api\",\n            BIND_USAGE);\n      }\n    } else if (args[1].equals(\"-rest\")) {\n      try {\n        line \u003d parser.parse(restOpt, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"rest\") \u0026\u0026 line.hasOption(\"api\")) {\n        URI theUri \u003d null;\n        try {\n          theUri \u003d new URI(line.getOptionValue(\"rest\"));\n        } catch (URISyntaxException e) {\n          return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n        }\n        sr.addExternalEndpoint(\n            restEndpoint(line.getOptionValue(\"api\"), theUri));\n\n      } else {\n        return usageError(\"Missing options: must have value for uri and api\",\n            BIND_USAGE);\n      }\n\n    } else {\n      return usageError(\"Invalid syntax\", BIND_USAGE);\n    }\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e argsList \u003d line.getArgList();\n    if (argsList.size() !\u003d 2) {\n      return usageError(\"bind requires exactly one path argument\", BIND_USAGE);\n    }\n    if (!validatePath(argsList.get(1))) {\n      return -1;\n    }\n\n    try {\n      registry.bind(argsList.get(1), sr, BindFlags.OVERWRITE);\n      return 0;\n    } catch (Exception e) {\n      syserr.println(analyzeException(\"bind\", e, argsList));\n    }\n\n    return -1;\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java"
      }
    },
    "362565cf5a8cbc1e7e66847649c29666d79f6938": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2616 [YARN-913] Add CLI client to the registry to list, view and manipulate entries. (Akshay Radia via stevel)\n",
      "commitDate": "11/02/15 6:19 AM",
      "commitName": "362565cf5a8cbc1e7e66847649c29666d79f6938",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "06/11/14 12:22 PM",
      "commitNameOld": "1670578018b3210d518408530858a869e37b23cb",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 96.75,
      "commitsBetweenForRepo": 669,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,135 @@\n-\tpublic int bind(String [] args) {\n-\t\tOption rest \u003d OptionBuilder.withArgName(\"rest\")\n-\t\t\t\t.hasArg()\n-\t\t\t\t.withDescription(\"rest Option\")\n-\t\t\t\t.create(\"rest\");\n-\t\tOption webui \u003d OptionBuilder.withArgName(\"webui\")\n-\t\t\t\t.hasArg()\n-\t\t\t\t.withDescription(\"webui Option\")\n-\t\t\t\t.create(\"webui\");\n-\t\tOption inet \u003d OptionBuilder.withArgName(\"inet\")\n-\t\t\t\t.withDescription(\"inet Option\")\n-\t\t\t\t.create(\"inet\");\n-\t\tOption port \u003d OptionBuilder.withArgName(\"port\")\n-\t\t\t\t.hasArg()\n-\t\t\t\t.withDescription(\"port to listen on [9999]\")\n-\t\t\t\t.create(\"p\");\n-\t\tOption host \u003d OptionBuilder.withArgName(\"host\")\n-\t\t\t\t.hasArg()\n-\t\t\t\t.withDescription(\"host name\")\n-\t\t\t\t.create(\"h\");\n-\t\tOption apiOpt \u003d OptionBuilder.withArgName(\"api\")\n-\t\t\t\t.hasArg()\n-\t\t\t\t.withDescription(\"api\")\n-\t\t\t\t.create(\"api\");\n-\t\tOptions inetOption \u003d new Options();\n-\t\tinetOption.addOption(inet);\n-\t\tinetOption.addOption(port);\n-\t\tinetOption.addOption(host);\n-\t\tinetOption.addOption(apiOpt);\n+  public int bind(String[] args) {\n+    Option rest \u003d OptionBuilder.withArgName(\"rest\")\n+                               .hasArg()\n+                               .withDescription(\"rest Option\")\n+                               .create(\"rest\");\n+    Option webui \u003d OptionBuilder.withArgName(\"webui\")\n+                                .hasArg()\n+                                .withDescription(\"webui Option\")\n+                                .create(\"webui\");\n+    Option inet \u003d OptionBuilder.withArgName(\"inet\")\n+                               .withDescription(\"inet Option\")\n+                               .create(\"inet\");\n+    Option port \u003d OptionBuilder.withArgName(\"port\")\n+                               .hasArg()\n+                               .withDescription(\"port to listen on [9999]\")\n+                               .create(\"p\");\n+    Option host \u003d OptionBuilder.withArgName(\"host\")\n+                               .hasArg()\n+                               .withDescription(\"host name\")\n+                               .create(\"h\");\n+    Option apiOpt \u003d OptionBuilder.withArgName(\"api\")\n+                                 .hasArg()\n+                                 .withDescription(\"api\")\n+                                 .create(\"api\");\n+    Options inetOption \u003d new Options();\n+    inetOption.addOption(inet);\n+    inetOption.addOption(port);\n+    inetOption.addOption(host);\n+    inetOption.addOption(apiOpt);\n \n-\t\tOptions webuiOpt \u003d new Options();\n-\t\twebuiOpt.addOption(webui);\n-\t\twebuiOpt.addOption(apiOpt);\n+    Options webuiOpt \u003d new Options();\n+    webuiOpt.addOption(webui);\n+    webuiOpt.addOption(apiOpt);\n \n-\t\tOptions restOpt \u003d new Options();\n-\t\trestOpt.addOption(rest);\n-\t\trestOpt.addOption(apiOpt);\n+    Options restOpt \u003d new Options();\n+    restOpt.addOption(rest);\n+    restOpt.addOption(apiOpt);\n \n \n     CommandLineParser parser \u003d new GnuParser();\n     ServiceRecord sr \u003d new ServiceRecord();\n-    CommandLine line \u003d null;\n+    CommandLine line;\n     if (args.length \u003c\u003d 1) {\n       return usageError(\"Invalid syntax \", BIND_USAGE);\n     }\n     if (args[1].equals(\"-inet\")) {\n       int portNum;\n       String hostName;\n       String api;\n \n       try {\n         line \u003d parser.parse(inetOption, args);\n       } catch (ParseException exp) {\n         return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n       }\n       if (line.hasOption(\"inet\") \u0026\u0026 line.hasOption(\"p\") \u0026\u0026\n           line.hasOption(\"h\") \u0026\u0026 line.hasOption(\"api\")) {\n-        portNum \u003d Integer.parseInt(line.getOptionValue(\"p\"));\n+        try {\n+          portNum \u003d Integer.parseInt(line.getOptionValue(\"p\"));\n+        } catch (NumberFormatException exp) {\n+          return usageError(\"Invalid Port - int required\" + exp.getMessage(),\n+              BIND_USAGE);\n+        }\n         hostName \u003d line.getOptionValue(\"h\");\n         api \u003d line.getOptionValue(\"api\");\n         sr.addExternalEndpoint(\n             inetAddrEndpoint(api, ProtocolTypes.PROTOCOL_HADOOP_IPC, hostName,\n                 portNum));\n \n       } else {\n         return usageError(\"Missing options: must have host, port and api\",\n             BIND_USAGE);\n       }\n \n     } else if (args[1].equals(\"-webui\")) {\n       try {\n         line \u003d parser.parse(webuiOpt, args);\n       } catch (ParseException exp) {\n         return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n       }\n       if (line.hasOption(\"webui\") \u0026\u0026 line.hasOption(\"api\")) {\n-        URI theUri \u003d null;\n+        URI theUri;\n         try {\n           theUri \u003d new URI(line.getOptionValue(\"webui\"));\n         } catch (URISyntaxException e) {\n           return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n         }\n         sr.addExternalEndpoint(webEndpoint(line.getOptionValue(\"api\"), theUri));\n \n       } else {\n         return usageError(\"Missing options: must have value for uri and api\",\n             BIND_USAGE);\n       }\n     } else if (args[1].equals(\"-rest\")) {\n       try {\n         line \u003d parser.parse(restOpt, args);\n       } catch (ParseException exp) {\n         return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n       }\n       if (line.hasOption(\"rest\") \u0026\u0026 line.hasOption(\"api\")) {\n         URI theUri \u003d null;\n         try {\n           theUri \u003d new URI(line.getOptionValue(\"rest\"));\n         } catch (URISyntaxException e) {\n           return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n         }\n         sr.addExternalEndpoint(\n             restEndpoint(line.getOptionValue(\"api\"), theUri));\n \n       } else {\n         return usageError(\"Missing options: must have value for uri and api\",\n             BIND_USAGE);\n       }\n \n     } else {\n       return usageError(\"Invalid syntax\", BIND_USAGE);\n     }\n     @SuppressWarnings(\"unchecked\")\n-\t\tList\u003cString\u003e argsList \u003d line.getArgList();\n-\t\tif (argsList.size() !\u003d 2) {\n-\t\t\treturn usageError(\"bind requires exactly one path argument\", BIND_USAGE);\n-\t    }\n-\t\tif (!validatePath(argsList.get(1)))\n-\t\t\treturn -1;\n+    List\u003cString\u003e argsList \u003d line.getArgList();\n+    if (argsList.size() !\u003d 2) {\n+      return usageError(\"bind requires exactly one path argument\", BIND_USAGE);\n+    }\n+    if (!validatePath(argsList.get(1))) {\n+      return -1;\n+    }\n \n-\t\ttry {\n-\t\t\tregistry.bind(argsList.get(1), sr, BindFlags.OVERWRITE);\n-\t\t\treturn 0;\n+    try {\n+      registry.bind(argsList.get(1), sr, BindFlags.OVERWRITE);\n+      return 0;\n     } catch (Exception e) {\n       syserr.println(analyzeException(\"bind\", e, argsList));\n     }\n \n     return -1;\n-\t}\n\\ No newline at end of file\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int bind(String[] args) {\n    Option rest \u003d OptionBuilder.withArgName(\"rest\")\n                               .hasArg()\n                               .withDescription(\"rest Option\")\n                               .create(\"rest\");\n    Option webui \u003d OptionBuilder.withArgName(\"webui\")\n                                .hasArg()\n                                .withDescription(\"webui Option\")\n                                .create(\"webui\");\n    Option inet \u003d OptionBuilder.withArgName(\"inet\")\n                               .withDescription(\"inet Option\")\n                               .create(\"inet\");\n    Option port \u003d OptionBuilder.withArgName(\"port\")\n                               .hasArg()\n                               .withDescription(\"port to listen on [9999]\")\n                               .create(\"p\");\n    Option host \u003d OptionBuilder.withArgName(\"host\")\n                               .hasArg()\n                               .withDescription(\"host name\")\n                               .create(\"h\");\n    Option apiOpt \u003d OptionBuilder.withArgName(\"api\")\n                                 .hasArg()\n                                 .withDescription(\"api\")\n                                 .create(\"api\");\n    Options inetOption \u003d new Options();\n    inetOption.addOption(inet);\n    inetOption.addOption(port);\n    inetOption.addOption(host);\n    inetOption.addOption(apiOpt);\n\n    Options webuiOpt \u003d new Options();\n    webuiOpt.addOption(webui);\n    webuiOpt.addOption(apiOpt);\n\n    Options restOpt \u003d new Options();\n    restOpt.addOption(rest);\n    restOpt.addOption(apiOpt);\n\n\n    CommandLineParser parser \u003d new GnuParser();\n    ServiceRecord sr \u003d new ServiceRecord();\n    CommandLine line;\n    if (args.length \u003c\u003d 1) {\n      return usageError(\"Invalid syntax \", BIND_USAGE);\n    }\n    if (args[1].equals(\"-inet\")) {\n      int portNum;\n      String hostName;\n      String api;\n\n      try {\n        line \u003d parser.parse(inetOption, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"inet\") \u0026\u0026 line.hasOption(\"p\") \u0026\u0026\n          line.hasOption(\"h\") \u0026\u0026 line.hasOption(\"api\")) {\n        try {\n          portNum \u003d Integer.parseInt(line.getOptionValue(\"p\"));\n        } catch (NumberFormatException exp) {\n          return usageError(\"Invalid Port - int required\" + exp.getMessage(),\n              BIND_USAGE);\n        }\n        hostName \u003d line.getOptionValue(\"h\");\n        api \u003d line.getOptionValue(\"api\");\n        sr.addExternalEndpoint(\n            inetAddrEndpoint(api, ProtocolTypes.PROTOCOL_HADOOP_IPC, hostName,\n                portNum));\n\n      } else {\n        return usageError(\"Missing options: must have host, port and api\",\n            BIND_USAGE);\n      }\n\n    } else if (args[1].equals(\"-webui\")) {\n      try {\n        line \u003d parser.parse(webuiOpt, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"webui\") \u0026\u0026 line.hasOption(\"api\")) {\n        URI theUri;\n        try {\n          theUri \u003d new URI(line.getOptionValue(\"webui\"));\n        } catch (URISyntaxException e) {\n          return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n        }\n        sr.addExternalEndpoint(webEndpoint(line.getOptionValue(\"api\"), theUri));\n\n      } else {\n        return usageError(\"Missing options: must have value for uri and api\",\n            BIND_USAGE);\n      }\n    } else if (args[1].equals(\"-rest\")) {\n      try {\n        line \u003d parser.parse(restOpt, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"rest\") \u0026\u0026 line.hasOption(\"api\")) {\n        URI theUri \u003d null;\n        try {\n          theUri \u003d new URI(line.getOptionValue(\"rest\"));\n        } catch (URISyntaxException e) {\n          return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n        }\n        sr.addExternalEndpoint(\n            restEndpoint(line.getOptionValue(\"api\"), theUri));\n\n      } else {\n        return usageError(\"Missing options: must have value for uri and api\",\n            BIND_USAGE);\n      }\n\n    } else {\n      return usageError(\"Invalid syntax\", BIND_USAGE);\n    }\n    @SuppressWarnings(\"unchecked\")\n    List\u003cString\u003e argsList \u003d line.getArgList();\n    if (argsList.size() !\u003d 2) {\n      return usageError(\"bind requires exactly one path argument\", BIND_USAGE);\n    }\n    if (!validatePath(argsList.get(1))) {\n      return -1;\n    }\n\n    try {\n      registry.bind(argsList.get(1), sr, BindFlags.OVERWRITE);\n      return 0;\n    } catch (Exception e) {\n      syserr.println(analyzeException(\"bind\", e, argsList));\n    }\n\n    return -1;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java",
      "extendedDetails": {}
    },
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-913 service registry: YARN-2652 add hadoop-yarn-registry package under hadoop-yarn\n",
      "commitDate": "08/10/14 1:02 PM",
      "commitName": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,129 @@\n+\tpublic int bind(String [] args) {\n+\t\tOption rest \u003d OptionBuilder.withArgName(\"rest\")\n+\t\t\t\t.hasArg()\n+\t\t\t\t.withDescription(\"rest Option\")\n+\t\t\t\t.create(\"rest\");\n+\t\tOption webui \u003d OptionBuilder.withArgName(\"webui\")\n+\t\t\t\t.hasArg()\n+\t\t\t\t.withDescription(\"webui Option\")\n+\t\t\t\t.create(\"webui\");\n+\t\tOption inet \u003d OptionBuilder.withArgName(\"inet\")\n+\t\t\t\t.withDescription(\"inet Option\")\n+\t\t\t\t.create(\"inet\");\n+\t\tOption port \u003d OptionBuilder.withArgName(\"port\")\n+\t\t\t\t.hasArg()\n+\t\t\t\t.withDescription(\"port to listen on [9999]\")\n+\t\t\t\t.create(\"p\");\n+\t\tOption host \u003d OptionBuilder.withArgName(\"host\")\n+\t\t\t\t.hasArg()\n+\t\t\t\t.withDescription(\"host name\")\n+\t\t\t\t.create(\"h\");\n+\t\tOption apiOpt \u003d OptionBuilder.withArgName(\"api\")\n+\t\t\t\t.hasArg()\n+\t\t\t\t.withDescription(\"api\")\n+\t\t\t\t.create(\"api\");\n+\t\tOptions inetOption \u003d new Options();\n+\t\tinetOption.addOption(inet);\n+\t\tinetOption.addOption(port);\n+\t\tinetOption.addOption(host);\n+\t\tinetOption.addOption(apiOpt);\n+\n+\t\tOptions webuiOpt \u003d new Options();\n+\t\twebuiOpt.addOption(webui);\n+\t\twebuiOpt.addOption(apiOpt);\n+\n+\t\tOptions restOpt \u003d new Options();\n+\t\trestOpt.addOption(rest);\n+\t\trestOpt.addOption(apiOpt);\n+\n+\n+    CommandLineParser parser \u003d new GnuParser();\n+    ServiceRecord sr \u003d new ServiceRecord();\n+    CommandLine line \u003d null;\n+    if (args.length \u003c\u003d 1) {\n+      return usageError(\"Invalid syntax \", BIND_USAGE);\n+    }\n+    if (args[1].equals(\"-inet\")) {\n+      int portNum;\n+      String hostName;\n+      String api;\n+\n+      try {\n+        line \u003d parser.parse(inetOption, args);\n+      } catch (ParseException exp) {\n+        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n+      }\n+      if (line.hasOption(\"inet\") \u0026\u0026 line.hasOption(\"p\") \u0026\u0026\n+          line.hasOption(\"h\") \u0026\u0026 line.hasOption(\"api\")) {\n+        portNum \u003d Integer.parseInt(line.getOptionValue(\"p\"));\n+        hostName \u003d line.getOptionValue(\"h\");\n+        api \u003d line.getOptionValue(\"api\");\n+        sr.addExternalEndpoint(\n+            inetAddrEndpoint(api, ProtocolTypes.PROTOCOL_HADOOP_IPC, hostName,\n+                portNum));\n+\n+      } else {\n+        return usageError(\"Missing options: must have host, port and api\",\n+            BIND_USAGE);\n+      }\n+\n+    } else if (args[1].equals(\"-webui\")) {\n+      try {\n+        line \u003d parser.parse(webuiOpt, args);\n+      } catch (ParseException exp) {\n+        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n+      }\n+      if (line.hasOption(\"webui\") \u0026\u0026 line.hasOption(\"api\")) {\n+        URI theUri \u003d null;\n+        try {\n+          theUri \u003d new URI(line.getOptionValue(\"webui\"));\n+        } catch (URISyntaxException e) {\n+          return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n+        }\n+        sr.addExternalEndpoint(webEndpoint(line.getOptionValue(\"api\"), theUri));\n+\n+      } else {\n+        return usageError(\"Missing options: must have value for uri and api\",\n+            BIND_USAGE);\n+      }\n+    } else if (args[1].equals(\"-rest\")) {\n+      try {\n+        line \u003d parser.parse(restOpt, args);\n+      } catch (ParseException exp) {\n+        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n+      }\n+      if (line.hasOption(\"rest\") \u0026\u0026 line.hasOption(\"api\")) {\n+        URI theUri \u003d null;\n+        try {\n+          theUri \u003d new URI(line.getOptionValue(\"rest\"));\n+        } catch (URISyntaxException e) {\n+          return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n+        }\n+        sr.addExternalEndpoint(\n+            restEndpoint(line.getOptionValue(\"api\"), theUri));\n+\n+      } else {\n+        return usageError(\"Missing options: must have value for uri and api\",\n+            BIND_USAGE);\n+      }\n+\n+    } else {\n+      return usageError(\"Invalid syntax\", BIND_USAGE);\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+\t\tList\u003cString\u003e argsList \u003d line.getArgList();\n+\t\tif (argsList.size() !\u003d 2) {\n+\t\t\treturn usageError(\"bind requires exactly one path argument\", BIND_USAGE);\n+\t    }\n+\t\tif (!validatePath(argsList.get(1)))\n+\t\t\treturn -1;\n+\n+\t\ttry {\n+\t\t\tregistry.bind(argsList.get(1), sr, BindFlags.OVERWRITE);\n+\t\t\treturn 0;\n+    } catch (Exception e) {\n+      syserr.println(analyzeException(\"bind\", e, argsList));\n+    }\n+\n+    return -1;\n+\t}\n\\ No newline at end of file\n",
      "actualSource": "\tpublic int bind(String [] args) {\n\t\tOption rest \u003d OptionBuilder.withArgName(\"rest\")\n\t\t\t\t.hasArg()\n\t\t\t\t.withDescription(\"rest Option\")\n\t\t\t\t.create(\"rest\");\n\t\tOption webui \u003d OptionBuilder.withArgName(\"webui\")\n\t\t\t\t.hasArg()\n\t\t\t\t.withDescription(\"webui Option\")\n\t\t\t\t.create(\"webui\");\n\t\tOption inet \u003d OptionBuilder.withArgName(\"inet\")\n\t\t\t\t.withDescription(\"inet Option\")\n\t\t\t\t.create(\"inet\");\n\t\tOption port \u003d OptionBuilder.withArgName(\"port\")\n\t\t\t\t.hasArg()\n\t\t\t\t.withDescription(\"port to listen on [9999]\")\n\t\t\t\t.create(\"p\");\n\t\tOption host \u003d OptionBuilder.withArgName(\"host\")\n\t\t\t\t.hasArg()\n\t\t\t\t.withDescription(\"host name\")\n\t\t\t\t.create(\"h\");\n\t\tOption apiOpt \u003d OptionBuilder.withArgName(\"api\")\n\t\t\t\t.hasArg()\n\t\t\t\t.withDescription(\"api\")\n\t\t\t\t.create(\"api\");\n\t\tOptions inetOption \u003d new Options();\n\t\tinetOption.addOption(inet);\n\t\tinetOption.addOption(port);\n\t\tinetOption.addOption(host);\n\t\tinetOption.addOption(apiOpt);\n\n\t\tOptions webuiOpt \u003d new Options();\n\t\twebuiOpt.addOption(webui);\n\t\twebuiOpt.addOption(apiOpt);\n\n\t\tOptions restOpt \u003d new Options();\n\t\trestOpt.addOption(rest);\n\t\trestOpt.addOption(apiOpt);\n\n\n    CommandLineParser parser \u003d new GnuParser();\n    ServiceRecord sr \u003d new ServiceRecord();\n    CommandLine line \u003d null;\n    if (args.length \u003c\u003d 1) {\n      return usageError(\"Invalid syntax \", BIND_USAGE);\n    }\n    if (args[1].equals(\"-inet\")) {\n      int portNum;\n      String hostName;\n      String api;\n\n      try {\n        line \u003d parser.parse(inetOption, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"inet\") \u0026\u0026 line.hasOption(\"p\") \u0026\u0026\n          line.hasOption(\"h\") \u0026\u0026 line.hasOption(\"api\")) {\n        portNum \u003d Integer.parseInt(line.getOptionValue(\"p\"));\n        hostName \u003d line.getOptionValue(\"h\");\n        api \u003d line.getOptionValue(\"api\");\n        sr.addExternalEndpoint(\n            inetAddrEndpoint(api, ProtocolTypes.PROTOCOL_HADOOP_IPC, hostName,\n                portNum));\n\n      } else {\n        return usageError(\"Missing options: must have host, port and api\",\n            BIND_USAGE);\n      }\n\n    } else if (args[1].equals(\"-webui\")) {\n      try {\n        line \u003d parser.parse(webuiOpt, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"webui\") \u0026\u0026 line.hasOption(\"api\")) {\n        URI theUri \u003d null;\n        try {\n          theUri \u003d new URI(line.getOptionValue(\"webui\"));\n        } catch (URISyntaxException e) {\n          return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n        }\n        sr.addExternalEndpoint(webEndpoint(line.getOptionValue(\"api\"), theUri));\n\n      } else {\n        return usageError(\"Missing options: must have value for uri and api\",\n            BIND_USAGE);\n      }\n    } else if (args[1].equals(\"-rest\")) {\n      try {\n        line \u003d parser.parse(restOpt, args);\n      } catch (ParseException exp) {\n        return usageError(\"Invalid syntax \" + exp.getMessage(), BIND_USAGE);\n      }\n      if (line.hasOption(\"rest\") \u0026\u0026 line.hasOption(\"api\")) {\n        URI theUri \u003d null;\n        try {\n          theUri \u003d new URI(line.getOptionValue(\"rest\"));\n        } catch (URISyntaxException e) {\n          return usageError(\"Invalid URI: \" + e.getMessage(), BIND_USAGE);\n        }\n        sr.addExternalEndpoint(\n            restEndpoint(line.getOptionValue(\"api\"), theUri));\n\n      } else {\n        return usageError(\"Missing options: must have value for uri and api\",\n            BIND_USAGE);\n      }\n\n    } else {\n      return usageError(\"Invalid syntax\", BIND_USAGE);\n    }\n    @SuppressWarnings(\"unchecked\")\n\t\tList\u003cString\u003e argsList \u003d line.getArgList();\n\t\tif (argsList.size() !\u003d 2) {\n\t\t\treturn usageError(\"bind requires exactly one path argument\", BIND_USAGE);\n\t    }\n\t\tif (!validatePath(argsList.get(1)))\n\t\t\treturn -1;\n\n\t\ttry {\n\t\t\tregistry.bind(argsList.get(1), sr, BindFlags.OVERWRITE);\n\t\t\treturn 0;\n    } catch (Exception e) {\n      syserr.println(analyzeException(\"bind\", e, argsList));\n    }\n\n    return -1;\n\t}",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/cli/RegistryCli.java"
    }
  }
}