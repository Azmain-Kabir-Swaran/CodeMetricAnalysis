{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SelfRenewingLease.java",
  "functionName": "free",
  "functionId": "free",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SelfRenewingLease.java",
  "functionStartLine": 122,
  "functionEndLine": 149,
  "numCommitsSeen": 7,
  "timeTaken": 1328,
  "changeHistory": [
    "990aa34de23c625163745ebc338483065d955bbe",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40"
  ],
  "changeHistoryShort": {
    "990aa34de23c625163745ebc338483065d955bbe": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "990aa34de23c625163745ebc338483065d955bbe": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14609. NPE in AzureNativeFileSystemStore.checkContainer() if StorageException lacks an error code. Contributed by Steve Loughran\n",
      "commitDate": "28/06/17 2:18 PM",
      "commitName": "990aa34de23c625163745ebc338483065d955bbe",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/12/16 4:24 PM",
      "commitNameOld": "c6a5b689db573046819f0e9193cb042e6c7298f4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 180.87,
      "commitsBetweenForRepo": 956,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void free() throws StorageException {\n     AccessCondition accessCondition \u003d AccessCondition.generateEmptyCondition();\n     accessCondition.setLeaseID(leaseID);\n     try {\n       blobWrapper.getBlob().releaseLease(accessCondition);\n     } catch (StorageException e) {\n-      if (e.getErrorCode().equals(\"BlobNotFound\")) {\n+      if (\"BlobNotFound\".equals(e.getErrorCode())) {\n \n         // Don\u0027t do anything -- it\u0027s okay to free a lease\n         // on a deleted file. The delete freed the lease\n         // implicitly.\n       } else {\n \n         // This error is not anticipated, so re-throw it.\n         LOG.warn(\"Unanticipated exception when trying to free lease \" + leaseID\n             + \" on \" +  blobWrapper.getStorageUri());\n         throw(e);\n       }\n     } finally {\n \n       // Even if releasing the lease fails (e.g. because the file was deleted),\n       // make sure to record that we freed the lease, to terminate the\n       // keep-alive thread.\n       leaseFreed \u003d true;\n       LOG.debug(\"Freed lease \" + leaseID + \" on \" + blobWrapper.getUri()\n           + \" managed by thread \" + renewer.getName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void free() throws StorageException {\n    AccessCondition accessCondition \u003d AccessCondition.generateEmptyCondition();\n    accessCondition.setLeaseID(leaseID);\n    try {\n      blobWrapper.getBlob().releaseLease(accessCondition);\n    } catch (StorageException e) {\n      if (\"BlobNotFound\".equals(e.getErrorCode())) {\n\n        // Don\u0027t do anything -- it\u0027s okay to free a lease\n        // on a deleted file. The delete freed the lease\n        // implicitly.\n      } else {\n\n        // This error is not anticipated, so re-throw it.\n        LOG.warn(\"Unanticipated exception when trying to free lease \" + leaseID\n            + \" on \" +  blobWrapper.getStorageUri());\n        throw(e);\n      }\n    } finally {\n\n      // Even if releasing the lease fails (e.g. because the file was deleted),\n      // make sure to record that we freed the lease, to terminate the\n      // keep-alive thread.\n      leaseFreed \u003d true;\n      LOG.debug(\"Freed lease \" + leaseID + \" on \" + blobWrapper.getUri()\n          + \" managed by thread \" + renewer.getName());\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SelfRenewingLease.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,28 @@\n+  public void free() throws StorageException {\n+    AccessCondition accessCondition \u003d AccessCondition.generateEmptyCondition();\n+    accessCondition.setLeaseID(leaseID);\n+    try {\n+      blobWrapper.getBlob().releaseLease(accessCondition);\n+    } catch (StorageException e) {\n+      if (e.getErrorCode().equals(\"BlobNotFound\")) {\n+\n+        // Don\u0027t do anything -- it\u0027s okay to free a lease\n+        // on a deleted file. The delete freed the lease\n+        // implicitly.\n+      } else {\n+\n+        // This error is not anticipated, so re-throw it.\n+        LOG.warn(\"Unanticipated exception when trying to free lease \" + leaseID\n+            + \" on \" +  blobWrapper.getStorageUri());\n+        throw(e);\n+      }\n+    } finally {\n+\n+      // Even if releasing the lease fails (e.g. because the file was deleted),\n+      // make sure to record that we freed the lease, to terminate the\n+      // keep-alive thread.\n+      leaseFreed \u003d true;\n+      LOG.debug(\"Freed lease \" + leaseID + \" on \" + blobWrapper.getUri()\n+          + \" managed by thread \" + renewer.getName());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void free() throws StorageException {\n    AccessCondition accessCondition \u003d AccessCondition.generateEmptyCondition();\n    accessCondition.setLeaseID(leaseID);\n    try {\n      blobWrapper.getBlob().releaseLease(accessCondition);\n    } catch (StorageException e) {\n      if (e.getErrorCode().equals(\"BlobNotFound\")) {\n\n        // Don\u0027t do anything -- it\u0027s okay to free a lease\n        // on a deleted file. The delete freed the lease\n        // implicitly.\n      } else {\n\n        // This error is not anticipated, so re-throw it.\n        LOG.warn(\"Unanticipated exception when trying to free lease \" + leaseID\n            + \" on \" +  blobWrapper.getStorageUri());\n        throw(e);\n      }\n    } finally {\n\n      // Even if releasing the lease fails (e.g. because the file was deleted),\n      // make sure to record that we freed the lease, to terminate the\n      // keep-alive thread.\n      leaseFreed \u003d true;\n      LOG.debug(\"Freed lease \" + leaseID + \" on \" + blobWrapper.getUri()\n          + \" managed by thread \" + renewer.getName());\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SelfRenewingLease.java"
    }
  }
}