{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeProxiesClient.java",
  "functionName": "createProxyWithClientProtocol",
  "functionId": "createProxyWithClientProtocol___conf-Configuration__nameNodeUri-URI__fallbackToSimpleAuth-AtomicBoolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
  "functionStartLine": 130,
  "functionEndLine": 147,
  "numCommitsSeen": 103,
  "timeTaken": 5446,
  "changeHistory": [
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
    "54f83d9bd917e8641e902c5f0695e65ded472f9a",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "4be648b55c1ce8743f6e0ea1683168e9ed9c3ee4",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
    "f4151bbf4f54dc33836c76e6860aa043a9626e48",
    "bcbe100541d5d59cba2a5af6c3e5aa152dd5f882",
    "50222ff52903431ec7aefa30fdf4fdaa04915c92",
    "cb787968c5deac3dd5d10291aae39c36656a1487",
    "556be2af92b68808aff71937d437ab9948164bb1",
    "e4eec269d91ae541a321ae2f28ff03310682b3fe",
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
    "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1",
    "c69dfdd5e14af490790dff8227b11962ec816577"
  ],
  "changeHistoryShort": {
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "54f83d9bd917e8641e902c5f0695e65ded472f9a": "Ybodychange",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Ybodychange",
    "4be648b55c1ce8743f6e0ea1683168e9ed9c3ee4": "Ybodychange",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": "Ymultichange(Yparameterchange,Ybodychange)",
    "f4151bbf4f54dc33836c76e6860aa043a9626e48": "Ybodychange",
    "bcbe100541d5d59cba2a5af6c3e5aa152dd5f882": "Ybodychange",
    "50222ff52903431ec7aefa30fdf4fdaa04915c92": "Ybodychange",
    "cb787968c5deac3dd5d10291aae39c36656a1487": "Ybodychange",
    "556be2af92b68808aff71937d437ab9948164bb1": "Ybodychange",
    "e4eec269d91ae541a321ae2f28ff03310682b3fe": "Ybodychange",
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70": "Ybodychange",
    "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1": "Ybodychange",
    "c69dfdd5e14af490790dff8227b11962ec816577": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename)"
  },
  "changeHistoryDetails": {
    "63d9f1596c92206cce3b72e3214d2fb5f6242b90": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
      "commitDate": "22/09/15 8:52 PM",
      "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
          "commitDate": "22/09/15 8:52 PM",
          "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/09/15 9:08 AM",
          "commitNameOld": "cc2b4739902df60254dce2ddb23ef8f6ff2a3495",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,18 @@\n-  private static ClientProtocol createNNProxyWithClientProtocol(\n-      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n+  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n+      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n-    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n+    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n+        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n+            true, fallbackToSimpleAuth);\n \n-    final RetryPolicy defaultPolicy \u003d \n-        RetryUtils.getDefaultRetryPolicy(\n-            conf, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-            SafeModeException.class.getName());\n-    \n-    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n-    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n-        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n-        NetUtils.getDefaultSocketFactory(conf),\n-        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n-        fallbackToSimpleAuth).getProxy();\n-\n-    if (withRetries) { // create the proxy with retries\n-\n-      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      ClientProtocol translatorProxy \u003d\n-        new ClientNamenodeProtocolTranslatorPB(proxy);\n-      return (ClientProtocol) RetryProxy.create(\n-          ClientProtocol.class,\n-          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n-              ClientProtocol.class, translatorProxy),\n-          methodNameToPolicyMap,\n-          defaultPolicy);\n+    if (failoverProxyProvider \u003d\u003d null) {\n+      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n+      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n+      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n+          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n+      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n     } else {\n-      return new ClientNamenodeProtocolTranslatorPB(proxy);\n+      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n+          failoverProxyProvider);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n            true, fallbackToSimpleAuth);\n\n    if (failoverProxyProvider \u003d\u003d null) {\n      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n    } else {\n      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n          failoverProxyProvider);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
            "oldMethodName": "createNNProxyWithClientProtocol",
            "newMethodName": "createProxyWithClientProtocol"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
          "commitDate": "22/09/15 8:52 PM",
          "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/09/15 9:08 AM",
          "commitNameOld": "cc2b4739902df60254dce2ddb23ef8f6ff2a3495",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,18 @@\n-  private static ClientProtocol createNNProxyWithClientProtocol(\n-      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n+  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n+      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n-    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n+    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n+        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n+            true, fallbackToSimpleAuth);\n \n-    final RetryPolicy defaultPolicy \u003d \n-        RetryUtils.getDefaultRetryPolicy(\n-            conf, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-            SafeModeException.class.getName());\n-    \n-    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n-    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n-        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n-        NetUtils.getDefaultSocketFactory(conf),\n-        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n-        fallbackToSimpleAuth).getProxy();\n-\n-    if (withRetries) { // create the proxy with retries\n-\n-      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      ClientProtocol translatorProxy \u003d\n-        new ClientNamenodeProtocolTranslatorPB(proxy);\n-      return (ClientProtocol) RetryProxy.create(\n-          ClientProtocol.class,\n-          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n-              ClientProtocol.class, translatorProxy),\n-          methodNameToPolicyMap,\n-          defaultPolicy);\n+    if (failoverProxyProvider \u003d\u003d null) {\n+      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n+      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n+      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n+          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n+      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n     } else {\n-      return new ClientNamenodeProtocolTranslatorPB(proxy);\n+      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n+          failoverProxyProvider);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n            true, fallbackToSimpleAuth);\n\n    if (failoverProxyProvider \u003d\u003d null) {\n      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n    } else {\n      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n          failoverProxyProvider);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
          "extendedDetails": {
            "oldValue": "ClientProtocol",
            "newValue": "ProxyAndInfo\u003cClientProtocol\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
          "commitDate": "22/09/15 8:52 PM",
          "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/09/15 9:08 AM",
          "commitNameOld": "cc2b4739902df60254dce2ddb23ef8f6ff2a3495",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,18 @@\n-  private static ClientProtocol createNNProxyWithClientProtocol(\n-      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n+  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n+      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n-    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n+    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n+        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n+            true, fallbackToSimpleAuth);\n \n-    final RetryPolicy defaultPolicy \u003d \n-        RetryUtils.getDefaultRetryPolicy(\n-            conf, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-            SafeModeException.class.getName());\n-    \n-    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n-    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n-        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n-        NetUtils.getDefaultSocketFactory(conf),\n-        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n-        fallbackToSimpleAuth).getProxy();\n-\n-    if (withRetries) { // create the proxy with retries\n-\n-      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      ClientProtocol translatorProxy \u003d\n-        new ClientNamenodeProtocolTranslatorPB(proxy);\n-      return (ClientProtocol) RetryProxy.create(\n-          ClientProtocol.class,\n-          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n-              ClientProtocol.class, translatorProxy),\n-          methodNameToPolicyMap,\n-          defaultPolicy);\n+    if (failoverProxyProvider \u003d\u003d null) {\n+      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n+      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n+      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n+          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n+      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n     } else {\n-      return new ClientNamenodeProtocolTranslatorPB(proxy);\n+      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n+          failoverProxyProvider);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n            true, fallbackToSimpleAuth);\n\n    if (failoverProxyProvider \u003d\u003d null) {\n      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n    } else {\n      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n          failoverProxyProvider);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
          "commitDate": "22/09/15 8:52 PM",
          "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/09/15 9:08 AM",
          "commitNameOld": "cc2b4739902df60254dce2ddb23ef8f6ff2a3495",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,18 @@\n-  private static ClientProtocol createNNProxyWithClientProtocol(\n-      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n+  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n+      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n-    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n+    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n+        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n+            true, fallbackToSimpleAuth);\n \n-    final RetryPolicy defaultPolicy \u003d \n-        RetryUtils.getDefaultRetryPolicy(\n-            conf, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-            SafeModeException.class.getName());\n-    \n-    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n-    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n-        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n-        NetUtils.getDefaultSocketFactory(conf),\n-        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n-        fallbackToSimpleAuth).getProxy();\n-\n-    if (withRetries) { // create the proxy with retries\n-\n-      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      ClientProtocol translatorProxy \u003d\n-        new ClientNamenodeProtocolTranslatorPB(proxy);\n-      return (ClientProtocol) RetryProxy.create(\n-          ClientProtocol.class,\n-          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n-              ClientProtocol.class, translatorProxy),\n-          methodNameToPolicyMap,\n-          defaultPolicy);\n+    if (failoverProxyProvider \u003d\u003d null) {\n+      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n+      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n+      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n+          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n+      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n     } else {\n-      return new ClientNamenodeProtocolTranslatorPB(proxy);\n+      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n+          failoverProxyProvider);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n            true, fallbackToSimpleAuth);\n\n    if (failoverProxyProvider \u003d\u003d null) {\n      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n    } else {\n      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n          failoverProxyProvider);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
          "commitDate": "22/09/15 8:52 PM",
          "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/09/15 9:08 AM",
          "commitNameOld": "cc2b4739902df60254dce2ddb23ef8f6ff2a3495",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,18 @@\n-  private static ClientProtocol createNNProxyWithClientProtocol(\n-      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n+  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n+      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n-    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n+    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n+        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n+            true, fallbackToSimpleAuth);\n \n-    final RetryPolicy defaultPolicy \u003d \n-        RetryUtils.getDefaultRetryPolicy(\n-            conf, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-            SafeModeException.class.getName());\n-    \n-    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n-    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n-        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n-        NetUtils.getDefaultSocketFactory(conf),\n-        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n-        fallbackToSimpleAuth).getProxy();\n-\n-    if (withRetries) { // create the proxy with retries\n-\n-      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      ClientProtocol translatorProxy \u003d\n-        new ClientNamenodeProtocolTranslatorPB(proxy);\n-      return (ClientProtocol) RetryProxy.create(\n-          ClientProtocol.class,\n-          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n-              ClientProtocol.class, translatorProxy),\n-          methodNameToPolicyMap,\n-          defaultPolicy);\n+    if (failoverProxyProvider \u003d\u003d null) {\n+      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n+      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n+      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n+          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n+      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n     } else {\n-      return new ClientNamenodeProtocolTranslatorPB(proxy);\n+      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n+          failoverProxyProvider);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n            true, fallbackToSimpleAuth);\n\n    if (failoverProxyProvider \u003d\u003d null) {\n      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n    } else {\n      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n          failoverProxyProvider);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
          "extendedDetails": {
            "oldValue": "createNNProxyWithClientProtocol",
            "newValue": "createProxyWithClientProtocol"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9039. Separate client and server side methods of o.a.h.hdfs.NameNodeProxies. Contributed by Mingliang Liu.\n",
          "commitDate": "22/09/15 8:52 PM",
          "commitName": "63d9f1596c92206cce3b72e3214d2fb5f6242b90",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/09/15 9:08 AM",
          "commitNameOld": "cc2b4739902df60254dce2ddb23ef8f6ff2a3495",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,18 @@\n-  private static ClientProtocol createNNProxyWithClientProtocol(\n-      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n+  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n+      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n-    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n+    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n+        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n+            true, fallbackToSimpleAuth);\n \n-    final RetryPolicy defaultPolicy \u003d \n-        RetryUtils.getDefaultRetryPolicy(\n-            conf, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n-            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n-            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-            SafeModeException.class.getName());\n-    \n-    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n-    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n-        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n-        NetUtils.getDefaultSocketFactory(conf),\n-        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n-        fallbackToSimpleAuth).getProxy();\n-\n-    if (withRetries) { // create the proxy with retries\n-\n-      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      ClientProtocol translatorProxy \u003d\n-        new ClientNamenodeProtocolTranslatorPB(proxy);\n-      return (ClientProtocol) RetryProxy.create(\n-          ClientProtocol.class,\n-          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n-              ClientProtocol.class, translatorProxy),\n-          methodNameToPolicyMap,\n-          defaultPolicy);\n+    if (failoverProxyProvider \u003d\u003d null) {\n+      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n+      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n+      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n+          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n+      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n     } else {\n-      return new ClientNamenodeProtocolTranslatorPB(proxy);\n+      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n+          failoverProxyProvider);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ProxyAndInfo\u003cClientProtocol\u003e createProxyWithClientProtocol(\n      Configuration conf, URI nameNodeUri, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    AbstractNNFailoverProxyProvider\u003cClientProtocol\u003e failoverProxyProvider \u003d\n        createFailoverProxyProvider(conf, nameNodeUri, ClientProtocol.class,\n            true, fallbackToSimpleAuth);\n\n    if (failoverProxyProvider \u003d\u003d null) {\n      InetSocketAddress nnAddr \u003d DFSUtilClient.getNNAddress(nameNodeUri);\n      Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n      ClientProtocol proxy \u003d createNonHAProxyWithClientProtocol(nnAddr, conf,\n          UserGroupInformation.getCurrentUser(), true, fallbackToSimpleAuth);\n      return new ProxyAndInfo\u003c\u003e(proxy, dtService, nnAddr);\n    } else {\n      return createHAProxy(conf, nameNodeUri, ClientProtocol.class,\n          failoverProxyProvider);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
          "extendedDetails": {
            "oldValue": "[address-InetSocketAddress, conf-Configuration, ugi-UserGroupInformation, withRetries-boolean, fallbackToSimpleAuth-AtomicBoolean]",
            "newValue": "[conf-Configuration, nameNodeUri-URI, fallbackToSimpleAuth-AtomicBoolean]"
          }
        }
      ]
    },
    "54f83d9bd917e8641e902c5f0695e65ded472f9a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8270. create() always retried with hardcoded timeout when file already exists with open lease (Contributed by J.Andreina)\n",
      "commitDate": "02/06/15 11:41 PM",
      "commitName": "54f83d9bd917e8641e902c5f0695e65ded472f9a",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "15/05/15 7:12 PM",
      "commitNameOld": "ac742c762d5b01af61022827e9f78fd81b69d717",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 18.19,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,38 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n     final RetryPolicy defaultPolicy \u003d \n         RetryUtils.getDefaultRetryPolicy(\n             conf, \n             HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n             HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n             HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n             HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n             SafeModeException.class.getName());\n     \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf),\n         org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n         fallbackToSimpleAuth).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n-      RetryPolicy createPolicy \u003d RetryPolicies\n-          .retryUpToMaximumCountWithFixedSleep(5,\n-              HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n-    \n-      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n-                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n-          createPolicy);\n-\n-      RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n-          defaultPolicy, remoteExceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-    \n-      methodNameToPolicyMap.put(\"create\", methodPolicy);\n-\n       ClientProtocol translatorProxy \u003d\n         new ClientNamenodeProtocolTranslatorPB(proxy);\n       return (ClientProtocol) RetryProxy.create(\n           ClientProtocol.class,\n           new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n               ClientProtocol.class, translatorProxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     } else {\n       return new ClientNamenodeProtocolTranslatorPB(proxy);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n            SafeModeException.class.getName());\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n        fallbackToSimpleAuth).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n      ClientProtocol translatorProxy \u003d\n        new ClientNamenodeProtocolTranslatorPB(proxy);\n      return (ClientProtocol) RetryProxy.create(\n          ClientProtocol.class,\n          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n              ClientProtocol.class, translatorProxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    } else {\n      return new ClientNamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 5:33 PM",
      "commitNameOld": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 8.69,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n     final RetryPolicy defaultPolicy \u003d \n         RetryUtils.getDefaultRetryPolicy(\n             conf, \n             HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n             HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n             HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n             HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n             SafeModeException.class.getName());\n     \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf),\n         org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n         fallbackToSimpleAuth).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n-              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n+              HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n \n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n           defaultPolicy, remoteExceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n \n       ClientProtocol translatorProxy \u003d\n         new ClientNamenodeProtocolTranslatorPB(proxy);\n       return (ClientProtocol) RetryProxy.create(\n           ClientProtocol.class,\n           new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n               ClientProtocol.class, translatorProxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     } else {\n       return new ClientNamenodeProtocolTranslatorPB(proxy);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n            SafeModeException.class.getName());\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n        fallbackToSimpleAuth).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n          defaultPolicy, remoteExceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n\n      ClientProtocol translatorProxy \u003d\n        new ClientNamenodeProtocolTranslatorPB(proxy);\n      return (ClientProtocol) RetryProxy.create(\n          ClientProtocol.class,\n          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n              ClientProtocol.class, translatorProxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    } else {\n      return new ClientNamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/04/15 9:59 PM",
      "commitNameOld": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.82,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n     final RetryPolicy defaultPolicy \u003d \n         RetryUtils.getDefaultRetryPolicy(\n             conf, \n             HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n             HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n             HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n             HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-            SafeModeException.class);\n+            SafeModeException.class.getName());\n     \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf),\n         org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n         fallbackToSimpleAuth).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n \n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n           defaultPolicy, remoteExceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n \n       ClientProtocol translatorProxy \u003d\n         new ClientNamenodeProtocolTranslatorPB(proxy);\n       return (ClientProtocol) RetryProxy.create(\n           ClientProtocol.class,\n           new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n               ClientProtocol.class, translatorProxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     } else {\n       return new ClientNamenodeProtocolTranslatorPB(proxy);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n            SafeModeException.class.getName());\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n        fallbackToSimpleAuth).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n          defaultPolicy, remoteExceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n\n      ClientProtocol translatorProxy \u003d\n        new ClientNamenodeProtocolTranslatorPB(proxy);\n      return (ClientProtocol) RetryProxy.create(\n          ClientProtocol.class,\n          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n              ClientProtocol.class, translatorProxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    } else {\n      return new ClientNamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "4be648b55c1ce8743f6e0ea1683168e9ed9c3ee4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8079. Move dfs.client.retry.* confs from DFSConfigKeys to HdfsClientConfigKeys.Retry.\n",
      "commitDate": "07/04/15 7:48 PM",
      "commitName": "4be648b55c1ce8743f6e0ea1683168e9ed9c3ee4",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "07/04/15 1:59 PM",
      "commitNameOld": "571a1ce9d037d99e7c9042bcb77ae7a2c4daf6d3",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n       throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n     final RetryPolicy defaultPolicy \u003d \n         RetryUtils.getDefaultRetryPolicy(\n             conf, \n-            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n-            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n-            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n-            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n+            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n+            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n+            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n+            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n             SafeModeException.class);\n     \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf),\n         org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n         fallbackToSimpleAuth).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n \n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n           defaultPolicy, remoteExceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n \n       ClientProtocol translatorProxy \u003d\n         new ClientNamenodeProtocolTranslatorPB(proxy);\n       return (ClientProtocol) RetryProxy.create(\n           ClientProtocol.class,\n           new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n               ClientProtocol.class, translatorProxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     } else {\n       return new ClientNamenodeProtocolTranslatorPB(proxy);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY, \n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT, \n            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n            SafeModeException.class);\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n        fallbackToSimpleAuth).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n          defaultPolicy, remoteExceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n\n      ClientProtocol translatorProxy \u003d\n        new ClientNamenodeProtocolTranslatorPB(proxy);\n      return (ClientProtocol) RetryProxy.create(\n          ClientProtocol.class,\n          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n              ClientProtocol.class, translatorProxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    } else {\n      return new ClientNamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
      "commitDate": "19/09/14 9:23 PM",
      "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
          "commitDate": "19/09/14 9:23 PM",
          "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
          "commitAuthor": "cnauroth",
          "commitDateOld": "17/07/14 4:11 PM",
          "commitNameOld": "7ba5913797c49d5001ad95558eadd119c3361060",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 64.22,
          "commitsBetweenForRepo": 611,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,52 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries) throws IOException {\n+      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n+      throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n     final RetryPolicy defaultPolicy \u003d \n         RetryUtils.getDefaultRetryPolicy(\n             conf, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n             SafeModeException.class);\n     \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf),\n-        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy)\n-            .getProxy();\n+        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n+        fallbackToSimpleAuth).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n \n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n           defaultPolicy, remoteExceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n \n       ClientProtocol translatorProxy \u003d\n         new ClientNamenodeProtocolTranslatorPB(proxy);\n       return (ClientProtocol) RetryProxy.create(\n           ClientProtocol.class,\n           new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n               ClientProtocol.class, translatorProxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     } else {\n       return new ClientNamenodeProtocolTranslatorPB(proxy);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n            SafeModeException.class);\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n        fallbackToSimpleAuth).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n          defaultPolicy, remoteExceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n\n      ClientProtocol translatorProxy \u003d\n        new ClientNamenodeProtocolTranslatorPB(proxy);\n      return (ClientProtocol) RetryProxy.create(\n          ClientProtocol.class,\n          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n              ClientProtocol.class, translatorProxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    } else {\n      return new ClientNamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "[address-InetSocketAddress, conf-Configuration, ugi-UserGroupInformation, withRetries-boolean]",
            "newValue": "[address-InetSocketAddress, conf-Configuration, ugi-UserGroupInformation, withRetries-boolean, fallbackToSimpleAuth-AtomicBoolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
          "commitDate": "19/09/14 9:23 PM",
          "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
          "commitAuthor": "cnauroth",
          "commitDateOld": "17/07/14 4:11 PM",
          "commitNameOld": "7ba5913797c49d5001ad95558eadd119c3361060",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 64.22,
          "commitsBetweenForRepo": 611,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,52 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries) throws IOException {\n+      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n+      throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n     final RetryPolicy defaultPolicy \u003d \n         RetryUtils.getDefaultRetryPolicy(\n             conf, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n             SafeModeException.class);\n     \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf),\n-        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy)\n-            .getProxy();\n+        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n+        fallbackToSimpleAuth).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n \n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n           defaultPolicy, remoteExceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n \n       ClientProtocol translatorProxy \u003d\n         new ClientNamenodeProtocolTranslatorPB(proxy);\n       return (ClientProtocol) RetryProxy.create(\n           ClientProtocol.class,\n           new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n               ClientProtocol.class, translatorProxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     } else {\n       return new ClientNamenodeProtocolTranslatorPB(proxy);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AtomicBoolean fallbackToSimpleAuth)\n      throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n            SafeModeException.class);\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n        fallbackToSimpleAuth).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n          defaultPolicy, remoteExceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n\n      ClientProtocol translatorProxy \u003d\n        new ClientNamenodeProtocolTranslatorPB(proxy);\n      return (ClientProtocol) RetryProxy.create(\n          ClientProtocol.class,\n          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n              ClientProtocol.class, translatorProxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    } else {\n      return new ClientNamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {}
        }
      ]
    },
    "f4151bbf4f54dc33836c76e6860aa043a9626e48": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6478. RemoteException can\u0027t be retried properly for non-HA scenario. Contributed by Ming Ma.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611410 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 10:37 AM",
      "commitName": "f4151bbf4f54dc33836c76e6860aa043a9626e48",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "22/06/14 10:16 PM",
      "commitNameOld": "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 24.51,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n     final RetryPolicy defaultPolicy \u003d \n         RetryUtils.getDefaultRetryPolicy(\n             conf, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n             SafeModeException.class);\n     \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf),\n         org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy)\n             .getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n-    \n-      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n-                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n-          .retryByRemoteException(defaultPolicy,\n-              remoteExceptionToPolicyMap));\n-      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n-          defaultPolicy, exceptionToPolicyMap);\n+\n+      RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n+          defaultPolicy, remoteExceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n-    \n-      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n-          ClientNamenodeProtocolPB.class,\n-          new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n-              ClientNamenodeProtocolPB.class, proxy),\n+\n+      ClientProtocol translatorProxy \u003d\n+        new ClientNamenodeProtocolTranslatorPB(proxy);\n+      return (ClientProtocol) RetryProxy.create(\n+          ClientProtocol.class,\n+          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n+              ClientProtocol.class, translatorProxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n+    } else {\n+      return new ClientNamenodeProtocolTranslatorPB(proxy);\n     }\n-    return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n            SafeModeException.class);\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy)\n            .getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByRemoteException(\n          defaultPolicy, remoteExceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n\n      ClientProtocol translatorProxy \u003d\n        new ClientNamenodeProtocolTranslatorPB(proxy);\n      return (ClientProtocol) RetryProxy.create(\n          ClientProtocol.class,\n          new DefaultFailoverProxyProvider\u003cClientProtocol\u003e(\n              ClientProtocol.class, translatorProxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    } else {\n      return new ClientNamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "bcbe100541d5d59cba2a5af6c3e5aa152dd5f882": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4646. createNNProxyWithClientProtocol ignores configured timeout value. Contributed by Jagane Sundar \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465121 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/04/13 1:41 PM",
      "commitName": "bcbe100541d5d59cba2a5af6c3e5aa152dd5f882",
      "commitAuthor": "Konstantin Boudnik",
      "commitDateOld": "19/09/12 11:06 AM",
      "commitNameOld": "8bf6b80f2bd526157643bee0ad62894435ff6983",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 198.11,
      "commitsBetweenForRepo": 962,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n     final RetryPolicy defaultPolicy \u003d \n         RetryUtils.getDefaultRetryPolicy(\n             conf, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n             DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n             SafeModeException.class);\n     \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n-        NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n+        NetUtils.getDefaultSocketFactory(conf),\n+        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy)\n+            .getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n           .retryByRemoteException(defaultPolicy,\n               remoteExceptionToPolicyMap));\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n           defaultPolicy, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n     \n       proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n           ClientNamenodeProtocolPB.class,\n           new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n               ClientNamenodeProtocolPB.class, proxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     }\n     return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n            SafeModeException.class);\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy)\n            .getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(defaultPolicy,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          defaultPolicy, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n          ClientNamenodeProtocolPB.class,\n          new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n              ClientNamenodeProtocolPB.class, proxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "50222ff52903431ec7aefa30fdf4fdaa04915c92": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3871. Change NameNodeProxies to use RetryUtils.  Contributed by Arun C Murthy\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1379743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/09/12 4:41 AM",
      "commitName": "50222ff52903431ec7aefa30fdf4fdaa04915c92",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "31/07/12 6:41 PM",
      "commitNameOld": "cb787968c5deac3dd5d10291aae39c36656a1487",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 31.42,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,51 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n-    final RetryPolicy defaultPolicy \u003d getDefaultRetryPolicy(conf);\n+    final RetryPolicy defaultPolicy \u003d \n+        RetryUtils.getDefaultRetryPolicy(\n+            conf, \n+            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n+            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n+            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n+            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n+            SafeModeException.class);\n+    \n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n           .retryByRemoteException(defaultPolicy,\n               remoteExceptionToPolicyMap));\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n           defaultPolicy, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n     \n       proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n           ClientNamenodeProtocolPB.class,\n           new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n               ClientNamenodeProtocolPB.class, proxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     }\n     return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d \n        RetryUtils.getDefaultRetryPolicy(\n            conf, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT, \n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,\n            DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,\n            SafeModeException.class);\n    \n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(defaultPolicy,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          defaultPolicy, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n          ClientNamenodeProtocolPB.class,\n          new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n              ClientNamenodeProtocolPB.class, proxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "cb787968c5deac3dd5d10291aae39c36656a1487": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/12 6:41 PM",
      "commitName": "cb787968c5deac3dd5d10291aae39c36656a1487",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "30/07/12 9:33 PM",
      "commitNameOld": "556be2af92b68808aff71937d437ab9948164bb1",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n-    final RetryPolicy defaultPolicy \u003d getDefaultRpcRetryPolicy(conf);\n+    final RetryPolicy defaultPolicy \u003d getDefaultRetryPolicy(conf);\n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n           .retryByRemoteException(defaultPolicy,\n               remoteExceptionToPolicyMap));\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n           defaultPolicy, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n     \n       proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n           ClientNamenodeProtocolPB.class,\n           new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n               ClientNamenodeProtocolPB.class, proxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     }\n     return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d getDefaultRetryPolicy(conf);\n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(defaultPolicy,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          defaultPolicy, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n          ClientNamenodeProtocolPB.class,\n          new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n              ClientNamenodeProtocolPB.class, proxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "556be2af92b68808aff71937d437ab9948164bb1": {
      "type": "Ybodychange",
      "commitMessage": "svn merge -c -1366601 for reverting HDFS-3667.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367407 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/12 9:33 PM",
      "commitName": "556be2af92b68808aff71937d437ab9948164bb1",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/07/12 10:57 PM",
      "commitNameOld": "e4eec269d91ae541a321ae2f28ff03310682b3fe",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.94,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n-    final RetryPolicy defaultPolicy \u003d getDefaultRetryPolicy(conf);\n+    final RetryPolicy defaultPolicy \u003d getDefaultRpcRetryPolicy(conf);\n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n           .retryByRemoteException(defaultPolicy,\n               remoteExceptionToPolicyMap));\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n           defaultPolicy, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n     \n       proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n           ClientNamenodeProtocolPB.class,\n           new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n               ClientNamenodeProtocolPB.class, proxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     }\n     return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d getDefaultRpcRetryPolicy(conf);\n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(defaultPolicy,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          defaultPolicy, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n          ClientNamenodeProtocolPB.class,\n          new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n              ClientNamenodeProtocolPB.class, proxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "e4eec269d91ae541a321ae2f28ff03310682b3fe": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1366601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/12 10:57 PM",
      "commitName": "e4eec269d91ae541a321ae2f28ff03310682b3fe",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/06/12 6:25 PM",
      "commitNameOld": "f105784d6a28d2a0cedb619f0951de93d995e9da",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 30.19,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n \n-    final RetryPolicy defaultPolicy \u003d getDefaultRpcRetryPolicy(conf);\n+    final RetryPolicy defaultPolicy \u003d getDefaultRetryPolicy(conf);\n     final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n     ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n         ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n         NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n \n     if (withRetries) { // create the proxy with retries\n \n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n           .retryByRemoteException(defaultPolicy,\n               remoteExceptionToPolicyMap));\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n           defaultPolicy, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n     \n       proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n           ClientNamenodeProtocolPB.class,\n           new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n               ClientNamenodeProtocolPB.class, proxy),\n           methodNameToPolicyMap,\n           defaultPolicy);\n     }\n     return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d getDefaultRetryPolicy(conf);\n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(defaultPolicy,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          defaultPolicy, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n          ClientNamenodeProtocolPB.class,\n          new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n              ClientNamenodeProtocolPB.class, proxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 10:27 PM",
      "commitName": "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/04/12 5:55 PM",
      "commitNameOld": "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 70.19,
      "commitsBetweenForRepo": 462,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,43 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n-    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n-        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class, 0);\n+    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n+\n+    final RetryPolicy defaultPolicy \u003d getDefaultRpcRetryPolicy(conf);\n+    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n+    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n+        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n+        NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n+\n     if (withRetries) { // create the proxy with retries\n+\n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n-          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n+          .retryByRemoteException(defaultPolicy,\n               remoteExceptionToPolicyMap));\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n-          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n+          defaultPolicy, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n     \n-      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n-          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n+      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n+          ClientNamenodeProtocolPB.class,\n+          new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n+              ClientNamenodeProtocolPB.class, proxy),\n+          methodNameToPolicyMap,\n+          defaultPolicy);\n     }\n     return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d getDefaultRpcRetryPolicy(conf);\n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(defaultPolicy,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          defaultPolicy, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy.create(\n          ClientNamenodeProtocolPB.class,\n          new DefaultFailoverProxyProvider\u003cClientNamenodeProtocolPB\u003e(\n              ClientNamenodeProtocolPB.class, proxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3126. Journal stream from Namenode to BackupNode needs to have timeout. Contributed by Hari Mankude.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308636 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 5:55 PM",
      "commitName": "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "16/03/12 11:50 PM",
      "commitNameOld": "3573d504e40accd4b16dbb6d697ff5ea9019d62a",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 16.75,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n-        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n+        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class, 0);\n     if (withRetries) { // create the proxy with retries\n       RetryPolicy createPolicy \u003d RetryPolicies\n           .retryUpToMaximumCountWithFixedSleep(5,\n               HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n           createPolicy);\n     \n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                  \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n           .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n               remoteExceptionToPolicyMap));\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                  \u003d new HashMap\u003cString, RetryPolicy\u003e();\n     \n       methodNameToPolicyMap.put(\"create\", methodPolicy);\n     \n       proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n           .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n     }\n     return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class, 0);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "c69dfdd5e14af490790dff8227b11962ec816577": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename)",
      "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/12 12:09 PM",
      "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  public static NamenodeProtocolTranslatorPB createNNProxyWithNamenodeProtocol(\n+  private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n-    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n-        address, conf, ugi, NamenodeProtocolPB.class);\n+    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n+        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n     if (withRetries) { // create the proxy with retries\n-      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n-          TimeUnit.MILLISECONDS);\n-      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n-                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n-          exceptionToPolicyMap);\n+      RetryPolicy createPolicy \u003d RetryPolicies\n+          .retryUpToMaximumCountWithFixedSleep(5,\n+              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n+          createPolicy);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n+          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n+              remoteExceptionToPolicyMap));\n+      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n+          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n-      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n-      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n-          proxy, methodNameToPolicyMap);\n+                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n+    \n+      methodNameToPolicyMap.put(\"create\", methodPolicy);\n+    \n+      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n+          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n     }\n-    return new NamenodeProtocolTranslatorPB(proxy);\n+    return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
            "oldMethodName": "createNNProxyWithNamenodeProtocol",
            "newMethodName": "createNNProxyWithClientProtocol"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  public static NamenodeProtocolTranslatorPB createNNProxyWithNamenodeProtocol(\n+  private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n-    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n-        address, conf, ugi, NamenodeProtocolPB.class);\n+    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n+        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n     if (withRetries) { // create the proxy with retries\n-      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n-          TimeUnit.MILLISECONDS);\n-      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n-                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n-          exceptionToPolicyMap);\n+      RetryPolicy createPolicy \u003d RetryPolicies\n+          .retryUpToMaximumCountWithFixedSleep(5,\n+              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n+          createPolicy);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n+          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n+              remoteExceptionToPolicyMap));\n+      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n+          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n-      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n-      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n-          proxy, methodNameToPolicyMap);\n+                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n+    \n+      methodNameToPolicyMap.put(\"create\", methodPolicy);\n+    \n+      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n+          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n     }\n-    return new NamenodeProtocolTranslatorPB(proxy);\n+    return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "NamenodeProtocolTranslatorPB",
            "newValue": "ClientProtocol"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  public static NamenodeProtocolTranslatorPB createNNProxyWithNamenodeProtocol(\n+  private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n-    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n-        address, conf, ugi, NamenodeProtocolPB.class);\n+    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n+        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n     if (withRetries) { // create the proxy with retries\n-      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n-          TimeUnit.MILLISECONDS);\n-      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n-                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n-          exceptionToPolicyMap);\n+      RetryPolicy createPolicy \u003d RetryPolicies\n+          .retryUpToMaximumCountWithFixedSleep(5,\n+              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n+          createPolicy);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n+          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n+              remoteExceptionToPolicyMap));\n+      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n+          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n-      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n-      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n-          proxy, methodNameToPolicyMap);\n+                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n+    \n+      methodNameToPolicyMap.put(\"create\", methodPolicy);\n+    \n+      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n+          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n     }\n-    return new NamenodeProtocolTranslatorPB(proxy);\n+    return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  public static NamenodeProtocolTranslatorPB createNNProxyWithNamenodeProtocol(\n+  private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n-    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n-        address, conf, ugi, NamenodeProtocolPB.class);\n+    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n+        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n     if (withRetries) { // create the proxy with retries\n-      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n-          TimeUnit.MILLISECONDS);\n-      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n-                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n-          exceptionToPolicyMap);\n+      RetryPolicy createPolicy \u003d RetryPolicies\n+          .retryUpToMaximumCountWithFixedSleep(5,\n+              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n+          createPolicy);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n+          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n+              remoteExceptionToPolicyMap));\n+      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n+          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n-      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n-      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n-          proxy, methodNameToPolicyMap);\n+                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n+    \n+      methodNameToPolicyMap.put(\"create\", methodPolicy);\n+    \n+      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n+          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n     }\n-    return new NamenodeProtocolTranslatorPB(proxy);\n+    return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  public static NamenodeProtocolTranslatorPB createNNProxyWithNamenodeProtocol(\n+  private static ClientProtocol createNNProxyWithClientProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n-    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n-        address, conf, ugi, NamenodeProtocolPB.class);\n+    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n+        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n     if (withRetries) { // create the proxy with retries\n-      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n-          TimeUnit.MILLISECONDS);\n-      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n-                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n-          exceptionToPolicyMap);\n+      RetryPolicy createPolicy \u003d RetryPolicies\n+          .retryUpToMaximumCountWithFixedSleep(5,\n+              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n+          createPolicy);\n+    \n+      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n+                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n+          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n+              remoteExceptionToPolicyMap));\n+      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n+          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n-      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n-      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n-          proxy, methodNameToPolicyMap);\n+                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n+    \n+      methodNameToPolicyMap.put(\"create\", methodPolicy);\n+    \n+      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n+          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n     }\n-    return new NamenodeProtocolTranslatorPB(proxy);\n+    return new ClientNamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientProtocol createNNProxyWithClientProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    ClientNamenodeProtocolPB proxy \u003d (ClientNamenodeProtocolPB) NameNodeProxies\n        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy createPolicy \u003d RetryPolicies\n          .retryUpToMaximumCountWithFixedSleep(5,\n              HdfsConstants.LEASE_SOFTLIMIT_PERIOD, TimeUnit.MILLISECONDS);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e remoteExceptionToPolicyMap \n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,\n          createPolicy);\n    \n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap\n                 \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      exceptionToPolicyMap.put(RemoteException.class, RetryPolicies\n          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n              remoteExceptionToPolicyMap));\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                 \u003d new HashMap\u003cString, RetryPolicy\u003e();\n    \n      methodNameToPolicyMap.put(\"create\", methodPolicy);\n    \n      proxy \u003d (ClientNamenodeProtocolPB) RetryProxy\n          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);\n    }\n    return new ClientNamenodeProtocolTranslatorPB(proxy);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "createNNProxyWithNamenodeProtocol",
            "newValue": "createNNProxyWithClientProtocol"
          }
        }
      ]
    }
  }
}