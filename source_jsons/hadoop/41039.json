{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSConfigToCSConfigConverter.java",
  "functionName": "convertCapacitySchedulerXml",
  "functionId": "convertCapacitySchedulerXml___fs-FairScheduler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
  "functionStartLine": 287,
  "functionEndLine": 322,
  "numCommitsSeen": 9,
  "timeTaken": 2938,
  "changeHistory": [
    "c0d084247c0d1b7b701bc82e8847096912e5d8a0",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "c0d084247c0d1b7b701bc82e8847096912e5d8a0": "Ybodychange",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": "Ybodychange",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": "Ybodychange",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c0d084247c0d1b7b701bc82e8847096912e5d8a0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10175. FS-CS converter: only convert placement rules if a cmd line switch is defined. Contributed by Peter Bacsko\n",
      "commitDate": "03/03/20 12:46 AM",
      "commitName": "c0d084247c0d1b7b701bc82e8847096912e5d8a0",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "24/02/20 12:45 PM",
      "commitNameOld": "34cf63c7d0d558bb7baf81c89e031a407b54b9bd",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 7.5,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,36 @@\n   private void convertCapacitySchedulerXml(FairScheduler fs) {\n     FSParentQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n     emitDefaultMaxApplications();\n     emitDefaultMaxAMShare();\n \n     FSQueueConverter queueConverter \u003d FSQueueConverterBuilder.create()\n         .withRuleHandler(ruleHandler)\n         .withCapacitySchedulerConfig(capacitySchedulerConfig)\n         .withPreemptionEnabled(preemptionEnabled)\n         .withSizeBasedWeight(sizeBasedWeight)\n         .withAutoCreateChildQueues(autoCreateChildQueues)\n         .withClusterResource(clusterResource)\n         .withQueueMaxAMShareDefault(queueMaxAMShareDefault)\n         .withQueueMaxAppsDefault(queueMaxAppsDefault)\n         .withConversionOptions(conversionOptions)\n         .withDrfUsed(drfUsed)\n         .build();\n \n     queueConverter.convertQueueHierarchy(rootQueue);\n     emitACLs(fs);\n \n-    PlacementManager placementManager \u003d\n-        fs.getRMContext().getQueuePlacementManager();\n+    if (convertPlacementRules) {\n+      LOG.info(\"Converting placement rules\");\n+      PlacementManager placementManager \u003d\n+          fs.getRMContext().getQueuePlacementManager();\n \n-    if (placementManager.getPlacementRules().size() \u003e 0) {\n-      QueuePlacementConverter placementConverter \u003d\n-          new QueuePlacementConverter();\n-      Map\u003cString, String\u003e properties \u003d\n-          placementConverter.convertPlacementPolicy(placementManager,\n-              ruleHandler, userAsDefaultQueue);\n-      properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n+      if (placementManager.getPlacementRules().size() \u003e 0) {\n+        Map\u003cString, String\u003e properties \u003d\n+            placementConverter.convertPlacementPolicy(placementManager,\n+                ruleHandler, userAsDefaultQueue);\n+        properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n+      }\n+    } else {\n+      LOG.info(\"Ignoring the conversion of placement rules\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void convertCapacitySchedulerXml(FairScheduler fs) {\n    FSParentQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n    emitDefaultMaxApplications();\n    emitDefaultMaxAMShare();\n\n    FSQueueConverter queueConverter \u003d FSQueueConverterBuilder.create()\n        .withRuleHandler(ruleHandler)\n        .withCapacitySchedulerConfig(capacitySchedulerConfig)\n        .withPreemptionEnabled(preemptionEnabled)\n        .withSizeBasedWeight(sizeBasedWeight)\n        .withAutoCreateChildQueues(autoCreateChildQueues)\n        .withClusterResource(clusterResource)\n        .withQueueMaxAMShareDefault(queueMaxAMShareDefault)\n        .withQueueMaxAppsDefault(queueMaxAppsDefault)\n        .withConversionOptions(conversionOptions)\n        .withDrfUsed(drfUsed)\n        .build();\n\n    queueConverter.convertQueueHierarchy(rootQueue);\n    emitACLs(fs);\n\n    if (convertPlacementRules) {\n      LOG.info(\"Converting placement rules\");\n      PlacementManager placementManager \u003d\n          fs.getRMContext().getQueuePlacementManager();\n\n      if (placementManager.getPlacementRules().size() \u003e 0) {\n        Map\u003cString, String\u003e properties \u003d\n            placementConverter.convertPlacementPolicy(placementManager,\n                ruleHandler, userAsDefaultQueue);\n        properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n      }\n    } else {\n      LOG.info(\"Ignoring the conversion of placement rules\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
      "extendedDetails": {}
    },
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10085. FS-CS converter: remove mixed ordering policy check. Contributed by Peter Bacsko\n",
      "commitDate": "28/01/20 6:22 AM",
      "commitName": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/01/20 3:42 AM",
      "commitNameOld": "2aa065d98f36527d7769c9c58a923a706036391d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 13.11,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,33 @@\n   private void convertCapacitySchedulerXml(FairScheduler fs) {\n     FSParentQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n     emitDefaultMaxApplications();\n     emitDefaultMaxAMShare();\n \n     FSQueueConverter queueConverter \u003d FSQueueConverterBuilder.create()\n         .withRuleHandler(ruleHandler)\n         .withCapacitySchedulerConfig(capacitySchedulerConfig)\n         .withPreemptionEnabled(preemptionEnabled)\n         .withSizeBasedWeight(sizeBasedWeight)\n         .withAutoCreateChildQueues(autoCreateChildQueues)\n         .withClusterResource(clusterResource)\n         .withQueueMaxAMShareDefault(queueMaxAMShareDefault)\n         .withQueueMaxAppsDefault(queueMaxAppsDefault)\n         .withConversionOptions(conversionOptions)\n+        .withDrfUsed(drfUsed)\n         .build();\n \n     queueConverter.convertQueueHierarchy(rootQueue);\n     emitACLs(fs);\n \n     PlacementManager placementManager \u003d\n         fs.getRMContext().getQueuePlacementManager();\n \n     if (placementManager.getPlacementRules().size() \u003e 0) {\n       QueuePlacementConverter placementConverter \u003d\n           new QueuePlacementConverter();\n       Map\u003cString, String\u003e properties \u003d\n           placementConverter.convertPlacementPolicy(placementManager,\n               ruleHandler, userAsDefaultQueue);\n       properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n     }\n-\n-    // Validate ordering policy\n-    if (queueConverter.isDrfPolicyUsedOnQueueLevel()) {\n-      if (queueConverter.isFifoOrFairSharePolicyUsed()) {\n-        throw new ConversionException(\n-            \"DRF ordering policy cannot be used together with fifo/fair\");\n-      } else {\n-        capacitySchedulerConfig.set(\n-            CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n-            DominantResourceCalculator.class.getCanonicalName());\n-      }\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void convertCapacitySchedulerXml(FairScheduler fs) {\n    FSParentQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n    emitDefaultMaxApplications();\n    emitDefaultMaxAMShare();\n\n    FSQueueConverter queueConverter \u003d FSQueueConverterBuilder.create()\n        .withRuleHandler(ruleHandler)\n        .withCapacitySchedulerConfig(capacitySchedulerConfig)\n        .withPreemptionEnabled(preemptionEnabled)\n        .withSizeBasedWeight(sizeBasedWeight)\n        .withAutoCreateChildQueues(autoCreateChildQueues)\n        .withClusterResource(clusterResource)\n        .withQueueMaxAMShareDefault(queueMaxAMShareDefault)\n        .withQueueMaxAppsDefault(queueMaxAppsDefault)\n        .withConversionOptions(conversionOptions)\n        .withDrfUsed(drfUsed)\n        .build();\n\n    queueConverter.convertQueueHierarchy(rootQueue);\n    emitACLs(fs);\n\n    PlacementManager placementManager \u003d\n        fs.getRMContext().getQueuePlacementManager();\n\n    if (placementManager.getPlacementRules().size() \u003e 0) {\n      QueuePlacementConverter placementConverter \u003d\n          new QueuePlacementConverter();\n      Map\u003cString, String\u003e properties \u003d\n          placementConverter.convertPlacementPolicy(placementManager,\n              ruleHandler, userAsDefaultQueue);\n      properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
      "extendedDetails": {}
    },
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10067. Add dry-run feature to FS-CS converter tool. Contributed by Peter Bacsko\n",
      "commitDate": "12/01/20 4:48 AM",
      "commitName": "24e6a9e43a210cdecaa8e87926eef09c869988f9",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "14/10/19 8:19 AM",
      "commitNameOld": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 89.9,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,44 @@\n   private void convertCapacitySchedulerXml(FairScheduler fs) {\n     FSParentQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n     emitDefaultMaxApplications();\n     emitDefaultMaxAMShare();\n-    FSQueueConverter queueConverter \u003d new FSQueueConverter(ruleHandler,\n-        capacitySchedulerConfig,\n-        preemptionEnabled,\n-        sizeBasedWeight,\n-        autoCreateChildQueues,\n-        clusterResource,\n-        queueMaxAMShareDefault,\n-        queueMaxAppsDefault);\n+\n+    FSQueueConverter queueConverter \u003d FSQueueConverterBuilder.create()\n+        .withRuleHandler(ruleHandler)\n+        .withCapacitySchedulerConfig(capacitySchedulerConfig)\n+        .withPreemptionEnabled(preemptionEnabled)\n+        .withSizeBasedWeight(sizeBasedWeight)\n+        .withAutoCreateChildQueues(autoCreateChildQueues)\n+        .withClusterResource(clusterResource)\n+        .withQueueMaxAMShareDefault(queueMaxAMShareDefault)\n+        .withQueueMaxAppsDefault(queueMaxAppsDefault)\n+        .withConversionOptions(conversionOptions)\n+        .build();\n+\n     queueConverter.convertQueueHierarchy(rootQueue);\n     emitACLs(fs);\n \n     PlacementManager placementManager \u003d\n         fs.getRMContext().getQueuePlacementManager();\n \n     if (placementManager.getPlacementRules().size() \u003e 0) {\n       QueuePlacementConverter placementConverter \u003d\n           new QueuePlacementConverter();\n       Map\u003cString, String\u003e properties \u003d\n           placementConverter.convertPlacementPolicy(placementManager,\n               ruleHandler, userAsDefaultQueue);\n       properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n     }\n \n     // Validate ordering policy\n     if (queueConverter.isDrfPolicyUsedOnQueueLevel()) {\n       if (queueConverter.isFifoOrFairSharePolicyUsed()) {\n         throw new ConversionException(\n             \"DRF ordering policy cannot be used together with fifo/fair\");\n       } else {\n         capacitySchedulerConfig.set(\n             CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n             DominantResourceCalculator.class.getCanonicalName());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void convertCapacitySchedulerXml(FairScheduler fs) {\n    FSParentQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n    emitDefaultMaxApplications();\n    emitDefaultMaxAMShare();\n\n    FSQueueConverter queueConverter \u003d FSQueueConverterBuilder.create()\n        .withRuleHandler(ruleHandler)\n        .withCapacitySchedulerConfig(capacitySchedulerConfig)\n        .withPreemptionEnabled(preemptionEnabled)\n        .withSizeBasedWeight(sizeBasedWeight)\n        .withAutoCreateChildQueues(autoCreateChildQueues)\n        .withClusterResource(clusterResource)\n        .withQueueMaxAMShareDefault(queueMaxAMShareDefault)\n        .withQueueMaxAppsDefault(queueMaxAppsDefault)\n        .withConversionOptions(conversionOptions)\n        .build();\n\n    queueConverter.convertQueueHierarchy(rootQueue);\n    emitACLs(fs);\n\n    PlacementManager placementManager \u003d\n        fs.getRMContext().getQueuePlacementManager();\n\n    if (placementManager.getPlacementRules().size() \u003e 0) {\n      QueuePlacementConverter placementConverter \u003d\n          new QueuePlacementConverter();\n      Map\u003cString, String\u003e properties \u003d\n          placementConverter.convertPlacementPolicy(placementManager,\n              ruleHandler, userAsDefaultQueue);\n      properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n    }\n\n    // Validate ordering policy\n    if (queueConverter.isDrfPolicyUsedOnQueueLevel()) {\n      if (queueConverter.isFifoOrFairSharePolicyUsed()) {\n        throw new ConversionException(\n            \"DRF ordering policy cannot be used together with fifo/fair\");\n      } else {\n        capacitySchedulerConfig.set(\n            CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n            DominantResourceCalculator.class.getCanonicalName());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
      "extendedDetails": {}
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,39 @@\n+  private void convertCapacitySchedulerXml(FairScheduler fs) {\n+    FSParentQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n+    emitDefaultMaxApplications();\n+    emitDefaultMaxAMShare();\n+    FSQueueConverter queueConverter \u003d new FSQueueConverter(ruleHandler,\n+        capacitySchedulerConfig,\n+        preemptionEnabled,\n+        sizeBasedWeight,\n+        autoCreateChildQueues,\n+        clusterResource,\n+        queueMaxAMShareDefault,\n+        queueMaxAppsDefault);\n+    queueConverter.convertQueueHierarchy(rootQueue);\n+    emitACLs(fs);\n+\n+    PlacementManager placementManager \u003d\n+        fs.getRMContext().getQueuePlacementManager();\n+\n+    if (placementManager.getPlacementRules().size() \u003e 0) {\n+      QueuePlacementConverter placementConverter \u003d\n+          new QueuePlacementConverter();\n+      Map\u003cString, String\u003e properties \u003d\n+          placementConverter.convertPlacementPolicy(placementManager,\n+              ruleHandler, userAsDefaultQueue);\n+      properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n+    }\n+\n+    // Validate ordering policy\n+    if (queueConverter.isDrfPolicyUsedOnQueueLevel()) {\n+      if (queueConverter.isFifoOrFairSharePolicyUsed()) {\n+        throw new ConversionException(\n+            \"DRF ordering policy cannot be used together with fifo/fair\");\n+      } else {\n+        capacitySchedulerConfig.set(\n+            CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n+            DominantResourceCalculator.class.getCanonicalName());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void convertCapacitySchedulerXml(FairScheduler fs) {\n    FSParentQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n    emitDefaultMaxApplications();\n    emitDefaultMaxAMShare();\n    FSQueueConverter queueConverter \u003d new FSQueueConverter(ruleHandler,\n        capacitySchedulerConfig,\n        preemptionEnabled,\n        sizeBasedWeight,\n        autoCreateChildQueues,\n        clusterResource,\n        queueMaxAMShareDefault,\n        queueMaxAppsDefault);\n    queueConverter.convertQueueHierarchy(rootQueue);\n    emitACLs(fs);\n\n    PlacementManager placementManager \u003d\n        fs.getRMContext().getQueuePlacementManager();\n\n    if (placementManager.getPlacementRules().size() \u003e 0) {\n      QueuePlacementConverter placementConverter \u003d\n          new QueuePlacementConverter();\n      Map\u003cString, String\u003e properties \u003d\n          placementConverter.convertPlacementPolicy(placementManager,\n              ruleHandler, userAsDefaultQueue);\n      properties.forEach((k, v) -\u003e capacitySchedulerConfig.set(k, v));\n    }\n\n    // Validate ordering policy\n    if (queueConverter.isDrfPolicyUsedOnQueueLevel()) {\n      if (queueConverter.isFifoOrFairSharePolicyUsed()) {\n        throw new ConversionException(\n            \"DRF ordering policy cannot be used together with fifo/fair\");\n      } else {\n        capacitySchedulerConfig.set(\n            CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n            DominantResourceCalculator.class.getCanonicalName());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java"
    }
  }
}