{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlackListBasedTrustedChannelResolver.java",
  "functionName": "setConf",
  "functionId": "setConf___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/BlackListBasedTrustedChannelResolver.java",
  "functionStartLine": 93,
  "functionEndLine": 129,
  "numCommitsSeen": 1,
  "timeTaken": 553,
  "changeHistory": [
    "af015c0b2359be317132e2cf35735429f4f34ea7"
  ],
  "changeHistoryShort": {
    "af015c0b2359be317132e2cf35735429f4f34ea7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "af015c0b2359be317132e2cf35735429f4f34ea7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13060. Adding a BlacklistBasedTrustedChannelResolver for TrustedChannelResolver. Contributed by Ajay Kumar.\n",
      "commitDate": "31/01/18 10:39 PM",
      "commitName": "af015c0b2359be317132e2cf35735429f4f34ea7",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,37 @@\n+  public void setConf(Configuration conf) {\n+    super.setConf(conf);\n+    String fixedFile \u003d conf.get(DFS_DATATRANSFER_SERVER_FIXED_BLACK_LIST_FILE,\n+        FIXED_BLACK_LIST_DEFAULT_LOCATION);\n+    String variableFile \u003d null;\n+    long expiryTime \u003d 0;\n+\n+    if (conf\n+        .getBoolean(DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_ENABLE,\n+            false)) {\n+      variableFile \u003d conf.get(DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_FILE,\n+          VARIABLE_BLACK_LIST_DEFAULT_LOCATION);\n+      expiryTime \u003d\n+          conf.getLong(DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_CACHE_SECS,\n+              3600) * 1000;\n+    }\n+\n+    blackListForServer \u003d new CombinedIPList(fixedFile, variableFile,\n+        expiryTime);\n+\n+    fixedFile \u003d conf\n+        .get(DFS_DATATRANSFER_CLIENT_FIXED_BLACK_LIST_FILE, fixedFile);\n+    expiryTime \u003d 0;\n+\n+    if (conf\n+        .getBoolean(DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_ENABLE,\n+            false)) {\n+      variableFile \u003d conf\n+          .get(DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_FILE, variableFile);\n+      expiryTime \u003d\n+          conf.getLong(DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_CACHE_SECS,\n+              3600) * 1000;\n+    }\n+\n+    blackListForClient \u003d new CombinedIPList(fixedFile, variableFile,\n+        expiryTime);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    super.setConf(conf);\n    String fixedFile \u003d conf.get(DFS_DATATRANSFER_SERVER_FIXED_BLACK_LIST_FILE,\n        FIXED_BLACK_LIST_DEFAULT_LOCATION);\n    String variableFile \u003d null;\n    long expiryTime \u003d 0;\n\n    if (conf\n        .getBoolean(DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_ENABLE,\n            false)) {\n      variableFile \u003d conf.get(DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_FILE,\n          VARIABLE_BLACK_LIST_DEFAULT_LOCATION);\n      expiryTime \u003d\n          conf.getLong(DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_CACHE_SECS,\n              3600) * 1000;\n    }\n\n    blackListForServer \u003d new CombinedIPList(fixedFile, variableFile,\n        expiryTime);\n\n    fixedFile \u003d conf\n        .get(DFS_DATATRANSFER_CLIENT_FIXED_BLACK_LIST_FILE, fixedFile);\n    expiryTime \u003d 0;\n\n    if (conf\n        .getBoolean(DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_ENABLE,\n            false)) {\n      variableFile \u003d conf\n          .get(DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_FILE, variableFile);\n      expiryTime \u003d\n          conf.getLong(DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_CACHE_SECS,\n              3600) * 1000;\n    }\n\n    blackListForClient \u003d new CombinedIPList(fixedFile, variableFile,\n        expiryTime);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/BlackListBasedTrustedChannelResolver.java"
    }
  }
}