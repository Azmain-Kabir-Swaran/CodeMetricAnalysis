{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectorySnapshottableFeature.java",
  "functionName": "computeDiffRecursively",
  "functionId": "computeDiffRecursively___snapshotDir-INodeDirectory(modifiers-final)__node-INode__parentPath-List__byte[]____diffReport-SnapshotDiffListingInfo__resume-byte[][](modifiers-final)__level-int__processFlag-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
  "functionStartLine": 457,
  "functionEndLine": 522,
  "numCommitsSeen": 27,
  "timeTaken": 2572,
  "changeHistory": [
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "b1c7654ee40b372ed777525a42981c7cf55b5c72"
  ],
  "changeHistoryShort": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "06/02/18 2:46 PM",
      "commitNameOld": "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 31.04,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   private boolean computeDiffRecursively(final INodeDirectory snapshotDir,\n        INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffListingInfo diffReport,\n        final byte[][] resume, int level, boolean processFlag) {\n     final Snapshot earlier \u003d diffReport.getEarlier();\n     final Snapshot later \u003d diffReport.getLater();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (!processFlag \u0026\u0026 level \u003d\u003d resume.length\n         \u0026\u0026 Arrays.equals(resume[resume.length - 1], node.getLocalNameBytes())) {\n       processFlag \u003d true;\n     }\n \n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       if (processFlag) {\n         DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n         if (sf !\u003d null) {\n           boolean change \u003d\n               sf.computeDiffBetweenSnapshots(earlier, later, diff, dir);\n           if (change) {\n             if (!diffReport.addDirDiff(dir.getId(), relativePath, diff)) {\n               return false;\n             }\n           }\n         }\n       }\n \n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlier.getId());\n       boolean iterate \u003d false;\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         if (!processFlag \u0026\u0026 !iterate \u0026\u0026 !Arrays.equals(resume[level], name)) {\n           continue;\n         }\n         iterate \u003d true;\n         level \u003d level + 1;\n-        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n+        boolean toProcess \u003d !diff.containsDeleted(name);\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n           byte[][] renameTargetPath \u003d findRenameTargetPath(snapshotDir,\n               (WithName) child, Snapshot.getSnapshotId(later));\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n           processFlag \u003d computeDiffRecursively(snapshotDir, child, parentPath,\n               diffReport, resume, level, processFlag);\n           parentPath.remove(parentPath.size() - 1);\n           if (!processFlag) {\n             return false;\n           }\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot() \u0026\u0026 processFlag) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlier, later);\n       if (change) {\n         if (!diffReport.addFileDiff(file, relativePath)) {\n           return false;\n         }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean computeDiffRecursively(final INodeDirectory snapshotDir,\n       INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffListingInfo diffReport,\n       final byte[][] resume, int level, boolean processFlag) {\n    final Snapshot earlier \u003d diffReport.getEarlier();\n    final Snapshot later \u003d diffReport.getLater();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (!processFlag \u0026\u0026 level \u003d\u003d resume.length\n        \u0026\u0026 Arrays.equals(resume[resume.length - 1], node.getLocalNameBytes())) {\n      processFlag \u003d true;\n    }\n\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      if (processFlag) {\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          boolean change \u003d\n              sf.computeDiffBetweenSnapshots(earlier, later, diff, dir);\n          if (change) {\n            if (!diffReport.addDirDiff(dir.getId(), relativePath, diff)) {\n              return false;\n            }\n          }\n        }\n      }\n\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlier.getId());\n      boolean iterate \u003d false;\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (!processFlag \u0026\u0026 !iterate \u0026\u0026 !Arrays.equals(resume[level], name)) {\n          continue;\n        }\n        iterate \u003d true;\n        level \u003d level + 1;\n        boolean toProcess \u003d !diff.containsDeleted(name);\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(snapshotDir,\n              (WithName) child, Snapshot.getSnapshotId(later));\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          processFlag \u003d computeDiffRecursively(snapshotDir, child, parentPath,\n              diffReport, resume, level, processFlag);\n          parentPath.remove(parentPath.size() - 1);\n          if (!processFlag) {\n            return false;\n          }\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot() \u0026\u0026 processFlag) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlier, later);\n      if (change) {\n        if (!diffReport.addFileDiff(file, relativePath)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
      "extendedDetails": {}
    },
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12594. snapshotDiff fails if the report exceeds the RPC response limit. Contributed by Shashikant Banerjee\n",
      "commitDate": "30/11/17 12:18 PM",
      "commitName": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,66 @@\n+  private boolean computeDiffRecursively(final INodeDirectory snapshotDir,\n+       INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffListingInfo diffReport,\n+       final byte[][] resume, int level, boolean processFlag) {\n+    final Snapshot earlier \u003d diffReport.getEarlier();\n+    final Snapshot later \u003d diffReport.getLater();\n+    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n+    if (!processFlag \u0026\u0026 level \u003d\u003d resume.length\n+        \u0026\u0026 Arrays.equals(resume[resume.length - 1], node.getLocalNameBytes())) {\n+      processFlag \u003d true;\n+    }\n+\n+    if (node.isDirectory()) {\n+      final ChildrenDiff diff \u003d new ChildrenDiff();\n+      INodeDirectory dir \u003d node.asDirectory();\n+      if (processFlag) {\n+        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n+        if (sf !\u003d null) {\n+          boolean change \u003d\n+              sf.computeDiffBetweenSnapshots(earlier, later, diff, dir);\n+          if (change) {\n+            if (!diffReport.addDirDiff(dir.getId(), relativePath, diff)) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+\n+      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlier.getId());\n+      boolean iterate \u003d false;\n+      for (INode child : children) {\n+        final byte[] name \u003d child.getLocalNameBytes();\n+        if (!processFlag \u0026\u0026 !iterate \u0026\u0026 !Arrays.equals(resume[level], name)) {\n+          continue;\n+        }\n+        iterate \u003d true;\n+        level \u003d level + 1;\n+        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n+        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n+          byte[][] renameTargetPath \u003d findRenameTargetPath(snapshotDir,\n+              (WithName) child, Snapshot.getSnapshotId(later));\n+          if (renameTargetPath !\u003d null) {\n+            toProcess \u003d true;\n+          }\n+        }\n+        if (toProcess) {\n+          parentPath.add(name);\n+          processFlag \u003d computeDiffRecursively(snapshotDir, child, parentPath,\n+              diffReport, resume, level, processFlag);\n+          parentPath.remove(parentPath.size() - 1);\n+          if (!processFlag) {\n+            return false;\n+          }\n+        }\n+      }\n+    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot() \u0026\u0026 processFlag) {\n+      INodeFile file \u003d node.asFile();\n+      boolean change \u003d file.getFileWithSnapshotFeature()\n+          .changedBetweenSnapshots(file, earlier, later);\n+      if (change) {\n+        if (!diffReport.addFileDiff(file, relativePath)) {\n+          return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean computeDiffRecursively(final INodeDirectory snapshotDir,\n       INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffListingInfo diffReport,\n       final byte[][] resume, int level, boolean processFlag) {\n    final Snapshot earlier \u003d diffReport.getEarlier();\n    final Snapshot later \u003d diffReport.getLater();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (!processFlag \u0026\u0026 level \u003d\u003d resume.length\n        \u0026\u0026 Arrays.equals(resume[resume.length - 1], node.getLocalNameBytes())) {\n      processFlag \u003d true;\n    }\n\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      if (processFlag) {\n        DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n        if (sf !\u003d null) {\n          boolean change \u003d\n              sf.computeDiffBetweenSnapshots(earlier, later, diff, dir);\n          if (change) {\n            if (!diffReport.addDirDiff(dir.getId(), relativePath, diff)) {\n              return false;\n            }\n          }\n        }\n      }\n\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlier.getId());\n      boolean iterate \u003d false;\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (!processFlag \u0026\u0026 !iterate \u0026\u0026 !Arrays.equals(resume[level], name)) {\n          continue;\n        }\n        iterate \u003d true;\n        level \u003d level + 1;\n        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(snapshotDir,\n              (WithName) child, Snapshot.getSnapshotId(later));\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          processFlag \u003d computeDiffRecursively(snapshotDir, child, parentPath,\n              diffReport, resume, level, processFlag);\n          parentPath.remove(parentPath.size() - 1);\n          if (!processFlag) {\n            return false;\n          }\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot() \u0026\u0026 processFlag) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlier, later);\n      if (change) {\n        if (!diffReport.addFileDiff(file, relativePath)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java"
    }
  }
}