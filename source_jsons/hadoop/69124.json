{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CompressionEmulationUtil.java",
  "functionName": "publishCompressedDataStatistics",
  "functionId": "publishCompressedDataStatistics___inputDir-Path__conf-Configuration__uncompressedDataSize-long",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
  "functionStartLine": 315,
  "functionEndLine": 366,
  "numCommitsSeen": 9,
  "timeTaken": 4264,
  "changeHistory": [
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "787dcfb8cd6e1f30a2a508b052e9d31f314b2169",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "787dcfb8cd6e1f30a2a508b052e9d31f314b2169": "Ymultichange(Yreturntypechange,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static DataStatistics publishCompressedDataStatistics(Path inputDir, \n                          Configuration conf, long uncompressedDataSize) \n  throws IOException {\n    FileSystem fs \u003d inputDir.getFileSystem(conf);\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(conf);\n\n    // iterate over compressed files and sum up the compressed file sizes\n    long compressedDataSize \u003d 0;\n    int numCompressedFiles \u003d 0;\n    // obtain input data file statuses\n    FileStatus[] outFileStatuses \u003d \n      fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n    for (FileStatus status : outFileStatuses) {\n      // check if the input file is compressed\n      if (compressionCodecs !\u003d null) {\n        CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n        if (codec !\u003d null) {\n          ++numCompressedFiles;\n          compressedDataSize +\u003d status.getLen();\n        }\n      }\n    }\n\n    LOG.info(\"Gridmix is configured to use compressed input data.\");\n    // publish the input data size\n    LOG.info(\"Total size of compressed input data : \" \n             + StringUtils.humanReadableInt(compressedDataSize));\n    LOG.info(\"Total number of compressed input data files : \" \n             + numCompressedFiles);\n\n    if (numCompressedFiles \u003d\u003d 0) {\n      throw new RuntimeException(\"No compressed file found in the input\" \n          + \" directory : \" + inputDir.toString() + \". To enable compression\"\n          + \" emulation, run Gridmix either with \"\n          + \" an input directory containing compressed input file(s) or\" \n          + \" use the -generate option to (re)generate it. If compression\"\n          + \" emulation is not desired, disable it by setting \u0027\" \n          + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n    }\n    \n    // publish compression ratio only if its generated in this gridmix run\n    if (uncompressedDataSize \u003e 0) {\n      // compute the compression ratio\n      double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n\n      // publish the compression ratio\n      LOG.info(\"Input Data Compression Ratio : \" + ratio);\n    }\n    \n    return new DataStatistics(compressedDataSize, numCompressedFiles, true);\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static DataStatistics publishCompressedDataStatistics(Path inputDir, \n                          Configuration conf, long uncompressedDataSize) \n  throws IOException {\n    FileSystem fs \u003d inputDir.getFileSystem(conf);\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(conf);\n\n    // iterate over compressed files and sum up the compressed file sizes\n    long compressedDataSize \u003d 0;\n    int numCompressedFiles \u003d 0;\n    // obtain input data file statuses\n    FileStatus[] outFileStatuses \u003d \n      fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n    for (FileStatus status : outFileStatuses) {\n      // check if the input file is compressed\n      if (compressionCodecs !\u003d null) {\n        CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n        if (codec !\u003d null) {\n          ++numCompressedFiles;\n          compressedDataSize +\u003d status.getLen();\n        }\n      }\n    }\n\n    LOG.info(\"Gridmix is configured to use compressed input data.\");\n    // publish the input data size\n    LOG.info(\"Total size of compressed input data : \" \n             + StringUtils.humanReadableInt(compressedDataSize));\n    LOG.info(\"Total number of compressed input data files : \" \n             + numCompressedFiles);\n\n    if (numCompressedFiles \u003d\u003d 0) {\n      throw new RuntimeException(\"No compressed file found in the input\" \n          + \" directory : \" + inputDir.toString() + \". To enable compression\"\n          + \" emulation, run Gridmix either with \"\n          + \" an input directory containing compressed input file(s) or\" \n          + \" use the -generate option to (re)generate it. If compression\"\n          + \" emulation is not desired, disable it by setting \u0027\" \n          + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n    }\n    \n    // publish compression ratio only if its generated in this gridmix run\n    if (uncompressedDataSize \u003e 0) {\n      // compute the compression ratio\n      double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n\n      // publish the compression ratio\n      LOG.info(\"Input Data Compression Ratio : \" + ratio);\n    }\n    \n    return new DataStatistics(compressedDataSize, numCompressedFiles, true);\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static DataStatistics publishCompressedDataStatistics(Path inputDir, \n                          Configuration conf, long uncompressedDataSize) \n  throws IOException {\n    FileSystem fs \u003d inputDir.getFileSystem(conf);\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(conf);\n\n    // iterate over compressed files and sum up the compressed file sizes\n    long compressedDataSize \u003d 0;\n    int numCompressedFiles \u003d 0;\n    // obtain input data file statuses\n    FileStatus[] outFileStatuses \u003d \n      fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n    for (FileStatus status : outFileStatuses) {\n      // check if the input file is compressed\n      if (compressionCodecs !\u003d null) {\n        CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n        if (codec !\u003d null) {\n          ++numCompressedFiles;\n          compressedDataSize +\u003d status.getLen();\n        }\n      }\n    }\n\n    LOG.info(\"Gridmix is configured to use compressed input data.\");\n    // publish the input data size\n    LOG.info(\"Total size of compressed input data : \" \n             + StringUtils.humanReadableInt(compressedDataSize));\n    LOG.info(\"Total number of compressed input data files : \" \n             + numCompressedFiles);\n\n    if (numCompressedFiles \u003d\u003d 0) {\n      throw new RuntimeException(\"No compressed file found in the input\" \n          + \" directory : \" + inputDir.toString() + \". To enable compression\"\n          + \" emulation, run Gridmix either with \"\n          + \" an input directory containing compressed input file(s) or\" \n          + \" use the -generate option to (re)generate it. If compression\"\n          + \" emulation is not desired, disable it by setting \u0027\" \n          + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n    }\n    \n    // publish compression ratio only if its generated in this gridmix run\n    if (uncompressedDataSize \u003e 0) {\n      // compute the compression ratio\n      double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n\n      // publish the compression ratio\n      LOG.info(\"Input Data Compression Ratio : \" + ratio);\n    }\n    \n    return new DataStatistics(compressedDataSize, numCompressedFiles, true);\n  }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java"
      }
    },
    "787dcfb8cd6e1f30a2a508b052e9d31f314b2169": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2596. [Gridmix] Summarize Gridmix runs. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1144403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/11 10:53 AM",
      "commitName": "787dcfb8cd6e1f30a2a508b052e9d31f314b2169",
      "commitAuthor": "Amar Kamat",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-2596. [Gridmix] Summarize Gridmix runs. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1144403 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/07/11 10:53 AM",
          "commitName": "787dcfb8cd6e1f30a2a508b052e9d31f314b2169",
          "commitAuthor": "Amar Kamat",
          "commitDateOld": "12/06/11 3:00 PM",
          "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 25.83,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,52 @@\n-  static void publishCompressedDataStatistics(Path inputDir, Configuration conf,\n-                                              long uncompressedDataSize) \n+  static DataStatistics publishCompressedDataStatistics(Path inputDir, \n+                          Configuration conf, long uncompressedDataSize) \n   throws IOException {\n     FileSystem fs \u003d inputDir.getFileSystem(conf);\n     CompressionCodecFactory compressionCodecs \u003d \n       new CompressionCodecFactory(conf);\n \n     // iterate over compressed files and sum up the compressed file sizes\n     long compressedDataSize \u003d 0;\n     int numCompressedFiles \u003d 0;\n     // obtain input data file statuses\n     FileStatus[] outFileStatuses \u003d \n       fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n     for (FileStatus status : outFileStatuses) {\n       // check if the input file is compressed\n       if (compressionCodecs !\u003d null) {\n         CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n         if (codec !\u003d null) {\n           ++numCompressedFiles;\n           compressedDataSize +\u003d status.getLen();\n         }\n       }\n     }\n \n     LOG.info(\"Gridmix is configured to use compressed input data.\");\n     // publish the input data size\n     LOG.info(\"Total size of compressed input data : \" \n              + StringUtils.humanReadableInt(compressedDataSize));\n     LOG.info(\"Total number of compressed input data files : \" \n              + numCompressedFiles);\n \n     if (numCompressedFiles \u003d\u003d 0) {\n       throw new RuntimeException(\"No compressed file found in the input\" \n           + \" directory : \" + inputDir.toString() + \". To enable compression\"\n           + \" emulation, run Gridmix either with \"\n           + \" an input directory containing compressed input file(s) or\" \n           + \" use the -generate option to (re)generate it. If compression\"\n           + \" emulation is not desired, disable it by setting \u0027\" \n           + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n     }\n     \n     // publish compression ratio only if its generated in this gridmix run\n     if (uncompressedDataSize \u003e 0) {\n       // compute the compression ratio\n       double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n \n       // publish the compression ratio\n       LOG.info(\"Input Data Compression Ratio : \" + ratio);\n     }\n+    \n+    return new DataStatistics(compressedDataSize, numCompressedFiles, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DataStatistics publishCompressedDataStatistics(Path inputDir, \n                          Configuration conf, long uncompressedDataSize) \n  throws IOException {\n    FileSystem fs \u003d inputDir.getFileSystem(conf);\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(conf);\n\n    // iterate over compressed files and sum up the compressed file sizes\n    long compressedDataSize \u003d 0;\n    int numCompressedFiles \u003d 0;\n    // obtain input data file statuses\n    FileStatus[] outFileStatuses \u003d \n      fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n    for (FileStatus status : outFileStatuses) {\n      // check if the input file is compressed\n      if (compressionCodecs !\u003d null) {\n        CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n        if (codec !\u003d null) {\n          ++numCompressedFiles;\n          compressedDataSize +\u003d status.getLen();\n        }\n      }\n    }\n\n    LOG.info(\"Gridmix is configured to use compressed input data.\");\n    // publish the input data size\n    LOG.info(\"Total size of compressed input data : \" \n             + StringUtils.humanReadableInt(compressedDataSize));\n    LOG.info(\"Total number of compressed input data files : \" \n             + numCompressedFiles);\n\n    if (numCompressedFiles \u003d\u003d 0) {\n      throw new RuntimeException(\"No compressed file found in the input\" \n          + \" directory : \" + inputDir.toString() + \". To enable compression\"\n          + \" emulation, run Gridmix either with \"\n          + \" an input directory containing compressed input file(s) or\" \n          + \" use the -generate option to (re)generate it. If compression\"\n          + \" emulation is not desired, disable it by setting \u0027\" \n          + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n    }\n    \n    // publish compression ratio only if its generated in this gridmix run\n    if (uncompressedDataSize \u003e 0) {\n      // compute the compression ratio\n      double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n\n      // publish the compression ratio\n      LOG.info(\"Input Data Compression Ratio : \" + ratio);\n    }\n    \n    return new DataStatistics(compressedDataSize, numCompressedFiles, true);\n  }",
          "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "DataStatistics"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2596. [Gridmix] Summarize Gridmix runs. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1144403 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/07/11 10:53 AM",
          "commitName": "787dcfb8cd6e1f30a2a508b052e9d31f314b2169",
          "commitAuthor": "Amar Kamat",
          "commitDateOld": "12/06/11 3:00 PM",
          "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 25.83,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,52 @@\n-  static void publishCompressedDataStatistics(Path inputDir, Configuration conf,\n-                                              long uncompressedDataSize) \n+  static DataStatistics publishCompressedDataStatistics(Path inputDir, \n+                          Configuration conf, long uncompressedDataSize) \n   throws IOException {\n     FileSystem fs \u003d inputDir.getFileSystem(conf);\n     CompressionCodecFactory compressionCodecs \u003d \n       new CompressionCodecFactory(conf);\n \n     // iterate over compressed files and sum up the compressed file sizes\n     long compressedDataSize \u003d 0;\n     int numCompressedFiles \u003d 0;\n     // obtain input data file statuses\n     FileStatus[] outFileStatuses \u003d \n       fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n     for (FileStatus status : outFileStatuses) {\n       // check if the input file is compressed\n       if (compressionCodecs !\u003d null) {\n         CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n         if (codec !\u003d null) {\n           ++numCompressedFiles;\n           compressedDataSize +\u003d status.getLen();\n         }\n       }\n     }\n \n     LOG.info(\"Gridmix is configured to use compressed input data.\");\n     // publish the input data size\n     LOG.info(\"Total size of compressed input data : \" \n              + StringUtils.humanReadableInt(compressedDataSize));\n     LOG.info(\"Total number of compressed input data files : \" \n              + numCompressedFiles);\n \n     if (numCompressedFiles \u003d\u003d 0) {\n       throw new RuntimeException(\"No compressed file found in the input\" \n           + \" directory : \" + inputDir.toString() + \". To enable compression\"\n           + \" emulation, run Gridmix either with \"\n           + \" an input directory containing compressed input file(s) or\" \n           + \" use the -generate option to (re)generate it. If compression\"\n           + \" emulation is not desired, disable it by setting \u0027\" \n           + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n     }\n     \n     // publish compression ratio only if its generated in this gridmix run\n     if (uncompressedDataSize \u003e 0) {\n       // compute the compression ratio\n       double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n \n       // publish the compression ratio\n       LOG.info(\"Input Data Compression Ratio : \" + ratio);\n     }\n+    \n+    return new DataStatistics(compressedDataSize, numCompressedFiles, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static DataStatistics publishCompressedDataStatistics(Path inputDir, \n                          Configuration conf, long uncompressedDataSize) \n  throws IOException {\n    FileSystem fs \u003d inputDir.getFileSystem(conf);\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(conf);\n\n    // iterate over compressed files and sum up the compressed file sizes\n    long compressedDataSize \u003d 0;\n    int numCompressedFiles \u003d 0;\n    // obtain input data file statuses\n    FileStatus[] outFileStatuses \u003d \n      fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n    for (FileStatus status : outFileStatuses) {\n      // check if the input file is compressed\n      if (compressionCodecs !\u003d null) {\n        CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n        if (codec !\u003d null) {\n          ++numCompressedFiles;\n          compressedDataSize +\u003d status.getLen();\n        }\n      }\n    }\n\n    LOG.info(\"Gridmix is configured to use compressed input data.\");\n    // publish the input data size\n    LOG.info(\"Total size of compressed input data : \" \n             + StringUtils.humanReadableInt(compressedDataSize));\n    LOG.info(\"Total number of compressed input data files : \" \n             + numCompressedFiles);\n\n    if (numCompressedFiles \u003d\u003d 0) {\n      throw new RuntimeException(\"No compressed file found in the input\" \n          + \" directory : \" + inputDir.toString() + \". To enable compression\"\n          + \" emulation, run Gridmix either with \"\n          + \" an input directory containing compressed input file(s) or\" \n          + \" use the -generate option to (re)generate it. If compression\"\n          + \" emulation is not desired, disable it by setting \u0027\" \n          + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n    }\n    \n    // publish compression ratio only if its generated in this gridmix run\n    if (uncompressedDataSize \u003e 0) {\n      // compute the compression ratio\n      double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n\n      // publish the compression ratio\n      LOG.info(\"Input Data Compression Ratio : \" + ratio);\n    }\n    \n    return new DataStatistics(compressedDataSize, numCompressedFiles, true);\n  }",
          "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,50 @@\n+  static void publishCompressedDataStatistics(Path inputDir, Configuration conf,\n+                                              long uncompressedDataSize) \n+  throws IOException {\n+    FileSystem fs \u003d inputDir.getFileSystem(conf);\n+    CompressionCodecFactory compressionCodecs \u003d \n+      new CompressionCodecFactory(conf);\n+\n+    // iterate over compressed files and sum up the compressed file sizes\n+    long compressedDataSize \u003d 0;\n+    int numCompressedFiles \u003d 0;\n+    // obtain input data file statuses\n+    FileStatus[] outFileStatuses \u003d \n+      fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n+    for (FileStatus status : outFileStatuses) {\n+      // check if the input file is compressed\n+      if (compressionCodecs !\u003d null) {\n+        CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n+        if (codec !\u003d null) {\n+          ++numCompressedFiles;\n+          compressedDataSize +\u003d status.getLen();\n+        }\n+      }\n+    }\n+\n+    LOG.info(\"Gridmix is configured to use compressed input data.\");\n+    // publish the input data size\n+    LOG.info(\"Total size of compressed input data : \" \n+             + StringUtils.humanReadableInt(compressedDataSize));\n+    LOG.info(\"Total number of compressed input data files : \" \n+             + numCompressedFiles);\n+\n+    if (numCompressedFiles \u003d\u003d 0) {\n+      throw new RuntimeException(\"No compressed file found in the input\" \n+          + \" directory : \" + inputDir.toString() + \". To enable compression\"\n+          + \" emulation, run Gridmix either with \"\n+          + \" an input directory containing compressed input file(s) or\" \n+          + \" use the -generate option to (re)generate it. If compression\"\n+          + \" emulation is not desired, disable it by setting \u0027\" \n+          + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n+    }\n+    \n+    // publish compression ratio only if its generated in this gridmix run\n+    if (uncompressedDataSize \u003e 0) {\n+      // compute the compression ratio\n+      double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n+\n+      // publish the compression ratio\n+      LOG.info(\"Input Data Compression Ratio : \" + ratio);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void publishCompressedDataStatistics(Path inputDir, Configuration conf,\n                                              long uncompressedDataSize) \n  throws IOException {\n    FileSystem fs \u003d inputDir.getFileSystem(conf);\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(conf);\n\n    // iterate over compressed files and sum up the compressed file sizes\n    long compressedDataSize \u003d 0;\n    int numCompressedFiles \u003d 0;\n    // obtain input data file statuses\n    FileStatus[] outFileStatuses \u003d \n      fs.listStatus(inputDir, new Utils.OutputFileUtils.OutputFilesFilter());\n    for (FileStatus status : outFileStatuses) {\n      // check if the input file is compressed\n      if (compressionCodecs !\u003d null) {\n        CompressionCodec codec \u003d compressionCodecs.getCodec(status.getPath());\n        if (codec !\u003d null) {\n          ++numCompressedFiles;\n          compressedDataSize +\u003d status.getLen();\n        }\n      }\n    }\n\n    LOG.info(\"Gridmix is configured to use compressed input data.\");\n    // publish the input data size\n    LOG.info(\"Total size of compressed input data : \" \n             + StringUtils.humanReadableInt(compressedDataSize));\n    LOG.info(\"Total number of compressed input data files : \" \n             + numCompressedFiles);\n\n    if (numCompressedFiles \u003d\u003d 0) {\n      throw new RuntimeException(\"No compressed file found in the input\" \n          + \" directory : \" + inputDir.toString() + \". To enable compression\"\n          + \" emulation, run Gridmix either with \"\n          + \" an input directory containing compressed input file(s) or\" \n          + \" use the -generate option to (re)generate it. If compression\"\n          + \" emulation is not desired, disable it by setting \u0027\" \n          + COMPRESSION_EMULATION_ENABLE + \"\u0027 to \u0027false\u0027.\");\n    }\n    \n    // publish compression ratio only if its generated in this gridmix run\n    if (uncompressedDataSize \u003e 0) {\n      // compute the compression ratio\n      double ratio \u003d ((double)compressedDataSize) / uncompressedDataSize;\n\n      // publish the compression ratio\n      LOG.info(\"Input Data Compression Ratio : \" + ratio);\n    }\n  }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java"
    }
  }
}