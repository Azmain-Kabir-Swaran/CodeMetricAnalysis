{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationFileLoaderService.java",
  "functionName": "setupRootQueueProperties",
  "functionId": "setupRootQueueProperties___allocationFileParser-AllocationFileParser__queueProperties-QueueProperties",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
  "functionStartLine": 287,
  "functionEndLine": 311,
  "numCommitsSeen": 41,
  "timeTaken": 1091,
  "changeHistory": [
    "814d701d46b4ff87f6ec94ba39667c80475c38d7"
  ],
  "changeHistoryShort": {
    "814d701d46b4ff87f6ec94ba39667c80475c38d7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "814d701d46b4ff87f6ec94ba39667c80475c38d7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7841. Cleanup AllocationFileLoaderService\u0027s reloadAllocations method (snemeth via rkanter)\n",
      "commitDate": "06/02/18 2:36 PM",
      "commitName": "814d701d46b4ff87f6ec94ba39667c80475c38d7",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,25 @@\n+  private void setupRootQueueProperties(\n+      AllocationFileParser allocationFileParser,\n+      QueueProperties queueProperties) {\n+    // Set the min/fair share preemption timeout for the root queue\n+    if (!queueProperties.getMinSharePreemptionTimeouts()\n+        .containsKey(QueueManager.ROOT_QUEUE)) {\n+      queueProperties.getMinSharePreemptionTimeouts().put(\n+          QueueManager.ROOT_QUEUE,\n+          allocationFileParser.getDefaultMinSharePreemptionTimeout());\n+    }\n+    if (!queueProperties.getFairSharePreemptionTimeouts()\n+        .containsKey(QueueManager.ROOT_QUEUE)) {\n+      queueProperties.getFairSharePreemptionTimeouts().put(\n+          QueueManager.ROOT_QUEUE,\n+          allocationFileParser.getDefaultFairSharePreemptionTimeout());\n+    }\n+\n+    // Set the fair share preemption threshold for the root queue\n+    if (!queueProperties.getFairSharePreemptionThresholds()\n+        .containsKey(QueueManager.ROOT_QUEUE)) {\n+      queueProperties.getFairSharePreemptionThresholds().put(\n+          QueueManager.ROOT_QUEUE,\n+          allocationFileParser.getDefaultFairSharePreemptionThreshold());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupRootQueueProperties(\n      AllocationFileParser allocationFileParser,\n      QueueProperties queueProperties) {\n    // Set the min/fair share preemption timeout for the root queue\n    if (!queueProperties.getMinSharePreemptionTimeouts()\n        .containsKey(QueueManager.ROOT_QUEUE)) {\n      queueProperties.getMinSharePreemptionTimeouts().put(\n          QueueManager.ROOT_QUEUE,\n          allocationFileParser.getDefaultMinSharePreemptionTimeout());\n    }\n    if (!queueProperties.getFairSharePreemptionTimeouts()\n        .containsKey(QueueManager.ROOT_QUEUE)) {\n      queueProperties.getFairSharePreemptionTimeouts().put(\n          QueueManager.ROOT_QUEUE,\n          allocationFileParser.getDefaultFairSharePreemptionTimeout());\n    }\n\n    // Set the fair share preemption threshold for the root queue\n    if (!queueProperties.getFairSharePreemptionThresholds()\n        .containsKey(QueueManager.ROOT_QUEUE)) {\n      queueProperties.getFairSharePreemptionThresholds().put(\n          QueueManager.ROOT_QUEUE,\n          allocationFileParser.getDefaultFairSharePreemptionThreshold());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java"
    }
  }
}