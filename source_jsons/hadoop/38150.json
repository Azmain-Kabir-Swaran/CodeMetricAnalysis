{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerPreemptionUtils.java",
  "functionName": "deductPreemptableResourcesBasedSelectedCandidates",
  "functionId": "deductPreemptableResourcesBasedSelectedCandidates___context-CapacitySchedulerPreemptionContext__selectedCandidates-Map__ApplicationAttemptId,Set__RMContainer____",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
  "functionStartLine": 73,
  "functionEndLine": 108,
  "numCommitsSeen": 9,
  "timeTaken": 3306,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "c583ab02c730be0a63d974039a78f2dc67dc2db6",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": "Ybodychange",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Ybodychange",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/06/18 10:23 AM",
      "commitNameOld": "291194302cc1a875d6d94ea93cf1184a3f1fc2cc",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 635.75,
      "commitsBetweenForRepo": 4248,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   public static void deductPreemptableResourcesBasedSelectedCandidates(\n       CapacitySchedulerPreemptionContext context,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n     for (Set\u003cRMContainer\u003e containers : selectedCandidates.values()) {\n       for (RMContainer c : containers) {\n         SchedulerNode schedulerNode \u003d context.getScheduler()\n             .getSchedulerNode(c.getAllocatedNode());\n         if (null \u003d\u003d schedulerNode) {\n           continue;\n         }\n \n         String partition \u003d schedulerNode.getPartition();\n         String queue \u003d c.getQueueName();\n-        TempQueuePerPartition tq \u003d context.getQueueByPartition(queue,\n+        TempQueuePerPartition tq \u003d context.getQueueByPartition(\n+            context.getScheduler().normalizeQueueName(queue),\n             partition);\n \n         Resource res \u003d c.getReservedResource();\n         if (null \u003d\u003d res) {\n           res \u003d c.getAllocatedResource();\n         }\n \n         if (null !\u003d res) {\n           tq.deductActuallyToBePreempted(context.getResourceCalculator(),\n               tq.totalPartitionResource, res);\n           Collection\u003cTempAppPerPartition\u003e tas \u003d tq.getApps();\n           if (null \u003d\u003d tas || tas.isEmpty()) {\n             continue;\n           }\n \n           deductPreemptableResourcePerApp(context, tq.totalPartitionResource,\n               tas, res);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void deductPreemptableResourcesBasedSelectedCandidates(\n      CapacitySchedulerPreemptionContext context,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n    for (Set\u003cRMContainer\u003e containers : selectedCandidates.values()) {\n      for (RMContainer c : containers) {\n        SchedulerNode schedulerNode \u003d context.getScheduler()\n            .getSchedulerNode(c.getAllocatedNode());\n        if (null \u003d\u003d schedulerNode) {\n          continue;\n        }\n\n        String partition \u003d schedulerNode.getPartition();\n        String queue \u003d c.getQueueName();\n        TempQueuePerPartition tq \u003d context.getQueueByPartition(\n            context.getScheduler().normalizeQueueName(queue),\n            partition);\n\n        Resource res \u003d c.getReservedResource();\n        if (null \u003d\u003d res) {\n          res \u003d c.getAllocatedResource();\n        }\n\n        if (null !\u003d res) {\n          tq.deductActuallyToBePreempted(context.getResourceCalculator(),\n              tq.totalPartitionResource, res);\n          Collection\u003cTempAppPerPartition\u003e tas \u003d tq.getApps();\n          if (null \u003d\u003d tas || tas.isEmpty()) {\n            continue;\n          }\n\n          deductPreemptableResourcePerApp(context, tq.totalPartitionResource,\n              tas, res);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
      "extendedDetails": {}
    },
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
      "commitDate": "22/05/17 2:26 PM",
      "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/10/16 3:18 PM",
      "commitNameOld": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 202.96,
      "commitsBetweenForRepo": 1155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public static void deductPreemptableResourcesBasedSelectedCandidates(\n       CapacitySchedulerPreemptionContext context,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n     for (Set\u003cRMContainer\u003e containers : selectedCandidates.values()) {\n       for (RMContainer c : containers) {\n         SchedulerNode schedulerNode \u003d context.getScheduler()\n             .getSchedulerNode(c.getAllocatedNode());\n         if (null \u003d\u003d schedulerNode) {\n           continue;\n         }\n \n         String partition \u003d schedulerNode.getPartition();\n         String queue \u003d c.getQueueName();\n         TempQueuePerPartition tq \u003d context.getQueueByPartition(queue,\n             partition);\n \n         Resource res \u003d c.getReservedResource();\n         if (null \u003d\u003d res) {\n           res \u003d c.getAllocatedResource();\n         }\n \n         if (null !\u003d res) {\n           tq.deductActuallyToBePreempted(context.getResourceCalculator(),\n               tq.totalPartitionResource, res);\n           Collection\u003cTempAppPerPartition\u003e tas \u003d tq.getApps();\n           if (null \u003d\u003d tas || tas.isEmpty()) {\n             continue;\n           }\n \n           deductPreemptableResourcePerApp(context, tq.totalPartitionResource,\n-              tas, res, partition);\n+              tas, res);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void deductPreemptableResourcesBasedSelectedCandidates(\n      CapacitySchedulerPreemptionContext context,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n    for (Set\u003cRMContainer\u003e containers : selectedCandidates.values()) {\n      for (RMContainer c : containers) {\n        SchedulerNode schedulerNode \u003d context.getScheduler()\n            .getSchedulerNode(c.getAllocatedNode());\n        if (null \u003d\u003d schedulerNode) {\n          continue;\n        }\n\n        String partition \u003d schedulerNode.getPartition();\n        String queue \u003d c.getQueueName();\n        TempQueuePerPartition tq \u003d context.getQueueByPartition(queue,\n            partition);\n\n        Resource res \u003d c.getReservedResource();\n        if (null \u003d\u003d res) {\n          res \u003d c.getAllocatedResource();\n        }\n\n        if (null !\u003d res) {\n          tq.deductActuallyToBePreempted(context.getResourceCalculator(),\n              tq.totalPartitionResource, res);\n          Collection\u003cTempAppPerPartition\u003e tas \u003d tq.getApps();\n          if (null \u003d\u003d tas || tas.isEmpty()) {\n            continue;\n          }\n\n          deductPreemptableResourcePerApp(context, tq.totalPartitionResource,\n              tas, res);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
      "extendedDetails": {}
    },
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/05/16 12:56 PM",
      "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 179.1,
      "commitsBetweenForRepo": 1369,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,35 @@\n   public static void deductPreemptableResourcesBasedSelectedCandidates(\n       CapacitySchedulerPreemptionContext context,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n     for (Set\u003cRMContainer\u003e containers : selectedCandidates.values()) {\n       for (RMContainer c : containers) {\n-        SchedulerNode schedulerNode \u003d context.getScheduler().getSchedulerNode(\n-            c.getAllocatedNode());\n+        SchedulerNode schedulerNode \u003d context.getScheduler()\n+            .getSchedulerNode(c.getAllocatedNode());\n         if (null \u003d\u003d schedulerNode) {\n           continue;\n         }\n \n         String partition \u003d schedulerNode.getPartition();\n         String queue \u003d c.getQueueName();\n         TempQueuePerPartition tq \u003d context.getQueueByPartition(queue,\n             partition);\n \n         Resource res \u003d c.getReservedResource();\n         if (null \u003d\u003d res) {\n           res \u003d c.getAllocatedResource();\n         }\n \n         if (null !\u003d res) {\n           tq.deductActuallyToBePreempted(context.getResourceCalculator(),\n               tq.totalPartitionResource, res);\n+          Collection\u003cTempAppPerPartition\u003e tas \u003d tq.getApps();\n+          if (null \u003d\u003d tas || tas.isEmpty()) {\n+            continue;\n+          }\n+\n+          deductPreemptableResourcePerApp(context, tq.totalPartitionResource,\n+              tas, res, partition);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void deductPreemptableResourcesBasedSelectedCandidates(\n      CapacitySchedulerPreemptionContext context,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n    for (Set\u003cRMContainer\u003e containers : selectedCandidates.values()) {\n      for (RMContainer c : containers) {\n        SchedulerNode schedulerNode \u003d context.getScheduler()\n            .getSchedulerNode(c.getAllocatedNode());\n        if (null \u003d\u003d schedulerNode) {\n          continue;\n        }\n\n        String partition \u003d schedulerNode.getPartition();\n        String queue \u003d c.getQueueName();\n        TempQueuePerPartition tq \u003d context.getQueueByPartition(queue,\n            partition);\n\n        Resource res \u003d c.getReservedResource();\n        if (null \u003d\u003d res) {\n          res \u003d c.getAllocatedResource();\n        }\n\n        if (null !\u003d res) {\n          tq.deductActuallyToBePreempted(context.getResourceCalculator(),\n              tq.totalPartitionResource, res);\n          Collection\u003cTempAppPerPartition\u003e tas \u003d tq.getApps();\n          if (null \u003d\u003d tas || tas.isEmpty()) {\n            continue;\n          }\n\n          deductPreemptableResourcePerApp(context, tq.totalPartitionResource,\n              tas, res, partition);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
      "extendedDetails": {}
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,28 @@\n+  public static void deductPreemptableResourcesBasedSelectedCandidates(\n+      CapacitySchedulerPreemptionContext context,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n+    for (Set\u003cRMContainer\u003e containers : selectedCandidates.values()) {\n+      for (RMContainer c : containers) {\n+        SchedulerNode schedulerNode \u003d context.getScheduler().getSchedulerNode(\n+            c.getAllocatedNode());\n+        if (null \u003d\u003d schedulerNode) {\n+          continue;\n+        }\n+\n+        String partition \u003d schedulerNode.getPartition();\n+        String queue \u003d c.getQueueName();\n+        TempQueuePerPartition tq \u003d context.getQueueByPartition(queue,\n+            partition);\n+\n+        Resource res \u003d c.getReservedResource();\n+        if (null \u003d\u003d res) {\n+          res \u003d c.getAllocatedResource();\n+        }\n+\n+        if (null !\u003d res) {\n+          tq.deductActuallyToBePreempted(context.getResourceCalculator(),\n+              tq.totalPartitionResource, res);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void deductPreemptableResourcesBasedSelectedCandidates(\n      CapacitySchedulerPreemptionContext context,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates) {\n    for (Set\u003cRMContainer\u003e containers : selectedCandidates.values()) {\n      for (RMContainer c : containers) {\n        SchedulerNode schedulerNode \u003d context.getScheduler().getSchedulerNode(\n            c.getAllocatedNode());\n        if (null \u003d\u003d schedulerNode) {\n          continue;\n        }\n\n        String partition \u003d schedulerNode.getPartition();\n        String queue \u003d c.getQueueName();\n        TempQueuePerPartition tq \u003d context.getQueueByPartition(queue,\n            partition);\n\n        Resource res \u003d c.getReservedResource();\n        if (null \u003d\u003d res) {\n          res \u003d c.getAllocatedResource();\n        }\n\n        if (null !\u003d res) {\n          tq.deductActuallyToBePreempted(context.getResourceCalculator(),\n              tq.totalPartitionResource, res);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java"
    }
  }
}