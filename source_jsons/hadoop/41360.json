{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLeafQueue.java",
  "functionName": "updateStarvedAppsFairshare",
  "functionId": "updateStarvedAppsFairshare___appsWithDemand-TreeSet__FSAppAttempt__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
  "functionStartLine": 214,
  "functionEndLine": 228,
  "numCommitsSeen": 69,
  "timeTaken": 1180,
  "changeHistory": [
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c"
  ],
  "changeHistoryShort": {
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,15 @@\n+  private Resource updateStarvedAppsFairshare(\n+      TreeSet\u003cFSAppAttempt\u003e appsWithDemand) {\n+    Resource fairShareStarvation \u003d Resources.clone(none());\n+    // Fetch apps with unmet demand sorted by fairshare starvation\n+    for (FSAppAttempt app : appsWithDemand) {\n+      Resource appStarvation \u003d app.fairShareStarvation();\n+      if (!Resources.isNone(appStarvation))  {\n+        context.getStarvedApps().addStarvedApp(app);\n+        Resources.addTo(fairShareStarvation, appStarvation);\n+      } else {\n+        break;\n+      }\n+    }\n+    return fairShareStarvation;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource updateStarvedAppsFairshare(\n      TreeSet\u003cFSAppAttempt\u003e appsWithDemand) {\n    Resource fairShareStarvation \u003d Resources.clone(none());\n    // Fetch apps with unmet demand sorted by fairshare starvation\n    for (FSAppAttempt app : appsWithDemand) {\n      Resource appStarvation \u003d app.fairShareStarvation();\n      if (!Resources.isNone(appStarvation))  {\n        context.getStarvedApps().addStarvedApp(app);\n        Resources.addTo(fairShareStarvation, appStarvation);\n      } else {\n        break;\n      }\n    }\n    return fairShareStarvation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java"
    }
  }
}