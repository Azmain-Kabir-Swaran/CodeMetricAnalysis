{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReplaceDatanodeOnFailure.java",
  "functionName": "get",
  "functionId": "get___conf-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
  "functionStartLine": 144,
  "functionEndLine": 151,
  "numCommitsSeen": 8,
  "timeTaken": 5079,
  "changeHistory": [
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "7fc50e2525b8b8fe36d92e283a68eeeb09c63d21",
    "727331becc3902cb4e60ee04741e79703238e782",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "7fc50e2525b8b8fe36d92e283a68eeeb09c63d21": "Ybodychange",
    "727331becc3902cb4e60ee04741e79703238e782": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n    final Policy policy \u003d getPolicy(conf);\n    final boolean bestEffort \u003d conf.getBoolean(\n        HdfsClientConfigKeys.BlockWrite.ReplaceDatanodeOnFailure.BEST_EFFORT_KEY,\n        HdfsClientConfigKeys.BlockWrite.ReplaceDatanodeOnFailure.BEST_EFFORT_DEFAULT);\n    \n    return new ReplaceDatanodeOnFailure(policy, bestEffort);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java"
      }
    },
    "7fc50e2525b8b8fe36d92e283a68eeeb09c63d21": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8083. Move dfs.client.write.* conf from DFSConfigKeys to HdfsClientConfigKeys.Write.\n",
      "commitDate": "13/04/15 11:43 AM",
      "commitName": "7fc50e2525b8b8fe36d92e283a68eeeb09c63d21",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "02/09/14 3:14 PM",
      "commitNameOld": "727331becc3902cb4e60ee04741e79703238e782",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 222.85,
      "commitsBetweenForRepo": 1917,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n     final Policy policy \u003d getPolicy(conf);\n     final boolean bestEffort \u003d conf.getBoolean(\n-        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_BEST_EFFORT_KEY,\n-        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_BEST_EFFORT_DEFAULT);\n+        HdfsClientConfigKeys.BlockWrite.ReplaceDatanodeOnFailure.BEST_EFFORT_KEY,\n+        HdfsClientConfigKeys.BlockWrite.ReplaceDatanodeOnFailure.BEST_EFFORT_DEFAULT);\n     \n     return new ReplaceDatanodeOnFailure(policy, bestEffort);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n    final Policy policy \u003d getPolicy(conf);\n    final boolean bestEffort \u003d conf.getBoolean(\n        HdfsClientConfigKeys.BlockWrite.ReplaceDatanodeOnFailure.BEST_EFFORT_KEY,\n        HdfsClientConfigKeys.BlockWrite.ReplaceDatanodeOnFailure.BEST_EFFORT_DEFAULT);\n    \n    return new ReplaceDatanodeOnFailure(policy, bestEffort);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {}
    },
    "727331becc3902cb4e60ee04741e79703238e782": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4257. The ReplaceDatanodeOnFailure policies could have a forgiving option.  Contributed by szetszwo.\n",
      "commitDate": "02/09/14 3:14 PM",
      "commitName": "727331becc3902cb4e60ee04741e79703238e782",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1104.92,
      "commitsBetweenForRepo": 7171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,8 @@\n   public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n-    final boolean enabled \u003d conf.getBoolean(\n-        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_KEY,\n-        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_DEFAULT);\n-    if (!enabled) {\n-      return DISABLE;\n-    }\n-\n-    final String policy \u003d conf.get(\n-        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY,\n-        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_DEFAULT);\n-    for(int i \u003d 1; i \u003c values().length; i++) {\n-      final ReplaceDatanodeOnFailure rdof \u003d values()[i];\n-      if (rdof.name().equalsIgnoreCase(policy)) {\n-        return rdof;\n-      }\n-    }\n-    throw new HadoopIllegalArgumentException(\"Illegal configuration value for \"\n-        + DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY\n-        + \": \" + policy);\n+    final Policy policy \u003d getPolicy(conf);\n+    final boolean bestEffort \u003d conf.getBoolean(\n+        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_BEST_EFFORT_KEY,\n+        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_BEST_EFFORT_DEFAULT);\n+    \n+    return new ReplaceDatanodeOnFailure(policy, bestEffort);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n    final Policy policy \u003d getPolicy(conf);\n    final boolean bestEffort \u003d conf.getBoolean(\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_BEST_EFFORT_KEY,\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_BEST_EFFORT_DEFAULT);\n    \n    return new ReplaceDatanodeOnFailure(policy, bestEffort);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n    final boolean enabled \u003d conf.getBoolean(\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_KEY,\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_DEFAULT);\n    if (!enabled) {\n      return DISABLE;\n    }\n\n    final String policy \u003d conf.get(\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY,\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_DEFAULT);\n    for(int i \u003d 1; i \u003c values().length; i++) {\n      final ReplaceDatanodeOnFailure rdof \u003d values()[i];\n      if (rdof.name().equalsIgnoreCase(policy)) {\n        return rdof;\n      }\n    }\n    throw new HadoopIllegalArgumentException(\"Illegal configuration value for \"\n        + DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY\n        + \": \" + policy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n    final boolean enabled \u003d conf.getBoolean(\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_KEY,\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_DEFAULT);\n    if (!enabled) {\n      return DISABLE;\n    }\n\n    final String policy \u003d conf.get(\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY,\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_DEFAULT);\n    for(int i \u003d 1; i \u003c values().length; i++) {\n      final ReplaceDatanodeOnFailure rdof \u003d values()[i];\n      if (rdof.name().equalsIgnoreCase(policy)) {\n        return rdof;\n      }\n    }\n    throw new HadoopIllegalArgumentException(\"Illegal configuration value for \"\n        + DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY\n        + \": \" + policy);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,21 @@\n+  public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n+    final boolean enabled \u003d conf.getBoolean(\n+        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_KEY,\n+        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_DEFAULT);\n+    if (!enabled) {\n+      return DISABLE;\n+    }\n+\n+    final String policy \u003d conf.get(\n+        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY,\n+        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_DEFAULT);\n+    for(int i \u003d 1; i \u003c values().length; i++) {\n+      final ReplaceDatanodeOnFailure rdof \u003d values()[i];\n+      if (rdof.name().equalsIgnoreCase(policy)) {\n+        return rdof;\n+      }\n+    }\n+    throw new HadoopIllegalArgumentException(\"Illegal configuration value for \"\n+        + DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY\n+        + \": \" + policy);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static ReplaceDatanodeOnFailure get(final Configuration conf) {\n    final boolean enabled \u003d conf.getBoolean(\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_KEY,\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_DEFAULT);\n    if (!enabled) {\n      return DISABLE;\n    }\n\n    final String policy \u003d conf.get(\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY,\n        DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_DEFAULT);\n    for(int i \u003d 1; i \u003c values().length; i++) {\n      final ReplaceDatanodeOnFailure rdof \u003d values()[i];\n      if (rdof.name().equalsIgnoreCase(policy)) {\n        return rdof;\n      }\n    }\n    throw new HadoopIllegalArgumentException(\"Illegal configuration value for \"\n        + DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY\n        + \": \" + policy);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java"
    }
  }
}