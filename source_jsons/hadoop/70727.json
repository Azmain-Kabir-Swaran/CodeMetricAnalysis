{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "delete",
  "functionId": "delete___key-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 2679,
  "functionEndLine": 2711,
  "numCommitsSeen": 53,
  "timeTaken": 3763,
  "changeHistory": [
    "bb8ad096e785f7127a5c0de15167255d9b119578",
    "990aa34de23c625163745ebc338483065d955bbe",
    "15dd1f3381069c5fdc6690e3ab1907a133ba14bf",
    "9e7dcab185abf2fdabb28f2799b9952b5664a4b0",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "bb8ad096e785f7127a5c0de15167255d9b119578": "Ybodychange",
    "990aa34de23c625163745ebc338483065d955bbe": "Ybodychange",
    "15dd1f3381069c5fdc6690e3ab1907a133ba14bf": "Ymultichange(Yreturntypechange,Ybodychange)",
    "9e7dcab185abf2fdabb28f2799b9952b5664a4b0": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb8ad096e785f7127a5c0de15167255d9b119578": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16157. [Clean-up] Remove NULL check before instanceof in AzureNativeFileSystemStore\n(Contributed by Shweta Yakkali via Daniel Templeton)\n\nChange-Id: I6269ae66378e46eed440a76f847ae1af1fa95450\n",
      "commitDate": "09/03/19 9:55 AM",
      "commitName": "bb8ad096e785f7127a5c0de15167255d9b119578",
      "commitAuthor": "Shweta Yakkali",
      "commitDateOld": "21/02/19 6:08 AM",
      "commitNameOld": "a868f59d523e1391b719507a76c1aa9fd58278b5",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 16.16,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public boolean delete(String key) throws IOException {\n     try {\n       return delete(key, null);\n     } catch (IOException e) {\n       Throwable t \u003d e.getCause();\n-      if (t !\u003d null \u0026\u0026 t instanceof StorageException) {\n+      if (t instanceof StorageException) {\n         StorageException se \u003d (StorageException) t;\n         if (\"LeaseIdMissing\".equals(se.getErrorCode())){\n           SelfRenewingLease lease \u003d null;\n           try {\n             lease \u003d acquireLease(key);\n             return delete(key, lease);\n           } catch (AzureException e3) {\n             LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                 + key + \".\" + e3.getMessage());\n             throw e3;\n           } finally {\n             try {\n               if (lease !\u003d null){\n                 lease.free();\n               }\n             } catch (Exception e4){\n               LOG.error(\"Unable to free lease on \" + key, e4);\n             }\n           }\n         } else {\n           throw e;\n         }\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean delete(String key) throws IOException {\n    try {\n      return delete(key, null);\n    } catch (IOException e) {\n      Throwable t \u003d e.getCause();\n      if (t instanceof StorageException) {\n        StorageException se \u003d (StorageException) t;\n        if (\"LeaseIdMissing\".equals(se.getErrorCode())){\n          SelfRenewingLease lease \u003d null;\n          try {\n            lease \u003d acquireLease(key);\n            return delete(key, lease);\n          } catch (AzureException e3) {\n            LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                + key + \".\" + e3.getMessage());\n            throw e3;\n          } finally {\n            try {\n              if (lease !\u003d null){\n                lease.free();\n              }\n            } catch (Exception e4){\n              LOG.error(\"Unable to free lease on \" + key, e4);\n            }\n          }\n        } else {\n          throw e;\n        }\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "990aa34de23c625163745ebc338483065d955bbe": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14609. NPE in AzureNativeFileSystemStore.checkContainer() if StorageException lacks an error code. Contributed by Steve Loughran\n",
      "commitDate": "28/06/17 2:18 PM",
      "commitName": "990aa34de23c625163745ebc338483065d955bbe",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "27/06/17 5:32 PM",
      "commitNameOld": "7e031c2c18b8812ec9f843ed3b4abe9e6d12bb28",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public boolean delete(String key) throws IOException {\n     try {\n       return delete(key, null);\n     } catch (IOException e) {\n       Throwable t \u003d e.getCause();\n       if(t !\u003d null \u0026\u0026 t instanceof StorageException) {\n         StorageException se \u003d (StorageException) t;\n-        if(se.getErrorCode().equals((\"LeaseIdMissing\"))){\n+        if (\"LeaseIdMissing\".equals(se.getErrorCode())){\n           SelfRenewingLease lease \u003d null;\n           try {\n             lease \u003d acquireLease(key);\n             return delete(key, lease);\n           } catch (AzureException e3) {\n             LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                 + key + \".\" + e3.getMessage());\n             throw e3;\n           } finally {\n             try {\n               if(lease !\u003d null){\n                 lease.free();\n               }\n             } catch (Exception e4){\n               LOG.error(\"Unable to free lease on \" + key, e4);\n             }\n           }\n         } else {\n           throw e;\n         }\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean delete(String key) throws IOException {\n    try {\n      return delete(key, null);\n    } catch (IOException e) {\n      Throwable t \u003d e.getCause();\n      if(t !\u003d null \u0026\u0026 t instanceof StorageException) {\n        StorageException se \u003d (StorageException) t;\n        if (\"LeaseIdMissing\".equals(se.getErrorCode())){\n          SelfRenewingLease lease \u003d null;\n          try {\n            lease \u003d acquireLease(key);\n            return delete(key, lease);\n          } catch (AzureException e3) {\n            LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                + key + \".\" + e3.getMessage());\n            throw e3;\n          } finally {\n            try {\n              if(lease !\u003d null){\n                lease.free();\n              }\n            } catch (Exception e4){\n              LOG.error(\"Unable to free lease on \" + key, e4);\n            }\n          }\n        } else {\n          throw e;\n        }\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "15dd1f3381069c5fdc6690e3ab1907a133ba14bf": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-13675. Bug in return value for delete() calls in WASB. Contributed by Dushyanth\n",
      "commitDate": "05/12/16 12:04 PM",
      "commitName": "15dd1f3381069c5fdc6690e3ab1907a133ba14bf",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-13675. Bug in return value for delete() calls in WASB. Contributed by Dushyanth\n",
          "commitDate": "05/12/16 12:04 PM",
          "commitName": "15dd1f3381069c5fdc6690e3ab1907a133ba14bf",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "27/10/16 4:09 PM",
          "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 38.87,
          "commitsBetweenForRepo": 283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  public void delete(String key) throws IOException {\n+  public boolean delete(String key) throws IOException {\n     try {\n-      delete(key, null);\n+      return delete(key, null);\n     } catch (IOException e) {\n       Throwable t \u003d e.getCause();\n       if(t !\u003d null \u0026\u0026 t instanceof StorageException) {\n         StorageException se \u003d (StorageException) t;\n         if(se.getErrorCode().equals((\"LeaseIdMissing\"))){\n           SelfRenewingLease lease \u003d null;\n           try {\n             lease \u003d acquireLease(key);\n-            delete(key, lease);\n+            return delete(key, lease);\n           } catch (AzureException e3) {\n             LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                 + key + \".\" + e3.getMessage());\n             throw e3;\n           } finally {\n             try {\n               if(lease !\u003d null){\n                 lease.free();\n               }\n             } catch (Exception e4){\n               LOG.error(\"Unable to free lease on \" + key, e4);\n             }\n           }\n         } else {\n           throw e;\n         }\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean delete(String key) throws IOException {\n    try {\n      return delete(key, null);\n    } catch (IOException e) {\n      Throwable t \u003d e.getCause();\n      if(t !\u003d null \u0026\u0026 t instanceof StorageException) {\n        StorageException se \u003d (StorageException) t;\n        if(se.getErrorCode().equals((\"LeaseIdMissing\"))){\n          SelfRenewingLease lease \u003d null;\n          try {\n            lease \u003d acquireLease(key);\n            return delete(key, lease);\n          } catch (AzureException e3) {\n            LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                + key + \".\" + e3.getMessage());\n            throw e3;\n          } finally {\n            try {\n              if(lease !\u003d null){\n                lease.free();\n              }\n            } catch (Exception e4){\n              LOG.error(\"Unable to free lease on \" + key, e4);\n            }\n          }\n        } else {\n          throw e;\n        }\n      } else {\n        throw e;\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13675. Bug in return value for delete() calls in WASB. Contributed by Dushyanth\n",
          "commitDate": "05/12/16 12:04 PM",
          "commitName": "15dd1f3381069c5fdc6690e3ab1907a133ba14bf",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "27/10/16 4:09 PM",
          "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 38.87,
          "commitsBetweenForRepo": 283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  public void delete(String key) throws IOException {\n+  public boolean delete(String key) throws IOException {\n     try {\n-      delete(key, null);\n+      return delete(key, null);\n     } catch (IOException e) {\n       Throwable t \u003d e.getCause();\n       if(t !\u003d null \u0026\u0026 t instanceof StorageException) {\n         StorageException se \u003d (StorageException) t;\n         if(se.getErrorCode().equals((\"LeaseIdMissing\"))){\n           SelfRenewingLease lease \u003d null;\n           try {\n             lease \u003d acquireLease(key);\n-            delete(key, lease);\n+            return delete(key, lease);\n           } catch (AzureException e3) {\n             LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                 + key + \".\" + e3.getMessage());\n             throw e3;\n           } finally {\n             try {\n               if(lease !\u003d null){\n                 lease.free();\n               }\n             } catch (Exception e4){\n               LOG.error(\"Unable to free lease on \" + key, e4);\n             }\n           }\n         } else {\n           throw e;\n         }\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean delete(String key) throws IOException {\n    try {\n      return delete(key, null);\n    } catch (IOException e) {\n      Throwable t \u003d e.getCause();\n      if(t !\u003d null \u0026\u0026 t instanceof StorageException) {\n        StorageException se \u003d (StorageException) t;\n        if(se.getErrorCode().equals((\"LeaseIdMissing\"))){\n          SelfRenewingLease lease \u003d null;\n          try {\n            lease \u003d acquireLease(key);\n            return delete(key, lease);\n          } catch (AzureException e3) {\n            LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                + key + \".\" + e3.getMessage());\n            throw e3;\n          } finally {\n            try {\n              if(lease !\u003d null){\n                lease.free();\n              }\n            } catch (Exception e4){\n              LOG.error(\"Unable to free lease on \" + key, e4);\n            }\n          }\n        } else {\n          throw e;\n        }\n      } else {\n        throw e;\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e7dcab185abf2fdabb28f2799b9952b5664a4b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12508. delete fails with exception when lease is held on blob. Contributed by Gaurav Kanade.\n",
      "commitDate": "02/11/15 10:21 AM",
      "commitName": "9e7dcab185abf2fdabb28f2799b9952b5664a4b0",
      "commitAuthor": "cnauroth",
      "commitDateOld": "27/10/15 10:56 PM",
      "commitNameOld": "1f7ecb0c84042783f9fcf3f77d7d889dc58c9ead",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 5.52,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,33 @@\n   public void delete(String key) throws IOException {\n-    delete(key, null);\n+    try {\n+      delete(key, null);\n+    } catch (IOException e) {\n+      Throwable t \u003d e.getCause();\n+      if(t !\u003d null \u0026\u0026 t instanceof StorageException) {\n+        StorageException se \u003d (StorageException) t;\n+        if(se.getErrorCode().equals((\"LeaseIdMissing\"))){\n+          SelfRenewingLease lease \u003d null;\n+          try {\n+            lease \u003d acquireLease(key);\n+            delete(key, lease);\n+          } catch (AzureException e3) {\n+            LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n+                + key + \".\" + e3.getMessage());\n+            throw e3;\n+          } finally {\n+            try {\n+              if(lease !\u003d null){\n+                lease.free();\n+              }\n+            } catch (Exception e4){\n+              LOG.error(\"Unable to free lease on \" + key, e4);\n+            }\n+          }\n+        } else {\n+          throw e;\n+        }\n+      } else {\n+        throw e;\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void delete(String key) throws IOException {\n    try {\n      delete(key, null);\n    } catch (IOException e) {\n      Throwable t \u003d e.getCause();\n      if(t !\u003d null \u0026\u0026 t instanceof StorageException) {\n        StorageException se \u003d (StorageException) t;\n        if(se.getErrorCode().equals((\"LeaseIdMissing\"))){\n          SelfRenewingLease lease \u003d null;\n          try {\n            lease \u003d acquireLease(key);\n            delete(key, lease);\n          } catch (AzureException e3) {\n            LOG.warn(\"Got unexpected exception trying to acquire lease on \"\n                + key + \".\" + e3.getMessage());\n            throw e3;\n          } finally {\n            try {\n              if(lease !\u003d null){\n                lease.free();\n              }\n            } catch (Exception e4){\n              LOG.error(\"Unable to free lease on \" + key, e4);\n            }\n          }\n        } else {\n          throw e;\n        }\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "commitDateOld": "24/06/14 1:52 PM",
      "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 106.02,
      "commitsBetweenForRepo": 1005,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,3 @@\n   public void delete(String key) throws IOException {\n-    try {\n-      if (checkContainer(ContainerAccessType.ReadThenWrite) \u003d\u003d ContainerState.DoesntExist) {\n-        // Container doesn\u0027t exist, no need to do anything\n-        return;\n-      }\n-\n-      // Get the blob reference an delete it.\n-      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n-      if (blob.exists(getInstrumentedContext())) {\n-        safeDelete(blob);\n-      }\n-    } catch (Exception e) {\n-      // Re-throw as an Azure storage exception.\n-      throw new AzureException(e);\n-    }\n+    delete(key, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void delete(String key) throws IOException {\n    delete(key, null);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,17 @@\n+  public void delete(String key) throws IOException {\n+    try {\n+      if (checkContainer(ContainerAccessType.ReadThenWrite) \u003d\u003d ContainerState.DoesntExist) {\n+        // Container doesn\u0027t exist, no need to do anything\n+        return;\n+      }\n+\n+      // Get the blob reference an delete it.\n+      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n+      if (blob.exists(getInstrumentedContext())) {\n+        safeDelete(blob);\n+      }\n+    } catch (Exception e) {\n+      // Re-throw as an Azure storage exception.\n+      throw new AzureException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void delete(String key) throws IOException {\n    try {\n      if (checkContainer(ContainerAccessType.ReadThenWrite) \u003d\u003d ContainerState.DoesntExist) {\n        // Container doesn\u0027t exist, no need to do anything\n        return;\n      }\n\n      // Get the blob reference an delete it.\n      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n      if (blob.exists(getInstrumentedContext())) {\n        safeDelete(blob);\n      }\n    } catch (Exception e) {\n      // Re-throw as an Azure storage exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}