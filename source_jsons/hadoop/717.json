{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStreamer.java",
  "functionName": "waitForAckedSeqno",
  "functionId": "waitForAckedSeqno___seqno-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
  "functionStartLine": 872,
  "functionEndLine": 904,
  "numCommitsSeen": 156,
  "timeTaken": 10749,
  "changeHistory": [
    "49b02d4a9bf9beac19f716488348ea4e30563ff4",
    "0914fcca312b5e9d20bcf1b6633bc13c9034ba46",
    "a8b4d0ff283a0af1075aaa94904d4c6e63a9a3dd",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "892ade689f9bcce76daae8f66fc00a49bee8548e",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "7947e5b53b9ac9524b535b0384c1c355b74723ff",
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
    "8234fd0e1087e0e49aa1d6f286f292b7f70b368e",
    "394ba94c5d2801fbc5d95c7872eeeede28eed1eb",
    "1228f8f6fb16de4f0283dd1c7939e6fc3dfb7aae",
    "f2f5cdb5554d294a29ebf465101c5607fd56e244",
    "1c309f763be3dd2e3d7d1616d2c960ff80cf9b03",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "49b02d4a9bf9beac19f716488348ea4e30563ff4": "Ybodychange",
    "0914fcca312b5e9d20bcf1b6633bc13c9034ba46": "Ybodychange",
    "a8b4d0ff283a0af1075aaa94904d4c6e63a9a3dd": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "892ade689f9bcce76daae8f66fc00a49bee8548e": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "7947e5b53b9ac9524b535b0384c1c355b74723ff": "Ybodychange",
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "8234fd0e1087e0e49aa1d6f286f292b7f70b368e": "Ybodychange",
    "394ba94c5d2801fbc5d95c7872eeeede28eed1eb": "Ybodychange",
    "1228f8f6fb16de4f0283dd1c7939e6fc3dfb7aae": "Ybodychange",
    "f2f5cdb5554d294a29ebf465101c5607fd56e244": "Ybodychange",
    "1c309f763be3dd2e3d7d1616d2c960ff80cf9b03": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49b02d4a9bf9beac19f716488348ea4e30563ff4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14395. Remove WARN Logging From Interrupts. Contributed by David Mollitor.\n",
      "commitDate": "28/03/19 11:16 AM",
      "commitName": "49b02d4a9bf9beac19f716488348ea4e30563ff4",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "06/11/18 11:18 AM",
      "commitNameOld": "887244de4adebe27693ed4ad3296a6f700cfa8c1",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 141.96,
      "commitsBetweenForRepo": 1021,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n     try (TraceScope ignored \u003d dfsClient.getTracer().\n         newScope(\"waitForAckedSeqno\")) {\n       LOG.debug(\"{} waiting for ack for: {}\", this, seqno);\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException cce) {\n+        LOG.debug(\"Closed channel exception\", cce);\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         LOG.warn(\"Slow waitForAckedSeqno took {}ms (threshold\u003d{}ms). File being\"\n                 + \" written: {}, block: {}, Write pipeline datanodes: {}.\",\n             duration, dfsclientSlowLogThresholdMs, src, block, nodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    try (TraceScope ignored \u003d dfsClient.getTracer().\n        newScope(\"waitForAckedSeqno\")) {\n      LOG.debug(\"{} waiting for ack for: {}\", this, seqno);\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException cce) {\n        LOG.debug(\"Closed channel exception\", cce);\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took {}ms (threshold\u003d{}ms). File being\"\n                + \" written: {}, block: {}, Write pipeline datanodes: {}.\",\n            duration, dfsclientSlowLogThresholdMs, src, block, nodes);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "0914fcca312b5e9d20bcf1b6633bc13c9034ba46": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11363. Need more diagnosis info when seeing Slow waitForAckedSeqno.\n",
      "commitDate": "02/02/17 10:08 AM",
      "commitName": "0914fcca312b5e9d20bcf1b6633bc13c9034ba46",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "26/09/16 1:11 PM",
      "commitNameOld": "3ae652f82110a52bf239f3c1849b48981558eb19",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 128.91,
      "commitsBetweenForRepo": 846,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n     try (TraceScope ignored \u003d dfsClient.getTracer().\n         newScope(\"waitForAckedSeqno\")) {\n       LOG.debug(\"{} waiting for ack for: {}\", this, seqno);\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException cce) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n-        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n-            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n+        LOG.warn(\"Slow waitForAckedSeqno took {}ms (threshold\u003d{}ms). File being\"\n+                + \" written: {}, block: {}, Write pipeline datanodes: {}.\",\n+            duration, dfsclientSlowLogThresholdMs, src, block, nodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    try (TraceScope ignored \u003d dfsClient.getTracer().\n        newScope(\"waitForAckedSeqno\")) {\n      LOG.debug(\"{} waiting for ack for: {}\", this, seqno);\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException cce) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took {}ms (threshold\u003d{}ms). File being\"\n                + \" written: {}, block: {}, Write pipeline datanodes: {}.\",\n            duration, dfsclientSlowLogThresholdMs, src, block, nodes);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "a8b4d0ff283a0af1075aaa94904d4c6e63a9a3dd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9180. Update excluded DataNodes in DFSStripedOutputStream based on failures in data streamers. Contributed by Jing Zhao.\n",
      "commitDate": "06/10/15 10:56 AM",
      "commitName": "a8b4d0ff283a0af1075aaa94904d4c6e63a9a3dd",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "03/10/15 11:38 AM",
      "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n     try (TraceScope ignored \u003d dfsClient.getTracer().\n         newScope(\"waitForAckedSeqno\")) {\n-      LOG.debug(\"Waiting for ack for: {}\", seqno);\n+      LOG.debug(\"{} waiting for ack for: {}\", this, seqno);\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException cce) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    try (TraceScope ignored \u003d dfsClient.getTracer().\n        newScope(\"waitForAckedSeqno\")) {\n      LOG.debug(\"{} waiting for ack for: {}\", this, seqno);\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException cce) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,31 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n-    TraceScope scope \u003d dfsClient.getTracer().\n-        newScope(\"waitForAckedSeqno\");\n-    try {\n+    try (TraceScope ignored \u003d dfsClient.getTracer().\n+        newScope(\"waitForAckedSeqno\")) {\n       LOG.debug(\"Waiting for ack for: {}\", seqno);\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n-      } catch (ClosedChannelException e) {\n+      } catch (ClosedChannelException cce) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n-    } finally {\n-      scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    try (TraceScope ignored \u003d dfsClient.getTracer().\n        newScope(\"waitForAckedSeqno\")) {\n      LOG.debug(\"Waiting for ack for: {}\", seqno);\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException cce) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,34 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n     TraceScope scope \u003d dfsClient.getTracer().\n         newScope(\"waitForAckedSeqno\");\n     try {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Waiting for ack for: \" + seqno);\n-      }\n+      LOG.debug(\"Waiting for ack for: {}\", seqno);\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException e) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d dfsClient.getTracer().\n        newScope(\"waitForAckedSeqno\");\n    try {\n      LOG.debug(\"Waiting for ack for: {}\", seqno);\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,36 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n     TraceScope scope \u003d dfsClient.getTracer().\n         newScope(\"waitForAckedSeqno\");\n     try {\n-      LOG.debug(\"Waiting for ack for: {}\", seqno);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Waiting for ack for: \" + seqno);\n+      }\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException e) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d dfsClient.getTracer().\n        newScope(\"waitForAckedSeqno\");\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Waiting for ack for: \" + seqno);\n      }\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 11:29 AM",
      "commitNameOld": "4c9497cbf02ecc82532a4e79e18912d8e0eb4731",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.26,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,34 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n     TraceScope scope \u003d dfsClient.getTracer().\n         newScope(\"waitForAckedSeqno\");\n     try {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Waiting for ack for: \" + seqno);\n-      }\n+      LOG.debug(\"Waiting for ack for: {}\", seqno);\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException e) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d dfsClient.getTracer().\n        newScope(\"waitForAckedSeqno\");\n    try {\n      LOG.debug(\"Waiting for ack for: {}\", seqno);\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "892ade689f9bcce76daae8f66fc00a49bee8548e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9080. Update htrace version to 4.0.1 (cmccabe)\n",
      "commitDate": "28/09/15 7:42 AM",
      "commitName": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "26/09/15 11:08 AM",
      "commitNameOld": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n-    TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n+    TraceScope scope \u003d dfsClient.getTracer().\n+        newScope(\"waitForAckedSeqno\");\n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Waiting for ack for: \" + seqno);\n       }\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException e) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d dfsClient.getTracer().\n        newScope(\"waitForAckedSeqno\");\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Waiting for ack for: \" + seqno);\n      }\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Waiting for ack for: \" + seqno);\n      }\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java"
      }
    },
    "7947e5b53b9ac9524b535b0384c1c355b74723ff": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8283. DataStreamer cleanup and some minor improvement. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "29/04/15 10:41 AM",
      "commitName": "7947e5b53b9ac9524b535b0384c1c355b74723ff",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/04/15 12:21 AM",
      "commitNameOld": "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   void waitForAckedSeqno(long seqno) throws IOException {\n     TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n     try {\n-      if (DFSClient.LOG.isDebugEnabled()) {\n-        DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Waiting for ack for: \" + seqno);\n       }\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n           while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException e) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n-        DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n+        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Waiting for ack for: \" + seqno);\n      }\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-7854. Separate class DataStreamer out of DFSOutputStream. Contributed by Li Bo.\n",
      "commitDate": "24/03/15 11:06 AM",
      "commitName": "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7854. Separate class DataStreamer out of DFSOutputStream. Contributed by Li Bo.\n",
          "commitDate": "24/03/15 11:06 AM",
          "commitName": "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/03/15 10:49 AM",
          "commitNameOld": "570a83ae80faf2076966acf30588733803327844",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  private void waitForAckedSeqno(long seqno) throws IOException {\n+  void waitForAckedSeqno(long seqno) throws IOException {\n     TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n     try {\n       if (DFSClient.LOG.isDebugEnabled()) {\n         DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n       }\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n-          while (!isClosed()) {\n+          while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException e) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n    try {\n      if (DFSClient.LOG.isDebugEnabled()) {\n        DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n      }\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
            "oldMethodName": "waitForAckedSeqno",
            "newMethodName": "waitForAckedSeqno"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7854. Separate class DataStreamer out of DFSOutputStream. Contributed by Li Bo.\n",
          "commitDate": "24/03/15 11:06 AM",
          "commitName": "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/03/15 10:49 AM",
          "commitNameOld": "570a83ae80faf2076966acf30588733803327844",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  private void waitForAckedSeqno(long seqno) throws IOException {\n+  void waitForAckedSeqno(long seqno) throws IOException {\n     TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n     try {\n       if (DFSClient.LOG.isDebugEnabled()) {\n         DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n       }\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n-          while (!isClosed()) {\n+          while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException e) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n    try {\n      if (DFSClient.LOG.isDebugEnabled()) {\n        DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n      }\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7854. Separate class DataStreamer out of DFSOutputStream. Contributed by Li Bo.\n",
          "commitDate": "24/03/15 11:06 AM",
          "commitName": "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/03/15 10:49 AM",
          "commitNameOld": "570a83ae80faf2076966acf30588733803327844",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  private void waitForAckedSeqno(long seqno) throws IOException {\n+  void waitForAckedSeqno(long seqno) throws IOException {\n     TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n     try {\n       if (DFSClient.LOG.isDebugEnabled()) {\n         DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n       }\n       long begin \u003d Time.monotonicNow();\n       try {\n         synchronized (dataQueue) {\n-          while (!isClosed()) {\n+          while (!streamerClosed) {\n             checkClosed();\n             if (lastAckedSeqno \u003e\u003d seqno) {\n               break;\n             }\n             try {\n               dataQueue.wait(1000); // when we receive an ack, we notify on\n               // dataQueue\n             } catch (InterruptedException ie) {\n               throw new InterruptedIOException(\n                   \"Interrupted while waiting for data to be acknowledged by pipeline\");\n             }\n           }\n         }\n         checkClosed();\n       } catch (ClosedChannelException e) {\n       }\n       long duration \u003d Time.monotonicNow() - begin;\n       if (duration \u003e dfsclientSlowLogThresholdMs) {\n         DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n             + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n    try {\n      if (DFSClient.LOG.isDebugEnabled()) {\n        DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n      }\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!streamerClosed) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {}
        }
      ]
    },
    "8234fd0e1087e0e49aa1d6f286f292b7f70b368e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7054. Make DFSOutputStream tracing more fine-grained (cmccabe)\n",
      "commitDate": "18/03/15 6:14 PM",
      "commitName": "8234fd0e1087e0e49aa1d6f286f292b7f70b368e",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "16/03/15 9:58 PM",
      "commitNameOld": "046521cd6511b7fc6d9478cb2bed90d8e75fca20",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   private void waitForAckedSeqno(long seqno) throws IOException {\n-    if (DFSClient.LOG.isDebugEnabled()) {\n-      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n-    }\n-    long begin \u003d Time.monotonicNow();\n+    TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n     try {\n-      synchronized (dataQueue) {\n-        while (!isClosed()) {\n-          checkClosed();\n-          if (lastAckedSeqno \u003e\u003d seqno) {\n-            break;\n-          }\n-          try {\n-            dataQueue.wait(1000); // when we receive an ack, we notify on\n-                                  // dataQueue\n-          } catch (InterruptedException ie) {\n-            throw new InterruptedIOException(\n-                \"Interrupted while waiting for data to be acknowledged by pipeline\");\n+      if (DFSClient.LOG.isDebugEnabled()) {\n+        DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n+      }\n+      long begin \u003d Time.monotonicNow();\n+      try {\n+        synchronized (dataQueue) {\n+          while (!isClosed()) {\n+            checkClosed();\n+            if (lastAckedSeqno \u003e\u003d seqno) {\n+              break;\n+            }\n+            try {\n+              dataQueue.wait(1000); // when we receive an ack, we notify on\n+              // dataQueue\n+            } catch (InterruptedException ie) {\n+              throw new InterruptedIOException(\n+                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n+            }\n           }\n         }\n+        checkClosed();\n+      } catch (ClosedChannelException e) {\n       }\n-      checkClosed();\n-    } catch (ClosedChannelException e) {\n-    }\n-    long duration \u003d Time.monotonicNow() - begin;\n-    if (duration \u003e dfsclientSlowLogThresholdMs) {\n-      DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n-          + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n+      long duration \u003d Time.monotonicNow() - begin;\n+      if (duration \u003e dfsclientSlowLogThresholdMs) {\n+        DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n+            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n+      }\n+    } finally {\n+      scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void waitForAckedSeqno(long seqno) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"waitForAckedSeqno\", Sampler.NEVER);\n    try {\n      if (DFSClient.LOG.isDebugEnabled()) {\n        DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n      }\n      long begin \u003d Time.monotonicNow();\n      try {\n        synchronized (dataQueue) {\n          while (!isClosed()) {\n            checkClosed();\n            if (lastAckedSeqno \u003e\u003d seqno) {\n              break;\n            }\n            try {\n              dataQueue.wait(1000); // when we receive an ack, we notify on\n              // dataQueue\n            } catch (InterruptedException ie) {\n              throw new InterruptedIOException(\n                  \"Interrupted while waiting for data to be acknowledged by pipeline\");\n            }\n          }\n        }\n        checkClosed();\n      } catch (ClosedChannelException e) {\n      }\n      long duration \u003d Time.monotonicNow() - begin;\n      if (duration \u003e dfsclientSlowLogThresholdMs) {\n        DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n            + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "394ba94c5d2801fbc5d95c7872eeeede28eed1eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7358. Clients may get stuck waiting when using ByteArrayManager.\n",
      "commitDate": "13/11/14 12:28 PM",
      "commitName": "394ba94c5d2801fbc5d95c7872eeeede28eed1eb",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "05/11/14 10:51 AM",
      "commitNameOld": "56257fab1d5a7f66bebd9149c7df0436c0a57adb",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 8.07,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void waitForAckedSeqno(long seqno) throws IOException {\n     if (DFSClient.LOG.isDebugEnabled()) {\n       DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n     }\n     long begin \u003d Time.monotonicNow();\n     try {\n       synchronized (dataQueue) {\n-        while (!closed) {\n+        while (!isClosed()) {\n           checkClosed();\n           if (lastAckedSeqno \u003e\u003d seqno) {\n             break;\n           }\n           try {\n             dataQueue.wait(1000); // when we receive an ack, we notify on\n                                   // dataQueue\n           } catch (InterruptedException ie) {\n             throw new InterruptedIOException(\n                 \"Interrupted while waiting for data to be acknowledged by pipeline\");\n           }\n         }\n       }\n       checkClosed();\n     } catch (ClosedChannelException e) {\n     }\n     long duration \u003d Time.monotonicNow() - begin;\n     if (duration \u003e dfsclientSlowLogThresholdMs) {\n       DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n           + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void waitForAckedSeqno(long seqno) throws IOException {\n    if (DFSClient.LOG.isDebugEnabled()) {\n      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n    }\n    long begin \u003d Time.monotonicNow();\n    try {\n      synchronized (dataQueue) {\n        while (!isClosed()) {\n          checkClosed();\n          if (lastAckedSeqno \u003e\u003d seqno) {\n            break;\n          }\n          try {\n            dataQueue.wait(1000); // when we receive an ack, we notify on\n                                  // dataQueue\n          } catch (InterruptedException ie) {\n            throw new InterruptedIOException(\n                \"Interrupted while waiting for data to be acknowledged by pipeline\");\n          }\n        }\n      }\n      checkClosed();\n    } catch (ClosedChannelException e) {\n    }\n    long duration \u003d Time.monotonicNow() - begin;\n    if (duration \u003e dfsclientSlowLogThresholdMs) {\n      DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n          + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "1228f8f6fb16de4f0283dd1c7939e6fc3dfb7aae": {
      "type": "Ybodychange",
      "commitMessage": "HBASE-6110 adding more slow action log in critical write path (Liang Xie via stack)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597633 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/05/14 12:38 PM",
      "commitName": "1228f8f6fb16de4f0283dd1c7939e6fc3dfb7aae",
      "commitAuthor": "Michael Stack",
      "commitDateOld": "09/05/14 3:36 PM",
      "commitNameOld": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 16.88,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,30 @@\n   private void waitForAckedSeqno(long seqno) throws IOException {\n     if (DFSClient.LOG.isDebugEnabled()) {\n       DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n     }\n+    long begin \u003d Time.monotonicNow();\n     try {\n       synchronized (dataQueue) {\n         while (!closed) {\n           checkClosed();\n           if (lastAckedSeqno \u003e\u003d seqno) {\n             break;\n           }\n           try {\n             dataQueue.wait(1000); // when we receive an ack, we notify on\n                                   // dataQueue\n           } catch (InterruptedException ie) {\n             throw new InterruptedIOException(\n                 \"Interrupted while waiting for data to be acknowledged by pipeline\");\n           }\n         }\n       }\n       checkClosed();\n     } catch (ClosedChannelException e) {\n     }\n+    long duration \u003d Time.monotonicNow() - begin;\n+    if (duration \u003e dfsclientSlowLogThresholdMs) {\n+      DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n+          + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void waitForAckedSeqno(long seqno) throws IOException {\n    if (DFSClient.LOG.isDebugEnabled()) {\n      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n    }\n    long begin \u003d Time.monotonicNow();\n    try {\n      synchronized (dataQueue) {\n        while (!closed) {\n          checkClosed();\n          if (lastAckedSeqno \u003e\u003d seqno) {\n            break;\n          }\n          try {\n            dataQueue.wait(1000); // when we receive an ack, we notify on\n                                  // dataQueue\n          } catch (InterruptedException ie) {\n            throw new InterruptedIOException(\n                \"Interrupted while waiting for data to be acknowledged by pipeline\");\n          }\n        }\n      }\n      checkClosed();\n    } catch (ClosedChannelException e) {\n    }\n    long duration \u003d Time.monotonicNow() - begin;\n    if (duration \u003e dfsclientSlowLogThresholdMs) {\n      DFSClient.LOG.warn(\"Slow waitForAckedSeqno took \" + duration\n          + \"ms (threshold\u003d\" + dfsclientSlowLogThresholdMs + \"ms)\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "f2f5cdb5554d294a29ebf465101c5607fd56e244": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5335. Hive query failed with possible race in dfs output stream. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1531152 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/10/13 4:58 PM",
      "commitName": "f2f5cdb5554d294a29ebf465101c5607fd56e244",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "22/07/13 11:15 AM",
      "commitNameOld": "c1314eb2a382bd9ce045a2fcc4a9e5c1fc368a24",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 80.24,
      "commitsBetweenForRepo": 499,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,24 @@\n   private void waitForAckedSeqno(long seqno) throws IOException {\n     if (DFSClient.LOG.isDebugEnabled()) {\n       DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n     }\n-    synchronized (dataQueue) {\n-      while (!closed) {\n-        checkClosed();\n-        if (lastAckedSeqno \u003e\u003d seqno) {\n-          break;\n-        }\n-        try {\n-          dataQueue.wait(1000); // when we receive an ack, we notify on dataQueue\n-        } catch (InterruptedException ie) {\n-          throw new InterruptedIOException(\n-            \"Interrupted while waiting for data to be acknowledged by pipeline\");\n+    try {\n+      synchronized (dataQueue) {\n+        while (!closed) {\n+          checkClosed();\n+          if (lastAckedSeqno \u003e\u003d seqno) {\n+            break;\n+          }\n+          try {\n+            dataQueue.wait(1000); // when we receive an ack, we notify on\n+                                  // dataQueue\n+          } catch (InterruptedException ie) {\n+            throw new InterruptedIOException(\n+                \"Interrupted while waiting for data to be acknowledged by pipeline\");\n+          }\n         }\n       }\n+      checkClosed();\n+    } catch (ClosedChannelException e) {\n     }\n-    checkClosed();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void waitForAckedSeqno(long seqno) throws IOException {\n    if (DFSClient.LOG.isDebugEnabled()) {\n      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n    }\n    try {\n      synchronized (dataQueue) {\n        while (!closed) {\n          checkClosed();\n          if (lastAckedSeqno \u003e\u003d seqno) {\n            break;\n          }\n          try {\n            dataQueue.wait(1000); // when we receive an ack, we notify on\n                                  // dataQueue\n          } catch (InterruptedException ie) {\n            throw new InterruptedIOException(\n                \"Interrupted while waiting for data to be acknowledged by pipeline\");\n          }\n        }\n      }\n      checkClosed();\n    } catch (ClosedChannelException e) {\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "1c309f763be3dd2e3d7d1616d2c960ff80cf9b03": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4906. HDFS Output streams should not accept writes after being closed. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 2:05 PM",
      "commitName": "1c309f763be3dd2e3d7d1616d2c960ff80cf9b03",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "23/05/13 2:35 PM",
      "commitNameOld": "2ad7397c49844b5c12e122779c8760f51fa3a998",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 25.98,
      "commitsBetweenForRepo": 200,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private void waitForAckedSeqno(long seqno) throws IOException {\n     if (DFSClient.LOG.isDebugEnabled()) {\n       DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n     }\n     synchronized (dataQueue) {\n       while (!closed) {\n-        isClosed();\n+        checkClosed();\n         if (lastAckedSeqno \u003e\u003d seqno) {\n           break;\n         }\n         try {\n           dataQueue.wait(1000); // when we receive an ack, we notify on dataQueue\n         } catch (InterruptedException ie) {\n           throw new InterruptedIOException(\n             \"Interrupted while waiting for data to be acknowledged by pipeline\");\n         }\n       }\n     }\n-    isClosed();\n+    checkClosed();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void waitForAckedSeqno(long seqno) throws IOException {\n    if (DFSClient.LOG.isDebugEnabled()) {\n      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n    }\n    synchronized (dataQueue) {\n      while (!closed) {\n        checkClosed();\n        if (lastAckedSeqno \u003e\u003d seqno) {\n          break;\n        }\n        try {\n          dataQueue.wait(1000); // when we receive an ack, we notify on dataQueue\n        } catch (InterruptedException ie) {\n          throw new InterruptedIOException(\n            \"Interrupted while waiting for data to be acknowledged by pipeline\");\n        }\n      }\n    }\n    checkClosed();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void waitForAckedSeqno(long seqno) throws IOException {\n    if (DFSClient.LOG.isDebugEnabled()) {\n      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n    }\n    synchronized (dataQueue) {\n      while (!closed) {\n        isClosed();\n        if (lastAckedSeqno \u003e\u003d seqno) {\n          break;\n        }\n        try {\n          dataQueue.wait(1000); // when we receive an ack, we notify on dataQueue\n        } catch (InterruptedException ie) {\n          throw new InterruptedIOException(\n            \"Interrupted while waiting for data to be acknowledged by pipeline\");\n        }\n      }\n    }\n    isClosed();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void waitForAckedSeqno(long seqno) throws IOException {\n    if (DFSClient.LOG.isDebugEnabled()) {\n      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n    }\n    synchronized (dataQueue) {\n      while (!closed) {\n        isClosed();\n        if (lastAckedSeqno \u003e\u003d seqno) {\n          break;\n        }\n        try {\n          dataQueue.wait(1000); // when we receive an ack, we notify on dataQueue\n        } catch (InterruptedException ie) {\n          throw new InterruptedIOException(\n            \"Interrupted while waiting for data to be acknowledged by pipeline\");\n        }\n      }\n    }\n    isClosed();\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+  private void waitForAckedSeqno(long seqno) throws IOException {\n+    if (DFSClient.LOG.isDebugEnabled()) {\n+      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n+    }\n+    synchronized (dataQueue) {\n+      while (!closed) {\n+        isClosed();\n+        if (lastAckedSeqno \u003e\u003d seqno) {\n+          break;\n+        }\n+        try {\n+          dataQueue.wait(1000); // when we receive an ack, we notify on dataQueue\n+        } catch (InterruptedException ie) {\n+          throw new InterruptedIOException(\n+            \"Interrupted while waiting for data to be acknowledged by pipeline\");\n+        }\n+      }\n+    }\n+    isClosed();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void waitForAckedSeqno(long seqno) throws IOException {\n    if (DFSClient.LOG.isDebugEnabled()) {\n      DFSClient.LOG.debug(\"Waiting for ack for: \" + seqno);\n    }\n    synchronized (dataQueue) {\n      while (!closed) {\n        isClosed();\n        if (lastAckedSeqno \u003e\u003d seqno) {\n          break;\n        }\n        try {\n          dataQueue.wait(1000); // when we receive an ack, we notify on dataQueue\n        } catch (InterruptedException ie) {\n          throw new InterruptedIOException(\n            \"Interrupted while waiting for data to be acknowledged by pipeline\");\n        }\n      }\n    }\n    isClosed();\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSOutputStream.java"
    }
  }
}