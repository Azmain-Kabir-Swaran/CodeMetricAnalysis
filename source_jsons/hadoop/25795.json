{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMCommunicator.java",
  "functionName": "createSchedulerProxy",
  "functionId": "createSchedulerProxy",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
  "functionStartLine": 308,
  "functionEndLine": 316,
  "numCommitsSeen": 52,
  "timeTaken": 7998,
  "changeHistory": [
    "bf876f70fba1fbc61f4062255981684b992a56b6",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "e96077aaf4846a9c49c2012359b0e70aaba242e1",
    "aa60da6c2ec049cc70897afee6c368cb70493773",
    "32d511065a2612d37591f09e53eed8ec1488587d",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "66137cf17cb4abccd6065819d97edc63c6510477",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "bf876f70fba1fbc61f4062255981684b992a56b6": "Ybodychange",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": "Ymultichange(Yreturntypechange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "e96077aaf4846a9c49c2012359b0e70aaba242e1": "Ybodychange",
    "aa60da6c2ec049cc70897afee6c368cb70493773": "Ybodychange",
    "32d511065a2612d37591f09e53eed8ec1488587d": "Ybodychange",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "66137cf17cb4abccd6065819d97edc63c6510477": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf876f70fba1fbc61f4062255981684b992a56b6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5398. MR changes for YARN-513 (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503934 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 3:51 PM",
      "commitName": "bf876f70fba1fbc61f4062255981684b992a56b6",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "17/06/13 4:13 PM",
      "commitNameOld": "5d1b453b8591d87ffb564857015c26c99fb7437c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.98,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,9 @@\n   protected ApplicationMasterProtocol createSchedulerProxy() {\n     final Configuration conf \u003d getConfig();\n-    final YarnRPC rpc \u003d YarnRPC.create(conf);\n-    final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n-        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n-    UserGroupInformation currentUser;\n     try {\n-      currentUser \u003d UserGroupInformation.getCurrentUser();\n+      return ClientRMProxy.createRMProxy(conf, ApplicationMasterProtocol.class);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(e);\n     }\n-\n-    // CurrentUser should already have AMToken loaded.\n-    return currentUser.doAs(new PrivilegedAction\u003cApplicationMasterProtocol\u003e() {\n-      @Override\n-      public ApplicationMasterProtocol run() {\n-        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n-            serviceAddr, conf);\n-      }\n-    });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterProtocol createSchedulerProxy() {\n    final Configuration conf \u003d getConfig();\n\n    try {\n      return ClientRMProxy.createRMProxy(conf, ApplicationMasterProtocol.class);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 7:27 PM",
      "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/06/13 7:27 PM",
          "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "14/06/13 9:57 PM",
          "commitNameOld": "c2d0cf1b20489fada91c80d2da5c7fed757d6c27",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-  protected AMRMProtocol createSchedulerProxy() {\n+  protected ApplicationMasterProtocol createSchedulerProxy() {\n     final Configuration conf \u003d getConfig();\n     final YarnRPC rpc \u003d YarnRPC.create(conf);\n     final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       throw new YarnRuntimeException(e);\n     }\n \n     // CurrentUser should already have AMToken loaded.\n-    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n+    return currentUser.doAs(new PrivilegedAction\u003cApplicationMasterProtocol\u003e() {\n       @Override\n-      public AMRMProtocol run() {\n-        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+      public ApplicationMasterProtocol run() {\n+        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n             serviceAddr, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ApplicationMasterProtocol createSchedulerProxy() {\n    final Configuration conf \u003d getConfig();\n    final YarnRPC rpc \u003d YarnRPC.create(conf);\n    final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnRuntimeException(e);\n    }\n\n    // CurrentUser should already have AMToken loaded.\n    return currentUser.doAs(new PrivilegedAction\u003cApplicationMasterProtocol\u003e() {\n      @Override\n      public ApplicationMasterProtocol run() {\n        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n            serviceAddr, conf);\n      }\n    });\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {
            "oldValue": "AMRMProtocol",
            "newValue": "ApplicationMasterProtocol"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/06/13 7:27 PM",
          "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "14/06/13 9:57 PM",
          "commitNameOld": "c2d0cf1b20489fada91c80d2da5c7fed757d6c27",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-  protected AMRMProtocol createSchedulerProxy() {\n+  protected ApplicationMasterProtocol createSchedulerProxy() {\n     final Configuration conf \u003d getConfig();\n     final YarnRPC rpc \u003d YarnRPC.create(conf);\n     final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       throw new YarnRuntimeException(e);\n     }\n \n     // CurrentUser should already have AMToken loaded.\n-    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n+    return currentUser.doAs(new PrivilegedAction\u003cApplicationMasterProtocol\u003e() {\n       @Override\n-      public AMRMProtocol run() {\n-        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+      public ApplicationMasterProtocol run() {\n+        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n             serviceAddr, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ApplicationMasterProtocol createSchedulerProxy() {\n    final Configuration conf \u003d getConfig();\n    final YarnRPC rpc \u003d YarnRPC.create(conf);\n    final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnRuntimeException(e);\n    }\n\n    // CurrentUser should already have AMToken loaded.\n    return currentUser.doAs(new PrivilegedAction\u003cApplicationMasterProtocol\u003e() {\n      @Override\n      public ApplicationMasterProtocol run() {\n        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n            serviceAddr, conf);\n      }\n    });\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/04/13 7:50 PM",
      "commitNameOld": "e96077aaf4846a9c49c2012359b0e70aaba242e1",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 40.05,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   protected AMRMProtocol createSchedulerProxy() {\n     final Configuration conf \u003d getConfig();\n     final YarnRPC rpc \u003d YarnRPC.create(conf);\n     final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     }\n \n     // CurrentUser should already have AMToken loaded.\n     return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n       @Override\n       public AMRMProtocol run() {\n         return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n             serviceAddr, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final Configuration conf \u003d getConfig();\n    final YarnRPC rpc \u003d YarnRPC.create(conf);\n    final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnRuntimeException(e);\n    }\n\n    // CurrentUser should already have AMToken loaded.\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            serviceAddr, conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "e96077aaf4846a9c49c2012359b0e70aaba242e1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5181. RMCommunicator should not use AMToken from the env. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1471816 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/13 7:50 PM",
      "commitName": "e96077aaf4846a9c49c2012359b0e70aaba242e1",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "04/01/13 12:35 PM",
      "commitNameOld": "64e4fb983e022d8d3375a3e1b8facbf95f7ba403",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 110.26,
      "commitsBetweenForRepo": 570,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,24 @@\n   protected AMRMProtocol createSchedulerProxy() {\n     final Configuration conf \u003d getConfig();\n     final YarnRPC rpc \u003d YarnRPC.create(conf);\n     final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      String tokenURLEncodedStr \u003d System.getenv().get(\n-          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n-      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n-\n-      try {\n-        token.decodeFromUrlString(tokenURLEncodedStr);\n-      } catch (IOException e) {\n-        throw new YarnException(e);\n-      }\n-\n-      SecurityUtil.setTokenService(token, serviceAddr);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"AppMasterToken is \" + token);\n-      }\n-      currentUser.addToken(token);\n-    }\n-\n+    // CurrentUser should already have AMToken loaded.\n     return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n       @Override\n       public AMRMProtocol run() {\n         return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n             serviceAddr, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final Configuration conf \u003d getConfig();\n    final YarnRPC rpc \u003d YarnRPC.create(conf);\n    final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    // CurrentUser should already have AMToken loaded.\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            serviceAddr, conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "aa60da6c2ec049cc70897afee6c368cb70493773": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4162. Correctly set token service (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335567 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/12 8:07 AM",
      "commitName": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "18/04/12 11:46 AM",
      "commitNameOld": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 19.85,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   protected AMRMProtocol createSchedulerProxy() {\n     final Configuration conf \u003d getConfig();\n     final YarnRPC rpc \u003d YarnRPC.create(conf);\n     final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       String tokenURLEncodedStr \u003d System.getenv().get(\n           ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n-      }\n       Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n \n       try {\n         token.decodeFromUrlString(tokenURLEncodedStr);\n       } catch (IOException e) {\n         throw new YarnException(e);\n       }\n \n+      SecurityUtil.setTokenService(token, serviceAddr);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"AppMasterToken is \" + token);\n+      }\n       currentUser.addToken(token);\n     }\n \n     return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n       @Override\n       public AMRMProtocol run() {\n         return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n             serviceAddr, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final Configuration conf \u003d getConfig();\n    final YarnRPC rpc \u003d YarnRPC.create(conf);\n    final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String tokenURLEncodedStr \u003d System.getenv().get(\n          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n\n      try {\n        token.decodeFromUrlString(tokenURLEncodedStr);\n      } catch (IOException e) {\n        throw new YarnException(e);\n      }\n\n      SecurityUtil.setTokenService(token, serviceAddr);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"AppMasterToken is \" + token);\n      }\n      currentUser.addToken(token);\n    }\n\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            serviceAddr, conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "32d511065a2612d37591f09e53eed8ec1488587d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4161. create sockets consistently (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:46 AM",
      "commitName": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "06/03/12 3:21 PM",
      "commitNameOld": "c3a4de0ec0389064f5468180d1b9024f64b00f40",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 42.81,
      "commitsBetweenForRepo": 310,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   protected AMRMProtocol createSchedulerProxy() {\n-    final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n     final Configuration conf \u003d getConfig();\n-    final String serviceAddr \u003d conf.get(\n+    final YarnRPC rpc \u003d YarnRPC.create(conf);\n+    final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       String tokenURLEncodedStr \u003d System.getenv().get(\n           ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n       }\n       Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n \n       try {\n         token.decodeFromUrlString(tokenURLEncodedStr);\n       } catch (IOException e) {\n         throw new YarnException(e);\n       }\n \n       currentUser.addToken(token);\n     }\n \n     return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n       @Override\n       public AMRMProtocol run() {\n         return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n-            NetUtils.createSocketAddr(serviceAddr), conf);\n+            serviceAddr, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final Configuration conf \u003d getConfig();\n    final YarnRPC rpc \u003d YarnRPC.create(conf);\n    final InetSocketAddress serviceAddr \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String tokenURLEncodedStr \u003d System.getenv().get(\n          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n      }\n      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n\n      try {\n        token.decodeFromUrlString(tokenURLEncodedStr);\n      } catch (IOException e) {\n        throw new YarnException(e);\n      }\n\n      currentUser.addToken(token);\n    }\n\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            serviceAddr, conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "04/01/12 5:37 PM",
      "commitNameOld": "08f8abf5639d39167952dc5120b44fe35c63ff7a",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 32.85,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   protected AMRMProtocol createSchedulerProxy() {\n     final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n     final Configuration conf \u003d getConfig();\n     final String serviceAddr \u003d conf.get(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       String tokenURLEncodedStr \u003d System.getenv().get(\n           ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n-      LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n+      }\n       Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n \n       try {\n         token.decodeFromUrlString(tokenURLEncodedStr);\n       } catch (IOException e) {\n         throw new YarnException(e);\n       }\n \n       currentUser.addToken(token);\n     }\n \n     return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n       @Override\n       public AMRMProtocol run() {\n         return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n             NetUtils.createSocketAddr(serviceAddr), conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    final Configuration conf \u003d getConfig();\n    final String serviceAddr \u003d conf.get(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String tokenURLEncodedStr \u003d System.getenv().get(\n          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n      }\n      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n\n      try {\n        token.decodeFromUrlString(tokenURLEncodedStr);\n      } catch (IOException e) {\n        throw new YarnException(e);\n      }\n\n      currentUser.addToken(token);\n    }\n\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "66137cf17cb4abccd6065819d97edc63c6510477": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3013. Removed YarnConfiguration.YARN_SECURITY_INFO and its usage as it doesn\u0027t affect security any more. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:43 AM",
      "commitName": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/11 4:21 PM",
      "commitNameOld": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   protected AMRMProtocol createSchedulerProxy() {\n     final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-    final Configuration conf \u003d new Configuration(getConfig());\n+    final Configuration conf \u003d getConfig();\n     final String serviceAddr \u003d conf.get(\n         YarnConfiguration.RM_SCHEDULER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n-      conf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n-          SchedulerSecurityInfo.class, SecurityInfo.class);\n-\n       String tokenURLEncodedStr \u003d System.getenv().get(\n           ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n       LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n       Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n \n       try {\n         token.decodeFromUrlString(tokenURLEncodedStr);\n       } catch (IOException e) {\n         throw new YarnException(e);\n       }\n \n       currentUser.addToken(token);\n     }\n \n     return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n       @Override\n       public AMRMProtocol run() {\n         return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n             NetUtils.createSocketAddr(serviceAddr), conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    final Configuration conf \u003d getConfig();\n    final String serviceAddr \u003d conf.get(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String tokenURLEncodedStr \u003d System.getenv().get(\n          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n      LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n\n      try {\n        token.decodeFromUrlString(tokenURLEncodedStr);\n      } catch (IOException e) {\n        throw new YarnException(e);\n      }\n\n      currentUser.addToken(token);\n    }\n\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   protected AMRMProtocol createSchedulerProxy() {\n     final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n     final Configuration conf \u003d new Configuration(getConfig());\n     final String serviceAddr \u003d conf.get(\n-        YarnConfiguration.SCHEDULER_ADDRESS,\n-        YarnConfiguration.DEFAULT_SCHEDULER_BIND_ADDRESS);\n+        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n \n     UserGroupInformation currentUser;\n     try {\n       currentUser \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       conf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n           SchedulerSecurityInfo.class, SecurityInfo.class);\n \n       String tokenURLEncodedStr \u003d System.getenv().get(\n           ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n       LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n       Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n \n       try {\n         token.decodeFromUrlString(tokenURLEncodedStr);\n       } catch (IOException e) {\n         throw new YarnException(e);\n       }\n \n       currentUser.addToken(token);\n     }\n \n     return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n       @Override\n       public AMRMProtocol run() {\n         return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n             NetUtils.createSocketAddr(serviceAddr), conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    final Configuration conf \u003d new Configuration(getConfig());\n    final String serviceAddr \u003d conf.get(\n        YarnConfiguration.RM_SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      conf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n          SchedulerSecurityInfo.class, SecurityInfo.class);\n\n      String tokenURLEncodedStr \u003d System.getenv().get(\n          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n      LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n\n      try {\n        token.decodeFromUrlString(tokenURLEncodedStr);\n      } catch (IOException e) {\n        throw new YarnException(e);\n      }\n\n      currentUser.addToken(token);\n    }\n\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    final Configuration conf \u003d new Configuration(getConfig());\n    final String serviceAddr \u003d conf.get(\n        YarnConfiguration.SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_SCHEDULER_BIND_ADDRESS);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      conf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n          SchedulerSecurityInfo.class, SecurityInfo.class);\n\n      String tokenURLEncodedStr \u003d System.getenv().get(\n          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n      LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n\n      try {\n        token.decodeFromUrlString(tokenURLEncodedStr);\n      } catch (IOException e) {\n        throw new YarnException(e);\n      }\n\n      currentUser.addToken(token);\n    }\n\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,40 @@\n+  protected AMRMProtocol createSchedulerProxy() {\n+    final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+    final Configuration conf \u003d new Configuration(getConfig());\n+    final String serviceAddr \u003d conf.get(\n+        YarnConfiguration.SCHEDULER_ADDRESS,\n+        YarnConfiguration.DEFAULT_SCHEDULER_BIND_ADDRESS);\n+\n+    UserGroupInformation currentUser;\n+    try {\n+      currentUser \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException e) {\n+      throw new YarnException(e);\n+    }\n+\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      conf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n+          SchedulerSecurityInfo.class, SecurityInfo.class);\n+\n+      String tokenURLEncodedStr \u003d System.getenv().get(\n+          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n+      LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n+      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n+\n+      try {\n+        token.decodeFromUrlString(tokenURLEncodedStr);\n+      } catch (IOException e) {\n+        throw new YarnException(e);\n+      }\n+\n+      currentUser.addToken(token);\n+    }\n+\n+    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n+      @Override\n+      public AMRMProtocol run() {\n+        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+            NetUtils.createSocketAddr(serviceAddr), conf);\n+      }\n+    });\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMRMProtocol createSchedulerProxy() {\n    final YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    final Configuration conf \u003d new Configuration(getConfig());\n    final String serviceAddr \u003d conf.get(\n        YarnConfiguration.SCHEDULER_ADDRESS,\n        YarnConfiguration.DEFAULT_SCHEDULER_BIND_ADDRESS);\n\n    UserGroupInformation currentUser;\n    try {\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      conf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n          SchedulerSecurityInfo.class, SecurityInfo.class);\n\n      String tokenURLEncodedStr \u003d System.getenv().get(\n          ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);\n      LOG.debug(\"AppMasterToken is \" + tokenURLEncodedStr);\n      Token\u003c? extends TokenIdentifier\u003e token \u003d new Token\u003cTokenIdentifier\u003e();\n\n      try {\n        token.decodeFromUrlString(tokenURLEncodedStr);\n      } catch (IOException e) {\n        throw new YarnException(e);\n      }\n\n      currentUser.addToken(token);\n    }\n\n    return currentUser.doAs(new PrivilegedAction\u003cAMRMProtocol\u003e() {\n      @Override\n      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
    }
  }
}