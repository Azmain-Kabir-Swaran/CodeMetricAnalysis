{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "combineValue",
  "functionId": "combineValue___op-RLEOperator__resCalc-ResourceCalculator__clusterResource-Resource__eA-Entry__Long,Resource____eB-Entry__Long,Resource__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 433,
  "functionEndLine": 477,
  "numCommitsSeen": 11,
  "timeTaken": 1886,
  "changeHistory": [
    "e6e614e380ed1d746973b50f666a9c40d272073e",
    "da1016365aba1cee9c06771ab142d077379f27af"
  ],
  "changeHistoryShort": {
    "e6e614e380ed1d746973b50f666a9c40d272073e": "Ybodychange",
    "da1016365aba1cee9c06771ab142d077379f27af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e6e614e380ed1d746973b50f666a9c40d272073e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5329. Placement Agent enhancements required to support recurring reservations in ReservationSystem. (Carlo Curino via Subru).\n",
      "commitDate": "04/10/17 7:28 PM",
      "commitName": "e6e614e380ed1d746973b50f666a9c40d272073e",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "06/09/17 4:46 PM",
      "commitNameOld": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 28.11,
      "commitsBetweenForRepo": 262,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   private static Resource combineValue(RLEOperator op,\n       ResourceCalculator resCalc, Resource clusterResource,\n       Entry\u003cLong, Resource\u003e eA, Entry\u003cLong, Resource\u003e eB)\n       throws PlanningException {\n \n     // deal with nulls\n     if (eA \u003d\u003d null || eA.getValue() \u003d\u003d null) {\n       if (eB \u003d\u003d null || eB.getValue() \u003d\u003d null) {\n         return null;\n       }\n       if (op \u003d\u003d RLEOperator.subtract) {\n         return Resources.negate(eB.getValue());\n       } else {\n         return eB.getValue();\n       }\n     }\n     if (eB \u003d\u003d null || eB.getValue() \u003d\u003d null) {\n       return eA.getValue();\n     }\n \n     Resource a \u003d eA.getValue();\n     Resource b \u003d eB.getValue();\n     switch (op) {\n     case add:\n       return Resources.add(a, b);\n     case subtract:\n       return Resources.subtract(a, b);\n     case subtractTestNonNegative:\n       if (!Resources.fitsIn(b, a)) {\n         throw new PlanningException(\n             \"RLESparseResourceAllocation: merge failed as the \"\n-                + \"resulting RLESparseResourceAllocation would be negative\");\n+                + \"resulting RLESparseResourceAllocation would \"\n+                + \"be negative, when testing: (\" + eB + \") \u003e (\" + eA + \")\");\n       } else {\n         return Resources.subtract(a, b);\n       }\n     case min:\n       return Resources.min(resCalc, clusterResource, a, b);\n     case max:\n       return Resources.max(resCalc, clusterResource, a, b);\n     default:\n       return null;\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Resource combineValue(RLEOperator op,\n      ResourceCalculator resCalc, Resource clusterResource,\n      Entry\u003cLong, Resource\u003e eA, Entry\u003cLong, Resource\u003e eB)\n      throws PlanningException {\n\n    // deal with nulls\n    if (eA \u003d\u003d null || eA.getValue() \u003d\u003d null) {\n      if (eB \u003d\u003d null || eB.getValue() \u003d\u003d null) {\n        return null;\n      }\n      if (op \u003d\u003d RLEOperator.subtract) {\n        return Resources.negate(eB.getValue());\n      } else {\n        return eB.getValue();\n      }\n    }\n    if (eB \u003d\u003d null || eB.getValue() \u003d\u003d null) {\n      return eA.getValue();\n    }\n\n    Resource a \u003d eA.getValue();\n    Resource b \u003d eB.getValue();\n    switch (op) {\n    case add:\n      return Resources.add(a, b);\n    case subtract:\n      return Resources.subtract(a, b);\n    case subtractTestNonNegative:\n      if (!Resources.fitsIn(b, a)) {\n        throw new PlanningException(\n            \"RLESparseResourceAllocation: merge failed as the \"\n                + \"resulting RLESparseResourceAllocation would \"\n                + \"be negative, when testing: (\" + eB + \") \u003e (\" + eA + \")\");\n      } else {\n        return Resources.subtract(a, b);\n      }\n    case min:\n      return Resources.min(resCalc, clusterResource, a, b);\n    case max:\n      return Resources.max(resCalc, clusterResource, a, b);\n    default:\n      return null;\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
      "extendedDetails": {}
    },
    "da1016365aba1cee9c06771ab142d077379f27af": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3454. Add efficient merge operation to RLESparseResourceAllocation (Carlo Curino via asuresh)\n",
      "commitDate": "21/11/15 9:59 AM",
      "commitName": "da1016365aba1cee9c06771ab142d077379f27af",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,44 @@\n+  private static Resource combineValue(RLEOperator op,\n+      ResourceCalculator resCalc, Resource clusterResource,\n+      Entry\u003cLong, Resource\u003e eA, Entry\u003cLong, Resource\u003e eB)\n+      throws PlanningException {\n+\n+    // deal with nulls\n+    if (eA \u003d\u003d null || eA.getValue() \u003d\u003d null) {\n+      if (eB \u003d\u003d null || eB.getValue() \u003d\u003d null) {\n+        return null;\n+      }\n+      if (op \u003d\u003d RLEOperator.subtract) {\n+        return Resources.negate(eB.getValue());\n+      } else {\n+        return eB.getValue();\n+      }\n+    }\n+    if (eB \u003d\u003d null || eB.getValue() \u003d\u003d null) {\n+      return eA.getValue();\n+    }\n+\n+    Resource a \u003d eA.getValue();\n+    Resource b \u003d eB.getValue();\n+    switch (op) {\n+    case add:\n+      return Resources.add(a, b);\n+    case subtract:\n+      return Resources.subtract(a, b);\n+    case subtractTestNonNegative:\n+      if (!Resources.fitsIn(b, a)) {\n+        throw new PlanningException(\n+            \"RLESparseResourceAllocation: merge failed as the \"\n+                + \"resulting RLESparseResourceAllocation would be negative\");\n+      } else {\n+        return Resources.subtract(a, b);\n+      }\n+    case min:\n+      return Resources.min(resCalc, clusterResource, a, b);\n+    case max:\n+      return Resources.max(resCalc, clusterResource, a, b);\n+    default:\n+      return null;\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static Resource combineValue(RLEOperator op,\n      ResourceCalculator resCalc, Resource clusterResource,\n      Entry\u003cLong, Resource\u003e eA, Entry\u003cLong, Resource\u003e eB)\n      throws PlanningException {\n\n    // deal with nulls\n    if (eA \u003d\u003d null || eA.getValue() \u003d\u003d null) {\n      if (eB \u003d\u003d null || eB.getValue() \u003d\u003d null) {\n        return null;\n      }\n      if (op \u003d\u003d RLEOperator.subtract) {\n        return Resources.negate(eB.getValue());\n      } else {\n        return eB.getValue();\n      }\n    }\n    if (eB \u003d\u003d null || eB.getValue() \u003d\u003d null) {\n      return eA.getValue();\n    }\n\n    Resource a \u003d eA.getValue();\n    Resource b \u003d eB.getValue();\n    switch (op) {\n    case add:\n      return Resources.add(a, b);\n    case subtract:\n      return Resources.subtract(a, b);\n    case subtractTestNonNegative:\n      if (!Resources.fitsIn(b, a)) {\n        throw new PlanningException(\n            \"RLESparseResourceAllocation: merge failed as the \"\n                + \"resulting RLESparseResourceAllocation would be negative\");\n      } else {\n        return Resources.subtract(a, b);\n      }\n    case min:\n      return Resources.min(resCalc, clusterResource, a, b);\n    case max:\n      return Resources.max(resCalc, clusterResource, a, b);\n    default:\n      return null;\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}