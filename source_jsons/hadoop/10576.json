{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPServiceActor.java",
  "functionName": "scheduleBlockReport",
  "functionId": "scheduleBlockReport___delay-long__isRegistration-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
  "functionStartLine": 1227,
  "functionEndLine": 1239,
  "numCommitsSeen": 246,
  "timeTaken": 5244,
  "changeHistory": [
    "2059f255d39510cddbb954b21ed4871a737bd2dc",
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
    "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "1e346aa829519f8a2aa830e76d9856f914861805"
  ],
  "changeHistoryShort": {
    "2059f255d39510cddbb954b21ed4871a737bd2dc": "Ymultichange(Yparameterchange,Ybodychange)",
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080": "Ybodychange",
    "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd": "Ymultichange(Yreturntypechange,Ybodychange)",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "1e346aa829519f8a2aa830e76d9856f914861805": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2059f255d39510cddbb954b21ed4871a737bd2dc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-15167. Block Report Interval shouldn\u0027t be reset apart from first Block Report. Contributed by Ayush Saxena.\n",
      "commitDate": "27/02/20 12:38 AM",
      "commitName": "2059f255d39510cddbb954b21ed4871a737bd2dc",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-15167. Block Report Interval shouldn\u0027t be reset apart from first Block Report. Contributed by Ayush Saxena.\n",
          "commitDate": "27/02/20 12:38 AM",
          "commitName": "2059f255d39510cddbb954b21ed4871a737bd2dc",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "26/12/19 7:42 PM",
          "commitNameOld": "80f91d14ab0fb385252d4eeb19141bd059303d59",
          "commitAuthorOld": "Ayush Saxena",
          "daysBetweenCommits": 62.21,
          "commitsBetweenForRepo": 210,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,13 @@\n-    long scheduleBlockReport(long delay) {\n+    long scheduleBlockReport(long delay, boolean isRegistration) {\n       if (delay \u003e 0) { // send BR after random delay\n         // Numerical overflow is possible here and is okay.\n         nextBlockReportTime \u003d\n             monotonicNow() + ThreadLocalRandom.current().nextInt((int) (delay));\n       } else { // send at next heartbeat\n         nextBlockReportTime \u003d monotonicNow();\n       }\n-      resetBlockReportTime \u003d true; // reset future BRs for randomness\n+      resetBlockReportTime \u003d isRegistration; // reset future BRs for\n+      // randomness, post first block report to avoid regular BRs from all\n+      // DN\u0027s coming at one time.\n       return nextBlockReportTime;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    long scheduleBlockReport(long delay, boolean isRegistration) {\n      if (delay \u003e 0) { // send BR after random delay\n        // Numerical overflow is possible here and is okay.\n        nextBlockReportTime \u003d\n            monotonicNow() + ThreadLocalRandom.current().nextInt((int) (delay));\n      } else { // send at next heartbeat\n        nextBlockReportTime \u003d monotonicNow();\n      }\n      resetBlockReportTime \u003d isRegistration; // reset future BRs for\n      // randomness, post first block report to avoid regular BRs from all\n      // DN\u0027s coming at one time.\n      return nextBlockReportTime;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldValue": "[delay-long]",
            "newValue": "[delay-long, isRegistration-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-15167. Block Report Interval shouldn\u0027t be reset apart from first Block Report. Contributed by Ayush Saxena.\n",
          "commitDate": "27/02/20 12:38 AM",
          "commitName": "2059f255d39510cddbb954b21ed4871a737bd2dc",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "26/12/19 7:42 PM",
          "commitNameOld": "80f91d14ab0fb385252d4eeb19141bd059303d59",
          "commitAuthorOld": "Ayush Saxena",
          "daysBetweenCommits": 62.21,
          "commitsBetweenForRepo": 210,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,13 @@\n-    long scheduleBlockReport(long delay) {\n+    long scheduleBlockReport(long delay, boolean isRegistration) {\n       if (delay \u003e 0) { // send BR after random delay\n         // Numerical overflow is possible here and is okay.\n         nextBlockReportTime \u003d\n             monotonicNow() + ThreadLocalRandom.current().nextInt((int) (delay));\n       } else { // send at next heartbeat\n         nextBlockReportTime \u003d monotonicNow();\n       }\n-      resetBlockReportTime \u003d true; // reset future BRs for randomness\n+      resetBlockReportTime \u003d isRegistration; // reset future BRs for\n+      // randomness, post first block report to avoid regular BRs from all\n+      // DN\u0027s coming at one time.\n       return nextBlockReportTime;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    long scheduleBlockReport(long delay, boolean isRegistration) {\n      if (delay \u003e 0) { // send BR after random delay\n        // Numerical overflow is possible here and is okay.\n        nextBlockReportTime \u003d\n            monotonicNow() + ThreadLocalRandom.current().nextInt((int) (delay));\n      } else { // send at next heartbeat\n        nextBlockReportTime \u003d monotonicNow();\n      }\n      resetBlockReportTime \u003d isRegistration; // reset future BRs for\n      // randomness, post first block report to avoid regular BRs from all\n      // DN\u0027s coming at one time.\n      return nextBlockReportTime;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {}
        }
      ]
    },
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11970. Replace uses of ThreadLocal\u003cRandom\u003e with JDK7 ThreadLocalRandom (Sean Busbey via Colin P. McCabe)\n",
      "commitDate": "19/05/15 10:50 AM",
      "commitName": "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "21/04/15 10:58 AM",
      "commitNameOld": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 27.99,
      "commitsBetweenForRepo": 339,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n     long scheduleBlockReport(long delay) {\n       if (delay \u003e 0) { // send BR after random delay\n         // Numerical overflow is possible here and is okay.\n         nextBlockReportTime \u003d\n-            monotonicNow() + DFSUtil.getRandom().nextInt((int) (delay));\n+            monotonicNow() + ThreadLocalRandom.current().nextInt((int) (delay));\n       } else { // send at next heartbeat\n         nextBlockReportTime \u003d monotonicNow();\n       }\n       resetBlockReportTime \u003d true; // reset future BRs for randomness\n       return nextBlockReportTime;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    long scheduleBlockReport(long delay) {\n      if (delay \u003e 0) { // send BR after random delay\n        // Numerical overflow is possible here and is okay.\n        nextBlockReportTime \u003d\n            monotonicNow() + ThreadLocalRandom.current().nextInt((int) (delay));\n      } else { // send at next heartbeat\n        nextBlockReportTime \u003d monotonicNow();\n      }\n      resetBlockReportTime \u003d true; // reset future BRs for randomness\n      return nextBlockReportTime;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-8163. Using monotonicNow for block report scheduling causes test failures on recently restarted systems. (Arpit Agarwal)\n",
      "commitDate": "21/04/15 10:58 AM",
      "commitName": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8163. Using monotonicNow for block report scheduling causes test failures on recently restarted systems. (Arpit Agarwal)\n",
          "commitDate": "21/04/15 10:58 AM",
          "commitName": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/04/15 9:43 PM",
          "commitNameOld": "b1e059089d6a5b2b7006d7d384c6df81ed268bd9",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.55,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,11 @@\n-  void scheduleBlockReport(long delay) {\n-    if (delay \u003e 0) { // send BR after random delay\n-      lastBlockReport \u003d monotonicNow()\n-      - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));\n-    } else { // send at next heartbeat\n-      lastBlockReport \u003d lastHeartbeat - dnConf.blockReportInterval;\n-    }\n-    resetBlockReportTime \u003d true; // reset future BRs for randomness\n-  }\n\\ No newline at end of file\n+    long scheduleBlockReport(long delay) {\n+      if (delay \u003e 0) { // send BR after random delay\n+        // Numerical overflow is possible here and is okay.\n+        nextBlockReportTime \u003d\n+            monotonicNow() + DFSUtil.getRandom().nextInt((int) (delay));\n+      } else { // send at next heartbeat\n+        nextBlockReportTime \u003d monotonicNow();\n+      }\n+      resetBlockReportTime \u003d true; // reset future BRs for randomness\n+      return nextBlockReportTime;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    long scheduleBlockReport(long delay) {\n      if (delay \u003e 0) { // send BR after random delay\n        // Numerical overflow is possible here and is okay.\n        nextBlockReportTime \u003d\n            monotonicNow() + DFSUtil.getRandom().nextInt((int) (delay));\n      } else { // send at next heartbeat\n        nextBlockReportTime \u003d monotonicNow();\n      }\n      resetBlockReportTime \u003d true; // reset future BRs for randomness\n      return nextBlockReportTime;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "long"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8163. Using monotonicNow for block report scheduling causes test failures on recently restarted systems. (Arpit Agarwal)\n",
          "commitDate": "21/04/15 10:58 AM",
          "commitName": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/04/15 9:43 PM",
          "commitNameOld": "b1e059089d6a5b2b7006d7d384c6df81ed268bd9",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.55,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,11 @@\n-  void scheduleBlockReport(long delay) {\n-    if (delay \u003e 0) { // send BR after random delay\n-      lastBlockReport \u003d monotonicNow()\n-      - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));\n-    } else { // send at next heartbeat\n-      lastBlockReport \u003d lastHeartbeat - dnConf.blockReportInterval;\n-    }\n-    resetBlockReportTime \u003d true; // reset future BRs for randomness\n-  }\n\\ No newline at end of file\n+    long scheduleBlockReport(long delay) {\n+      if (delay \u003e 0) { // send BR after random delay\n+        // Numerical overflow is possible here and is okay.\n+        nextBlockReportTime \u003d\n+            monotonicNow() + DFSUtil.getRandom().nextInt((int) (delay));\n+      } else { // send at next heartbeat\n+        nextBlockReportTime \u003d monotonicNow();\n+      }\n+      resetBlockReportTime \u003d true; // reset future BRs for randomness\n+      return nextBlockReportTime;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    long scheduleBlockReport(long delay) {\n      if (delay \u003e 0) { // send BR after random delay\n        // Numerical overflow is possible here and is okay.\n        nextBlockReportTime \u003d\n            monotonicNow() + DFSUtil.getRandom().nextInt((int) (delay));\n      } else { // send at next heartbeat\n        nextBlockReportTime \u003d monotonicNow();\n      }\n      resetBlockReportTime \u003d true; // reset future BRs for randomness\n      return nextBlockReportTime;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {}
        }
      ]
    },
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
      "commitDate": "20/03/15 12:02 PM",
      "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "13/03/15 12:23 PM",
      "commitNameOld": "d324164a51a43d72c02567248bd9f0f12b244a40",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n   void scheduleBlockReport(long delay) {\n     if (delay \u003e 0) { // send BR after random delay\n-      lastBlockReport \u003d Time.now()\n+      lastBlockReport \u003d monotonicNow()\n       - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));\n     } else { // send at next heartbeat\n       lastBlockReport \u003d lastHeartbeat - dnConf.blockReportInterval;\n     }\n     resetBlockReportTime \u003d true; // reset future BRs for randomness\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void scheduleBlockReport(long delay) {\n    if (delay \u003e 0) { // send BR after random delay\n      lastBlockReport \u003d monotonicNow()\n      - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));\n    } else { // send at next heartbeat\n      lastBlockReport \u003d lastHeartbeat - dnConf.blockReportInterval;\n    }\n    resetBlockReportTime \u003d true; // reset future BRs for randomness\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "03/05/12 12:05 PM",
      "commitNameOld": "9aae7c22acfcc7b337cf06149864319d2cc877f8",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 70.0,
      "commitsBetweenForRepo": 359,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n   void scheduleBlockReport(long delay) {\n     if (delay \u003e 0) { // send BR after random delay\n-      lastBlockReport \u003d System.currentTimeMillis()\n+      lastBlockReport \u003d Time.now()\n       - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));\n     } else { // send at next heartbeat\n       lastBlockReport \u003d lastHeartbeat - dnConf.blockReportInterval;\n     }\n     resetBlockReportTime \u003d true; // reset future BRs for randomness\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void scheduleBlockReport(long delay) {\n    if (delay \u003e 0) { // send BR after random delay\n      lastBlockReport \u003d Time.now()\n      - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));\n    } else { // send at next heartbeat\n      lastBlockReport \u003d lastHeartbeat - dnConf.blockReportInterval;\n    }\n    resetBlockReportTime \u003d true; // reset future BRs for randomness\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "1e346aa829519f8a2aa830e76d9856f914861805": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/11 5:10 PM",
      "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,9 @@\n+  void scheduleBlockReport(long delay) {\n+    if (delay \u003e 0) { // send BR after random delay\n+      lastBlockReport \u003d System.currentTimeMillis()\n+      - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));\n+    } else { // send at next heartbeat\n+      lastBlockReport \u003d lastHeartbeat - dnConf.blockReportInterval;\n+    }\n+    resetBlockReportTime \u003d true; // reset future BRs for randomness\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void scheduleBlockReport(long delay) {\n    if (delay \u003e 0) { // send BR after random delay\n      lastBlockReport \u003d System.currentTimeMillis()\n      - ( dnConf.blockReportInterval - DFSUtil.getRandom().nextInt((int)(delay)));\n    } else { // send at next heartbeat\n      lastBlockReport \u003d lastHeartbeat - dnConf.blockReportInterval;\n    }\n    resetBlockReportTime \u003d true; // reset future BRs for randomness\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java"
    }
  }
}