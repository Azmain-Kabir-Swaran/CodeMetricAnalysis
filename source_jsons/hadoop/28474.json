{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
  "functionStartLine": 57,
  "functionEndLine": 129,
  "numCommitsSeen": 10,
  "timeTaken": 3305,
  "changeHistory": [
    "ba56bc24f5ede7ee52f98c0a0f7f2226da8039c0",
    "722ee841948db1f246f0056acec9a1ac464fe1f9",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "85f6d67fa78511f255fcfa810afc9a156a7b483b",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38",
    "8314674947ec087899d2515ae6b668c6c39cabbd",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "ba56bc24f5ede7ee52f98c0a0f7f2226da8039c0": "Ybodychange",
    "722ee841948db1f246f0056acec9a1ac464fe1f9": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "85f6d67fa78511f255fcfa810afc9a156a7b483b": "Ybodychange",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": "Ybodychange",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Ybodychange",
    "8314674947ec087899d2515ae6b668c6c39cabbd": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba56bc24f5ede7ee52f98c0a0f7f2226da8039c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9213. RM Web UI v1 does not show custom resource allocations for containers page. Contributed by Szilard Nemeth.\n",
      "commitDate": "17/02/19 6:38 AM",
      "commitName": "ba56bc24f5ede7ee52f98c0a0f7f2226da8039c0",
      "commitAuthor": "Sunil G",
      "commitDateOld": "03/10/17 2:06 PM",
      "commitNameOld": "4a877737182808fe3392a116762ba59973a477a6",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 501.73,
      "commitsBetweenForRepo": 4301,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,73 @@\n   protected void render(Block html) {\n     String containerid \u003d $(CONTAINER_ID);\n     if (containerid.isEmpty()) {\n       puts(\"Bad request: requires container ID\");\n       return;\n     }\n \n     ContainerId containerId \u003d null;\n     try {\n       containerId \u003d ContainerId.fromString(containerid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid container ID: \" + containerid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ContainerReport containerReport \u003d null;\n     try {\n       final GetContainerReportRequest request \u003d\n           GetContainerReportRequest.newInstance(containerId);\n       if (callerUGI \u003d\u003d null) {\n         containerReport \u003d getContainerReport(request);\n       } else {\n         containerReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n             return getContainerReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the container \" + containerid + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (containerReport \u003d\u003d null) {\n       puts(\"Container not found: \" + containerid);\n       return;\n     }\n \n     ContainerInfo container \u003d new ContainerInfo(containerReport);\n     setTitle(join(\"Container \", containerid));\n \n     info(\"Container Overview\")\n       .__(\n         \"Container State:\",\n         container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n           .getContainerState())\n       .__(\"Exit Status:\", container.getContainerExitStatus())\n       .__(\n         \"Node:\",\n         container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n           .getNodeHttpAddress(),\n         container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n           .getNodeHttpAddress())\n       .__(\"Priority:\", container.getPriority())\n       .__(\"Started:\", Times.format(container.getStartedTime()))\n       .__(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n           container.getFinishedTime())))\n       .__(\n-        \"Resource:\",\n-        container.getAllocatedMB() + \" Memory, \"\n-            + container.getAllocatedVCores() + \" VCores\")\n+        \"Resource:\", getResources(container))\n       .__(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n           container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n       .__(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : container.getDiagnosticsInfo());\n \n     html.__(InfoBlock.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ContainerId.fromString(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ContainerReport containerReport \u003d null;\n    try {\n      final GetContainerReportRequest request \u003d\n          GetContainerReportRequest.newInstance(containerId);\n      if (callerUGI \u003d\u003d null) {\n        containerReport \u003d getContainerReport(request);\n      } else {\n        containerReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return getContainerReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      .__(\n        \"Container State:\",\n        container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n          .getContainerState())\n      .__(\"Exit Status:\", container.getContainerExitStatus())\n      .__(\n        \"Node:\",\n        container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n          .getNodeHttpAddress(),\n        container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n          .getNodeHttpAddress())\n      .__(\"Priority:\", container.getPriority())\n      .__(\"Started:\", Times.format(container.getStartedTime()))\n      .__(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      .__(\n        \"Resource:\", getResources(container))\n      .__(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n      .__(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : container.getDiagnosticsInfo());\n\n    html.__(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
      "extendedDetails": {}
    },
    "722ee841948db1f246f0056acec9a1ac464fe1f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7163. RMContext need not to be injected to webapp and other Always Running services. Contributed by Rohith Sharma K S.\n",
      "commitDate": "10/09/17 9:58 PM",
      "commitName": "722ee841948db1f246f0056acec9a1ac464fe1f9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 45.2,
      "commitsBetweenForRepo": 399,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,75 @@\n   protected void render(Block html) {\n     String containerid \u003d $(CONTAINER_ID);\n     if (containerid.isEmpty()) {\n       puts(\"Bad request: requires container ID\");\n       return;\n     }\n \n     ContainerId containerId \u003d null;\n     try {\n       containerId \u003d ContainerId.fromString(containerid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid container ID: \" + containerid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ContainerReport containerReport \u003d null;\n     try {\n       final GetContainerReportRequest request \u003d\n           GetContainerReportRequest.newInstance(containerId);\n       if (callerUGI \u003d\u003d null) {\n-        containerReport \u003d appBaseProt.getContainerReport(request)\n-            .getContainerReport();\n+        containerReport \u003d getContainerReport(request);\n       } else {\n         containerReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n-            return appBaseProt.getContainerReport(request)\n-                .getContainerReport();\n+            return getContainerReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the container \" + containerid + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (containerReport \u003d\u003d null) {\n       puts(\"Container not found: \" + containerid);\n       return;\n     }\n \n     ContainerInfo container \u003d new ContainerInfo(containerReport);\n     setTitle(join(\"Container \", containerid));\n \n     info(\"Container Overview\")\n       .__(\n         \"Container State:\",\n         container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n           .getContainerState())\n       .__(\"Exit Status:\", container.getContainerExitStatus())\n       .__(\n         \"Node:\",\n         container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n           .getNodeHttpAddress(),\n         container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n           .getNodeHttpAddress())\n       .__(\"Priority:\", container.getPriority())\n       .__(\"Started:\", Times.format(container.getStartedTime()))\n       .__(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n           container.getFinishedTime())))\n       .__(\n         \"Resource:\",\n         container.getAllocatedMB() + \" Memory, \"\n             + container.getAllocatedVCores() + \" VCores\")\n       .__(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n           container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n       .__(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : container.getDiagnosticsInfo());\n \n     html.__(InfoBlock.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ContainerId.fromString(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ContainerReport containerReport \u003d null;\n    try {\n      final GetContainerReportRequest request \u003d\n          GetContainerReportRequest.newInstance(containerId);\n      if (callerUGI \u003d\u003d null) {\n        containerReport \u003d getContainerReport(request);\n      } else {\n        containerReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return getContainerReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      .__(\n        \"Container State:\",\n        container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n          .getContainerState())\n      .__(\"Exit Status:\", container.getContainerExitStatus())\n      .__(\n        \"Node:\",\n        container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n          .getNodeHttpAddress(),\n        container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n          .getNodeHttpAddress())\n      .__(\"Priority:\", container.getPriority())\n      .__(\"Started:\", Times.format(container.getStartedTime()))\n      .__(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      .__(\n        \"Resource:\",\n        container.getAllocatedMB() + \" Memory, \"\n            + container.getAllocatedVCores() + \" VCores\")\n      .__(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n      .__(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : container.getDiagnosticsInfo());\n\n    html.__(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 408.09,
      "commitsBetweenForRepo": 2572,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n   protected void render(Block html) {\n     String containerid \u003d $(CONTAINER_ID);\n     if (containerid.isEmpty()) {\n       puts(\"Bad request: requires container ID\");\n       return;\n     }\n \n     ContainerId containerId \u003d null;\n     try {\n       containerId \u003d ContainerId.fromString(containerid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid container ID: \" + containerid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ContainerReport containerReport \u003d null;\n     try {\n       final GetContainerReportRequest request \u003d\n           GetContainerReportRequest.newInstance(containerId);\n       if (callerUGI \u003d\u003d null) {\n         containerReport \u003d appBaseProt.getContainerReport(request)\n             .getContainerReport();\n       } else {\n         containerReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n             return appBaseProt.getContainerReport(request)\n                 .getContainerReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the container \" + containerid + \".\";\n       LOG.error(message, e);\n-      html.p()._(message)._();\n+      html.p().__(message).__();\n       return;\n     }\n \n     if (containerReport \u003d\u003d null) {\n       puts(\"Container not found: \" + containerid);\n       return;\n     }\n \n     ContainerInfo container \u003d new ContainerInfo(containerReport);\n     setTitle(join(\"Container \", containerid));\n \n     info(\"Container Overview\")\n-      ._(\n+      .__(\n         \"Container State:\",\n         container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n           .getContainerState())\n-      ._(\"Exit Status:\", container.getContainerExitStatus())\n-      ._(\n+      .__(\"Exit Status:\", container.getContainerExitStatus())\n+      .__(\n         \"Node:\",\n         container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n           .getNodeHttpAddress(),\n         container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n           .getNodeHttpAddress())\n-      ._(\"Priority:\", container.getPriority())\n-      ._(\"Started:\", Times.format(container.getStartedTime()))\n-      ._(\n+      .__(\"Priority:\", container.getPriority())\n+      .__(\"Started:\", Times.format(container.getStartedTime()))\n+      .__(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n           container.getFinishedTime())))\n-      ._(\n+      .__(\n         \"Resource:\",\n         container.getAllocatedMB() + \" Memory, \"\n             + container.getAllocatedVCores() + \" VCores\")\n-      ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n+      .__(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n           container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n-      ._(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n+      .__(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : container.getDiagnosticsInfo());\n \n-    html._(InfoBlock.class);\n+    html.__(InfoBlock.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ContainerId.fromString(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ContainerReport containerReport \u003d null;\n    try {\n      final GetContainerReportRequest request \u003d\n          GetContainerReportRequest.newInstance(containerId);\n      if (callerUGI \u003d\u003d null) {\n        containerReport \u003d appBaseProt.getContainerReport(request)\n            .getContainerReport();\n      } else {\n        containerReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return appBaseProt.getContainerReport(request)\n                .getContainerReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      .__(\n        \"Container State:\",\n        container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n          .getContainerState())\n      .__(\"Exit Status:\", container.getContainerExitStatus())\n      .__(\n        \"Node:\",\n        container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n          .getNodeHttpAddress(),\n        container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n          .getNodeHttpAddress())\n      .__(\"Priority:\", container.getPriority())\n      .__(\"Started:\", Times.format(container.getStartedTime()))\n      .__(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      .__(\n        \"Resource:\",\n        container.getAllocatedMB() + \" Memory, \"\n            + container.getAllocatedVCores() + \" VCores\")\n      .__(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n      .__(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : container.getDiagnosticsInfo());\n\n    html.__(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/03/15 7:35 PM",
      "commitNameOld": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 460.81,
      "commitsBetweenForRepo": 3448,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n   protected void render(Block html) {\n     String containerid \u003d $(CONTAINER_ID);\n     if (containerid.isEmpty()) {\n       puts(\"Bad request: requires container ID\");\n       return;\n     }\n \n     ContainerId containerId \u003d null;\n     try {\n-      containerId \u003d ConverterUtils.toContainerId(containerid);\n+      containerId \u003d ContainerId.fromString(containerid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid container ID: \" + containerid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ContainerReport containerReport \u003d null;\n     try {\n       final GetContainerReportRequest request \u003d\n           GetContainerReportRequest.newInstance(containerId);\n       if (callerUGI \u003d\u003d null) {\n         containerReport \u003d appBaseProt.getContainerReport(request)\n             .getContainerReport();\n       } else {\n         containerReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n             return appBaseProt.getContainerReport(request)\n                 .getContainerReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the container \" + containerid + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (containerReport \u003d\u003d null) {\n       puts(\"Container not found: \" + containerid);\n       return;\n     }\n \n     ContainerInfo container \u003d new ContainerInfo(containerReport);\n     setTitle(join(\"Container \", containerid));\n \n     info(\"Container Overview\")\n       ._(\n         \"Container State:\",\n         container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n           .getContainerState())\n       ._(\"Exit Status:\", container.getContainerExitStatus())\n       ._(\n         \"Node:\",\n         container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n           .getNodeHttpAddress(),\n         container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n           .getNodeHttpAddress())\n       ._(\"Priority:\", container.getPriority())\n       ._(\"Started:\", Times.format(container.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n           container.getFinishedTime())))\n       ._(\n         \"Resource:\",\n         container.getAllocatedMB() + \" Memory, \"\n             + container.getAllocatedVCores() + \" VCores\")\n       ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n           container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n       ._(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : container.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ContainerId.fromString(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ContainerReport containerReport \u003d null;\n    try {\n      final GetContainerReportRequest request \u003d\n          GetContainerReportRequest.newInstance(containerId);\n      if (callerUGI \u003d\u003d null) {\n        containerReport \u003d appBaseProt.getContainerReport(request)\n            .getContainerReport();\n      } else {\n        containerReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return appBaseProt.getContainerReport(request)\n                .getContainerReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      ._(\n        \"Container State:\",\n        container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n          .getContainerState())\n      ._(\"Exit Status:\", container.getContainerExitStatus())\n      ._(\n        \"Node:\",\n        container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n          .getNodeHttpAddress(),\n        container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n          .getNodeHttpAddress())\n      ._(\"Priority:\", container.getPriority())\n      ._(\"Started:\", Times.format(container.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      ._(\n        \"Resource:\",\n        container.getAllocatedMB() + \" Memory, \"\n            + container.getAllocatedVCores() + \" VCores\")\n      ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n      ._(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : container.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
      "extendedDetails": {}
    },
    "85f6d67fa78511f255fcfa810afc9a156a7b483b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1884. Added nodeHttpAddress into ContainerReport and fixed the link to NM web page. Contributed by Xuan Gong.\n",
      "commitDate": "11/03/15 7:35 PM",
      "commitName": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "05/03/15 9:20 PM",
      "commitNameOld": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 5.89,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,77 @@\n   protected void render(Block html) {\n     String containerid \u003d $(CONTAINER_ID);\n     if (containerid.isEmpty()) {\n       puts(\"Bad request: requires container ID\");\n       return;\n     }\n \n     ContainerId containerId \u003d null;\n     try {\n       containerId \u003d ConverterUtils.toContainerId(containerid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid container ID: \" + containerid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ContainerReport containerReport \u003d null;\n     try {\n       final GetContainerReportRequest request \u003d\n           GetContainerReportRequest.newInstance(containerId);\n       if (callerUGI \u003d\u003d null) {\n         containerReport \u003d appBaseProt.getContainerReport(request)\n             .getContainerReport();\n       } else {\n         containerReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n             return appBaseProt.getContainerReport(request)\n                 .getContainerReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the container \" + containerid + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (containerReport \u003d\u003d null) {\n       puts(\"Container not found: \" + containerid);\n       return;\n     }\n \n     ContainerInfo container \u003d new ContainerInfo(containerReport);\n     setTitle(join(\"Container \", containerid));\n \n     info(\"Container Overview\")\n       ._(\n         \"Container State:\",\n         container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n           .getContainerState())\n       ._(\"Exit Status:\", container.getContainerExitStatus())\n-      ._(\"Node:\", container.getAssignedNodeId())\n+      ._(\n+        \"Node:\",\n+        container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n+          .getNodeHttpAddress(),\n+        container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n+          .getNodeHttpAddress())\n       ._(\"Priority:\", container.getPriority())\n       ._(\"Started:\", Times.format(container.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n           container.getFinishedTime())))\n       ._(\n         \"Resource:\",\n         container.getAllocatedMB() + \" Memory, \"\n             + container.getAllocatedVCores() + \" VCores\")\n       ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n           container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n       ._(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n           \"\" : container.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ConverterUtils.toContainerId(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ContainerReport containerReport \u003d null;\n    try {\n      final GetContainerReportRequest request \u003d\n          GetContainerReportRequest.newInstance(containerId);\n      if (callerUGI \u003d\u003d null) {\n        containerReport \u003d appBaseProt.getContainerReport(request)\n            .getContainerReport();\n      } else {\n        containerReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return appBaseProt.getContainerReport(request)\n                .getContainerReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      ._(\n        \"Container State:\",\n        container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n          .getContainerState())\n      ._(\"Exit Status:\", container.getContainerExitStatus())\n      ._(\n        \"Node:\",\n        container.getNodeHttpAddress() \u003d\u003d null ? \"#\" : container\n          .getNodeHttpAddress(),\n        container.getNodeHttpAddress() \u003d\u003d null ? \"N/A\" : container\n          .getNodeHttpAddress())\n      ._(\"Priority:\", container.getPriority())\n      ._(\"Started:\", Times.format(container.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      ._(\n        \"Resource:\",\n        container.getAllocatedMB() + \" Memory, \"\n            + container.getAllocatedVCores() + \" VCores\")\n      ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n      ._(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : container.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
      "extendedDetails": {}
    },
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1809. Synchronize RM and TimeLineServer Web-UIs. Contributed by Zhijie Shen and Xuan Gong\n",
      "commitDate": "05/03/15 9:20 PM",
      "commitName": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/09/14 7:04 PM",
      "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthorOld": "junping_du",
      "daysBetweenCommits": 175.14,
      "commitsBetweenForRepo": 1474,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,72 @@\n   protected void render(Block html) {\n     String containerid \u003d $(CONTAINER_ID);\n     if (containerid.isEmpty()) {\n       puts(\"Bad request: requires container ID\");\n       return;\n     }\n \n     ContainerId containerId \u003d null;\n     try {\n       containerId \u003d ConverterUtils.toContainerId(containerid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid container ID: \" + containerid);\n       return;\n     }\n \n-    final ContainerId containerIdFinal \u003d containerId;\n     UserGroupInformation callerUGI \u003d getCallerUGI();\n-    ContainerReport containerReport;\n+    ContainerReport containerReport \u003d null;\n     try {\n+      final GetContainerReportRequest request \u003d\n+          GetContainerReportRequest.newInstance(containerId);\n       if (callerUGI \u003d\u003d null) {\n-        containerReport \u003d appContext.getContainer(containerId);\n+        containerReport \u003d appBaseProt.getContainerReport(request)\n+            .getContainerReport();\n       } else {\n         containerReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n           @Override\n           public ContainerReport run() throws Exception {\n-            return appContext.getContainer(containerIdFinal);\n+            return appBaseProt.getContainerReport(request)\n+                .getContainerReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the container \" + containerid + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n+\n     if (containerReport \u003d\u003d null) {\n       puts(\"Container not found: \" + containerid);\n       return;\n     }\n \n     ContainerInfo container \u003d new ContainerInfo(containerReport);\n     setTitle(join(\"Container \", containerid));\n \n     info(\"Container Overview\")\n-      ._(\"State:\", container.getContainerState())\n+      ._(\n+        \"Container State:\",\n+        container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n+          .getContainerState())\n       ._(\"Exit Status:\", container.getContainerExitStatus())\n       ._(\"Node:\", container.getAssignedNodeId())\n       ._(\"Priority:\", container.getPriority())\n       ._(\"Started:\", Times.format(container.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n           container.getFinishedTime())))\n       ._(\n         \"Resource:\",\n         container.getAllocatedMB() + \" Memory, \"\n             + container.getAllocatedVCores() + \" VCores\")\n       ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n           container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n-      ._(\"Diagnostics:\", container.getDiagnosticsInfo());\n+      ._(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n+          \"\" : container.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ConverterUtils.toContainerId(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ContainerReport containerReport \u003d null;\n    try {\n      final GetContainerReportRequest request \u003d\n          GetContainerReportRequest.newInstance(containerId);\n      if (callerUGI \u003d\u003d null) {\n        containerReport \u003d appBaseProt.getContainerReport(request)\n            .getContainerReport();\n      } else {\n        containerReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return appBaseProt.getContainerReport(request)\n                .getContainerReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      ._(\n        \"Container State:\",\n        container.getContainerState() \u003d\u003d null ? UNAVAILABLE : container\n          .getContainerState())\n      ._(\"Exit Status:\", container.getContainerExitStatus())\n      ._(\"Node:\", container.getAssignedNodeId())\n      ._(\"Priority:\", container.getPriority())\n      ._(\"Started:\", Times.format(container.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      ._(\n        \"Resource:\",\n        container.getAllocatedMB() + \" Memory, \"\n            + container.getAllocatedVCores() + \" VCores\")\n      ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n      ._(\"Diagnostics:\", container.getDiagnosticsInfo() \u003d\u003d null ?\n          \"\" : container.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
      "extendedDetails": {}
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "commitDateOld": "17/03/14 2:36 PM",
      "commitNameOld": "8314674947ec087899d2515ae6b668c6c39cabbd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 178.19,
      "commitsBetweenForRepo": 1264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,64 @@\n   protected void render(Block html) {\n     String containerid \u003d $(CONTAINER_ID);\n     if (containerid.isEmpty()) {\n       puts(\"Bad request: requires container ID\");\n       return;\n     }\n \n     ContainerId containerId \u003d null;\n     try {\n       containerId \u003d ConverterUtils.toContainerId(containerid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid container ID: \" + containerid);\n       return;\n     }\n \n+    final ContainerId containerIdFinal \u003d containerId;\n+    UserGroupInformation callerUGI \u003d getCallerUGI();\n     ContainerReport containerReport;\n     try {\n-      containerReport \u003d appContext.getContainer(containerId);\n-    } catch (IOException e) {\n+      if (callerUGI \u003d\u003d null) {\n+        containerReport \u003d appContext.getContainer(containerId);\n+      } else {\n+        containerReport \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n+          @Override\n+          public ContainerReport run() throws Exception {\n+            return appContext.getContainer(containerIdFinal);\n+          }\n+        });\n+      }\n+    } catch (Exception e) {\n       String message \u003d \"Failed to read the container \" + containerid + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     if (containerReport \u003d\u003d null) {\n       puts(\"Container not found: \" + containerid);\n       return;\n     }\n \n     ContainerInfo container \u003d new ContainerInfo(containerReport);\n     setTitle(join(\"Container \", containerid));\n \n     info(\"Container Overview\")\n       ._(\"State:\", container.getContainerState())\n       ._(\"Exit Status:\", container.getContainerExitStatus())\n       ._(\"Node:\", container.getAssignedNodeId())\n       ._(\"Priority:\", container.getPriority())\n       ._(\"Started:\", Times.format(container.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n           container.getFinishedTime())))\n       ._(\n         \"Resource:\",\n         container.getAllocatedMB() + \" Memory, \"\n             + container.getAllocatedVCores() + \" VCores\")\n       ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n           container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n       ._(\"Diagnostics:\", container.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ConverterUtils.toContainerId(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    final ContainerId containerIdFinal \u003d containerId;\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ContainerReport containerReport;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        containerReport \u003d appContext.getContainer(containerId);\n      } else {\n        containerReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n          @Override\n          public ContainerReport run() throws Exception {\n            return appContext.getContainer(containerIdFinal);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      ._(\"State:\", container.getContainerState())\n      ._(\"Exit Status:\", container.getContainerExitStatus())\n      ._(\"Node:\", container.getAssignedNodeId())\n      ._(\"Priority:\", container.getPriority())\n      ._(\"Started:\", Times.format(container.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      ._(\n        \"Resource:\",\n        container.getAllocatedMB() + \" Memory, \"\n            + container.getAllocatedVCores() + \" VCores\")\n      ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n      ._(\"Diagnostics:\", container.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
      "extendedDetails": {}
    },
    "8314674947ec087899d2515ae6b668c6c39cabbd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1685. Fixed few bugs related to handling of containers\u0027 log-URLs on ResourceManager and history-service. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578602 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/14 2:36 PM",
      "commitName": "8314674947ec087899d2515ae6b668c6c39cabbd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 50.7,
      "commitsBetweenForRepo": 471,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,52 @@\n   protected void render(Block html) {\n     String containerid \u003d $(CONTAINER_ID);\n     if (containerid.isEmpty()) {\n       puts(\"Bad request: requires container ID\");\n       return;\n     }\n \n     ContainerId containerId \u003d null;\n     try {\n       containerId \u003d ConverterUtils.toContainerId(containerid);\n     } catch (IllegalArgumentException e) {\n       puts(\"Invalid container ID: \" + containerid);\n       return;\n     }\n \n     ContainerReport containerReport;\n     try {\n       containerReport \u003d appContext.getContainer(containerId);\n     } catch (IOException e) {\n       String message \u003d \"Failed to read the container \" + containerid + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     if (containerReport \u003d\u003d null) {\n       puts(\"Container not found: \" + containerid);\n       return;\n     }\n \n     ContainerInfo container \u003d new ContainerInfo(containerReport);\n-    String logURL \u003d containerReport.getLogUrl();\n-    logURL \u003d getPartUrl(logURL, \"log\");\n     setTitle(join(\"Container \", containerid));\n \n     info(\"Container Overview\")\n       ._(\"State:\", container.getContainerState())\n       ._(\"Exit Status:\", container.getContainerExitStatus())\n       ._(\"Node:\", container.getAssignedNodeId())\n       ._(\"Priority:\", container.getPriority())\n       ._(\"Started:\", Times.format(container.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n           container.getFinishedTime())))\n       ._(\n         \"Resource:\",\n         container.getAllocatedMB() + \" Memory, \"\n             + container.getAllocatedVCores() + \" VCores\")\n-      ._(\"Logs:\", logURL \u003d\u003d null ? \"#\" : url(logURL), \"Logs\")\n+      ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n+          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n       ._(\"Diagnostics:\", container.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ConverterUtils.toContainerId(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    ContainerReport containerReport;\n    try {\n      containerReport \u003d appContext.getContainer(containerId);\n    } catch (IOException e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      ._(\"State:\", container.getContainerState())\n      ._(\"Exit Status:\", container.getContainerExitStatus())\n      ._(\"Node:\", container.getAssignedNodeId())\n      ._(\"Priority:\", container.getPriority())\n      ._(\"Started:\", Times.format(container.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      ._(\n        \"Resource:\",\n        container.getAllocatedMB() + \" Memory, \"\n            + container.getAllocatedVCores() + \" VCores\")\n      ._(\"Logs:\", container.getLogUrl() \u003d\u003d null ? \"#\" : container.getLogUrl(),\n          container.getLogUrl() \u003d\u003d null ? \"N/A\" : \"Logs\")\n      ._(\"Diagnostics:\", container.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,53 @@\n+  protected void render(Block html) {\n+    String containerid \u003d $(CONTAINER_ID);\n+    if (containerid.isEmpty()) {\n+      puts(\"Bad request: requires container ID\");\n+      return;\n+    }\n+\n+    ContainerId containerId \u003d null;\n+    try {\n+      containerId \u003d ConverterUtils.toContainerId(containerid);\n+    } catch (IllegalArgumentException e) {\n+      puts(\"Invalid container ID: \" + containerid);\n+      return;\n+    }\n+\n+    ContainerReport containerReport;\n+    try {\n+      containerReport \u003d appContext.getContainer(containerId);\n+    } catch (IOException e) {\n+      String message \u003d \"Failed to read the container \" + containerid + \".\";\n+      LOG.error(message, e);\n+      html.p()._(message)._();\n+      return;\n+    }\n+    if (containerReport \u003d\u003d null) {\n+      puts(\"Container not found: \" + containerid);\n+      return;\n+    }\n+\n+    ContainerInfo container \u003d new ContainerInfo(containerReport);\n+    String logURL \u003d containerReport.getLogUrl();\n+    logURL \u003d getPartUrl(logURL, \"log\");\n+    setTitle(join(\"Container \", containerid));\n+\n+    info(\"Container Overview\")\n+      ._(\"State:\", container.getContainerState())\n+      ._(\"Exit Status:\", container.getContainerExitStatus())\n+      ._(\"Node:\", container.getAssignedNodeId())\n+      ._(\"Priority:\", container.getPriority())\n+      ._(\"Started:\", Times.format(container.getStartedTime()))\n+      ._(\n+        \"Elapsed:\",\n+        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n+          container.getFinishedTime())))\n+      ._(\n+        \"Resource:\",\n+        container.getAllocatedMB() + \" Memory, \"\n+            + container.getAllocatedVCores() + \" VCores\")\n+      ._(\"Logs:\", logURL \u003d\u003d null ? \"#\" : url(logURL), \"Logs\")\n+      ._(\"Diagnostics:\", container.getDiagnosticsInfo());\n+\n+    html._(InfoBlock.class);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String containerid \u003d $(CONTAINER_ID);\n    if (containerid.isEmpty()) {\n      puts(\"Bad request: requires container ID\");\n      return;\n    }\n\n    ContainerId containerId \u003d null;\n    try {\n      containerId \u003d ConverterUtils.toContainerId(containerid);\n    } catch (IllegalArgumentException e) {\n      puts(\"Invalid container ID: \" + containerid);\n      return;\n    }\n\n    ContainerReport containerReport;\n    try {\n      containerReport \u003d appContext.getContainer(containerId);\n    } catch (IOException e) {\n      String message \u003d \"Failed to read the container \" + containerid + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (containerReport \u003d\u003d null) {\n      puts(\"Container not found: \" + containerid);\n      return;\n    }\n\n    ContainerInfo container \u003d new ContainerInfo(containerReport);\n    String logURL \u003d containerReport.getLogUrl();\n    logURL \u003d getPartUrl(logURL, \"log\");\n    setTitle(join(\"Container \", containerid));\n\n    info(\"Container Overview\")\n      ._(\"State:\", container.getContainerState())\n      ._(\"Exit Status:\", container.getContainerExitStatus())\n      ._(\"Node:\", container.getAssignedNodeId())\n      ._(\"Priority:\", container.getPriority())\n      ._(\"Started:\", Times.format(container.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(container.getStartedTime(),\n          container.getFinishedTime())))\n      ._(\n        \"Resource:\",\n        container.getAllocatedMB() + \" Memory, \"\n            + container.getAllocatedVCores() + \" VCores\")\n      ._(\"Logs:\", logURL \u003d\u003d null ? \"#\" : url(logURL), \"Logs\")\n      ._(\"Diagnostics:\", container.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/ContainerBlock.java"
    }
  }
}