{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "renew",
  "functionId": "renew___token-Token__?____conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 189,
  "functionEndLine": 207,
  "numCommitsSeen": 133,
  "timeTaken": 4822,
  "changeHistory": [
    "5ec86b445cc492f52c33639efb6a09a0d2f27475",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
    "7ab08a9c37a76edbe02d556fcfb2e637f45afc21",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
    "47ca9e26fba4a639e43bee5bfc001ffc4b42330d",
    "713cb71820ad94a5436f35824d07aa12fcba5cc6"
  ],
  "changeHistoryShort": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": "Ybodychange",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": "Ymultichange(Ymovefromfile,Ybodychange)",
    "7ab08a9c37a76edbe02d556fcfb2e637f45afc21": "Ybodychange",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": "Ymultichange(Ymovefromfile,Ybodychange)",
    "47ca9e26fba4a639e43bee5bfc001ffc4b42330d": "Ybodychange",
    "713cb71820ad94a5436f35824d07aa12fcba5cc6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
      "commitDate": "12/10/18 9:35 AM",
      "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 1.49,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,19 @@\n     public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n       LOG.debug(\"Renewing delegation token {}\", token);\n-      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n-          KeyProviderFactory.KEY_PROVIDER_PATH);\n+      KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n       try {\n         if (!(keyProvider instanceof\n             KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n           throw new IOException(String\n               .format(\"keyProvider %s cannot renew token [%s]\",\n                   keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(),\n                   token));\n         }\n         return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n             keyProvider).renewDelegationToken(token);\n       } finally {\n         if (keyProvider !\u003d null) {\n           keyProvider.close();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n      LOG.debug(\"Renewing delegation token {}\", token);\n      KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n      try {\n        if (!(keyProvider instanceof\n            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n          throw new IOException(String\n              .format(\"keyProvider %s cannot renew token [%s]\",\n                  keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(),\n                  token));\n        }\n        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n            keyProvider).renewDelegationToken(token);\n      } finally {\n        if (keyProvider !\u003d null) {\n          keyProvider.close();\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
      "commitDate": "07/05/18 1:32 PM",
      "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
          "commitDate": "07/05/18 1:32 PM",
          "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "07/05/18 1:32 PM",
          "commitNameOld": "118bd7580583e31bf643b642a2fbc9556177b906",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n-    LOG.debug(\"Renewing delegation token {}\", token);\n-    final KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n-    try {\n-      if (!(keyProvider instanceof\n-          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n-        throw new IOException(String\n-            .format(\"keyProvider %s cannot renew token [%s]\",\n-                keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token));\n+    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n+      LOG.debug(\"Renewing delegation token {}\", token);\n+      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n+          KeyProviderFactory.KEY_PROVIDER_PATH);\n+      try {\n+        if (!(keyProvider instanceof\n+            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n+          throw new IOException(String\n+              .format(\"keyProvider %s cannot renew token [%s]\",\n+                  keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(),\n+                  token));\n+        }\n+        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n+            keyProvider).renewDelegationToken(token);\n+      } finally {\n+        if (keyProvider !\u003d null) {\n+          keyProvider.close();\n+        }\n       }\n-      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n-          keyProvider).renewDelegationToken(token);\n-    } finally {\n-      if (keyProvider !\u003d null) {\n-        keyProvider.close();\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n      LOG.debug(\"Renewing delegation token {}\", token);\n      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n          KeyProviderFactory.KEY_PROVIDER_PATH);\n      try {\n        if (!(keyProvider instanceof\n            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n          throw new IOException(String\n              .format(\"keyProvider %s cannot renew token [%s]\",\n                  keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(),\n                  token));\n        }\n        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n            keyProvider).renewDelegationToken(token);\n      } finally {\n        if (keyProvider !\u003d null) {\n          keyProvider.close();\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
            "oldMethodName": "renew",
            "newMethodName": "renew"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
          "commitDate": "07/05/18 1:32 PM",
          "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "07/05/18 1:32 PM",
          "commitNameOld": "118bd7580583e31bf643b642a2fbc9556177b906",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n-    LOG.debug(\"Renewing delegation token {}\", token);\n-    final KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n-    try {\n-      if (!(keyProvider instanceof\n-          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n-        throw new IOException(String\n-            .format(\"keyProvider %s cannot renew token [%s]\",\n-                keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token));\n+    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n+      LOG.debug(\"Renewing delegation token {}\", token);\n+      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n+          KeyProviderFactory.KEY_PROVIDER_PATH);\n+      try {\n+        if (!(keyProvider instanceof\n+            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n+          throw new IOException(String\n+              .format(\"keyProvider %s cannot renew token [%s]\",\n+                  keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(),\n+                  token));\n+        }\n+        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n+            keyProvider).renewDelegationToken(token);\n+      } finally {\n+        if (keyProvider !\u003d null) {\n+          keyProvider.close();\n+        }\n       }\n-      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n-          keyProvider).renewDelegationToken(token);\n-    } finally {\n-      if (keyProvider !\u003d null) {\n-        keyProvider.close();\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n      LOG.debug(\"Renewing delegation token {}\", token);\n      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n          KeyProviderFactory.KEY_PROVIDER_PATH);\n      try {\n        if (!(keyProvider instanceof\n            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n          throw new IOException(String\n              .format(\"keyProvider %s cannot renew token [%s]\",\n                  keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(),\n                  token));\n        }\n        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n            keyProvider).renewDelegationToken(token);\n      } finally {\n        if (keyProvider !\u003d null) {\n          keyProvider.close();\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "7ab08a9c37a76edbe02d556fcfb2e637f45afc21": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15390. Yarn RM logs flooded by DelegationTokenRenewer trying to renew KMS tokens (xiaochen via rkanter)\n",
      "commitDate": "23/04/18 3:44 PM",
      "commitName": "7ab08a9c37a76edbe02d556fcfb2e637f45afc21",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "10/04/18 3:38 PM",
      "commitNameOld": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 13.0,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n     LOG.debug(\"Renewing delegation token {}\", token);\n     final KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n     try {\n       if (!(keyProvider instanceof\n           KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n-        LOG.warn(\"keyProvider {} cannot renew token {}.\",\n-            keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token);\n-        return 0;\n+        throw new IOException(String\n+            .format(\"keyProvider %s cannot renew token [%s]\",\n+                keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token));\n       }\n       return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n           keyProvider).renewDelegationToken(token);\n     } finally {\n       if (keyProvider !\u003d null) {\n         keyProvider.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n    LOG.debug(\"Renewing delegation token {}\", token);\n    final KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n    try {\n      if (!(keyProvider instanceof\n          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n        throw new IOException(String\n            .format(\"keyProvider %s cannot renew token [%s]\",\n                keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token));\n      }\n      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n          keyProvider).renewDelegationToken(token);\n    } finally {\n      if (keyProvider !\u003d null) {\n        keyProvider.close();\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java",
      "extendedDetails": {}
    },
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
      "commitDate": "10/04/18 3:38 PM",
      "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
          "commitDate": "10/04/18 3:38 PM",
          "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/04/18 2:44 PM",
          "commitNameOld": "e81397545a273cf9a090010eb644b836e0ef8c7b",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,18 @@\n-    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n-      LOG.debug(\"Renewing delegation token {}\", token);\n-      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n-          KeyProviderFactory.KEY_PROVIDER_PATH);\n-      try {\n-        if (!(keyProvider instanceof\n-            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n-          LOG.warn(\"keyProvider {} cannot renew dt.\", keyProvider \u003d\u003d null ?\n-              \"null\" : keyProvider.getClass());\n-          return 0;\n-        }\n-        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n-            keyProvider).renewDelegationToken(token);\n-      } finally {\n-        if (keyProvider !\u003d null) {\n-          keyProvider.close();\n-        }\n+  public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n+    LOG.debug(\"Renewing delegation token {}\", token);\n+    final KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n+    try {\n+      if (!(keyProvider instanceof\n+          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n+        LOG.warn(\"keyProvider {} cannot renew token {}.\",\n+            keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token);\n+        return 0;\n       }\n-    }\n\\ No newline at end of file\n+      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n+          keyProvider).renewDelegationToken(token);\n+    } finally {\n+      if (keyProvider !\u003d null) {\n+        keyProvider.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n    LOG.debug(\"Renewing delegation token {}\", token);\n    final KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n    try {\n      if (!(keyProvider instanceof\n          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n        LOG.warn(\"keyProvider {} cannot renew token {}.\",\n            keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token);\n        return 0;\n      }\n      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n          keyProvider).renewDelegationToken(token);\n    } finally {\n      if (keyProvider !\u003d null) {\n        keyProvider.close();\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java",
            "oldMethodName": "renew",
            "newMethodName": "renew"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
          "commitDate": "10/04/18 3:38 PM",
          "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/04/18 2:44 PM",
          "commitNameOld": "e81397545a273cf9a090010eb644b836e0ef8c7b",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,18 @@\n-    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n-      LOG.debug(\"Renewing delegation token {}\", token);\n-      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n-          KeyProviderFactory.KEY_PROVIDER_PATH);\n-      try {\n-        if (!(keyProvider instanceof\n-            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n-          LOG.warn(\"keyProvider {} cannot renew dt.\", keyProvider \u003d\u003d null ?\n-              \"null\" : keyProvider.getClass());\n-          return 0;\n-        }\n-        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n-            keyProvider).renewDelegationToken(token);\n-      } finally {\n-        if (keyProvider !\u003d null) {\n-          keyProvider.close();\n-        }\n+  public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n+    LOG.debug(\"Renewing delegation token {}\", token);\n+    final KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n+    try {\n+      if (!(keyProvider instanceof\n+          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n+        LOG.warn(\"keyProvider {} cannot renew token {}.\",\n+            keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token);\n+        return 0;\n       }\n-    }\n\\ No newline at end of file\n+      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n+          keyProvider).renewDelegationToken(token);\n+    } finally {\n+      if (keyProvider !\u003d null) {\n+        keyProvider.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n    LOG.debug(\"Renewing delegation token {}\", token);\n    final KeyProvider keyProvider \u003d createKeyProvider(token, conf);\n    try {\n      if (!(keyProvider instanceof\n          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n        LOG.warn(\"keyProvider {} cannot renew token {}.\",\n            keyProvider \u003d\u003d null ? \"null\" : keyProvider.getClass(), token);\n        return 0;\n      }\n      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n          keyProvider).renewDelegationToken(token);\n    } finally {\n      if (keyProvider !\u003d null) {\n        keyProvider.close();\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java",
          "extendedDetails": {}
        }
      ]
    },
    "47ca9e26fba4a639e43bee5bfc001ffc4b42330d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13838. KMSTokenRenewer should close providers (xiaochen via rkanter)\n",
      "commitDate": "28/11/16 6:08 PM",
      "commitName": "47ca9e26fba4a639e43bee5bfc001ffc4b42330d",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "03/11/16 1:09 PM",
      "commitNameOld": "7154a20bcb1559c23aeb3b78b920bed03d834cb5",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 25.25,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,19 @@\n     public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n       LOG.debug(\"Renewing delegation token {}\", token);\n       KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n           KeyProviderFactory.KEY_PROVIDER_PATH);\n-      if (!(keyProvider instanceof\n-          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n-        LOG.warn(\"keyProvider {} cannot renew dt.\", keyProvider \u003d\u003d null ?\n-            \"null\" : keyProvider.getClass());\n-        return 0;\n+      try {\n+        if (!(keyProvider instanceof\n+            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n+          LOG.warn(\"keyProvider {} cannot renew dt.\", keyProvider \u003d\u003d null ?\n+              \"null\" : keyProvider.getClass());\n+          return 0;\n+        }\n+        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n+            keyProvider).renewDelegationToken(token);\n+      } finally {\n+        if (keyProvider !\u003d null) {\n+          keyProvider.close();\n+        }\n       }\n-      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n-          keyProvider).renewDelegationToken(token);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n      LOG.debug(\"Renewing delegation token {}\", token);\n      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n          KeyProviderFactory.KEY_PROVIDER_PATH);\n      try {\n        if (!(keyProvider instanceof\n            KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n          LOG.warn(\"keyProvider {} cannot renew dt.\", keyProvider \u003d\u003d null ?\n              \"null\" : keyProvider.getClass());\n          return 0;\n        }\n        return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n            keyProvider).renewDelegationToken(token);\n      } finally {\n        if (keyProvider !\u003d null) {\n          keyProvider.close();\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "713cb71820ad94a5436f35824d07aa12fcba5cc6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13155. Implement TokenRenewer to renew and cancel delegation tokens in KMS. Contributed by Xiao Chen.\n",
      "commitDate": "03/06/16 4:48 PM",
      "commitName": "713cb71820ad94a5436f35824d07aa12fcba5cc6",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,13 @@\n+    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n+      LOG.debug(\"Renewing delegation token {}\", token);\n+      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n+          KeyProviderFactory.KEY_PROVIDER_PATH);\n+      if (!(keyProvider instanceof\n+          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n+        LOG.warn(\"keyProvider {} cannot renew dt.\", keyProvider \u003d\u003d null ?\n+            \"null\" : keyProvider.getClass());\n+        return 0;\n+      }\n+      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n+          keyProvider).renewDelegationToken(token);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public long renew(Token\u003c?\u003e token, Configuration conf) throws IOException {\n      LOG.debug(\"Renewing delegation token {}\", token);\n      KeyProvider keyProvider \u003d KMSUtil.createKeyProvider(conf,\n          KeyProviderFactory.KEY_PROVIDER_PATH);\n      if (!(keyProvider instanceof\n          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {\n        LOG.warn(\"keyProvider {} cannot renew dt.\", keyProvider \u003d\u003d null ?\n            \"null\" : keyProvider.getClass());\n        return 0;\n      }\n      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)\n          keyProvider).renewDelegationToken(token);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}