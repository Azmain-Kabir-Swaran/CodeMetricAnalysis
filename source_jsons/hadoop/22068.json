{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EventFetcher.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
  "functionStartLine": 59,
  "functionEndLine": 96,
  "numCommitsSeen": 8,
  "timeTaken": 8905,
  "changeHistory": [
    "078ae89a4793eb6a153a88b106d330fd059a4933",
    "02d5fa3e6265025912223e07d1bb5aac9eac0dc9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "078ae89a4793eb6a153a88b106d330fd059a4933": "Ybodychange",
    "02d5fa3e6265025912223e07d1bb5aac9eac0dc9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "078ae89a4793eb6a153a88b106d330fd059a4933": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3714. Fixed EventFetcher and Fetcher threads to shut-down properly so that reducers don\u0027t hang in corner cases. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235545 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/01/12 3:18 PM",
      "commitName": "078ae89a4793eb6a153a88b106d330fd059a4933",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/10/11 3:44 PM",
      "commitNameOld": "02d5fa3e6265025912223e07d1bb5aac9eac0dc9",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 96.02,
      "commitsBetweenForRepo": 538,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   public void run() {\n     int failures \u003d 0;\n     LOG.info(reduce + \" Thread started: \" + getName());\n     \n     try {\n-      while (true \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+      while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n         try {\n           int numNewMaps \u003d getMapCompletionEvents();\n           failures \u003d 0;\n           if (numNewMaps \u003e 0) {\n             LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n           }\n           LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n           if (!Thread.currentThread().isInterrupted()) {\n             Thread.sleep(SLEEP_TIME);\n           }\n+        } catch (InterruptedException e) {\n+          LOG.info(\"EventFetcher is interrupted.. Returning\");\n+          return;\n         } catch (IOException ie) {\n           LOG.info(\"Exception in getting events\", ie);\n           // check to see whether to abort\n           if (++failures \u003e\u003d MAX_RETRIES) {\n             throw new IOException(\"too many failures downloading events\", ie);\n           }\n           // sleep for a bit\n           if (!Thread.currentThread().isInterrupted()) {\n             Thread.sleep(RETRY_PERIOD);\n           }\n         }\n       }\n     } catch (InterruptedException e) {\n       return;\n     } catch (Throwable t) {\n       exceptionReporter.reportException(t);\n       return;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    int failures \u003d 0;\n    LOG.info(reduce + \" Thread started: \" + getName());\n    \n    try {\n      while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n        try {\n          int numNewMaps \u003d getMapCompletionEvents();\n          failures \u003d 0;\n          if (numNewMaps \u003e 0) {\n            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n          }\n          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n          if (!Thread.currentThread().isInterrupted()) {\n            Thread.sleep(SLEEP_TIME);\n          }\n        } catch (InterruptedException e) {\n          LOG.info(\"EventFetcher is interrupted.. Returning\");\n          return;\n        } catch (IOException ie) {\n          LOG.info(\"Exception in getting events\", ie);\n          // check to see whether to abort\n          if (++failures \u003e\u003d MAX_RETRIES) {\n            throw new IOException(\"too many failures downloading events\", ie);\n          }\n          // sleep for a bit\n          if (!Thread.currentThread().isInterrupted()) {\n            Thread.sleep(RETRY_PERIOD);\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      return;\n    } catch (Throwable t) {\n      exceptionReporter.reportException(t);\n      return;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
      "extendedDetails": {}
    },
    "02d5fa3e6265025912223e07d1bb5aac9eac0dc9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3226. Fix shutdown of fetcher threads. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1187116 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 3:44 PM",
      "commitName": "02d5fa3e6265025912223e07d1bb5aac9eac0dc9",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 56.94,
      "commitsBetweenForRepo": 397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n   public void run() {\n     int failures \u003d 0;\n     LOG.info(reduce + \" Thread started: \" + getName());\n     \n     try {\n-      while (true) {\n+      while (true \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n         try {\n           int numNewMaps \u003d getMapCompletionEvents();\n           failures \u003d 0;\n           if (numNewMaps \u003e 0) {\n             LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n           }\n           LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n-          Thread.sleep(SLEEP_TIME);\n+          if (!Thread.currentThread().isInterrupted()) {\n+            Thread.sleep(SLEEP_TIME);\n+          }\n         } catch (IOException ie) {\n           LOG.info(\"Exception in getting events\", ie);\n           // check to see whether to abort\n           if (++failures \u003e\u003d MAX_RETRIES) {\n             throw new IOException(\"too many failures downloading events\", ie);\n           }\n           // sleep for a bit\n-          Thread.sleep(RETRY_PERIOD);\n+          if (!Thread.currentThread().isInterrupted()) {\n+            Thread.sleep(RETRY_PERIOD);\n+          }\n         }\n       }\n     } catch (InterruptedException e) {\n       return;\n     } catch (Throwable t) {\n       exceptionReporter.reportException(t);\n       return;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    int failures \u003d 0;\n    LOG.info(reduce + \" Thread started: \" + getName());\n    \n    try {\n      while (true \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n        try {\n          int numNewMaps \u003d getMapCompletionEvents();\n          failures \u003d 0;\n          if (numNewMaps \u003e 0) {\n            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n          }\n          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n          if (!Thread.currentThread().isInterrupted()) {\n            Thread.sleep(SLEEP_TIME);\n          }\n        } catch (IOException ie) {\n          LOG.info(\"Exception in getting events\", ie);\n          // check to see whether to abort\n          if (++failures \u003e\u003d MAX_RETRIES) {\n            throw new IOException(\"too many failures downloading events\", ie);\n          }\n          // sleep for a bit\n          if (!Thread.currentThread().isInterrupted()) {\n            Thread.sleep(RETRY_PERIOD);\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      return;\n    } catch (Throwable t) {\n      exceptionReporter.reportException(t);\n      return;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void run() {\n    int failures \u003d 0;\n    LOG.info(reduce + \" Thread started: \" + getName());\n    \n    try {\n      while (true) {\n        try {\n          int numNewMaps \u003d getMapCompletionEvents();\n          failures \u003d 0;\n          if (numNewMaps \u003e 0) {\n            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n          }\n          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n          Thread.sleep(SLEEP_TIME);\n        } catch (IOException ie) {\n          LOG.info(\"Exception in getting events\", ie);\n          // check to see whether to abort\n          if (++failures \u003e\u003d MAX_RETRIES) {\n            throw new IOException(\"too many failures downloading events\", ie);\n          }\n          // sleep for a bit\n          Thread.sleep(RETRY_PERIOD);\n        }\n      }\n    } catch (InterruptedException e) {\n      return;\n    } catch (Throwable t) {\n      exceptionReporter.reportException(t);\n      return;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void run() {\n    int failures \u003d 0;\n    LOG.info(reduce + \" Thread started: \" + getName());\n    \n    try {\n      while (true) {\n        try {\n          int numNewMaps \u003d getMapCompletionEvents();\n          failures \u003d 0;\n          if (numNewMaps \u003e 0) {\n            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n          }\n          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n          Thread.sleep(SLEEP_TIME);\n        } catch (IOException ie) {\n          LOG.info(\"Exception in getting events\", ie);\n          // check to see whether to abort\n          if (++failures \u003e\u003d MAX_RETRIES) {\n            throw new IOException(\"too many failures downloading events\", ie);\n          }\n          // sleep for a bit\n          Thread.sleep(RETRY_PERIOD);\n        }\n      }\n    } catch (InterruptedException e) {\n      return;\n    } catch (Throwable t) {\n      exceptionReporter.reportException(t);\n      return;\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
        "oldMethodName": "run",
        "newMethodName": "run"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,31 @@\n+  public void run() {\n+    int failures \u003d 0;\n+    LOG.info(reduce + \" Thread started: \" + getName());\n+    \n+    try {\n+      while (true) {\n+        try {\n+          int numNewMaps \u003d getMapCompletionEvents();\n+          failures \u003d 0;\n+          if (numNewMaps \u003e 0) {\n+            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n+          }\n+          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n+          Thread.sleep(SLEEP_TIME);\n+        } catch (IOException ie) {\n+          LOG.info(\"Exception in getting events\", ie);\n+          // check to see whether to abort\n+          if (++failures \u003e\u003d MAX_RETRIES) {\n+            throw new IOException(\"too many failures downloading events\", ie);\n+          }\n+          // sleep for a bit\n+          Thread.sleep(RETRY_PERIOD);\n+        }\n+      }\n+    } catch (InterruptedException e) {\n+      return;\n+    } catch (Throwable t) {\n+      exceptionReporter.reportException(t);\n+      return;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    int failures \u003d 0;\n    LOG.info(reduce + \" Thread started: \" + getName());\n    \n    try {\n      while (true) {\n        try {\n          int numNewMaps \u003d getMapCompletionEvents();\n          failures \u003d 0;\n          if (numNewMaps \u003e 0) {\n            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n          }\n          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n          Thread.sleep(SLEEP_TIME);\n        } catch (IOException ie) {\n          LOG.info(\"Exception in getting events\", ie);\n          // check to see whether to abort\n          if (++failures \u003e\u003d MAX_RETRIES) {\n            throw new IOException(\"too many failures downloading events\", ie);\n          }\n          // sleep for a bit\n          Thread.sleep(RETRY_PERIOD);\n        }\n      }\n    } catch (InterruptedException e) {\n      return;\n    } catch (Throwable t) {\n      exceptionReporter.reportException(t);\n      return;\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java"
    }
  }
}