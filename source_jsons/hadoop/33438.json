{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaSandboxLinuxContainerRuntime.java",
  "functionName": "isSandboxContainerWhitelisted",
  "functionId": "isSandboxContainerWhitelisted___username-String__commands-List__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
  "functionStartLine": 328,
  "functionEndLine": 354,
  "numCommitsSeen": 11,
  "timeTaken": 2007,
  "changeHistory": [
    "18c494a00c8ead768f3a868b450dceea485559df",
    "6f6dfe0202249c129b36edfd145a2224140139cc"
  ],
  "changeHistoryShort": {
    "18c494a00c8ead768f3a868b450dceea485559df": "Ymultichange(Yparameterchange,Ybodychange)",
    "6f6dfe0202249c129b36edfd145a2224140139cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "18c494a00c8ead768f3a868b450dceea485559df": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6447. Provide container sandbox policies for groups (gphillips via rkanter)\n",
      "commitDate": "16/05/17 6:02 PM",
      "commitName": "18c494a00c8ead768f3a868b450dceea485559df",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6447. Provide container sandbox policies for groups (gphillips via rkanter)\n",
          "commitDate": "16/05/17 6:02 PM",
          "commitName": "18c494a00c8ead768f3a868b450dceea485559df",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "28/04/17 11:01 AM",
          "commitNameOld": "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 18.29,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private boolean isSandboxContainerWhitelisted(ContainerRuntimeContext ctx,\n+  private boolean isSandboxContainerWhitelisted(String username,\n       List\u003cString\u003e commands) throws ContainerExecutionException {\n     String whitelistGroup \u003d configuration.get(\n         YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP);\n     Groups groups \u003d Groups.getUserToGroupsMappingService(configuration);\n     List\u003cString\u003e userGroups;\n     boolean isWhitelisted \u003d false;\n \n     try {\n-      userGroups \u003d groups.getGroups(ctx.getExecutionAttribute(USER));\n+      userGroups \u003d groups.getGroups(username);\n     } catch (IOException e) {\n       throw new ContainerExecutionException(\"Container user does not exist\");\n     }\n \n     if(whitelistGroup !\u003d null \u0026\u0026 userGroups.contains(whitelistGroup)) {\n       // If any command has security flag, whitelisting is disabled\n       for(String cmd : commands) {\n         if(cmd.contains(NMContainerPolicyUtils.SECURITY_FLAG)){\n           isWhitelisted \u003d false;\n           break;\n         } else {\n           isWhitelisted \u003d true;\n         }\n       }\n     }\n     return isWhitelisted;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isSandboxContainerWhitelisted(String username,\n      List\u003cString\u003e commands) throws ContainerExecutionException {\n    String whitelistGroup \u003d configuration.get(\n        YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP);\n    Groups groups \u003d Groups.getUserToGroupsMappingService(configuration);\n    List\u003cString\u003e userGroups;\n    boolean isWhitelisted \u003d false;\n\n    try {\n      userGroups \u003d groups.getGroups(username);\n    } catch (IOException e) {\n      throw new ContainerExecutionException(\"Container user does not exist\");\n    }\n\n    if(whitelistGroup !\u003d null \u0026\u0026 userGroups.contains(whitelistGroup)) {\n      // If any command has security flag, whitelisting is disabled\n      for(String cmd : commands) {\n        if(cmd.contains(NMContainerPolicyUtils.SECURITY_FLAG)){\n          isWhitelisted \u003d false;\n          break;\n        } else {\n          isWhitelisted \u003d true;\n        }\n      }\n    }\n    return isWhitelisted;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[ctx-ContainerRuntimeContext, commands-List\u003cString\u003e]",
            "newValue": "[username-String, commands-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6447. Provide container sandbox policies for groups (gphillips via rkanter)\n",
          "commitDate": "16/05/17 6:02 PM",
          "commitName": "18c494a00c8ead768f3a868b450dceea485559df",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "28/04/17 11:01 AM",
          "commitNameOld": "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 18.29,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private boolean isSandboxContainerWhitelisted(ContainerRuntimeContext ctx,\n+  private boolean isSandboxContainerWhitelisted(String username,\n       List\u003cString\u003e commands) throws ContainerExecutionException {\n     String whitelistGroup \u003d configuration.get(\n         YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP);\n     Groups groups \u003d Groups.getUserToGroupsMappingService(configuration);\n     List\u003cString\u003e userGroups;\n     boolean isWhitelisted \u003d false;\n \n     try {\n-      userGroups \u003d groups.getGroups(ctx.getExecutionAttribute(USER));\n+      userGroups \u003d groups.getGroups(username);\n     } catch (IOException e) {\n       throw new ContainerExecutionException(\"Container user does not exist\");\n     }\n \n     if(whitelistGroup !\u003d null \u0026\u0026 userGroups.contains(whitelistGroup)) {\n       // If any command has security flag, whitelisting is disabled\n       for(String cmd : commands) {\n         if(cmd.contains(NMContainerPolicyUtils.SECURITY_FLAG)){\n           isWhitelisted \u003d false;\n           break;\n         } else {\n           isWhitelisted \u003d true;\n         }\n       }\n     }\n     return isWhitelisted;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isSandboxContainerWhitelisted(String username,\n      List\u003cString\u003e commands) throws ContainerExecutionException {\n    String whitelistGroup \u003d configuration.get(\n        YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP);\n    Groups groups \u003d Groups.getUserToGroupsMappingService(configuration);\n    List\u003cString\u003e userGroups;\n    boolean isWhitelisted \u003d false;\n\n    try {\n      userGroups \u003d groups.getGroups(username);\n    } catch (IOException e) {\n      throw new ContainerExecutionException(\"Container user does not exist\");\n    }\n\n    if(whitelistGroup !\u003d null \u0026\u0026 userGroups.contains(whitelistGroup)) {\n      // If any command has security flag, whitelisting is disabled\n      for(String cmd : commands) {\n        if(cmd.contains(NMContainerPolicyUtils.SECURITY_FLAG)){\n          isWhitelisted \u003d false;\n          break;\n        } else {\n          isWhitelisted \u003d true;\n        }\n      }\n    }\n    return isWhitelisted;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "6f6dfe0202249c129b36edfd145a2224140139cc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5280. Allow YARN containers to run with Java Security Manager (gphillips via rkanter)\n",
      "commitDate": "01/03/17 2:53 PM",
      "commitName": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,27 @@\n+  private boolean isSandboxContainerWhitelisted(ContainerRuntimeContext ctx,\n+      List\u003cString\u003e commands) throws ContainerExecutionException {\n+    String whitelistGroup \u003d configuration.get(\n+        YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP);\n+    Groups groups \u003d Groups.getUserToGroupsMappingService(configuration);\n+    List\u003cString\u003e userGroups;\n+    boolean isWhitelisted \u003d false;\n+\n+    try {\n+      userGroups \u003d groups.getGroups(ctx.getExecutionAttribute(USER));\n+    } catch (IOException e) {\n+      throw new ContainerExecutionException(\"Container user does not exist\");\n+    }\n+\n+    if(whitelistGroup !\u003d null \u0026\u0026 userGroups.contains(whitelistGroup)) {\n+      // If any command has security flag, whitelisting is disabled\n+      for(String cmd : commands) {\n+        if(cmd.contains(NMContainerPolicyUtils.SECURITY_FLAG)){\n+          isWhitelisted \u003d false;\n+          break;\n+        } else {\n+          isWhitelisted \u003d true;\n+        }\n+      }\n+    }\n+    return isWhitelisted;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isSandboxContainerWhitelisted(ContainerRuntimeContext ctx,\n      List\u003cString\u003e commands) throws ContainerExecutionException {\n    String whitelistGroup \u003d configuration.get(\n        YarnConfiguration.YARN_CONTAINER_SANDBOX_WHITELIST_GROUP);\n    Groups groups \u003d Groups.getUserToGroupsMappingService(configuration);\n    List\u003cString\u003e userGroups;\n    boolean isWhitelisted \u003d false;\n\n    try {\n      userGroups \u003d groups.getGroups(ctx.getExecutionAttribute(USER));\n    } catch (IOException e) {\n      throw new ContainerExecutionException(\"Container user does not exist\");\n    }\n\n    if(whitelistGroup !\u003d null \u0026\u0026 userGroups.contains(whitelistGroup)) {\n      // If any command has security flag, whitelisting is disabled\n      for(String cmd : commands) {\n        if(cmd.contains(NMContainerPolicyUtils.SECURITY_FLAG)){\n          isWhitelisted \u003d false;\n          break;\n        } else {\n          isWhitelisted \u003d true;\n        }\n      }\n    }\n    return isWhitelisted;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java"
    }
  }
}