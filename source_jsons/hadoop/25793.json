{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMCommunicator.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
  "functionStartLine": 275,
  "functionEndLine": 299,
  "numCommitsSeen": 56,
  "timeTaken": 10032,
  "changeHistory": [
    "8dfec7a1979e8f70f8355c096874921d368342ef",
    "f4951e07087c99ab6d57ff5efdd962432ac641ab",
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9",
    "bf876f70fba1fbc61f4062255981684b992a56b6",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be",
    "32d511065a2612d37591f09e53eed8ec1488587d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8dfec7a1979e8f70f8355c096874921d368342ef": "Ybodychange",
    "f4951e07087c99ab6d57ff5efdd962432ac641ab": "Ybodychange",
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9": "Ybodychange",
    "bf876f70fba1fbc61f4062255981684b992a56b6": "Ymultichange(Yreturntypechange,Ybodychange)",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": "Ymultichange(Yreturntypechange,Ybodychange)",
    "32d511065a2612d37591f09e53eed8ec1488587d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Yreturntypechange,Yexceptionschange,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8dfec7a1979e8f70f8355c096874921d368342ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6439. AM may fail instead of retrying if RM shuts down during the allocate call. (Anubhav Dhoot via kasha)\n",
      "commitDate": "15/08/15 12:52 AM",
      "commitName": "8dfec7a1979e8f70f8355c096874921d368342ef",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/12/14 10:12 PM",
      "commitNameOld": "0bd022911013629a8c9e7357fae8cf4399d7a1e3",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 246.07,
      "commitsBetweenForRepo": 1920,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n-      public void run() {\n-        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+    public void run() {\n+      while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+        try {\n+          Thread.sleep(rmPollInterval);\n           try {\n-            Thread.sleep(rmPollInterval);\n-            try {\n-              heartbeat();\n-            } catch (YarnRuntimeException e) {\n-              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n-              return;\n-            } catch (Exception e) {\n-              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n-              continue;\n-              // TODO: for other exceptions\n-            }\n-\n-            lastHeartbeatTime \u003d context.getClock().getTime();\n-            executeHeartbeatCallbacks();\n-          } catch (InterruptedException e) {\n-            if (!stopped.get()) {\n-              LOG.warn(\"Allocated thread interrupted. Returning.\");\n-            }\n+            heartbeat();\n+          } catch (RMContainerAllocationException e) {\n+            LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n             return;\n+          } catch (Exception e) {\n+            LOG.error(\"ERROR IN CONTACTING RM. \", e);\n+            continue;\n+            // TODO: for other exceptions\n           }\n+\n+          lastHeartbeatTime \u003d context.getClock().getTime();\n+          executeHeartbeatCallbacks();\n+        } catch (InterruptedException e) {\n+          if (!stopped.get()) {\n+            LOG.warn(\"Allocated thread interrupted. Returning.\");\n+          }\n+          return;\n         }\n-      }\n\\ No newline at end of file\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n        try {\n          Thread.sleep(rmPollInterval);\n          try {\n            heartbeat();\n          } catch (RMContainerAllocationException e) {\n            LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n            return;\n          } catch (Exception e) {\n            LOG.error(\"ERROR IN CONTACTING RM. \", e);\n            continue;\n            // TODO: for other exceptions\n          }\n\n          lastHeartbeatTime \u003d context.getClock().getTime();\n          executeHeartbeatCallbacks();\n        } catch (InterruptedException e) {\n          if (!stopped.get()) {\n            LOG.warn(\"Allocated thread interrupted. Returning.\");\n          }\n          return;\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "f4951e07087c99ab6d57ff5efdd962432ac641ab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1116. Populate AMRMTokens back to AMRMTokenSecretManager after RM restarts (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523146 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/13 4:51 PM",
      "commitName": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "21/08/13 11:16 AM",
      "commitNameOld": "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 23.23,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,25 @@\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnRuntimeException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n-            } catch (InvalidToken e) {\n-              // This can happen if the RM has been restarted, since currently\n-              // when RM restarts AMRMToken is not populated back to\n-              // AMRMTokenSecretManager yet. Once this is fixed, no need\n-              // to send JOB_AM_REBOOT event in this method any more.\n-              eventHandler.handle(new JobEvent(job.getID(),\n-                JobEventType.JOB_AM_REBOOT));\n-              LOG.error(\"Error in authencating with RM: \" ,e);\n-              return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               continue;\n               // TODO: for other exceptions\n             }\n \n             lastHeartbeatTime \u003d context.getClock().getTime();\n             executeHeartbeatCallbacks();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.warn(\"Allocated thread interrupted. Returning.\");\n             }\n             return;\n           }\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnRuntimeException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5466. Changed MR AM to not promote history files of intermediate AMs in case they are exiting because of errors and thus help history-server pick up the right history file for the last successful AM. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/13 11:16 AM",
      "commitName": "2d614a916cc5958b709bddbee71d2dcb9cbb2bf9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/07/13 5:57 PM",
      "commitNameOld": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 33.72,
      "commitsBetweenForRepo": 211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,34 @@\n       public void run() {\n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             Thread.sleep(rmPollInterval);\n             try {\n               heartbeat();\n             } catch (YarnRuntimeException e) {\n               LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n               return;\n+            } catch (InvalidToken e) {\n+              // This can happen if the RM has been restarted, since currently\n+              // when RM restarts AMRMToken is not populated back to\n+              // AMRMTokenSecretManager yet. Once this is fixed, no need\n+              // to send JOB_AM_REBOOT event in this method any more.\n+              eventHandler.handle(new JobEvent(job.getID(),\n+                JobEventType.JOB_AM_REBOOT));\n+              LOG.error(\"Error in authencating with RM: \" ,e);\n+              return;\n             } catch (Exception e) {\n               LOG.error(\"ERROR IN CONTACTING RM. \", e);\n               continue;\n               // TODO: for other exceptions\n             }\n \n             lastHeartbeatTime \u003d context.getClock().getTime();\n             executeHeartbeatCallbacks();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.warn(\"Allocated thread interrupted. Returning.\");\n             }\n             return;\n           }\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnRuntimeException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (InvalidToken e) {\n              // This can happen if the RM has been restarted, since currently\n              // when RM restarts AMRMToken is not populated back to\n              // AMRMTokenSecretManager yet. Once this is fixed, no need\n              // to send JOB_AM_REBOOT event in this method any more.\n              eventHandler.handle(new JobEvent(job.getID(),\n                JobEventType.JOB_AM_REBOOT));\n              LOG.error(\"Error in authencating with RM: \" ,e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "bf876f70fba1fbc61f4062255981684b992a56b6": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5398. MR changes for YARN-513 (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503934 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 3:51 PM",
      "commitName": "bf876f70fba1fbc61f4062255981684b992a56b6",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-5398. MR changes for YARN-513 (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503934 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 3:51 PM",
          "commitName": "bf876f70fba1fbc61f4062255981684b992a56b6",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "17/06/13 4:13 PM",
          "commitNameOld": "5d1b453b8591d87ffb564857015c26c99fb7437c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 28.98,
          "commitsBetweenForRepo": 147,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,25 @@\n-      public ApplicationMasterProtocol run() {\n-        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n-            serviceAddr, conf);\n+      public void run() {\n+        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+          try {\n+            Thread.sleep(rmPollInterval);\n+            try {\n+              heartbeat();\n+            } catch (YarnRuntimeException e) {\n+              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n+              return;\n+            } catch (Exception e) {\n+              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n+              continue;\n+              // TODO: for other exceptions\n+            }\n+\n+            lastHeartbeatTime \u003d context.getClock().getTime();\n+            executeHeartbeatCallbacks();\n+          } catch (InterruptedException e) {\n+            if (!stopped.get()) {\n+              LOG.warn(\"Allocated thread interrupted. Returning.\");\n+            }\n+            return;\n+          }\n+        }\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnRuntimeException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {
            "oldValue": "ApplicationMasterProtocol",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5398. MR changes for YARN-513 (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503934 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 3:51 PM",
          "commitName": "bf876f70fba1fbc61f4062255981684b992a56b6",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "17/06/13 4:13 PM",
          "commitNameOld": "5d1b453b8591d87ffb564857015c26c99fb7437c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 28.98,
          "commitsBetweenForRepo": 147,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,25 @@\n-      public ApplicationMasterProtocol run() {\n-        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n-            serviceAddr, conf);\n+      public void run() {\n+        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+          try {\n+            Thread.sleep(rmPollInterval);\n+            try {\n+              heartbeat();\n+            } catch (YarnRuntimeException e) {\n+              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n+              return;\n+            } catch (Exception e) {\n+              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n+              continue;\n+              // TODO: for other exceptions\n+            }\n+\n+            lastHeartbeatTime \u003d context.getClock().getTime();\n+            executeHeartbeatCallbacks();\n+          } catch (InterruptedException e) {\n+            if (!stopped.get()) {\n+              LOG.warn(\"Allocated thread interrupted. Returning.\");\n+            }\n+            return;\n+          }\n+        }\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public void run() {\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            Thread.sleep(rmPollInterval);\n            try {\n              heartbeat();\n            } catch (YarnRuntimeException e) {\n              LOG.error(\"Error communicating with RM: \" + e.getMessage() , e);\n              return;\n            } catch (Exception e) {\n              LOG.error(\"ERROR IN CONTACTING RM. \", e);\n              continue;\n              // TODO: for other exceptions\n            }\n\n            lastHeartbeatTime \u003d context.getClock().getTime();\n            executeHeartbeatCallbacks();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.warn(\"Allocated thread interrupted. Returning.\");\n            }\n            return;\n          }\n        }\n      }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {}
        }
      ]
    },
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 7:27 PM",
      "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/06/13 7:27 PM",
          "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "14/06/13 9:57 PM",
          "commitNameOld": "c2d0cf1b20489fada91c80d2da5c7fed757d6c27",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,4 @@\n-      public AMRMProtocol run() {\n-        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+      public ApplicationMasterProtocol run() {\n+        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n             serviceAddr, conf);\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public ApplicationMasterProtocol run() {\n        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n            serviceAddr, conf);\n      }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {
            "oldValue": "AMRMProtocol",
            "newValue": "ApplicationMasterProtocol"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/06/13 7:27 PM",
          "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "14/06/13 9:57 PM",
          "commitNameOld": "c2d0cf1b20489fada91c80d2da5c7fed757d6c27",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.9,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,4 @@\n-      public AMRMProtocol run() {\n-        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+      public ApplicationMasterProtocol run() {\n+        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n             serviceAddr, conf);\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public ApplicationMasterProtocol run() {\n        return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class,\n            serviceAddr, conf);\n      }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {}
        }
      ]
    },
    "32d511065a2612d37591f09e53eed8ec1488587d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4161. create sockets consistently (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:46 AM",
      "commitName": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "06/03/12 3:21 PM",
      "commitNameOld": "c3a4de0ec0389064f5468180d1b9024f64b00f40",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 42.81,
      "commitsBetweenForRepo": 310,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n       public AMRMProtocol run() {\n         return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n-            NetUtils.createSocketAddr(serviceAddr), conf);\n+            serviceAddr, conf);\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            serviceAddr, conf);\n      }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,4 @@\n-      public Object run() throws IOException {\n-        return RPC.waitForProxy(InterTrackerProtocol.class,\n-            InterTrackerProtocol.versionID, \n-            jobTrackAddr, fConf);  \n+      public AMRMProtocol run() {\n+        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+            NetUtils.createSocketAddr(serviceAddr), conf);\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java",
            "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,4 @@\n-      public Object run() throws IOException {\n-        return RPC.waitForProxy(InterTrackerProtocol.class,\n-            InterTrackerProtocol.versionID, \n-            jobTrackAddr, fConf);  \n+      public AMRMProtocol run() {\n+        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+            NetUtils.createSocketAddr(serviceAddr), conf);\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {
            "oldValue": "Object",
            "newValue": "AMRMProtocol"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,4 @@\n-      public Object run() throws IOException {\n-        return RPC.waitForProxy(InterTrackerProtocol.class,\n-            InterTrackerProtocol.versionID, \n-            jobTrackAddr, fConf);  \n+      public AMRMProtocol run() {\n+        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+            NetUtils.createSocketAddr(serviceAddr), conf);\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,4 @@\n-      public Object run() throws IOException {\n-        return RPC.waitForProxy(InterTrackerProtocol.class,\n-            InterTrackerProtocol.versionID, \n-            jobTrackAddr, fConf);  \n+      public AMRMProtocol run() {\n+        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n+            NetUtils.createSocketAddr(serviceAddr), conf);\n       }\n\\ No newline at end of file\n",
          "actualSource": "      public AMRMProtocol run() {\n        return (AMRMProtocol) rpc.getProxy(AMRMProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,48 @@\n+  public void run() {\n+    try {\n+      startCleanupThreads();\n+      boolean denied \u003d false;\n+      while (running \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n+        boolean staleState \u003d false;\n+        try {\n+          // This while-loop attempts reconnects if we get network errors\n+          while (running \u0026\u0026 !staleState \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n+            try {\n+              State osState \u003d offerService();\n+              if (osState \u003d\u003d State.STALE) {\n+                staleState \u003d true;\n+              } else if (osState \u003d\u003d State.DENIED) {\n+                denied \u003d true;\n+              }\n+            } catch (Exception ex) {\n+              if (!shuttingDown) {\n+                LOG.info(\"Lost connection to JobTracker [\" +\n+                         jobTrackAddr + \"].  Retrying...\", ex);\n+                try {\n+                  Thread.sleep(5000);\n+                } catch (InterruptedException ie) {\n+                }\n+              }\n+            }\n+          }\n+        } finally {\n+          close();\n+        }\n+        if (shuttingDown) { return; }\n+        LOG.warn(\"Reinitializing local state\");\n+        initialize();\n+      }\n+      if (denied) {\n+        shutdown();\n+      }\n+    } catch (IOException iex) {\n+      LOG.error(\"Got fatal exception while reinitializing TaskTracker: \" +\n+                StringUtils.stringifyException(iex));\n+      return;\n+    }\n+    catch (InterruptedException i) {\n+      LOG.error(\"Got interrupted while reinitializing TaskTracker: \" + \n+          i.getMessage());\n+      return;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    try {\n      startCleanupThreads();\n      boolean denied \u003d false;\n      while (running \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n        boolean staleState \u003d false;\n        try {\n          // This while-loop attempts reconnects if we get network errors\n          while (running \u0026\u0026 !staleState \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n            try {\n              State osState \u003d offerService();\n              if (osState \u003d\u003d State.STALE) {\n                staleState \u003d true;\n              } else if (osState \u003d\u003d State.DENIED) {\n                denied \u003d true;\n              }\n            } catch (Exception ex) {\n              if (!shuttingDown) {\n                LOG.info(\"Lost connection to JobTracker [\" +\n                         jobTrackAddr + \"].  Retrying...\", ex);\n                try {\n                  Thread.sleep(5000);\n                } catch (InterruptedException ie) {\n                }\n              }\n            }\n          }\n        } finally {\n          close();\n        }\n        if (shuttingDown) { return; }\n        LOG.warn(\"Reinitializing local state\");\n        initialize();\n      }\n      if (denied) {\n        shutdown();\n      }\n    } catch (IOException iex) {\n      LOG.error(\"Got fatal exception while reinitializing TaskTracker: \" +\n                StringUtils.stringifyException(iex));\n      return;\n    }\n    catch (InterruptedException i) {\n      LOG.error(\"Got interrupted while reinitializing TaskTracker: \" + \n          i.getMessage());\n      return;\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java"
    }
  }
}