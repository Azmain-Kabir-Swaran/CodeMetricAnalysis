{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StreamAMSimulator.java",
  "functionName": "sendContainerRequest",
  "functionId": "sendContainerRequest",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/StreamAMSimulator.java",
  "functionStartLine": 203,
  "functionEndLine": 248,
  "numCommitsSeen": 3,
  "timeTaken": 665,
  "changeHistory": [
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf"
  ],
  "changeHistoryShort": {
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
      "commitDate": "20/02/18 5:00 PM",
      "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,46 @@\n+  protected void sendContainerRequest()\n+          throws YarnException, IOException, InterruptedException {\n+\n+    // send out request\n+    List\u003cResourceRequest\u003e ask \u003d new ArrayList\u003c\u003e();\n+    List\u003cContainerId\u003e release \u003d new ArrayList\u003c\u003e();\n+    if (!isFinished) {\n+      if (!pendingStreams.isEmpty()) {\n+        ask \u003d packageRequests(mergeLists(pendingStreams, scheduledStreams),\n+            PRIORITY_MAP);\n+        LOG.debug(\"Application {} sends out request for {} streams.\",\n+            appId, pendingStreams.size());\n+        scheduledStreams.addAll(pendingStreams);\n+        pendingStreams.clear();\n+      }\n+    }\n+\n+    if(isFinished){\n+      release.addAll(assignedStreams.keySet());\n+      ask.clear();\n+    }\n+\n+    final AllocateRequest request \u003d createAllocateRequest(ask, release);\n+    if (totalContainers \u003d\u003d 0) {\n+      request.setProgress(1.0f);\n+    } else {\n+      request.setProgress((float) finishedContainers / totalContainers);\n+    }\n+\n+    UserGroupInformation ugi \u003d\n+        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n+    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n+        .get(appAttemptId.getApplicationId())\n+        .getRMAppAttempt(appAttemptId).getAMRMToken();\n+    ugi.addTokenIdentifier(token.decodeIdentifier());\n+    AllocateResponse response \u003d ugi.doAs(\n+        new PrivilegedExceptionAction\u003cAllocateResponse\u003e() {\n+          @Override\n+          public AllocateResponse run() throws Exception {\n+            return rm.getApplicationMasterService().allocate(request);\n+          }\n+        });\n+    if (response !\u003d null) {\n+      responseQueue.put(response);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void sendContainerRequest()\n          throws YarnException, IOException, InterruptedException {\n\n    // send out request\n    List\u003cResourceRequest\u003e ask \u003d new ArrayList\u003c\u003e();\n    List\u003cContainerId\u003e release \u003d new ArrayList\u003c\u003e();\n    if (!isFinished) {\n      if (!pendingStreams.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingStreams, scheduledStreams),\n            PRIORITY_MAP);\n        LOG.debug(\"Application {} sends out request for {} streams.\",\n            appId, pendingStreams.size());\n        scheduledStreams.addAll(pendingStreams);\n        pendingStreams.clear();\n      }\n    }\n\n    if(isFinished){\n      release.addAll(assignedStreams.keySet());\n      ask.clear();\n    }\n\n    final AllocateRequest request \u003d createAllocateRequest(ask, release);\n    if (totalContainers \u003d\u003d 0) {\n      request.setProgress(1.0f);\n    } else {\n      request.setProgress((float) finishedContainers / totalContainers);\n    }\n\n    UserGroupInformation ugi \u003d\n        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n        .get(appAttemptId.getApplicationId())\n        .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    AllocateResponse response \u003d ugi.doAs(\n        new PrivilegedExceptionAction\u003cAllocateResponse\u003e() {\n          @Override\n          public AllocateResponse run() throws Exception {\n            return rm.getApplicationMasterService().allocate(request);\n          }\n        });\n    if (response !\u003d null) {\n      responseQueue.put(response);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/StreamAMSimulator.java"
    }
  }
}