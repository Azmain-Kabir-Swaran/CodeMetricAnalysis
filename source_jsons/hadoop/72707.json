{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "reencryptEncryptedKey",
  "functionId": "reencryptEncryptedKey___ekv-EncryptedKeyVersion",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 834,
  "functionEndLine": 860,
  "numCommitsSeen": 71,
  "timeTaken": 1287,
  "changeHistory": [
    "79d90b810c14d5e3abab75235f587663834ce36c"
  ],
  "changeHistoryShort": {
    "79d90b810c14d5e3abab75235f587663834ce36c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "79d90b810c14d5e3abab75235f587663834ce36c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13827. Add reencryptEncryptedKey interface to KMS.\n",
      "commitDate": "06/12/16 12:04 PM",
      "commitName": "79d90b810c14d5e3abab75235f587663834ce36c",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,27 @@\n+  public EncryptedKeyVersion reencryptEncryptedKey(EncryptedKeyVersion ekv)\n+      throws IOException, GeneralSecurityException {\n+    checkNotNull(ekv.getEncryptionKeyVersionName(), \"versionName\");\n+    checkNotNull(ekv.getEncryptedKeyIv(), \"iv\");\n+    checkNotNull(ekv.getEncryptedKeyVersion(), \"encryptedKey\");\n+    Preconditions.checkArgument(ekv.getEncryptedKeyVersion().getVersionName()\n+            .equals(KeyProviderCryptoExtension.EEK),\n+        \"encryptedKey version name must be \u0027%s\u0027, is \u0027%s\u0027\",\n+        KeyProviderCryptoExtension.EEK,\n+        ekv.getEncryptedKeyVersion().getVersionName());\n+    final Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n+    params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_REENCRYPT);\n+    final Map\u003cString, Object\u003e jsonPayload \u003d new HashMap\u003c\u003e();\n+    jsonPayload.put(KMSRESTConstants.NAME_FIELD, ekv.getEncryptionKeyName());\n+    jsonPayload.put(KMSRESTConstants.IV_FIELD,\n+        Base64.encodeBase64String(ekv.getEncryptedKeyIv()));\n+    jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD,\n+        Base64.encodeBase64String(ekv.getEncryptedKeyVersion().getMaterial()));\n+    final URL url \u003d createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,\n+        ekv.getEncryptionKeyVersionName(), KMSRESTConstants.EEK_SUB_RESOURCE,\n+        params);\n+    final HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n+    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n+    final Map response \u003d\n+        call(conn, jsonPayload, HttpURLConnection.HTTP_OK, Map.class);\n+    return parseJSONEncKeyVersion(ekv.getEncryptionKeyName(), response);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public EncryptedKeyVersion reencryptEncryptedKey(EncryptedKeyVersion ekv)\n      throws IOException, GeneralSecurityException {\n    checkNotNull(ekv.getEncryptionKeyVersionName(), \"versionName\");\n    checkNotNull(ekv.getEncryptedKeyIv(), \"iv\");\n    checkNotNull(ekv.getEncryptedKeyVersion(), \"encryptedKey\");\n    Preconditions.checkArgument(ekv.getEncryptedKeyVersion().getVersionName()\n            .equals(KeyProviderCryptoExtension.EEK),\n        \"encryptedKey version name must be \u0027%s\u0027, is \u0027%s\u0027\",\n        KeyProviderCryptoExtension.EEK,\n        ekv.getEncryptedKeyVersion().getVersionName());\n    final Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n    params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_REENCRYPT);\n    final Map\u003cString, Object\u003e jsonPayload \u003d new HashMap\u003c\u003e();\n    jsonPayload.put(KMSRESTConstants.NAME_FIELD, ekv.getEncryptionKeyName());\n    jsonPayload.put(KMSRESTConstants.IV_FIELD,\n        Base64.encodeBase64String(ekv.getEncryptedKeyIv()));\n    jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD,\n        Base64.encodeBase64String(ekv.getEncryptedKeyVersion().getMaterial()));\n    final URL url \u003d createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,\n        ekv.getEncryptionKeyVersionName(), KMSRESTConstants.EEK_SUB_RESOURCE,\n        params);\n    final HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n    final Map response \u003d\n        call(conn, jsonPayload, HttpURLConnection.HTTP_OK, Map.class);\n    return parseJSONEncKeyVersion(ekv.getEncryptionKeyName(), response);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}