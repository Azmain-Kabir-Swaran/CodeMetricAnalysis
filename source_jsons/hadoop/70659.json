{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "connectUsingAnonymousCredentials",
  "functionId": "connectUsingAnonymousCredentials___uri-URI(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 846,
  "functionEndLine": 881,
  "numCommitsSeen": 53,
  "timeTaken": 3050,
  "changeHistory": [
    "48f4a229a93b65df9e99df2505719dd3538f1188",
    "c6bd73c6c5760c3a52203e6a51628587ceec6896",
    "8b57be108f9de3b74c5d6465828241fd436bcb99",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "48f4a229a93b65df9e99df2505719dd3538f1188": "Ybodychange",
    "c6bd73c6c5760c3a52203e6a51628587ceec6896": "Ybodychange",
    "8b57be108f9de3b74c5d6465828241fd436bcb99": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "48f4a229a93b65df9e99df2505719dd3538f1188": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14461 Azure: handle failure gracefully in case of missing account access key.\nContributed by Mingliang Liu.\n",
      "commitDate": "26/06/17 5:39 AM",
      "commitName": "48f4a229a93b65df9e99df2505719dd3538f1188",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "23/06/17 1:38 PM",
      "commitNameOld": "c6bd73c6c5760c3a52203e6a51628587ceec6896",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 2.67,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,36 @@\n   private void connectUsingAnonymousCredentials(final URI uri)\n       throws StorageException, IOException, URISyntaxException {\n     // Use an HTTP scheme since the URI specifies a publicly accessible\n     // container. Explicitly create a storage URI corresponding to the URI\n     // parameter for use in creating the service client.\n     String accountName \u003d getAccountFromAuthority(uri);\n     URI storageUri \u003d new URI(getHTTPScheme() + \":\" + PATH_DELIMITER\n         + PATH_DELIMITER + accountName);\n \n     // Create the service client with anonymous credentials.\n     String containerName \u003d getContainerFromAuthority(uri);\n     storageInteractionLayer.createBlobClient(storageUri);\n     suppressRetryPolicyInClientIfNeeded();\n \n     // Capture the container reference.\n     container \u003d storageInteractionLayer.getContainerReference(containerName);\n     rootDirectory \u003d container.getDirectoryReference(\"\");\n \n     // Check for container existence, and our ability to access it.\n+    boolean canAccess;\n     try {\n-      if (!container.exists(getInstrumentedContext())) {\n-        throw new AzureException(\"Container \" + containerName + \" in account \"\n-            + accountName + \" not found, and we can\u0027t create\"\n-            + \" it using anoynomous credentials, and no credentials found for them\"\n-            + \" in the configuration.\");\n-      }\n+      canAccess \u003d container.exists(getInstrumentedContext());\n     } catch (StorageException ex) {\n-      throw new AzureException(\"Unable to access container \" + containerName\n-          + \" in account \" + accountName\n-          + \" using anonymous credentials, and no credentials found for them \"\n-          + \" in the configuration.\", ex);\n+      LOG.error(\"Service returned StorageException when checking existence \"\n+          + \"of container {} in account {}\", containerName, accountName, ex);\n+      canAccess \u003d false;\n+    }\n+    if (!canAccess) {\n+      throw new AzureException(String.format(NO_ACCESS_TO_CONTAINER_MSG,\n+          accountName, containerName));\n     }\n \n     // Accessing the storage server unauthenticated using\n     // anonymous credentials.\n     isAnonymousCredentials \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void connectUsingAnonymousCredentials(final URI uri)\n      throws StorageException, IOException, URISyntaxException {\n    // Use an HTTP scheme since the URI specifies a publicly accessible\n    // container. Explicitly create a storage URI corresponding to the URI\n    // parameter for use in creating the service client.\n    String accountName \u003d getAccountFromAuthority(uri);\n    URI storageUri \u003d new URI(getHTTPScheme() + \":\" + PATH_DELIMITER\n        + PATH_DELIMITER + accountName);\n\n    // Create the service client with anonymous credentials.\n    String containerName \u003d getContainerFromAuthority(uri);\n    storageInteractionLayer.createBlobClient(storageUri);\n    suppressRetryPolicyInClientIfNeeded();\n\n    // Capture the container reference.\n    container \u003d storageInteractionLayer.getContainerReference(containerName);\n    rootDirectory \u003d container.getDirectoryReference(\"\");\n\n    // Check for container existence, and our ability to access it.\n    boolean canAccess;\n    try {\n      canAccess \u003d container.exists(getInstrumentedContext());\n    } catch (StorageException ex) {\n      LOG.error(\"Service returned StorageException when checking existence \"\n          + \"of container {} in account {}\", containerName, accountName, ex);\n      canAccess \u003d false;\n    }\n    if (!canAccess) {\n      throw new AzureException(String.format(NO_ACCESS_TO_CONTAINER_MSG,\n          accountName, containerName));\n    }\n\n    // Accessing the storage server unauthenticated using\n    // anonymous credentials.\n    isAnonymousCredentials \u003d true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "c6bd73c6c5760c3a52203e6a51628587ceec6896": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14547. [WASB] the configured retry policy is not used for all storage operations.\nContributed by Thomas.\n",
      "commitDate": "23/06/17 1:38 PM",
      "commitName": "c6bd73c6c5760c3a52203e6a51628587ceec6896",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/06/17 3:56 PM",
      "commitNameOld": "5fd9742c83fbeae96bf0913bdcdf77fafbf15b2f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 17.9,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   private void connectUsingAnonymousCredentials(final URI uri)\n       throws StorageException, IOException, URISyntaxException {\n     // Use an HTTP scheme since the URI specifies a publicly accessible\n     // container. Explicitly create a storage URI corresponding to the URI\n     // parameter for use in creating the service client.\n     String accountName \u003d getAccountFromAuthority(uri);\n     URI storageUri \u003d new URI(getHTTPScheme() + \":\" + PATH_DELIMITER\n         + PATH_DELIMITER + accountName);\n \n     // Create the service client with anonymous credentials.\n     String containerName \u003d getContainerFromAuthority(uri);\n     storageInteractionLayer.createBlobClient(storageUri);\n     suppressRetryPolicyInClientIfNeeded();\n \n     // Capture the container reference.\n     container \u003d storageInteractionLayer.getContainerReference(containerName);\n     rootDirectory \u003d container.getDirectoryReference(\"\");\n \n     // Check for container existence, and our ability to access it.\n     try {\n       if (!container.exists(getInstrumentedContext())) {\n         throw new AzureException(\"Container \" + containerName + \" in account \"\n             + accountName + \" not found, and we can\u0027t create\"\n             + \" it using anoynomous credentials, and no credentials found for them\"\n             + \" in the configuration.\");\n       }\n     } catch (StorageException ex) {\n       throw new AzureException(\"Unable to access container \" + containerName\n           + \" in account \" + accountName\n           + \" using anonymous credentials, and no credentials found for them \"\n           + \" in the configuration.\", ex);\n     }\n \n     // Accessing the storage server unauthenticated using\n     // anonymous credentials.\n     isAnonymousCredentials \u003d true;\n-\n-    // Configure Azure storage session.\n-    configureAzureStorageSession();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void connectUsingAnonymousCredentials(final URI uri)\n      throws StorageException, IOException, URISyntaxException {\n    // Use an HTTP scheme since the URI specifies a publicly accessible\n    // container. Explicitly create a storage URI corresponding to the URI\n    // parameter for use in creating the service client.\n    String accountName \u003d getAccountFromAuthority(uri);\n    URI storageUri \u003d new URI(getHTTPScheme() + \":\" + PATH_DELIMITER\n        + PATH_DELIMITER + accountName);\n\n    // Create the service client with anonymous credentials.\n    String containerName \u003d getContainerFromAuthority(uri);\n    storageInteractionLayer.createBlobClient(storageUri);\n    suppressRetryPolicyInClientIfNeeded();\n\n    // Capture the container reference.\n    container \u003d storageInteractionLayer.getContainerReference(containerName);\n    rootDirectory \u003d container.getDirectoryReference(\"\");\n\n    // Check for container existence, and our ability to access it.\n    try {\n      if (!container.exists(getInstrumentedContext())) {\n        throw new AzureException(\"Container \" + containerName + \" in account \"\n            + accountName + \" not found, and we can\u0027t create\"\n            + \" it using anoynomous credentials, and no credentials found for them\"\n            + \" in the configuration.\");\n      }\n    } catch (StorageException ex) {\n      throw new AzureException(\"Unable to access container \" + containerName\n          + \" in account \" + accountName\n          + \" using anonymous credentials, and no credentials found for them \"\n          + \" in the configuration.\", ex);\n    }\n\n    // Accessing the storage server unauthenticated using\n    // anonymous credentials.\n    isAnonymousCredentials \u003d true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "8b57be108f9de3b74c5d6465828241fd436bcb99": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12608. Fix exception message in WASB when connecting with anonymous credential. Contributed by Dushyanth.\n\n(cherry picked from commit 007a8decc61750720033e06b6d08861ac3788e41)\n(cherry picked from commit a65e159c59de41d26e12212dd1b7c28c28265cc3)\n",
      "commitDate": "29/08/16 3:30 PM",
      "commitName": "8b57be108f9de3b74c5d6465828241fd436bcb99",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "08/08/16 12:28 PM",
      "commitNameOld": "2ed58c40e5dcbf5c5303c00e85096085b1055f85",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 21.13,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   private void connectUsingAnonymousCredentials(final URI uri)\n       throws StorageException, IOException, URISyntaxException {\n     // Use an HTTP scheme since the URI specifies a publicly accessible\n     // container. Explicitly create a storage URI corresponding to the URI\n     // parameter for use in creating the service client.\n     String accountName \u003d getAccountFromAuthority(uri);\n     URI storageUri \u003d new URI(getHTTPScheme() + \":\" + PATH_DELIMITER\n         + PATH_DELIMITER + accountName);\n \n     // Create the service client with anonymous credentials.\n     String containerName \u003d getContainerFromAuthority(uri);\n     storageInteractionLayer.createBlobClient(storageUri);\n     suppressRetryPolicyInClientIfNeeded();\n \n     // Capture the container reference.\n     container \u003d storageInteractionLayer.getContainerReference(containerName);\n     rootDirectory \u003d container.getDirectoryReference(\"\");\n \n     // Check for container existence, and our ability to access it.\n     try {\n       if (!container.exists(getInstrumentedContext())) {\n         throw new AzureException(\"Container \" + containerName + \" in account \"\n-            + accountName + \" not found, and we can\u0027t create \"\n-            + \" it using anoynomous credentials.\");\n+            + accountName + \" not found, and we can\u0027t create\"\n+            + \" it using anoynomous credentials, and no credentials found for them\"\n+            + \" in the configuration.\");\n       }\n     } catch (StorageException ex) {\n       throw new AzureException(\"Unable to access container \" + containerName\n           + \" in account \" + accountName\n           + \" using anonymous credentials, and no credentials found for them \"\n           + \" in the configuration.\", ex);\n     }\n \n     // Accessing the storage server unauthenticated using\n     // anonymous credentials.\n     isAnonymousCredentials \u003d true;\n \n     // Configure Azure storage session.\n     configureAzureStorageSession();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void connectUsingAnonymousCredentials(final URI uri)\n      throws StorageException, IOException, URISyntaxException {\n    // Use an HTTP scheme since the URI specifies a publicly accessible\n    // container. Explicitly create a storage URI corresponding to the URI\n    // parameter for use in creating the service client.\n    String accountName \u003d getAccountFromAuthority(uri);\n    URI storageUri \u003d new URI(getHTTPScheme() + \":\" + PATH_DELIMITER\n        + PATH_DELIMITER + accountName);\n\n    // Create the service client with anonymous credentials.\n    String containerName \u003d getContainerFromAuthority(uri);\n    storageInteractionLayer.createBlobClient(storageUri);\n    suppressRetryPolicyInClientIfNeeded();\n\n    // Capture the container reference.\n    container \u003d storageInteractionLayer.getContainerReference(containerName);\n    rootDirectory \u003d container.getDirectoryReference(\"\");\n\n    // Check for container existence, and our ability to access it.\n    try {\n      if (!container.exists(getInstrumentedContext())) {\n        throw new AzureException(\"Container \" + containerName + \" in account \"\n            + accountName + \" not found, and we can\u0027t create\"\n            + \" it using anoynomous credentials, and no credentials found for them\"\n            + \" in the configuration.\");\n      }\n    } catch (StorageException ex) {\n      throw new AzureException(\"Unable to access container \" + containerName\n          + \" in account \" + accountName\n          + \" using anonymous credentials, and no credentials found for them \"\n          + \" in the configuration.\", ex);\n    }\n\n    // Accessing the storage server unauthenticated using\n    // anonymous credentials.\n    isAnonymousCredentials \u003d true;\n\n    // Configure Azure storage session.\n    configureAzureStorageSession();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,39 @@\n+  private void connectUsingAnonymousCredentials(final URI uri)\n+      throws StorageException, IOException, URISyntaxException {\n+    // Use an HTTP scheme since the URI specifies a publicly accessible\n+    // container. Explicitly create a storage URI corresponding to the URI\n+    // parameter for use in creating the service client.\n+    String accountName \u003d getAccountFromAuthority(uri);\n+    URI storageUri \u003d new URI(getHTTPScheme() + \":\" + PATH_DELIMITER\n+        + PATH_DELIMITER + accountName);\n+\n+    // Create the service client with anonymous credentials.\n+    String containerName \u003d getContainerFromAuthority(uri);\n+    storageInteractionLayer.createBlobClient(storageUri);\n+    suppressRetryPolicyInClientIfNeeded();\n+\n+    // Capture the container reference.\n+    container \u003d storageInteractionLayer.getContainerReference(containerName);\n+    rootDirectory \u003d container.getDirectoryReference(\"\");\n+\n+    // Check for container existence, and our ability to access it.\n+    try {\n+      if (!container.exists(getInstrumentedContext())) {\n+        throw new AzureException(\"Container \" + containerName + \" in account \"\n+            + accountName + \" not found, and we can\u0027t create \"\n+            + \" it using anoynomous credentials.\");\n+      }\n+    } catch (StorageException ex) {\n+      throw new AzureException(\"Unable to access container \" + containerName\n+          + \" in account \" + accountName\n+          + \" using anonymous credentials, and no credentials found for them \"\n+          + \" in the configuration.\", ex);\n+    }\n+\n+    // Accessing the storage server unauthenticated using\n+    // anonymous credentials.\n+    isAnonymousCredentials \u003d true;\n+\n+    // Configure Azure storage session.\n+    configureAzureStorageSession();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void connectUsingAnonymousCredentials(final URI uri)\n      throws StorageException, IOException, URISyntaxException {\n    // Use an HTTP scheme since the URI specifies a publicly accessible\n    // container. Explicitly create a storage URI corresponding to the URI\n    // parameter for use in creating the service client.\n    String accountName \u003d getAccountFromAuthority(uri);\n    URI storageUri \u003d new URI(getHTTPScheme() + \":\" + PATH_DELIMITER\n        + PATH_DELIMITER + accountName);\n\n    // Create the service client with anonymous credentials.\n    String containerName \u003d getContainerFromAuthority(uri);\n    storageInteractionLayer.createBlobClient(storageUri);\n    suppressRetryPolicyInClientIfNeeded();\n\n    // Capture the container reference.\n    container \u003d storageInteractionLayer.getContainerReference(containerName);\n    rootDirectory \u003d container.getDirectoryReference(\"\");\n\n    // Check for container existence, and our ability to access it.\n    try {\n      if (!container.exists(getInstrumentedContext())) {\n        throw new AzureException(\"Container \" + containerName + \" in account \"\n            + accountName + \" not found, and we can\u0027t create \"\n            + \" it using anoynomous credentials.\");\n      }\n    } catch (StorageException ex) {\n      throw new AzureException(\"Unable to access container \" + containerName\n          + \" in account \" + accountName\n          + \" using anonymous credentials, and no credentials found for them \"\n          + \" in the configuration.\", ex);\n    }\n\n    // Accessing the storage server unauthenticated using\n    // anonymous credentials.\n    isAnonymousCredentials \u003d true;\n\n    // Configure Azure storage session.\n    configureAzureStorageSession();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}