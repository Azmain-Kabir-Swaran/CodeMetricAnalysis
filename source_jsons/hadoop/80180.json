{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractFileSystem.java",
  "functionName": "getUri",
  "functionId": "getUri___uri-URI__supportedScheme-String__authorityNeeded-boolean__defaultPort-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
  "functionStartLine": 316,
  "functionEndLine": 341,
  "numCommitsSeen": 53,
  "timeTaken": 1557,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "f1c74df922058e88791ed6971bbb96b53f6770f1",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "f1c74df922058e88791ed6971bbb96b53f6770f1": "Ybodychange",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": "Ybodychange",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private URI getUri(URI uri, String supportedScheme,\n      boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n    checkScheme(uri, supportedScheme);\n    // A file system implementation that requires authority must always\n    // specify default port\n    if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n      throw new HadoopIllegalArgumentException(\n          \"FileSystem implementation error -  default port \" + defaultPort\n              + \" is not valid\");\n    }\n    String authority \u003d uri.getAuthority();\n    if (authority \u003d\u003d null) {\n       if (authorityNeeded) {\n         throw new HadoopIllegalArgumentException(\"Uri without authority: \" + uri);\n       } else {\n         return new URI(supportedScheme + \":///\");\n       }   \n    }\n    // authority is non null  - AuthorityNeeded may be true or false.\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1 ? defaultPort : port);\n    if (port \u003d\u003d -1) { // no port supplied and default port is not specified\n      return new URI(supportedScheme, authority, \"/\", null);\n    }\n    return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private URI getUri(URI uri, String supportedScheme,\n      boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n    checkScheme(uri, supportedScheme);\n    // A file system implementation that requires authority must always\n    // specify default port\n    if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n      throw new HadoopIllegalArgumentException(\n          \"FileSystem implementation error -  default port \" + defaultPort\n              + \" is not valid\");\n    }\n    String authority \u003d uri.getAuthority();\n    if (authority \u003d\u003d null) {\n       if (authorityNeeded) {\n         throw new HadoopIllegalArgumentException(\"Uri without authority: \" + uri);\n       } else {\n         return new URI(supportedScheme + \":///\");\n       }   \n    }\n    // authority is non null  - AuthorityNeeded may be true or false.\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1 ? defaultPort : port);\n    if (port \u003d\u003d -1) { // no port supplied and default port is not specified\n      return new URI(supportedScheme, authority, \"/\", null);\n    }\n    return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private URI getUri(URI uri, String supportedScheme,\n      boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n    checkScheme(uri, supportedScheme);\n    // A file system implementation that requires authority must always\n    // specify default port\n    if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n      throw new HadoopIllegalArgumentException(\n          \"FileSystem implementation error -  default port \" + defaultPort\n              + \" is not valid\");\n    }\n    String authority \u003d uri.getAuthority();\n    if (authority \u003d\u003d null) {\n       if (authorityNeeded) {\n         throw new HadoopIllegalArgumentException(\"Uri without authority: \" + uri);\n       } else {\n         return new URI(supportedScheme + \":///\");\n       }   \n    }\n    // authority is non null  - AuthorityNeeded may be true or false.\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1 ? defaultPort : port);\n    if (port \u003d\u003d -1) { // no port supplied and default port is not specified\n      return new URI(supportedScheme, authority, \"/\", null);\n    }\n    return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/AbstractFileSystem.java"
      }
    },
    "f1c74df922058e88791ed6971bbb96b53f6770f1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7257 Client side mount tables (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100026 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/11 7:11 PM",
      "commitName": "f1c74df922058e88791ed6971bbb96b53f6770f1",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "12/04/11 5:42 PM",
      "commitNameOld": "d03e5b75bc03b4fd11917c9950749856f0333af2",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 23.06,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   private URI getUri(URI uri, String supportedScheme,\n       boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n     checkScheme(uri, supportedScheme);\n     // A file system implementation that requires authority must always\n     // specify default port\n     if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n       throw new HadoopIllegalArgumentException(\n           \"FileSystem implementation error -  default port \" + defaultPort\n               + \" is not valid\");\n     }\n     String authority \u003d uri.getAuthority();\n-    if (!authorityNeeded) {\n-      if (authority !\u003d null) {\n-        throw new HadoopIllegalArgumentException(\"Scheme with non-null authority: \"\n-            + uri);\n-      }\n-      return new URI(supportedScheme + \":///\");\n-    }\n     if (authority \u003d\u003d null) {\n-      throw new HadoopIllegalArgumentException(\"Uri without authority: \" + uri);\n+       if (authorityNeeded) {\n+         throw new HadoopIllegalArgumentException(\"Uri without authority: \" + uri);\n+       } else {\n+         return new URI(supportedScheme + \":///\");\n+       }   \n     }\n+    // authority is non null  - AuthorityNeeded may be true or false.\n     int port \u003d uri.getPort();\n-    port \u003d port \u003d\u003d -1 ? defaultPort : port;\n+    port \u003d (port \u003d\u003d -1 ? defaultPort : port);\n+    if (port \u003d\u003d -1) { // no port supplied and default port is not specified\n+      return new URI(supportedScheme, authority, \"/\", null);\n+    }\n     return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI getUri(URI uri, String supportedScheme,\n      boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n    checkScheme(uri, supportedScheme);\n    // A file system implementation that requires authority must always\n    // specify default port\n    if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n      throw new HadoopIllegalArgumentException(\n          \"FileSystem implementation error -  default port \" + defaultPort\n              + \" is not valid\");\n    }\n    String authority \u003d uri.getAuthority();\n    if (authority \u003d\u003d null) {\n       if (authorityNeeded) {\n         throw new HadoopIllegalArgumentException(\"Uri without authority: \" + uri);\n       } else {\n         return new URI(supportedScheme + \":///\");\n       }   \n    }\n    // authority is non null  - AuthorityNeeded may be true or false.\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1 ? defaultPort : port);\n    if (port \u003d\u003d -1) { // no port supplied and default port is not specified\n      return new URI(supportedScheme, authority, \"/\", null);\n    }\n    return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {}
    },
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": {
      "type": "Ybodychange",
      "commitMessage": "   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem\n   (Suresh Srinivas via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/10 6:48 PM",
      "commitName": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "16/02/10 1:43 PM",
      "commitNameOld": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 14.21,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private URI getUri(URI uri, String supportedScheme,\n       boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n     checkScheme(uri, supportedScheme);\n-    // A filesystem implementation that requires authority must always\n+    // A file system implementation that requires authority must always\n     // specify default port\n     if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n-      throw new IllegalArgumentException(\n+      throw new HadoopIllegalArgumentException(\n           \"FileSystem implementation error -  default port \" + defaultPort\n               + \" is not valid\");\n     }\n     String authority \u003d uri.getAuthority();\n     if (!authorityNeeded) {\n       if (authority !\u003d null) {\n-        throw new IllegalArgumentException(\"Scheme with non-null authority: \"\n+        throw new HadoopIllegalArgumentException(\"Scheme with non-null authority: \"\n             + uri);\n       }\n       return new URI(supportedScheme + \":///\");\n     }\n     if (authority \u003d\u003d null) {\n-      throw new IllegalArgumentException(\"Uri without authority: \" + uri);\n+      throw new HadoopIllegalArgumentException(\"Uri without authority: \" + uri);\n     }\n     int port \u003d uri.getPort();\n     port \u003d port \u003d\u003d -1 ? defaultPort : port;\n     return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI getUri(URI uri, String supportedScheme,\n      boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n    checkScheme(uri, supportedScheme);\n    // A file system implementation that requires authority must always\n    // specify default port\n    if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n      throw new HadoopIllegalArgumentException(\n          \"FileSystem implementation error -  default port \" + defaultPort\n              + \" is not valid\");\n    }\n    String authority \u003d uri.getAuthority();\n    if (!authorityNeeded) {\n      if (authority !\u003d null) {\n        throw new HadoopIllegalArgumentException(\"Scheme with non-null authority: \"\n            + uri);\n      }\n      return new URI(supportedScheme + \":///\");\n    }\n    if (authority \u003d\u003d null) {\n      throw new HadoopIllegalArgumentException(\"Uri without authority: \" + uri);\n    }\n    int port \u003d uri.getPort();\n    port \u003d port \u003d\u003d -1 ? defaultPort : port;\n    return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java",
      "extendedDetails": {}
    },
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": {
      "type": "Yintroduced",
      "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 3:24 PM",
      "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,25 @@\n+  private URI getUri(URI uri, String supportedScheme,\n+      boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n+    checkScheme(uri, supportedScheme);\n+    // A filesystem implementation that requires authority must always\n+    // specify default port\n+    if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n+      throw new IllegalArgumentException(\n+          \"FileSystem implementation error -  default port \" + defaultPort\n+              + \" is not valid\");\n+    }\n+    String authority \u003d uri.getAuthority();\n+    if (!authorityNeeded) {\n+      if (authority !\u003d null) {\n+        throw new IllegalArgumentException(\"Scheme with non-null authority: \"\n+            + uri);\n+      }\n+      return new URI(supportedScheme + \":///\");\n+    }\n+    if (authority \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"Uri without authority: \" + uri);\n+    }\n+    int port \u003d uri.getPort();\n+    port \u003d port \u003d\u003d -1 ? defaultPort : port;\n+    return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private URI getUri(URI uri, String supportedScheme,\n      boolean authorityNeeded, int defaultPort) throws URISyntaxException {\n    checkScheme(uri, supportedScheme);\n    // A filesystem implementation that requires authority must always\n    // specify default port\n    if (defaultPort \u003c 0 \u0026\u0026 authorityNeeded) {\n      throw new IllegalArgumentException(\n          \"FileSystem implementation error -  default port \" + defaultPort\n              + \" is not valid\");\n    }\n    String authority \u003d uri.getAuthority();\n    if (!authorityNeeded) {\n      if (authority !\u003d null) {\n        throw new IllegalArgumentException(\"Scheme with non-null authority: \"\n            + uri);\n      }\n      return new URI(supportedScheme + \":///\");\n    }\n    if (authority \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Uri without authority: \" + uri);\n    }\n    int port \u003d uri.getPort();\n    port \u003d port \u003d\u003d -1 ? defaultPort : port;\n    return new URI(supportedScheme + \"://\" + uri.getHost() + \":\" + port);\n  }",
      "path": "src/java/org/apache/hadoop/fs/AbstractFileSystem.java"
    }
  }
}