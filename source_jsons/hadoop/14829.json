{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineEditsBinaryLoader.java",
  "functionName": "loadEdits",
  "functionId": "loadEdits",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
  "functionStartLine": 62,
  "functionEndLine": 107,
  "numCommitsSeen": 14,
  "timeTaken": 6618,
  "changeHistory": [
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "9dab514b22f49322738935cfd915c2b4eba50b88",
    "fd24c6e83357d4d3c937e112328a1eb378327eb0",
    "2b8824853be05f2aea9f9bcc1a8a2dba52871b65",
    "6702d5dbd4f8d778daa0bcefdf7db7fb469a771e",
    "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "9dab514b22f49322738935cfd915c2b4eba50b88": "Ybodychange",
    "fd24c6e83357d4d3c937e112328a1eb378327eb0": "Ybodychange",
    "2b8824853be05f2aea9f9bcc1a8a2dba52871b65": "Ybodychange",
    "6702d5dbd4f8d778daa0bcefdf7db7fb469a771e": "Ybodychange",
    "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5": "Ymultichange(Ymovefromfile,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "24/03/14 4:32 PM",
      "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 1626.93,
      "commitsBetweenForRepo": 12428,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void loadEdits() throws IOException {\n     try {\n       visitor.start(inputStream.getVersion(true));\n       while (true) {\n         try {\n           FSEditLogOp op \u003d inputStream.readOp();\n           if (op \u003d\u003d null)\n             break;\n           if (fixTxIds) {\n             if (nextTxId \u003c\u003d 0) {\n               nextTxId \u003d op.getTransactionId();\n               if (nextTxId \u003c\u003d 0) {\n                 nextTxId \u003d 1;\n               }\n             }\n             op.setTransactionId(nextTxId);\n             nextTxId++;\n           }\n           visitor.visitOp(op);\n         } catch (IOException e) {\n           if (!recoveryMode) {\n             // Tell the visitor to clean up, then re-throw the exception\n             LOG.error(\"Got IOException at position \" +\n               inputStream.getPosition());\n             visitor.close(e);\n             throw e;\n           }\n           LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n           inputStream.resync();\n         } catch (RuntimeException e) {\n           if (!recoveryMode) {\n             // Tell the visitor to clean up, then re-throw the exception\n             LOG.error(\"Got RuntimeException at position \" +\n               inputStream.getPosition());\n             visitor.close(e);\n             throw e;\n           }\n           LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n           inputStream.resync();\n         }\n       }\n       visitor.close(null);\n     } finally {\n-      IOUtils.cleanup(LOG, inputStream);\n+      IOUtils.cleanupWithLogger(LOG, inputStream);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void loadEdits() throws IOException {\n    try {\n      visitor.start(inputStream.getVersion(true));\n      while (true) {\n        try {\n          FSEditLogOp op \u003d inputStream.readOp();\n          if (op \u003d\u003d null)\n            break;\n          if (fixTxIds) {\n            if (nextTxId \u003c\u003d 0) {\n              nextTxId \u003d op.getTransactionId();\n              if (nextTxId \u003c\u003d 0) {\n                nextTxId \u003d 1;\n              }\n            }\n            op.setTransactionId(nextTxId);\n            nextTxId++;\n          }\n          visitor.visitOp(op);\n        } catch (IOException e) {\n          if (!recoveryMode) {\n            // Tell the visitor to clean up, then re-throw the exception\n            LOG.error(\"Got IOException at position \" +\n              inputStream.getPosition());\n            visitor.close(e);\n            throw e;\n          }\n          LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n          inputStream.resync();\n        } catch (RuntimeException e) {\n          if (!recoveryMode) {\n            // Tell the visitor to clean up, then re-throw the exception\n            LOG.error(\"Got RuntimeException at position \" +\n              inputStream.getPosition());\n            visitor.close(e);\n            throw e;\n          }\n          LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n          inputStream.resync();\n        }\n      }\n      visitor.close(null);\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, inputStream);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
      "extendedDetails": {}
    },
    "9dab514b22f49322738935cfd915c2b4eba50b88": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6038. Allow JournalNode to handle editlog produced by new release with future layoutversion. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579813 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/03/14 4:06 PM",
      "commitName": "9dab514b22f49322738935cfd915c2b4eba50b88",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "22/04/13 6:18 PM",
      "commitNameOld": "fd24c6e83357d4d3c937e112328a1eb378327eb0",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 331.91,
      "commitsBetweenForRepo": 2229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void loadEdits() throws IOException {\n     try {\n-      visitor.start(inputStream.getVersion());\n+      visitor.start(inputStream.getVersion(true));\n       while (true) {\n         try {\n           FSEditLogOp op \u003d inputStream.readOp();\n           if (op \u003d\u003d null)\n             break;\n           if (fixTxIds) {\n             if (nextTxId \u003c\u003d 0) {\n               nextTxId \u003d op.getTransactionId();\n               if (nextTxId \u003c\u003d 0) {\n                 nextTxId \u003d 1;\n               }\n             }\n             op.setTransactionId(nextTxId);\n             nextTxId++;\n           }\n           visitor.visitOp(op);\n         } catch (IOException e) {\n           if (!recoveryMode) {\n             // Tell the visitor to clean up, then re-throw the exception\n             LOG.error(\"Got IOException at position \" +\n               inputStream.getPosition());\n             visitor.close(e);\n             throw e;\n           }\n           LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n           inputStream.resync();\n         } catch (RuntimeException e) {\n           if (!recoveryMode) {\n             // Tell the visitor to clean up, then re-throw the exception\n             LOG.error(\"Got RuntimeException at position \" +\n               inputStream.getPosition());\n             visitor.close(e);\n             throw e;\n           }\n           LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n           inputStream.resync();\n         }\n       }\n       visitor.close(null);\n     } finally {\n       IOUtils.cleanup(LOG, inputStream);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void loadEdits() throws IOException {\n    try {\n      visitor.start(inputStream.getVersion(true));\n      while (true) {\n        try {\n          FSEditLogOp op \u003d inputStream.readOp();\n          if (op \u003d\u003d null)\n            break;\n          if (fixTxIds) {\n            if (nextTxId \u003c\u003d 0) {\n              nextTxId \u003d op.getTransactionId();\n              if (nextTxId \u003c\u003d 0) {\n                nextTxId \u003d 1;\n              }\n            }\n            op.setTransactionId(nextTxId);\n            nextTxId++;\n          }\n          visitor.visitOp(op);\n        } catch (IOException e) {\n          if (!recoveryMode) {\n            // Tell the visitor to clean up, then re-throw the exception\n            LOG.error(\"Got IOException at position \" +\n              inputStream.getPosition());\n            visitor.close(e);\n            throw e;\n          }\n          LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n          inputStream.resync();\n        } catch (RuntimeException e) {\n          if (!recoveryMode) {\n            // Tell the visitor to clean up, then re-throw the exception\n            LOG.error(\"Got RuntimeException at position \" +\n              inputStream.getPosition());\n            visitor.close(e);\n            throw e;\n          }\n          LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n          inputStream.resync();\n        }\n      }\n      visitor.close(null);\n    } finally {\n      IOUtils.cleanup(LOG, inputStream);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
      "extendedDetails": {}
    },
    "fd24c6e83357d4d3c937e112328a1eb378327eb0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4725. Fix HDFS file handle leaks in FSEditLog, NameNode, OfflineEditsBinaryLoader and some tests.  Contributed by Chris Nauroth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1470771 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 6:18 PM",
      "commitName": "fd24c6e83357d4d3c937e112328a1eb378327eb0",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/11/12 5:38 PM",
      "commitNameOld": "2b8824853be05f2aea9f9bcc1a8a2dba52871b65",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 145.99,
      "commitsBetweenForRepo": 693,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,46 @@\n   public void loadEdits() throws IOException {\n-    visitor.start(inputStream.getVersion());\n-    while (true) {\n-      try {\n-        FSEditLogOp op \u003d inputStream.readOp();\n-        if (op \u003d\u003d null)\n-          break;\n-        if (fixTxIds) {\n-          if (nextTxId \u003c\u003d 0) {\n-            nextTxId \u003d op.getTransactionId();\n+    try {\n+      visitor.start(inputStream.getVersion());\n+      while (true) {\n+        try {\n+          FSEditLogOp op \u003d inputStream.readOp();\n+          if (op \u003d\u003d null)\n+            break;\n+          if (fixTxIds) {\n             if (nextTxId \u003c\u003d 0) {\n-              nextTxId \u003d 1;\n+              nextTxId \u003d op.getTransactionId();\n+              if (nextTxId \u003c\u003d 0) {\n+                nextTxId \u003d 1;\n+              }\n             }\n+            op.setTransactionId(nextTxId);\n+            nextTxId++;\n           }\n-          op.setTransactionId(nextTxId);\n-          nextTxId++;\n+          visitor.visitOp(op);\n+        } catch (IOException e) {\n+          if (!recoveryMode) {\n+            // Tell the visitor to clean up, then re-throw the exception\n+            LOG.error(\"Got IOException at position \" +\n+              inputStream.getPosition());\n+            visitor.close(e);\n+            throw e;\n+          }\n+          LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n+          inputStream.resync();\n+        } catch (RuntimeException e) {\n+          if (!recoveryMode) {\n+            // Tell the visitor to clean up, then re-throw the exception\n+            LOG.error(\"Got RuntimeException at position \" +\n+              inputStream.getPosition());\n+            visitor.close(e);\n+            throw e;\n+          }\n+          LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n+          inputStream.resync();\n         }\n-        visitor.visitOp(op);\n-      } catch (IOException e) {\n-        if (!recoveryMode) {\n-          // Tell the visitor to clean up, then re-throw the exception\n-          LOG.error(\"Got IOException at position \" + inputStream.getPosition());\n-          visitor.close(e);\n-          throw e;\n-        }\n-        LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n-        inputStream.resync();\n-      } catch (RuntimeException e) {\n-        if (!recoveryMode) {\n-          // Tell the visitor to clean up, then re-throw the exception\n-          LOG.error(\"Got RuntimeException at position \" + inputStream.getPosition());\n-          visitor.close(e);\n-          throw e;\n-        }\n-        LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n-        inputStream.resync();\n       }\n+      visitor.close(null);\n+    } finally {\n+      IOUtils.cleanup(LOG, inputStream);\n     }\n-    visitor.close(null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void loadEdits() throws IOException {\n    try {\n      visitor.start(inputStream.getVersion());\n      while (true) {\n        try {\n          FSEditLogOp op \u003d inputStream.readOp();\n          if (op \u003d\u003d null)\n            break;\n          if (fixTxIds) {\n            if (nextTxId \u003c\u003d 0) {\n              nextTxId \u003d op.getTransactionId();\n              if (nextTxId \u003c\u003d 0) {\n                nextTxId \u003d 1;\n              }\n            }\n            op.setTransactionId(nextTxId);\n            nextTxId++;\n          }\n          visitor.visitOp(op);\n        } catch (IOException e) {\n          if (!recoveryMode) {\n            // Tell the visitor to clean up, then re-throw the exception\n            LOG.error(\"Got IOException at position \" +\n              inputStream.getPosition());\n            visitor.close(e);\n            throw e;\n          }\n          LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n          inputStream.resync();\n        } catch (RuntimeException e) {\n          if (!recoveryMode) {\n            // Tell the visitor to clean up, then re-throw the exception\n            LOG.error(\"Got RuntimeException at position \" +\n              inputStream.getPosition());\n            visitor.close(e);\n            throw e;\n          }\n          LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n          inputStream.resync();\n        }\n      }\n      visitor.close(null);\n    } finally {\n      IOUtils.cleanup(LOG, inputStream);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
      "extendedDetails": {}
    },
    "2b8824853be05f2aea9f9bcc1a8a2dba52871b65": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4214. OfflineEditsViewer should print out the offset at which it encountered an error. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1414500 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/12 5:38 PM",
      "commitName": "2b8824853be05f2aea9f9bcc1a8a2dba52871b65",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "15/07/12 7:58 PM",
      "commitNameOld": "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 134.94,
      "commitsBetweenForRepo": 772,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   public void loadEdits() throws IOException {\n     visitor.start(inputStream.getVersion());\n     while (true) {\n       try {\n         FSEditLogOp op \u003d inputStream.readOp();\n         if (op \u003d\u003d null)\n           break;\n         if (fixTxIds) {\n           if (nextTxId \u003c\u003d 0) {\n             nextTxId \u003d op.getTransactionId();\n             if (nextTxId \u003c\u003d 0) {\n               nextTxId \u003d 1;\n             }\n           }\n           op.setTransactionId(nextTxId);\n           nextTxId++;\n         }\n         visitor.visitOp(op);\n       } catch (IOException e) {\n         if (!recoveryMode) {\n           // Tell the visitor to clean up, then re-throw the exception\n+          LOG.error(\"Got IOException at position \" + inputStream.getPosition());\n           visitor.close(e);\n           throw e;\n         }\n         LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n         inputStream.resync();\n       } catch (RuntimeException e) {\n         if (!recoveryMode) {\n           // Tell the visitor to clean up, then re-throw the exception\n+          LOG.error(\"Got RuntimeException at position \" + inputStream.getPosition());\n           visitor.close(e);\n           throw e;\n         }\n         LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n         inputStream.resync();\n       }\n     }\n     visitor.close(null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void loadEdits() throws IOException {\n    visitor.start(inputStream.getVersion());\n    while (true) {\n      try {\n        FSEditLogOp op \u003d inputStream.readOp();\n        if (op \u003d\u003d null)\n          break;\n        if (fixTxIds) {\n          if (nextTxId \u003c\u003d 0) {\n            nextTxId \u003d op.getTransactionId();\n            if (nextTxId \u003c\u003d 0) {\n              nextTxId \u003d 1;\n            }\n          }\n          op.setTransactionId(nextTxId);\n          nextTxId++;\n        }\n        visitor.visitOp(op);\n      } catch (IOException e) {\n        if (!recoveryMode) {\n          // Tell the visitor to clean up, then re-throw the exception\n          LOG.error(\"Got IOException at position \" + inputStream.getPosition());\n          visitor.close(e);\n          throw e;\n        }\n        LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n        inputStream.resync();\n      } catch (RuntimeException e) {\n        if (!recoveryMode) {\n          // Tell the visitor to clean up, then re-throw the exception\n          LOG.error(\"Got RuntimeException at position \" + inputStream.getPosition());\n          visitor.close(e);\n          throw e;\n        }\n        LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n        inputStream.resync();\n      }\n    }\n    visitor.close(null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
      "extendedDetails": {}
    },
    "6702d5dbd4f8d778daa0bcefdf7db7fb469a771e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3372. offlineEditsViewer should be able to read a binary edits file with recovery mode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349628 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/12 8:31 PM",
      "commitName": "6702d5dbd4f8d778daa0bcefdf7db7fb469a771e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "04/04/12 5:02 PM",
      "commitNameOld": "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 69.15,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,38 @@\n   public void loadEdits() throws IOException {\n-    try {\n-      visitor.start(inputStream.getVersion());\n-      while (true) {\n+    visitor.start(inputStream.getVersion());\n+    while (true) {\n+      try {\n         FSEditLogOp op \u003d inputStream.readOp();\n         if (op \u003d\u003d null)\n           break;\n         if (fixTxIds) {\n           if (nextTxId \u003c\u003d 0) {\n             nextTxId \u003d op.getTransactionId();\n             if (nextTxId \u003c\u003d 0) {\n               nextTxId \u003d 1;\n             }\n           }\n           op.setTransactionId(nextTxId);\n           nextTxId++;\n         }\n         visitor.visitOp(op);\n+      } catch (IOException e) {\n+        if (!recoveryMode) {\n+          // Tell the visitor to clean up, then re-throw the exception\n+          visitor.close(e);\n+          throw e;\n+        }\n+        LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n+        inputStream.resync();\n+      } catch (RuntimeException e) {\n+        if (!recoveryMode) {\n+          // Tell the visitor to clean up, then re-throw the exception\n+          visitor.close(e);\n+          throw e;\n+        }\n+        LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n+        inputStream.resync();\n       }\n-      visitor.close(null);\n-    } catch(IOException e) {\n-      // Tell the visitor to clean up, then re-throw the exception\n-      visitor.close(e);\n-      throw e;\n     }\n+    visitor.close(null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void loadEdits() throws IOException {\n    visitor.start(inputStream.getVersion());\n    while (true) {\n      try {\n        FSEditLogOp op \u003d inputStream.readOp();\n        if (op \u003d\u003d null)\n          break;\n        if (fixTxIds) {\n          if (nextTxId \u003c\u003d 0) {\n            nextTxId \u003d op.getTransactionId();\n            if (nextTxId \u003c\u003d 0) {\n              nextTxId \u003d 1;\n            }\n          }\n          op.setTransactionId(nextTxId);\n          nextTxId++;\n        }\n        visitor.visitOp(op);\n      } catch (IOException e) {\n        if (!recoveryMode) {\n          // Tell the visitor to clean up, then re-throw the exception\n          visitor.close(e);\n          throw e;\n        }\n        LOG.error(\"Got IOException while reading stream!  Resyncing.\", e);\n        inputStream.resync();\n      } catch (RuntimeException e) {\n        if (!recoveryMode) {\n          // Tell the visitor to clean up, then re-throw the exception\n          visitor.close(e);\n          throw e;\n        }\n        LOG.error(\"Got RuntimeException while reading stream!  Resyncing.\", e);\n        inputStream.resync();\n      }\n    }\n    visitor.close(null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
      "extendedDetails": {}
    },
    "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-3050. rework OEV to share more code with the NameNode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 5:02 PM",
      "commitName": "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5",
      "commitAuthor": "Eli Collins",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-3050. rework OEV to share more code with the NameNode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309629 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/04/12 5:02 PM",
          "commitName": "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "04/04/12 4:36 PM",
          "commitNameOld": "8a109ebebbf01e26339016aff9e77397b7b6b87f",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,26 @@\n   public void loadEdits() throws IOException {\n-\n     try {\n-      v.start();\n-      v.visitEnclosingElement(EditsElement.EDITS);\n-\n-      IntToken editsVersionToken \u003d v.visitInt(EditsElement.EDITS_VERSION);\n-      editsVersion \u003d editsVersionToken.value;\n-      if(!canLoadVersion(editsVersion)) {\n-        throw new IOException(\"Cannot process editLog version \" +\n-          editsVersionToken.value);\n+      visitor.start(inputStream.getVersion());\n+      while (true) {\n+        FSEditLogOp op \u003d inputStream.readOp();\n+        if (op \u003d\u003d null)\n+          break;\n+        if (fixTxIds) {\n+          if (nextTxId \u003c\u003d 0) {\n+            nextTxId \u003d op.getTransactionId();\n+            if (nextTxId \u003c\u003d 0) {\n+              nextTxId \u003d 1;\n+            }\n+          }\n+          op.setTransactionId(nextTxId);\n+          nextTxId++;\n+        }\n+        visitor.visitOp(op);\n       }\n-\n-      FSEditLogOpCodes editsOpCode;\n-      do {\n-        v.visitEnclosingElement(EditsElement.RECORD);\n-\n-        ByteToken opCodeToken;\n-        try {\n-          opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n-        } catch (EOFException eof) {\n-          // Getting EOF when reading the opcode is fine --\n-          // it\u0027s just a finalized edits file\n-          // Just fake the OP_INVALID here.\n-          opCodeToken \u003d new ByteToken(EditsElement.OPCODE);\n-          opCodeToken.fromByte(FSEditLogOpCodes.OP_INVALID.getOpCode());\n-          v.visit(opCodeToken);\n-        }\n-        editsOpCode \u003d FSEditLogOpCodes.fromByte(opCodeToken.value);\n-\n-        v.visitEnclosingElement(EditsElement.DATA);\n-\n-        visitOpCode(editsOpCode);\n-\n-        v.leaveEnclosingElement(); // DATA\n-        \n-        if (editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID \u0026\u0026 \n-            LayoutVersion.supports(Feature.EDITS_CHESKUM, editsVersion)) {\n-          v.visitInt(EditsElement.CHECKSUM);\n-        }\n-        v.leaveEnclosingElement(); // RECORD\n-      } while(editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID);\n-\n-      v.leaveEnclosingElement(); // EDITS\n-      v.finish();\n+      visitor.close(null);\n     } catch(IOException e) {\n       // Tell the visitor to clean up, then re-throw the exception\n-      v.finishAbnormally();\n+      visitor.close(e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void loadEdits() throws IOException {\n    try {\n      visitor.start(inputStream.getVersion());\n      while (true) {\n        FSEditLogOp op \u003d inputStream.readOp();\n        if (op \u003d\u003d null)\n          break;\n        if (fixTxIds) {\n          if (nextTxId \u003c\u003d 0) {\n            nextTxId \u003d op.getTransactionId();\n            if (nextTxId \u003c\u003d 0) {\n              nextTxId \u003d 1;\n            }\n          }\n          op.setTransactionId(nextTxId);\n          nextTxId++;\n        }\n        visitor.visitOp(op);\n      }\n      visitor.close(null);\n    } catch(IOException e) {\n      // Tell the visitor to clean up, then re-throw the exception\n      visitor.close(e);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
            "oldMethodName": "loadEdits",
            "newMethodName": "loadEdits"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3050. rework OEV to share more code with the NameNode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309629 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/04/12 5:02 PM",
          "commitName": "4f6e0a5a659064e0af3bec315e7c25d5e43b47f5",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "04/04/12 4:36 PM",
          "commitNameOld": "8a109ebebbf01e26339016aff9e77397b7b6b87f",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,26 @@\n   public void loadEdits() throws IOException {\n-\n     try {\n-      v.start();\n-      v.visitEnclosingElement(EditsElement.EDITS);\n-\n-      IntToken editsVersionToken \u003d v.visitInt(EditsElement.EDITS_VERSION);\n-      editsVersion \u003d editsVersionToken.value;\n-      if(!canLoadVersion(editsVersion)) {\n-        throw new IOException(\"Cannot process editLog version \" +\n-          editsVersionToken.value);\n+      visitor.start(inputStream.getVersion());\n+      while (true) {\n+        FSEditLogOp op \u003d inputStream.readOp();\n+        if (op \u003d\u003d null)\n+          break;\n+        if (fixTxIds) {\n+          if (nextTxId \u003c\u003d 0) {\n+            nextTxId \u003d op.getTransactionId();\n+            if (nextTxId \u003c\u003d 0) {\n+              nextTxId \u003d 1;\n+            }\n+          }\n+          op.setTransactionId(nextTxId);\n+          nextTxId++;\n+        }\n+        visitor.visitOp(op);\n       }\n-\n-      FSEditLogOpCodes editsOpCode;\n-      do {\n-        v.visitEnclosingElement(EditsElement.RECORD);\n-\n-        ByteToken opCodeToken;\n-        try {\n-          opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n-        } catch (EOFException eof) {\n-          // Getting EOF when reading the opcode is fine --\n-          // it\u0027s just a finalized edits file\n-          // Just fake the OP_INVALID here.\n-          opCodeToken \u003d new ByteToken(EditsElement.OPCODE);\n-          opCodeToken.fromByte(FSEditLogOpCodes.OP_INVALID.getOpCode());\n-          v.visit(opCodeToken);\n-        }\n-        editsOpCode \u003d FSEditLogOpCodes.fromByte(opCodeToken.value);\n-\n-        v.visitEnclosingElement(EditsElement.DATA);\n-\n-        visitOpCode(editsOpCode);\n-\n-        v.leaveEnclosingElement(); // DATA\n-        \n-        if (editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID \u0026\u0026 \n-            LayoutVersion.supports(Feature.EDITS_CHESKUM, editsVersion)) {\n-          v.visitInt(EditsElement.CHECKSUM);\n-        }\n-        v.leaveEnclosingElement(); // RECORD\n-      } while(editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID);\n-\n-      v.leaveEnclosingElement(); // EDITS\n-      v.finish();\n+      visitor.close(null);\n     } catch(IOException e) {\n       // Tell the visitor to clean up, then re-throw the exception\n-      v.finishAbnormally();\n+      visitor.close(e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void loadEdits() throws IOException {\n    try {\n      visitor.start(inputStream.getVersion());\n      while (true) {\n        FSEditLogOp op \u003d inputStream.readOp();\n        if (op \u003d\u003d null)\n          break;\n        if (fixTxIds) {\n          if (nextTxId \u003c\u003d 0) {\n            nextTxId \u003d op.getTransactionId();\n            if (nextTxId \u003c\u003d 0) {\n              nextTxId \u003d 1;\n            }\n          }\n          op.setTransactionId(nextTxId);\n          nextTxId++;\n        }\n        visitor.visitOp(op);\n      }\n      visitor.close(null);\n    } catch(IOException e) {\n      // Tell the visitor to clean up, then re-throw the exception\n      visitor.close(e);\n      throw e;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/OfflineEditsBinaryLoader.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void loadEdits() throws IOException {\n\n    try {\n      v.start();\n      v.visitEnclosingElement(EditsElement.EDITS);\n\n      IntToken editsVersionToken \u003d v.visitInt(EditsElement.EDITS_VERSION);\n      editsVersion \u003d editsVersionToken.value;\n      if(!canLoadVersion(editsVersion)) {\n        throw new IOException(\"Cannot process editLog version \" +\n          editsVersionToken.value);\n      }\n\n      FSEditLogOpCodes editsOpCode;\n      do {\n        v.visitEnclosingElement(EditsElement.RECORD);\n\n        ByteToken opCodeToken;\n        try {\n          opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n        } catch (EOFException eof) {\n          // Getting EOF when reading the opcode is fine --\n          // it\u0027s just a finalized edits file\n          // Just fake the OP_INVALID here.\n          opCodeToken \u003d new ByteToken(EditsElement.OPCODE);\n          opCodeToken.fromByte(FSEditLogOpCodes.OP_INVALID.getOpCode());\n          v.visit(opCodeToken);\n        }\n        editsOpCode \u003d FSEditLogOpCodes.fromByte(opCodeToken.value);\n\n        v.visitEnclosingElement(EditsElement.DATA);\n\n        visitOpCode(editsOpCode);\n\n        v.leaveEnclosingElement(); // DATA\n        \n        if (editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID \u0026\u0026 \n            LayoutVersion.supports(Feature.EDITS_CHESKUM, editsVersion)) {\n          v.visitInt(EditsElement.CHECKSUM);\n        }\n        v.leaveEnclosingElement(); // RECORD\n      } while(editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID);\n\n      v.leaveEnclosingElement(); // EDITS\n      v.finish();\n    } catch(IOException e) {\n      // Tell the visitor to clean up, then re-throw the exception\n      v.finishAbnormally();\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void loadEdits() throws IOException {\n\n    try {\n      v.start();\n      v.visitEnclosingElement(EditsElement.EDITS);\n\n      IntToken editsVersionToken \u003d v.visitInt(EditsElement.EDITS_VERSION);\n      editsVersion \u003d editsVersionToken.value;\n      if(!canLoadVersion(editsVersion)) {\n        throw new IOException(\"Cannot process editLog version \" +\n          editsVersionToken.value);\n      }\n\n      FSEditLogOpCodes editsOpCode;\n      do {\n        v.visitEnclosingElement(EditsElement.RECORD);\n\n        ByteToken opCodeToken;\n        try {\n          opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n        } catch (EOFException eof) {\n          // Getting EOF when reading the opcode is fine --\n          // it\u0027s just a finalized edits file\n          // Just fake the OP_INVALID here.\n          opCodeToken \u003d new ByteToken(EditsElement.OPCODE);\n          opCodeToken.fromByte(FSEditLogOpCodes.OP_INVALID.getOpCode());\n          v.visit(opCodeToken);\n        }\n        editsOpCode \u003d FSEditLogOpCodes.fromByte(opCodeToken.value);\n\n        v.visitEnclosingElement(EditsElement.DATA);\n\n        visitOpCode(editsOpCode);\n\n        v.leaveEnclosingElement(); // DATA\n        \n        if (editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID \u0026\u0026 \n            LayoutVersion.supports(Feature.EDITS_CHESKUM, editsVersion)) {\n          v.visitInt(EditsElement.CHECKSUM);\n        }\n        v.leaveEnclosingElement(); // RECORD\n      } while(editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID);\n\n      v.leaveEnclosingElement(); // EDITS\n      v.finish();\n    } catch(IOException e) {\n      // Tell the visitor to clean up, then re-throw the exception\n      v.finishAbnormally();\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 46.77,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,51 @@\n   public void loadEdits() throws IOException {\n \n     try {\n       v.start();\n       v.visitEnclosingElement(EditsElement.EDITS);\n \n       IntToken editsVersionToken \u003d v.visitInt(EditsElement.EDITS_VERSION);\n       editsVersion \u003d editsVersionToken.value;\n       if(!canLoadVersion(editsVersion)) {\n         throw new IOException(\"Cannot process editLog version \" +\n           editsVersionToken.value);\n       }\n \n       FSEditLogOpCodes editsOpCode;\n       do {\n         v.visitEnclosingElement(EditsElement.RECORD);\n \n-        ByteToken opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n+        ByteToken opCodeToken;\n+        try {\n+          opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n+        } catch (EOFException eof) {\n+          // Getting EOF when reading the opcode is fine --\n+          // it\u0027s just a finalized edits file\n+          // Just fake the OP_INVALID here.\n+          opCodeToken \u003d new ByteToken(EditsElement.OPCODE);\n+          opCodeToken.fromByte(FSEditLogOpCodes.OP_INVALID.getOpCode());\n+          v.visit(opCodeToken);\n+        }\n         editsOpCode \u003d FSEditLogOpCodes.fromByte(opCodeToken.value);\n \n         v.visitEnclosingElement(EditsElement.DATA);\n \n         visitOpCode(editsOpCode);\n \n         v.leaveEnclosingElement(); // DATA\n         \n         if (editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID \u0026\u0026 \n             LayoutVersion.supports(Feature.EDITS_CHESKUM, editsVersion)) {\n           v.visitInt(EditsElement.CHECKSUM);\n         }\n         v.leaveEnclosingElement(); // RECORD\n       } while(editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID);\n \n       v.leaveEnclosingElement(); // EDITS\n       v.finish();\n     } catch(IOException e) {\n       // Tell the visitor to clean up, then re-throw the exception\n       v.finishAbnormally();\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void loadEdits() throws IOException {\n\n    try {\n      v.start();\n      v.visitEnclosingElement(EditsElement.EDITS);\n\n      IntToken editsVersionToken \u003d v.visitInt(EditsElement.EDITS_VERSION);\n      editsVersion \u003d editsVersionToken.value;\n      if(!canLoadVersion(editsVersion)) {\n        throw new IOException(\"Cannot process editLog version \" +\n          editsVersionToken.value);\n      }\n\n      FSEditLogOpCodes editsOpCode;\n      do {\n        v.visitEnclosingElement(EditsElement.RECORD);\n\n        ByteToken opCodeToken;\n        try {\n          opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n        } catch (EOFException eof) {\n          // Getting EOF when reading the opcode is fine --\n          // it\u0027s just a finalized edits file\n          // Just fake the OP_INVALID here.\n          opCodeToken \u003d new ByteToken(EditsElement.OPCODE);\n          opCodeToken.fromByte(FSEditLogOpCodes.OP_INVALID.getOpCode());\n          v.visit(opCodeToken);\n        }\n        editsOpCode \u003d FSEditLogOpCodes.fromByte(opCodeToken.value);\n\n        v.visitEnclosingElement(EditsElement.DATA);\n\n        visitOpCode(editsOpCode);\n\n        v.leaveEnclosingElement(); // DATA\n        \n        if (editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID \u0026\u0026 \n            LayoutVersion.supports(Feature.EDITS_CHESKUM, editsVersion)) {\n          v.visitInt(EditsElement.CHECKSUM);\n        }\n        v.leaveEnclosingElement(); // RECORD\n      } while(editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID);\n\n      v.leaveEnclosingElement(); // EDITS\n      v.finish();\n    } catch(IOException e) {\n      // Tell the visitor to clean up, then re-throw the exception\n      v.finishAbnormally();\n      throw e;\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,41 @@\n+  public void loadEdits() throws IOException {\n+\n+    try {\n+      v.start();\n+      v.visitEnclosingElement(EditsElement.EDITS);\n+\n+      IntToken editsVersionToken \u003d v.visitInt(EditsElement.EDITS_VERSION);\n+      editsVersion \u003d editsVersionToken.value;\n+      if(!canLoadVersion(editsVersion)) {\n+        throw new IOException(\"Cannot process editLog version \" +\n+          editsVersionToken.value);\n+      }\n+\n+      FSEditLogOpCodes editsOpCode;\n+      do {\n+        v.visitEnclosingElement(EditsElement.RECORD);\n+\n+        ByteToken opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n+        editsOpCode \u003d FSEditLogOpCodes.fromByte(opCodeToken.value);\n+\n+        v.visitEnclosingElement(EditsElement.DATA);\n+\n+        visitOpCode(editsOpCode);\n+\n+        v.leaveEnclosingElement(); // DATA\n+        \n+        if (editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID \u0026\u0026 \n+            LayoutVersion.supports(Feature.EDITS_CHESKUM, editsVersion)) {\n+          v.visitInt(EditsElement.CHECKSUM);\n+        }\n+        v.leaveEnclosingElement(); // RECORD\n+      } while(editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID);\n+\n+      v.leaveEnclosingElement(); // EDITS\n+      v.finish();\n+    } catch(IOException e) {\n+      // Tell the visitor to clean up, then re-throw the exception\n+      v.finishAbnormally();\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void loadEdits() throws IOException {\n\n    try {\n      v.start();\n      v.visitEnclosingElement(EditsElement.EDITS);\n\n      IntToken editsVersionToken \u003d v.visitInt(EditsElement.EDITS_VERSION);\n      editsVersion \u003d editsVersionToken.value;\n      if(!canLoadVersion(editsVersion)) {\n        throw new IOException(\"Cannot process editLog version \" +\n          editsVersionToken.value);\n      }\n\n      FSEditLogOpCodes editsOpCode;\n      do {\n        v.visitEnclosingElement(EditsElement.RECORD);\n\n        ByteToken opCodeToken \u003d v.visitByte(EditsElement.OPCODE);\n        editsOpCode \u003d FSEditLogOpCodes.fromByte(opCodeToken.value);\n\n        v.visitEnclosingElement(EditsElement.DATA);\n\n        visitOpCode(editsOpCode);\n\n        v.leaveEnclosingElement(); // DATA\n        \n        if (editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID \u0026\u0026 \n            LayoutVersion.supports(Feature.EDITS_CHESKUM, editsVersion)) {\n          v.visitInt(EditsElement.CHECKSUM);\n        }\n        v.leaveEnclosingElement(); // RECORD\n      } while(editsOpCode !\u003d FSEditLogOpCodes.OP_INVALID);\n\n      v.leaveEnclosingElement(); // EDITS\n      v.finish();\n    } catch(IOException e) {\n      // Tell the visitor to clean up, then re-throw the exception\n      v.finishAbnormally();\n      throw e;\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/EditsLoaderCurrent.java"
    }
  }
}