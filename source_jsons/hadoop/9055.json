{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "checkLease",
  "functionId": "checkLease___iip-INodesInPath__holder-String__fileId-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 3072,
  "functionEndLine": 3104,
  "numCommitsSeen": 1925,
  "timeTaken": 45314,
  "changeHistory": [
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "796a676d18bd7cd3ed4113d002e0e69cf261d6d1",
    "e5afac5896a1a88e152746598527d91f73cbb724",
    "c75cfa29cfc527242837d80962688aa53c111e72",
    "05af0ff4be871ddbb4c4cb4f0b5b506ecee36fb8",
    "88209ce181b5ecc55c0ae2bceff4893ab4817e88",
    "8f520386fb952b70a4e7a9c460a2ecd9b9b855b4",
    "8e8a769e7f5ce806ffdf584f017512ab58cd84e8",
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75",
    "e3d7ef36ef7dd31b295b1f1d86a1bfa7887ca771"
  ],
  "changeHistoryShort": {
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ymultichange(Yparameterchange,Ybodychange)",
    "796a676d18bd7cd3ed4113d002e0e69cf261d6d1": "Ybodychange",
    "e5afac5896a1a88e152746598527d91f73cbb724": "Ymodifierchange",
    "c75cfa29cfc527242837d80962688aa53c111e72": "Ybodychange",
    "05af0ff4be871ddbb4c4cb4f0b5b506ecee36fb8": "Ymodifierchange",
    "88209ce181b5ecc55c0ae2bceff4893ab4817e88": "Ymodifierchange",
    "8f520386fb952b70a4e7a9c460a2ecd9b9b855b4": "Ybodychange",
    "8e8a769e7f5ce806ffdf584f017512ab58cd84e8": "Ybodychange",
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc": "Ymultichange(Yparameterchange,Ybodychange)",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": "Ymultichange(Yreturntypechange,Ybodychange)",
    "e3d7ef36ef7dd31b295b1f1d86a1bfa7887ca771": "Ybodychange"
  },
  "changeHistoryDetails": {
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
          "commitDate": "17/08/16 1:53 PM",
          "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "15/08/16 3:28 PM",
          "commitNameOld": "864f878d5912c82f3204f1582cfb7eb7c9f1a1da",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 1.93,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,33 @@\n-  INodeFile checkLease(String src, String holder, INode inode, long fileId)\n+  INodeFile checkLease(INodesInPath iip, String holder, long fileId)\n       throws LeaseExpiredException, FileNotFoundException {\n+    String src \u003d iip.getPath();\n+    INode inode \u003d iip.getLastINode();\n     assert hasReadLock();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File does not exist: \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     if (!inode.isFile()) {\n       throw new LeaseExpiredException(\"INode is not a regular file: \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       throw new LeaseExpiredException(\"File is not open for writing: \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     // No further modification is allowed on a deleted file.\n     // A file is considered deleted, if it is not in the inodeMap or is marked\n     // as deleted in the snapshot feature.\n     if (isFileDeleted(file)) {\n       throw new FileNotFoundException(\"File is deleted: \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     final String owner \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !owner.equals(holder)) {\n       throw new LeaseExpiredException(\"Client (\u003d\" + holder\n           + \") is not the lease owner (\u003d\" + owner + \": \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile checkLease(INodesInPath iip, String holder, long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    String src \u003d iip.getPath();\n    INode inode \u003d iip.getLastINode();\n    assert hasReadLock();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File does not exist: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    if (!inode.isFile()) {\n      throw new LeaseExpiredException(\"INode is not a regular file: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      throw new LeaseExpiredException(\"File is not open for writing: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it is not in the inodeMap or is marked\n    // as deleted in the snapshot feature.\n    if (isFileDeleted(file)) {\n      throw new FileNotFoundException(\"File is deleted: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    final String owner \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !owner.equals(holder)) {\n      throw new LeaseExpiredException(\"Client (\u003d\" + holder\n          + \") is not the lease owner (\u003d\" + owner + \": \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    return file;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[src-String, holder-String, inode-INode, fileId-long]",
            "newValue": "[iip-INodesInPath, holder-String, fileId-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
          "commitDate": "17/08/16 1:53 PM",
          "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "15/08/16 3:28 PM",
          "commitNameOld": "864f878d5912c82f3204f1582cfb7eb7c9f1a1da",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 1.93,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,33 @@\n-  INodeFile checkLease(String src, String holder, INode inode, long fileId)\n+  INodeFile checkLease(INodesInPath iip, String holder, long fileId)\n       throws LeaseExpiredException, FileNotFoundException {\n+    String src \u003d iip.getPath();\n+    INode inode \u003d iip.getLastINode();\n     assert hasReadLock();\n     if (inode \u003d\u003d null) {\n       throw new FileNotFoundException(\"File does not exist: \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     if (!inode.isFile()) {\n       throw new LeaseExpiredException(\"INode is not a regular file: \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       throw new LeaseExpiredException(\"File is not open for writing: \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     // No further modification is allowed on a deleted file.\n     // A file is considered deleted, if it is not in the inodeMap or is marked\n     // as deleted in the snapshot feature.\n     if (isFileDeleted(file)) {\n       throw new FileNotFoundException(\"File is deleted: \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     final String owner \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !owner.equals(holder)) {\n       throw new LeaseExpiredException(\"Client (\u003d\" + holder\n           + \") is not the lease owner (\u003d\" + owner + \": \"\n           + leaseExceptionString(src, fileId, holder));\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile checkLease(INodesInPath iip, String holder, long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    String src \u003d iip.getPath();\n    INode inode \u003d iip.getLastINode();\n    assert hasReadLock();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File does not exist: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    if (!inode.isFile()) {\n      throw new LeaseExpiredException(\"INode is not a regular file: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      throw new LeaseExpiredException(\"File is not open for writing: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it is not in the inodeMap or is marked\n    // as deleted in the snapshot feature.\n    if (isFileDeleted(file)) {\n      throw new FileNotFoundException(\"File is deleted: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    final String owner \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !owner.equals(holder)) {\n      throw new LeaseExpiredException(\"Client (\u003d\" + holder\n          + \") is not the lease owner (\u003d\" + owner + \": \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    return file;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "796a676d18bd7cd3ed4113d002e0e69cf261d6d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9528. Cleanup namenode audit/log/exception messages. (szetszwo via umamahesh)\n",
      "commitDate": "11/12/15 5:57 PM",
      "commitName": "796a676d18bd7cd3ed4113d002e0e69cf261d6d1",
      "commitAuthor": "Uma Mahesh",
      "commitDateOld": "09/12/15 5:55 PM",
      "commitNameOld": "132478e805ba0f955345217b8ad87c2d17cccb2d",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,31 @@\n-  INodeFile checkLease(\n-      String src, String holder, INode inode, long fileId)\n+  INodeFile checkLease(String src, String holder, INode inode, long fileId)\n       throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n-    final String ident \u003d src + \" (inode \" + fileId + \")\";\n     if (inode \u003d\u003d null) {\n-      Lease lease \u003d leaseManager.getLease(holder);\n-      throw new FileNotFoundException(\n-          \"No lease on \" + ident + \": File does not exist. \"\n-          + (lease !\u003d null ? lease.toString()\n-              : \"Holder \" + holder + \" does not have any open files.\"));\n+      throw new FileNotFoundException(\"File does not exist: \"\n+          + leaseExceptionString(src, fileId, holder));\n     }\n     if (!inode.isFile()) {\n-      Lease lease \u003d leaseManager.getLease(holder);\n-      throw new LeaseExpiredException(\n-          \"No lease on \" + ident + \": INode is not a regular file. \"\n-              + (lease !\u003d null ? lease.toString()\n-              : \"Holder \" + holder + \" does not have any open files.\"));\n+      throw new LeaseExpiredException(\"INode is not a regular file: \"\n+          + leaseExceptionString(src, fileId, holder));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n-      Lease lease \u003d leaseManager.getLease(holder);\n-      throw new LeaseExpiredException(\n-          \"No lease on \" + ident + \": File is not open for writing. \"\n-          + (lease !\u003d null ? lease.toString()\n-              : \"Holder \" + holder + \" does not have any open files.\"));\n+      throw new LeaseExpiredException(\"File is not open for writing: \"\n+          + leaseExceptionString(src, fileId, holder));\n     }\n     // No further modification is allowed on a deleted file.\n     // A file is considered deleted, if it is not in the inodeMap or is marked\n     // as deleted in the snapshot feature.\n     if (isFileDeleted(file)) {\n-      throw new FileNotFoundException(src);\n+      throw new FileNotFoundException(\"File is deleted: \"\n+          + leaseExceptionString(src, fileId, holder));\n     }\n-    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n-    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n-      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n-          \" owned by \" + clientName + \" but is accessed by \" + holder);\n+    final String owner \u003d file.getFileUnderConstructionFeature().getClientName();\n+    if (holder !\u003d null \u0026\u0026 !owner.equals(holder)) {\n+      throw new LeaseExpiredException(\"Client (\u003d\" + holder\n+          + \") is not the lease owner (\u003d\" + owner + \": \"\n+          + leaseExceptionString(src, fileId, holder));\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeFile checkLease(String src, String holder, INode inode, long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    if (inode \u003d\u003d null) {\n      throw new FileNotFoundException(\"File does not exist: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    if (!inode.isFile()) {\n      throw new LeaseExpiredException(\"INode is not a regular file: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      throw new LeaseExpiredException(\"File is not open for writing: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it is not in the inodeMap or is marked\n    // as deleted in the snapshot feature.\n    if (isFileDeleted(file)) {\n      throw new FileNotFoundException(\"File is deleted: \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    final String owner \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !owner.equals(holder)) {\n      throw new LeaseExpiredException(\"Client (\u003d\" + holder\n          + \") is not the lease owner (\u003d\" + owner + \": \"\n          + leaseExceptionString(src, fileId, holder));\n    }\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "e5afac5896a1a88e152746598527d91f73cbb724": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-8394. Move getAdditionalBlock() and related functionalities into a separate class. Contributed by Haohui Mai.\n",
      "commitDate": "15/05/15 7:09 PM",
      "commitName": "e5afac5896a1a88e152746598527d91f73cbb724",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "14/05/15 10:37 PM",
      "commitNameOld": "3bef7c80a97709b367781180b2e11fc50653d3c8",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n-  private INodeFile checkLease(String src, String holder, INode inode,\n-      long fileId) throws LeaseExpiredException, FileNotFoundException {\n+  INodeFile checkLease(\n+      String src, String holder, INode inode, long fileId) throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n     final String ident \u003d src + \" (inode \" + fileId + \")\";\n     if (inode \u003d\u003d null) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new FileNotFoundException(\n           \"No lease on \" + ident + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     if (!inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": INode is not a regular file. \"\n               + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     // No further modification is allowed on a deleted file.\n     // A file is considered deleted, if it is not in the inodeMap or is marked\n     // as deleted in the snapshot feature.\n     if (isFileDeleted(file)) {\n       throw new FileNotFoundException(src);\n     }\n     String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n           \" owned by \" + clientName + \" but is accessed by \" + holder);\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INodeFile checkLease(\n      String src, String holder, INode inode, long fileId) throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    final String ident \u003d src + \" (inode \" + fileId + \")\";\n    if (inode \u003d\u003d null) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new FileNotFoundException(\n          \"No lease on \" + ident + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    if (!inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": INode is not a regular file. \"\n              + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it is not in the inodeMap or is marked\n    // as deleted in the snapshot feature.\n    if (isFileDeleted(file)) {\n      throw new FileNotFoundException(src);\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n          \" owned by \" + clientName + \" but is accessed by \" + holder);\n    }\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "c75cfa29cfc527242837d80962688aa53c111e72": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2484. checkLease should throw FileNotFoundException when file does not exist. Contributed by Rakesh R.",
      "commitDate": "06/05/15 4:06 PM",
      "commitName": "c75cfa29cfc527242837d80962688aa53c111e72",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 4.25,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private INodeFile checkLease(String src, String holder, INode inode,\n       long fileId) throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n     final String ident \u003d src + \" (inode \" + fileId + \")\";\n     if (inode \u003d\u003d null) {\n       Lease lease \u003d leaseManager.getLease(holder);\n-      throw new LeaseExpiredException(\n+      throw new FileNotFoundException(\n           \"No lease on \" + ident + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     if (!inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": INode is not a regular file. \"\n               + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     // No further modification is allowed on a deleted file.\n     // A file is considered deleted, if it is not in the inodeMap or is marked\n     // as deleted in the snapshot feature.\n     if (isFileDeleted(file)) {\n       throw new FileNotFoundException(src);\n     }\n     String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n           \" owned by \" + clientName + \" but is accessed by \" + holder);\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkLease(String src, String holder, INode inode,\n      long fileId) throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    final String ident \u003d src + \" (inode \" + fileId + \")\";\n    if (inode \u003d\u003d null) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new FileNotFoundException(\n          \"No lease on \" + ident + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    if (!inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": INode is not a regular file. \"\n              + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it is not in the inodeMap or is marked\n    // as deleted in the snapshot feature.\n    if (isFileDeleted(file)) {\n      throw new FileNotFoundException(src);\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n          \" owned by \" + clientName + \" but is accessed by \" + holder);\n    }\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "05af0ff4be871ddbb4c4cb4f0b5b506ecee36fb8": {
      "type": "Ymodifierchange",
      "commitMessage": "Revert HDFS-6940.",
      "commitDate": "09/09/14 5:30 PM",
      "commitName": "05af0ff4be871ddbb4c4cb4f0b5b506ecee36fb8",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "06/09/14 12:07 PM",
      "commitNameOld": "88209ce181b5ecc55c0ae2bceff4893ab4817e88",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  protected INodeFile checkLease(String src, String holder, INode inode,\n-                                 long fileId)\n+  private INodeFile checkLease(String src, String holder, INode inode,\n+                               long fileId)\n       throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n     final String ident \u003d src + \" (inode \" + fileId + \")\";\n     if (inode \u003d\u003d null) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     if (!inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": INode is not a regular file. \"\n               + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     // No further modification is allowed on a deleted file.\n     // A file is considered deleted, if it is not in the inodeMap or is marked\n     // as deleted in the snapshot feature.\n     if (isFileDeleted(file)) {\n       throw new FileNotFoundException(src);\n     }\n     String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n           \" owned by \" + clientName + \" but is accessed by \" + holder);\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkLease(String src, String holder, INode inode,\n                               long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    final String ident \u003d src + \" (inode \" + fileId + \")\";\n    if (inode \u003d\u003d null) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    if (!inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": INode is not a regular file. \"\n              + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it is not in the inodeMap or is marked\n    // as deleted in the snapshot feature.\n    if (isFileDeleted(file)) {\n      throw new FileNotFoundException(src);\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n          \" owned by \" + clientName + \" but is accessed by \" + holder);\n    }\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[private]"
      }
    },
    "88209ce181b5ecc55c0ae2bceff4893ab4817e88": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-6940. Refactoring to allow ConsensusNode implementation.\nContributed by Konstantin Shvachko.",
      "commitDate": "06/09/14 12:07 PM",
      "commitName": "88209ce181b5ecc55c0ae2bceff4893ab4817e88",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "04/09/14 6:54 PM",
      "commitNameOld": "6104520369045dfaa4b543cbad21236ed322249b",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  private INodeFile checkLease(String src, String holder, INode inode,\n-                               long fileId)\n+  protected INodeFile checkLease(String src, String holder, INode inode,\n+                                 long fileId)\n       throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n     final String ident \u003d src + \" (inode \" + fileId + \")\";\n     if (inode \u003d\u003d null) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     if (!inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": INode is not a regular file. \"\n               + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     // No further modification is allowed on a deleted file.\n     // A file is considered deleted, if it is not in the inodeMap or is marked\n     // as deleted in the snapshot feature.\n     if (isFileDeleted(file)) {\n       throw new FileNotFoundException(src);\n     }\n     String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n           \" owned by \" + clientName + \" but is accessed by \" + holder);\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected INodeFile checkLease(String src, String holder, INode inode,\n                                 long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    final String ident \u003d src + \" (inode \" + fileId + \")\";\n    if (inode \u003d\u003d null) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    if (!inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": INode is not a regular file. \"\n              + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it is not in the inodeMap or is marked\n    // as deleted in the snapshot feature.\n    if (isFileDeleted(file)) {\n      throw new FileNotFoundException(src);\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n          \" owned by \" + clientName + \" but is accessed by \" + holder);\n    }\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "8f520386fb952b70a4e7a9c460a2ecd9b9b855b4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6647. Edit log corruption when pipeline recovery occurs for deleted file present in snapshot. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609543 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 11:18 AM",
      "commitName": "8f520386fb952b70a4e7a9c460a2ecd9b9b855b4",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "09/07/14 9:03 PM",
      "commitNameOld": "d9c5f20333ef510c0ace066c0a811f9e953e9e17",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.59,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n   private INodeFile checkLease(String src, String holder, INode inode,\n                                long fileId)\n       throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n     final String ident \u003d src + \" (inode \" + fileId + \")\";\n     if (inode \u003d\u003d null) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     if (!inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": INode is not a regular file. \"\n               + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     // No further modification is allowed on a deleted file.\n-    // A file is considered deleted, if it has no parent or is marked\n+    // A file is considered deleted, if it is not in the inodeMap or is marked\n     // as deleted in the snapshot feature.\n-    if (file.getParent() \u003d\u003d null || (file.isWithSnapshot() \u0026\u0026\n-        file.getFileWithSnapshotFeature().isCurrentFileDeleted())) {\n+    if (isFileDeleted(file)) {\n       throw new FileNotFoundException(src);\n     }\n     String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n           \" owned by \" + clientName + \" but is accessed by \" + holder);\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkLease(String src, String holder, INode inode,\n                               long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    final String ident \u003d src + \" (inode \" + fileId + \")\";\n    if (inode \u003d\u003d null) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    if (!inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": INode is not a regular file. \"\n              + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it is not in the inodeMap or is marked\n    // as deleted in the snapshot feature.\n    if (isFileDeleted(file)) {\n      throw new FileNotFoundException(src);\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n          \" owned by \" + clientName + \" but is accessed by \" + holder);\n    }\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "8e8a769e7f5ce806ffdf584f017512ab58cd84e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6527. Edit log corruption due to defered INode removal. Contributed by Kihwal Lee and Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603340 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/14 6:00 PM",
      "commitName": "8e8a769e7f5ce806ffdf584f017512ab58cd84e8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "17/06/14 10:58 AM",
      "commitNameOld": "2298f3d2418c1edc14d7b986eb4f0e5b9507f7a0",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,41 @@\n   private INodeFile checkLease(String src, String holder, INode inode,\n                                long fileId)\n       throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n     final String ident \u003d src + \" (inode \" + fileId + \")\";\n     if (inode \u003d\u003d null) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     if (!inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": INode is not a regular file. \"\n               + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + ident + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n+    // No further modification is allowed on a deleted file.\n+    // A file is considered deleted, if it has no parent or is marked\n+    // as deleted in the snapshot feature.\n+    if (file.getParent() \u003d\u003d null || (file.isWithSnapshot() \u0026\u0026\n+        file.getFileWithSnapshotFeature().isCurrentFileDeleted())) {\n+      throw new FileNotFoundException(src);\n+    }\n     String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n           \" owned by \" + clientName + \" but is accessed by \" + holder);\n     }\n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkLease(String src, String holder, INode inode,\n                               long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    final String ident \u003d src + \" (inode \" + fileId + \")\";\n    if (inode \u003d\u003d null) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    if (!inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": INode is not a regular file. \"\n              + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    // No further modification is allowed on a deleted file.\n    // A file is considered deleted, if it has no parent or is marked\n    // as deleted in the snapshot feature.\n    if (file.getParent() \u003d\u003d null || (file.isWithSnapshot() \u0026\u0026\n        file.getFileWithSnapshotFeature().isCurrentFileDeleted())) {\n      throw new FileNotFoundException(src);\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n          \" owned by \" + clientName + \" but is accessed by \" + holder);\n    }\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6294. Use INode IDs to avoid conflicts when a file open for write is renamed (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593634 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/14 3:36 PM",
      "commitName": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6294. Use INode IDs to avoid conflicts when a file open for write is renamed (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593634 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/05/14 3:36 PM",
          "commitName": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "30/04/14 10:44 AM",
          "commitNameOld": "0689363343a281a6f7f6f395227668bddc2663eb",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 9.2,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,34 @@\n-  private INodeFile checkLease(String src, long fileId, String holder,\n-      INode inode) throws LeaseExpiredException, FileNotFoundException {\n+  private INodeFile checkLease(String src, String holder, INode inode,\n+                               long fileId)\n+      throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n-    if (inode \u003d\u003d null || !inode.isFile()) {\n+    final String ident \u003d src + \" (inode \" + fileId + \")\";\n+    if (inode \u003d\u003d null) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n-          \"No lease on \" + src + \": File does not exist. \"\n+          \"No lease on \" + ident + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n+    if (!inode.isFile()) {\n+      Lease lease \u003d leaseManager.getLease(holder);\n+      throw new LeaseExpiredException(\n+          \"No lease on \" + ident + \": INode is not a regular file. \"\n+              + (lease !\u003d null ? lease.toString()\n+              : \"Holder \" + holder + \" does not have any open files.\"));\n+    }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n-          \"No lease on \" + src + \": File is not open for writing. \"\n+          \"No lease on \" + ident + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n-      throw new LeaseExpiredException(\"Lease mismatch on \" + src + \" owned by \"\n-          + clientName + \" but is accessed by \" + holder);\n+      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n+          \" owned by \" + clientName + \" but is accessed by \" + holder);\n     }\n-    INodeId.checkId(fileId, file);\n     return file;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INodeFile checkLease(String src, String holder, INode inode,\n                               long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    final String ident \u003d src + \" (inode \" + fileId + \")\";\n    if (inode \u003d\u003d null) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    if (!inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": INode is not a regular file. \"\n              + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n          \" owned by \" + clientName + \" but is accessed by \" + holder);\n    }\n    return file;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[src-String, fileId-long, holder-String, inode-INode]",
            "newValue": "[src-String, holder-String, inode-INode, fileId-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6294. Use INode IDs to avoid conflicts when a file open for write is renamed (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593634 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/05/14 3:36 PM",
          "commitName": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "30/04/14 10:44 AM",
          "commitNameOld": "0689363343a281a6f7f6f395227668bddc2663eb",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 9.2,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,34 @@\n-  private INodeFile checkLease(String src, long fileId, String holder,\n-      INode inode) throws LeaseExpiredException, FileNotFoundException {\n+  private INodeFile checkLease(String src, String holder, INode inode,\n+                               long fileId)\n+      throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n-    if (inode \u003d\u003d null || !inode.isFile()) {\n+    final String ident \u003d src + \" (inode \" + fileId + \")\";\n+    if (inode \u003d\u003d null) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n-          \"No lease on \" + src + \": File does not exist. \"\n+          \"No lease on \" + ident + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n+    if (!inode.isFile()) {\n+      Lease lease \u003d leaseManager.getLease(holder);\n+      throw new LeaseExpiredException(\n+          \"No lease on \" + ident + \": INode is not a regular file. \"\n+              + (lease !\u003d null ? lease.toString()\n+              : \"Holder \" + holder + \" does not have any open files.\"));\n+    }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n-          \"No lease on \" + src + \": File is not open for writing. \"\n+          \"No lease on \" + ident + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n     if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n-      throw new LeaseExpiredException(\"Lease mismatch on \" + src + \" owned by \"\n-          + clientName + \" but is accessed by \" + holder);\n+      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n+          \" owned by \" + clientName + \" but is accessed by \" + holder);\n     }\n-    INodeId.checkId(fileId, file);\n     return file;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INodeFile checkLease(String src, String holder, INode inode,\n                               long fileId)\n      throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    final String ident \u003d src + \" (inode \" + fileId + \")\";\n    if (inode \u003d\u003d null) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    if (!inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": INode is not a regular file. \"\n              + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + ident + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + ident +\n          \" owned by \" + clientName + \" but is accessed by \" + holder);\n    }\n    return file;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 5:39 PM",
      "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 5:39 PM",
          "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/11/13 9:12 AM",
          "commitNameOld": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.35,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,26 @@\n-  private INodeFileUnderConstruction checkLease(String src, long fileId,\n-      String holder, INode inode) throws LeaseExpiredException,\n-      FileNotFoundException {\n+  private INodeFile checkLease(String src, long fileId, String holder,\n+      INode inode) throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n     if (inode \u003d\u003d null || !inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + src + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + src + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n-    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n-    if (holder !\u003d null \u0026\u0026 !pendingFile.getClientName().equals(holder)) {\n+    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n+    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + src + \" owned by \"\n-          + pendingFile.getClientName() + \" but is accessed by \" + holder);\n+          + clientName + \" but is accessed by \" + holder);\n     }\n-    INodeId.checkId(fileId, pendingFile);\n-    return pendingFile;\n+    INodeId.checkId(fileId, file);\n+    return file;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INodeFile checkLease(String src, long fileId, String holder,\n      INode inode) throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    if (inode \u003d\u003d null || !inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + src + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + src + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + src + \" owned by \"\n          + clientName + \" but is accessed by \" + holder);\n    }\n    INodeId.checkId(fileId, file);\n    return file;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "INodeFileUnderConstruction",
            "newValue": "INodeFile"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 5:39 PM",
          "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/11/13 9:12 AM",
          "commitNameOld": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.35,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,26 @@\n-  private INodeFileUnderConstruction checkLease(String src, long fileId,\n-      String holder, INode inode) throws LeaseExpiredException,\n-      FileNotFoundException {\n+  private INodeFile checkLease(String src, long fileId, String holder,\n+      INode inode) throws LeaseExpiredException, FileNotFoundException {\n     assert hasReadLock();\n     if (inode \u003d\u003d null || !inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + src + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + src + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n-    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n-    if (holder !\u003d null \u0026\u0026 !pendingFile.getClientName().equals(holder)) {\n+    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n+    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + src + \" owned by \"\n-          + pendingFile.getClientName() + \" but is accessed by \" + holder);\n+          + clientName + \" but is accessed by \" + holder);\n     }\n-    INodeId.checkId(fileId, pendingFile);\n-    return pendingFile;\n+    INodeId.checkId(fileId, file);\n+    return file;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INodeFile checkLease(String src, long fileId, String holder,\n      INode inode) throws LeaseExpiredException, FileNotFoundException {\n    assert hasReadLock();\n    if (inode \u003d\u003d null || !inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + src + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + src + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    String clientName \u003d file.getFileUnderConstructionFeature().getClientName();\n    if (holder !\u003d null \u0026\u0026 !clientName.equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + src + \" owned by \"\n          + clientName + \" but is accessed by \" + holder);\n    }\n    INodeId.checkId(fileId, file);\n    return file;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "e3d7ef36ef7dd31b295b1f1d86a1bfa7887ca771": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5372. In FSNamesystem, hasReadLock() returns false if the current thread holds the write lock (Contributed by Vinay)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1542887 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/11/13 8:18 PM",
      "commitName": "e3d7ef36ef7dd31b295b1f1d86a1bfa7887ca771",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "14/11/13 12:11 PM",
      "commitNameOld": "ceea91c9cd8b2a18be13217894ccf1c17198de18",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 3.34,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private INodeFileUnderConstruction checkLease(String src, long fileId,\n       String holder, INode inode) throws LeaseExpiredException,\n       FileNotFoundException {\n-    assert hasReadOrWriteLock();\n+    assert hasReadLock();\n     if (inode \u003d\u003d null || !inode.isFile()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + src + \": File does not exist. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     final INodeFile file \u003d inode.asFile();\n     if (!file.isUnderConstruction()) {\n       Lease lease \u003d leaseManager.getLease(holder);\n       throw new LeaseExpiredException(\n           \"No lease on \" + src + \": File is not open for writing. \"\n           + (lease !\u003d null ? lease.toString()\n               : \"Holder \" + holder + \" does not have any open files.\"));\n     }\n     INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n     if (holder !\u003d null \u0026\u0026 !pendingFile.getClientName().equals(holder)) {\n       throw new LeaseExpiredException(\"Lease mismatch on \" + src + \" owned by \"\n           + pendingFile.getClientName() + \" but is accessed by \" + holder);\n     }\n     INodeId.checkId(fileId, pendingFile);\n     return pendingFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFileUnderConstruction checkLease(String src, long fileId,\n      String holder, INode inode) throws LeaseExpiredException,\n      FileNotFoundException {\n    assert hasReadLock();\n    if (inode \u003d\u003d null || !inode.isFile()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + src + \": File does not exist. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    final INodeFile file \u003d inode.asFile();\n    if (!file.isUnderConstruction()) {\n      Lease lease \u003d leaseManager.getLease(holder);\n      throw new LeaseExpiredException(\n          \"No lease on \" + src + \": File is not open for writing. \"\n          + (lease !\u003d null ? lease.toString()\n              : \"Holder \" + holder + \" does not have any open files.\"));\n    }\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (holder !\u003d null \u0026\u0026 !pendingFile.getClientName().equals(holder)) {\n      throw new LeaseExpiredException(\"Lease mismatch on \" + src + \" owned by \"\n          + pendingFile.getClientName() + \" but is accessed by \" + holder);\n    }\n    INodeId.checkId(fileId, pendingFile);\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}