{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclStorage.java",
  "functionName": "copyINodeDefaultAcl",
  "functionId": "copyINodeDefaultAcl___child-INode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
  "functionStartLine": 76,
  "functionEndLine": 149,
  "numCommitsSeen": 15,
  "timeTaken": 2478,
  "changeHistory": [
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
    "0653918dad855b394e8e3b8b3f512f474d872ee9",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
    "fc14360b0340a33c0e1eb34967d4dcd772533418",
    "c89c516b95f45e04af55d9030043a42e2d07b02b"
  ],
  "changeHistoryShort": {
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": "Ymultichange(Yreturntypechange,Ybodychange)",
    "0653918dad855b394e8e3b8b3f512f474d872ee9": "Ybodychange",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Ybodychange",
    "fc14360b0340a33c0e1eb34967d4dcd772533418": "Ybodychange",
    "c89c516b95f45e04af55d9030043a42e2d07b02b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
      "commitDate": "06/09/16 11:02 AM",
      "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
          "commitDate": "06/09/16 11:02 AM",
          "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "09/04/15 12:38 PM",
          "commitNameOld": "922b7ed21d1f1460263ca42f709bb9f415d189c5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 515.93,
          "commitsBetweenForRepo": 3861,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n-  public static void copyINodeDefaultAcl(INode child) {\n+  public static boolean copyINodeDefaultAcl(INode child) {\n     INodeDirectory parent \u003d child.getParent();\n     AclFeature parentAclFeature \u003d parent.getAclFeature();\n     if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n-      return;\n+      return false;\n     }\n \n     // Split parent\u0027s entries into access vs. default.\n     List\u003cAclEntry\u003e featureEntries \u003d getEntriesFromAclFeature(parent\n         .getAclFeature());\n     ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n     List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n \n     // The parent may have an access ACL but no default ACL.  If so, exit.\n     if (parentDefaultEntries.isEmpty()) {\n-      return;\n+      return false;\n     }\n \n     // Pre-allocate list size for access entries to copy from parent.\n     List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n       parentDefaultEntries.size());\n \n     FsPermission childPerm \u003d child.getFsPermission();\n \n     // Copy each default ACL entry from parent to new child\u0027s access ACL.\n     boolean parentDefaultIsMinimal \u003d AclUtil.isMinimalAcl(parentDefaultEntries);\n     for (AclEntry entry: parentDefaultEntries) {\n       AclEntryType type \u003d entry.getType();\n       String name \u003d entry.getName();\n       AclEntry.Builder builder \u003d new AclEntry.Builder()\n         .setScope(AclEntryScope.ACCESS)\n         .setType(type)\n         .setName(name);\n \n       // The child\u0027s initial permission bits are treated as the mode parameter,\n       // which can filter copied permission values for owner, mask and other.\n       final FsAction permission;\n       if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n         permission \u003d entry.getPermission().and(childPerm.getUserAction());\n       } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n         // This only happens if the default ACL is a minimal ACL: exactly 3\n         // entries corresponding to owner, group and other.  In this case,\n         // filter the group permissions.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.MASK) {\n         // Group bits from mode parameter filter permission of mask entry.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.OTHER) {\n         permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n       } else {\n         permission \u003d entry.getPermission();\n       }\n \n       builder.setPermission(permission);\n       accessEntries.add(builder.build());\n     }\n \n     // A new directory also receives a copy of the parent\u0027s default ACL.\n     List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n       Collections.\u003cAclEntry\u003eemptyList();\n \n     final FsPermission newPerm;\n     if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n       // Save the new ACL to the child.\n       child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n       newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n     } else {\n       // The child is receiving a minimal ACL.\n       newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n     }\n \n     child.setPermission(newPerm);\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean copyINodeDefaultAcl(INode child) {\n    INodeDirectory parent \u003d child.getParent();\n    AclFeature parentAclFeature \u003d parent.getAclFeature();\n    if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n      return false;\n    }\n\n    // Split parent\u0027s entries into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d getEntriesFromAclFeature(parent\n        .getAclFeature());\n    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n\n    // The parent may have an access ACL but no default ACL.  If so, exit.\n    if (parentDefaultEntries.isEmpty()) {\n      return false;\n    }\n\n    // Pre-allocate list size for access entries to copy from parent.\n    List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n      parentDefaultEntries.size());\n\n    FsPermission childPerm \u003d child.getFsPermission();\n\n    // Copy each default ACL entry from parent to new child\u0027s access ACL.\n    boolean parentDefaultIsMinimal \u003d AclUtil.isMinimalAcl(parentDefaultEntries);\n    for (AclEntry entry: parentDefaultEntries) {\n      AclEntryType type \u003d entry.getType();\n      String name \u003d entry.getName();\n      AclEntry.Builder builder \u003d new AclEntry.Builder()\n        .setScope(AclEntryScope.ACCESS)\n        .setType(type)\n        .setName(name);\n\n      // The child\u0027s initial permission bits are treated as the mode parameter,\n      // which can filter copied permission values for owner, mask and other.\n      final FsAction permission;\n      if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n        permission \u003d entry.getPermission().and(childPerm.getUserAction());\n      } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n        // This only happens if the default ACL is a minimal ACL: exactly 3\n        // entries corresponding to owner, group and other.  In this case,\n        // filter the group permissions.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.MASK) {\n        // Group bits from mode parameter filter permission of mask entry.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.OTHER) {\n        permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n      } else {\n        permission \u003d entry.getPermission();\n      }\n\n      builder.setPermission(permission);\n      accessEntries.add(builder.build());\n    }\n\n    // A new directory also receives a copy of the parent\u0027s default ACL.\n    List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n      Collections.\u003cAclEntry\u003eemptyList();\n\n    final FsPermission newPerm;\n    if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n      // Save the new ACL to the child.\n      child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n      newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n    } else {\n      // The child is receiving a minimal ACL.\n      newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n    }\n\n    child.setPermission(newPerm);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
          "commitDate": "06/09/16 11:02 AM",
          "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "09/04/15 12:38 PM",
          "commitNameOld": "922b7ed21d1f1460263ca42f709bb9f415d189c5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 515.93,
          "commitsBetweenForRepo": 3861,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n-  public static void copyINodeDefaultAcl(INode child) {\n+  public static boolean copyINodeDefaultAcl(INode child) {\n     INodeDirectory parent \u003d child.getParent();\n     AclFeature parentAclFeature \u003d parent.getAclFeature();\n     if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n-      return;\n+      return false;\n     }\n \n     // Split parent\u0027s entries into access vs. default.\n     List\u003cAclEntry\u003e featureEntries \u003d getEntriesFromAclFeature(parent\n         .getAclFeature());\n     ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n     List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n \n     // The parent may have an access ACL but no default ACL.  If so, exit.\n     if (parentDefaultEntries.isEmpty()) {\n-      return;\n+      return false;\n     }\n \n     // Pre-allocate list size for access entries to copy from parent.\n     List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n       parentDefaultEntries.size());\n \n     FsPermission childPerm \u003d child.getFsPermission();\n \n     // Copy each default ACL entry from parent to new child\u0027s access ACL.\n     boolean parentDefaultIsMinimal \u003d AclUtil.isMinimalAcl(parentDefaultEntries);\n     for (AclEntry entry: parentDefaultEntries) {\n       AclEntryType type \u003d entry.getType();\n       String name \u003d entry.getName();\n       AclEntry.Builder builder \u003d new AclEntry.Builder()\n         .setScope(AclEntryScope.ACCESS)\n         .setType(type)\n         .setName(name);\n \n       // The child\u0027s initial permission bits are treated as the mode parameter,\n       // which can filter copied permission values for owner, mask and other.\n       final FsAction permission;\n       if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n         permission \u003d entry.getPermission().and(childPerm.getUserAction());\n       } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n         // This only happens if the default ACL is a minimal ACL: exactly 3\n         // entries corresponding to owner, group and other.  In this case,\n         // filter the group permissions.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.MASK) {\n         // Group bits from mode parameter filter permission of mask entry.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.OTHER) {\n         permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n       } else {\n         permission \u003d entry.getPermission();\n       }\n \n       builder.setPermission(permission);\n       accessEntries.add(builder.build());\n     }\n \n     // A new directory also receives a copy of the parent\u0027s default ACL.\n     List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n       Collections.\u003cAclEntry\u003eemptyList();\n \n     final FsPermission newPerm;\n     if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n       // Save the new ACL to the child.\n       child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n       newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n     } else {\n       // The child is receiving a minimal ACL.\n       newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n     }\n \n     child.setPermission(newPerm);\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean copyINodeDefaultAcl(INode child) {\n    INodeDirectory parent \u003d child.getParent();\n    AclFeature parentAclFeature \u003d parent.getAclFeature();\n    if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n      return false;\n    }\n\n    // Split parent\u0027s entries into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d getEntriesFromAclFeature(parent\n        .getAclFeature());\n    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n\n    // The parent may have an access ACL but no default ACL.  If so, exit.\n    if (parentDefaultEntries.isEmpty()) {\n      return false;\n    }\n\n    // Pre-allocate list size for access entries to copy from parent.\n    List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n      parentDefaultEntries.size());\n\n    FsPermission childPerm \u003d child.getFsPermission();\n\n    // Copy each default ACL entry from parent to new child\u0027s access ACL.\n    boolean parentDefaultIsMinimal \u003d AclUtil.isMinimalAcl(parentDefaultEntries);\n    for (AclEntry entry: parentDefaultEntries) {\n      AclEntryType type \u003d entry.getType();\n      String name \u003d entry.getName();\n      AclEntry.Builder builder \u003d new AclEntry.Builder()\n        .setScope(AclEntryScope.ACCESS)\n        .setType(type)\n        .setName(name);\n\n      // The child\u0027s initial permission bits are treated as the mode parameter,\n      // which can filter copied permission values for owner, mask and other.\n      final FsAction permission;\n      if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n        permission \u003d entry.getPermission().and(childPerm.getUserAction());\n      } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n        // This only happens if the default ACL is a minimal ACL: exactly 3\n        // entries corresponding to owner, group and other.  In this case,\n        // filter the group permissions.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.MASK) {\n        // Group bits from mode parameter filter permission of mask entry.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.OTHER) {\n        permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n      } else {\n        permission \u003d entry.getPermission();\n      }\n\n      builder.setPermission(permission);\n      accessEntries.add(builder.build());\n    }\n\n    // A new directory also receives a copy of the parent\u0027s default ACL.\n    List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n      Collections.\u003cAclEntry\u003eemptyList();\n\n    final FsPermission newPerm;\n    if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n      // Save the new ACL to the child.\n      child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n      newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n    } else {\n      // The child is receiving a minimal ACL.\n      newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n    }\n\n    child.setPermission(newPerm);\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "0653918dad855b394e8e3b8b3f512f474d872ee9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7454. Reduce memory footprint for AclEntries in NameNode. Contributed by Vinayakumar B.\n",
      "commitDate": "04/12/14 8:49 PM",
      "commitName": "0653918dad855b394e8e3b8b3f512f474d872ee9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/05/14 3:56 PM",
      "commitNameOld": "39f3d135d0dd5ab64d6fa3b7ee71396d12a801c6",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 189.24,
      "commitsBetweenForRepo": 1663,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,73 @@\n   public static void copyINodeDefaultAcl(INode child) {\n     INodeDirectory parent \u003d child.getParent();\n     AclFeature parentAclFeature \u003d parent.getAclFeature();\n     if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n       return;\n     }\n \n     // Split parent\u0027s entries into access vs. default.\n-    List\u003cAclEntry\u003e featureEntries \u003d parent.getAclFeature().getEntries();\n+    List\u003cAclEntry\u003e featureEntries \u003d getEntriesFromAclFeature(parent\n+        .getAclFeature());\n     ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n     List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n \n     // The parent may have an access ACL but no default ACL.  If so, exit.\n     if (parentDefaultEntries.isEmpty()) {\n       return;\n     }\n \n     // Pre-allocate list size for access entries to copy from parent.\n     List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n       parentDefaultEntries.size());\n \n     FsPermission childPerm \u003d child.getFsPermission();\n \n     // Copy each default ACL entry from parent to new child\u0027s access ACL.\n     boolean parentDefaultIsMinimal \u003d AclUtil.isMinimalAcl(parentDefaultEntries);\n     for (AclEntry entry: parentDefaultEntries) {\n       AclEntryType type \u003d entry.getType();\n       String name \u003d entry.getName();\n       AclEntry.Builder builder \u003d new AclEntry.Builder()\n         .setScope(AclEntryScope.ACCESS)\n         .setType(type)\n         .setName(name);\n \n       // The child\u0027s initial permission bits are treated as the mode parameter,\n       // which can filter copied permission values for owner, mask and other.\n       final FsAction permission;\n       if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n         permission \u003d entry.getPermission().and(childPerm.getUserAction());\n       } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n         // This only happens if the default ACL is a minimal ACL: exactly 3\n         // entries corresponding to owner, group and other.  In this case,\n         // filter the group permissions.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.MASK) {\n         // Group bits from mode parameter filter permission of mask entry.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.OTHER) {\n         permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n       } else {\n         permission \u003d entry.getPermission();\n       }\n \n       builder.setPermission(permission);\n       accessEntries.add(builder.build());\n     }\n \n     // A new directory also receives a copy of the parent\u0027s default ACL.\n     List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n       Collections.\u003cAclEntry\u003eemptyList();\n \n     final FsPermission newPerm;\n     if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n       // Save the new ACL to the child.\n       child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n       newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n     } else {\n       // The child is receiving a minimal ACL.\n       newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n     }\n \n     child.setPermission(newPerm);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void copyINodeDefaultAcl(INode child) {\n    INodeDirectory parent \u003d child.getParent();\n    AclFeature parentAclFeature \u003d parent.getAclFeature();\n    if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n      return;\n    }\n\n    // Split parent\u0027s entries into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d getEntriesFromAclFeature(parent\n        .getAclFeature());\n    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n\n    // The parent may have an access ACL but no default ACL.  If so, exit.\n    if (parentDefaultEntries.isEmpty()) {\n      return;\n    }\n\n    // Pre-allocate list size for access entries to copy from parent.\n    List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n      parentDefaultEntries.size());\n\n    FsPermission childPerm \u003d child.getFsPermission();\n\n    // Copy each default ACL entry from parent to new child\u0027s access ACL.\n    boolean parentDefaultIsMinimal \u003d AclUtil.isMinimalAcl(parentDefaultEntries);\n    for (AclEntry entry: parentDefaultEntries) {\n      AclEntryType type \u003d entry.getType();\n      String name \u003d entry.getName();\n      AclEntry.Builder builder \u003d new AclEntry.Builder()\n        .setScope(AclEntryScope.ACCESS)\n        .setType(type)\n        .setName(name);\n\n      // The child\u0027s initial permission bits are treated as the mode parameter,\n      // which can filter copied permission values for owner, mask and other.\n      final FsAction permission;\n      if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n        permission \u003d entry.getPermission().and(childPerm.getUserAction());\n      } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n        // This only happens if the default ACL is a minimal ACL: exactly 3\n        // entries corresponding to owner, group and other.  In this case,\n        // filter the group permissions.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.MASK) {\n        // Group bits from mode parameter filter permission of mask entry.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.OTHER) {\n        permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n      } else {\n        permission \u003d entry.getPermission();\n      }\n\n      builder.setPermission(permission);\n      accessEntries.add(builder.build());\n    }\n\n    // A new directory also receives a copy of the parent\u0027s default ACL.\n    List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n      Collections.\u003cAclEntry\u003eemptyList();\n\n    final FsPermission newPerm;\n    if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n      // Save the new ACL to the child.\n      child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n      newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n    } else {\n      // The child is receiving a minimal ACL.\n      newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n    }\n\n    child.setPermission(newPerm);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "26/02/14 8:22 AM",
      "commitNameOld": "7be2c002b350594e9bfbd256c8abc2cad42d49ea",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 79.09,
      "commitsBetweenForRepo": 557,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   public static void copyINodeDefaultAcl(INode child) {\n     INodeDirectory parent \u003d child.getParent();\n     AclFeature parentAclFeature \u003d parent.getAclFeature();\n     if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n       return;\n     }\n \n     // Split parent\u0027s entries into access vs. default.\n     List\u003cAclEntry\u003e featureEntries \u003d parent.getAclFeature().getEntries();\n     ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n     List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n \n     // The parent may have an access ACL but no default ACL.  If so, exit.\n     if (parentDefaultEntries.isEmpty()) {\n       return;\n     }\n \n     // Pre-allocate list size for access entries to copy from parent.\n     List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n       parentDefaultEntries.size());\n \n     FsPermission childPerm \u003d child.getFsPermission();\n \n     // Copy each default ACL entry from parent to new child\u0027s access ACL.\n-    boolean parentDefaultIsMinimal \u003d isMinimalAcl(parentDefaultEntries);\n+    boolean parentDefaultIsMinimal \u003d AclUtil.isMinimalAcl(parentDefaultEntries);\n     for (AclEntry entry: parentDefaultEntries) {\n       AclEntryType type \u003d entry.getType();\n       String name \u003d entry.getName();\n       AclEntry.Builder builder \u003d new AclEntry.Builder()\n         .setScope(AclEntryScope.ACCESS)\n         .setType(type)\n         .setName(name);\n \n       // The child\u0027s initial permission bits are treated as the mode parameter,\n       // which can filter copied permission values for owner, mask and other.\n       final FsAction permission;\n       if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n         permission \u003d entry.getPermission().and(childPerm.getUserAction());\n       } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n         // This only happens if the default ACL is a minimal ACL: exactly 3\n         // entries corresponding to owner, group and other.  In this case,\n         // filter the group permissions.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.MASK) {\n         // Group bits from mode parameter filter permission of mask entry.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.OTHER) {\n         permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n       } else {\n         permission \u003d entry.getPermission();\n       }\n \n       builder.setPermission(permission);\n       accessEntries.add(builder.build());\n     }\n \n     // A new directory also receives a copy of the parent\u0027s default ACL.\n     List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n       Collections.\u003cAclEntry\u003eemptyList();\n \n     final FsPermission newPerm;\n-    if (!isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n+    if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n       // Save the new ACL to the child.\n       child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n       newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n     } else {\n       // The child is receiving a minimal ACL.\n       newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n     }\n \n     child.setPermission(newPerm);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void copyINodeDefaultAcl(INode child) {\n    INodeDirectory parent \u003d child.getParent();\n    AclFeature parentAclFeature \u003d parent.getAclFeature();\n    if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n      return;\n    }\n\n    // Split parent\u0027s entries into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d parent.getAclFeature().getEntries();\n    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n\n    // The parent may have an access ACL but no default ACL.  If so, exit.\n    if (parentDefaultEntries.isEmpty()) {\n      return;\n    }\n\n    // Pre-allocate list size for access entries to copy from parent.\n    List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n      parentDefaultEntries.size());\n\n    FsPermission childPerm \u003d child.getFsPermission();\n\n    // Copy each default ACL entry from parent to new child\u0027s access ACL.\n    boolean parentDefaultIsMinimal \u003d AclUtil.isMinimalAcl(parentDefaultEntries);\n    for (AclEntry entry: parentDefaultEntries) {\n      AclEntryType type \u003d entry.getType();\n      String name \u003d entry.getName();\n      AclEntry.Builder builder \u003d new AclEntry.Builder()\n        .setScope(AclEntryScope.ACCESS)\n        .setType(type)\n        .setName(name);\n\n      // The child\u0027s initial permission bits are treated as the mode parameter,\n      // which can filter copied permission values for owner, mask and other.\n      final FsAction permission;\n      if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n        permission \u003d entry.getPermission().and(childPerm.getUserAction());\n      } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n        // This only happens if the default ACL is a minimal ACL: exactly 3\n        // entries corresponding to owner, group and other.  In this case,\n        // filter the group permissions.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.MASK) {\n        // Group bits from mode parameter filter permission of mask entry.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.OTHER) {\n        permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n      } else {\n        permission \u003d entry.getPermission();\n      }\n\n      builder.setPermission(permission);\n      accessEntries.add(builder.build());\n    }\n\n    // A new directory also receives a copy of the parent\u0027s default ACL.\n    List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n      Collections.\u003cAclEntry\u003eemptyList();\n\n    final FsPermission newPerm;\n    if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n      // Save the new ACL to the child.\n      child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n      newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n    } else {\n      // The child is receiving a minimal ACL.\n      newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n    }\n\n    child.setPermission(newPerm);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "fc14360b0340a33c0e1eb34967d4dcd772533418": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5923. Do not persist the ACL bit in the FsPermission. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1567784 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 2:54 PM",
      "commitName": "fc14360b0340a33c0e1eb34967d4dcd772533418",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "07/02/14 3:11 PM",
      "commitNameOld": "c89c516b95f45e04af55d9030043a42e2d07b02b",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,72 @@\n   public static void copyINodeDefaultAcl(INode child) {\n     INodeDirectory parent \u003d child.getParent();\n-    if (!parent.getFsPermission().getAclBit()) {\n-      return;\n-    }\n-\n-    // The default ACL is applicable to new child files and directories only.\n-    if (!child.isFile() \u0026\u0026 !child.isDirectory()) {\n+    AclFeature parentAclFeature \u003d parent.getAclFeature();\n+    if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n       return;\n     }\n \n     // Split parent\u0027s entries into access vs. default.\n     List\u003cAclEntry\u003e featureEntries \u003d parent.getAclFeature().getEntries();\n     ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n     List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n \n     // The parent may have an access ACL but no default ACL.  If so, exit.\n     if (parentDefaultEntries.isEmpty()) {\n       return;\n     }\n \n     // Pre-allocate list size for access entries to copy from parent.\n     List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n       parentDefaultEntries.size());\n \n     FsPermission childPerm \u003d child.getFsPermission();\n \n     // Copy each default ACL entry from parent to new child\u0027s access ACL.\n     boolean parentDefaultIsMinimal \u003d isMinimalAcl(parentDefaultEntries);\n     for (AclEntry entry: parentDefaultEntries) {\n       AclEntryType type \u003d entry.getType();\n       String name \u003d entry.getName();\n       AclEntry.Builder builder \u003d new AclEntry.Builder()\n         .setScope(AclEntryScope.ACCESS)\n         .setType(type)\n         .setName(name);\n \n       // The child\u0027s initial permission bits are treated as the mode parameter,\n       // which can filter copied permission values for owner, mask and other.\n       final FsAction permission;\n       if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n         permission \u003d entry.getPermission().and(childPerm.getUserAction());\n       } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n         // This only happens if the default ACL is a minimal ACL: exactly 3\n         // entries corresponding to owner, group and other.  In this case,\n         // filter the group permissions.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.MASK) {\n         // Group bits from mode parameter filter permission of mask entry.\n         permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n       } else if (type \u003d\u003d AclEntryType.OTHER) {\n         permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n       } else {\n         permission \u003d entry.getPermission();\n       }\n \n       builder.setPermission(permission);\n       accessEntries.add(builder.build());\n     }\n \n     // A new directory also receives a copy of the parent\u0027s default ACL.\n     List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n       Collections.\u003cAclEntry\u003eemptyList();\n \n     final FsPermission newPerm;\n     if (!isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n       // Save the new ACL to the child.\n       child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n       newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n     } else {\n       // The child is receiving a minimal ACL.\n       newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n     }\n \n     child.setPermission(newPerm);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void copyINodeDefaultAcl(INode child) {\n    INodeDirectory parent \u003d child.getParent();\n    AclFeature parentAclFeature \u003d parent.getAclFeature();\n    if (parentAclFeature \u003d\u003d null || !(child.isFile() || child.isDirectory())) {\n      return;\n    }\n\n    // Split parent\u0027s entries into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d parent.getAclFeature().getEntries();\n    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n\n    // The parent may have an access ACL but no default ACL.  If so, exit.\n    if (parentDefaultEntries.isEmpty()) {\n      return;\n    }\n\n    // Pre-allocate list size for access entries to copy from parent.\n    List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n      parentDefaultEntries.size());\n\n    FsPermission childPerm \u003d child.getFsPermission();\n\n    // Copy each default ACL entry from parent to new child\u0027s access ACL.\n    boolean parentDefaultIsMinimal \u003d isMinimalAcl(parentDefaultEntries);\n    for (AclEntry entry: parentDefaultEntries) {\n      AclEntryType type \u003d entry.getType();\n      String name \u003d entry.getName();\n      AclEntry.Builder builder \u003d new AclEntry.Builder()\n        .setScope(AclEntryScope.ACCESS)\n        .setType(type)\n        .setName(name);\n\n      // The child\u0027s initial permission bits are treated as the mode parameter,\n      // which can filter copied permission values for owner, mask and other.\n      final FsAction permission;\n      if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n        permission \u003d entry.getPermission().and(childPerm.getUserAction());\n      } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n        // This only happens if the default ACL is a minimal ACL: exactly 3\n        // entries corresponding to owner, group and other.  In this case,\n        // filter the group permissions.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.MASK) {\n        // Group bits from mode parameter filter permission of mask entry.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.OTHER) {\n        permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n      } else {\n        permission \u003d entry.getPermission();\n      }\n\n      builder.setPermission(permission);\n      accessEntries.add(builder.build());\n    }\n\n    // A new directory also receives a copy of the parent\u0027s default ACL.\n    List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n      Collections.\u003cAclEntry\u003eemptyList();\n\n    final FsPermission newPerm;\n    if (!isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n      // Save the new ACL to the child.\n      child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n      newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n    } else {\n      // The child is receiving a minimal ACL.\n      newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n    }\n\n    child.setPermission(newPerm);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "c89c516b95f45e04af55d9030043a42e2d07b02b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5616. NameNode: implement default ACL handling. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1565845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 3:11 PM",
      "commitName": "c89c516b95f45e04af55d9030043a42e2d07b02b",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,76 @@\n+  public static void copyINodeDefaultAcl(INode child) {\n+    INodeDirectory parent \u003d child.getParent();\n+    if (!parent.getFsPermission().getAclBit()) {\n+      return;\n+    }\n+\n+    // The default ACL is applicable to new child files and directories only.\n+    if (!child.isFile() \u0026\u0026 !child.isDirectory()) {\n+      return;\n+    }\n+\n+    // Split parent\u0027s entries into access vs. default.\n+    List\u003cAclEntry\u003e featureEntries \u003d parent.getAclFeature().getEntries();\n+    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n+    List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n+\n+    // The parent may have an access ACL but no default ACL.  If so, exit.\n+    if (parentDefaultEntries.isEmpty()) {\n+      return;\n+    }\n+\n+    // Pre-allocate list size for access entries to copy from parent.\n+    List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n+      parentDefaultEntries.size());\n+\n+    FsPermission childPerm \u003d child.getFsPermission();\n+\n+    // Copy each default ACL entry from parent to new child\u0027s access ACL.\n+    boolean parentDefaultIsMinimal \u003d isMinimalAcl(parentDefaultEntries);\n+    for (AclEntry entry: parentDefaultEntries) {\n+      AclEntryType type \u003d entry.getType();\n+      String name \u003d entry.getName();\n+      AclEntry.Builder builder \u003d new AclEntry.Builder()\n+        .setScope(AclEntryScope.ACCESS)\n+        .setType(type)\n+        .setName(name);\n+\n+      // The child\u0027s initial permission bits are treated as the mode parameter,\n+      // which can filter copied permission values for owner, mask and other.\n+      final FsAction permission;\n+      if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n+        permission \u003d entry.getPermission().and(childPerm.getUserAction());\n+      } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n+        // This only happens if the default ACL is a minimal ACL: exactly 3\n+        // entries corresponding to owner, group and other.  In this case,\n+        // filter the group permissions.\n+        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n+      } else if (type \u003d\u003d AclEntryType.MASK) {\n+        // Group bits from mode parameter filter permission of mask entry.\n+        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n+      } else if (type \u003d\u003d AclEntryType.OTHER) {\n+        permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n+      } else {\n+        permission \u003d entry.getPermission();\n+      }\n+\n+      builder.setPermission(permission);\n+      accessEntries.add(builder.build());\n+    }\n+\n+    // A new directory also receives a copy of the parent\u0027s default ACL.\n+    List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n+      Collections.\u003cAclEntry\u003eemptyList();\n+\n+    final FsPermission newPerm;\n+    if (!isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n+      // Save the new ACL to the child.\n+      child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n+      newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n+    } else {\n+      // The child is receiving a minimal ACL.\n+      newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n+    }\n+\n+    child.setPermission(newPerm);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void copyINodeDefaultAcl(INode child) {\n    INodeDirectory parent \u003d child.getParent();\n    if (!parent.getFsPermission().getAclBit()) {\n      return;\n    }\n\n    // The default ACL is applicable to new child files and directories only.\n    if (!child.isFile() \u0026\u0026 !child.isDirectory()) {\n      return;\n    }\n\n    // Split parent\u0027s entries into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d parent.getAclFeature().getEntries();\n    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e parentDefaultEntries \u003d scopedEntries.getDefaultEntries();\n\n    // The parent may have an access ACL but no default ACL.  If so, exit.\n    if (parentDefaultEntries.isEmpty()) {\n      return;\n    }\n\n    // Pre-allocate list size for access entries to copy from parent.\n    List\u003cAclEntry\u003e accessEntries \u003d Lists.newArrayListWithCapacity(\n      parentDefaultEntries.size());\n\n    FsPermission childPerm \u003d child.getFsPermission();\n\n    // Copy each default ACL entry from parent to new child\u0027s access ACL.\n    boolean parentDefaultIsMinimal \u003d isMinimalAcl(parentDefaultEntries);\n    for (AclEntry entry: parentDefaultEntries) {\n      AclEntryType type \u003d entry.getType();\n      String name \u003d entry.getName();\n      AclEntry.Builder builder \u003d new AclEntry.Builder()\n        .setScope(AclEntryScope.ACCESS)\n        .setType(type)\n        .setName(name);\n\n      // The child\u0027s initial permission bits are treated as the mode parameter,\n      // which can filter copied permission values for owner, mask and other.\n      final FsAction permission;\n      if (type \u003d\u003d AclEntryType.USER \u0026\u0026 name \u003d\u003d null) {\n        permission \u003d entry.getPermission().and(childPerm.getUserAction());\n      } else if (type \u003d\u003d AclEntryType.GROUP \u0026\u0026 parentDefaultIsMinimal) {\n        // This only happens if the default ACL is a minimal ACL: exactly 3\n        // entries corresponding to owner, group and other.  In this case,\n        // filter the group permissions.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.MASK) {\n        // Group bits from mode parameter filter permission of mask entry.\n        permission \u003d entry.getPermission().and(childPerm.getGroupAction());\n      } else if (type \u003d\u003d AclEntryType.OTHER) {\n        permission \u003d entry.getPermission().and(childPerm.getOtherAction());\n      } else {\n        permission \u003d entry.getPermission();\n      }\n\n      builder.setPermission(permission);\n      accessEntries.add(builder.build());\n    }\n\n    // A new directory also receives a copy of the parent\u0027s default ACL.\n    List\u003cAclEntry\u003e defaultEntries \u003d child.isDirectory() ? parentDefaultEntries :\n      Collections.\u003cAclEntry\u003eemptyList();\n\n    final FsPermission newPerm;\n    if (!isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) {\n      // Save the new ACL to the child.\n      child.addAclFeature(createAclFeature(accessEntries, defaultEntries));\n      newPerm \u003d createFsPermissionForExtendedAcl(accessEntries, childPerm);\n    } else {\n      // The child is receiving a minimal ACL.\n      newPerm \u003d createFsPermissionForMinimalAcl(accessEntries, childPerm);\n    }\n\n    child.setPermission(newPerm);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java"
    }
  }
}