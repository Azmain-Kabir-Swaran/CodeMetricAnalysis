{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Display.java",
  "functionName": "getInputStream",
  "functionId": "getInputStream___item-PathData",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java",
  "functionStartLine": 124,
  "functionEndLine": 173,
  "numCommitsSeen": 25,
  "timeTaken": 1427,
  "changeHistory": [
    "01e8f056d9b7245193e6050f9830ca058db02a6e",
    "bd76d9a8272f6037be3938df78c0d3589d04e044",
    "de2efbe3baeccbf59ab7fb993de922ef6eedd099",
    "06d0109314b39675a205ee6f0898ebde23284d5d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "3337cdb3121d926301a3cca17abef029abdb2ff3"
  ],
  "changeHistoryShort": {
    "01e8f056d9b7245193e6050f9830ca058db02a6e": "Ybodychange",
    "bd76d9a8272f6037be3938df78c0d3589d04e044": "Ybodychange",
    "de2efbe3baeccbf59ab7fb993de922ef6eedd099": "Ybodychange",
    "06d0109314b39675a205ee6f0898ebde23284d5d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "3337cdb3121d926301a3cca17abef029abdb2ff3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "01e8f056d9b7245193e6050f9830ca058db02a6e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11012. hadoop fs -text of zero-length file causes EOFException. Contributed by Eric Payne\n",
      "commitDate": "02/09/14 11:15 AM",
      "commitName": "01e8f056d9b7245193e6050f9830ca058db02a6e",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "12/06/14 11:39 PM",
      "commitNameOld": "be3fdd1c40140e24df1a5414cf91537862b66e82",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 81.48,
      "commitsBetweenForRepo": 626,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,50 @@\n     protected InputStream getInputStream(PathData item) throws IOException {\n       FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n \n+      // Handle 0 and 1-byte files\n+      short leadBytes;\n+      try {\n+        leadBytes \u003d i.readShort();\n+      } catch (EOFException e) {\n+        i.seek(0);\n+        return i;\n+      }\n+\n       // Check type of stream first\n-      switch(i.readShort()) {\n+      switch(leadBytes) {\n         case 0x1f8b: { // RFC 1952\n           // Must be gzip\n           i.seek(0);\n           return new GZIPInputStream(i);\n         }\n         case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n           // Might be a SequenceFile\n           if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n             i.close();\n             return new TextRecordInputStream(item.stat);\n           }\n         }\n         default: {\n           // Check the type of compression instead, depending on Codec class\u0027s\n           // own detection methods, based on the provided path.\n           CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n           CompressionCodec codec \u003d cf.getCodec(item.path);\n           if (codec !\u003d null) {\n             i.seek(0);\n             return codec.createInputStream(i);\n           }\n           break;\n         }\n         case 0x4f62: { // \u0027O\u0027 \u0027b\u0027\n           if (i.readByte() \u003d\u003d \u0027j\u0027) {\n             i.close();\n             return new AvroFileInputStream(item.stat);\n           }\n           break;\n         }\n       }\n \n       // File is non-compressed, or not a file container we know.\n       i.seek(0);\n       return i;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected InputStream getInputStream(PathData item) throws IOException {\n      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n\n      // Handle 0 and 1-byte files\n      short leadBytes;\n      try {\n        leadBytes \u003d i.readShort();\n      } catch (EOFException e) {\n        i.seek(0);\n        return i;\n      }\n\n      // Check type of stream first\n      switch(leadBytes) {\n        case 0x1f8b: { // RFC 1952\n          // Must be gzip\n          i.seek(0);\n          return new GZIPInputStream(i);\n        }\n        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n          // Might be a SequenceFile\n          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n            i.close();\n            return new TextRecordInputStream(item.stat);\n          }\n        }\n        default: {\n          // Check the type of compression instead, depending on Codec class\u0027s\n          // own detection methods, based on the provided path.\n          CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n          CompressionCodec codec \u003d cf.getCodec(item.path);\n          if (codec !\u003d null) {\n            i.seek(0);\n            return codec.createInputStream(i);\n          }\n          break;\n        }\n        case 0x4f62: { // \u0027O\u0027 \u0027b\u0027\n          if (i.readByte() \u003d\u003d \u0027j\u0027) {\n            i.close();\n            return new AvroFileInputStream(item.stat);\n          }\n          break;\n        }\n      }\n\n      // File is non-compressed, or not a file container we know.\n      i.seek(0);\n      return i;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java",
      "extendedDetails": {}
    },
    "bd76d9a8272f6037be3938df78c0d3589d04e044": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8833. fs -text should make sure to call inputstream.seek(0) before using input stream. Contributed by Tom White and Harsh J. (harsh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1388869 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/09/12 11:56 AM",
      "commitName": "bd76d9a8272f6037be3938df78c0d3589d04e044",
      "commitAuthor": "Harsh J",
      "commitDateOld": "11/09/12 1:38 PM",
      "commitNameOld": "de2efbe3baeccbf59ab7fb993de922ef6eedd099",
      "commitAuthorOld": "Doug Cutting",
      "daysBetweenCommits": 10.93,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n     protected InputStream getInputStream(PathData item) throws IOException {\n       FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n \n       // Check type of stream first\n       switch(i.readShort()) {\n         case 0x1f8b: { // RFC 1952\n           // Must be gzip\n           i.seek(0);\n           return new GZIPInputStream(i);\n         }\n         case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n           // Might be a SequenceFile\n           if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n             i.close();\n             return new TextRecordInputStream(item.stat);\n           }\n         }\n         default: {\n           // Check the type of compression instead, depending on Codec class\u0027s\n           // own detection methods, based on the provided path.\n           CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n           CompressionCodec codec \u003d cf.getCodec(item.path);\n           if (codec !\u003d null) {\n+            i.seek(0);\n             return codec.createInputStream(i);\n           }\n           break;\n         }\n         case 0x4f62: { // \u0027O\u0027 \u0027b\u0027\n           if (i.readByte() \u003d\u003d \u0027j\u0027) {\n             i.close();\n             return new AvroFileInputStream(item.stat);\n           }\n           break;\n         }\n       }\n \n       // File is non-compressed, or not a file container we know.\n       i.seek(0);\n       return i;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected InputStream getInputStream(PathData item) throws IOException {\n      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n\n      // Check type of stream first\n      switch(i.readShort()) {\n        case 0x1f8b: { // RFC 1952\n          // Must be gzip\n          i.seek(0);\n          return new GZIPInputStream(i);\n        }\n        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n          // Might be a SequenceFile\n          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n            i.close();\n            return new TextRecordInputStream(item.stat);\n          }\n        }\n        default: {\n          // Check the type of compression instead, depending on Codec class\u0027s\n          // own detection methods, based on the provided path.\n          CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n          CompressionCodec codec \u003d cf.getCodec(item.path);\n          if (codec !\u003d null) {\n            i.seek(0);\n            return codec.createInputStream(i);\n          }\n          break;\n        }\n        case 0x4f62: { // \u0027O\u0027 \u0027b\u0027\n          if (i.readByte() \u003d\u003d \u0027j\u0027) {\n            i.close();\n            return new AvroFileInputStream(item.stat);\n          }\n          break;\n        }\n      }\n\n      // File is non-compressed, or not a file container we know.\n      i.seek(0);\n      return i;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java",
      "extendedDetails": {}
    },
    "de2efbe3baeccbf59ab7fb993de922ef6eedd099": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8597. Permit FsShell\u0027s text command to read Avro files.  Contributed by Ivan Vladimirov.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1383607 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/12 1:38 PM",
      "commitName": "de2efbe3baeccbf59ab7fb993de922ef6eedd099",
      "commitAuthor": "Doug Cutting",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 17.82,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,40 @@\n     protected InputStream getInputStream(PathData item) throws IOException {\n       FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n \n       // Check type of stream first\n       switch(i.readShort()) {\n         case 0x1f8b: { // RFC 1952\n           // Must be gzip\n           i.seek(0);\n           return new GZIPInputStream(i);\n         }\n         case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n           // Might be a SequenceFile\n           if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n             i.close();\n             return new TextRecordInputStream(item.stat);\n           }\n         }\n         default: {\n           // Check the type of compression instead, depending on Codec class\u0027s\n           // own detection methods, based on the provided path.\n           CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n           CompressionCodec codec \u003d cf.getCodec(item.path);\n           if (codec !\u003d null) {\n             return codec.createInputStream(i);\n           }\n           break;\n         }\n+        case 0x4f62: { // \u0027O\u0027 \u0027b\u0027\n+          if (i.readByte() \u003d\u003d \u0027j\u0027) {\n+            i.close();\n+            return new AvroFileInputStream(item.stat);\n+          }\n+          break;\n+        }\n       }\n \n       // File is non-compressed, or not a file container we know.\n       i.seek(0);\n       return i;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected InputStream getInputStream(PathData item) throws IOException {\n      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n\n      // Check type of stream first\n      switch(i.readShort()) {\n        case 0x1f8b: { // RFC 1952\n          // Must be gzip\n          i.seek(0);\n          return new GZIPInputStream(i);\n        }\n        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n          // Might be a SequenceFile\n          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n            i.close();\n            return new TextRecordInputStream(item.stat);\n          }\n        }\n        default: {\n          // Check the type of compression instead, depending on Codec class\u0027s\n          // own detection methods, based on the provided path.\n          CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n          CompressionCodec codec \u003d cf.getCodec(item.path);\n          if (codec !\u003d null) {\n            return codec.createInputStream(i);\n          }\n          break;\n        }\n        case 0x4f62: { // \u0027O\u0027 \u0027b\u0027\n          if (i.readByte() \u003d\u003d \u0027j\u0027) {\n            i.close();\n            return new AvroFileInputStream(item.stat);\n          }\n          break;\n        }\n      }\n\n      // File is non-compressed, or not a file container we know.\n      i.seek(0);\n      return i;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java",
      "extendedDetails": {}
    },
    "06d0109314b39675a205ee6f0898ebde23284d5d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8449. hadoop fs -text fails with compressed sequence files with the codec file extension. (harsh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355636 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/12 10:04 PM",
      "commitName": "06d0109314b39675a205ee6f0898ebde23284d5d",
      "commitAuthor": "Harsh J",
      "commitDateOld": "11/05/12 11:03 PM",
      "commitNameOld": "810ae618fd2b308bc65a3264a90233658010380e",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 48.96,
      "commitsBetweenForRepo": 219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,33 @@\n     protected InputStream getInputStream(PathData item) throws IOException {\n       FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n-      \n-      // check codecs\n-      CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n-      CompressionCodec codec \u003d cf.getCodec(item.path);\n-      if (codec !\u003d null) {\n-        return codec.createInputStream(i);\n-      }\n \n+      // Check type of stream first\n       switch(i.readShort()) {\n         case 0x1f8b: { // RFC 1952\n+          // Must be gzip\n           i.seek(0);\n           return new GZIPInputStream(i);\n         }\n         case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n+          // Might be a SequenceFile\n           if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n             i.close();\n             return new TextRecordInputStream(item.stat);\n           }\n+        }\n+        default: {\n+          // Check the type of compression instead, depending on Codec class\u0027s\n+          // own detection methods, based on the provided path.\n+          CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n+          CompressionCodec codec \u003d cf.getCodec(item.path);\n+          if (codec !\u003d null) {\n+            return codec.createInputStream(i);\n+          }\n           break;\n         }\n       }\n+\n+      // File is non-compressed, or not a file container we know.\n       i.seek(0);\n       return i;\n-    }    \n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected InputStream getInputStream(PathData item) throws IOException {\n      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n\n      // Check type of stream first\n      switch(i.readShort()) {\n        case 0x1f8b: { // RFC 1952\n          // Must be gzip\n          i.seek(0);\n          return new GZIPInputStream(i);\n        }\n        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n          // Might be a SequenceFile\n          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n            i.close();\n            return new TextRecordInputStream(item.stat);\n          }\n        }\n        default: {\n          // Check the type of compression instead, depending on Codec class\u0027s\n          // own detection methods, based on the provided path.\n          CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n          CompressionCodec codec \u003d cf.getCodec(item.path);\n          if (codec !\u003d null) {\n            return codec.createInputStream(i);\n          }\n          break;\n        }\n      }\n\n      // File is non-compressed, or not a file container we know.\n      i.seek(0);\n      return i;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected InputStream getInputStream(PathData item) throws IOException {\n      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n      \n      // check codecs\n      CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n      CompressionCodec codec \u003d cf.getCodec(item.path);\n      if (codec !\u003d null) {\n        return codec.createInputStream(i);\n      }\n\n      switch(i.readShort()) {\n        case 0x1f8b: { // RFC 1952\n          i.seek(0);\n          return new GZIPInputStream(i);\n        }\n        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n            i.close();\n            return new TextRecordInputStream(item.stat);\n          }\n          break;\n        }\n      }\n      i.seek(0);\n      return i;\n    }    ",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected InputStream getInputStream(PathData item) throws IOException {\n      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n      \n      // check codecs\n      CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n      CompressionCodec codec \u003d cf.getCodec(item.path);\n      if (codec !\u003d null) {\n        return codec.createInputStream(i);\n      }\n\n      switch(i.readShort()) {\n        case 0x1f8b: { // RFC 1952\n          i.seek(0);\n          return new GZIPInputStream(i);\n        }\n        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n            i.close();\n            return new TextRecordInputStream(item.stat);\n          }\n          break;\n        }\n      }\n      i.seek(0);\n      return i;\n    }    ",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/shell/Display.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Display.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected InputStream getInputStream(PathData item) throws IOException {\n      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n      \n      // check codecs\n      CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n      CompressionCodec codec \u003d cf.getCodec(item.path);\n      if (codec !\u003d null) {\n        return codec.createInputStream(i);\n      }\n\n      switch(i.readShort()) {\n        case 0x1f8b: { // RFC 1952\n          i.seek(0);\n          return new GZIPInputStream(i);\n        }\n        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n            i.close();\n            return new TextRecordInputStream(item.stat);\n          }\n          break;\n        }\n      }\n      i.seek(0);\n      return i;\n    }    ",
      "path": "common/src/java/org/apache/hadoop/fs/shell/Display.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/shell/Display.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/shell/Display.java"
      }
    },
    "3337cdb3121d926301a3cca17abef029abdb2ff3": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7238. Refactor the cat and text commands to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101199 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/11 1:08 PM",
      "commitName": "3337cdb3121d926301a3cca17abef029abdb2ff3",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,26 @@\n+    protected InputStream getInputStream(PathData item) throws IOException {\n+      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n+      \n+      // check codecs\n+      CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n+      CompressionCodec codec \u003d cf.getCodec(item.path);\n+      if (codec !\u003d null) {\n+        return codec.createInputStream(i);\n+      }\n+\n+      switch(i.readShort()) {\n+        case 0x1f8b: { // RFC 1952\n+          i.seek(0);\n+          return new GZIPInputStream(i);\n+        }\n+        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n+          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n+            i.close();\n+            return new TextRecordInputStream(item.stat);\n+          }\n+          break;\n+        }\n+      }\n+      i.seek(0);\n+      return i;\n+    }    \n\\ No newline at end of file\n",
      "actualSource": "    protected InputStream getInputStream(PathData item) throws IOException {\n      FSDataInputStream i \u003d (FSDataInputStream)super.getInputStream(item);\n      \n      // check codecs\n      CompressionCodecFactory cf \u003d new CompressionCodecFactory(getConf());\n      CompressionCodec codec \u003d cf.getCodec(item.path);\n      if (codec !\u003d null) {\n        return codec.createInputStream(i);\n      }\n\n      switch(i.readShort()) {\n        case 0x1f8b: { // RFC 1952\n          i.seek(0);\n          return new GZIPInputStream(i);\n        }\n        case 0x5345: { // \u0027S\u0027 \u0027E\u0027\n          if (i.readByte() \u003d\u003d \u0027Q\u0027) {\n            i.close();\n            return new TextRecordInputStream(item.stat);\n          }\n          break;\n        }\n      }\n      i.seek(0);\n      return i;\n    }    ",
      "path": "src/java/org/apache/hadoop/fs/shell/Display.java"
    }
  }
}