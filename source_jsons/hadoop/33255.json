{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NvidiaGPUPluginForRuntimeV2.java",
  "functionName": "parseTopo",
  "functionId": "parseTopo___topo-String__deviceLinkToWeight-Map__String,Integer__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nvidia/NvidiaGPUPluginForRuntimeV2.java",
  "functionStartLine": 472,
  "functionEndLine": 569,
  "numCommitsSeen": 3,
  "timeTaken": 792,
  "changeHistory": [
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17"
  ],
  "changeHistoryShort": {
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8821. [YARN-8851] GPU hierarchy/topology scheduling support based on pluggable device framework. Contributed by Zhankun Tang.\n",
      "commitDate": "24/02/19 1:07 AM",
      "commitName": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,98 @@\n+  public void parseTopo(String topo,\n+      Map\u003cString, Integer\u003e deviceLinkToWeight) {\n+    String[] lines \u003d topo.split(\"\\n\");\n+    int rowMinor;\n+    int colMinor;\n+    String legend;\n+    String tempType;\n+    for (String oneLine : lines) {\n+      oneLine \u003d oneLine.trim();\n+      if (oneLine.isEmpty()) {\n+        continue;\n+      }\n+      // To the end. No more metrics info\n+      if (oneLine.startsWith(\"Legend\")) {\n+        break;\n+      }\n+      // Skip header\n+      if (oneLine.contains(\"Affinity\")) {\n+        continue;\n+      }\n+      String[] tokens \u003d oneLine.split((\"\\\\s+\"));\n+      String name \u003d tokens[0];\n+      rowMinor \u003d Integer.parseInt(name.substring(name.lastIndexOf(\"U\") + 1));\n+      for (int i \u003d 1; i \u003c tokens.length; i++) {\n+        tempType \u003d tokens[i];\n+        colMinor \u003d i - 1;\n+        // self, skip\n+        if (tempType.equals(\"X\")) {\n+          continue;\n+        }\n+        if (tempType.equals(\"SOC\") || tempType.equals(\"SYS\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkCrossCPUSocket,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"PHB\") || tempType.equals(\"NODE\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkSameCPUSocket,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"PXB\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkMultiSwitch,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"PIX\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkSingleSwitch,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV1\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink1,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV2\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink2,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV3\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink3,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV4\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink4,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV5\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink5,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV6\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink6,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV7\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink7,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV8\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink8,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+        if (tempType.equals(\"NV9\")) {\n+          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink9,\n+              rowMinor, colMinor, deviceLinkToWeight);\n+          continue;\n+        }\n+      } // end one line handling\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void parseTopo(String topo,\n      Map\u003cString, Integer\u003e deviceLinkToWeight) {\n    String[] lines \u003d topo.split(\"\\n\");\n    int rowMinor;\n    int colMinor;\n    String legend;\n    String tempType;\n    for (String oneLine : lines) {\n      oneLine \u003d oneLine.trim();\n      if (oneLine.isEmpty()) {\n        continue;\n      }\n      // To the end. No more metrics info\n      if (oneLine.startsWith(\"Legend\")) {\n        break;\n      }\n      // Skip header\n      if (oneLine.contains(\"Affinity\")) {\n        continue;\n      }\n      String[] tokens \u003d oneLine.split((\"\\\\s+\"));\n      String name \u003d tokens[0];\n      rowMinor \u003d Integer.parseInt(name.substring(name.lastIndexOf(\"U\") + 1));\n      for (int i \u003d 1; i \u003c tokens.length; i++) {\n        tempType \u003d tokens[i];\n        colMinor \u003d i - 1;\n        // self, skip\n        if (tempType.equals(\"X\")) {\n          continue;\n        }\n        if (tempType.equals(\"SOC\") || tempType.equals(\"SYS\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkCrossCPUSocket,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"PHB\") || tempType.equals(\"NODE\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkSameCPUSocket,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"PXB\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkMultiSwitch,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"PIX\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkSingleSwitch,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV1\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink1,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV2\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink2,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV3\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink3,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV4\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink4,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV5\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink5,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV6\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink6,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV7\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink7,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV8\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink8,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n        if (tempType.equals(\"NV9\")) {\n          populateGraphEdgeWeight(DeviceLinkType.P2PLinkNVLink9,\n              rowMinor, colMinor, deviceLinkToWeight);\n          continue;\n        }\n      } // end one line handling\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nvidia/NvidiaGPUPluginForRuntimeV2.java"
    }
  }
}