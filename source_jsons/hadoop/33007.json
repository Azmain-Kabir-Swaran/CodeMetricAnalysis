{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppLogAggregatorImpl.java",
  "functionName": "getLogAggPolicyInstance",
  "functionId": "getLogAggPolicyInstance___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java",
  "functionStartLine": 227,
  "functionEndLine": 260,
  "numCommitsSeen": 53,
  "timeTaken": 1600,
  "changeHistory": [
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c"
  ],
  "changeHistoryShort": {
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-221. NM should provide a way for AM to tell it not to aggregate\nlogs. Contributed by Ming Ma\n",
      "commitDate": "22/08/15 4:25 PM",
      "commitName": "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,34 @@\n+  private ContainerLogAggregationPolicy getLogAggPolicyInstance(\n+      Configuration conf) {\n+    Class\u003c? extends ContainerLogAggregationPolicy\u003e policyClass \u003d null;\n+    if (this.logAggregationContext !\u003d null) {\n+      String className \u003d\n+          this.logAggregationContext.getLogAggregationPolicyClassName();\n+      if (className !\u003d null) {\n+        try {\n+          Class\u003c?\u003e policyFromContext \u003d conf.getClassByName(className);\n+          if (ContainerLogAggregationPolicy.class.isAssignableFrom(\n+              policyFromContext)) {\n+            policyClass \u003d policyFromContext.asSubclass(\n+                ContainerLogAggregationPolicy.class);\n+          } else {\n+            LOG.warn(this.appId + \" specified invalid log aggregation policy \" +\n+                className);\n+          }\n+        } catch (ClassNotFoundException cnfe) {\n+          // We don\u0027t fail the app if the policy class isn\u0027t valid.\n+          LOG.warn(this.appId + \" specified invalid log aggregation policy \" +\n+              className);\n+        }\n+      }\n+    }\n+    if (policyClass \u003d\u003d null) {\n+      policyClass \u003d conf.getClass(YarnConfiguration.NM_LOG_AGG_POLICY_CLASS,\n+          AllContainerLogAggregationPolicy.class,\n+              ContainerLogAggregationPolicy.class);\n+    } else {\n+      LOG.info(this.appId + \" specifies ContainerLogAggregationPolicy of \"\n+          + policyClass);\n+    }\n+    return ReflectionUtils.newInstance(policyClass, conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerLogAggregationPolicy getLogAggPolicyInstance(\n      Configuration conf) {\n    Class\u003c? extends ContainerLogAggregationPolicy\u003e policyClass \u003d null;\n    if (this.logAggregationContext !\u003d null) {\n      String className \u003d\n          this.logAggregationContext.getLogAggregationPolicyClassName();\n      if (className !\u003d null) {\n        try {\n          Class\u003c?\u003e policyFromContext \u003d conf.getClassByName(className);\n          if (ContainerLogAggregationPolicy.class.isAssignableFrom(\n              policyFromContext)) {\n            policyClass \u003d policyFromContext.asSubclass(\n                ContainerLogAggregationPolicy.class);\n          } else {\n            LOG.warn(this.appId + \" specified invalid log aggregation policy \" +\n                className);\n          }\n        } catch (ClassNotFoundException cnfe) {\n          // We don\u0027t fail the app if the policy class isn\u0027t valid.\n          LOG.warn(this.appId + \" specified invalid log aggregation policy \" +\n              className);\n        }\n      }\n    }\n    if (policyClass \u003d\u003d null) {\n      policyClass \u003d conf.getClass(YarnConfiguration.NM_LOG_AGG_POLICY_CLASS,\n          AllContainerLogAggregationPolicy.class,\n              ContainerLogAggregationPolicy.class);\n    } else {\n      LOG.info(this.appId + \" specifies ContainerLogAggregationPolicy of \"\n          + policyClass);\n    }\n    return ReflectionUtils.newInstance(policyClass, conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java"
    }
  }
}