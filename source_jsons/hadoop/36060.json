{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppManager.java",
  "functionName": "updateApplicationPriority",
  "functionId": "updateApplicationPriority___callerUGI-UserGroupInformation__applicationId-ApplicationId__newAppPriority-Priority",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
  "functionStartLine": 731,
  "functionEndLine": 762,
  "numCommitsSeen": 173,
  "timeTaken": 4190,
  "changeHistory": [
    "543aac9f281871a40473e83061f6deadc0bbdab7",
    "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a",
    "a207aa9930e7ee4f10228e2db4b4e733794eb8ea",
    "287d3d6804a869723ae36605a3c2d2b3eae3941e",
    "a926f895c11cd69cf2117c3b970304f3f1f53d92"
  ],
  "changeHistoryShort": {
    "543aac9f281871a40473e83061f6deadc0bbdab7": "Ybodychange",
    "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a": "Ybodychange",
    "a207aa9930e7ee4f10228e2db4b4e733794eb8ea": "Ybodychange",
    "287d3d6804a869723ae36605a3c2d2b3eae3941e": "Ymultichange(Yparameterchange,Ybodychange)",
    "a926f895c11cd69cf2117c3b970304f3f1f53d92": "Yintroduced"
  },
  "changeHistoryDetails": {
    "543aac9f281871a40473e83061f6deadc0bbdab7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14386. Rewind trunk from Guava 21.0 back to Guava 11.0.2.\n",
      "commitDate": "09/05/17 9:22 AM",
      "commitName": "543aac9f281871a40473e83061f6deadc0bbdab7",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/04/17 1:17 PM",
      "commitNameOld": "2ba21d63767e11535d3210dc58a03b41e83df949",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 14.84,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void updateApplicationPriority(UserGroupInformation callerUGI,\n       ApplicationId applicationId, Priority newAppPriority)\n       throws YarnException {\n     RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n \n     synchronized (applicationId) {\n       if (app \u003d\u003d null || app.isAppInCompletedStates()) {\n         return;\n       }\n \n       // Create a future object to capture exceptions from StateStore.\n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       // Invoke scheduler api to update priority in scheduler and to\n       // State Store.\n       Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n           newAppPriority, applicationId, future, callerUGI);\n \n       if (app.getApplicationPriority().equals(appPriority)) {\n         return;\n       }\n \n-      Futures.getChecked(future, YarnException.class);\n+      getChecked(future);\n \n       // update in-memory\n       ((RMAppImpl) app).setApplicationPriority(appPriority);\n     }\n \n     // Update the changed application state to timeline server\n     rmContext.getSystemMetricsPublisher().appUpdated(app,\n         System.currentTimeMillis());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateApplicationPriority(UserGroupInformation callerUGI,\n      ApplicationId applicationId, Priority newAppPriority)\n      throws YarnException {\n    RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n\n    synchronized (applicationId) {\n      if (app \u003d\u003d null || app.isAppInCompletedStates()) {\n        return;\n      }\n\n      // Create a future object to capture exceptions from StateStore.\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      // Invoke scheduler api to update priority in scheduler and to\n      // State Store.\n      Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n          newAppPriority, applicationId, future, callerUGI);\n\n      if (app.getApplicationPriority().equals(appPriority)) {\n        return;\n      }\n\n      getChecked(future);\n\n      // update in-memory\n      ((RMAppImpl) app).setApplicationPriority(appPriority);\n    }\n\n    // Update the changed application state to timeline server\n    rmContext.getSystemMetricsPublisher().appUpdated(app,\n        System.currentTimeMillis());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10101. Update guava dependency to the latest version. (ozawa)\n",
      "commitDate": "24/03/17 6:06 PM",
      "commitName": "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "23/02/17 12:49 AM",
      "commitNameOld": "a207aa9930e7ee4f10228e2db4b4e733794eb8ea",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 29.68,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void updateApplicationPriority(UserGroupInformation callerUGI,\n       ApplicationId applicationId, Priority newAppPriority)\n       throws YarnException {\n     RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n \n     synchronized (applicationId) {\n       if (app \u003d\u003d null || app.isAppInCompletedStates()) {\n         return;\n       }\n \n       // Create a future object to capture exceptions from StateStore.\n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       // Invoke scheduler api to update priority in scheduler and to\n       // State Store.\n       Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n           newAppPriority, applicationId, future, callerUGI);\n \n       if (app.getApplicationPriority().equals(appPriority)) {\n         return;\n       }\n \n-      Futures.get(future, YarnException.class);\n+      Futures.getChecked(future, YarnException.class);\n \n       // update in-memory\n       ((RMAppImpl) app).setApplicationPriority(appPriority);\n     }\n \n     // Update the changed application state to timeline server\n     rmContext.getSystemMetricsPublisher().appUpdated(app,\n         System.currentTimeMillis());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateApplicationPriority(UserGroupInformation callerUGI,\n      ApplicationId applicationId, Priority newAppPriority)\n      throws YarnException {\n    RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n\n    synchronized (applicationId) {\n      if (app \u003d\u003d null || app.isAppInCompletedStates()) {\n        return;\n      }\n\n      // Create a future object to capture exceptions from StateStore.\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      // Invoke scheduler api to update priority in scheduler and to\n      // State Store.\n      Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n          newAppPriority, applicationId, future, callerUGI);\n\n      if (app.getApplicationPriority().equals(appPriority)) {\n        return;\n      }\n\n      Futures.getChecked(future, YarnException.class);\n\n      // update in-memory\n      ((RMAppImpl) app).setApplicationPriority(appPriority);\n    }\n\n    // Update the changed application state to timeline server\n    rmContext.getSystemMetricsPublisher().appUpdated(app,\n        System.currentTimeMillis());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "a207aa9930e7ee4f10228e2db4b4e733794eb8ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6211. Synchronization improvement for moveApplicationAcrossQueues and updateApplicationPriority. Contributed by Bibin A Chundatt.\n",
      "commitDate": "23/02/17 12:49 AM",
      "commitName": "a207aa9930e7ee4f10228e2db4b4e733794eb8ea",
      "commitAuthor": "Sunil G",
      "commitDateOld": "23/01/17 9:12 AM",
      "commitNameOld": "69fa81679f59378fd19a2c65db8019393d7c05a2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 30.65,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void updateApplicationPriority(UserGroupInformation callerUGI,\n       ApplicationId applicationId, Priority newAppPriority)\n       throws YarnException {\n     RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n \n     synchronized (applicationId) {\n-      if (app.isAppInCompletedStates()) {\n+      if (app \u003d\u003d null || app.isAppInCompletedStates()) {\n         return;\n       }\n \n       // Create a future object to capture exceptions from StateStore.\n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       // Invoke scheduler api to update priority in scheduler and to\n       // State Store.\n       Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n           newAppPriority, applicationId, future, callerUGI);\n \n       if (app.getApplicationPriority().equals(appPriority)) {\n         return;\n       }\n \n       Futures.get(future, YarnException.class);\n \n       // update in-memory\n       ((RMAppImpl) app).setApplicationPriority(appPriority);\n     }\n \n     // Update the changed application state to timeline server\n     rmContext.getSystemMetricsPublisher().appUpdated(app,\n         System.currentTimeMillis());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateApplicationPriority(UserGroupInformation callerUGI,\n      ApplicationId applicationId, Priority newAppPriority)\n      throws YarnException {\n    RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n\n    synchronized (applicationId) {\n      if (app \u003d\u003d null || app.isAppInCompletedStates()) {\n        return;\n      }\n\n      // Create a future object to capture exceptions from StateStore.\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      // Invoke scheduler api to update priority in scheduler and to\n      // State Store.\n      Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n          newAppPriority, applicationId, future, callerUGI);\n\n      if (app.getApplicationPriority().equals(appPriority)) {\n        return;\n      }\n\n      Futures.get(future, YarnException.class);\n\n      // update in-memory\n      ((RMAppImpl) app).setApplicationPriority(appPriority);\n    }\n\n    // Update the changed application state to timeline server\n    rmContext.getSystemMetricsPublisher().appUpdated(app,\n        System.currentTimeMillis());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "287d3d6804a869723ae36605a3c2d2b3eae3941e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3955. Support for application priority ACLs in queues of CapacityScheduler. (Sunil G via wangda)\n",
      "commitDate": "09/01/17 8:40 AM",
      "commitName": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3955. Support for application priority ACLs in queues of CapacityScheduler. (Sunil G via wangda)\n",
          "commitDate": "09/01/17 8:40 AM",
          "commitName": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "07/01/17 8:24 AM",
          "commitNameOld": "ac16400e1fb85a4186e5bf5bbc9cf204735ae74f",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 2.01,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  public void updateApplicationPriority(ApplicationId applicationId,\n-      Priority newAppPriority) throws YarnException {\n+  public void updateApplicationPriority(UserGroupInformation callerUGI,\n+      ApplicationId applicationId, Priority newAppPriority)\n+      throws YarnException {\n     RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n \n     synchronized (applicationId) {\n       if (app.isAppInCompletedStates()) {\n         return;\n       }\n \n       // Create a future object to capture exceptions from StateStore.\n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       // Invoke scheduler api to update priority in scheduler and to\n       // State Store.\n-      Priority appPriority \u003d rmContext.getScheduler()\n-          .updateApplicationPriority(newAppPriority, applicationId, future);\n+      Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n+          newAppPriority, applicationId, future, callerUGI);\n \n       if (app.getApplicationPriority().equals(appPriority)) {\n         return;\n       }\n \n       Futures.get(future, YarnException.class);\n \n       // update in-memory\n       ((RMAppImpl) app).setApplicationPriority(appPriority);\n     }\n \n     // Update the changed application state to timeline server\n     rmContext.getSystemMetricsPublisher().appUpdated(app,\n         System.currentTimeMillis());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateApplicationPriority(UserGroupInformation callerUGI,\n      ApplicationId applicationId, Priority newAppPriority)\n      throws YarnException {\n    RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return;\n      }\n\n      // Create a future object to capture exceptions from StateStore.\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      // Invoke scheduler api to update priority in scheduler and to\n      // State Store.\n      Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n          newAppPriority, applicationId, future, callerUGI);\n\n      if (app.getApplicationPriority().equals(appPriority)) {\n        return;\n      }\n\n      Futures.get(future, YarnException.class);\n\n      // update in-memory\n      ((RMAppImpl) app).setApplicationPriority(appPriority);\n    }\n\n    // Update the changed application state to timeline server\n    rmContext.getSystemMetricsPublisher().appUpdated(app,\n        System.currentTimeMillis());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, newAppPriority-Priority]",
            "newValue": "[callerUGI-UserGroupInformation, applicationId-ApplicationId, newAppPriority-Priority]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3955. Support for application priority ACLs in queues of CapacityScheduler. (Sunil G via wangda)\n",
          "commitDate": "09/01/17 8:40 AM",
          "commitName": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "07/01/17 8:24 AM",
          "commitNameOld": "ac16400e1fb85a4186e5bf5bbc9cf204735ae74f",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 2.01,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  public void updateApplicationPriority(ApplicationId applicationId,\n-      Priority newAppPriority) throws YarnException {\n+  public void updateApplicationPriority(UserGroupInformation callerUGI,\n+      ApplicationId applicationId, Priority newAppPriority)\n+      throws YarnException {\n     RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n \n     synchronized (applicationId) {\n       if (app.isAppInCompletedStates()) {\n         return;\n       }\n \n       // Create a future object to capture exceptions from StateStore.\n       SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n \n       // Invoke scheduler api to update priority in scheduler and to\n       // State Store.\n-      Priority appPriority \u003d rmContext.getScheduler()\n-          .updateApplicationPriority(newAppPriority, applicationId, future);\n+      Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n+          newAppPriority, applicationId, future, callerUGI);\n \n       if (app.getApplicationPriority().equals(appPriority)) {\n         return;\n       }\n \n       Futures.get(future, YarnException.class);\n \n       // update in-memory\n       ((RMAppImpl) app).setApplicationPriority(appPriority);\n     }\n \n     // Update the changed application state to timeline server\n     rmContext.getSystemMetricsPublisher().appUpdated(app,\n         System.currentTimeMillis());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateApplicationPriority(UserGroupInformation callerUGI,\n      ApplicationId applicationId, Priority newAppPriority)\n      throws YarnException {\n    RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return;\n      }\n\n      // Create a future object to capture exceptions from StateStore.\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      // Invoke scheduler api to update priority in scheduler and to\n      // State Store.\n      Priority appPriority \u003d rmContext.getScheduler().updateApplicationPriority(\n          newAppPriority, applicationId, future, callerUGI);\n\n      if (app.getApplicationPriority().equals(appPriority)) {\n        return;\n      }\n\n      Futures.get(future, YarnException.class);\n\n      // update in-memory\n      ((RMAppImpl) app).setApplicationPriority(appPriority);\n    }\n\n    // Update the changed application state to timeline server\n    rmContext.getSystemMetricsPublisher().appUpdated(app,\n        System.currentTimeMillis());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a926f895c11cd69cf2117c3b970304f3f1f53d92": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5865. Retrospect updateApplicationPriority api to handle state store exception in align with YARN-5611. Contributed by Sunil G.\n",
      "commitDate": "22/11/16 1:19 AM",
      "commitName": "a926f895c11cd69cf2117c3b970304f3f1f53d92",
      "commitAuthor": "Rohith Sharma K S",
      "diff": "@@ -0,0 +1,31 @@\n+  public void updateApplicationPriority(ApplicationId applicationId,\n+      Priority newAppPriority) throws YarnException {\n+    RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n+\n+    synchronized (applicationId) {\n+      if (app.isAppInCompletedStates()) {\n+        return;\n+      }\n+\n+      // Create a future object to capture exceptions from StateStore.\n+      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n+\n+      // Invoke scheduler api to update priority in scheduler and to\n+      // State Store.\n+      Priority appPriority \u003d rmContext.getScheduler()\n+          .updateApplicationPriority(newAppPriority, applicationId, future);\n+\n+      if (app.getApplicationPriority().equals(appPriority)) {\n+        return;\n+      }\n+\n+      Futures.get(future, YarnException.class);\n+\n+      // update in-memory\n+      ((RMAppImpl) app).setApplicationPriority(appPriority);\n+    }\n+\n+    // Update the changed application state to timeline server\n+    rmContext.getSystemMetricsPublisher().appUpdated(app,\n+        System.currentTimeMillis());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateApplicationPriority(ApplicationId applicationId,\n      Priority newAppPriority) throws YarnException {\n    RMApp app \u003d this.rmContext.getRMApps().get(applicationId);\n\n    synchronized (applicationId) {\n      if (app.isAppInCompletedStates()) {\n        return;\n      }\n\n      // Create a future object to capture exceptions from StateStore.\n      SettableFuture\u003cObject\u003e future \u003d SettableFuture.create();\n\n      // Invoke scheduler api to update priority in scheduler and to\n      // State Store.\n      Priority appPriority \u003d rmContext.getScheduler()\n          .updateApplicationPriority(newAppPriority, applicationId, future);\n\n      if (app.getApplicationPriority().equals(appPriority)) {\n        return;\n      }\n\n      Futures.get(future, YarnException.class);\n\n      // update in-memory\n      ((RMAppImpl) app).setApplicationPriority(appPriority);\n    }\n\n    // Update the changed application state to timeline server\n    rmContext.getSystemMetricsPublisher().appUpdated(app,\n        System.currentTimeMillis());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java"
    }
  }
}