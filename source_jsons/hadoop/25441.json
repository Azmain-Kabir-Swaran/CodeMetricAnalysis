{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeMapOutputCollectorDelegator.java",
  "functionName": "init",
  "functionId": "init___context-Context",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/NativeMapOutputCollectorDelegator.java",
  "functionStartLine": 75,
  "functionEndLine": 170,
  "numCommitsSeen": 6,
  "timeTaken": 1296,
  "changeHistory": [
    "683987be7c160e67ddb8534eeb3c464bbe2796dd",
    "00322161b5d4d54770c2f0823e036537edecf5bf",
    "1081d9cee23aa661d7c9165bc9855865a38b528e",
    "432f641bc2f6c7fdb67da578233cbe07fdfbf1ea",
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139"
  ],
  "changeHistoryShort": {
    "683987be7c160e67ddb8534eeb3c464bbe2796dd": "Ybodychange",
    "00322161b5d4d54770c2f0823e036537edecf5bf": "Ybodychange",
    "1081d9cee23aa661d7c9165bc9855865a38b528e": "Ybodychange",
    "432f641bc2f6c7fdb67da578233cbe07fdfbf1ea": "Ybodychange",
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139": "Yintroduced"
  },
  "changeHistoryDetails": {
    "683987be7c160e67ddb8534eeb3c464bbe2796dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6069. Lint/style fixes and removal of unused code. Contributed by Todd Lipcon.\n",
      "commitDate": "05/09/14 10:44 AM",
      "commitName": "683987be7c160e67ddb8534eeb3c464bbe2796dd",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "04/09/14 11:20 PM",
      "commitNameOld": "00322161b5d4d54770c2f0823e036537edecf5bf",
      "commitAuthorOld": "Binglin Chang",
      "daysBetweenCommits": 0.47,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,96 @@\n   public void init(Context context) throws IOException, ClassNotFoundException {\n     this.context \u003d context;\n     this.job \u003d context.getJobConf();\n \n     Platforms.init(job);\n \n     if (job.getNumReduceTasks() \u003d\u003d 0) {\n       String message \u003d \"There is no reducer, no need to use native output collector\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     Class\u003c?\u003e comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null,\n         RawComparator.class);\n     if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n       String message \u003d \"Native output collector doesn\u0027t support customized java comparator \"\n         + job.get(MRJobConfig.KEY_COMPARATOR);\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n \n \n     if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n-      String message \u003d \"Native-Task doesn\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n+      String message \u003d \"Native-Task doesn\u0027t support sort class \" +\n+        job.get(Constants.MAP_SORT_CLASS);\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n       String message \u003d \"Native-Task doesn\u0027t support secure shuffle\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n     try {\n       @SuppressWarnings(\"rawtypes\")\n       final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n       if (null \u003d\u003d serializer) {\n         String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n         LOG.error(message);\n         throw new InvalidJobConfException(message);\n       } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n-        String message \u003d \"Native output collector doesn\u0027t support this key, this key is not comparable in native \"\n-          + keyCls.getName();\n+        String message \u003d \"Native output collector doesn\u0027t support this key, \" +\n+          \"this key is not comparable in native: \" + keyCls.getName();\n         LOG.error(message);\n         throw new InvalidJobConfException(message);\n       }\n     } catch (final IOException e) {\n       String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n       LOG.error(message);\n       throw new IOException(message);\n     }\n \n     final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n     if (ret) {\n       if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\n         String codec \u003d job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n         if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\n           String message \u003d \"Native output collector doesn\u0027t support compression codec \" + codec;\n           LOG.error(message);\n           throw new InvalidJobConfException(message);\n         }\n       }\n       NativeRuntime.configure(job);\n \n       final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n           Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n       updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n       updater.start();\n \n     } else {\n-      String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n+      String message \u003d \"NativeRuntime cannot be loaded, please check that \" +\n+        \"libnativetask.so is in hadoop library dir\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     this.handler \u003d null;\n     try {\n       final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n       final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n       final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n       final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n           context.getReporter(), id);\n       handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n     } catch (final IOException e) {\n       String message \u003d \"Native output collector cannot be loaded;\";\n       LOG.error(message);\n       throw new IOException(message, e);\n     }\n \n     LOG.info(\"Native output collector can be successfully enabled!\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context context) throws IOException, ClassNotFoundException {\n    this.context \u003d context;\n    this.job \u003d context.getJobConf();\n\n    Platforms.init(job);\n\n    if (job.getNumReduceTasks() \u003d\u003d 0) {\n      String message \u003d \"There is no reducer, no need to use native output collector\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    Class\u003c?\u003e comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null,\n        RawComparator.class);\n    if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n      String message \u003d \"Native output collector doesn\u0027t support customized java comparator \"\n        + job.get(MRJobConfig.KEY_COMPARATOR);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n\n\n    if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n      String message \u003d \"Native-Task doesn\u0027t support sort class \" +\n        job.get(Constants.MAP_SORT_CLASS);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n      String message \u003d \"Native-Task doesn\u0027t support secure shuffle\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n    try {\n      @SuppressWarnings(\"rawtypes\")\n      final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n      if (null \u003d\u003d serializer) {\n        String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n        String message \u003d \"Native output collector doesn\u0027t support this key, \" +\n          \"this key is not comparable in native: \" + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      }\n    } catch (final IOException e) {\n      String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n      LOG.error(message);\n      throw new IOException(message);\n    }\n\n    final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n    if (ret) {\n      if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\n        String codec \u003d job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n        if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\n          String message \u003d \"Native output collector doesn\u0027t support compression codec \" + codec;\n          LOG.error(message);\n          throw new InvalidJobConfException(message);\n        }\n      }\n      NativeRuntime.configure(job);\n\n      final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n          Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n      updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n      updater.start();\n\n    } else {\n      String message \u003d \"NativeRuntime cannot be loaded, please check that \" +\n        \"libnativetask.so is in hadoop library dir\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    this.handler \u003d null;\n    try {\n      final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n      final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n      final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n      final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n          context.getReporter(), id);\n      handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n    } catch (final IOException e) {\n      String message \u003d \"Native output collector cannot be loaded;\";\n      LOG.error(message);\n      throw new IOException(message, e);\n    }\n\n    LOG.info(\"Native output collector can be successfully enabled!\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/NativeMapOutputCollectorDelegator.java",
      "extendedDetails": {}
    },
    "00322161b5d4d54770c2f0823e036537edecf5bf": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6067. native-task: fix some counter issues (Binglin Chang)\n",
      "commitDate": "04/09/14 11:20 PM",
      "commitName": "00322161b5d4d54770c2f0823e036537edecf5bf",
      "commitAuthor": "Binglin Chang",
      "commitDateOld": "03/09/14 12:22 PM",
      "commitNameOld": "1081d9cee23aa661d7c9165bc9855865a38b528e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.46,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,93 +1,94 @@\n   public void init(Context context) throws IOException, ClassNotFoundException {\n+    this.context \u003d context;\n     this.job \u003d context.getJobConf();\n \n     Platforms.init(job);\n \n     if (job.getNumReduceTasks() \u003d\u003d 0) {\n       String message \u003d \"There is no reducer, no need to use native output collector\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     Class\u003c?\u003e comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null,\n         RawComparator.class);\n     if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n       String message \u003d \"Native output collector doesn\u0027t support customized java comparator \"\n         + job.get(MRJobConfig.KEY_COMPARATOR);\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n \n \n     if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n       String message \u003d \"Native-Task doesn\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n       String message \u003d \"Native-Task doesn\u0027t support secure shuffle\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n     try {\n       @SuppressWarnings(\"rawtypes\")\n       final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n       if (null \u003d\u003d serializer) {\n         String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n         LOG.error(message);\n         throw new InvalidJobConfException(message);\n       } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n         String message \u003d \"Native output collector doesn\u0027t support this key, this key is not comparable in native \"\n           + keyCls.getName();\n         LOG.error(message);\n         throw new InvalidJobConfException(message);\n       }\n     } catch (final IOException e) {\n       String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n       LOG.error(message);\n       throw new IOException(message);\n     }\n \n     final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n     if (ret) {\n       if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\n         String codec \u003d job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n         if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\n           String message \u003d \"Native output collector doesn\u0027t support compression codec \" + codec;\n           LOG.error(message);\n           throw new InvalidJobConfException(message);\n         }\n       }\n       NativeRuntime.configure(job);\n \n       final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n           Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n       updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n       updater.start();\n \n     } else {\n       String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     this.handler \u003d null;\n     try {\n       final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n       final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n       final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n       final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n           context.getReporter(), id);\n       handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n     } catch (final IOException e) {\n       String message \u003d \"Native output collector cannot be loaded;\";\n       LOG.error(message);\n       throw new IOException(message, e);\n     }\n \n     LOG.info(\"Native output collector can be successfully enabled!\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context context) throws IOException, ClassNotFoundException {\n    this.context \u003d context;\n    this.job \u003d context.getJobConf();\n\n    Platforms.init(job);\n\n    if (job.getNumReduceTasks() \u003d\u003d 0) {\n      String message \u003d \"There is no reducer, no need to use native output collector\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    Class\u003c?\u003e comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null,\n        RawComparator.class);\n    if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n      String message \u003d \"Native output collector doesn\u0027t support customized java comparator \"\n        + job.get(MRJobConfig.KEY_COMPARATOR);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n\n\n    if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n      String message \u003d \"Native-Task doesn\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n      String message \u003d \"Native-Task doesn\u0027t support secure shuffle\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n    try {\n      @SuppressWarnings(\"rawtypes\")\n      final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n      if (null \u003d\u003d serializer) {\n        String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n        String message \u003d \"Native output collector doesn\u0027t support this key, this key is not comparable in native \"\n          + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      }\n    } catch (final IOException e) {\n      String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n      LOG.error(message);\n      throw new IOException(message);\n    }\n\n    final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n    if (ret) {\n      if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\n        String codec \u003d job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n        if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\n          String message \u003d \"Native output collector doesn\u0027t support compression codec \" + codec;\n          LOG.error(message);\n          throw new InvalidJobConfException(message);\n        }\n      }\n      NativeRuntime.configure(job);\n\n      final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n          Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n      updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n      updater.start();\n\n    } else {\n      String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    this.handler \u003d null;\n    try {\n      final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n      final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n      final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n      final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n          context.getReporter(), id);\n      handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n    } catch (final IOException e) {\n      String message \u003d \"Native output collector cannot be loaded;\";\n      LOG.error(message);\n      throw new IOException(message, e);\n    }\n\n    LOG.info(\"Native output collector can be successfully enabled!\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/NativeMapOutputCollectorDelegator.java",
      "extendedDetails": {}
    },
    "1081d9cee23aa661d7c9165bc9855865a38b528e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6055. native-task: findbugs, interface annotations, and other misc cleanup\n",
      "commitDate": "03/09/14 12:22 PM",
      "commitName": "1081d9cee23aa661d7c9165bc9855865a38b528e",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "06/08/14 12:32 AM",
      "commitNameOld": "432f641bc2f6c7fdb67da578233cbe07fdfbf1ea",
      "commitAuthorOld": "Sean Zhong",
      "daysBetweenCommits": 28.49,
      "commitsBetweenForRepo": 226,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,93 @@\n   public void init(Context context) throws IOException, ClassNotFoundException {\n     this.job \u003d context.getJobConf();\n \n     Platforms.init(job);\n \n     if (job.getNumReduceTasks() \u003d\u003d 0) {\n       String message \u003d \"There is no reducer, no need to use native output collector\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n-    Class comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null, RawComparator.class);\n+    Class\u003c?\u003e comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null,\n+        RawComparator.class);\n     if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n       String message \u003d \"Native output collector doesn\u0027t support customized java comparator \"\n         + job.get(MRJobConfig.KEY_COMPARATOR);\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n \n \n     if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n       String message \u003d \"Native-Task doesn\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n       String message \u003d \"Native-Task doesn\u0027t support secure shuffle\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n     try {\n       @SuppressWarnings(\"rawtypes\")\n       final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n       if (null \u003d\u003d serializer) {\n         String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n         LOG.error(message);\n         throw new InvalidJobConfException(message);\n       } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n         String message \u003d \"Native output collector doesn\u0027t support this key, this key is not comparable in native \"\n           + keyCls.getName();\n         LOG.error(message);\n         throw new InvalidJobConfException(message);\n       }\n     } catch (final IOException e) {\n       String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n       LOG.error(message);\n       throw new IOException(message);\n     }\n \n     final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n     if (ret) {\n       if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\n         String codec \u003d job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n         if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\n           String message \u003d \"Native output collector doesn\u0027t support compression codec \" + codec;\n           LOG.error(message);\n           throw new InvalidJobConfException(message);\n         }\n       }\n       NativeRuntime.configure(job);\n \n       final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n           Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n       updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n       updater.start();\n \n     } else {\n       String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     this.handler \u003d null;\n     try {\n       final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n       final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n       final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n       final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n           context.getReporter(), id);\n       handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n     } catch (final IOException e) {\n       String message \u003d \"Native output collector cannot be loaded;\";\n       LOG.error(message);\n       throw new IOException(message, e);\n     }\n \n     LOG.info(\"Native output collector can be successfully enabled!\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context context) throws IOException, ClassNotFoundException {\n    this.job \u003d context.getJobConf();\n\n    Platforms.init(job);\n\n    if (job.getNumReduceTasks() \u003d\u003d 0) {\n      String message \u003d \"There is no reducer, no need to use native output collector\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    Class\u003c?\u003e comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null,\n        RawComparator.class);\n    if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n      String message \u003d \"Native output collector doesn\u0027t support customized java comparator \"\n        + job.get(MRJobConfig.KEY_COMPARATOR);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n\n\n    if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n      String message \u003d \"Native-Task doesn\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n      String message \u003d \"Native-Task doesn\u0027t support secure shuffle\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n    try {\n      @SuppressWarnings(\"rawtypes\")\n      final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n      if (null \u003d\u003d serializer) {\n        String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n        String message \u003d \"Native output collector doesn\u0027t support this key, this key is not comparable in native \"\n          + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      }\n    } catch (final IOException e) {\n      String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n      LOG.error(message);\n      throw new IOException(message);\n    }\n\n    final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n    if (ret) {\n      if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\n        String codec \u003d job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n        if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\n          String message \u003d \"Native output collector doesn\u0027t support compression codec \" + codec;\n          LOG.error(message);\n          throw new InvalidJobConfException(message);\n        }\n      }\n      NativeRuntime.configure(job);\n\n      final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n          Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n      updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n      updater.start();\n\n    } else {\n      String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    this.handler \u003d null;\n    try {\n      final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n      final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n      final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n      final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n          context.getReporter(), id);\n      handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n    } catch (final IOException e) {\n      String message \u003d \"Native output collector cannot be loaded;\";\n      LOG.error(message);\n      throw new IOException(message, e);\n    }\n\n    LOG.info(\"Native output collector can be successfully enabled!\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/NativeMapOutputCollectorDelegator.java",
      "extendedDetails": {}
    },
    "432f641bc2f6c7fdb67da578233cbe07fdfbf1ea": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5976. native-task: should not fail to build if snappy is missing (Manu Zhang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1616115 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/08/14 12:32 AM",
      "commitName": "432f641bc2f6c7fdb67da578233cbe07fdfbf1ea",
      "commitAuthor": "Sean Zhong",
      "commitDateOld": "17/07/14 10:44 AM",
      "commitNameOld": "b2551c06a09fb80a9e69adbc01c4c34b93ad0139",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 19.57,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,92 @@\n   public void init(Context context) throws IOException, ClassNotFoundException {\n     this.job \u003d context.getJobConf();\n \n     Platforms.init(job);\n \n     if (job.getNumReduceTasks() \u003d\u003d 0) {\n       String message \u003d \"There is no reducer, no need to use native output collector\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     Class comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null, RawComparator.class);\n     if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n-      String message \u003d \"Native output collector don\u0027t support customized java comparator \"\n+      String message \u003d \"Native output collector doesn\u0027t support customized java comparator \"\n         + job.get(MRJobConfig.KEY_COMPARATOR);\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n-    if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false) \u003d\u003d true) {\n-      if (!isCodecSupported(job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC))) {\n-        String message \u003d \"Native output collector don\u0027t support compression codec \"\n-          + job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC) + \", We support Gzip, Lz4, snappy\";\n-        LOG.error(message);\n-        throw new InvalidJobConfException(message);\n-      }\n-    }\n+\n \n     if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n-      String message \u003d \"Native-Task don\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n+      String message \u003d \"Native-Task doesn\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n-      String message \u003d \"Native-Task don\u0027t support secure shuffle\";\n+      String message \u003d \"Native-Task doesn\u0027t support secure shuffle\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n     try {\n       @SuppressWarnings(\"rawtypes\")\n       final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n       if (null \u003d\u003d serializer) {\n         String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n         LOG.error(message);\n         throw new InvalidJobConfException(message);\n       } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n-        String message \u003d \"Native output collector don\u0027t support this key, this key is not comparable in native \"\n+        String message \u003d \"Native output collector doesn\u0027t support this key, this key is not comparable in native \"\n           + keyCls.getName();\n         LOG.error(message);\n         throw new InvalidJobConfException(message);\n       }\n     } catch (final IOException e) {\n       String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n       LOG.error(message);\n       throw new IOException(message);\n     }\n \n     final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n     if (ret) {\n+      if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\n+        String codec \u003d job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n+        if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\n+          String message \u003d \"Native output collector doesn\u0027t support compression codec \" + codec;\n+          LOG.error(message);\n+          throw new InvalidJobConfException(message);\n+        }\n+      }\n       NativeRuntime.configure(job);\n \n       final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n           Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n       updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n       updater.start();\n \n     } else {\n       String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n       LOG.error(message);\n       throw new InvalidJobConfException(message);\n     }\n \n     this.handler \u003d null;\n     try {\n       final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n       final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n       final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n       final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n           context.getReporter(), id);\n       handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n     } catch (final IOException e) {\n       String message \u003d \"Native output collector cannot be loaded;\";\n       LOG.error(message);\n       throw new IOException(message, e);\n     }\n \n     LOG.info(\"Native output collector can be successfully enabled!\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context context) throws IOException, ClassNotFoundException {\n    this.job \u003d context.getJobConf();\n\n    Platforms.init(job);\n\n    if (job.getNumReduceTasks() \u003d\u003d 0) {\n      String message \u003d \"There is no reducer, no need to use native output collector\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    Class comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null, RawComparator.class);\n    if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n      String message \u003d \"Native output collector doesn\u0027t support customized java comparator \"\n        + job.get(MRJobConfig.KEY_COMPARATOR);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n\n\n    if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n      String message \u003d \"Native-Task doesn\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n      String message \u003d \"Native-Task doesn\u0027t support secure shuffle\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n    try {\n      @SuppressWarnings(\"rawtypes\")\n      final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n      if (null \u003d\u003d serializer) {\n        String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n        String message \u003d \"Native output collector doesn\u0027t support this key, this key is not comparable in native \"\n          + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      }\n    } catch (final IOException e) {\n      String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n      LOG.error(message);\n      throw new IOException(message);\n    }\n\n    final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n    if (ret) {\n      if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false)) {\n        String codec \u003d job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n        if (!NativeRuntime.supportsCompressionCodec(codec.getBytes(Charsets.UTF_8))) {\n          String message \u003d \"Native output collector doesn\u0027t support compression codec \" + codec;\n          LOG.error(message);\n          throw new InvalidJobConfException(message);\n        }\n      }\n      NativeRuntime.configure(job);\n\n      final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n          Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n      updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n      updater.start();\n\n    } else {\n      String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    this.handler \u003d null;\n    try {\n      final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n      final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n      final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n      final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n          context.getReporter(), id);\n      handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n    } catch (final IOException e) {\n      String message \u003d \"Native output collector cannot be loaded;\";\n      LOG.error(message);\n      throw new IOException(message, e);\n    }\n\n    LOG.info(\"Native output collector can be successfully enabled!\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/NativeMapOutputCollectorDelegator.java",
      "extendedDetails": {}
    },
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139": {
      "type": "Yintroduced",
      "commitMessage": "Import initial code for MAPREDUCE-2841 (native output collector)\n\nContributed by:\n  Binglin Chang\n  Yang Dong\n  Sean Zhong\n  Manu Zhang\n  Zhongliang Zhu\n  Vincent Wang\n  Yan Dong\n  Cheng Lian\n  Xusen Yin\n  Fangqin Dai\n  Jiang Weihua\n  Gansha Wu\n  Avik Dey\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1611413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 10:44 AM",
      "commitName": "b2551c06a09fb80a9e69adbc01c4c34b93ad0139",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,91 @@\n+  public void init(Context context) throws IOException, ClassNotFoundException {\n+    this.job \u003d context.getJobConf();\n+\n+    Platforms.init(job);\n+\n+    if (job.getNumReduceTasks() \u003d\u003d 0) {\n+      String message \u003d \"There is no reducer, no need to use native output collector\";\n+      LOG.error(message);\n+      throw new InvalidJobConfException(message);\n+    }\n+\n+    Class comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null, RawComparator.class);\n+    if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n+      String message \u003d \"Native output collector don\u0027t support customized java comparator \"\n+        + job.get(MRJobConfig.KEY_COMPARATOR);\n+      LOG.error(message);\n+      throw new InvalidJobConfException(message);\n+    }\n+\n+    if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false) \u003d\u003d true) {\n+      if (!isCodecSupported(job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC))) {\n+        String message \u003d \"Native output collector don\u0027t support compression codec \"\n+          + job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC) + \", We support Gzip, Lz4, snappy\";\n+        LOG.error(message);\n+        throw new InvalidJobConfException(message);\n+      }\n+    }\n+\n+    if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n+      String message \u003d \"Native-Task don\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n+      LOG.error(message);\n+      throw new InvalidJobConfException(message);\n+    }\n+\n+    if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n+      String message \u003d \"Native-Task don\u0027t support secure shuffle\";\n+      LOG.error(message);\n+      throw new InvalidJobConfException(message);\n+    }\n+\n+    final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n+    try {\n+      @SuppressWarnings(\"rawtypes\")\n+      final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n+      if (null \u003d\u003d serializer) {\n+        String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n+        LOG.error(message);\n+        throw new InvalidJobConfException(message);\n+      } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n+        String message \u003d \"Native output collector don\u0027t support this key, this key is not comparable in native \"\n+          + keyCls.getName();\n+        LOG.error(message);\n+        throw new InvalidJobConfException(message);\n+      }\n+    } catch (final IOException e) {\n+      String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n+      LOG.error(message);\n+      throw new IOException(message);\n+    }\n+\n+    final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n+    if (ret) {\n+      NativeRuntime.configure(job);\n+\n+      final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n+          Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n+      updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n+      updater.start();\n+\n+    } else {\n+      String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n+      LOG.error(message);\n+      throw new InvalidJobConfException(message);\n+    }\n+\n+    this.handler \u003d null;\n+    try {\n+      final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n+      final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n+      final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n+      final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n+          context.getReporter(), id);\n+      handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n+    } catch (final IOException e) {\n+      String message \u003d \"Native output collector cannot be loaded;\";\n+      LOG.error(message);\n+      throw new IOException(message, e);\n+    }\n+\n+    LOG.info(\"Native output collector can be successfully enabled!\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context context) throws IOException, ClassNotFoundException {\n    this.job \u003d context.getJobConf();\n\n    Platforms.init(job);\n\n    if (job.getNumReduceTasks() \u003d\u003d 0) {\n      String message \u003d \"There is no reducer, no need to use native output collector\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    Class comparatorClass \u003d job.getClass(MRJobConfig.KEY_COMPARATOR, null, RawComparator.class);\n    if (comparatorClass !\u003d null \u0026\u0026 !Platforms.define(comparatorClass)) {\n      String message \u003d \"Native output collector don\u0027t support customized java comparator \"\n        + job.get(MRJobConfig.KEY_COMPARATOR);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    if (job.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false) \u003d\u003d true) {\n      if (!isCodecSupported(job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC))) {\n        String message \u003d \"Native output collector don\u0027t support compression codec \"\n          + job.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC) + \", We support Gzip, Lz4, snappy\";\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      }\n    }\n\n    if (!QuickSort.class.getName().equals(job.get(Constants.MAP_SORT_CLASS))) {\n      String message \u003d \"Native-Task don\u0027t support sort class \" + job.get(Constants.MAP_SORT_CLASS);\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    if (job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, false) \u003d\u003d true) {\n      String message \u003d \"Native-Task don\u0027t support secure shuffle\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    final Class\u003c?\u003e keyCls \u003d job.getMapOutputKeyClass();\n    try {\n      @SuppressWarnings(\"rawtypes\")\n      final INativeSerializer serializer \u003d NativeSerialization.getInstance().getSerializer(keyCls);\n      if (null \u003d\u003d serializer) {\n        String message \u003d \"Key type not supported. Cannot find serializer for \" + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      } else if (!Platforms.support(keyCls.getName(), serializer, job)) {\n        String message \u003d \"Native output collector don\u0027t support this key, this key is not comparable in native \"\n          + keyCls.getName();\n        LOG.error(message);\n        throw new InvalidJobConfException(message);\n      }\n    } catch (final IOException e) {\n      String message \u003d \"Cannot find serializer for \" + keyCls.getName();\n      LOG.error(message);\n      throw new IOException(message);\n    }\n\n    final boolean ret \u003d NativeRuntime.isNativeLibraryLoaded();\n    if (ret) {\n      NativeRuntime.configure(job);\n\n      final long updateInterval \u003d job.getLong(Constants.NATIVE_STATUS_UPDATE_INTERVAL,\n          Constants.NATIVE_STATUS_UPDATE_INTERVAL_DEFVAL);\n      updater \u003d new StatusReportChecker(context.getReporter(), updateInterval);\n      updater.start();\n\n    } else {\n      String message \u003d \"Nativeruntime cannot be loaded, please check the libnativetask.so is in hadoop library dir\";\n      LOG.error(message);\n      throw new InvalidJobConfException(message);\n    }\n\n    this.handler \u003d null;\n    try {\n      final Class\u003cK\u003e oKClass \u003d (Class\u003cK\u003e) job.getMapOutputKeyClass();\n      final Class\u003cK\u003e oVClass \u003d (Class\u003cK\u003e) job.getMapOutputValueClass();\n      final TaskAttemptID id \u003d context.getMapTask().getTaskID();\n      final TaskContext taskContext \u003d new TaskContext(job, null, null, oKClass, oVClass,\n          context.getReporter(), id);\n      handler \u003d NativeCollectorOnlyHandler.create(taskContext);\n    } catch (final IOException e) {\n      String message \u003d \"Native output collector cannot be loaded;\";\n      LOG.error(message);\n      throw new IOException(message, e);\n    }\n\n    LOG.info(\"Native output collector can be successfully enabled!\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/NativeMapOutputCollectorDelegator.java"
    }
  }
}