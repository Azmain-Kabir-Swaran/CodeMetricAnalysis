{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "checkSpecialResources",
  "functionId": "checkSpecialResources___resourceInformationMap-Map__String,ResourceInformation__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 111,
  "functionEndLine": 150,
  "numCommitsSeen": 82,
  "timeTaken": 5306,
  "changeHistory": [
    "cbcada804d119b837ad99de71d7f44cb4629026e",
    "ca1043ab9030339d7cdd3275c3f8f4713b8bff59",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
    "805095496dfd8e50f71b70cf20845e954d3ba47c",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1"
  ],
  "changeHistoryShort": {
    "cbcada804d119b837ad99de71d7f44cb4629026e": "Ymultichange(Yrename,Ybodychange)",
    "ca1043ab9030339d7cdd3275c3f8f4713b8bff59": "Ybodychange",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": "Ybodychange",
    "805095496dfd8e50f71b70cf20845e954d3ba47c": "Ymultichange(Yrename,Ybodychange)",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Yfilerename",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": "Ybodychange",
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cbcada804d119b837ad99de71d7f44cb4629026e": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-9124. Resolve contradiction in ResourceUtils: addMandatoryResources / checkMandatoryResources work differently (#1121)\n\n",
      "commitDate": "02/08/19 4:04 AM",
      "commitName": "cbcada804d119b837ad99de71d7f44cb4629026e",
      "commitAuthor": "Adam Antal",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-9124. Resolve contradiction in ResourceUtils: addMandatoryResources / checkMandatoryResources work differently (#1121)\n\n",
          "commitDate": "02/08/19 4:04 AM",
          "commitName": "cbcada804d119b837ad99de71d7f44cb4629026e",
          "commitAuthor": "Adam Antal",
          "commitDateOld": "15/03/19 4:20 PM",
          "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 139.49,
          "commitsBetweenForRepo": 976,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  private static void checkMandatoryResources(\n+  private static void checkSpecialResources(\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n       throws YarnRuntimeException {\n     /*\n-     * Supporting \u0027memory\u0027, \u0027memory-mb\u0027, \u0027vcores\u0027 also as invalid resource names, in addition to\n-     * \u0027MEMORY\u0027 for historical reasons\n+     * Supporting \u0027memory\u0027, \u0027memory-mb\u0027, \u0027vcores\u0027 also as invalid resource\n+     * names, in addition to \u0027MEMORY\u0027 for historical reasons\n      */\n-    String keys[] \u003d { \"memory\", ResourceInformation.MEMORY_URI,\n+    String[] keys \u003d { \"memory\", ResourceInformation.MEMORY_URI,\n         ResourceInformation.VCORES_URI };\n     for(String key : keys) {\n       if (resourceInformationMap.containsKey(key)) {\n         LOG.warn(\"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n         throw new YarnRuntimeException(\n             \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n       }\n     }\n \n     for (Map.Entry\u003cString, ResourceInformation\u003e mandatoryResourceEntry :\n-        ResourceInformation.MANDATORY_RESOURCES.entrySet()) {\n+        ResourceInformation.SPECIAL_RESOURCES.entrySet()) {\n       String key \u003d mandatoryResourceEntry.getKey();\n       ResourceInformation mandatoryRI \u003d mandatoryResourceEntry.getValue();\n \n       ResourceInformation newDefinedRI \u003d resourceInformationMap.get(key);\n       if (newDefinedRI !\u003d null) {\n         String expectedUnit \u003d mandatoryRI.getUnits();\n         ResourceTypes expectedType \u003d mandatoryRI.getResourceType();\n         String actualUnit \u003d newDefinedRI.getUnits();\n         ResourceTypes actualType \u003d newDefinedRI.getResourceType();\n \n         if (!expectedUnit.equals(actualUnit) || !expectedType.equals(\n             actualType)) {\n           throw new YarnRuntimeException(\"Defined mandatory resource type\u003d\"\n               + key + \" inside resource-types.xml, however its type or \"\n               + \"unit is conflict to mandatory resource types, expected type\u003d\"\n               + expectedType + \", unit\u003d\" + expectedUnit + \"; actual type\u003d\"\n               + actualType + \" actual unit\u003d\" + actualUnit);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void checkSpecialResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    /*\n     * Supporting \u0027memory\u0027, \u0027memory-mb\u0027, \u0027vcores\u0027 also as invalid resource\n     * names, in addition to \u0027MEMORY\u0027 for historical reasons\n     */\n    String[] keys \u003d { \"memory\", ResourceInformation.MEMORY_URI,\n        ResourceInformation.VCORES_URI };\n    for(String key : keys) {\n      if (resourceInformationMap.containsKey(key)) {\n        LOG.warn(\"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n      }\n    }\n\n    for (Map.Entry\u003cString, ResourceInformation\u003e mandatoryResourceEntry :\n        ResourceInformation.SPECIAL_RESOURCES.entrySet()) {\n      String key \u003d mandatoryResourceEntry.getKey();\n      ResourceInformation mandatoryRI \u003d mandatoryResourceEntry.getValue();\n\n      ResourceInformation newDefinedRI \u003d resourceInformationMap.get(key);\n      if (newDefinedRI !\u003d null) {\n        String expectedUnit \u003d mandatoryRI.getUnits();\n        ResourceTypes expectedType \u003d mandatoryRI.getResourceType();\n        String actualUnit \u003d newDefinedRI.getUnits();\n        ResourceTypes actualType \u003d newDefinedRI.getResourceType();\n\n        if (!expectedUnit.equals(actualUnit) || !expectedType.equals(\n            actualType)) {\n          throw new YarnRuntimeException(\"Defined mandatory resource type\u003d\"\n              + key + \" inside resource-types.xml, however its type or \"\n              + \"unit is conflict to mandatory resource types, expected type\u003d\"\n              + expectedType + \", unit\u003d\" + expectedUnit + \"; actual type\u003d\"\n              + actualType + \" actual unit\u003d\" + actualUnit);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldValue": "checkMandatoryResources",
            "newValue": "checkSpecialResources"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9124. Resolve contradiction in ResourceUtils: addMandatoryResources / checkMandatoryResources work differently (#1121)\n\n",
          "commitDate": "02/08/19 4:04 AM",
          "commitName": "cbcada804d119b837ad99de71d7f44cb4629026e",
          "commitAuthor": "Adam Antal",
          "commitDateOld": "15/03/19 4:20 PM",
          "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 139.49,
          "commitsBetweenForRepo": 976,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  private static void checkMandatoryResources(\n+  private static void checkSpecialResources(\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n       throws YarnRuntimeException {\n     /*\n-     * Supporting \u0027memory\u0027, \u0027memory-mb\u0027, \u0027vcores\u0027 also as invalid resource names, in addition to\n-     * \u0027MEMORY\u0027 for historical reasons\n+     * Supporting \u0027memory\u0027, \u0027memory-mb\u0027, \u0027vcores\u0027 also as invalid resource\n+     * names, in addition to \u0027MEMORY\u0027 for historical reasons\n      */\n-    String keys[] \u003d { \"memory\", ResourceInformation.MEMORY_URI,\n+    String[] keys \u003d { \"memory\", ResourceInformation.MEMORY_URI,\n         ResourceInformation.VCORES_URI };\n     for(String key : keys) {\n       if (resourceInformationMap.containsKey(key)) {\n         LOG.warn(\"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n         throw new YarnRuntimeException(\n             \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n       }\n     }\n \n     for (Map.Entry\u003cString, ResourceInformation\u003e mandatoryResourceEntry :\n-        ResourceInformation.MANDATORY_RESOURCES.entrySet()) {\n+        ResourceInformation.SPECIAL_RESOURCES.entrySet()) {\n       String key \u003d mandatoryResourceEntry.getKey();\n       ResourceInformation mandatoryRI \u003d mandatoryResourceEntry.getValue();\n \n       ResourceInformation newDefinedRI \u003d resourceInformationMap.get(key);\n       if (newDefinedRI !\u003d null) {\n         String expectedUnit \u003d mandatoryRI.getUnits();\n         ResourceTypes expectedType \u003d mandatoryRI.getResourceType();\n         String actualUnit \u003d newDefinedRI.getUnits();\n         ResourceTypes actualType \u003d newDefinedRI.getResourceType();\n \n         if (!expectedUnit.equals(actualUnit) || !expectedType.equals(\n             actualType)) {\n           throw new YarnRuntimeException(\"Defined mandatory resource type\u003d\"\n               + key + \" inside resource-types.xml, however its type or \"\n               + \"unit is conflict to mandatory resource types, expected type\u003d\"\n               + expectedType + \", unit\u003d\" + expectedUnit + \"; actual type\u003d\"\n               + actualType + \" actual unit\u003d\" + actualUnit);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void checkSpecialResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    /*\n     * Supporting \u0027memory\u0027, \u0027memory-mb\u0027, \u0027vcores\u0027 also as invalid resource\n     * names, in addition to \u0027MEMORY\u0027 for historical reasons\n     */\n    String[] keys \u003d { \"memory\", ResourceInformation.MEMORY_URI,\n        ResourceInformation.VCORES_URI };\n    for(String key : keys) {\n      if (resourceInformationMap.containsKey(key)) {\n        LOG.warn(\"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n      }\n    }\n\n    for (Map.Entry\u003cString, ResourceInformation\u003e mandatoryResourceEntry :\n        ResourceInformation.SPECIAL_RESOURCES.entrySet()) {\n      String key \u003d mandatoryResourceEntry.getKey();\n      ResourceInformation mandatoryRI \u003d mandatoryResourceEntry.getValue();\n\n      ResourceInformation newDefinedRI \u003d resourceInformationMap.get(key);\n      if (newDefinedRI !\u003d null) {\n        String expectedUnit \u003d mandatoryRI.getUnits();\n        ResourceTypes expectedType \u003d mandatoryRI.getResourceType();\n        String actualUnit \u003d newDefinedRI.getUnits();\n        ResourceTypes actualType \u003d newDefinedRI.getResourceType();\n\n        if (!expectedUnit.equals(actualUnit) || !expectedType.equals(\n            actualType)) {\n          throw new YarnRuntimeException(\"Defined mandatory resource type\u003d\"\n              + key + \" inside resource-types.xml, however its type or \"\n              + \"unit is conflict to mandatory resource types, expected type\u003d\"\n              + expectedType + \", unit\u003d\" + expectedUnit + \"; actual type\u003d\"\n              + actualType + \" actual unit\u003d\" + actualUnit);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca1043ab9030339d7cdd3275c3f8f4713b8bff59": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7328. ResourceUtils allows yarn.nodemanager.resource-types.memory-mb and .vcores to override yarn.nodemanager.resource.memory-mb and .cpu-vcores. (lovekesh bansal via wangda)\n\nChange-Id: Ibb1faf0beefec079dae2208986976b2f64650672\n",
      "commitDate": "16/02/18 8:28 PM",
      "commitName": "ca1043ab9030339d7cdd3275c3f8f4713b8bff59",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/18 5:35 AM",
      "commitNameOld": "06cceba1cb07340c412c4467439c16ea6812e685",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 29.62,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   private static void checkMandatoryResources(\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n       throws YarnRuntimeException {\n     /*\n-     * Supporting \u0027memory\u0027 also as invalid resource name, in addition to\n+     * Supporting \u0027memory\u0027, \u0027memory-mb\u0027, \u0027vcores\u0027 also as invalid resource names, in addition to\n      * \u0027MEMORY\u0027 for historical reasons\n      */\n-    String key \u003d \"memory\";\n-    if (resourceInformationMap.containsKey(key)) {\n-      LOG.warn(\n-          \"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n-      throw new YarnRuntimeException(\n-          \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n+    String keys[] \u003d { \"memory\", ResourceInformation.MEMORY_URI,\n+        ResourceInformation.VCORES_URI };\n+    for(String key : keys) {\n+      if (resourceInformationMap.containsKey(key)) {\n+        LOG.warn(\"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n+        throw new YarnRuntimeException(\n+            \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n+      }\n     }\n \n     for (Map.Entry\u003cString, ResourceInformation\u003e mandatoryResourceEntry :\n         ResourceInformation.MANDATORY_RESOURCES.entrySet()) {\n-      key \u003d mandatoryResourceEntry.getKey();\n+      String key \u003d mandatoryResourceEntry.getKey();\n       ResourceInformation mandatoryRI \u003d mandatoryResourceEntry.getValue();\n \n       ResourceInformation newDefinedRI \u003d resourceInformationMap.get(key);\n       if (newDefinedRI !\u003d null) {\n         String expectedUnit \u003d mandatoryRI.getUnits();\n         ResourceTypes expectedType \u003d mandatoryRI.getResourceType();\n         String actualUnit \u003d newDefinedRI.getUnits();\n         ResourceTypes actualType \u003d newDefinedRI.getResourceType();\n \n         if (!expectedUnit.equals(actualUnit) || !expectedType.equals(\n             actualType)) {\n           throw new YarnRuntimeException(\"Defined mandatory resource type\u003d\"\n               + key + \" inside resource-types.xml, however its type or \"\n               + \"unit is conflict to mandatory resource types, expected type\u003d\"\n               + expectedType + \", unit\u003d\" + expectedUnit + \"; actual type\u003d\"\n               + actualType + \" actual unit\u003d\" + actualUnit);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void checkMandatoryResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    /*\n     * Supporting \u0027memory\u0027, \u0027memory-mb\u0027, \u0027vcores\u0027 also as invalid resource names, in addition to\n     * \u0027MEMORY\u0027 for historical reasons\n     */\n    String keys[] \u003d { \"memory\", ResourceInformation.MEMORY_URI,\n        ResourceInformation.VCORES_URI };\n    for(String key : keys) {\n      if (resourceInformationMap.containsKey(key)) {\n        LOG.warn(\"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n      }\n    }\n\n    for (Map.Entry\u003cString, ResourceInformation\u003e mandatoryResourceEntry :\n        ResourceInformation.MANDATORY_RESOURCES.entrySet()) {\n      String key \u003d mandatoryResourceEntry.getKey();\n      ResourceInformation mandatoryRI \u003d mandatoryResourceEntry.getValue();\n\n      ResourceInformation newDefinedRI \u003d resourceInformationMap.get(key);\n      if (newDefinedRI !\u003d null) {\n        String expectedUnit \u003d mandatoryRI.getUnits();\n        ResourceTypes expectedType \u003d mandatoryRI.getResourceType();\n        String actualUnit \u003d newDefinedRI.getUnits();\n        ResourceTypes actualType \u003d newDefinedRI.getResourceType();\n\n        if (!expectedUnit.equals(actualUnit) || !expectedType.equals(\n            actualType)) {\n          throw new YarnRuntimeException(\"Defined mandatory resource type\u003d\"\n              + key + \" inside resource-types.xml, however its type or \"\n              + \"unit is conflict to mandatory resource types, expected type\u003d\"\n              + expectedType + \", unit\u003d\" + expectedUnit + \"; actual type\u003d\"\n              + actualType + \" actual unit\u003d\" + actualUnit);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
      "commitDate": "11/10/17 11:14 AM",
      "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthor": "Sunil G",
      "commitDateOld": "14/09/17 11:23 AM",
      "commitNameOld": "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 26.99,
      "commitsBetweenForRepo": 228,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   private static void checkMandatoryResources(\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n       throws YarnRuntimeException {\n     /*\n      * Supporting \u0027memory\u0027 also as invalid resource name, in addition to\n      * \u0027MEMORY\u0027 for historical reasons\n      */\n     String key \u003d \"memory\";\n     if (resourceInformationMap.containsKey(key)) {\n-      LOG.warn(\"Attempt to define resource \u0027\" + key +\n-          \"\u0027, but it is not allowed.\");\n-      throw new YarnRuntimeException(\"Attempt to re-define mandatory resource \u0027\"\n-          + key + \"\u0027.\");\n+      LOG.warn(\n+          \"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n+      throw new YarnRuntimeException(\n+          \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n     }\n \n-    if (resourceInformationMap.containsKey(MEMORY)) {\n-      ResourceInformation memInfo \u003d resourceInformationMap.get(MEMORY);\n-      String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n-      ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n-      if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n-          .equals(memType)) {\n-        throw new YarnRuntimeException(\n-            \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n-                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027Mi\u0027.\");\n-      }\n-    }\n+    for (Map.Entry\u003cString, ResourceInformation\u003e mandatoryResourceEntry :\n+        ResourceInformation.MANDATORY_RESOURCES.entrySet()) {\n+      key \u003d mandatoryResourceEntry.getKey();\n+      ResourceInformation mandatoryRI \u003d mandatoryResourceEntry.getValue();\n \n-    if (resourceInformationMap.containsKey(VCORES)) {\n-      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(VCORES);\n-      String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n-      ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n-      if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n-          .getResourceType().equals(vcoreType)) {\n-        throw new YarnRuntimeException(\n-            \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n-                + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n+      ResourceInformation newDefinedRI \u003d resourceInformationMap.get(key);\n+      if (newDefinedRI !\u003d null) {\n+        String expectedUnit \u003d mandatoryRI.getUnits();\n+        ResourceTypes expectedType \u003d mandatoryRI.getResourceType();\n+        String actualUnit \u003d newDefinedRI.getUnits();\n+        ResourceTypes actualType \u003d newDefinedRI.getResourceType();\n+\n+        if (!expectedUnit.equals(actualUnit) || !expectedType.equals(\n+            actualType)) {\n+          throw new YarnRuntimeException(\"Defined mandatory resource type\u003d\"\n+              + key + \" inside resource-types.xml, however its type or \"\n+              + \"unit is conflict to mandatory resource types, expected type\u003d\"\n+              + expectedType + \", unit\u003d\" + expectedUnit + \"; actual type\u003d\"\n+              + actualType + \" actual unit\u003d\" + actualUnit);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void checkMandatoryResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    /*\n     * Supporting \u0027memory\u0027 also as invalid resource name, in addition to\n     * \u0027MEMORY\u0027 for historical reasons\n     */\n    String key \u003d \"memory\";\n    if (resourceInformationMap.containsKey(key)) {\n      LOG.warn(\n          \"Attempt to define resource \u0027\" + key + \"\u0027, but it is not allowed.\");\n      throw new YarnRuntimeException(\n          \"Attempt to re-define mandatory resource \u0027\" + key + \"\u0027.\");\n    }\n\n    for (Map.Entry\u003cString, ResourceInformation\u003e mandatoryResourceEntry :\n        ResourceInformation.MANDATORY_RESOURCES.entrySet()) {\n      key \u003d mandatoryResourceEntry.getKey();\n      ResourceInformation mandatoryRI \u003d mandatoryResourceEntry.getValue();\n\n      ResourceInformation newDefinedRI \u003d resourceInformationMap.get(key);\n      if (newDefinedRI !\u003d null) {\n        String expectedUnit \u003d mandatoryRI.getUnits();\n        ResourceTypes expectedType \u003d mandatoryRI.getResourceType();\n        String actualUnit \u003d newDefinedRI.getUnits();\n        ResourceTypes actualType \u003d newDefinedRI.getResourceType();\n\n        if (!expectedUnit.equals(actualUnit) || !expectedType.equals(\n            actualType)) {\n          throw new YarnRuntimeException(\"Defined mandatory resource type\u003d\"\n              + key + \" inside resource-types.xml, however its type or \"\n              + \"unit is conflict to mandatory resource types, expected type\u003d\"\n              + expectedType + \", unit\u003d\" + expectedUnit + \"; actual type\u003d\"\n              + actualType + \" actual unit\u003d\" + actualUnit);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "805095496dfd8e50f71b70cf20845e954d3ba47c": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-6933. [YARN-3926] ResourceUtils.DISALLOWED_NAMES check is duplicated. Contributed by Manikandan R.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "805095496dfd8e50f71b70cf20845e954d3ba47c",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6933. [YARN-3926] ResourceUtils.DISALLOWED_NAMES check is duplicated. Contributed by Manikandan R.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "805095496dfd8e50f71b70cf20845e954d3ba47c",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "53df3eac503064b8c4cd8eb2b659567622f4d8a7",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,39 @@\n-  private static void checkMandatatoryResources(\n+  private static void checkMandatoryResources(\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n       throws YarnRuntimeException {\n+    /*\n+     * Supporting \u0027memory\u0027 also as invalid resource name, in addition to\n+     * \u0027MEMORY\u0027 for historical reasons\n+     */\n+    String key \u003d \"memory\";\n+    if (resourceInformationMap.containsKey(key)) {\n+      LOG.warn(\"Attempt to define resource \u0027\" + key +\n+          \"\u0027, but it is not allowed.\");\n+      throw new YarnRuntimeException(\"Attempt to re-define mandatory resource \u0027\"\n+          + key + \"\u0027.\");\n+    }\n+\n     if (resourceInformationMap.containsKey(MEMORY)) {\n       ResourceInformation memInfo \u003d resourceInformationMap.get(MEMORY);\n       String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n       ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n       if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n           .equals(memType)) {\n         throw new YarnRuntimeException(\n             \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n                 + \" be of type \u0027COUNTABLE\u0027 and have units \u0027Mi\u0027.\");\n       }\n     }\n \n     if (resourceInformationMap.containsKey(VCORES)) {\n       ResourceInformation vcoreInfo \u003d resourceInformationMap.get(VCORES);\n       String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n       ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n       if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n           .getResourceType().equals(vcoreType)) {\n         throw new YarnRuntimeException(\n             \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n                 + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void checkMandatoryResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    /*\n     * Supporting \u0027memory\u0027 also as invalid resource name, in addition to\n     * \u0027MEMORY\u0027 for historical reasons\n     */\n    String key \u003d \"memory\";\n    if (resourceInformationMap.containsKey(key)) {\n      LOG.warn(\"Attempt to define resource \u0027\" + key +\n          \"\u0027, but it is not allowed.\");\n      throw new YarnRuntimeException(\"Attempt to re-define mandatory resource \u0027\"\n          + key + \"\u0027.\");\n    }\n\n    if (resourceInformationMap.containsKey(MEMORY)) {\n      ResourceInformation memInfo \u003d resourceInformationMap.get(MEMORY);\n      String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n      ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n      if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n          .equals(memType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027Mi\u0027.\");\n      }\n    }\n\n    if (resourceInformationMap.containsKey(VCORES)) {\n      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(VCORES);\n      String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n      ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n      if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n          .getResourceType().equals(vcoreType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n                + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldValue": "checkMandatatoryResources",
            "newValue": "checkMandatoryResources"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6933. [YARN-3926] ResourceUtils.DISALLOWED_NAMES check is duplicated. Contributed by Manikandan R.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "805095496dfd8e50f71b70cf20845e954d3ba47c",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "53df3eac503064b8c4cd8eb2b659567622f4d8a7",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,39 @@\n-  private static void checkMandatatoryResources(\n+  private static void checkMandatoryResources(\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n       throws YarnRuntimeException {\n+    /*\n+     * Supporting \u0027memory\u0027 also as invalid resource name, in addition to\n+     * \u0027MEMORY\u0027 for historical reasons\n+     */\n+    String key \u003d \"memory\";\n+    if (resourceInformationMap.containsKey(key)) {\n+      LOG.warn(\"Attempt to define resource \u0027\" + key +\n+          \"\u0027, but it is not allowed.\");\n+      throw new YarnRuntimeException(\"Attempt to re-define mandatory resource \u0027\"\n+          + key + \"\u0027.\");\n+    }\n+\n     if (resourceInformationMap.containsKey(MEMORY)) {\n       ResourceInformation memInfo \u003d resourceInformationMap.get(MEMORY);\n       String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n       ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n       if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n           .equals(memType)) {\n         throw new YarnRuntimeException(\n             \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n                 + \" be of type \u0027COUNTABLE\u0027 and have units \u0027Mi\u0027.\");\n       }\n     }\n \n     if (resourceInformationMap.containsKey(VCORES)) {\n       ResourceInformation vcoreInfo \u003d resourceInformationMap.get(VCORES);\n       String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n       ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n       if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n           .getResourceType().equals(vcoreType)) {\n         throw new YarnRuntimeException(\n             \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n                 + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void checkMandatoryResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    /*\n     * Supporting \u0027memory\u0027 also as invalid resource name, in addition to\n     * \u0027MEMORY\u0027 for historical reasons\n     */\n    String key \u003d \"memory\";\n    if (resourceInformationMap.containsKey(key)) {\n      LOG.warn(\"Attempt to define resource \u0027\" + key +\n          \"\u0027, but it is not allowed.\");\n      throw new YarnRuntimeException(\"Attempt to re-define mandatory resource \u0027\"\n          + key + \"\u0027.\");\n    }\n\n    if (resourceInformationMap.containsKey(MEMORY)) {\n      ResourceInformation memInfo \u003d resourceInformationMap.get(MEMORY);\n      String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n      ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n      if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n          .equals(memType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027Mi\u0027.\");\n      }\n    }\n\n    if (resourceInformationMap.containsKey(VCORES)) {\n      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(VCORES);\n      String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n      ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n      if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n          .getResourceType().equals(vcoreType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n                + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void checkMandatatoryResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    if (resourceInformationMap.containsKey(MEMORY)) {\n      ResourceInformation memInfo \u003d resourceInformationMap.get(MEMORY);\n      String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n      ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n      if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n          .equals(memType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027Mi\u0027.\");\n      }\n    }\n\n    if (resourceInformationMap.containsKey(VCORES)) {\n      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(VCORES);\n      String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n      ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n      if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n          .getResourceType().equals(vcoreType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n                + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
      }
    },
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4830. Add support for resource types in the nodemanager. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ceb12c59a34677518a198e19acb4e29cdfc8a0e1",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n   private static void checkMandatatoryResources(\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n       throws YarnRuntimeException {\n-    String memory \u003d ResourceInformation.MEMORY_MB.getName();\n-    String vcores \u003d ResourceInformation.VCORES.getName();\n-    if (resourceInformationMap.containsKey(memory)) {\n-      ResourceInformation memInfo \u003d resourceInformationMap.get(memory);\n+    if (resourceInformationMap.containsKey(MEMORY)) {\n+      ResourceInformation memInfo \u003d resourceInformationMap.get(MEMORY);\n       String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n       ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n       if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n           .equals(memType)) {\n         throw new YarnRuntimeException(\n             \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n-                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027M\u0027.\");\n+                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027Mi\u0027.\");\n       }\n     }\n \n-    if (resourceInformationMap.containsKey(vcores)) {\n-      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(vcores);\n+    if (resourceInformationMap.containsKey(VCORES)) {\n+      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(VCORES);\n       String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n       ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n       if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n           .getResourceType().equals(vcoreType)) {\n         throw new YarnRuntimeException(\n             \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n                 + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void checkMandatatoryResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    if (resourceInformationMap.containsKey(MEMORY)) {\n      ResourceInformation memInfo \u003d resourceInformationMap.get(MEMORY);\n      String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n      ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n      if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n          .equals(memType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027Mi\u0027.\");\n      }\n    }\n\n    if (resourceInformationMap.containsKey(VCORES)) {\n      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(VCORES);\n      String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n      ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n      if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n          .getResourceType().equals(vcoreType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n                + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4715. Add support to read resource types from a config file. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "ceb12c59a34677518a198e19acb4e29cdfc8a0e1",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,29 @@\n+  private static void checkMandatatoryResources(\n+      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n+      throws YarnRuntimeException {\n+    String memory \u003d ResourceInformation.MEMORY_MB.getName();\n+    String vcores \u003d ResourceInformation.VCORES.getName();\n+    if (resourceInformationMap.containsKey(memory)) {\n+      ResourceInformation memInfo \u003d resourceInformationMap.get(memory);\n+      String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n+      ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n+      if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n+          .equals(memType)) {\n+        throw new YarnRuntimeException(\n+            \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n+                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027M\u0027.\");\n+      }\n+    }\n+\n+    if (resourceInformationMap.containsKey(vcores)) {\n+      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(vcores);\n+      String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n+      ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n+      if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n+          .getResourceType().equals(vcoreType)) {\n+        throw new YarnRuntimeException(\n+            \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n+                + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void checkMandatatoryResources(\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap)\n      throws YarnRuntimeException {\n    String memory \u003d ResourceInformation.MEMORY_MB.getName();\n    String vcores \u003d ResourceInformation.VCORES.getName();\n    if (resourceInformationMap.containsKey(memory)) {\n      ResourceInformation memInfo \u003d resourceInformationMap.get(memory);\n      String memUnits \u003d ResourceInformation.MEMORY_MB.getUnits();\n      ResourceTypes memType \u003d ResourceInformation.MEMORY_MB.getResourceType();\n      if (!memInfo.getUnits().equals(memUnits) || !memInfo.getResourceType()\n          .equals(memType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027memory-mb\u0027. It can only\"\n                + \" be of type \u0027COUNTABLE\u0027 and have units \u0027M\u0027.\");\n      }\n    }\n\n    if (resourceInformationMap.containsKey(vcores)) {\n      ResourceInformation vcoreInfo \u003d resourceInformationMap.get(vcores);\n      String vcoreUnits \u003d ResourceInformation.VCORES.getUnits();\n      ResourceTypes vcoreType \u003d ResourceInformation.VCORES.getResourceType();\n      if (!vcoreInfo.getUnits().equals(vcoreUnits) || !vcoreInfo\n          .getResourceType().equals(vcoreType)) {\n        throw new YarnRuntimeException(\n            \"Attempt to re-define mandatory resource \u0027vcores\u0027. It can only be\"\n                + \" of type \u0027COUNTABLE\u0027 and have units \u0027\u0027(no units).\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}