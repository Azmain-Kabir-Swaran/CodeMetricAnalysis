{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MachineList.java",
  "functionName": "includes",
  "functionId": "includes___ipAddress-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/MachineList.java",
  "functionStartLine": 137,
  "functionEndLine": 187,
  "numCommitsSeen": 8,
  "timeTaken": 857,
  "changeHistory": [
    "0ab3f9d56465bf31668159c562305a3b8222004c",
    "fdf901451fbcb614826b2238cad13d00b49f2157"
  ],
  "changeHistoryShort": {
    "0ab3f9d56465bf31668159c562305a3b8222004c": "Ybodychange",
    "fdf901451fbcb614826b2238cad13d00b49f2157": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0ab3f9d56465bf31668159c562305a3b8222004c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10941. Proxy user verification NPEs if remote host is unresolvable (Benoy Antony via stevel).\n",
      "commitDate": "18/10/15 6:05 AM",
      "commitName": "0ab3f9d56465bf31668159c562305a3b8222004c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "08/01/15 10:06 AM",
      "commitNameOld": "20625c8f048701c9516da159b24c0b33983e4bb7",
      "commitAuthorOld": "Benoy Antony",
      "daysBetweenCommits": 282.79,
      "commitsBetweenForRepo": 2418,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n   public boolean includes(String ipAddress) {\n     \n     if (all) {\n       return true;\n     }\n     \n+    if (ipAddress \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"ipAddress is null.\");\n+    }\n+\n     //check in the set of ipAddresses\n     if ((ipAddresses !\u003d null) \u0026\u0026 ipAddresses.contains(ipAddress)) {\n       return true;\n     }\n     \n     //iterate through the ip ranges for inclusion\n     if (cidrAddresses !\u003d null) {\n       for(SubnetUtils.SubnetInfo cidrAddress : cidrAddresses) {\n         if(cidrAddress.isInRange(ipAddress)) {\n           return true;\n         }\n       }\n     }\n     \n     //check if the ipAddress matches one of hostnames\n     if (hostNames !\u003d null) {\n       //convert given ipAddress to hostname and look for a match\n       InetAddress hostAddr;\n       try {\n         hostAddr \u003d addressFactory.getByName(ipAddress);\n         if ((hostAddr !\u003d null) \u0026\u0026 hostNames.contains(hostAddr.getCanonicalHostName())) {\n           return true;\n         }\n       } catch (UnknownHostException e) {\n         //ignore the exception and proceed to resolve the list of hosts\n       }\n \n       //loop through host addresses and convert them to ip and look for a match\n       for (String host : hostNames) {\n         try {\n           hostAddr \u003d addressFactory.getByName(host);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(ipAddress)) {\n           return true;\n         }\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean includes(String ipAddress) {\n    \n    if (all) {\n      return true;\n    }\n    \n    if (ipAddress \u003d\u003d null) {\n      throw new IllegalArgumentException(\"ipAddress is null.\");\n    }\n\n    //check in the set of ipAddresses\n    if ((ipAddresses !\u003d null) \u0026\u0026 ipAddresses.contains(ipAddress)) {\n      return true;\n    }\n    \n    //iterate through the ip ranges for inclusion\n    if (cidrAddresses !\u003d null) {\n      for(SubnetUtils.SubnetInfo cidrAddress : cidrAddresses) {\n        if(cidrAddress.isInRange(ipAddress)) {\n          return true;\n        }\n      }\n    }\n    \n    //check if the ipAddress matches one of hostnames\n    if (hostNames !\u003d null) {\n      //convert given ipAddress to hostname and look for a match\n      InetAddress hostAddr;\n      try {\n        hostAddr \u003d addressFactory.getByName(ipAddress);\n        if ((hostAddr !\u003d null) \u0026\u0026 hostNames.contains(hostAddr.getCanonicalHostName())) {\n          return true;\n        }\n      } catch (UnknownHostException e) {\n        //ignore the exception and proceed to resolve the list of hosts\n      }\n\n      //loop through host addresses and convert them to ip and look for a match\n      for (String host : hostNames) {\n        try {\n          hostAddr \u003d addressFactory.getByName(host);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(ipAddress)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/MachineList.java",
      "extendedDetails": {}
    },
    "fdf901451fbcb614826b2238cad13d00b49f2157": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10565. Support IP ranges (CIDR) in proxyuser.hosts. (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605987 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/06/14 1:32 AM",
      "commitName": "fdf901451fbcb614826b2238cad13d00b49f2157",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,47 @@\n+  public boolean includes(String ipAddress) {\n+    \n+    if (all) {\n+      return true;\n+    }\n+    \n+    //check in the set of ipAddresses\n+    if ((ipAddresses !\u003d null) \u0026\u0026 ipAddresses.contains(ipAddress)) {\n+      return true;\n+    }\n+    \n+    //iterate through the ip ranges for inclusion\n+    if (cidrAddresses !\u003d null) {\n+      for(SubnetUtils.SubnetInfo cidrAddress : cidrAddresses) {\n+        if(cidrAddress.isInRange(ipAddress)) {\n+          return true;\n+        }\n+      }\n+    }\n+    \n+    //check if the ipAddress matches one of hostnames\n+    if (hostNames !\u003d null) {\n+      //convert given ipAddress to hostname and look for a match\n+      InetAddress hostAddr;\n+      try {\n+        hostAddr \u003d addressFactory.getByName(ipAddress);\n+        if ((hostAddr !\u003d null) \u0026\u0026 hostNames.contains(hostAddr.getCanonicalHostName())) {\n+          return true;\n+        }\n+      } catch (UnknownHostException e) {\n+        //ignore the exception and proceed to resolve the list of hosts\n+      }\n+\n+      //loop through host addresses and convert them to ip and look for a match\n+      for (String host : hostNames) {\n+        try {\n+          hostAddr \u003d addressFactory.getByName(host);\n+        } catch (UnknownHostException e) {\n+          continue;\n+        }\n+        if (hostAddr.getHostAddress().equals(ipAddress)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean includes(String ipAddress) {\n    \n    if (all) {\n      return true;\n    }\n    \n    //check in the set of ipAddresses\n    if ((ipAddresses !\u003d null) \u0026\u0026 ipAddresses.contains(ipAddress)) {\n      return true;\n    }\n    \n    //iterate through the ip ranges for inclusion\n    if (cidrAddresses !\u003d null) {\n      for(SubnetUtils.SubnetInfo cidrAddress : cidrAddresses) {\n        if(cidrAddress.isInRange(ipAddress)) {\n          return true;\n        }\n      }\n    }\n    \n    //check if the ipAddress matches one of hostnames\n    if (hostNames !\u003d null) {\n      //convert given ipAddress to hostname and look for a match\n      InetAddress hostAddr;\n      try {\n        hostAddr \u003d addressFactory.getByName(ipAddress);\n        if ((hostAddr !\u003d null) \u0026\u0026 hostNames.contains(hostAddr.getCanonicalHostName())) {\n          return true;\n        }\n      } catch (UnknownHostException e) {\n        //ignore the exception and proceed to resolve the list of hosts\n      }\n\n      //loop through host addresses and convert them to ip and look for a match\n      for (String host : hostNames) {\n        try {\n          hostAddr \u003d addressFactory.getByName(host);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(ipAddress)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/MachineList.java"
    }
  }
}