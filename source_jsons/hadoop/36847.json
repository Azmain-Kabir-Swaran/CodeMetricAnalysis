{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "updateReservation",
  "functionId": "updateReservation___resContext-ReservationUpdateRequestInfo__hsr-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2186,
  "functionEndLine": 2216,
  "numCommitsSeen": 106,
  "timeTaken": 3482,
  "changeHistory": [
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "c25a6354598ec855bec7f695a7c3eed8794cd381"
  ],
  "changeHistoryShort": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "c25a6354598ec855bec7f695a7c3eed8794cd381": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "27/04/18 10:28 AM",
      "commitNameOld": "ef3ecc308dbea41c6a88bd4d16739c7bbc10cdda",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,31 @@\n   public Response updateReservation(ReservationUpdateRequestInfo resContext,\n       @Context HttpServletRequest hsr)\n       throws AuthorizationException, IOException, InterruptedException {\n \n-    init();\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n-    if (callerUGI \u003d\u003d null) {\n-      throw new AuthorizationException(\n-          \"Unable to obtain user name, \" + \"user not authenticated\");\n-    }\n-    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n-      String msg \u003d \"The default static user cannot carry out this operation.\";\n-      return Response.status(Status.FORBIDDEN).entity(msg).build();\n-    }\n+    initForWritableEndpoints(callerUGI, false);\n \n     final ReservationUpdateRequest reservation \u003d\n         createReservationUpdateRequest(resContext);\n \n     ReservationUpdateResponseInfo resRespInfo;\n     try {\n       resRespInfo \u003d callerUGI\n           .doAs(new PrivilegedExceptionAction\u003cReservationUpdateResponseInfo\u003e() {\n             @Override\n             public ReservationUpdateResponseInfo run()\n                 throws IOException, YarnException {\n               rm.getClientRMService().updateReservation(reservation);\n               return new ReservationUpdateResponseInfo();\n             }\n           });\n     } catch (UndeclaredThrowableException ue) {\n       if (ue.getCause() instanceof YarnException) {\n         throw new BadRequestException(ue.getCause().getMessage());\n       }\n       LOG.info(\"Update reservation request failed\", ue);\n       throw ue;\n     }\n \n     return Response.status(Status.OK).entity(resRespInfo).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateReservation(ReservationUpdateRequestInfo resContext,\n      @Context HttpServletRequest hsr)\n      throws AuthorizationException, IOException, InterruptedException {\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, false);\n\n    final ReservationUpdateRequest reservation \u003d\n        createReservationUpdateRequest(resContext);\n\n    ReservationUpdateResponseInfo resRespInfo;\n    try {\n      resRespInfo \u003d callerUGI\n          .doAs(new PrivilegedExceptionAction\u003cReservationUpdateResponseInfo\u003e() {\n            @Override\n            public ReservationUpdateResponseInfo run()\n                throws IOException, YarnException {\n              rm.getClientRMService().updateReservation(reservation);\n              return new ReservationUpdateResponseInfo();\n            }\n          });\n    } catch (UndeclaredThrowableException ue) {\n      if (ue.getCause() instanceof YarnException) {\n        throw new BadRequestException(ue.getCause().getMessage());\n      }\n      LOG.info(\"Update reservation request failed\", ue);\n      throw ue;\n    }\n\n    return Response.status(Status.OK).entity(resRespInfo).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "c25a6354598ec855bec7f695a7c3eed8794cd381": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4248. REST API for submit/update/delete Reservations. (curino)\n",
      "commitDate": "07/12/15 1:33 PM",
      "commitName": "c25a6354598ec855bec7f695a7c3eed8794cd381",
      "commitAuthor": "\u003d",
      "diff": "@@ -0,0 +1,40 @@\n+  public Response updateReservation(ReservationUpdateRequestInfo resContext,\n+      @Context HttpServletRequest hsr) throws AuthorizationException,\n+      IOException, InterruptedException {\n+\n+    init();\n+    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n+    if (callerUGI \u003d\u003d null) {\n+      throw new AuthorizationException(\"Unable to obtain user name, \"\n+          + \"user not authenticated\");\n+    }\n+    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n+      String msg \u003d \"The default static user cannot carry out this operation.\";\n+      return Response.status(Status.FORBIDDEN).entity(msg).build();\n+    }\n+\n+    final ReservationUpdateRequest reservation \u003d\n+        createReservationUpdateRequest(resContext);\n+\n+    ReservationUpdateResponseInfo resRespInfo;\n+    try {\n+      resRespInfo \u003d\n+          callerUGI.doAs(\n+              new PrivilegedExceptionAction\u003cReservationUpdateResponseInfo\u003e() {\n+                @Override\n+                public ReservationUpdateResponseInfo run() throws IOException,\n+                    YarnException {\n+                  rm.getClientRMService().updateReservation(reservation);\n+                  return new ReservationUpdateResponseInfo();\n+                }\n+              });\n+    } catch (UndeclaredThrowableException ue) {\n+      if (ue.getCause() instanceof YarnException) {\n+        throw new BadRequestException(ue.getCause().getMessage());\n+      }\n+      LOG.info(\"Update reservation request failed\", ue);\n+      throw ue;\n+    }\n+\n+    return Response.status(Status.OK).entity(resRespInfo).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateReservation(ReservationUpdateRequestInfo resContext,\n      @Context HttpServletRequest hsr) throws AuthorizationException,\n      IOException, InterruptedException {\n\n    init();\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    if (callerUGI \u003d\u003d null) {\n      throw new AuthorizationException(\"Unable to obtain user name, \"\n          + \"user not authenticated\");\n    }\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 isStaticUser(callerUGI)) {\n      String msg \u003d \"The default static user cannot carry out this operation.\";\n      return Response.status(Status.FORBIDDEN).entity(msg).build();\n    }\n\n    final ReservationUpdateRequest reservation \u003d\n        createReservationUpdateRequest(resContext);\n\n    ReservationUpdateResponseInfo resRespInfo;\n    try {\n      resRespInfo \u003d\n          callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cReservationUpdateResponseInfo\u003e() {\n                @Override\n                public ReservationUpdateResponseInfo run() throws IOException,\n                    YarnException {\n                  rm.getClientRMService().updateReservation(reservation);\n                  return new ReservationUpdateResponseInfo();\n                }\n              });\n    } catch (UndeclaredThrowableException ue) {\n      if (ue.getCause() instanceof YarnException) {\n        throw new BadRequestException(ue.getCause().getMessage());\n      }\n      LOG.info(\"Update reservation request failed\", ue);\n      throw ue;\n    }\n\n    return Response.status(Status.OK).entity(resRespInfo).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}