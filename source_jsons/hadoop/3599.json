{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSInputStream.java",
  "functionName": "chooseDataNode",
  "functionId": "chooseDataNode___block-LocatedBlock__ignoredNodes-Collection__DatanodeInfo__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
  "functionStartLine": 964,
  "functionEndLine": 967,
  "numCommitsSeen": 189,
  "timeTaken": 9481,
  "changeHistory": [
    "b6bfb2fcb2391d51b8de97c01c1290880779132e",
    "8ea9bbce2614e8eb499af73589f021ed1789e78f",
    "be34e85e682880f46eee0310bf00ecc7d39cd5bd",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "bff5999d07e9416a22846c849487e509ede55040",
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
    "439614b0c8a3df3d8b7967451c5331a0e034e13a",
    "2cc9514ad643ae49d30524743420ee9744e571bd",
    "caa42adf208bfb5625d1b3ef665fbf334ffcccd9",
    "463aec11718e47d4aabb86a7a539cb973460aae6",
    "17db74a1c1972392a5aba48a3e0334dcd6c76487",
    "c68b1d1b31e304c27e419e810ded0fc97e435ea6",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "f98d8eb291be364102b5c3011ce72e8f43eab389",
    "be7dd8333a7e56e732171db0781786987de03195",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "710e5a960e8af1d4c73e386041096aacfee8b828",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b6bfb2fcb2391d51b8de97c01c1290880779132e": "Ybodychange",
    "8ea9bbce2614e8eb499af73589f021ed1789e78f": "Ybodychange",
    "be34e85e682880f46eee0310bf00ecc7d39cd5bd": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "bff5999d07e9416a22846c849487e509ede55040": "Ybodychange",
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080": "Ybodychange",
    "439614b0c8a3df3d8b7967451c5331a0e034e13a": "Ybodychange",
    "2cc9514ad643ae49d30524743420ee9744e571bd": "Ybodychange",
    "caa42adf208bfb5625d1b3ef665fbf334ffcccd9": "Ybodychange",
    "463aec11718e47d4aabb86a7a539cb973460aae6": "Ybodychange",
    "17db74a1c1972392a5aba48a3e0334dcd6c76487": "Ymultichange(Yparameterchange,Ybodychange)",
    "c68b1d1b31e304c27e419e810ded0fc97e435ea6": "Ybodychange",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "f98d8eb291be364102b5c3011ce72e8f43eab389": "Ybodychange",
    "be7dd8333a7e56e732171db0781786987de03195": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "710e5a960e8af1d4c73e386041096aacfee8b828": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6bfb2fcb2391d51b8de97c01c1290880779132e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11738. Hedged pread takes more time when block moved from initial locations. Contributed by Vinayakumar B.\n",
      "commitDate": "21/08/17 1:45 PM",
      "commitName": "b6bfb2fcb2391d51b8de97c01c1290880779132e",
      "commitAuthor": "John Zhuge",
      "commitDateOld": "11/08/17 7:42 PM",
      "commitNameOld": "8b242f09a61a7536d2422546bfa6c2aaf1d57ed6",
      "commitAuthorOld": "John Zhuge",
      "daysBetweenCommits": 9.75,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,4 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n-    while (true) {\n-      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n-      if (result !\u003d null) {\n-        return result;\n-      } else {\n-        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n-            deadNodes, ignoredNodes);\n-        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n-        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n-          String description \u003d \"Could not obtain block: \" + blockInfo;\n-          DFSClient.LOG.warn(description + errMsg\n-              + \". Throwing a BlockMissingException\");\n-          throw new BlockMissingException(src, description,\n-              block.getStartOffset());\n-        }\n-\n-        DatanodeInfo[] nodes \u003d block.getLocations();\n-        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n-          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n-        }\n-        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n-            + \" from any node: \" + errMsg\n-            + \". Will get new block locations from namenode and retry...\");\n-        try {\n-          // Introducing a random factor to the wait time before another retry.\n-          // The wait time is dependent on # of failures and a random factor.\n-          // At the first time of getting a BlockMissingException, the wait time\n-          // is a random number between 0..3000 ms. If the first retry\n-          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n-          // Also at the second retry, the waiting window is expanded to 6000 ms\n-          // alleviating the request rate from the server. Similarly the 3rd retry\n-          // will wait 6000ms grace period before retry and the waiting window is\n-          // expanded to 9000ms.\n-          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n-          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n-              // expanding time window for each failure\n-              timeWindow * (failures + 1) *\n-              ThreadLocalRandom.current().nextDouble();\n-          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) +\n-              \" IOException, will wait for \" + waitTime + \" msec.\");\n-          Thread.sleep((long)waitTime);\n-        } catch (InterruptedException e) {\n-          Thread.currentThread().interrupt();\n-          throw new InterruptedIOException(\n-              \"Interrupted while choosing DataNode for read.\");\n-        }\n-        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n-        openInfo(true);\n-        block \u003d refreshLocatedBlock(block);\n-        failures++;\n-      }\n-    }\n+    return chooseDataNode(block, ignoredNodes, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    return chooseDataNode(block, ignoredNodes, true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "8ea9bbce2614e8eb499af73589f021ed1789e78f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10508. DFSInputStream should set thread\u0027s interrupt status after catching InterruptException from sleep. Contributed by Jing Zhao.\n",
      "commitDate": "08/06/16 10:52 PM",
      "commitName": "8ea9bbce2614e8eb499af73589f021ed1789e78f",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "07/06/16 10:48 AM",
      "commitNameOld": "be34e85e682880f46eee0310bf00ecc7d39cd5bd",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n       if (result !\u003d null) {\n         return result;\n       } else {\n         String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n             deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n \n         DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms.\n           final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n               // expanding time window for each failure\n               timeWindow * (failures + 1) *\n               ThreadLocalRandom.current().nextDouble();\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) +\n               \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n           throw new InterruptedIOException(\n               \"Interrupted while choosing DataNode for read.\");\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo(true);\n         block \u003d refreshLocatedBlock(block);\n         failures++;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n      if (result !\u003d null) {\n        return result;\n      } else {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n            deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms.\n          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n              // expanding time window for each failure\n              timeWindow * (failures + 1) *\n              ThreadLocalRandom.current().nextDouble();\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) +\n              \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedIOException(\n              \"Interrupted while choosing DataNode for read.\");\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo(true);\n        block \u003d refreshLocatedBlock(block);\n        failures++;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "be34e85e682880f46eee0310bf00ecc7d39cd5bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10468. HDFS read ends up ignoring an interrupt. Contributed by Jing Zhao\n",
      "commitDate": "07/06/16 10:48 AM",
      "commitName": "be34e85e682880f46eee0310bf00ecc7d39cd5bd",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "25/04/16 12:01 PM",
      "commitNameOld": "f308561f1d885491b88db73ac63003202056d661",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 42.95,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,54 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n       if (result !\u003d null) {\n         return result;\n       } else {\n         String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n             deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n \n         DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms.\n           final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n               // expanding time window for each failure\n               timeWindow * (failures + 1) *\n               ThreadLocalRandom.current().nextDouble();\n-          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n+          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) +\n+              \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n-        } catch (InterruptedException ignored) {\n+        } catch (InterruptedException e) {\n+          throw new InterruptedIOException(\n+              \"Interrupted while choosing DataNode for read.\");\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo(true);\n         block \u003d refreshLocatedBlock(block);\n         failures++;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n      if (result !\u003d null) {\n        return result;\n      } else {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n            deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms.\n          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n              // expanding time window for each failure\n              timeWindow * (failures + 1) *\n              ThreadLocalRandom.current().nextDouble();\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) +\n              \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException e) {\n          throw new InterruptedIOException(\n              \"Interrupted while choosing DataNode for read.\");\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo(true);\n        block \u003d refreshLocatedBlock(block);\n        failures++;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n       if (result !\u003d null) {\n         return result;\n       } else {\n         String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n-          deadNodes, ignoredNodes);\n+            deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n \n         DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n-          // expanded to 9000ms. \n+          // expanded to 9000ms.\n           final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n               // expanding time window for each failure\n               timeWindow * (failures + 1) *\n               ThreadLocalRandom.current().nextDouble();\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n-        } catch (InterruptedException iex) {\n+        } catch (InterruptedException ignored) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo(true);\n         block \u003d refreshLocatedBlock(block);\n         failures++;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n      if (result !\u003d null) {\n        return result;\n      } else {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n            deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms.\n          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n              // expanding time window for each failure\n              timeWindow * (failures + 1) *\n              ThreadLocalRandom.current().nextDouble();\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException ignored) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo(true);\n        block \u003d refreshLocatedBlock(block);\n        failures++;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n      if (result !\u003d null) {\n        return result;\n      } else {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n          deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n              // expanding time window for each failure\n              timeWindow * (failures + 1) *\n              ThreadLocalRandom.current().nextDouble();\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo(true);\n        block \u003d refreshLocatedBlock(block);\n        failures++;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "bff5999d07e9416a22846c849487e509ede55040": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8703. Merge refactor of DFSInputStream from ErasureCoding branch (Contributed by Vinayakumar B)\n",
      "commitDate": "02/07/15 3:41 AM",
      "commitName": "bff5999d07e9416a22846c849487e509ede55040",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "04/06/15 10:51 AM",
      "commitNameOld": "ade6d9a61eb2e57a975f0efcdf8828d51ffec5fd",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 27.7,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n       if (result !\u003d null) {\n         return result;\n       } else {\n         String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n           deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n \n         DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n               // expanding time window for each failure\n               timeWindow * (failures + 1) *\n               ThreadLocalRandom.current().nextDouble();\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n-        openInfo();\n-        block \u003d getBlockAt(block.getStartOffset());\n+        openInfo(true);\n+        block \u003d refreshLocatedBlock(block);\n         failures++;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n      if (result !\u003d null) {\n        return result;\n      } else {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n          deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n              // expanding time window for each failure\n              timeWindow * (failures + 1) *\n              ThreadLocalRandom.current().nextDouble();\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo(true);\n        block \u003d refreshLocatedBlock(block);\n        failures++;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11970. Replace uses of ThreadLocal\u003cRandom\u003e with JDK7 ThreadLocalRandom (Sean Busbey via Colin P. McCabe)\n",
      "commitDate": "19/05/15 10:50 AM",
      "commitName": "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "28/04/15 6:11 PM",
      "commitNameOld": "439614b0c8a3df3d8b7967451c5331a0e034e13a",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 20.69,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,51 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n       if (result !\u003d null) {\n         return result;\n       } else {\n         String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n           deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n \n         DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n-            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n+              // expanding time window for each failure\n+              timeWindow * (failures + 1) *\n+              ThreadLocalRandom.current().nextDouble();\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset());\n         failures++;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n      if (result !\u003d null) {\n        return result;\n      } else {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n          deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n              // expanding time window for each failure\n              timeWindow * (failures + 1) *\n              ThreadLocalRandom.current().nextDouble();\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset());\n        failures++;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "439614b0c8a3df3d8b7967451c5331a0e034e13a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8280. Code Cleanup in DFSInputStream. Contributed by Jing Zhao.\n",
      "commitDate": "28/04/15 6:11 PM",
      "commitName": "439614b0c8a3df3d8b7967451c5331a0e034e13a",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "16/04/15 1:22 PM",
      "commitNameOld": "75bbcc8bf3fa1daf54f56868dae737f6da12ab1f",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 12.2,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n-      try {\n-        return getBestNodeDNAddrPair(block, ignoredNodes);\n-      } catch (IOException ie) {\n+      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n+      if (result !\u003d null) {\n+        return result;\n+      } else {\n         String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n           deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n \n         DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n-            + \" from any node: \" + ie + errMsg\n+            + \" from any node: \" + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset());\n         failures++;\n-        continue;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DNAddrPair result \u003d getBestNodeDNAddrPair(block, ignoredNodes);\n      if (result !\u003d null) {\n        return result;\n      } else {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n          deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset());\n        failures++;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "2cc9514ad643ae49d30524743420ee9744e571bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
      "commitDate": "10/04/15 2:48 PM",
      "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "09/04/15 11:22 AM",
      "commitNameOld": "30acb7372ab97adf9bc86ead529c96cfe36e2396",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1.14,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       try {\n         return getBestNodeDNAddrPair(block, ignoredNodes);\n       } catch (IOException ie) {\n         String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n           deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n-        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n+        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n \n         DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + ie + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n-          final int timeWindow \u003d dfsClient.getConf().timeWindow;\n+          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset());\n         failures++;\n         continue;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      try {\n        return getBestNodeDNAddrPair(block, ignoredNodes);\n      } catch (IOException ie) {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n          deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getConf().getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + ie + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().getTimeWindow();\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset());\n        failures++;\n        continue;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "caa42adf208bfb5625d1b3ef665fbf334ffcccd9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7495. Remove updatePosition argument from DFSInputStream#getBlockAt() (cmccabe)\n",
      "commitDate": "25/02/15 1:30 PM",
      "commitName": "caa42adf208bfb5625d1b3ef665fbf334ffcccd9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "21/02/15 3:38 PM",
      "commitNameOld": "8b465b4b8caed31ca9daeaae108f9a868a30a455",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 3.91,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       try {\n         return getBestNodeDNAddrPair(block, ignoredNodes);\n       } catch (IOException ie) {\n         String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n           deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n \n         DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + ie + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           final int timeWindow \u003d dfsClient.getConf().timeWindow;\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n-        block \u003d getBlockAt(block.getStartOffset(), false);\n+        block \u003d getBlockAt(block.getStartOffset());\n         failures++;\n         continue;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      try {\n        return getBestNodeDNAddrPair(block, ignoredNodes);\n      } catch (IOException ie) {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n          deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + ie + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().timeWindow;\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset());\n        failures++;\n        continue;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "463aec11718e47d4aabb86a7a539cb973460aae6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
      "commitDate": "27/10/14 9:38 AM",
      "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
      "commitAuthor": "cnauroth",
      "commitDateOld": "03/10/14 1:35 PM",
      "commitNameOld": "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 23.84,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block,\n       Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n-      DatanodeInfo[] nodes \u003d block.getLocations();\n       try {\n-        return getBestNodeDNAddrPair(nodes, ignoredNodes);\n+        return getBestNodeDNAddrPair(block, ignoredNodes);\n       } catch (IOException ie) {\n-        String errMsg \u003d\n-          getBestNodeDNAddrPairErrorString(nodes, deadNodes, ignoredNodes);\n+        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n+          deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n           String description \u003d \"Could not obtain block: \" + blockInfo;\n           DFSClient.LOG.warn(description + errMsg\n               + \". Throwing a BlockMissingException\");\n           throw new BlockMissingException(src, description,\n               block.getStartOffset());\n         }\n-        \n+\n+        DatanodeInfo[] nodes \u003d block.getLocations();\n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + ie + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           final int timeWindow \u003d dfsClient.getConf().timeWindow;\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset(), false);\n         failures++;\n         continue;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      try {\n        return getBestNodeDNAddrPair(block, ignoredNodes);\n      } catch (IOException ie) {\n        String errMsg \u003d getBestNodeDNAddrPairErrorString(block.getLocations(),\n          deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n\n        DatanodeInfo[] nodes \u003d block.getLocations();\n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + ie + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().timeWindow;\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "17db74a1c1972392a5aba48a3e0334dcd6c76487": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5776 Support \u0027hedged\u0027 reads in DFSClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1571466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/14 2:34 PM",
      "commitName": "17db74a1c1972392a5aba48a3e0334dcd6c76487",
      "commitAuthor": "Michael Stack",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5776 Support \u0027hedged\u0027 reads in DFSClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1571466 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/02/14 2:34 PM",
          "commitName": "17db74a1c1972392a5aba48a3e0334dcd6c76487",
          "commitAuthor": "Michael Stack",
          "commitDateOld": "12/02/14 11:08 AM",
          "commitNameOld": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 12.14,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,49 @@\n-  private DNAddrPair chooseDataNode(LocatedBlock block)\n-    throws IOException {\n+  private DNAddrPair chooseDataNode(LocatedBlock block,\n+      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       DatanodeInfo[] nodes \u003d block.getLocations();\n       try {\n-        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n-        final String dnAddr \u003d\n-            chosenNode.getXferAddr(dfsClient.getConf().connectToDnViaHostname);\n-        if (DFSClient.LOG.isDebugEnabled()) {\n-          DFSClient.LOG.debug(\"Connecting to datanode \" + dnAddr);\n-        }\n-        InetSocketAddress targetAddr \u003d NetUtils.createSocketAddr(dnAddr);\n-        return new DNAddrPair(chosenNode, targetAddr);\n+        return getBestNodeDNAddrPair(nodes, ignoredNodes);\n       } catch (IOException ie) {\n+        String errMsg \u003d\n+          getBestNodeDNAddrPairErrorString(nodes, deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n-          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n-                                          block.getStartOffset());\n+          String description \u003d \"Could not obtain block: \" + blockInfo;\n+          DFSClient.LOG.warn(description + errMsg\n+              + \". Throwing a BlockMissingException\");\n+          throw new BlockMissingException(src, description,\n+              block.getStartOffset());\n         }\n         \n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n-            + \" from any node: \" + ie\n+            + \" from any node: \" + ie + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           final int timeWindow \u003d dfsClient.getConf().timeWindow;\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset(), false);\n         failures++;\n         continue;\n       }\n     }\n-  } \n\\ No newline at end of file\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        return getBestNodeDNAddrPair(nodes, ignoredNodes);\n      } catch (IOException ie) {\n        String errMsg \u003d\n          getBestNodeDNAddrPairErrorString(nodes, deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + ie + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().timeWindow;\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[block-LocatedBlock]",
            "newValue": "[block-LocatedBlock, ignoredNodes-Collection\u003cDatanodeInfo\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5776 Support \u0027hedged\u0027 reads in DFSClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1571466 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/02/14 2:34 PM",
          "commitName": "17db74a1c1972392a5aba48a3e0334dcd6c76487",
          "commitAuthor": "Michael Stack",
          "commitDateOld": "12/02/14 11:08 AM",
          "commitNameOld": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 12.14,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,49 @@\n-  private DNAddrPair chooseDataNode(LocatedBlock block)\n-    throws IOException {\n+  private DNAddrPair chooseDataNode(LocatedBlock block,\n+      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n     while (true) {\n       DatanodeInfo[] nodes \u003d block.getLocations();\n       try {\n-        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n-        final String dnAddr \u003d\n-            chosenNode.getXferAddr(dfsClient.getConf().connectToDnViaHostname);\n-        if (DFSClient.LOG.isDebugEnabled()) {\n-          DFSClient.LOG.debug(\"Connecting to datanode \" + dnAddr);\n-        }\n-        InetSocketAddress targetAddr \u003d NetUtils.createSocketAddr(dnAddr);\n-        return new DNAddrPair(chosenNode, targetAddr);\n+        return getBestNodeDNAddrPair(nodes, ignoredNodes);\n       } catch (IOException ie) {\n+        String errMsg \u003d\n+          getBestNodeDNAddrPairErrorString(nodes, deadNodes, ignoredNodes);\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n-          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n-                                          block.getStartOffset());\n+          String description \u003d \"Could not obtain block: \" + blockInfo;\n+          DFSClient.LOG.warn(description + errMsg\n+              + \". Throwing a BlockMissingException\");\n+          throw new BlockMissingException(src, description,\n+              block.getStartOffset());\n         }\n         \n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n-            + \" from any node: \" + ie\n+            + \" from any node: \" + ie + errMsg\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           final int timeWindow \u003d dfsClient.getConf().timeWindow;\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset(), false);\n         failures++;\n         continue;\n       }\n     }\n-  } \n\\ No newline at end of file\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block,\n      Collection\u003cDatanodeInfo\u003e ignoredNodes) throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        return getBestNodeDNAddrPair(nodes, ignoredNodes);\n      } catch (IOException ie) {\n        String errMsg \u003d\n          getBestNodeDNAddrPairErrorString(nodes, deadNodes, ignoredNodes);\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          String description \u003d \"Could not obtain block: \" + blockInfo;\n          DFSClient.LOG.warn(description + errMsg\n              + \". Throwing a BlockMissingException\");\n          throw new BlockMissingException(src, description,\n              block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + ie + errMsg\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().timeWindow;\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "c68b1d1b31e304c27e419e810ded0fc97e435ea6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4914. Use DFSClient.Conf instead of Configuration.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/13 9:43 PM",
      "commitName": "c68b1d1b31e304c27e419e810ded0fc97e435ea6",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/05/13 10:58 AM",
      "commitNameOld": "4ed1fc58c0683bbcd5c4c211ea162ed37bf7dc4f",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 40.45,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block)\n     throws IOException {\n     while (true) {\n       DatanodeInfo[] nodes \u003d block.getLocations();\n       try {\n         DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n         final String dnAddr \u003d\n-            chosenNode.getXferAddr(dfsClient.connectToDnViaHostname());\n+            chosenNode.getXferAddr(dfsClient.getConf().connectToDnViaHostname);\n         if (DFSClient.LOG.isDebugEnabled()) {\n           DFSClient.LOG.debug(\"Connecting to datanode \" + dnAddr);\n         }\n         InetSocketAddress targetAddr \u003d NetUtils.createSocketAddr(dnAddr);\n         return new DNAddrPair(chosenNode, targetAddr);\n       } catch (IOException ie) {\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n           throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                           block.getStartOffset());\n         }\n         \n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + ie\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n+          final int timeWindow \u003d dfsClient.getConf().timeWindow;\n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset(), false);\n         failures++;\n         continue;\n       }\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block)\n    throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n        final String dnAddr \u003d\n            chosenNode.getXferAddr(dfsClient.getConf().connectToDnViaHostname);\n        if (DFSClient.LOG.isDebugEnabled()) {\n          DFSClient.LOG.debug(\"Connecting to datanode \" + dnAddr);\n        }\n        InetSocketAddress targetAddr \u003d NetUtils.createSocketAddr(dnAddr);\n        return new DNAddrPair(chosenNode, targetAddr);\n      } catch (IOException ie) {\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                          block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + ie\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          final int timeWindow \u003d dfsClient.getConf().timeWindow;\n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  } ",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "08/09/12 11:37 PM",
      "commitNameOld": "3a4dcfba573ecfe2e776cea437d70c18adfeaeb9",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 49.69,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block)\n     throws IOException {\n     while (true) {\n       DatanodeInfo[] nodes \u003d block.getLocations();\n       try {\n         DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n         final String dnAddr \u003d\n             chosenNode.getXferAddr(dfsClient.connectToDnViaHostname());\n         if (DFSClient.LOG.isDebugEnabled()) {\n           DFSClient.LOG.debug(\"Connecting to datanode \" + dnAddr);\n         }\n         InetSocketAddress targetAddr \u003d NetUtils.createSocketAddr(dnAddr);\n         return new DNAddrPair(chosenNode, targetAddr);\n       } catch (IOException ie) {\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n           throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                           block.getStartOffset());\n         }\n         \n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n-          DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n+          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n         }\n-        DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n+        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n             + \" from any node: \" + ie\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset(), false);\n         failures++;\n         continue;\n       }\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block)\n    throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n        final String dnAddr \u003d\n            chosenNode.getXferAddr(dfsClient.connectToDnViaHostname());\n        if (DFSClient.LOG.isDebugEnabled()) {\n          DFSClient.LOG.debug(\"Connecting to datanode \" + dnAddr);\n        }\n        InetSocketAddress targetAddr \u003d NetUtils.createSocketAddr(dnAddr);\n        return new DNAddrPair(chosenNode, targetAddr);\n      } catch (IOException ie) {\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                          block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain \" + block.getBlock()\n            + \" from any node: \" + ie\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  } ",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "f98d8eb291be364102b5c3011ce72e8f43eab389": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3150. Add option for clients to contact DNs via hostname. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 1:59 PM",
      "commitName": "f98d8eb291be364102b5c3011ce72e8f43eab389",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "07/08/12 9:40 AM",
      "commitNameOld": "9b4a7900c7dfc0590316eedaa97144f938885651",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 7.18,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,50 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block)\n     throws IOException {\n     while (true) {\n       DatanodeInfo[] nodes \u003d block.getLocations();\n       try {\n         DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n-        InetSocketAddress targetAddr \u003d \n-          NetUtils.createSocketAddr(chosenNode.getXferAddr());\n+        final String dnAddr \u003d\n+            chosenNode.getXferAddr(dfsClient.connectToDnViaHostname());\n+        if (DFSClient.LOG.isDebugEnabled()) {\n+          DFSClient.LOG.debug(\"Connecting to datanode \" + dnAddr);\n+        }\n+        InetSocketAddress targetAddr \u003d NetUtils.createSocketAddr(dnAddr);\n         return new DNAddrPair(chosenNode, targetAddr);\n       } catch (IOException ie) {\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n           throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                           block.getStartOffset());\n         }\n         \n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n             + \" from any node: \" + ie\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset(), false);\n         failures++;\n         continue;\n       }\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block)\n    throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n        final String dnAddr \u003d\n            chosenNode.getXferAddr(dfsClient.connectToDnViaHostname());\n        if (DFSClient.LOG.isDebugEnabled()) {\n          DFSClient.LOG.debug(\"Connecting to datanode \" + dnAddr);\n        }\n        InetSocketAddress targetAddr \u003d NetUtils.createSocketAddr(dnAddr);\n        return new DNAddrPair(chosenNode, targetAddr);\n      } catch (IOException ie) {\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                          block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n            + \" from any node: \" + ie\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  } ",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "be7dd8333a7e56e732171db0781786987de03195": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3144. Refactor DatanodeID#getName by use. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/12 3:12 PM",
      "commitName": "be7dd8333a7e56e732171db0781786987de03195",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "21/03/12 10:30 AM",
      "commitNameOld": "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 11.2,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block)\n     throws IOException {\n     while (true) {\n       DatanodeInfo[] nodes \u003d block.getLocations();\n       try {\n         DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n         InetSocketAddress targetAddr \u003d \n-                          NetUtils.createSocketAddr(chosenNode.getName());\n+          NetUtils.createSocketAddr(chosenNode.getXferAddr());\n         return new DNAddrPair(chosenNode, targetAddr);\n       } catch (IOException ie) {\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n           throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                           block.getStartOffset());\n         }\n         \n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n             + \" from any node: \" + ie\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n             timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset(), false);\n         failures++;\n         continue;\n       }\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block)\n    throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n        InetSocketAddress targetAddr \u003d \n          NetUtils.createSocketAddr(chosenNode.getXferAddr());\n        return new DNAddrPair(chosenNode, targetAddr);\n      } catch (IOException ie) {\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                          block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n            + \" from any node: \" + ie\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  } ",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block)\n    throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n        InetSocketAddress targetAddr \u003d \n                          NetUtils.createSocketAddr(chosenNode.getName());\n        return new DNAddrPair(chosenNode, targetAddr);\n      } catch (IOException ie) {\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                          block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n            + \" from any node: \" + ie\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  } ",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block)\n    throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n        InetSocketAddress targetAddr \u003d \n                          NetUtils.createSocketAddr(chosenNode.getName());\n        return new DNAddrPair(chosenNode, targetAddr);\n      } catch (IOException ie) {\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                          block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n            + \" from any node: \" + ie\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  } ",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "710e5a960e8af1d4c73e386041096aacfee8b828": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2161. Move createNamenode(..), createClientDatanodeProtocolProxy(..) and Random object creation to DFSUtil; move DFSClient.stringifyToken(..) to DelegationTokenIdentifier.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1148348 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/11 7:23 AM",
      "commitName": "710e5a960e8af1d4c73e386041096aacfee8b828",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/07/11 6:11 PM",
      "commitNameOld": "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 6.55,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private DNAddrPair chooseDataNode(LocatedBlock block)\n     throws IOException {\n     while (true) {\n       DatanodeInfo[] nodes \u003d block.getLocations();\n       try {\n         DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n         InetSocketAddress targetAddr \u003d \n                           NetUtils.createSocketAddr(chosenNode.getName());\n         return new DNAddrPair(chosenNode, targetAddr);\n       } catch (IOException ie) {\n         String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n         if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n           throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                           block.getStartOffset());\n         }\n         \n         if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n           DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n         }\n         DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n             + \" from any node: \" + ie\n             + \". Will get new block locations from namenode and retry...\");\n         try {\n           // Introducing a random factor to the wait time before another retry.\n           // The wait time is dependent on # of failures and a random factor.\n           // At the first time of getting a BlockMissingException, the wait time\n           // is a random number between 0..3000 ms. If the first retry\n           // still fails, we will wait 3000 ms grace period before the 2nd retry.\n           // Also at the second retry, the waiting window is expanded to 6000 ms\n           // alleviating the request rate from the server. Similarly the 3rd retry\n           // will wait 6000ms grace period before retry and the waiting window is\n           // expanded to 9000ms. \n           double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n-            timeWindow * (failures + 1) * dfsClient.r.nextDouble(); // expanding time window for each failure\n+            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n           DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n           Thread.sleep((long)waitTime);\n         } catch (InterruptedException iex) {\n         }\n         deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n         openInfo();\n         block \u003d getBlockAt(block.getStartOffset(), false);\n         failures++;\n         continue;\n       }\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block)\n    throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n        InetSocketAddress targetAddr \u003d \n                          NetUtils.createSocketAddr(chosenNode.getName());\n        return new DNAddrPair(chosenNode, targetAddr);\n      } catch (IOException ie) {\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                          block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n            + \" from any node: \" + ie\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * DFSUtil.getRandom().nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  } ",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,46 @@\n+  private DNAddrPair chooseDataNode(LocatedBlock block)\n+    throws IOException {\n+    while (true) {\n+      DatanodeInfo[] nodes \u003d block.getLocations();\n+      try {\n+        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n+        InetSocketAddress targetAddr \u003d \n+                          NetUtils.createSocketAddr(chosenNode.getName());\n+        return new DNAddrPair(chosenNode, targetAddr);\n+      } catch (IOException ie) {\n+        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n+        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n+          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n+                                          block.getStartOffset());\n+        }\n+        \n+        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n+          DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n+        }\n+        DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n+            + \" from any node: \" + ie\n+            + \". Will get new block locations from namenode and retry...\");\n+        try {\n+          // Introducing a random factor to the wait time before another retry.\n+          // The wait time is dependent on # of failures and a random factor.\n+          // At the first time of getting a BlockMissingException, the wait time\n+          // is a random number between 0..3000 ms. If the first retry\n+          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n+          // Also at the second retry, the waiting window is expanded to 6000 ms\n+          // alleviating the request rate from the server. Similarly the 3rd retry\n+          // will wait 6000ms grace period before retry and the waiting window is\n+          // expanded to 9000ms. \n+          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n+            timeWindow * (failures + 1) * dfsClient.r.nextDouble(); // expanding time window for each failure\n+          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n+          Thread.sleep((long)waitTime);\n+        } catch (InterruptedException iex) {\n+        }\n+        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n+        openInfo();\n+        block \u003d getBlockAt(block.getStartOffset(), false);\n+        failures++;\n+        continue;\n+      }\n+    }\n+  } \n\\ No newline at end of file\n",
      "actualSource": "  private DNAddrPair chooseDataNode(LocatedBlock block)\n    throws IOException {\n    while (true) {\n      DatanodeInfo[] nodes \u003d block.getLocations();\n      try {\n        DatanodeInfo chosenNode \u003d bestNode(nodes, deadNodes);\n        InetSocketAddress targetAddr \u003d \n                          NetUtils.createSocketAddr(chosenNode.getName());\n        return new DNAddrPair(chosenNode, targetAddr);\n      } catch (IOException ie) {\n        String blockInfo \u003d block.getBlock() + \" file\u003d\" + src;\n        if (failures \u003e\u003d dfsClient.getMaxBlockAcquireFailures()) {\n          throw new BlockMissingException(src, \"Could not obtain block: \" + blockInfo,\n                                          block.getStartOffset());\n        }\n        \n        if (nodes \u003d\u003d null || nodes.length \u003d\u003d 0) {\n          DFSClient.LOG.info(\"No node available for block: \" + blockInfo);\n        }\n        DFSClient.LOG.info(\"Could not obtain block \" + block.getBlock()\n            + \" from any node: \" + ie\n            + \". Will get new block locations from namenode and retry...\");\n        try {\n          // Introducing a random factor to the wait time before another retry.\n          // The wait time is dependent on # of failures and a random factor.\n          // At the first time of getting a BlockMissingException, the wait time\n          // is a random number between 0..3000 ms. If the first retry\n          // still fails, we will wait 3000 ms grace period before the 2nd retry.\n          // Also at the second retry, the waiting window is expanded to 6000 ms\n          // alleviating the request rate from the server. Similarly the 3rd retry\n          // will wait 6000ms grace period before retry and the waiting window is\n          // expanded to 9000ms. \n          double waitTime \u003d timeWindow * failures +       // grace period for the last round of attempt\n            timeWindow * (failures + 1) * dfsClient.r.nextDouble(); // expanding time window for each failure\n          DFSClient.LOG.warn(\"DFS chooseDataNode: got # \" + (failures + 1) + \" IOException, will wait for \" + waitTime + \" msec.\");\n          Thread.sleep((long)waitTime);\n        } catch (InterruptedException iex) {\n        }\n        deadNodes.clear(); //2nd option is to remove only nodes[blockId]\n        openInfo();\n        block \u003d getBlockAt(block.getStartOffset(), false);\n        failures++;\n        continue;\n      }\n    }\n  } ",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java"
    }
  }
}