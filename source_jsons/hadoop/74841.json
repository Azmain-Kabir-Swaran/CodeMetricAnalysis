{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenAuthenticator.java",
  "functionName": "doDelegationTokenOperation",
  "functionId": "doDelegationTokenOperation___url-URL__token-AuthenticatedURL.Token__operation-DelegationTokenOperation__renewer-String__dToken-Token__?____hasResponse-boolean__doAsUser-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
  "functionStartLine": 280,
  "functionEndLine": 344,
  "numCommitsSeen": 28,
  "timeTaken": 4953,
  "changeHistory": [
    "0dd35e218fd4d6c660fd064e893be3112c546c9f",
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
    "e1b32e0959dea5f5a40055157476f9320519a618",
    "771f798edf97b27ae003395118c0317b484df6ee",
    "e98c0c7a1c2fe9380c90f7530a46752153cc37f2",
    "35356de1ba1cad0fa469ff546263290109c61b77",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "11375578162d77b78cc3f7a82f2495b1e31a3656",
    "b2f619752355d4ef6733935c020f57c8a26d82e1",
    "70b218748badf079c859c3af2b468a0b7b49c333",
    "be9c67930b57c516723d566625f9036a88a84055"
  ],
  "changeHistoryShort": {
    "0dd35e218fd4d6c660fd064e893be3112c546c9f": "Ybodychange",
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939": "Ybodychange",
    "e1b32e0959dea5f5a40055157476f9320519a618": "Ybodychange",
    "771f798edf97b27ae003395118c0317b484df6ee": "Ybodychange",
    "e98c0c7a1c2fe9380c90f7530a46752153cc37f2": "Ybodychange",
    "35356de1ba1cad0fa469ff546263290109c61b77": "Ybodychange",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "11375578162d77b78cc3f7a82f2495b1e31a3656": "Ymultichange(Yparameterchange,Ybodychange)",
    "b2f619752355d4ef6733935c020f57c8a26d82e1": "Ybodychange",
    "70b218748badf079c859c3af2b468a0b7b49c333": "Ybodychange",
    "be9c67930b57c516723d566625f9036a88a84055": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0dd35e218fd4d6c660fd064e893be3112c546c9f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15922. Fixed DelegationTokenAuthenticator URL decoding for doAs user.\n              Contributed by He Xiaoqiao\n",
      "commitDate": "22/01/19 3:59 PM",
      "commitName": "0dd35e218fd4d6c660fd064e893be3112c546c9f",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/06/18 3:36 PM",
      "commitNameOld": "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 211.06,
      "commitsBetweenForRepo": 1645,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,65 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n-      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n-          URLEncoder.encode(doAsUser, \"UTF-8\"));\n+      params.put(DelegationTokenAuthenticatedURL.DO_AS, doAsUser);\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     org.apache.hadoop.security.token.Token\u003cAbstractDelegationTokenIdentifier\u003e\n         dt \u003d null;\n     if (token instanceof DelegationTokenAuthenticatedURL.Token\n         \u0026\u0026 operation.requiresKerberosCredentials()) {\n       // Unset delegation token to trigger fall-back authentication.\n       dt \u003d ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();\n       ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);\n     }\n     try {\n       HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n       conn.setRequestMethod(operation.getHttpMethod());\n       HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n       if (hasResponse) {\n         String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n         contentType \u003d\n             (contentType !\u003d null) ? StringUtils.toLowerCase(contentType) : null;\n         if (contentType !\u003d null \u0026\u0026\n             contentType.contains(APPLICATION_JSON_MIME)) {\n           try {\n             ret \u003d JsonSerialization.mapReader().readValue(conn.getInputStream());\n           } catch (Exception ex) {\n             throw new AuthenticationException(String.format(\n                 \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n                 url.getAuthority(), operation, ex.getMessage()), ex);\n           }\n         } else {\n           throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                   \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n               url.getAuthority(), operation));\n         }\n       }\n     } finally {\n       if (dt !\u003d null) {\n         ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS, doAsUser);\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    org.apache.hadoop.security.token.Token\u003cAbstractDelegationTokenIdentifier\u003e\n        dt \u003d null;\n    if (token instanceof DelegationTokenAuthenticatedURL.Token\n        \u0026\u0026 operation.requiresKerberosCredentials()) {\n      // Unset delegation token to trigger fall-back authentication.\n      dt \u003d ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();\n      ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);\n    }\n    try {\n      HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n      conn.setRequestMethod(operation.getHttpMethod());\n      HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n      if (hasResponse) {\n        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n        contentType \u003d\n            (contentType !\u003d null) ? StringUtils.toLowerCase(contentType) : null;\n        if (contentType !\u003d null \u0026\u0026\n            contentType.contains(APPLICATION_JSON_MIME)) {\n          try {\n            ret \u003d JsonSerialization.mapReader().readValue(conn.getInputStream());\n          } catch (Exception ex) {\n            throw new AuthenticationException(String.format(\n                \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n                url.getAuthority(), operation, ex.getMessage()), ex);\n          }\n        } else {\n          throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                  \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n              url.getAuthority(), operation));\n        }\n      }\n    } finally {\n      if (dt !\u003d null) {\n        ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15550. Avoid static initialization of ObjectMappers\n",
      "commitDate": "25/06/18 3:36 PM",
      "commitName": "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "07/05/18 1:32 PM",
      "commitNameOld": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 49.09,
      "commitsBetweenForRepo": 376,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n       params.put(DelegationTokenAuthenticatedURL.DO_AS,\n           URLEncoder.encode(doAsUser, \"UTF-8\"));\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     org.apache.hadoop.security.token.Token\u003cAbstractDelegationTokenIdentifier\u003e\n         dt \u003d null;\n     if (token instanceof DelegationTokenAuthenticatedURL.Token\n         \u0026\u0026 operation.requiresKerberosCredentials()) {\n       // Unset delegation token to trigger fall-back authentication.\n       dt \u003d ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();\n       ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);\n     }\n     try {\n       HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n       conn.setRequestMethod(operation.getHttpMethod());\n       HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n       if (hasResponse) {\n         String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n         contentType \u003d\n             (contentType !\u003d null) ? StringUtils.toLowerCase(contentType) : null;\n         if (contentType !\u003d null \u0026\u0026\n             contentType.contains(APPLICATION_JSON_MIME)) {\n           try {\n-            ret \u003d READER.readValue(conn.getInputStream());\n+            ret \u003d JsonSerialization.mapReader().readValue(conn.getInputStream());\n           } catch (Exception ex) {\n             throw new AuthenticationException(String.format(\n                 \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n                 url.getAuthority(), operation, ex.getMessage()), ex);\n           }\n         } else {\n           throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                   \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n               url.getAuthority(), operation));\n         }\n       }\n     } finally {\n       if (dt !\u003d null) {\n         ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    org.apache.hadoop.security.token.Token\u003cAbstractDelegationTokenIdentifier\u003e\n        dt \u003d null;\n    if (token instanceof DelegationTokenAuthenticatedURL.Token\n        \u0026\u0026 operation.requiresKerberosCredentials()) {\n      // Unset delegation token to trigger fall-back authentication.\n      dt \u003d ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();\n      ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);\n    }\n    try {\n      HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n      conn.setRequestMethod(operation.getHttpMethod());\n      HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n      if (hasResponse) {\n        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n        contentType \u003d\n            (contentType !\u003d null) ? StringUtils.toLowerCase(contentType) : null;\n        if (contentType !\u003d null \u0026\u0026\n            contentType.contains(APPLICATION_JSON_MIME)) {\n          try {\n            ret \u003d JsonSerialization.mapReader().readValue(conn.getInputStream());\n          } catch (Exception ex) {\n            throw new AuthenticationException(String.format(\n                \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n                url.getAuthority(), operation, ex.getMessage()), ex);\n          }\n        } else {\n          throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                  \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n              url.getAuthority(), operation));\n        }\n      }\n    } finally {\n      if (dt !\u003d null) {\n        ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "e1b32e0959dea5f5a40055157476f9320519a618": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14901. ReuseObjectMapper in Hadoop Common. Contributed by Hanisha Koneru.\n",
      "commitDate": "22/09/17 3:45 PM",
      "commitName": "e1b32e0959dea5f5a40055157476f9320519a618",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "08/06/17 9:34 PM",
      "commitNameOld": "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 105.76,
      "commitsBetweenForRepo": 779,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,66 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n       params.put(DelegationTokenAuthenticatedURL.DO_AS,\n           URLEncoder.encode(doAsUser, \"UTF-8\"));\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     org.apache.hadoop.security.token.Token\u003cAbstractDelegationTokenIdentifier\u003e\n         dt \u003d null;\n     if (token instanceof DelegationTokenAuthenticatedURL.Token\n         \u0026\u0026 operation.requiresKerberosCredentials()) {\n       // Unset delegation token to trigger fall-back authentication.\n       dt \u003d ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();\n       ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);\n     }\n     try {\n       HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n       conn.setRequestMethod(operation.getHttpMethod());\n       HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n       if (hasResponse) {\n         String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n         contentType \u003d\n             (contentType !\u003d null) ? StringUtils.toLowerCase(contentType) : null;\n         if (contentType !\u003d null \u0026\u0026\n             contentType.contains(APPLICATION_JSON_MIME)) {\n           try {\n-            ObjectMapper mapper \u003d new ObjectMapper();\n-            ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n+            ret \u003d READER.readValue(conn.getInputStream());\n           } catch (Exception ex) {\n             throw new AuthenticationException(String.format(\n                 \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n                 url.getAuthority(), operation, ex.getMessage()), ex);\n           }\n         } else {\n           throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                   \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n               url.getAuthority(), operation));\n         }\n       }\n     } finally {\n       if (dt !\u003d null) {\n         ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    org.apache.hadoop.security.token.Token\u003cAbstractDelegationTokenIdentifier\u003e\n        dt \u003d null;\n    if (token instanceof DelegationTokenAuthenticatedURL.Token\n        \u0026\u0026 operation.requiresKerberosCredentials()) {\n      // Unset delegation token to trigger fall-back authentication.\n      dt \u003d ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();\n      ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);\n    }\n    try {\n      HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n      conn.setRequestMethod(operation.getHttpMethod());\n      HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n      if (hasResponse) {\n        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n        contentType \u003d\n            (contentType !\u003d null) ? StringUtils.toLowerCase(contentType) : null;\n        if (contentType !\u003d null \u0026\u0026\n            contentType.contains(APPLICATION_JSON_MIME)) {\n          try {\n            ret \u003d READER.readValue(conn.getInputStream());\n          } catch (Exception ex) {\n            throw new AuthenticationException(String.format(\n                \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n                url.getAuthority(), operation, ex.getMessage()), ex);\n          }\n        } else {\n          throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                  \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n              url.getAuthority(), operation));\n        }\n      }\n    } finally {\n      if (dt !\u003d null) {\n        ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "771f798edf97b27ae003395118c0317b484df6ee": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13251. Authenticate with Kerberos credentials when renewing KMS delegation token. Contributed by Xiao Chen.\n",
      "commitDate": "27/06/16 6:20 PM",
      "commitName": "771f798edf97b27ae003395118c0317b484df6ee",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "23/06/16 11:08 AM",
      "commitNameOld": "e98c0c7a1c2fe9380c90f7530a46752153cc37f2",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.3,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,67 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n       params.put(DelegationTokenAuthenticatedURL.DO_AS,\n           URLEncoder.encode(doAsUser, \"UTF-8\"));\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n-    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n-    conn.setRequestMethod(operation.getHttpMethod());\n-    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n-    if (hasResponse) {\n-      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n-      contentType \u003d (contentType !\u003d null) ? StringUtils.toLowerCase(contentType)\n-                                          : null;\n-      if (contentType !\u003d null \u0026\u0026\n-          contentType.contains(APPLICATION_JSON_MIME)) {\n-        try {\n-          ObjectMapper mapper \u003d new ObjectMapper();\n-          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n-        } catch (Exception ex) {\n-          throw new AuthenticationException(String.format(\n-              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n-              url.getAuthority(), operation, ex.getMessage()), ex);\n+    org.apache.hadoop.security.token.Token\u003cAbstractDelegationTokenIdentifier\u003e\n+        dt \u003d null;\n+    if (token instanceof DelegationTokenAuthenticatedURL.Token\n+        \u0026\u0026 operation.requiresKerberosCredentials()) {\n+      // Unset delegation token to trigger fall-back authentication.\n+      dt \u003d ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();\n+      ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);\n+    }\n+    try {\n+      HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n+      conn.setRequestMethod(operation.getHttpMethod());\n+      HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n+      if (hasResponse) {\n+        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n+        contentType \u003d\n+            (contentType !\u003d null) ? StringUtils.toLowerCase(contentType) : null;\n+        if (contentType !\u003d null \u0026\u0026\n+            contentType.contains(APPLICATION_JSON_MIME)) {\n+          try {\n+            ObjectMapper mapper \u003d new ObjectMapper();\n+            ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n+          } catch (Exception ex) {\n+            throw new AuthenticationException(String.format(\n+                \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n+                url.getAuthority(), operation, ex.getMessage()), ex);\n+          }\n+        } else {\n+          throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n+                  \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n+              url.getAuthority(), operation));\n         }\n-      } else {\n-        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n-                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n-            url.getAuthority(), operation));\n+      }\n+    } finally {\n+      if (dt !\u003d null) {\n+        ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    org.apache.hadoop.security.token.Token\u003cAbstractDelegationTokenIdentifier\u003e\n        dt \u003d null;\n    if (token instanceof DelegationTokenAuthenticatedURL.Token\n        \u0026\u0026 operation.requiresKerberosCredentials()) {\n      // Unset delegation token to trigger fall-back authentication.\n      dt \u003d ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();\n      ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);\n    }\n    try {\n      HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n      conn.setRequestMethod(operation.getHttpMethod());\n      HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n      if (hasResponse) {\n        String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n        contentType \u003d\n            (contentType !\u003d null) ? StringUtils.toLowerCase(contentType) : null;\n        if (contentType !\u003d null \u0026\u0026\n            contentType.contains(APPLICATION_JSON_MIME)) {\n          try {\n            ObjectMapper mapper \u003d new ObjectMapper();\n            ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n          } catch (Exception ex) {\n            throw new AuthenticationException(String.format(\n                \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n                url.getAuthority(), operation, ex.getMessage()), ex);\n          }\n        } else {\n          throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                  \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n              url.getAuthority(), operation));\n        }\n      }\n    } finally {\n      if (dt !\u003d null) {\n        ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "e98c0c7a1c2fe9380c90f7530a46752153cc37f2": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13228. Add delegation token to the connection in DelegationTokenAuthenticator. Contributed by Xiao Chen.\"\n\nThis reverts commit 35356de1ba1cad0fa469ff546263290109c61b77.\n",
      "commitDate": "23/06/16 11:08 AM",
      "commitName": "e98c0c7a1c2fe9380c90f7530a46752153cc37f2",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/06/16 3:22 PM",
      "commitNameOld": "b1674caa409ca2c616207acb72aeb2767d28b10c",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 6.82,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,53 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n       params.put(DelegationTokenAuthenticatedURL.DO_AS,\n           URLEncoder.encode(doAsUser, \"UTF-8\"));\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n-    appendDelegationToken(token, dToken, conn);\n     conn.setRequestMethod(operation.getHttpMethod());\n     HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n       contentType \u003d (contentType !\u003d null) ? StringUtils.toLowerCase(contentType)\n                                           : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? StringUtils.toLowerCase(contentType)\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "35356de1ba1cad0fa469ff546263290109c61b77": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13228. Add delegation token to the connection in DelegationTokenAuthenticator. Contributed by Xiao Chen.\n",
      "commitDate": "01/06/16 1:13 PM",
      "commitName": "35356de1ba1cad0fa469ff546263290109c61b77",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 456.62,
      "commitsBetweenForRepo": 3432,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n       params.put(DelegationTokenAuthenticatedURL.DO_AS,\n           URLEncoder.encode(doAsUser, \"UTF-8\"));\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n+    appendDelegationToken(token, dToken, conn);\n     conn.setRequestMethod(operation.getHttpMethod());\n     HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n       contentType \u003d (contentType !\u003d null) ? StringUtils.toLowerCase(contentType)\n                                           : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    appendDelegationToken(token, dToken, conn);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? StringUtils.toLowerCase(contentType)\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n       params.put(DelegationTokenAuthenticatedURL.DO_AS,\n           URLEncoder.encode(doAsUser, \"UTF-8\"));\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n     conn.setRequestMethod(operation.getHttpMethod());\n     HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n-      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n+      contentType \u003d (contentType !\u003d null) ? StringUtils.toLowerCase(contentType)\n                                           : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? StringUtils.toLowerCase(contentType)\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n       params.put(DelegationTokenAuthenticatedURL.DO_AS,\n           URLEncoder.encode(doAsUser, \"UTF-8\"));\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n     conn.setRequestMethod(operation.getHttpMethod());\n     HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n-      contentType \u003d (contentType !\u003d null) ?\n-          contentType.toLowerCase(Locale.ENGLISH) : null;\n+      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n+                                          : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "17/10/14 3:56 PM",
      "commitNameOld": "11375578162d77b78cc3f7a82f2495b1e31a3656",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 124.22,
      "commitsBetweenForRepo": 985,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     // proxyuser\n     if (doAsUser !\u003d null) {\n       params.put(DelegationTokenAuthenticatedURL.DO_AS,\n           URLEncoder.encode(doAsUser, \"UTF-8\"));\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n     conn.setRequestMethod(operation.getHttpMethod());\n     HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n-      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n-                                          : null;\n+      contentType \u003d (contentType !\u003d null) ?\n+          contentType.toLowerCase(Locale.ENGLISH) : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ?\n          contentType.toLowerCase(Locale.ENGLISH) : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "11375578162d77b78cc3f7a82f2495b1e31a3656": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-11207. Enhanced common DelegationTokenAuthenticationHandler to support proxy-users on Delegation-token management operations. Contributed by Zhijie Shen.\n",
      "commitDate": "17/10/14 3:56 PM",
      "commitName": "11375578162d77b78cc3f7a82f2495b1e31a3656",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11207. Enhanced common DelegationTokenAuthenticationHandler to support proxy-users on Delegation-token management operations. Contributed by Zhijie Shen.\n",
          "commitDate": "17/10/14 3:56 PM",
          "commitName": "11375578162d77b78cc3f7a82f2495b1e31a3656",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/10/14 2:46 PM",
          "commitNameOld": "b2f619752355d4ef6733935c020f57c8a26d82e1",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 10.05,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,53 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n-      String renewer, Token\u003c?\u003e dToken, boolean hasResponse)\n+      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n+    // proxyuser\n+    if (doAsUser !\u003d null) {\n+      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n+          URLEncoder.encode(doAsUser, \"UTF-8\"));\n+    }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n     conn.setRequestMethod(operation.getHttpMethod());\n     HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n       contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                           : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
          "extendedDetails": {
            "oldValue": "[url-URL, token-AuthenticatedURL.Token, operation-DelegationTokenOperation, renewer-String, dToken-Token\u003c?\u003e, hasResponse-boolean]",
            "newValue": "[url-URL, token-AuthenticatedURL.Token, operation-DelegationTokenOperation, renewer-String, dToken-Token\u003c?\u003e, hasResponse-boolean, doAsUser-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11207. Enhanced common DelegationTokenAuthenticationHandler to support proxy-users on Delegation-token management operations. Contributed by Zhijie Shen.\n",
          "commitDate": "17/10/14 3:56 PM",
          "commitName": "11375578162d77b78cc3f7a82f2495b1e31a3656",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/10/14 2:46 PM",
          "commitNameOld": "b2f619752355d4ef6733935c020f57c8a26d82e1",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 10.05,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,53 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n-      String renewer, Token\u003c?\u003e dToken, boolean hasResponse)\n+      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n+    // proxyuser\n+    if (doAsUser !\u003d null) {\n+      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n+          URLEncoder.encode(doAsUser, \"UTF-8\"));\n+    }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n     conn.setRequestMethod(operation.getHttpMethod());\n     HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n       contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                           : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse, String doAsUser)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    // proxyuser\n    if (doAsUser !\u003d null) {\n      params.put(DelegationTokenAuthenticatedURL.DO_AS,\n          URLEncoder.encode(doAsUser, \"UTF-8\"));\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
          "extendedDetails": {}
        }
      ]
    },
    "b2f619752355d4ef6733935c020f57c8a26d82e1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11169. Fix DelegationTokenAuthenticatedURL to pass the connection Configurator to the authenticator. (Arun Suresh via wang)\n",
      "commitDate": "07/10/14 2:46 PM",
      "commitName": "b2f619752355d4ef6733935c020f57c8a26d82e1",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/09/14 9:11 AM",
      "commitNameOld": "70b218748badf079c859c3af2b468a0b7b49c333",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 33.23,
      "commitsBetweenForRepo": 382,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n-    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this);\n+    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n     conn.setRequestMethod(operation.getHttpMethod());\n     HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n       contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                           : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this, connConfigurator);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "70b218748badf079c859c3af2b468a0b7b49c333": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11015. Http server/client utils to propagate and recreate Exceptions from server to client. (tucu)\n",
      "commitDate": "04/09/14 9:11 AM",
      "commitName": "70b218748badf079c859c3af2b468a0b7b49c333",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "28/08/14 2:45 PM",
      "commitNameOld": "d1ae479aa5ae4d3e7ec80e35892e1699c378f813",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private Map doDelegationTokenOperation(URL url,\n       AuthenticatedURL.Token token, DelegationTokenOperation operation,\n       String renewer, Token\u003c?\u003e dToken, boolean hasResponse)\n       throws IOException, AuthenticationException {\n     Map ret \u003d null;\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(OP_PARAM, operation.toString());\n     if (renewer !\u003d null) {\n       params.put(RENEWER_PARAM, renewer);\n     }\n     if (dToken !\u003d null) {\n       params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n     }\n     String urlStr \u003d url.toExternalForm();\n     StringBuilder sb \u003d new StringBuilder(urlStr);\n     String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n     for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n       sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n           append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n       separator \u003d \"\u0026\";\n     }\n     url \u003d new URL(sb.toString());\n     AuthenticatedURL aUrl \u003d new AuthenticatedURL(this);\n     HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n     conn.setRequestMethod(operation.getHttpMethod());\n-    validateResponse(conn, HttpURLConnection.HTTP_OK);\n+    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n     if (hasResponse) {\n       String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n       contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                           : null;\n       if (contentType !\u003d null \u0026\u0026\n           contentType.contains(APPLICATION_JSON_MIME)) {\n         try {\n           ObjectMapper mapper \u003d new ObjectMapper();\n           ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n         } catch (Exception ex) {\n           throw new AuthenticationException(String.format(\n               \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n               url.getAuthority(), operation, ex.getMessage()), ex);\n         }\n       } else {\n         throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                 \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n             url.getAuthority(), operation));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java",
      "extendedDetails": {}
    },
    "be9c67930b57c516723d566625f9036a88a84055": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 2. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 9:58 PM",
      "commitName": "be9c67930b57c516723d566625f9036a88a84055",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,48 @@\n+  private Map doDelegationTokenOperation(URL url,\n+      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n+      String renewer, Token\u003c?\u003e dToken, boolean hasResponse)\n+      throws IOException, AuthenticationException {\n+    Map ret \u003d null;\n+    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n+    params.put(OP_PARAM, operation.toString());\n+    if (renewer !\u003d null) {\n+      params.put(RENEWER_PARAM, renewer);\n+    }\n+    if (dToken !\u003d null) {\n+      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n+    }\n+    String urlStr \u003d url.toExternalForm();\n+    StringBuilder sb \u003d new StringBuilder(urlStr);\n+    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n+    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n+      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n+          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n+      separator \u003d \"\u0026\";\n+    }\n+    url \u003d new URL(sb.toString());\n+    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this);\n+    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n+    conn.setRequestMethod(operation.getHttpMethod());\n+    validateResponse(conn, HttpURLConnection.HTTP_OK);\n+    if (hasResponse) {\n+      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n+      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n+                                          : null;\n+      if (contentType !\u003d null \u0026\u0026\n+          contentType.contains(APPLICATION_JSON_MIME)) {\n+        try {\n+          ObjectMapper mapper \u003d new ObjectMapper();\n+          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n+        } catch (Exception ex) {\n+          throw new AuthenticationException(String.format(\n+              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n+              url.getAuthority(), operation, ex.getMessage()), ex);\n+        }\n+      } else {\n+        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n+                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n+            url.getAuthority(), operation));\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map doDelegationTokenOperation(URL url,\n      AuthenticatedURL.Token token, DelegationTokenOperation operation,\n      String renewer, Token\u003c?\u003e dToken, boolean hasResponse)\n      throws IOException, AuthenticationException {\n    Map ret \u003d null;\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(OP_PARAM, operation.toString());\n    if (renewer !\u003d null) {\n      params.put(RENEWER_PARAM, renewer);\n    }\n    if (dToken !\u003d null) {\n      params.put(TOKEN_PARAM, dToken.encodeToUrlString());\n    }\n    String urlStr \u003d url.toExternalForm();\n    StringBuilder sb \u003d new StringBuilder(urlStr);\n    String separator \u003d (urlStr.contains(\"?\")) ? \"\u0026\" : \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n          append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    url \u003d new URL(sb.toString());\n    AuthenticatedURL aUrl \u003d new AuthenticatedURL(this);\n    HttpURLConnection conn \u003d aUrl.openConnection(url, token);\n    conn.setRequestMethod(operation.getHttpMethod());\n    validateResponse(conn, HttpURLConnection.HTTP_OK);\n    if (hasResponse) {\n      String contentType \u003d conn.getHeaderField(CONTENT_TYPE);\n      contentType \u003d (contentType !\u003d null) ? contentType.toLowerCase()\n                                          : null;\n      if (contentType !\u003d null \u0026\u0026\n          contentType.contains(APPLICATION_JSON_MIME)) {\n        try {\n          ObjectMapper mapper \u003d new ObjectMapper();\n          ret \u003d mapper.readValue(conn.getInputStream(), Map.class);\n        } catch (Exception ex) {\n          throw new AuthenticationException(String.format(\n              \"\u0027%s\u0027 did not handle the \u0027%s\u0027 delegation token operation: %s\",\n              url.getAuthority(), operation, ex.getMessage()), ex);\n        }\n      } else {\n        throw new AuthenticationException(String.format(\"\u0027%s\u0027 did not \" +\n                \"respond with JSON to the \u0027%s\u0027 delegation token operation\",\n            url.getAuthority(), operation));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticator.java"
    }
  }
}