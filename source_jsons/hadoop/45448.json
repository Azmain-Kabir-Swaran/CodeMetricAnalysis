{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineClientImpl.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
  "functionStartLine": 99,
  "functionEndLine": 132,
  "numCommitsSeen": 57,
  "timeTaken": 5675,
  "changeHistory": [
    "345e7624d58a058a1bad666bd1e5ce4b346a9056",
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "9ccf935b2cba5ac8a3e8124360d2203931397391",
    "0d02ab8729630ad3cfb4300702927333b1d349e3",
    "9b5636408005676ae580f8d929f8e912c27828e7",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
    "882f2f04644a13cadb93070d5545f7a4f8691fde",
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
    "c298a9a845f89317eb9efad332e6657c56736a4d",
    "b2942762d7f76d510ece5621c71116346a6b12f6",
    "89427419a3c5eaab0f73bae98d675979b9efab5f",
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
    "e4539e88e388b7ff01a6acd0b1596a5a276d4478",
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2",
    "09f383254c8459071533f2118debd6d3b8538a13",
    "f4eb6ddec9b96959f4c8264523722933429a2f2e",
    "e167e585e9dd5c86ae763c257d62fdcc83260200",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
    "e74e117ad3e0b6c0572913f602a28934f87bba70"
  ],
  "changeHistoryShort": {
    "345e7624d58a058a1bad666bd1e5ce4b346a9056": "Ybodychange",
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90": "Ybodychange",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "9ccf935b2cba5ac8a3e8124360d2203931397391": "Ybodychange",
    "0d02ab8729630ad3cfb4300702927333b1d349e3": "Ybodychange",
    "9b5636408005676ae580f8d929f8e912c27828e7": "Ybodychange",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": "Ybodychange",
    "882f2f04644a13cadb93070d5545f7a4f8691fde": "Ybodychange",
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117": "Ybodychange",
    "c298a9a845f89317eb9efad332e6657c56736a4d": "Ybodychange",
    "b2942762d7f76d510ece5621c71116346a6b12f6": "Ybodychange",
    "89427419a3c5eaab0f73bae98d675979b9efab5f": "Ybodychange",
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059": "Ybodychange",
    "e4539e88e388b7ff01a6acd0b1596a5a276d4478": "Ybodychange",
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885": "Yfilerename",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": "Ybodychange",
    "09f383254c8459071533f2118debd6d3b8538a13": "Ybodychange",
    "f4eb6ddec9b96959f4c8264523722933429a2f2e": "Ybodychange",
    "e167e585e9dd5c86ae763c257d62fdcc83260200": "Ybodychange",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": "Ybodychange",
    "e74e117ad3e0b6c0572913f602a28934f87bba70": "Yintroduced"
  },
  "changeHistoryDetails": {
    "345e7624d58a058a1bad666bd1e5ce4b346a9056": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8073 TimelineClientImpl doesn\u0027t honor yarn.timeline-service.versions configuration. Contributed by Rohith Sharma K S\n",
      "commitDate": "04/04/18 3:08 PM",
      "commitName": "345e7624d58a058a1bad666bd1e5ce4b346a9056",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "15/01/18 6:28 PM",
      "commitNameOld": "d09058b2fd18803d12f0835fdf78aef5e0b99c90",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 78.82,
      "commitsBetweenForRepo": 648,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    timelineServiceVersion \u003d\n-        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n-            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n     if (!YarnConfiguration.timelineServiceV1Enabled(conf)) {\n       throw new IOException(\"Timeline V1 client is not properly configured. \"\n           + \"Either timeline service is not enabled or version is not set to\"\n           + \" 1.x\");\n     }\n-    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n+\n+    timelineServiceV15Enabled \u003d\n+        YarnConfiguration.timelineServiceV15Enabled(conf);\n+\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     UserGroupInformation realUgi \u003d ugi.getRealUser();\n     if (realUgi !\u003d null) {\n       authUgi \u003d realUgi;\n       doAsUser \u003d ugi.getShortUserName();\n     } else {\n       authUgi \u003d ugi;\n       doAsUser \u003d null;\n     }\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n     connector \u003d createTimelineConnector();\n \n     if (YarnConfiguration.useHttps(conf)) {\n       timelineServiceAddress \u003d\n           conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n     } else {\n       timelineServiceAddress \u003d\n           conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n     }\n+    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (!YarnConfiguration.timelineServiceV1Enabled(conf)) {\n      throw new IOException(\"Timeline V1 client is not properly configured. \"\n          + \"Either timeline service is not enabled or version is not set to\"\n          + \" 1.x\");\n    }\n\n    timelineServiceV15Enabled \u003d\n        YarnConfiguration.timelineServiceV15Enabled(conf);\n\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n    connector \u003d createTimelineConnector();\n\n    if (YarnConfiguration.useHttps(conf)) {\n      timelineServiceAddress \u003d\n          conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n    } else {\n      timelineServiceAddress \u003d\n          conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n    }\n    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6736. Consider writing to both ats v1 \u0026 v2 from RM for smoother upgrades. Contributed by Aaron Gresch.\n",
      "commitDate": "15/01/18 6:28 PM",
      "commitName": "d09058b2fd18803d12f0835fdf78aef5e0b99c90",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "16/02/17 11:41 AM",
      "commitNameOld": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 333.28,
      "commitsBetweenForRepo": 2193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     timelineServiceVersion \u003d\n         conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n-    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n-    if (!YarnConfiguration.timelineServiceEnabled(conf)\n-        || !((Float.compare(this.timelineServiceVersion, 1.0f) \u003d\u003d 0)\n-            || (Float.compare(this.timelineServiceVersion, 1.5f) \u003d\u003d 0))) {\n+    if (!YarnConfiguration.timelineServiceV1Enabled(conf)) {\n       throw new IOException(\"Timeline V1 client is not properly configured. \"\n           + \"Either timeline service is not enabled or version is not set to\"\n           + \" 1.x\");\n     }\n+    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     UserGroupInformation realUgi \u003d ugi.getRealUser();\n     if (realUgi !\u003d null) {\n       authUgi \u003d realUgi;\n       doAsUser \u003d ugi.getShortUserName();\n     } else {\n       authUgi \u003d ugi;\n       doAsUser \u003d null;\n     }\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n     connector \u003d createTimelineConnector();\n \n     if (YarnConfiguration.useHttps(conf)) {\n       timelineServiceAddress \u003d\n           conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n     } else {\n       timelineServiceAddress \u003d\n           conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    timelineServiceVersion \u003d\n        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n    if (!YarnConfiguration.timelineServiceV1Enabled(conf)) {\n      throw new IOException(\"Timeline V1 client is not properly configured. \"\n          + \"Either timeline service is not enabled or version is not set to\"\n          + \" 1.x\");\n    }\n    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n    connector \u003d createTimelineConnector();\n\n    if (YarnConfiguration.useHttps(conf)) {\n      timelineServiceAddress \u003d\n          conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n    } else {\n      timelineServiceAddress \u003d\n          conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "27/12/16 2:14 PM",
      "commitNameOld": "9262797e86453fc04b7ca3710b73b21fcdf9e6b4",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 50.89,
      "commitsBetweenForRepo": 246,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,35 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    this.configuration \u003d conf;\n+    timelineServiceVersion \u003d\n+        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n+    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n+    if (!YarnConfiguration.timelineServiceEnabled(conf)\n+        || !((Float.compare(this.timelineServiceVersion, 1.0f) \u003d\u003d 0)\n+            || (Float.compare(this.timelineServiceVersion, 1.5f) \u003d\u003d 0))) {\n+      throw new IOException(\"Timeline V1 client is not properly configured. \"\n+          + \"Either timeline service is not enabled or version is not set to\"\n+          + \" 1.x\");\n+    }\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     UserGroupInformation realUgi \u003d ugi.getRealUser();\n     if (realUgi !\u003d null) {\n       authUgi \u003d realUgi;\n       doAsUser \u003d ugi.getShortUserName();\n     } else {\n       authUgi \u003d ugi;\n       doAsUser \u003d null;\n     }\n-    ClientConfig cc \u003d new DefaultClientConfig();\n-    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n-    connConfigurator \u003d initConnConfigurator(conf);\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n-    } else {\n-      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n-    }\n-    authenticator.setConnectionConfigurator(connConfigurator);\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n+    connector \u003d createTimelineConnector();\n \n-    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n-    client \u003d new Client(new URLConnectionClientHandler(\n-        new TimelineURLConnectionFactory()), cc);\n-    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n-    // TODO need to cleanup filter retry later.\n-    if (!timelineServiceV2) {\n-      client.addFilter(retryFilter);\n-    }\n-\n-    // old version timeline service need to get address from configuration\n-    // while new version need to auto discovery (with retry).\n-    if (timelineServiceV2) {\n-      maxServiceRetries \u003d conf.getInt(\n-          YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,\n-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);\n-      serviceRetryInterval \u003d conf.getLong(\n-          YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,\n-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);\n-      entityDispatcher \u003d new TimelineEntityDispatcher(conf);\n+    if (YarnConfiguration.useHttps(conf)) {\n+      timelineServiceAddress \u003d\n+          conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n     } else {\n-      if (YarnConfiguration.useHttps(conf)) {\n-        setTimelineServiceAddress(conf.get(\n-            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n-            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));\n-      } else {\n-        setTimelineServiceAddress(conf.get(\n-            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n-            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));\n-      }\n-      timelineServiceVersion \u003d\n-          conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n-              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n-      LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n+      timelineServiceAddress \u003d\n+          conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    timelineServiceVersion \u003d\n        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n    if (!YarnConfiguration.timelineServiceEnabled(conf)\n        || !((Float.compare(this.timelineServiceVersion, 1.0f) \u003d\u003d 0)\n            || (Float.compare(this.timelineServiceVersion, 1.5f) \u003d\u003d 0))) {\n      throw new IOException(\"Timeline V1 client is not properly configured. \"\n          + \"Either timeline service is not enabled or version is not set to\"\n          + \" 1.x\");\n    }\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n    connector \u003d createTimelineConnector();\n\n    if (YarnConfiguration.useHttps(conf)) {\n      timelineServiceAddress \u003d\n          conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n    } else {\n      timelineServiceAddress \u003d\n          conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "9ccf935b2cba5ac8a3e8124360d2203931397391": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5309. Fix SSLFactory truststore reloader thread leak in TimelineClientImpl. Contributed by Weiwei Yang.\n",
      "commitDate": "20/07/16 12:18 AM",
      "commitName": "9ccf935b2cba5ac8a3e8124360d2203931397391",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "6cf6ab7b780de2b0c2c9ea730e1f366965a0d682",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 9.65,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.configuration \u003d conf;\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     UserGroupInformation realUgi \u003d ugi.getRealUser();\n     if (realUgi !\u003d null) {\n       authUgi \u003d realUgi;\n       doAsUser \u003d ugi.getShortUserName();\n     } else {\n       authUgi \u003d ugi;\n       doAsUser \u003d null;\n     }\n     ClientConfig cc \u003d new DefaultClientConfig();\n     cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n-    connConfigurator \u003d newConnConfigurator(conf);\n+    connConfigurator \u003d initConnConfigurator(conf);\n     if (UserGroupInformation.isSecurityEnabled()) {\n       authenticator \u003d new KerberosDelegationTokenAuthenticator();\n     } else {\n       authenticator \u003d new PseudoDelegationTokenAuthenticator();\n     }\n     authenticator.setConnectionConfigurator(connConfigurator);\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n \n     connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n     client \u003d new Client(new URLConnectionClientHandler(\n         new TimelineURLConnectionFactory()), cc);\n     TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n     // TODO need to cleanup filter retry later.\n     if (!timelineServiceV2) {\n       client.addFilter(retryFilter);\n     }\n \n     // old version timeline service need to get address from configuration\n     // while new version need to auto discovery (with retry).\n     if (timelineServiceV2) {\n       maxServiceRetries \u003d conf.getInt(\n           YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,\n           YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);\n       serviceRetryInterval \u003d conf.getLong(\n           YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);\n       entityDispatcher \u003d new TimelineEntityDispatcher(conf);\n     } else {\n       if (YarnConfiguration.useHttps(conf)) {\n         setTimelineServiceAddress(conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));\n       } else {\n         setTimelineServiceAddress(conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));\n       }\n       timelineServiceVersion \u003d\n           conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n       LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.configuration \u003d conf;\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    ClientConfig cc \u003d new DefaultClientConfig();\n    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n    connConfigurator \u003d initConnConfigurator(conf);\n    if (UserGroupInformation.isSecurityEnabled()) {\n      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n    } else {\n      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n    }\n    authenticator.setConnectionConfigurator(connConfigurator);\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n    client \u003d new Client(new URLConnectionClientHandler(\n        new TimelineURLConnectionFactory()), cc);\n    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n    // TODO need to cleanup filter retry later.\n    if (!timelineServiceV2) {\n      client.addFilter(retryFilter);\n    }\n\n    // old version timeline service need to get address from configuration\n    // while new version need to auto discovery (with retry).\n    if (timelineServiceV2) {\n      maxServiceRetries \u003d conf.getInt(\n          YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);\n      serviceRetryInterval \u003d conf.getLong(\n          YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);\n      entityDispatcher \u003d new TimelineEntityDispatcher(conf);\n    } else {\n      if (YarnConfiguration.useHttps(conf)) {\n        setTimelineServiceAddress(conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));\n      } else {\n        setTimelineServiceAddress(conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));\n      }\n      timelineServiceVersion \u003d\n          conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n      LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "0d02ab8729630ad3cfb4300702927333b1d349e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3367. Replace starting a separate thread for post entity with event loop in TimelineClient (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "0d02ab8729630ad3cfb4300702927333b1d349e3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.configuration \u003d conf;\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     UserGroupInformation realUgi \u003d ugi.getRealUser();\n     if (realUgi !\u003d null) {\n       authUgi \u003d realUgi;\n       doAsUser \u003d ugi.getShortUserName();\n     } else {\n       authUgi \u003d ugi;\n       doAsUser \u003d null;\n     }\n     ClientConfig cc \u003d new DefaultClientConfig();\n     cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n     connConfigurator \u003d newConnConfigurator(conf);\n     if (UserGroupInformation.isSecurityEnabled()) {\n       authenticator \u003d new KerberosDelegationTokenAuthenticator();\n     } else {\n       authenticator \u003d new PseudoDelegationTokenAuthenticator();\n     }\n     authenticator.setConnectionConfigurator(connConfigurator);\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n \n     connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n     client \u003d new Client(new URLConnectionClientHandler(\n         new TimelineURLConnectionFactory()), cc);\n     TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n     // TODO need to cleanup filter retry later.\n     if (!timelineServiceV2) {\n       client.addFilter(retryFilter);\n     }\n \n     // old version timeline service need to get address from configuration\n     // while new version need to auto discovery (with retry).\n     if (timelineServiceV2) {\n       maxServiceRetries \u003d conf.getInt(\n           YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,\n           YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);\n       serviceRetryInterval \u003d conf.getLong(\n           YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);\n+      entityDispatcher \u003d new TimelineEntityDispatcher(conf);\n     } else {\n       if (YarnConfiguration.useHttps(conf)) {\n         setTimelineServiceAddress(conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));\n       } else {\n         setTimelineServiceAddress(conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));\n       }\n       timelineServiceVersion \u003d\n           conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n       LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.configuration \u003d conf;\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    ClientConfig cc \u003d new DefaultClientConfig();\n    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n    connConfigurator \u003d newConnConfigurator(conf);\n    if (UserGroupInformation.isSecurityEnabled()) {\n      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n    } else {\n      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n    }\n    authenticator.setConnectionConfigurator(connConfigurator);\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n    client \u003d new Client(new URLConnectionClientHandler(\n        new TimelineURLConnectionFactory()), cc);\n    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n    // TODO need to cleanup filter retry later.\n    if (!timelineServiceV2) {\n      client.addFilter(retryFilter);\n    }\n\n    // old version timeline service need to get address from configuration\n    // while new version need to auto discovery (with retry).\n    if (timelineServiceV2) {\n      maxServiceRetries \u003d conf.getInt(\n          YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);\n      serviceRetryInterval \u003d conf.getLong(\n          YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);\n      entityDispatcher \u003d new TimelineEntityDispatcher(conf);\n    } else {\n      if (YarnConfiguration.useHttps(conf)) {\n        setTimelineServiceAddress(conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));\n      } else {\n        setTimelineServiceAddress(conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));\n      }\n      timelineServiceVersion \u003d\n          conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n      LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "9b5636408005676ae580f8d929f8e912c27828e7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,57 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.configuration \u003d conf;\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     UserGroupInformation realUgi \u003d ugi.getRealUser();\n     if (realUgi !\u003d null) {\n       authUgi \u003d realUgi;\n       doAsUser \u003d ugi.getShortUserName();\n     } else {\n       authUgi \u003d ugi;\n       doAsUser \u003d null;\n     }\n     ClientConfig cc \u003d new DefaultClientConfig();\n     cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n     connConfigurator \u003d newConnConfigurator(conf);\n     if (UserGroupInformation.isSecurityEnabled()) {\n       authenticator \u003d new KerberosDelegationTokenAuthenticator();\n     } else {\n       authenticator \u003d new PseudoDelegationTokenAuthenticator();\n     }\n     authenticator.setConnectionConfigurator(connConfigurator);\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n \n     connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n     client \u003d new Client(new URLConnectionClientHandler(\n         new TimelineURLConnectionFactory()), cc);\n     TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n-    client.addFilter(retryFilter);\n-\n-    if (YarnConfiguration.useHttps(conf)) {\n-      timelineServiceAddress \u003d conf.get(\n-          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n-    } else {\n-      timelineServiceAddress \u003d conf.get(\n-          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n+    // TODO need to cleanup filter retry later.\n+    if (!timelineServiceV2) {\n+      client.addFilter(retryFilter);\n     }\n-    LOG.info(\"Timeline service address: \" + resURI);\n-    timelineServiceVersion \u003d\n-        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n-    LOG.info(\"Timeline service address: \" + timelineServiceAddress);\n+\n+    // old version timeline service need to get address from configuration\n+    // while new version need to auto discovery (with retry).\n+    if (timelineServiceV2) {\n+      maxServiceRetries \u003d conf.getInt(\n+          YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,\n+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);\n+      serviceRetryInterval \u003d conf.getLong(\n+          YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,\n+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);\n+    } else {\n+      if (YarnConfiguration.useHttps(conf)) {\n+        setTimelineServiceAddress(conf.get(\n+            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));\n+      } else {\n+        setTimelineServiceAddress(conf.get(\n+            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));\n+      }\n+      timelineServiceVersion \u003d\n+          conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n+      LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n+    } \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.configuration \u003d conf;\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    ClientConfig cc \u003d new DefaultClientConfig();\n    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n    connConfigurator \u003d newConnConfigurator(conf);\n    if (UserGroupInformation.isSecurityEnabled()) {\n      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n    } else {\n      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n    }\n    authenticator.setConnectionConfigurator(connConfigurator);\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n    client \u003d new Client(new URLConnectionClientHandler(\n        new TimelineURLConnectionFactory()), cc);\n    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n    // TODO need to cleanup filter retry later.\n    if (!timelineServiceV2) {\n      client.addFilter(retryFilter);\n    }\n\n    // old version timeline service need to get address from configuration\n    // while new version need to auto discovery (with retry).\n    if (timelineServiceV2) {\n      maxServiceRetries \u003d conf.getInt(\n          YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);\n      serviceRetryInterval \u003d conf.getLong(\n          YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);\n    } else {\n      if (YarnConfiguration.useHttps(conf)) {\n        setTimelineServiceAddress(conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));\n      } else {\n        setTimelineServiceAddress(conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));\n      }\n      timelineServiceVersion \u003d\n          conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n      LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\n    } \n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthor": "Junping Du",
      "commitDateOld": "18/04/16 11:47 AM",
      "commitNameOld": "477003730e6a7c7eff11892f5cedf74073ca867b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 82.87,
      "commitsBetweenForRepo": 551,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,44 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.configuration \u003d conf;\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     UserGroupInformation realUgi \u003d ugi.getRealUser();\n     if (realUgi !\u003d null) {\n       authUgi \u003d realUgi;\n       doAsUser \u003d ugi.getShortUserName();\n     } else {\n       authUgi \u003d ugi;\n       doAsUser \u003d null;\n     }\n     ClientConfig cc \u003d new DefaultClientConfig();\n     cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n     connConfigurator \u003d newConnConfigurator(conf);\n     if (UserGroupInformation.isSecurityEnabled()) {\n       authenticator \u003d new KerberosDelegationTokenAuthenticator();\n     } else {\n       authenticator \u003d new PseudoDelegationTokenAuthenticator();\n     }\n     authenticator.setConnectionConfigurator(connConfigurator);\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n \n     connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n     client \u003d new Client(new URLConnectionClientHandler(\n         new TimelineURLConnectionFactory()), cc);\n     TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n     client.addFilter(retryFilter);\n \n     if (YarnConfiguration.useHttps(conf)) {\n-      resURI \u003d URI\n-          .create(JOINER.join(\"https://\", conf.get(\n-              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n-              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n-              RESOURCE_URI_STR));\n+      timelineServiceAddress \u003d conf.get(\n+          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n     } else {\n-      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n+      timelineServiceAddress \u003d conf.get(\n           YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n-          RESOURCE_URI_STR));\n+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n     }\n     LOG.info(\"Timeline service address: \" + resURI);\n     timelineServiceVersion \u003d\n         conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n           YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n+    LOG.info(\"Timeline service address: \" + timelineServiceAddress);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.configuration \u003d conf;\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    ClientConfig cc \u003d new DefaultClientConfig();\n    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n    connConfigurator \u003d newConnConfigurator(conf);\n    if (UserGroupInformation.isSecurityEnabled()) {\n      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n    } else {\n      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n    }\n    authenticator.setConnectionConfigurator(connConfigurator);\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n    client \u003d new Client(new URLConnectionClientHandler(\n        new TimelineURLConnectionFactory()), cc);\n    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n    client.addFilter(retryFilter);\n\n    if (YarnConfiguration.useHttps(conf)) {\n      timelineServiceAddress \u003d conf.get(\n          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\n    } else {\n      timelineServiceAddress \u003d conf.get(\n          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\n    }\n    LOG.info(\"Timeline service address: \" + resURI);\n    timelineServiceVersion \u003d\n        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n    LOG.info(\"Timeline service address: \" + timelineServiceAddress);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "882f2f04644a13cadb93070d5545f7a4f8691fde": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4234. New put APIs in TimelineClient for ats v1.5. Contributed by Xuan Gong.\n",
      "commitDate": "23/12/15 5:26 AM",
      "commitName": "882f2f04644a13cadb93070d5545f7a4f8691fde",
      "commitAuthor": "Junping Du",
      "commitDateOld": "07/12/15 1:46 AM",
      "commitNameOld": "01a641bc447c464b2830d58addd482f47dbd92ae",
      "commitAuthorOld": "rohithsharmaks",
      "daysBetweenCommits": 16.15,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,46 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n+    this.configuration \u003d conf;\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     UserGroupInformation realUgi \u003d ugi.getRealUser();\n     if (realUgi !\u003d null) {\n       authUgi \u003d realUgi;\n       doAsUser \u003d ugi.getShortUserName();\n     } else {\n       authUgi \u003d ugi;\n       doAsUser \u003d null;\n     }\n     ClientConfig cc \u003d new DefaultClientConfig();\n     cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n     connConfigurator \u003d newConnConfigurator(conf);\n     if (UserGroupInformation.isSecurityEnabled()) {\n       authenticator \u003d new KerberosDelegationTokenAuthenticator();\n     } else {\n       authenticator \u003d new PseudoDelegationTokenAuthenticator();\n     }\n     authenticator.setConnectionConfigurator(connConfigurator);\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n \n     connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n     client \u003d new Client(new URLConnectionClientHandler(\n         new TimelineURLConnectionFactory()), cc);\n     TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n     client.addFilter(retryFilter);\n \n     if (YarnConfiguration.useHttps(conf)) {\n       resURI \u003d URI\n           .create(JOINER.join(\"https://\", conf.get(\n               YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n               RESOURCE_URI_STR));\n     } else {\n       resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n           YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n           YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n           RESOURCE_URI_STR));\n     }\n     LOG.info(\"Timeline service address: \" + resURI);\n+    timelineServiceVersion \u003d\n+        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.configuration \u003d conf;\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    ClientConfig cc \u003d new DefaultClientConfig();\n    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n    connConfigurator \u003d newConnConfigurator(conf);\n    if (UserGroupInformation.isSecurityEnabled()) {\n      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n    } else {\n      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n    }\n    authenticator.setConnectionConfigurator(connConfigurator);\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n    client \u003d new Client(new URLConnectionClientHandler(\n        new TimelineURLConnectionFactory()), cc);\n    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n    client.addFilter(retryFilter);\n\n    if (YarnConfiguration.useHttps(conf)) {\n      resURI \u003d URI\n          .create(JOINER.join(\"https://\", conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n              RESOURCE_URI_STR));\n    } else {\n      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n          RESOURCE_URI_STR));\n    }\n    LOG.info(\"Timeline service address: \" + resURI);\n    timelineServiceVersion \u003d\n        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3287. Made TimelineClient put methods do as the correct login context. Contributed by Daryn Sharp and Jonathan Eagles.\n",
      "commitDate": "09/03/15 1:54 PM",
      "commitName": "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "06/03/15 1:32 PM",
      "commitNameOld": "d1abc5d4fc00bb1b226066684556ba16ace71744",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,42 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n+    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+    UserGroupInformation realUgi \u003d ugi.getRealUser();\n+    if (realUgi !\u003d null) {\n+      authUgi \u003d realUgi;\n+      doAsUser \u003d ugi.getShortUserName();\n+    } else {\n+      authUgi \u003d ugi;\n+      doAsUser \u003d null;\n+    }\n     ClientConfig cc \u003d new DefaultClientConfig();\n     cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n     connConfigurator \u003d newConnConfigurator(conf);\n     if (UserGroupInformation.isSecurityEnabled()) {\n       authenticator \u003d new KerberosDelegationTokenAuthenticator();\n     } else {\n       authenticator \u003d new PseudoDelegationTokenAuthenticator();\n     }\n     authenticator.setConnectionConfigurator(connConfigurator);\n     token \u003d new DelegationTokenAuthenticatedURL.Token();\n \n     connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n     client \u003d new Client(new URLConnectionClientHandler(\n         new TimelineURLConnectionFactory()), cc);\n     TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n     client.addFilter(retryFilter);\n \n     if (YarnConfiguration.useHttps(conf)) {\n       resURI \u003d URI\n           .create(JOINER.join(\"https://\", conf.get(\n               YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n               RESOURCE_URI_STR));\n     } else {\n       resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n           YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n           YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n           RESOURCE_URI_STR));\n     }\n     LOG.info(\"Timeline service address: \" + resURI);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    UserGroupInformation realUgi \u003d ugi.getRealUser();\n    if (realUgi !\u003d null) {\n      authUgi \u003d realUgi;\n      doAsUser \u003d ugi.getShortUserName();\n    } else {\n      authUgi \u003d ugi;\n      doAsUser \u003d null;\n    }\n    ClientConfig cc \u003d new DefaultClientConfig();\n    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n    connConfigurator \u003d newConnConfigurator(conf);\n    if (UserGroupInformation.isSecurityEnabled()) {\n      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n    } else {\n      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n    }\n    authenticator.setConnectionConfigurator(connConfigurator);\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n    client \u003d new Client(new URLConnectionClientHandler(\n        new TimelineURLConnectionFactory()), cc);\n    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n    client.addFilter(retryFilter);\n\n    if (YarnConfiguration.useHttps(conf)) {\n      resURI \u003d URI\n          .create(JOINER.join(\"https://\", conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n              RESOURCE_URI_STR));\n    } else {\n      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n          RESOURCE_URI_STR));\n    }\n    LOG.info(\"Timeline service address: \" + resURI);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "c298a9a845f89317eb9efad332e6657c56736a4d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2375. Allow enabling/disabling timeline server per framework. (Mit Desai via jeagles)\n",
      "commitDate": "20/11/14 9:34 PM",
      "commitName": "c298a9a845f89317eb9efad332e6657c56736a4d",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "31/10/14 1:16 PM",
      "commitNameOld": "1b4be918664b09272b120bc42de3e5fc02d79047",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.39,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,33 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    isEnabled \u003d conf.getBoolean(\n-        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n-        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n-    if (!isEnabled) {\n-      LOG.info(\"Timeline service is not enabled\");\n+    ClientConfig cc \u003d new DefaultClientConfig();\n+    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n+    connConfigurator \u003d newConnConfigurator(conf);\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n     } else {\n-      ClientConfig cc \u003d new DefaultClientConfig();\n-      cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n-      connConfigurator \u003d newConnConfigurator(conf);\n-      if (UserGroupInformation.isSecurityEnabled()) {\n-        authenticator \u003d new KerberosDelegationTokenAuthenticator();\n-      } else {\n-        authenticator \u003d new PseudoDelegationTokenAuthenticator();\n-      }\n-      authenticator.setConnectionConfigurator(connConfigurator);\n-      token \u003d new DelegationTokenAuthenticatedURL.Token();\n-\n-      connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n-      client \u003d new Client(new URLConnectionClientHandler(\n-          new TimelineURLConnectionFactory()), cc);\n-      TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n-      client.addFilter(retryFilter);\n-\n-      if (YarnConfiguration.useHttps(conf)) {\n-        resURI \u003d URI\n-            .create(JOINER.join(\"https://\", conf.get(\n-                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n-                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n-                RESOURCE_URI_STR));\n-      } else {\n-        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n-            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n-            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n-            RESOURCE_URI_STR));\n-      }\n-      LOG.info(\"Timeline service address: \" + resURI);\n+      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n     }\n+    authenticator.setConnectionConfigurator(connConfigurator);\n+    token \u003d new DelegationTokenAuthenticatedURL.Token();\n+\n+    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n+    client \u003d new Client(new URLConnectionClientHandler(\n+        new TimelineURLConnectionFactory()), cc);\n+    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n+    client.addFilter(retryFilter);\n+\n+    if (YarnConfiguration.useHttps(conf)) {\n+      resURI \u003d URI\n+          .create(JOINER.join(\"https://\", conf.get(\n+              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n+              RESOURCE_URI_STR));\n+    } else {\n+      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n+          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n+          RESOURCE_URI_STR));\n+    }\n+    LOG.info(\"Timeline service address: \" + resURI);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    ClientConfig cc \u003d new DefaultClientConfig();\n    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n    connConfigurator \u003d newConnConfigurator(conf);\n    if (UserGroupInformation.isSecurityEnabled()) {\n      authenticator \u003d new KerberosDelegationTokenAuthenticator();\n    } else {\n      authenticator \u003d new PseudoDelegationTokenAuthenticator();\n    }\n    authenticator.setConnectionConfigurator(connConfigurator);\n    token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n    connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n    client \u003d new Client(new URLConnectionClientHandler(\n        new TimelineURLConnectionFactory()), cc);\n    TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n    client.addFilter(retryFilter);\n\n    if (YarnConfiguration.useHttps(conf)) {\n      resURI \u003d URI\n          .create(JOINER.join(\"https://\", conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n              RESOURCE_URI_STR));\n    } else {\n      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n          RESOURCE_URI_STR));\n    }\n    LOG.info(\"Timeline service address: \" + resURI);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "b2942762d7f76d510ece5621c71116346a6b12f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2709. Made timeline client getDelegationToken API retry if ConnectException happens. Contributed by Li Lu.\n",
      "commitDate": "21/10/14 4:06 PM",
      "commitName": "b2942762d7f76d510ece5621c71116346a6b12f6",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "20/10/14 12:22 PM",
      "commitNameOld": "89427419a3c5eaab0f73bae98d675979b9efab5f",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     isEnabled \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n     if (!isEnabled) {\n       LOG.info(\"Timeline service is not enabled\");\n     } else {\n       ClientConfig cc \u003d new DefaultClientConfig();\n       cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n       connConfigurator \u003d newConnConfigurator(conf);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         authenticator \u003d new KerberosDelegationTokenAuthenticator();\n       } else {\n         authenticator \u003d new PseudoDelegationTokenAuthenticator();\n       }\n       authenticator.setConnectionConfigurator(connConfigurator);\n+      token \u003d new DelegationTokenAuthenticatedURL.Token();\n+\n+      connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n       client \u003d new Client(new URLConnectionClientHandler(\n           new TimelineURLConnectionFactory()), cc);\n-      token \u003d new DelegationTokenAuthenticatedURL.Token();\n-      retryFilter \u003d new TimelineJerseyRetryFilter(conf);\n+      TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n       client.addFilter(retryFilter);\n \n       if (YarnConfiguration.useHttps(conf)) {\n         resURI \u003d URI\n             .create(JOINER.join(\"https://\", conf.get(\n                 YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                 YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                 RESOURCE_URI_STR));\n       } else {\n         resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n             RESOURCE_URI_STR));\n       }\n       LOG.info(\"Timeline service address: \" + resURI);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    isEnabled \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n    if (!isEnabled) {\n      LOG.info(\"Timeline service is not enabled\");\n    } else {\n      ClientConfig cc \u003d new DefaultClientConfig();\n      cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n      connConfigurator \u003d newConnConfigurator(conf);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        authenticator \u003d new KerberosDelegationTokenAuthenticator();\n      } else {\n        authenticator \u003d new PseudoDelegationTokenAuthenticator();\n      }\n      authenticator.setConnectionConfigurator(connConfigurator);\n      token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n      connectionRetry \u003d new TimelineClientConnectionRetry(conf);\n      client \u003d new Client(new URLConnectionClientHandler(\n          new TimelineURLConnectionFactory()), cc);\n      TimelineJerseyRetryFilter retryFilter \u003d new TimelineJerseyRetryFilter();\n      client.addFilter(retryFilter);\n\n      if (YarnConfiguration.useHttps(conf)) {\n        resURI \u003d URI\n            .create(JOINER.join(\"https://\", conf.get(\n                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                RESOURCE_URI_STR));\n      } else {\n        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n            RESOURCE_URI_STR));\n      }\n      LOG.info(\"Timeline service address: \" + resURI);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "89427419a3c5eaab0f73bae98d675979b9efab5f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2673. Made timeline client put APIs retry if ConnectException happens. Contributed by Li Lu.\n",
      "commitDate": "20/10/14 12:22 PM",
      "commitName": "89427419a3c5eaab0f73bae98d675979b9efab5f",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "17/10/14 10:02 PM",
      "commitNameOld": "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.6,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     isEnabled \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n     if (!isEnabled) {\n       LOG.info(\"Timeline service is not enabled\");\n     } else {\n       ClientConfig cc \u003d new DefaultClientConfig();\n       cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n       connConfigurator \u003d newConnConfigurator(conf);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         authenticator \u003d new KerberosDelegationTokenAuthenticator();\n       } else {\n         authenticator \u003d new PseudoDelegationTokenAuthenticator();\n       }\n       authenticator.setConnectionConfigurator(connConfigurator);\n       client \u003d new Client(new URLConnectionClientHandler(\n           new TimelineURLConnectionFactory()), cc);\n       token \u003d new DelegationTokenAuthenticatedURL.Token();\n+      retryFilter \u003d new TimelineJerseyRetryFilter(conf);\n+      client.addFilter(retryFilter);\n \n       if (YarnConfiguration.useHttps(conf)) {\n         resURI \u003d URI\n             .create(JOINER.join(\"https://\", conf.get(\n                 YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                 YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                 RESOURCE_URI_STR));\n       } else {\n         resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n             RESOURCE_URI_STR));\n       }\n       LOG.info(\"Timeline service address: \" + resURI);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    isEnabled \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n    if (!isEnabled) {\n      LOG.info(\"Timeline service is not enabled\");\n    } else {\n      ClientConfig cc \u003d new DefaultClientConfig();\n      cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n      connConfigurator \u003d newConnConfigurator(conf);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        authenticator \u003d new KerberosDelegationTokenAuthenticator();\n      } else {\n        authenticator \u003d new PseudoDelegationTokenAuthenticator();\n      }\n      authenticator.setConnectionConfigurator(connConfigurator);\n      client \u003d new Client(new URLConnectionClientHandler(\n          new TimelineURLConnectionFactory()), cc);\n      token \u003d new DelegationTokenAuthenticatedURL.Token();\n      retryFilter \u003d new TimelineJerseyRetryFilter(conf);\n      client.addFilter(retryFilter);\n\n      if (YarnConfiguration.useHttps(conf)) {\n        resURI \u003d URI\n            .create(JOINER.join(\"https://\", conf.get(\n                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                RESOURCE_URI_STR));\n      } else {\n        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n            RESOURCE_URI_STR));\n      }\n      LOG.info(\"Timeline service address: \" + resURI);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2676. Enhanced Timeline auth-filter to support proxy users. Contributed by Zhijie Shen.\n",
      "commitDate": "17/10/14 10:02 PM",
      "commitName": "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/10/14 12:59 PM",
      "commitNameOld": "1d4612f5ad9678c952b416e798dccd20c88f96ef",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 8.38,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,36 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     isEnabled \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n     if (!isEnabled) {\n       LOG.info(\"Timeline service is not enabled\");\n     } else {\n       ClientConfig cc \u003d new DefaultClientConfig();\n       cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n-      ConnectionConfigurator connConfigurator \u003d newConnConfigurator(conf);\n+      connConfigurator \u003d newConnConfigurator(conf);\n       if (UserGroupInformation.isSecurityEnabled()) {\n-        TimelineAuthenticator.setStaticConnectionConfigurator(connConfigurator);\n-        urlFactory \u003d new KerberosAuthenticatedURLConnectionFactory(connConfigurator);\n-        client \u003d new Client(new URLConnectionClientHandler(urlFactory), cc);\n+        authenticator \u003d new KerberosDelegationTokenAuthenticator();\n       } else {\n-        client \u003d new Client(new URLConnectionClientHandler(\n-            new PseudoAuthenticatedURLConnectionFactory(connConfigurator)), cc);\n+        authenticator \u003d new PseudoDelegationTokenAuthenticator();\n       }\n+      authenticator.setConnectionConfigurator(connConfigurator);\n+      client \u003d new Client(new URLConnectionClientHandler(\n+          new TimelineURLConnectionFactory()), cc);\n+      token \u003d new DelegationTokenAuthenticatedURL.Token();\n+\n       if (YarnConfiguration.useHttps(conf)) {\n         resURI \u003d URI\n             .create(JOINER.join(\"https://\", conf.get(\n                 YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                 YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                 RESOURCE_URI_STR));\n       } else {\n         resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n             RESOURCE_URI_STR));\n       }\n-      if (UserGroupInformation.isSecurityEnabled()) {\n-        urlFactory.setService(TimelineUtils.buildTimelineTokenService(conf));\n-      }\n       LOG.info(\"Timeline service address: \" + resURI);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    isEnabled \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n    if (!isEnabled) {\n      LOG.info(\"Timeline service is not enabled\");\n    } else {\n      ClientConfig cc \u003d new DefaultClientConfig();\n      cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n      connConfigurator \u003d newConnConfigurator(conf);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        authenticator \u003d new KerberosDelegationTokenAuthenticator();\n      } else {\n        authenticator \u003d new PseudoDelegationTokenAuthenticator();\n      }\n      authenticator.setConnectionConfigurator(connConfigurator);\n      client \u003d new Client(new URLConnectionClientHandler(\n          new TimelineURLConnectionFactory()), cc);\n      token \u003d new DelegationTokenAuthenticatedURL.Token();\n\n      if (YarnConfiguration.useHttps(conf)) {\n        resURI \u003d URI\n            .create(JOINER.join(\"https://\", conf.get(\n                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                RESOURCE_URI_STR));\n      } else {\n        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n            RESOURCE_URI_STR));\n      }\n      LOG.info(\"Timeline service address: \" + resURI);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "e4539e88e388b7ff01a6acd0b1596a5a276d4478": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2174. Enable HTTPs for the writer REST API of TimelineServer. Contributed by Zhijie Shen\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619160 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/08/14 10:05 AM",
      "commitName": "e4539e88e388b7ff01a6acd0b1596a5a276d4478",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/08/14 10:48 PM",
      "commitNameOld": "b47f65214c7a7b6ca8c77369ebc90dba67f9d885",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 14.47,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,37 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     isEnabled \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n     if (!isEnabled) {\n       LOG.info(\"Timeline service is not enabled\");\n     } else {\n+      ClientConfig cc \u003d new DefaultClientConfig();\n+      cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n+      ConnectionConfigurator connConfigurator \u003d newConnConfigurator(conf);\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        TimelineAuthenticator.setStaticConnectionConfigurator(connConfigurator);\n+        urlFactory \u003d new KerberosAuthenticatedURLConnectionFactory(connConfigurator);\n+        client \u003d new Client(new URLConnectionClientHandler(urlFactory), cc);\n+      } else {\n+        client \u003d new Client(new URLConnectionClientHandler(\n+            new PseudoAuthenticatedURLConnectionFactory(connConfigurator)), cc);\n+      }\n       if (YarnConfiguration.useHttps(conf)) {\n         resURI \u003d URI\n             .create(JOINER.join(\"https://\", conf.get(\n                 YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                 YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                 RESOURCE_URI_STR));\n       } else {\n         resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n             RESOURCE_URI_STR));\n       }\n       if (UserGroupInformation.isSecurityEnabled()) {\n         urlFactory.setService(TimelineUtils.buildTimelineTokenService(conf));\n       }\n       LOG.info(\"Timeline service address: \" + resURI);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    isEnabled \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n    if (!isEnabled) {\n      LOG.info(\"Timeline service is not enabled\");\n    } else {\n      ClientConfig cc \u003d new DefaultClientConfig();\n      cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\n      ConnectionConfigurator connConfigurator \u003d newConnConfigurator(conf);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        TimelineAuthenticator.setStaticConnectionConfigurator(connConfigurator);\n        urlFactory \u003d new KerberosAuthenticatedURLConnectionFactory(connConfigurator);\n        client \u003d new Client(new URLConnectionClientHandler(urlFactory), cc);\n      } else {\n        client \u003d new Client(new URLConnectionClientHandler(\n            new PseudoAuthenticatedURLConnectionFactory(connConfigurator)), cc);\n      }\n      if (YarnConfiguration.useHttps(conf)) {\n        resURI \u003d URI\n            .create(JOINER.join(\"https://\", conf.get(\n                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                RESOURCE_URI_STR));\n      } else {\n        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n            RESOURCE_URI_STR));\n      }\n      if (UserGroupInformation.isSecurityEnabled()) {\n        urlFactory.setService(TimelineUtils.buildTimelineTokenService(conf));\n      }\n      LOG.info(\"Timeline service address: \" + resURI);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2298. Move TimelineClient to yarn-common project (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 10:48 PM",
      "commitName": "b47f65214c7a7b6ca8c77369ebc90dba67f9d885",
      "commitAuthor": "Junping Du",
      "commitDateOld": "05/08/14 5:50 PM",
      "commitNameOld": "812ac91add512c518394178c5162720d61957e1f",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    isEnabled \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n    if (!isEnabled) {\n      LOG.info(\"Timeline service is not enabled\");\n    } else {\n      if (YarnConfiguration.useHttps(conf)) {\n        resURI \u003d URI\n            .create(JOINER.join(\"https://\", conf.get(\n                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                RESOURCE_URI_STR));\n      } else {\n        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n            RESOURCE_URI_STR));\n      }\n      if (UserGroupInformation.isSecurityEnabled()) {\n        urlFactory.setService(TimelineUtils.buildTimelineTokenService(conf));\n      }\n      LOG.info(\"Timeline service address: \" + resURI);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
      }
    },
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1936. Added security support for the Timeline Client. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597153 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 11:47 AM",
      "commitName": "af8b09af75b252aa75b86ca42323c5b21eb41ee2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/03/14 7:22 PM",
      "commitNameOld": "09f383254c8459071533f2118debd6d3b8538a13",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 59.68,
      "commitsBetweenForRepo": 357,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     isEnabled \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n     if (!isEnabled) {\n       LOG.info(\"Timeline service is not enabled\");\n     } else {\n       if (YarnConfiguration.useHttps(conf)) {\n         resURI \u003d URI\n             .create(JOINER.join(\"https://\", conf.get(\n                 YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                 YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                 RESOURCE_URI_STR));\n       } else {\n         resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n             RESOURCE_URI_STR));\n       }\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        urlFactory.setService(TimelineUtils.buildTimelineTokenService(conf));\n+      }\n       LOG.info(\"Timeline service address: \" + resURI);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    isEnabled \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n    if (!isEnabled) {\n      LOG.info(\"Timeline service is not enabled\");\n    } else {\n      if (YarnConfiguration.useHttps(conf)) {\n        resURI \u003d URI\n            .create(JOINER.join(\"https://\", conf.get(\n                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                RESOURCE_URI_STR));\n      } else {\n        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n            RESOURCE_URI_STR));\n      }\n      if (UserGroupInformation.isSecurityEnabled()) {\n        urlFactory.setService(TimelineUtils.buildTimelineTokenService(conf));\n      }\n      LOG.info(\"Timeline service address: \" + resURI);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "09f383254c8459071533f2118debd6d3b8538a13": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1850. Introduced the ability to optionally disable sending out timeline-events in the TimelineClient. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 7:22 PM",
      "commitName": "09f383254c8459071533f2118debd6d3b8538a13",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/03/14 7:52 PM",
      "commitNameOld": "f4eb6ddec9b96959f4c8264523722933429a2f2e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 17.94,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,23 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    if (YarnConfiguration.useHttps(conf)) {\n-      resURI \u003d URI\n-          .create(JOINER.join(\"https://\", conf.get(\n-              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n-              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n-              RESOURCE_URI_STR));\n+    isEnabled \u003d conf.getBoolean(\n+        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n+    if (!isEnabled) {\n+      LOG.info(\"Timeline service is not enabled\");\n     } else {\n-      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n-          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n+      if (YarnConfiguration.useHttps(conf)) {\n+        resURI \u003d URI\n+            .create(JOINER.join(\"https://\", conf.get(\n+                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n+                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n+                RESOURCE_URI_STR));\n+      } else {\n+        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n+            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n+            RESOURCE_URI_STR));\n+      }\n+      LOG.info(\"Timeline service address: \" + resURI);\n     }\n-    LOG.info(\"Timeline service address: \" + resURI);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    isEnabled \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\n    if (!isEnabled) {\n      LOG.info(\"Timeline service is not enabled\");\n    } else {\n      if (YarnConfiguration.useHttps(conf)) {\n        resURI \u003d URI\n            .create(JOINER.join(\"https://\", conf.get(\n                YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n                YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n                RESOURCE_URI_STR));\n      } else {\n        resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),\n            RESOURCE_URI_STR));\n      }\n      LOG.info(\"Timeline service address: \" + resURI);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "f4eb6ddec9b96959f4c8264523722933429a2f2e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1780. Improved logging in the Timeline client and server. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575141 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/14 7:52 PM",
      "commitName": "f4eb6ddec9b96959f4c8264523722933429a2f2e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/02/14 6:04 PM",
      "commitNameOld": "e167e585e9dd5c86ae763c257d62fdcc83260200",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.07,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     if (YarnConfiguration.useHttps(conf)) {\n       resURI \u003d URI\n           .create(JOINER.join(\"https://\", conf.get(\n               YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n               RESOURCE_URI_STR));\n     } else {\n       resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n           YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n           YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n     }\n+    LOG.info(\"Timeline service address: \" + resURI);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (YarnConfiguration.useHttps(conf)) {\n      resURI \u003d URI\n          .create(JOINER.join(\"https://\", conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n              RESOURCE_URI_STR));\n    } else {\n      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n    }\n    LOG.info(\"Timeline service address: \" + resURI);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "e167e585e9dd5c86ae763c257d62fdcc83260200": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1749. Updated application-history related configs to reflect the latest reality and to be consistently named. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570948 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 6:04 PM",
      "commitName": "e167e585e9dd5c86ae763c257d62fdcc83260200",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/02/14 12:55 PM",
      "commitNameOld": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     if (YarnConfiguration.useHttps(conf)) {\n       resURI \u003d URI\n           .create(JOINER.join(\"https://\", conf.get(\n-              YarnConfiguration.AHS_WEBAPP_HTTPS_ADDRESS,\n-              YarnConfiguration.DEFAULT_AHS_WEBAPP_HTTPS_ADDRESS),\n+              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n               RESOURCE_URI_STR));\n     } else {\n       resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n-          YarnConfiguration.AHS_WEBAPP_ADDRESS,\n-          YarnConfiguration.DEFAULT_AHS_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n+          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (YarnConfiguration.useHttps(conf)) {\n      resURI \u003d URI\n          .create(JOINER.join(\"https://\", conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),\n              RESOURCE_URI_STR));\n    } else {\n      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 12:01 PM",
      "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/02/14 1:31 PM",
      "commitNameOld": "e74e117ad3e0b6c0572913f602a28934f87bba70",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 3.94,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,14 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    resURI \u003d new URI(JOINER.join(HttpConfig.getSchemePrefix(),\n-        HttpConfig.isSecure() ? conf.get(\n-            YarnConfiguration.AHS_WEBAPP_HTTPS_ADDRESS,\n-            YarnConfiguration.DEFAULT_AHS_WEBAPP_HTTPS_ADDRESS) : conf.get(\n-            YarnConfiguration.AHS_WEBAPP_ADDRESS,\n-            YarnConfiguration.DEFAULT_AHS_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n+    if (YarnConfiguration.useHttps(conf)) {\n+      resURI \u003d URI\n+          .create(JOINER.join(\"https://\", conf.get(\n+              YarnConfiguration.AHS_WEBAPP_HTTPS_ADDRESS,\n+              YarnConfiguration.DEFAULT_AHS_WEBAPP_HTTPS_ADDRESS),\n+              RESOURCE_URI_STR));\n+    } else {\n+      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n+          YarnConfiguration.AHS_WEBAPP_ADDRESS,\n+          YarnConfiguration.DEFAULT_AHS_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n+    }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (YarnConfiguration.useHttps(conf)) {\n      resURI \u003d URI\n          .create(JOINER.join(\"https://\", conf.get(\n              YarnConfiguration.AHS_WEBAPP_HTTPS_ADDRESS,\n              YarnConfiguration.DEFAULT_AHS_WEBAPP_HTTPS_ADDRESS),\n              RESOURCE_URI_STR));\n    } else {\n      resURI \u003d URI.create(JOINER.join(\"http://\", conf.get(\n          YarnConfiguration.AHS_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_AHS_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "e74e117ad3e0b6c0572913f602a28934f87bba70": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1637. Implemented a client library for Java users to post timeline entities and events. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566752 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 1:31 PM",
      "commitName": "e74e117ad3e0b6c0572913f602a28934f87bba70",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,9 @@\n+  protected void serviceInit(Configuration conf) throws Exception {\n+    resURI \u003d new URI(JOINER.join(HttpConfig.getSchemePrefix(),\n+        HttpConfig.isSecure() ? conf.get(\n+            YarnConfiguration.AHS_WEBAPP_HTTPS_ADDRESS,\n+            YarnConfiguration.DEFAULT_AHS_WEBAPP_HTTPS_ADDRESS) : conf.get(\n+            YarnConfiguration.AHS_WEBAPP_ADDRESS,\n+            YarnConfiguration.DEFAULT_AHS_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n+    super.serviceInit(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resURI \u003d new URI(JOINER.join(HttpConfig.getSchemePrefix(),\n        HttpConfig.isSecure() ? conf.get(\n            YarnConfiguration.AHS_WEBAPP_HTTPS_ADDRESS,\n            YarnConfiguration.DEFAULT_AHS_WEBAPP_HTTPS_ADDRESS) : conf.get(\n            YarnConfiguration.AHS_WEBAPP_ADDRESS,\n            YarnConfiguration.DEFAULT_AHS_WEBAPP_ADDRESS), RESOURCE_URI_STR));\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
    }
  }
}