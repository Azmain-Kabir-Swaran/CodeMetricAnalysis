{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "openFileWithOptions",
  "functionId": "openFileWithOptions___rawPath-Path(modifiers-final)__parameters-OpenFileParameters(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 4641,
  "functionEndLine": 4703,
  "numCommitsSeen": 272,
  "timeTaken": 4504,
  "changeHistory": [
    "5e2ce370a322a46b496541ccd17443197fcfeb5a",
    "f365957c6326f88734bc0a5d01cfb7eac713db20"
  ],
  "changeHistoryShort": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": "Ymultichange(Yparameterchange,Ybodychange)",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
      "commitDate": "21/01/20 2:31 PM",
      "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
          "commitDate": "21/01/20 2:31 PM",
          "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "10/01/20 3:11 AM",
          "commitNameOld": "49df83899543586bbcaf80f01399ade031cf68b0",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,63 @@\n   public CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n-      final Path path,\n-      final Set\u003cString\u003e mandatoryKeys,\n-      final Configuration options,\n-      final int bufferSize) throws IOException {\n+      final Path rawPath,\n+      final OpenFileParameters parameters) throws IOException {\n+    final Path path \u003d qualify(rawPath);\n+    Configuration options \u003d parameters.getOptions();\n+    Set\u003cString\u003e mandatoryKeys \u003d parameters.getMandatoryKeys();\n     String sql \u003d options.get(SelectConstants.SELECT_SQL, null);\n     boolean isSelect \u003d sql !\u003d null;\n     // choice of keys depends on open type\n     if (isSelect) {\n       rejectUnknownMandatoryKeys(\n           mandatoryKeys,\n           InternalSelectConstants.SELECT_OPTIONS,\n           \"for \" + path + \" in S3 Select operation\");\n     } else {\n       rejectUnknownMandatoryKeys(\n           mandatoryKeys,\n           InternalConstants.STANDARD_OPENFILE_KEYS,\n           \"for \" + path + \" in non-select file I/O\");\n     }\n+    FileStatus providedStatus \u003d parameters.getStatus();\n+    S3AFileStatus fileStatus;\n+    if (providedStatus !\u003d null) {\n+      Preconditions.checkArgument(path.equals(providedStatus.getPath()),\n+          \"FileStatus parameter is not for the path %s: %s\",\n+          path, providedStatus);\n+      if (providedStatus instanceof S3AFileStatus) {\n+        // can use this status to skip our own probes,\n+        // including etag and version.\n+        LOG.debug(\"File was opened with a supplied S3AFileStatus;\"\n+            + \" skipping getFileStatus call in open() operation: {}\",\n+            providedStatus);\n+        fileStatus \u003d (S3AFileStatus) providedStatus;\n+      } else if (providedStatus instanceof S3ALocatedFileStatus) {\n+        LOG.debug(\"File was opened with a supplied S3ALocatedFileStatus;\"\n+            + \" skipping getFileStatus call in open() operation: {}\",\n+            providedStatus);\n+        fileStatus \u003d ((S3ALocatedFileStatus) providedStatus).toS3AFileStatus();\n+      } else {\n+        LOG.debug(\"Ignoring file status {}\", providedStatus);\n+        fileStatus \u003d null;\n+      }\n+    } else {\n+      fileStatus \u003d null;\n+    }\n+    Optional\u003cS3AFileStatus\u003e ost \u003d Optional.ofNullable(fileStatus);\n     CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n     if (!isSelect) {\n       // normal path.\n       unboundedThreadPool.submit(() -\u003e\n           LambdaUtils.eval(result,\n-              () -\u003e open(path, Optional.of(options))));\n+              () -\u003e open(path, Optional.of(options), ost)));\n     } else {\n       // it is a select statement.\n-      // fail fast if the method is not present\n+      // fail fast if the operation is not available\n       requireSelectSupport(path);\n       // submit the query\n       unboundedThreadPool.submit(() -\u003e\n           LambdaUtils.eval(result,\n-              () -\u003e select(path, sql, options)));\n+              () -\u003e select(path, sql, options, ost)));\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n      final Path rawPath,\n      final OpenFileParameters parameters) throws IOException {\n    final Path path \u003d qualify(rawPath);\n    Configuration options \u003d parameters.getOptions();\n    Set\u003cString\u003e mandatoryKeys \u003d parameters.getMandatoryKeys();\n    String sql \u003d options.get(SelectConstants.SELECT_SQL, null);\n    boolean isSelect \u003d sql !\u003d null;\n    // choice of keys depends on open type\n    if (isSelect) {\n      rejectUnknownMandatoryKeys(\n          mandatoryKeys,\n          InternalSelectConstants.SELECT_OPTIONS,\n          \"for \" + path + \" in S3 Select operation\");\n    } else {\n      rejectUnknownMandatoryKeys(\n          mandatoryKeys,\n          InternalConstants.STANDARD_OPENFILE_KEYS,\n          \"for \" + path + \" in non-select file I/O\");\n    }\n    FileStatus providedStatus \u003d parameters.getStatus();\n    S3AFileStatus fileStatus;\n    if (providedStatus !\u003d null) {\n      Preconditions.checkArgument(path.equals(providedStatus.getPath()),\n          \"FileStatus parameter is not for the path %s: %s\",\n          path, providedStatus);\n      if (providedStatus instanceof S3AFileStatus) {\n        // can use this status to skip our own probes,\n        // including etag and version.\n        LOG.debug(\"File was opened with a supplied S3AFileStatus;\"\n            + \" skipping getFileStatus call in open() operation: {}\",\n            providedStatus);\n        fileStatus \u003d (S3AFileStatus) providedStatus;\n      } else if (providedStatus instanceof S3ALocatedFileStatus) {\n        LOG.debug(\"File was opened with a supplied S3ALocatedFileStatus;\"\n            + \" skipping getFileStatus call in open() operation: {}\",\n            providedStatus);\n        fileStatus \u003d ((S3ALocatedFileStatus) providedStatus).toS3AFileStatus();\n      } else {\n        LOG.debug(\"Ignoring file status {}\", providedStatus);\n        fileStatus \u003d null;\n      }\n    } else {\n      fileStatus \u003d null;\n    }\n    Optional\u003cS3AFileStatus\u003e ost \u003d Optional.ofNullable(fileStatus);\n    CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n    if (!isSelect) {\n      // normal path.\n      unboundedThreadPool.submit(() -\u003e\n          LambdaUtils.eval(result,\n              () -\u003e open(path, Optional.of(options), ost)));\n    } else {\n      // it is a select statement.\n      // fail fast if the operation is not available\n      requireSelectSupport(path);\n      // submit the query\n      unboundedThreadPool.submit(() -\u003e\n          LambdaUtils.eval(result,\n              () -\u003e select(path, sql, options, ost)));\n    }\n    return result;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[path-Path(modifiers-final), mandatoryKeys-Set\u003cString\u003e(modifiers-final), options-Configuration(modifiers-final), bufferSize-int(modifiers-final)]",
            "newValue": "[rawPath-Path(modifiers-final), parameters-OpenFileParameters(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
          "commitDate": "21/01/20 2:31 PM",
          "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "10/01/20 3:11 AM",
          "commitNameOld": "49df83899543586bbcaf80f01399ade031cf68b0",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,63 @@\n   public CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n-      final Path path,\n-      final Set\u003cString\u003e mandatoryKeys,\n-      final Configuration options,\n-      final int bufferSize) throws IOException {\n+      final Path rawPath,\n+      final OpenFileParameters parameters) throws IOException {\n+    final Path path \u003d qualify(rawPath);\n+    Configuration options \u003d parameters.getOptions();\n+    Set\u003cString\u003e mandatoryKeys \u003d parameters.getMandatoryKeys();\n     String sql \u003d options.get(SelectConstants.SELECT_SQL, null);\n     boolean isSelect \u003d sql !\u003d null;\n     // choice of keys depends on open type\n     if (isSelect) {\n       rejectUnknownMandatoryKeys(\n           mandatoryKeys,\n           InternalSelectConstants.SELECT_OPTIONS,\n           \"for \" + path + \" in S3 Select operation\");\n     } else {\n       rejectUnknownMandatoryKeys(\n           mandatoryKeys,\n           InternalConstants.STANDARD_OPENFILE_KEYS,\n           \"for \" + path + \" in non-select file I/O\");\n     }\n+    FileStatus providedStatus \u003d parameters.getStatus();\n+    S3AFileStatus fileStatus;\n+    if (providedStatus !\u003d null) {\n+      Preconditions.checkArgument(path.equals(providedStatus.getPath()),\n+          \"FileStatus parameter is not for the path %s: %s\",\n+          path, providedStatus);\n+      if (providedStatus instanceof S3AFileStatus) {\n+        // can use this status to skip our own probes,\n+        // including etag and version.\n+        LOG.debug(\"File was opened with a supplied S3AFileStatus;\"\n+            + \" skipping getFileStatus call in open() operation: {}\",\n+            providedStatus);\n+        fileStatus \u003d (S3AFileStatus) providedStatus;\n+      } else if (providedStatus instanceof S3ALocatedFileStatus) {\n+        LOG.debug(\"File was opened with a supplied S3ALocatedFileStatus;\"\n+            + \" skipping getFileStatus call in open() operation: {}\",\n+            providedStatus);\n+        fileStatus \u003d ((S3ALocatedFileStatus) providedStatus).toS3AFileStatus();\n+      } else {\n+        LOG.debug(\"Ignoring file status {}\", providedStatus);\n+        fileStatus \u003d null;\n+      }\n+    } else {\n+      fileStatus \u003d null;\n+    }\n+    Optional\u003cS3AFileStatus\u003e ost \u003d Optional.ofNullable(fileStatus);\n     CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n     if (!isSelect) {\n       // normal path.\n       unboundedThreadPool.submit(() -\u003e\n           LambdaUtils.eval(result,\n-              () -\u003e open(path, Optional.of(options))));\n+              () -\u003e open(path, Optional.of(options), ost)));\n     } else {\n       // it is a select statement.\n-      // fail fast if the method is not present\n+      // fail fast if the operation is not available\n       requireSelectSupport(path);\n       // submit the query\n       unboundedThreadPool.submit(() -\u003e\n           LambdaUtils.eval(result,\n-              () -\u003e select(path, sql, options)));\n+              () -\u003e select(path, sql, options, ost)));\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n      final Path rawPath,\n      final OpenFileParameters parameters) throws IOException {\n    final Path path \u003d qualify(rawPath);\n    Configuration options \u003d parameters.getOptions();\n    Set\u003cString\u003e mandatoryKeys \u003d parameters.getMandatoryKeys();\n    String sql \u003d options.get(SelectConstants.SELECT_SQL, null);\n    boolean isSelect \u003d sql !\u003d null;\n    // choice of keys depends on open type\n    if (isSelect) {\n      rejectUnknownMandatoryKeys(\n          mandatoryKeys,\n          InternalSelectConstants.SELECT_OPTIONS,\n          \"for \" + path + \" in S3 Select operation\");\n    } else {\n      rejectUnknownMandatoryKeys(\n          mandatoryKeys,\n          InternalConstants.STANDARD_OPENFILE_KEYS,\n          \"for \" + path + \" in non-select file I/O\");\n    }\n    FileStatus providedStatus \u003d parameters.getStatus();\n    S3AFileStatus fileStatus;\n    if (providedStatus !\u003d null) {\n      Preconditions.checkArgument(path.equals(providedStatus.getPath()),\n          \"FileStatus parameter is not for the path %s: %s\",\n          path, providedStatus);\n      if (providedStatus instanceof S3AFileStatus) {\n        // can use this status to skip our own probes,\n        // including etag and version.\n        LOG.debug(\"File was opened with a supplied S3AFileStatus;\"\n            + \" skipping getFileStatus call in open() operation: {}\",\n            providedStatus);\n        fileStatus \u003d (S3AFileStatus) providedStatus;\n      } else if (providedStatus instanceof S3ALocatedFileStatus) {\n        LOG.debug(\"File was opened with a supplied S3ALocatedFileStatus;\"\n            + \" skipping getFileStatus call in open() operation: {}\",\n            providedStatus);\n        fileStatus \u003d ((S3ALocatedFileStatus) providedStatus).toS3AFileStatus();\n      } else {\n        LOG.debug(\"Ignoring file status {}\", providedStatus);\n        fileStatus \u003d null;\n      }\n    } else {\n      fileStatus \u003d null;\n    }\n    Optional\u003cS3AFileStatus\u003e ost \u003d Optional.ofNullable(fileStatus);\n    CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n    if (!isSelect) {\n      // normal path.\n      unboundedThreadPool.submit(() -\u003e\n          LambdaUtils.eval(result,\n              () -\u003e open(path, Optional.of(options), ost)));\n    } else {\n      // it is a select statement.\n      // fail fast if the operation is not available\n      requireSelectSupport(path);\n      // submit the query\n      unboundedThreadPool.submit(() -\u003e\n          LambdaUtils.eval(result,\n              () -\u003e select(path, sql, options, ost)));\n    }\n    return result;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,36 @@\n+  public CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n+      final Path path,\n+      final Set\u003cString\u003e mandatoryKeys,\n+      final Configuration options,\n+      final int bufferSize) throws IOException {\n+    String sql \u003d options.get(SelectConstants.SELECT_SQL, null);\n+    boolean isSelect \u003d sql !\u003d null;\n+    // choice of keys depends on open type\n+    if (isSelect) {\n+      rejectUnknownMandatoryKeys(\n+          mandatoryKeys,\n+          InternalSelectConstants.SELECT_OPTIONS,\n+          \"for \" + path + \" in S3 Select operation\");\n+    } else {\n+      rejectUnknownMandatoryKeys(\n+          mandatoryKeys,\n+          InternalConstants.STANDARD_OPENFILE_KEYS,\n+          \"for \" + path + \" in non-select file I/O\");\n+    }\n+    CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n+    if (!isSelect) {\n+      // normal path.\n+      unboundedThreadPool.submit(() -\u003e\n+          LambdaUtils.eval(result,\n+              () -\u003e open(path, Optional.of(options))));\n+    } else {\n+      // it is a select statement.\n+      // fail fast if the method is not present\n+      requireSelectSupport(path);\n+      // submit the query\n+      unboundedThreadPool.submit(() -\u003e\n+          LambdaUtils.eval(result,\n+              () -\u003e select(path, sql, options)));\n+    }\n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n      final Path path,\n      final Set\u003cString\u003e mandatoryKeys,\n      final Configuration options,\n      final int bufferSize) throws IOException {\n    String sql \u003d options.get(SelectConstants.SELECT_SQL, null);\n    boolean isSelect \u003d sql !\u003d null;\n    // choice of keys depends on open type\n    if (isSelect) {\n      rejectUnknownMandatoryKeys(\n          mandatoryKeys,\n          InternalSelectConstants.SELECT_OPTIONS,\n          \"for \" + path + \" in S3 Select operation\");\n    } else {\n      rejectUnknownMandatoryKeys(\n          mandatoryKeys,\n          InternalConstants.STANDARD_OPENFILE_KEYS,\n          \"for \" + path + \" in non-select file I/O\");\n    }\n    CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n    if (!isSelect) {\n      // normal path.\n      unboundedThreadPool.submit(() -\u003e\n          LambdaUtils.eval(result,\n              () -\u003e open(path, Optional.of(options))));\n    } else {\n      // it is a select statement.\n      // fail fast if the method is not present\n      requireSelectSupport(path);\n      // submit the query\n      unboundedThreadPool.submit(() -\u003e\n          LambdaUtils.eval(result,\n              () -\u003e select(path, sql, options)));\n    }\n    return result;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}