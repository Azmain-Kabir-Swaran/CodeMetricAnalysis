{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AoclDiagnosticOutputParser.java",
  "functionName": "parseDiagnosticOutput",
  "functionId": "parseDiagnosticOutput___output-String__shellExecutor-InnerShellExecutor__fpgaType-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
  "functionStartLine": 86,
  "functionEndLine": 164,
  "numCommitsSeen": 7,
  "timeTaken": 4528,
  "changeHistory": [
    "eeda6891e49bc13ae86d0193f94238b7109e291d",
    "8e1539eca8175f58f836daa5b0ad598c890cbb02",
    "7225ec0ceb49ae8f5588484297a20f07ec047420"
  ],
  "changeHistoryShort": {
    "eeda6891e49bc13ae86d0193f94238b7109e291d": "Ybodychange",
    "8e1539eca8175f58f836daa5b0ad598c890cbb02": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "7225ec0ceb49ae8f5588484297a20f07ec047420": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eeda6891e49bc13ae86d0193f94238b7109e291d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9268. General improvements in FpgaDevice. Contributed by Peter Bacsko.\n",
      "commitDate": "25/03/19 1:22 PM",
      "commitName": "eeda6891e49bc13ae86d0193f94238b7109e291d",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "12/03/19 2:15 PM",
      "commitNameOld": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 12.96,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,79 @@\n   public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n       String output, InnerShellExecutor shellExecutor, String fpgaType) {\n     if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n       List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n       Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n           .matcher(output);\n       Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n           .matcher(output);\n       int sectionStartIndex;\n       int sectionEndIndex;\n       String aliasName;\n \n       while (headerStartMatcher.find()) {\n         sectionStartIndex \u003d headerStartMatcher.end();\n         String section \u003d null;\n         aliasName \u003d headerStartMatcher.group();\n         while (headerEndMatcher.find(sectionStartIndex)) {\n           sectionEndIndex \u003d headerEndMatcher.start();\n           section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n           break;\n         }\n \n         if (section \u003d\u003d null) {\n           LOG.warn(\"Unsupported diagnose output\");\n           LOG.warn(\"aocl output is: \" + output);\n           return Collections.emptyList();\n         }\n \n         // devName, \\(.*\\)\n         // busNum, bus:slot.func\\s\u003d\\s.*,\n         // FPGA temperature\\s\u003d\\s.*\n         // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n         String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n             \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n             \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n             \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n         String[] fields \u003d new String[4];\n         String tempFieldValue;\n \n         for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n           Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n               .matcher(section);\n           if (!fieldMatcher.find()) {\n             LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n             fields[i] \u003d \"\";\n             continue;\n           }\n           tempFieldValue \u003d fieldMatcher.group().trim();\n           if (i \u003d\u003d 0) {\n             // special case for Device name\n             fields[i] \u003d tempFieldValue.substring(1,\n                 tempFieldValue.length() - 1);\n           } else {\n             String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n             fields[i] \u003d ss.substring(0, ss.length() - 1);\n           }\n         }\n \n         String majorMinorNumber \u003d shellExecutor\n             .getMajorAndMinorNumber(fields[0]);\n         if (null !\u003d majorMinorNumber) {\n           String[] mmn \u003d majorMinorNumber.split(\":\");\n \n           devices.add(new FpgaDevice(fpgaType,\n               Integer.parseInt(mmn[0]),\n-              Integer.parseInt(mmn[1]), null,\n-              fields[0], aliasName, fields[1], fields[2], fields[3]));\n+              Integer.parseInt(mmn[1]),\n+              aliasName));\n         } else {\n           LOG.warn(\"Failed to retrieve major/minor number for device\");\n         }\n       }\n \n       return devices;\n     } else {\n       LOG.warn(\"The diagnostic has failed\");\n       LOG.warn(\"Output of aocl is: \" + output);\n       return Collections.emptyList();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n          .matcher(output);\n      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n          .matcher(output);\n      int sectionStartIndex;\n      int sectionEndIndex;\n      String aliasName;\n\n      while (headerStartMatcher.find()) {\n        sectionStartIndex \u003d headerStartMatcher.end();\n        String section \u003d null;\n        aliasName \u003d headerStartMatcher.group();\n        while (headerEndMatcher.find(sectionStartIndex)) {\n          sectionEndIndex \u003d headerEndMatcher.start();\n          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n          break;\n        }\n\n        if (section \u003d\u003d null) {\n          LOG.warn(\"Unsupported diagnose output\");\n          LOG.warn(\"aocl output is: \" + output);\n          return Collections.emptyList();\n        }\n\n        // devName, \\(.*\\)\n        // busNum, bus:slot.func\\s\u003d\\s.*,\n        // FPGA temperature\\s\u003d\\s.*\n        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n        String[] fields \u003d new String[4];\n        String tempFieldValue;\n\n        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n              .matcher(section);\n          if (!fieldMatcher.find()) {\n            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n            fields[i] \u003d \"\";\n            continue;\n          }\n          tempFieldValue \u003d fieldMatcher.group().trim();\n          if (i \u003d\u003d 0) {\n            // special case for Device name\n            fields[i] \u003d tempFieldValue.substring(1,\n                tempFieldValue.length() - 1);\n          } else {\n            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n            fields[i] \u003d ss.substring(0, ss.length() - 1);\n          }\n        }\n\n        String majorMinorNumber \u003d shellExecutor\n            .getMajorAndMinorNumber(fields[0]);\n        if (null !\u003d majorMinorNumber) {\n          String[] mmn \u003d majorMinorNumber.split(\":\");\n\n          devices.add(new FpgaDevice(fpgaType,\n              Integer.parseInt(mmn[0]),\n              Integer.parseInt(mmn[1]),\n              aliasName));\n        } else {\n          LOG.warn(\"Failed to retrieve major/minor number for device\");\n        }\n      }\n\n      return devices;\n    } else {\n      LOG.warn(\"The diagnostic has failed\");\n      LOG.warn(\"Output of aocl is: \" + output);\n      return Collections.emptyList();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
      "extendedDetails": {}
    },
    "8e1539eca8175f58f836daa5b0ad598c890cbb02": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
      "commitDate": "12/03/19 2:15 PM",
      "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/03/19 12:32 PM",
          "commitNameOld": "24793d2d971788de904165f7490f17d79d078a6a",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n-  public void parseDiagnoseInfo(String output, List\u003cFpgaResourceAllocator.FpgaDevice\u003e list) {\n+  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n+      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n     if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n-      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\").matcher(output);\n-      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\n+      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n+      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n+          .matcher(output);\n+      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n+          .matcher(output);\n       int sectionStartIndex;\n       int sectionEndIndex;\n       String aliasName;\n+\n       while (headerStartMatcher.find()) {\n         sectionStartIndex \u003d headerStartMatcher.end();\n         String section \u003d null;\n         aliasName \u003d headerStartMatcher.group();\n         while (headerEndMatcher.find(sectionStartIndex)) {\n           sectionEndIndex \u003d headerEndMatcher.start();\n           section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n           break;\n         }\n-        if (null \u003d\u003d section) {\n+\n+        if (section \u003d\u003d null) {\n           LOG.warn(\"Unsupported diagnose output\");\n-          return;\n+          LOG.warn(\"aocl output is: \" + output);\n+          return Collections.emptyList();\n         }\n+\n         // devName, \\(.*\\)\n         // busNum, bus:slot.func\\s\u003d\\s.*,\n         // FPGA temperature\\s\u003d\\s.*\n         // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n-        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n-            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n+        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n+            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n+            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n+            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n         String[] fields \u003d new String[4];\n         String tempFieldValue;\n+\n         for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n-          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i]).matcher(section);\n+          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n+              .matcher(section);\n           if (!fieldMatcher.find()) {\n             LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n             fields[i] \u003d \"\";\n             continue;\n           }\n           tempFieldValue \u003d fieldMatcher.group().trim();\n           if (i \u003d\u003d 0) {\n             // special case for Device name\n-            fields[i] \u003d tempFieldValue.substring(1, tempFieldValue.length() - 1);\n+            fields[i] \u003d tempFieldValue.substring(1,\n+                tempFieldValue.length() - 1);\n           } else {\n             String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n             fields[i] \u003d ss.substring(0, ss.length() - 1);\n           }\n         }\n-        String majorMinorNumber \u003d this.shell.getMajorAndMinorNumber(fields[0]);\n+\n+        String majorMinorNumber \u003d shellExecutor\n+            .getMajorAndMinorNumber(fields[0]);\n         if (null !\u003d majorMinorNumber) {\n           String[] mmn \u003d majorMinorNumber.split(\":\");\n-          this.aliasMap.put(majorMinorNumber, aliasName);\n-          list.add(new FpgaResourceAllocator.FpgaDevice(getFpgaType(),\n+\n+          devices.add(new FpgaDevice(fpgaType,\n               Integer.parseInt(mmn[0]),\n               Integer.parseInt(mmn[1]), null,\n               fields[0], aliasName, fields[1], fields[2], fields[3]));\n+        } else {\n+          LOG.warn(\"Failed to retrieve major/minor number for device\");\n         }\n-      }// end while\n-    }// end if\n+      }\n+\n+      return devices;\n+    } else {\n+      LOG.warn(\"The diagnostic has failed\");\n+      LOG.warn(\"Output of aocl is: \" + output);\n+      return Collections.emptyList();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n          .matcher(output);\n      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n          .matcher(output);\n      int sectionStartIndex;\n      int sectionEndIndex;\n      String aliasName;\n\n      while (headerStartMatcher.find()) {\n        sectionStartIndex \u003d headerStartMatcher.end();\n        String section \u003d null;\n        aliasName \u003d headerStartMatcher.group();\n        while (headerEndMatcher.find(sectionStartIndex)) {\n          sectionEndIndex \u003d headerEndMatcher.start();\n          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n          break;\n        }\n\n        if (section \u003d\u003d null) {\n          LOG.warn(\"Unsupported diagnose output\");\n          LOG.warn(\"aocl output is: \" + output);\n          return Collections.emptyList();\n        }\n\n        // devName, \\(.*\\)\n        // busNum, bus:slot.func\\s\u003d\\s.*,\n        // FPGA temperature\\s\u003d\\s.*\n        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n        String[] fields \u003d new String[4];\n        String tempFieldValue;\n\n        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n              .matcher(section);\n          if (!fieldMatcher.find()) {\n            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n            fields[i] \u003d \"\";\n            continue;\n          }\n          tempFieldValue \u003d fieldMatcher.group().trim();\n          if (i \u003d\u003d 0) {\n            // special case for Device name\n            fields[i] \u003d tempFieldValue.substring(1,\n                tempFieldValue.length() - 1);\n          } else {\n            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n            fields[i] \u003d ss.substring(0, ss.length() - 1);\n          }\n        }\n\n        String majorMinorNumber \u003d shellExecutor\n            .getMajorAndMinorNumber(fields[0]);\n        if (null !\u003d majorMinorNumber) {\n          String[] mmn \u003d majorMinorNumber.split(\":\");\n\n          devices.add(new FpgaDevice(fpgaType,\n              Integer.parseInt(mmn[0]),\n              Integer.parseInt(mmn[1]), null,\n              fields[0], aliasName, fields[1], fields[2], fields[3]));\n        } else {\n          LOG.warn(\"Failed to retrieve major/minor number for device\");\n        }\n      }\n\n      return devices;\n    } else {\n      LOG.warn(\"The diagnostic has failed\");\n      LOG.warn(\"Output of aocl is: \" + output);\n      return Collections.emptyList();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
            "oldMethodName": "parseDiagnoseInfo",
            "newMethodName": "parseDiagnosticOutput"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/03/19 12:32 PM",
          "commitNameOld": "24793d2d971788de904165f7490f17d79d078a6a",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n-  public void parseDiagnoseInfo(String output, List\u003cFpgaResourceAllocator.FpgaDevice\u003e list) {\n+  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n+      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n     if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n-      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\").matcher(output);\n-      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\n+      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n+      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n+          .matcher(output);\n+      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n+          .matcher(output);\n       int sectionStartIndex;\n       int sectionEndIndex;\n       String aliasName;\n+\n       while (headerStartMatcher.find()) {\n         sectionStartIndex \u003d headerStartMatcher.end();\n         String section \u003d null;\n         aliasName \u003d headerStartMatcher.group();\n         while (headerEndMatcher.find(sectionStartIndex)) {\n           sectionEndIndex \u003d headerEndMatcher.start();\n           section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n           break;\n         }\n-        if (null \u003d\u003d section) {\n+\n+        if (section \u003d\u003d null) {\n           LOG.warn(\"Unsupported diagnose output\");\n-          return;\n+          LOG.warn(\"aocl output is: \" + output);\n+          return Collections.emptyList();\n         }\n+\n         // devName, \\(.*\\)\n         // busNum, bus:slot.func\\s\u003d\\s.*,\n         // FPGA temperature\\s\u003d\\s.*\n         // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n-        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n-            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n+        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n+            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n+            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n+            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n         String[] fields \u003d new String[4];\n         String tempFieldValue;\n+\n         for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n-          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i]).matcher(section);\n+          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n+              .matcher(section);\n           if (!fieldMatcher.find()) {\n             LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n             fields[i] \u003d \"\";\n             continue;\n           }\n           tempFieldValue \u003d fieldMatcher.group().trim();\n           if (i \u003d\u003d 0) {\n             // special case for Device name\n-            fields[i] \u003d tempFieldValue.substring(1, tempFieldValue.length() - 1);\n+            fields[i] \u003d tempFieldValue.substring(1,\n+                tempFieldValue.length() - 1);\n           } else {\n             String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n             fields[i] \u003d ss.substring(0, ss.length() - 1);\n           }\n         }\n-        String majorMinorNumber \u003d this.shell.getMajorAndMinorNumber(fields[0]);\n+\n+        String majorMinorNumber \u003d shellExecutor\n+            .getMajorAndMinorNumber(fields[0]);\n         if (null !\u003d majorMinorNumber) {\n           String[] mmn \u003d majorMinorNumber.split(\":\");\n-          this.aliasMap.put(majorMinorNumber, aliasName);\n-          list.add(new FpgaResourceAllocator.FpgaDevice(getFpgaType(),\n+\n+          devices.add(new FpgaDevice(fpgaType,\n               Integer.parseInt(mmn[0]),\n               Integer.parseInt(mmn[1]), null,\n               fields[0], aliasName, fields[1], fields[2], fields[3]));\n+        } else {\n+          LOG.warn(\"Failed to retrieve major/minor number for device\");\n         }\n-      }// end while\n-    }// end if\n+      }\n+\n+      return devices;\n+    } else {\n+      LOG.warn(\"The diagnostic has failed\");\n+      LOG.warn(\"Output of aocl is: \" + output);\n+      return Collections.emptyList();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n          .matcher(output);\n      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n          .matcher(output);\n      int sectionStartIndex;\n      int sectionEndIndex;\n      String aliasName;\n\n      while (headerStartMatcher.find()) {\n        sectionStartIndex \u003d headerStartMatcher.end();\n        String section \u003d null;\n        aliasName \u003d headerStartMatcher.group();\n        while (headerEndMatcher.find(sectionStartIndex)) {\n          sectionEndIndex \u003d headerEndMatcher.start();\n          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n          break;\n        }\n\n        if (section \u003d\u003d null) {\n          LOG.warn(\"Unsupported diagnose output\");\n          LOG.warn(\"aocl output is: \" + output);\n          return Collections.emptyList();\n        }\n\n        // devName, \\(.*\\)\n        // busNum, bus:slot.func\\s\u003d\\s.*,\n        // FPGA temperature\\s\u003d\\s.*\n        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n        String[] fields \u003d new String[4];\n        String tempFieldValue;\n\n        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n              .matcher(section);\n          if (!fieldMatcher.find()) {\n            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n            fields[i] \u003d \"\";\n            continue;\n          }\n          tempFieldValue \u003d fieldMatcher.group().trim();\n          if (i \u003d\u003d 0) {\n            // special case for Device name\n            fields[i] \u003d tempFieldValue.substring(1,\n                tempFieldValue.length() - 1);\n          } else {\n            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n            fields[i] \u003d ss.substring(0, ss.length() - 1);\n          }\n        }\n\n        String majorMinorNumber \u003d shellExecutor\n            .getMajorAndMinorNumber(fields[0]);\n        if (null !\u003d majorMinorNumber) {\n          String[] mmn \u003d majorMinorNumber.split(\":\");\n\n          devices.add(new FpgaDevice(fpgaType,\n              Integer.parseInt(mmn[0]),\n              Integer.parseInt(mmn[1]), null,\n              fields[0], aliasName, fields[1], fields[2], fields[3]));\n        } else {\n          LOG.warn(\"Failed to retrieve major/minor number for device\");\n        }\n      }\n\n      return devices;\n    } else {\n      LOG.warn(\"The diagnostic has failed\");\n      LOG.warn(\"Output of aocl is: \" + output);\n      return Collections.emptyList();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "List\u003cFpgaDevice\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/03/19 12:32 PM",
          "commitNameOld": "24793d2d971788de904165f7490f17d79d078a6a",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n-  public void parseDiagnoseInfo(String output, List\u003cFpgaResourceAllocator.FpgaDevice\u003e list) {\n+  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n+      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n     if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n-      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\").matcher(output);\n-      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\n+      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n+      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n+          .matcher(output);\n+      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n+          .matcher(output);\n       int sectionStartIndex;\n       int sectionEndIndex;\n       String aliasName;\n+\n       while (headerStartMatcher.find()) {\n         sectionStartIndex \u003d headerStartMatcher.end();\n         String section \u003d null;\n         aliasName \u003d headerStartMatcher.group();\n         while (headerEndMatcher.find(sectionStartIndex)) {\n           sectionEndIndex \u003d headerEndMatcher.start();\n           section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n           break;\n         }\n-        if (null \u003d\u003d section) {\n+\n+        if (section \u003d\u003d null) {\n           LOG.warn(\"Unsupported diagnose output\");\n-          return;\n+          LOG.warn(\"aocl output is: \" + output);\n+          return Collections.emptyList();\n         }\n+\n         // devName, \\(.*\\)\n         // busNum, bus:slot.func\\s\u003d\\s.*,\n         // FPGA temperature\\s\u003d\\s.*\n         // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n-        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n-            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n+        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n+            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n+            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n+            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n         String[] fields \u003d new String[4];\n         String tempFieldValue;\n+\n         for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n-          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i]).matcher(section);\n+          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n+              .matcher(section);\n           if (!fieldMatcher.find()) {\n             LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n             fields[i] \u003d \"\";\n             continue;\n           }\n           tempFieldValue \u003d fieldMatcher.group().trim();\n           if (i \u003d\u003d 0) {\n             // special case for Device name\n-            fields[i] \u003d tempFieldValue.substring(1, tempFieldValue.length() - 1);\n+            fields[i] \u003d tempFieldValue.substring(1,\n+                tempFieldValue.length() - 1);\n           } else {\n             String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n             fields[i] \u003d ss.substring(0, ss.length() - 1);\n           }\n         }\n-        String majorMinorNumber \u003d this.shell.getMajorAndMinorNumber(fields[0]);\n+\n+        String majorMinorNumber \u003d shellExecutor\n+            .getMajorAndMinorNumber(fields[0]);\n         if (null !\u003d majorMinorNumber) {\n           String[] mmn \u003d majorMinorNumber.split(\":\");\n-          this.aliasMap.put(majorMinorNumber, aliasName);\n-          list.add(new FpgaResourceAllocator.FpgaDevice(getFpgaType(),\n+\n+          devices.add(new FpgaDevice(fpgaType,\n               Integer.parseInt(mmn[0]),\n               Integer.parseInt(mmn[1]), null,\n               fields[0], aliasName, fields[1], fields[2], fields[3]));\n+        } else {\n+          LOG.warn(\"Failed to retrieve major/minor number for device\");\n         }\n-      }// end while\n-    }// end if\n+      }\n+\n+      return devices;\n+    } else {\n+      LOG.warn(\"The diagnostic has failed\");\n+      LOG.warn(\"Output of aocl is: \" + output);\n+      return Collections.emptyList();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n          .matcher(output);\n      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n          .matcher(output);\n      int sectionStartIndex;\n      int sectionEndIndex;\n      String aliasName;\n\n      while (headerStartMatcher.find()) {\n        sectionStartIndex \u003d headerStartMatcher.end();\n        String section \u003d null;\n        aliasName \u003d headerStartMatcher.group();\n        while (headerEndMatcher.find(sectionStartIndex)) {\n          sectionEndIndex \u003d headerEndMatcher.start();\n          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n          break;\n        }\n\n        if (section \u003d\u003d null) {\n          LOG.warn(\"Unsupported diagnose output\");\n          LOG.warn(\"aocl output is: \" + output);\n          return Collections.emptyList();\n        }\n\n        // devName, \\(.*\\)\n        // busNum, bus:slot.func\\s\u003d\\s.*,\n        // FPGA temperature\\s\u003d\\s.*\n        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n        String[] fields \u003d new String[4];\n        String tempFieldValue;\n\n        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n              .matcher(section);\n          if (!fieldMatcher.find()) {\n            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n            fields[i] \u003d \"\";\n            continue;\n          }\n          tempFieldValue \u003d fieldMatcher.group().trim();\n          if (i \u003d\u003d 0) {\n            // special case for Device name\n            fields[i] \u003d tempFieldValue.substring(1,\n                tempFieldValue.length() - 1);\n          } else {\n            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n            fields[i] \u003d ss.substring(0, ss.length() - 1);\n          }\n        }\n\n        String majorMinorNumber \u003d shellExecutor\n            .getMajorAndMinorNumber(fields[0]);\n        if (null !\u003d majorMinorNumber) {\n          String[] mmn \u003d majorMinorNumber.split(\":\");\n\n          devices.add(new FpgaDevice(fpgaType,\n              Integer.parseInt(mmn[0]),\n              Integer.parseInt(mmn[1]), null,\n              fields[0], aliasName, fields[1], fields[2], fields[3]));\n        } else {\n          LOG.warn(\"Failed to retrieve major/minor number for device\");\n        }\n      }\n\n      return devices;\n    } else {\n      LOG.warn(\"The diagnostic has failed\");\n      LOG.warn(\"Output of aocl is: \" + output);\n      return Collections.emptyList();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/03/19 12:32 PM",
          "commitNameOld": "24793d2d971788de904165f7490f17d79d078a6a",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n-  public void parseDiagnoseInfo(String output, List\u003cFpgaResourceAllocator.FpgaDevice\u003e list) {\n+  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n+      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n     if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n-      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\").matcher(output);\n-      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\n+      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n+      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n+          .matcher(output);\n+      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n+          .matcher(output);\n       int sectionStartIndex;\n       int sectionEndIndex;\n       String aliasName;\n+\n       while (headerStartMatcher.find()) {\n         sectionStartIndex \u003d headerStartMatcher.end();\n         String section \u003d null;\n         aliasName \u003d headerStartMatcher.group();\n         while (headerEndMatcher.find(sectionStartIndex)) {\n           sectionEndIndex \u003d headerEndMatcher.start();\n           section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n           break;\n         }\n-        if (null \u003d\u003d section) {\n+\n+        if (section \u003d\u003d null) {\n           LOG.warn(\"Unsupported diagnose output\");\n-          return;\n+          LOG.warn(\"aocl output is: \" + output);\n+          return Collections.emptyList();\n         }\n+\n         // devName, \\(.*\\)\n         // busNum, bus:slot.func\\s\u003d\\s.*,\n         // FPGA temperature\\s\u003d\\s.*\n         // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n-        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n-            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n+        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n+            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n+            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n+            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n         String[] fields \u003d new String[4];\n         String tempFieldValue;\n+\n         for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n-          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i]).matcher(section);\n+          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n+              .matcher(section);\n           if (!fieldMatcher.find()) {\n             LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n             fields[i] \u003d \"\";\n             continue;\n           }\n           tempFieldValue \u003d fieldMatcher.group().trim();\n           if (i \u003d\u003d 0) {\n             // special case for Device name\n-            fields[i] \u003d tempFieldValue.substring(1, tempFieldValue.length() - 1);\n+            fields[i] \u003d tempFieldValue.substring(1,\n+                tempFieldValue.length() - 1);\n           } else {\n             String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n             fields[i] \u003d ss.substring(0, ss.length() - 1);\n           }\n         }\n-        String majorMinorNumber \u003d this.shell.getMajorAndMinorNumber(fields[0]);\n+\n+        String majorMinorNumber \u003d shellExecutor\n+            .getMajorAndMinorNumber(fields[0]);\n         if (null !\u003d majorMinorNumber) {\n           String[] mmn \u003d majorMinorNumber.split(\":\");\n-          this.aliasMap.put(majorMinorNumber, aliasName);\n-          list.add(new FpgaResourceAllocator.FpgaDevice(getFpgaType(),\n+\n+          devices.add(new FpgaDevice(fpgaType,\n               Integer.parseInt(mmn[0]),\n               Integer.parseInt(mmn[1]), null,\n               fields[0], aliasName, fields[1], fields[2], fields[3]));\n+        } else {\n+          LOG.warn(\"Failed to retrieve major/minor number for device\");\n         }\n-      }// end while\n-    }// end if\n+      }\n+\n+      return devices;\n+    } else {\n+      LOG.warn(\"The diagnostic has failed\");\n+      LOG.warn(\"Output of aocl is: \" + output);\n+      return Collections.emptyList();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n          .matcher(output);\n      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n          .matcher(output);\n      int sectionStartIndex;\n      int sectionEndIndex;\n      String aliasName;\n\n      while (headerStartMatcher.find()) {\n        sectionStartIndex \u003d headerStartMatcher.end();\n        String section \u003d null;\n        aliasName \u003d headerStartMatcher.group();\n        while (headerEndMatcher.find(sectionStartIndex)) {\n          sectionEndIndex \u003d headerEndMatcher.start();\n          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n          break;\n        }\n\n        if (section \u003d\u003d null) {\n          LOG.warn(\"Unsupported diagnose output\");\n          LOG.warn(\"aocl output is: \" + output);\n          return Collections.emptyList();\n        }\n\n        // devName, \\(.*\\)\n        // busNum, bus:slot.func\\s\u003d\\s.*,\n        // FPGA temperature\\s\u003d\\s.*\n        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n        String[] fields \u003d new String[4];\n        String tempFieldValue;\n\n        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n              .matcher(section);\n          if (!fieldMatcher.find()) {\n            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n            fields[i] \u003d \"\";\n            continue;\n          }\n          tempFieldValue \u003d fieldMatcher.group().trim();\n          if (i \u003d\u003d 0) {\n            // special case for Device name\n            fields[i] \u003d tempFieldValue.substring(1,\n                tempFieldValue.length() - 1);\n          } else {\n            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n            fields[i] \u003d ss.substring(0, ss.length() - 1);\n          }\n        }\n\n        String majorMinorNumber \u003d shellExecutor\n            .getMajorAndMinorNumber(fields[0]);\n        if (null !\u003d majorMinorNumber) {\n          String[] mmn \u003d majorMinorNumber.split(\":\");\n\n          devices.add(new FpgaDevice(fpgaType,\n              Integer.parseInt(mmn[0]),\n              Integer.parseInt(mmn[1]), null,\n              fields[0], aliasName, fields[1], fields[2], fields[3]));\n        } else {\n          LOG.warn(\"Failed to retrieve major/minor number for device\");\n        }\n      }\n\n      return devices;\n    } else {\n      LOG.warn(\"The diagnostic has failed\");\n      LOG.warn(\"Output of aocl is: \" + output);\n      return Collections.emptyList();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/03/19 12:32 PM",
          "commitNameOld": "24793d2d971788de904165f7490f17d79d078a6a",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n-  public void parseDiagnoseInfo(String output, List\u003cFpgaResourceAllocator.FpgaDevice\u003e list) {\n+  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n+      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n     if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n-      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\").matcher(output);\n-      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\n+      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n+      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n+          .matcher(output);\n+      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n+          .matcher(output);\n       int sectionStartIndex;\n       int sectionEndIndex;\n       String aliasName;\n+\n       while (headerStartMatcher.find()) {\n         sectionStartIndex \u003d headerStartMatcher.end();\n         String section \u003d null;\n         aliasName \u003d headerStartMatcher.group();\n         while (headerEndMatcher.find(sectionStartIndex)) {\n           sectionEndIndex \u003d headerEndMatcher.start();\n           section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n           break;\n         }\n-        if (null \u003d\u003d section) {\n+\n+        if (section \u003d\u003d null) {\n           LOG.warn(\"Unsupported diagnose output\");\n-          return;\n+          LOG.warn(\"aocl output is: \" + output);\n+          return Collections.emptyList();\n         }\n+\n         // devName, \\(.*\\)\n         // busNum, bus:slot.func\\s\u003d\\s.*,\n         // FPGA temperature\\s\u003d\\s.*\n         // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n-        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n-            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n+        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n+            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n+            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n+            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n         String[] fields \u003d new String[4];\n         String tempFieldValue;\n+\n         for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n-          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i]).matcher(section);\n+          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n+              .matcher(section);\n           if (!fieldMatcher.find()) {\n             LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n             fields[i] \u003d \"\";\n             continue;\n           }\n           tempFieldValue \u003d fieldMatcher.group().trim();\n           if (i \u003d\u003d 0) {\n             // special case for Device name\n-            fields[i] \u003d tempFieldValue.substring(1, tempFieldValue.length() - 1);\n+            fields[i] \u003d tempFieldValue.substring(1,\n+                tempFieldValue.length() - 1);\n           } else {\n             String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n             fields[i] \u003d ss.substring(0, ss.length() - 1);\n           }\n         }\n-        String majorMinorNumber \u003d this.shell.getMajorAndMinorNumber(fields[0]);\n+\n+        String majorMinorNumber \u003d shellExecutor\n+            .getMajorAndMinorNumber(fields[0]);\n         if (null !\u003d majorMinorNumber) {\n           String[] mmn \u003d majorMinorNumber.split(\":\");\n-          this.aliasMap.put(majorMinorNumber, aliasName);\n-          list.add(new FpgaResourceAllocator.FpgaDevice(getFpgaType(),\n+\n+          devices.add(new FpgaDevice(fpgaType,\n               Integer.parseInt(mmn[0]),\n               Integer.parseInt(mmn[1]), null,\n               fields[0], aliasName, fields[1], fields[2], fields[3]));\n+        } else {\n+          LOG.warn(\"Failed to retrieve major/minor number for device\");\n         }\n-      }// end while\n-    }// end if\n+      }\n+\n+      return devices;\n+    } else {\n+      LOG.warn(\"The diagnostic has failed\");\n+      LOG.warn(\"Output of aocl is: \" + output);\n+      return Collections.emptyList();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n          .matcher(output);\n      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n          .matcher(output);\n      int sectionStartIndex;\n      int sectionEndIndex;\n      String aliasName;\n\n      while (headerStartMatcher.find()) {\n        sectionStartIndex \u003d headerStartMatcher.end();\n        String section \u003d null;\n        aliasName \u003d headerStartMatcher.group();\n        while (headerEndMatcher.find(sectionStartIndex)) {\n          sectionEndIndex \u003d headerEndMatcher.start();\n          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n          break;\n        }\n\n        if (section \u003d\u003d null) {\n          LOG.warn(\"Unsupported diagnose output\");\n          LOG.warn(\"aocl output is: \" + output);\n          return Collections.emptyList();\n        }\n\n        // devName, \\(.*\\)\n        // busNum, bus:slot.func\\s\u003d\\s.*,\n        // FPGA temperature\\s\u003d\\s.*\n        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n        String[] fields \u003d new String[4];\n        String tempFieldValue;\n\n        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n              .matcher(section);\n          if (!fieldMatcher.find()) {\n            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n            fields[i] \u003d \"\";\n            continue;\n          }\n          tempFieldValue \u003d fieldMatcher.group().trim();\n          if (i \u003d\u003d 0) {\n            // special case for Device name\n            fields[i] \u003d tempFieldValue.substring(1,\n                tempFieldValue.length() - 1);\n          } else {\n            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n            fields[i] \u003d ss.substring(0, ss.length() - 1);\n          }\n        }\n\n        String majorMinorNumber \u003d shellExecutor\n            .getMajorAndMinorNumber(fields[0]);\n        if (null !\u003d majorMinorNumber) {\n          String[] mmn \u003d majorMinorNumber.split(\":\");\n\n          devices.add(new FpgaDevice(fpgaType,\n              Integer.parseInt(mmn[0]),\n              Integer.parseInt(mmn[1]), null,\n              fields[0], aliasName, fields[1], fields[2], fields[3]));\n        } else {\n          LOG.warn(\"Failed to retrieve major/minor number for device\");\n        }\n      }\n\n      return devices;\n    } else {\n      LOG.warn(\"The diagnostic has failed\");\n      LOG.warn(\"Output of aocl is: \" + output);\n      return Collections.emptyList();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
          "extendedDetails": {
            "oldValue": "parseDiagnoseInfo",
            "newValue": "parseDiagnosticOutput"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/03/19 12:32 PM",
          "commitNameOld": "24793d2d971788de904165f7490f17d79d078a6a",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n-  public void parseDiagnoseInfo(String output, List\u003cFpgaResourceAllocator.FpgaDevice\u003e list) {\n+  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n+      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n     if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n-      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\").matcher(output);\n-      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\n+      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n+      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n+          .matcher(output);\n+      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n+          .matcher(output);\n       int sectionStartIndex;\n       int sectionEndIndex;\n       String aliasName;\n+\n       while (headerStartMatcher.find()) {\n         sectionStartIndex \u003d headerStartMatcher.end();\n         String section \u003d null;\n         aliasName \u003d headerStartMatcher.group();\n         while (headerEndMatcher.find(sectionStartIndex)) {\n           sectionEndIndex \u003d headerEndMatcher.start();\n           section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n           break;\n         }\n-        if (null \u003d\u003d section) {\n+\n+        if (section \u003d\u003d null) {\n           LOG.warn(\"Unsupported diagnose output\");\n-          return;\n+          LOG.warn(\"aocl output is: \" + output);\n+          return Collections.emptyList();\n         }\n+\n         // devName, \\(.*\\)\n         // busNum, bus:slot.func\\s\u003d\\s.*,\n         // FPGA temperature\\s\u003d\\s.*\n         // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n-        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n-            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n+        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n+            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n+            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n+            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n         String[] fields \u003d new String[4];\n         String tempFieldValue;\n+\n         for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n-          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i]).matcher(section);\n+          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n+              .matcher(section);\n           if (!fieldMatcher.find()) {\n             LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n             fields[i] \u003d \"\";\n             continue;\n           }\n           tempFieldValue \u003d fieldMatcher.group().trim();\n           if (i \u003d\u003d 0) {\n             // special case for Device name\n-            fields[i] \u003d tempFieldValue.substring(1, tempFieldValue.length() - 1);\n+            fields[i] \u003d tempFieldValue.substring(1,\n+                tempFieldValue.length() - 1);\n           } else {\n             String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n             fields[i] \u003d ss.substring(0, ss.length() - 1);\n           }\n         }\n-        String majorMinorNumber \u003d this.shell.getMajorAndMinorNumber(fields[0]);\n+\n+        String majorMinorNumber \u003d shellExecutor\n+            .getMajorAndMinorNumber(fields[0]);\n         if (null !\u003d majorMinorNumber) {\n           String[] mmn \u003d majorMinorNumber.split(\":\");\n-          this.aliasMap.put(majorMinorNumber, aliasName);\n-          list.add(new FpgaResourceAllocator.FpgaDevice(getFpgaType(),\n+\n+          devices.add(new FpgaDevice(fpgaType,\n               Integer.parseInt(mmn[0]),\n               Integer.parseInt(mmn[1]), null,\n               fields[0], aliasName, fields[1], fields[2], fields[3]));\n+        } else {\n+          LOG.warn(\"Failed to retrieve major/minor number for device\");\n         }\n-      }// end while\n-    }// end if\n+      }\n+\n+      return devices;\n+    } else {\n+      LOG.warn(\"The diagnostic has failed\");\n+      LOG.warn(\"Output of aocl is: \" + output);\n+      return Collections.emptyList();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cFpgaDevice\u003e parseDiagnosticOutput(\n      String output, InnerShellExecutor shellExecutor, String fpgaType) {\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n      List\u003cFpgaDevice\u003e devices \u003d new ArrayList\u003c\u003e();\n      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\")\n          .matcher(output);\n      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\")\n          .matcher(output);\n      int sectionStartIndex;\n      int sectionEndIndex;\n      String aliasName;\n\n      while (headerStartMatcher.find()) {\n        sectionStartIndex \u003d headerStartMatcher.end();\n        String section \u003d null;\n        aliasName \u003d headerStartMatcher.group();\n        while (headerEndMatcher.find(sectionStartIndex)) {\n          sectionEndIndex \u003d headerEndMatcher.start();\n          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n          break;\n        }\n\n        if (section \u003d\u003d null) {\n          LOG.warn(\"Unsupported diagnose output\");\n          LOG.warn(\"aocl output is: \" + output);\n          return Collections.emptyList();\n        }\n\n        // devName, \\(.*\\)\n        // busNum, bus:slot.func\\s\u003d\\s.*,\n        // FPGA temperature\\s\u003d\\s.*\n        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\",\n            \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\",\n            \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n        String[] fields \u003d new String[4];\n        String tempFieldValue;\n\n        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i])\n              .matcher(section);\n          if (!fieldMatcher.find()) {\n            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n            fields[i] \u003d \"\";\n            continue;\n          }\n          tempFieldValue \u003d fieldMatcher.group().trim();\n          if (i \u003d\u003d 0) {\n            // special case for Device name\n            fields[i] \u003d tempFieldValue.substring(1,\n                tempFieldValue.length() - 1);\n          } else {\n            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n            fields[i] \u003d ss.substring(0, ss.length() - 1);\n          }\n        }\n\n        String majorMinorNumber \u003d shellExecutor\n            .getMajorAndMinorNumber(fields[0]);\n        if (null !\u003d majorMinorNumber) {\n          String[] mmn \u003d majorMinorNumber.split(\":\");\n\n          devices.add(new FpgaDevice(fpgaType,\n              Integer.parseInt(mmn[0]),\n              Integer.parseInt(mmn[1]), null,\n              fields[0], aliasName, fields[1], fields[2], fields[3]));\n        } else {\n          LOG.warn(\"Failed to retrieve major/minor number for device\");\n        }\n      }\n\n      return devices;\n    } else {\n      LOG.warn(\"The diagnostic has failed\");\n      LOG.warn(\"Output of aocl is: \" + output);\n      return Collections.emptyList();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/AoclDiagnosticOutputParser.java",
          "extendedDetails": {
            "oldValue": "[output-String, list-List\u003cFpgaResourceAllocator.FpgaDevice\u003e]",
            "newValue": "[output-String, shellExecutor-InnerShellExecutor, fpgaType-String]"
          }
        }
      ]
    },
    "7225ec0ceb49ae8f5588484297a20f07ec047420": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6507. Add support in NodeManager to isolate FPGA devices with CGroups. (Zhankun Tang via wangda)\n\nChange-Id: Ic9afd841805f1035423915a0b0add5f3ba96cf9d\n",
      "commitDate": "01/12/17 10:50 AM",
      "commitName": "7225ec0ceb49ae8f5588484297a20f07ec047420",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,56 @@\n+  public void parseDiagnoseInfo(String output, List\u003cFpgaResourceAllocator.FpgaDevice\u003e list) {\n+    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n+      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\").matcher(output);\n+      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\n+      int sectionStartIndex;\n+      int sectionEndIndex;\n+      String aliasName;\n+      while (headerStartMatcher.find()) {\n+        sectionStartIndex \u003d headerStartMatcher.end();\n+        String section \u003d null;\n+        aliasName \u003d headerStartMatcher.group();\n+        while (headerEndMatcher.find(sectionStartIndex)) {\n+          sectionEndIndex \u003d headerEndMatcher.start();\n+          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n+          break;\n+        }\n+        if (null \u003d\u003d section) {\n+          LOG.warn(\"Unsupported diagnose output\");\n+          return;\n+        }\n+        // devName, \\(.*\\)\n+        // busNum, bus:slot.func\\s\u003d\\s.*,\n+        // FPGA temperature\\s\u003d\\s.*\n+        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n+        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n+            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n+        String[] fields \u003d new String[4];\n+        String tempFieldValue;\n+        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n+          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i]).matcher(section);\n+          if (!fieldMatcher.find()) {\n+            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n+            fields[i] \u003d \"\";\n+            continue;\n+          }\n+          tempFieldValue \u003d fieldMatcher.group().trim();\n+          if (i \u003d\u003d 0) {\n+            // special case for Device name\n+            fields[i] \u003d tempFieldValue.substring(1, tempFieldValue.length() - 1);\n+          } else {\n+            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n+            fields[i] \u003d ss.substring(0, ss.length() - 1);\n+          }\n+        }\n+        String majorMinorNumber \u003d this.shell.getMajorAndMinorNumber(fields[0]);\n+        if (null !\u003d majorMinorNumber) {\n+          String[] mmn \u003d majorMinorNumber.split(\":\");\n+          this.aliasMap.put(majorMinorNumber, aliasName);\n+          list.add(new FpgaResourceAllocator.FpgaDevice(getFpgaType(),\n+              Integer.parseInt(mmn[0]),\n+              Integer.parseInt(mmn[1]), null,\n+              fields[0], aliasName, fields[1], fields[2], fields[3]));\n+        }\n+      }// end while\n+    }// end if\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void parseDiagnoseInfo(String output, List\u003cFpgaResourceAllocator.FpgaDevice\u003e list) {\n    if (output.contains(\"DIAGNOSTIC_PASSED\")) {\n      Matcher headerStartMatcher \u003d Pattern.compile(\"acl[0-31]\").matcher(output);\n      Matcher headerEndMatcher \u003d Pattern.compile(\"(?i)DIAGNOSTIC_PASSED\").matcher(output);\n      int sectionStartIndex;\n      int sectionEndIndex;\n      String aliasName;\n      while (headerStartMatcher.find()) {\n        sectionStartIndex \u003d headerStartMatcher.end();\n        String section \u003d null;\n        aliasName \u003d headerStartMatcher.group();\n        while (headerEndMatcher.find(sectionStartIndex)) {\n          sectionEndIndex \u003d headerEndMatcher.start();\n          section \u003d output.substring(sectionStartIndex, sectionEndIndex);\n          break;\n        }\n        if (null \u003d\u003d section) {\n          LOG.warn(\"Unsupported diagnose output\");\n          return;\n        }\n        // devName, \\(.*\\)\n        // busNum, bus:slot.func\\s\u003d\\s.*,\n        // FPGA temperature\\s\u003d\\s.*\n        // Total\\sCard\\sPower\\sUsage\\s\u003d\\s.*\n        String[] fieldRegexes \u003d new String[]{\"\\\\(.*\\\\)\\n\", \"(?i)bus:slot.func\\\\s\u003d\\\\s.*,\",\n            \"(?i)FPGA temperature\\\\s\u003d\\\\s.*\", \"(?i)Total\\\\sCard\\\\sPower\\\\sUsage\\\\s\u003d\\\\s.*\"};\n        String[] fields \u003d new String[4];\n        String tempFieldValue;\n        for (int i \u003d 0; i \u003c fieldRegexes.length; i++) {\n          Matcher fieldMatcher \u003d Pattern.compile(fieldRegexes[i]).matcher(section);\n          if (!fieldMatcher.find()) {\n            LOG.warn(\"Couldn\u0027t find \" + fieldRegexes[i] + \" pattern\");\n            fields[i] \u003d \"\";\n            continue;\n          }\n          tempFieldValue \u003d fieldMatcher.group().trim();\n          if (i \u003d\u003d 0) {\n            // special case for Device name\n            fields[i] \u003d tempFieldValue.substring(1, tempFieldValue.length() - 1);\n          } else {\n            String ss \u003d tempFieldValue.split(\"\u003d\")[1].trim();\n            fields[i] \u003d ss.substring(0, ss.length() - 1);\n          }\n        }\n        String majorMinorNumber \u003d this.shell.getMajorAndMinorNumber(fields[0]);\n        if (null !\u003d majorMinorNumber) {\n          String[] mmn \u003d majorMinorNumber.split(\":\");\n          this.aliasMap.put(majorMinorNumber, aliasName);\n          list.add(new FpgaResourceAllocator.FpgaDevice(getFpgaType(),\n              Integer.parseInt(mmn[0]),\n              Integer.parseInt(mmn[1]), null,\n              fields[0], aliasName, fields[1], fields[2], fields[3]));\n        }\n      }// end while\n    }// end if\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java"
    }
  }
}