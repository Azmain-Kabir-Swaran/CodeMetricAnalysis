{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StressJobFactory.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
  "functionStartLine": 155,
  "functionEndLine": 252,
  "numCommitsSeen": 8,
  "timeTaken": 4522,
  "changeHistory": [
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "8a2073cc61699f5692fcf638f4bae4d1c544870a",
    "5652e71992ad1590bf3ae3a79f1127b59ead3a61",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "8a2073cc61699f5692fcf638f4bae4d1c544870a": "Ybodychange",
    "5652e71992ad1590bf3ae3a79f1127b59ead3a61": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          LOG.warn(\"[STRESS] Interrupted before start!. Exiting..\");\n          return;\n        }\n        LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n        while (!Thread.currentThread().isInterrupted()) {\n          try {\n            while (loadStatus.overloaded()) {\n              // update the overload status\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Updating the overload status.\");\n              }\n              try {\n                checkLoadAndGetSlotsToBackfill();\n              } catch (IOException ioe) {\n                LOG.warn(\"[STRESS] Check failed!\", ioe);\n                return;\n              }\n              \n              // if the cluster is still overloaded, then sleep\n              if (loadStatus.overloaded()) {\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(\"[STRESS] Cluster overloaded in run! Sleeping...\");\n                }\n\n                // sleep \n                try {\n                  Thread.sleep(1000);\n                } catch (InterruptedException ie) {\n                  LOG.warn(\"[STRESS] Interrupted while sleeping! Exiting.\", ie);\n                  return;\n                }\n              }\n            }\n\n            while (!loadStatus.overloaded()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"[STRESS] Cluster underloaded in run! Stressing...\");\n              }\n              try {\n                //TODO This in-line read can block submission for large jobs.\n                final JobStory job \u003d getNextJobFiltered();\n                if (null \u003d\u003d job) {\n                  LOG.warn(\"[STRESS] Finished consuming the input trace. \" \n                           + \"Exiting..\");\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(\"Job Selected: \" + job.getJobID());\n                }\n                \n                UserGroupInformation ugi \u003d \n                  UserGroupInformation.createRemoteUser(job.getUser());\n                UserGroupInformation tgtUgi \u003d userResolver.getTargetUgi(ugi);\n                GridmixJob tJob \u003d \n                  jobCreator.createGridmixJob(conf, 0L, job, scratch, \n                               tgtUgi, sequence.getAndIncrement());\n                \n                // submit the job\n                submitter.add(tJob);\n                \n                // TODO: We need to take care of scenario when one map/reduce\n                // takes more than 1 slot.\n                \n                // Lock the loadjob as we are making updates\n                int incompleteMapTasks \u003d (int) calcEffectiveIncompleteMapTasks(\n                                                 loadStatus.getMapCapacity(), \n                                                 job.getNumberMaps(), 0.0f);\n                loadStatus.decrementMapLoad(incompleteMapTasks);\n                \n                int incompleteReduceTasks \u003d \n                  (int) calcEffectiveIncompleteReduceTasks(\n                          loadStatus.getReduceCapacity(), \n                          job.getNumberReduces(), 0.0f);\n                loadStatus.decrementReduceLoad(incompleteReduceTasks);\n                  \n                loadStatus.decrementJobLoad(1);\n              } catch (IOException e) {\n                LOG.error(\"[STRESS] Error while submitting the job \", e);\n                error \u003d e;\n                return;\n              }\n\n            }\n          } finally {\n            // do nothing\n          }\n        }\n      } catch (InterruptedException e) {\n        LOG.error(\"[STRESS] Interrupted in the main block!\", e);\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java"
      }
    },
    "8a2073cc61699f5692fcf638f4bae4d1c544870a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3787. [Gridmix] Optimize job monitoring and STRESS mode for faster job submission. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1292736 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/02/12 2:41 AM",
      "commitName": "8a2073cc61699f5692fcf638f4bae4d1c544870a",
      "commitAuthor": "Amar Kamat",
      "commitDateOld": "29/01/12 10:20 PM",
      "commitNameOld": "5652e71992ad1590bf3ae3a79f1127b59ead3a61",
      "commitAuthorOld": "Amar Kamat",
      "daysBetweenCommits": 24.18,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,98 @@\n     public void run() {\n       try {\n         startFlag.await();\n         if (Thread.currentThread().isInterrupted()) {\n+          LOG.warn(\"[STRESS] Interrupted before start!. Exiting..\");\n           return;\n         }\n         LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n         while (!Thread.currentThread().isInterrupted()) {\n           try {\n             while (loadStatus.overloaded()) {\n+              // update the overload status\n               if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Cluster overloaded in run! Sleeping...\");\n+                LOG.debug(\"Updating the overload status.\");\n               }\n-              // sleep \n               try {\n-                Thread.sleep(1000);\n-              } catch (InterruptedException ie) {\n+                checkLoadAndGetSlotsToBackfill();\n+              } catch (IOException ioe) {\n+                LOG.warn(\"[STRESS] Check failed!\", ioe);\n                 return;\n               }\n+              \n+              // if the cluster is still overloaded, then sleep\n+              if (loadStatus.overloaded()) {\n+                if (LOG.isDebugEnabled()) {\n+                  LOG.debug(\"[STRESS] Cluster overloaded in run! Sleeping...\");\n+                }\n+\n+                // sleep \n+                try {\n+                  Thread.sleep(1000);\n+                } catch (InterruptedException ie) {\n+                  LOG.warn(\"[STRESS] Interrupted while sleeping! Exiting.\", ie);\n+                  return;\n+                }\n+              }\n             }\n \n             while (!loadStatus.overloaded()) {\n               if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Cluster underloaded in run! Stressing...\");\n+                LOG.debug(\"[STRESS] Cluster underloaded in run! Stressing...\");\n               }\n               try {\n                 //TODO This in-line read can block submission for large jobs.\n                 final JobStory job \u003d getNextJobFiltered();\n                 if (null \u003d\u003d job) {\n+                  LOG.warn(\"[STRESS] Finished consuming the input trace. \" \n+                           + \"Exiting..\");\n                   return;\n                 }\n                 if (LOG.isDebugEnabled()) {\n                   LOG.debug(\"Job Selected: \" + job.getJobID());\n                 }\n-                submitter.add(\n-                  jobCreator.createGridmixJob(\n-                    conf, 0L, job, scratch, \n-                    userResolver.getTargetUgi(\n-                      UserGroupInformation.createRemoteUser(job.getUser())), \n-                    sequence.getAndIncrement()));\n+                \n+                UserGroupInformation ugi \u003d \n+                  UserGroupInformation.createRemoteUser(job.getUser());\n+                UserGroupInformation tgtUgi \u003d userResolver.getTargetUgi(ugi);\n+                GridmixJob tJob \u003d \n+                  jobCreator.createGridmixJob(conf, 0L, job, scratch, \n+                               tgtUgi, sequence.getAndIncrement());\n+                \n+                // submit the job\n+                submitter.add(tJob);\n+                \n                 // TODO: We need to take care of scenario when one map/reduce\n                 // takes more than 1 slot.\n                 \n                 // Lock the loadjob as we are making updates\n                 int incompleteMapTasks \u003d (int) calcEffectiveIncompleteMapTasks(\n                                                  loadStatus.getMapCapacity(), \n                                                  job.getNumberMaps(), 0.0f);\n                 loadStatus.decrementMapLoad(incompleteMapTasks);\n                 \n                 int incompleteReduceTasks \u003d \n                   (int) calcEffectiveIncompleteReduceTasks(\n                           loadStatus.getReduceCapacity(), \n                           job.getNumberReduces(), 0.0f);\n                 loadStatus.decrementReduceLoad(incompleteReduceTasks);\n                   \n                 loadStatus.decrementJobLoad(1);\n               } catch (IOException e) {\n-                LOG.error(\"Error while submitting the job \", e);\n+                LOG.error(\"[STRESS] Error while submitting the job \", e);\n                 error \u003d e;\n                 return;\n               }\n \n             }\n           } finally {\n             // do nothing\n           }\n         }\n       } catch (InterruptedException e) {\n+        LOG.error(\"[STRESS] Interrupted in the main block!\", e);\n         return;\n       } finally {\n         IOUtils.cleanup(null, jobProducer);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          LOG.warn(\"[STRESS] Interrupted before start!. Exiting..\");\n          return;\n        }\n        LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n        while (!Thread.currentThread().isInterrupted()) {\n          try {\n            while (loadStatus.overloaded()) {\n              // update the overload status\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Updating the overload status.\");\n              }\n              try {\n                checkLoadAndGetSlotsToBackfill();\n              } catch (IOException ioe) {\n                LOG.warn(\"[STRESS] Check failed!\", ioe);\n                return;\n              }\n              \n              // if the cluster is still overloaded, then sleep\n              if (loadStatus.overloaded()) {\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(\"[STRESS] Cluster overloaded in run! Sleeping...\");\n                }\n\n                // sleep \n                try {\n                  Thread.sleep(1000);\n                } catch (InterruptedException ie) {\n                  LOG.warn(\"[STRESS] Interrupted while sleeping! Exiting.\", ie);\n                  return;\n                }\n              }\n            }\n\n            while (!loadStatus.overloaded()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"[STRESS] Cluster underloaded in run! Stressing...\");\n              }\n              try {\n                //TODO This in-line read can block submission for large jobs.\n                final JobStory job \u003d getNextJobFiltered();\n                if (null \u003d\u003d job) {\n                  LOG.warn(\"[STRESS] Finished consuming the input trace. \" \n                           + \"Exiting..\");\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(\"Job Selected: \" + job.getJobID());\n                }\n                \n                UserGroupInformation ugi \u003d \n                  UserGroupInformation.createRemoteUser(job.getUser());\n                UserGroupInformation tgtUgi \u003d userResolver.getTargetUgi(ugi);\n                GridmixJob tJob \u003d \n                  jobCreator.createGridmixJob(conf, 0L, job, scratch, \n                               tgtUgi, sequence.getAndIncrement());\n                \n                // submit the job\n                submitter.add(tJob);\n                \n                // TODO: We need to take care of scenario when one map/reduce\n                // takes more than 1 slot.\n                \n                // Lock the loadjob as we are making updates\n                int incompleteMapTasks \u003d (int) calcEffectiveIncompleteMapTasks(\n                                                 loadStatus.getMapCapacity(), \n                                                 job.getNumberMaps(), 0.0f);\n                loadStatus.decrementMapLoad(incompleteMapTasks);\n                \n                int incompleteReduceTasks \u003d \n                  (int) calcEffectiveIncompleteReduceTasks(\n                          loadStatus.getReduceCapacity(), \n                          job.getNumberReduces(), 0.0f);\n                loadStatus.decrementReduceLoad(incompleteReduceTasks);\n                  \n                loadStatus.decrementJobLoad(1);\n              } catch (IOException e) {\n                LOG.error(\"[STRESS] Error while submitting the job \", e);\n                error \u003d e;\n                return;\n              }\n\n            }\n          } finally {\n            // do nothing\n          }\n        }\n      } catch (InterruptedException e) {\n        LOG.error(\"[STRESS] Interrupted in the main block!\", e);\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
      "extendedDetails": {}
    },
    "5652e71992ad1590bf3ae3a79f1127b59ead3a61": {
      "type": "Ybodychange",
      "commitMessage": " MAPREDUCE-3481. [Gridmix] Improve Gridmix STRESS mode. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1237543 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/12 10:20 PM",
      "commitName": "5652e71992ad1590bf3ae3a79f1127b59ead3a61",
      "commitAuthor": "Amar Kamat",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 158.25,
      "commitsBetweenForRepo": 973,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,73 @@\n     public void run() {\n       try {\n         startFlag.await();\n         if (Thread.currentThread().isInterrupted()) {\n           return;\n         }\n         LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n         while (!Thread.currentThread().isInterrupted()) {\n-          lock.lock();\n           try {\n             while (loadStatus.overloaded()) {\n-              //Wait while JT is overloaded.\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Cluster overloaded in run! Sleeping...\");\n+              }\n+              // sleep \n               try {\n-                condUnderloaded.await();\n+                Thread.sleep(1000);\n               } catch (InterruptedException ie) {\n                 return;\n               }\n             }\n \n             while (!loadStatus.overloaded()) {\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Cluster underloaded in run! Stressing...\");\n+              }\n               try {\n+                //TODO This in-line read can block submission for large jobs.\n                 final JobStory job \u003d getNextJobFiltered();\n                 if (null \u003d\u003d job) {\n                   return;\n                 }\n+                if (LOG.isDebugEnabled()) {\n+                  LOG.debug(\"Job Selected: \" + job.getJobID());\n+                }\n                 submitter.add(\n                   jobCreator.createGridmixJob(\n                     conf, 0L, job, scratch, \n                     userResolver.getTargetUgi(\n                       UserGroupInformation.createRemoteUser(job.getUser())), \n                     sequence.getAndIncrement()));\n                 // TODO: We need to take care of scenario when one map/reduce\n                 // takes more than 1 slot.\n-                loadStatus.mapSlotsBackfill -\u003d \n-                  calcEffectiveIncompleteMapTasks(\n-                    loadStatus.mapSlotCapacity, job.getNumberMaps(), 0.0f);\n-                loadStatus.reduceSlotsBackfill -\u003d \n-                  calcEffectiveIncompleteReduceTasks(\n-                    loadStatus.reduceSlotCapacity, job.getNumberReduces(), \n-                    0.0f);\n-                --loadStatus.numJobsBackfill;\n+                \n+                // Lock the loadjob as we are making updates\n+                int incompleteMapTasks \u003d (int) calcEffectiveIncompleteMapTasks(\n+                                                 loadStatus.getMapCapacity(), \n+                                                 job.getNumberMaps(), 0.0f);\n+                loadStatus.decrementMapLoad(incompleteMapTasks);\n+                \n+                int incompleteReduceTasks \u003d \n+                  (int) calcEffectiveIncompleteReduceTasks(\n+                          loadStatus.getReduceCapacity(), \n+                          job.getNumberReduces(), 0.0f);\n+                loadStatus.decrementReduceLoad(incompleteReduceTasks);\n+                  \n+                loadStatus.decrementJobLoad(1);\n               } catch (IOException e) {\n                 LOG.error(\"Error while submitting the job \", e);\n                 error \u003d e;\n                 return;\n               }\n \n             }\n           } finally {\n-            lock.unlock();\n+            // do nothing\n           }\n         }\n       } catch (InterruptedException e) {\n         return;\n       } finally {\n         IOUtils.cleanup(null, jobProducer);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n        while (!Thread.currentThread().isInterrupted()) {\n          try {\n            while (loadStatus.overloaded()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Cluster overloaded in run! Sleeping...\");\n              }\n              // sleep \n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException ie) {\n                return;\n              }\n            }\n\n            while (!loadStatus.overloaded()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Cluster underloaded in run! Stressing...\");\n              }\n              try {\n                //TODO This in-line read can block submission for large jobs.\n                final JobStory job \u003d getNextJobFiltered();\n                if (null \u003d\u003d job) {\n                  return;\n                }\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(\"Job Selected: \" + job.getJobID());\n                }\n                submitter.add(\n                  jobCreator.createGridmixJob(\n                    conf, 0L, job, scratch, \n                    userResolver.getTargetUgi(\n                      UserGroupInformation.createRemoteUser(job.getUser())), \n                    sequence.getAndIncrement()));\n                // TODO: We need to take care of scenario when one map/reduce\n                // takes more than 1 slot.\n                \n                // Lock the loadjob as we are making updates\n                int incompleteMapTasks \u003d (int) calcEffectiveIncompleteMapTasks(\n                                                 loadStatus.getMapCapacity(), \n                                                 job.getNumberMaps(), 0.0f);\n                loadStatus.decrementMapLoad(incompleteMapTasks);\n                \n                int incompleteReduceTasks \u003d \n                  (int) calcEffectiveIncompleteReduceTasks(\n                          loadStatus.getReduceCapacity(), \n                          job.getNumberReduces(), 0.0f);\n                loadStatus.decrementReduceLoad(incompleteReduceTasks);\n                  \n                loadStatus.decrementJobLoad(1);\n              } catch (IOException e) {\n                LOG.error(\"Error while submitting the job \", e);\n                error \u003d e;\n                return;\n              }\n\n            }\n          } finally {\n            // do nothing\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n        while (!Thread.currentThread().isInterrupted()) {\n          lock.lock();\n          try {\n            while (loadStatus.overloaded()) {\n              //Wait while JT is overloaded.\n              try {\n                condUnderloaded.await();\n              } catch (InterruptedException ie) {\n                return;\n              }\n            }\n\n            while (!loadStatus.overloaded()) {\n              try {\n                final JobStory job \u003d getNextJobFiltered();\n                if (null \u003d\u003d job) {\n                  return;\n                }\n                submitter.add(\n                  jobCreator.createGridmixJob(\n                    conf, 0L, job, scratch, \n                    userResolver.getTargetUgi(\n                      UserGroupInformation.createRemoteUser(job.getUser())), \n                    sequence.getAndIncrement()));\n                // TODO: We need to take care of scenario when one map/reduce\n                // takes more than 1 slot.\n                loadStatus.mapSlotsBackfill -\u003d \n                  calcEffectiveIncompleteMapTasks(\n                    loadStatus.mapSlotCapacity, job.getNumberMaps(), 0.0f);\n                loadStatus.reduceSlotsBackfill -\u003d \n                  calcEffectiveIncompleteReduceTasks(\n                    loadStatus.reduceSlotCapacity, job.getNumberReduces(), \n                    0.0f);\n                --loadStatus.numJobsBackfill;\n              } catch (IOException e) {\n                LOG.error(\"Error while submitting the job \", e);\n                error \u003d e;\n                return;\n              }\n\n            }\n          } finally {\n            lock.unlock();\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n        while (!Thread.currentThread().isInterrupted()) {\n          lock.lock();\n          try {\n            while (loadStatus.overloaded()) {\n              //Wait while JT is overloaded.\n              try {\n                condUnderloaded.await();\n              } catch (InterruptedException ie) {\n                return;\n              }\n            }\n\n            while (!loadStatus.overloaded()) {\n              try {\n                final JobStory job \u003d getNextJobFiltered();\n                if (null \u003d\u003d job) {\n                  return;\n                }\n                submitter.add(\n                  jobCreator.createGridmixJob(\n                    conf, 0L, job, scratch, \n                    userResolver.getTargetUgi(\n                      UserGroupInformation.createRemoteUser(job.getUser())), \n                    sequence.getAndIncrement()));\n                // TODO: We need to take care of scenario when one map/reduce\n                // takes more than 1 slot.\n                loadStatus.mapSlotsBackfill -\u003d \n                  calcEffectiveIncompleteMapTasks(\n                    loadStatus.mapSlotCapacity, job.getNumberMaps(), 0.0f);\n                loadStatus.reduceSlotsBackfill -\u003d \n                  calcEffectiveIncompleteReduceTasks(\n                    loadStatus.reduceSlotCapacity, job.getNumberReduces(), \n                    0.0f);\n                --loadStatus.numJobsBackfill;\n              } catch (IOException e) {\n                LOG.error(\"Error while submitting the job \", e);\n                error \u003d e;\n                return;\n              }\n\n            }\n          } finally {\n            lock.unlock();\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,58 @@\n+    public void run() {\n+      try {\n+        startFlag.await();\n+        if (Thread.currentThread().isInterrupted()) {\n+          return;\n+        }\n+        LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n+        while (!Thread.currentThread().isInterrupted()) {\n+          lock.lock();\n+          try {\n+            while (loadStatus.overloaded()) {\n+              //Wait while JT is overloaded.\n+              try {\n+                condUnderloaded.await();\n+              } catch (InterruptedException ie) {\n+                return;\n+              }\n+            }\n+\n+            while (!loadStatus.overloaded()) {\n+              try {\n+                final JobStory job \u003d getNextJobFiltered();\n+                if (null \u003d\u003d job) {\n+                  return;\n+                }\n+                submitter.add(\n+                  jobCreator.createGridmixJob(\n+                    conf, 0L, job, scratch, \n+                    userResolver.getTargetUgi(\n+                      UserGroupInformation.createRemoteUser(job.getUser())), \n+                    sequence.getAndIncrement()));\n+                // TODO: We need to take care of scenario when one map/reduce\n+                // takes more than 1 slot.\n+                loadStatus.mapSlotsBackfill -\u003d \n+                  calcEffectiveIncompleteMapTasks(\n+                    loadStatus.mapSlotCapacity, job.getNumberMaps(), 0.0f);\n+                loadStatus.reduceSlotsBackfill -\u003d \n+                  calcEffectiveIncompleteReduceTasks(\n+                    loadStatus.reduceSlotCapacity, job.getNumberReduces(), \n+                    0.0f);\n+                --loadStatus.numJobsBackfill;\n+              } catch (IOException e) {\n+                LOG.error(\"Error while submitting the job \", e);\n+                error \u003d e;\n+                return;\n+              }\n+\n+            }\n+          } finally {\n+            lock.unlock();\n+          }\n+        }\n+      } catch (InterruptedException e) {\n+        return;\n+      } finally {\n+        IOUtils.cleanup(null, jobProducer);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        startFlag.await();\n        if (Thread.currentThread().isInterrupted()) {\n          return;\n        }\n        LOG.info(\"START STRESS @ \" + System.currentTimeMillis());\n        while (!Thread.currentThread().isInterrupted()) {\n          lock.lock();\n          try {\n            while (loadStatus.overloaded()) {\n              //Wait while JT is overloaded.\n              try {\n                condUnderloaded.await();\n              } catch (InterruptedException ie) {\n                return;\n              }\n            }\n\n            while (!loadStatus.overloaded()) {\n              try {\n                final JobStory job \u003d getNextJobFiltered();\n                if (null \u003d\u003d job) {\n                  return;\n                }\n                submitter.add(\n                  jobCreator.createGridmixJob(\n                    conf, 0L, job, scratch, \n                    userResolver.getTargetUgi(\n                      UserGroupInformation.createRemoteUser(job.getUser())), \n                    sequence.getAndIncrement()));\n                // TODO: We need to take care of scenario when one map/reduce\n                // takes more than 1 slot.\n                loadStatus.mapSlotsBackfill -\u003d \n                  calcEffectiveIncompleteMapTasks(\n                    loadStatus.mapSlotCapacity, job.getNumberMaps(), 0.0f);\n                loadStatus.reduceSlotsBackfill -\u003d \n                  calcEffectiveIncompleteReduceTasks(\n                    loadStatus.reduceSlotCapacity, job.getNumberReduces(), \n                    0.0f);\n                --loadStatus.numJobsBackfill;\n              } catch (IOException e) {\n                LOG.error(\"Error while submitting the job \", e);\n                error \u003d e;\n                return;\n              }\n\n            }\n          } finally {\n            lock.unlock();\n          }\n        }\n      } catch (InterruptedException e) {\n        return;\n      } finally {\n        IOUtils.cleanup(null, jobProducer);\n      }\n    }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/StressJobFactory.java"
    }
  }
}