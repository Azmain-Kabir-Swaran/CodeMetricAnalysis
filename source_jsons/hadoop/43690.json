{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CoreFileSystem.java",
  "functionName": "createAmResource",
  "functionId": "createAmResource___destPath-Path__resourceType-LocalResourceType__visibility-LocalResourceVisibility",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
  "functionStartLine": 387,
  "functionEndLine": 410,
  "numCommitsSeen": 21,
  "timeTaken": 5264,
  "changeHistory": [
    "31e0122f4d4ddc4026470b45d2bf683ece137d44",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec"
  ],
  "changeHistoryShort": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": "Ymultichange(Yparameterchange,Ybodychange)",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymultichange(Ymovefromfile,Ybodychange)",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
      "commitDate": "10/10/19 4:02 PM",
      "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
          "commitDate": "10/10/19 4:02 PM",
          "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "25/02/19 11:45 AM",
          "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 227.14,
          "commitsBetweenForRepo": 1791,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n+  public LocalResource createAmResource(Path destPath,\n+      LocalResourceType resourceType,\n+      LocalResourceVisibility visibility) throws IOException {\n+\n     FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n     LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n     amResource.setType(resourceType);\n     // Set visibility of the resource\n     // Setting to most private option\n-    amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n+    if (visibility \u003d\u003d null) {\n+      visibility \u003d LocalResourceVisibility.APPLICATION;\n+    }\n+    amResource.setVisibility(visibility);\n     // Set the resource to be copied over\n     amResource.setResource(\n         URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n     // Set timestamp and length of file so that the framework\n     // can do basic sanity checks for the local resource\n     // after it has been copied over to ensure it is the same\n     // resource the client intended to use with the service\n     amResource.setTimestamp(destStatus.getModificationTime());\n     amResource.setSize(destStatus.getLen());\n     return amResource;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocalResource createAmResource(Path destPath,\n      LocalResourceType resourceType,\n      LocalResourceVisibility visibility) throws IOException {\n\n    FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n    LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n    amResource.setType(resourceType);\n    // Set visibility of the resource\n    // Setting to most private option\n    if (visibility \u003d\u003d null) {\n      visibility \u003d LocalResourceVisibility.APPLICATION;\n    }\n    amResource.setVisibility(visibility);\n    // Set the resource to be copied over\n    amResource.setResource(\n        URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n    // Set timestamp and length of file so that the framework\n    // can do basic sanity checks for the local resource\n    // after it has been copied over to ensure it is the same\n    // resource the client intended to use with the service\n    amResource.setTimestamp(destStatus.getModificationTime());\n    amResource.setSize(destStatus.getLen());\n    return amResource;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
          "extendedDetails": {
            "oldValue": "[destPath-Path, resourceType-LocalResourceType]",
            "newValue": "[destPath-Path, resourceType-LocalResourceType, visibility-LocalResourceVisibility]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
          "commitDate": "10/10/19 4:02 PM",
          "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "25/02/19 11:45 AM",
          "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 227.14,
          "commitsBetweenForRepo": 1791,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n+  public LocalResource createAmResource(Path destPath,\n+      LocalResourceType resourceType,\n+      LocalResourceVisibility visibility) throws IOException {\n+\n     FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n     LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n     amResource.setType(resourceType);\n     // Set visibility of the resource\n     // Setting to most private option\n-    amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n+    if (visibility \u003d\u003d null) {\n+      visibility \u003d LocalResourceVisibility.APPLICATION;\n+    }\n+    amResource.setVisibility(visibility);\n     // Set the resource to be copied over\n     amResource.setResource(\n         URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n     // Set timestamp and length of file so that the framework\n     // can do basic sanity checks for the local resource\n     // after it has been copied over to ensure it is the same\n     // resource the client intended to use with the service\n     amResource.setTimestamp(destStatus.getModificationTime());\n     amResource.setSize(destStatus.getLen());\n     return amResource;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocalResource createAmResource(Path destPath,\n      LocalResourceType resourceType,\n      LocalResourceVisibility visibility) throws IOException {\n\n    FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n    LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n    amResource.setType(resourceType);\n    // Set visibility of the resource\n    // Setting to most private option\n    if (visibility \u003d\u003d null) {\n      visibility \u003d LocalResourceVisibility.APPLICATION;\n    }\n    amResource.setVisibility(visibility);\n    // Set the resource to be copied over\n    amResource.setResource(\n        URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n    // Set timestamp and length of file so that the framework\n    // can do basic sanity checks for the local resource\n    // after it has been copied over to ensure it is the same\n    // resource the client intended to use with the service\n    amResource.setTimestamp(destStatus.getModificationTime());\n    amResource.setSize(destStatus.getLen());\n    return amResource;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n     FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n     LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n     amResource.setType(resourceType);\n     // Set visibility of the resource\n     // Setting to most private option\n     amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n     // Set the resource to be copied over\n     amResource.setResource(\n         URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n     // Set timestamp and length of file so that the framework\n     // can do basic sanity checks for the local resource\n     // after it has been copied over to ensure it is the same\n-    // resource the client intended to use with the application\n+    // resource the client intended to use with the service\n     amResource.setTimestamp(destStatus.getModificationTime());\n     amResource.setSize(destStatus.getLen());\n     return amResource;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n    FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n    LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n    amResource.setType(resourceType);\n    // Set visibility of the resource\n    // Setting to most private option\n    amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n    // Set the resource to be copied over\n    amResource.setResource(\n        URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n    // Set timestamp and length of file so that the framework\n    // can do basic sanity checks for the local resource\n    // after it has been copied over to ensure it is the same\n    // resource the client intended to use with the service\n    amResource.setTimestamp(destStatus.getModificationTime());\n    amResource.setSize(destStatus.getLen());\n    return amResource;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n     FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n     LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n     amResource.setType(resourceType);\n     // Set visibility of the resource\n     // Setting to most private option\n     amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n     // Set the resource to be copied over\n     amResource.setResource(\n         URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n     // Set timestamp and length of file so that the framework\n     // can do basic sanity checks for the local resource\n     // after it has been copied over to ensure it is the same\n-    // resource the client intended to use with the application\n+    // resource the client intended to use with the service\n     amResource.setTimestamp(destStatus.getModificationTime());\n     amResource.setSize(destStatus.getLen());\n     return amResource;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n    FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n    LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n    amResource.setType(resourceType);\n    // Set visibility of the resource\n    // Setting to most private option\n    amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n    // Set the resource to be copied over\n    amResource.setResource(\n        URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n    // Set timestamp and length of file so that the framework\n    // can do basic sanity checks for the local resource\n    // after it has been copied over to ensure it is the same\n    // resource the client intended to use with the service\n    amResource.setTimestamp(destStatus.getModificationTime());\n    amResource.setSize(destStatus.getLen());\n    return amResource;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n     FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n     LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n     amResource.setType(resourceType);\n     // Set visibility of the resource\n     // Setting to most private option\n     amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n     // Set the resource to be copied over\n-    amResource.setResource(ConverterUtils.getYarnUrlFromPath(fileSystem\n-        .resolvePath(destStatus.getPath())));\n+    amResource.setResource(\n+        URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n     // Set timestamp and length of file so that the framework\n     // can do basic sanity checks for the local resource\n     // after it has been copied over to ensure it is the same\n     // resource the client intended to use with the application\n     amResource.setTimestamp(destStatus.getModificationTime());\n     amResource.setSize(destStatus.getLen());\n     return amResource;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n    FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n    LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n    amResource.setType(resourceType);\n    // Set visibility of the resource\n    // Setting to most private option\n    amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n    // Set the resource to be copied over\n    amResource.setResource(\n        URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n    // Set timestamp and length of file so that the framework\n    // can do basic sanity checks for the local resource\n    // after it has been copied over to ensure it is the same\n    // resource the client intended to use with the application\n    amResource.setTimestamp(destStatus.getModificationTime());\n    amResource.setSize(destStatus.getLen());\n    return amResource;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/CoreFileSystem.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
            "oldMethodName": "createAmResource",
            "newMethodName": "createAmResource"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n     FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n     LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n     amResource.setType(resourceType);\n     // Set visibility of the resource\n     // Setting to most private option\n     amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n     // Set the resource to be copied over\n-    amResource.setResource(ConverterUtils.getYarnUrlFromPath(fileSystem\n-        .resolvePath(destStatus.getPath())));\n+    amResource.setResource(\n+        URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n     // Set timestamp and length of file so that the framework\n     // can do basic sanity checks for the local resource\n     // after it has been copied over to ensure it is the same\n     // resource the client intended to use with the application\n     amResource.setTimestamp(destStatus.getModificationTime());\n     amResource.setSize(destStatus.getLen());\n     return amResource;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n    FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n    LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n    amResource.setType(resourceType);\n    // Set visibility of the resource\n    // Setting to most private option\n    amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n    // Set the resource to be copied over\n    amResource.setResource(\n        URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\n    // Set timestamp and length of file so that the framework\n    // can do basic sanity checks for the local resource\n    // after it has been copied over to ensure it is the same\n    // resource the client intended to use with the application\n    amResource.setTimestamp(destStatus.getModificationTime());\n    amResource.setSize(destStatus.getLen());\n    return amResource;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/CoreFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5461. Initial code ported from slider-core module. (jianhe)\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,18 @@\n+  public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n+    FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n+    LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n+    amResource.setType(resourceType);\n+    // Set visibility of the resource\n+    // Setting to most private option\n+    amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n+    // Set the resource to be copied over\n+    amResource.setResource(ConverterUtils.getYarnUrlFromPath(fileSystem\n+        .resolvePath(destStatus.getPath())));\n+    // Set timestamp and length of file so that the framework\n+    // can do basic sanity checks for the local resource\n+    // after it has been copied over to ensure it is the same\n+    // resource the client intended to use with the application\n+    amResource.setTimestamp(destStatus.getModificationTime());\n+    amResource.setSize(destStatus.getLen());\n+    return amResource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public LocalResource createAmResource(Path destPath, LocalResourceType resourceType) throws IOException {\n    FileStatus destStatus \u003d fileSystem.getFileStatus(destPath);\n    LocalResource amResource \u003d Records.newRecord(LocalResource.class);\n    amResource.setType(resourceType);\n    // Set visibility of the resource\n    // Setting to most private option\n    amResource.setVisibility(LocalResourceVisibility.APPLICATION);\n    // Set the resource to be copied over\n    amResource.setResource(ConverterUtils.getYarnUrlFromPath(fileSystem\n        .resolvePath(destStatus.getPath())));\n    // Set timestamp and length of file so that the framework\n    // can do basic sanity checks for the local resource\n    // after it has been copied over to ensure it is the same\n    // resource the client intended to use with the application\n    amResource.setTimestamp(destStatus.getModificationTime());\n    amResource.setSize(destStatus.getLen());\n    return amResource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/CoreFileSystem.java"
    }
  }
}