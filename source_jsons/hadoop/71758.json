{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MiniKdc.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
  "functionStartLine": 78,
  "functionEndLine": 141,
  "numCommitsSeen": 16,
  "timeTaken": 1178,
  "changeHistory": [
    "770b5eb2db686275df445be9280e76cc3710ffdc",
    "bfc9c4b5a567a9f2efc185a7f25e17edd536101b",
    "b7428fe63d80ce150a964fae427f13c161f39164",
    "bc2a4434183e833c4f74ff91583747be5033a1be",
    "1d1ab587e4e92ce3aea4cb144811f69145cb3b33"
  ],
  "changeHistoryShort": {
    "770b5eb2db686275df445be9280e76cc3710ffdc": "Ybodychange",
    "bfc9c4b5a567a9f2efc185a7f25e17edd536101b": "Ybodychange",
    "b7428fe63d80ce150a964fae427f13c161f39164": "Ybodychange",
    "bc2a4434183e833c4f74ff91583747be5033a1be": "Ybodychange",
    "1d1ab587e4e92ce3aea4cb144811f69145cb3b33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "770b5eb2db686275df445be9280e76cc3710ffdc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13444. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "01/08/16 1:35 AM",
      "commitName": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "16/06/16 3:22 PM",
      "commitNameOld": "b1674caa409ca2c616207acb72aeb2767d28b10c",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 45.43,
      "commitsBetweenForRepo": 419,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   public static void main(String[] args) throws Exception {\n     if (args.length \u003c 4) {\n       System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n               \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n       System.exit(1);\n     }\n     File workDir \u003d new File(args[0]);\n     if (!workDir.exists()) {\n       throw new RuntimeException(\"Specified work directory does not exists: \"\n               + workDir.getAbsolutePath());\n     }\n     Properties conf \u003d createConf();\n     File file \u003d new File(args[1]);\n     if (!file.exists()) {\n       throw new RuntimeException(\"Specified configuration does not exists: \"\n               + file.getAbsolutePath());\n     }\n     Properties userConf \u003d new Properties();\n     InputStreamReader r \u003d null;\n     try {\n-      r \u003d new InputStreamReader(new FileInputStream(file), Charsets.UTF_8);\n+      r \u003d new InputStreamReader(new FileInputStream(file),\n+          StandardCharsets.UTF_8);\n       userConf.load(r);\n     } finally {\n       if (r !\u003d null) {\n         r.close();\n       }\n     }\n     for (Map.Entry\u003c?, ?\u003e entry : userConf.entrySet()) {\n       conf.put(entry.getKey(), entry.getValue());\n     }\n     final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n     miniKdc.start();\n     File krb5conf \u003d new File(workDir, \"krb5.conf\");\n     if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n       File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n       String[] principals \u003d new String[args.length - 3];\n       System.arraycopy(args, 3, principals, 0, args.length - 3);\n       miniKdc.createPrincipal(keytabFile, principals);\n       System.out.println();\n       System.out.println(\"Standalone MiniKdc Running\");\n       System.out.println(\"---------------------------------------------------\");\n       System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n       System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n               miniKdc.getHost());\n       System.out.println(\"  krb5conf        : \" + krb5conf);\n       System.out.println();\n       System.out.println(\"  created keytab  : \" + keytabFile);\n       System.out.println(\"  with principals : \" + Arrays.asList(principals));\n       System.out.println();\n       System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n       System.out.println(\"---------------------------------------------------\");\n       System.out.println();\n       Runtime.getRuntime().addShutdownHook(new Thread() {\n         @Override\n         public void run() {\n           miniKdc.stop();\n         }\n       });\n     } else {\n       throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n               + krb5conf.getAbsolutePath());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    if (args.length \u003c 4) {\n      System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n              \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n      System.exit(1);\n    }\n    File workDir \u003d new File(args[0]);\n    if (!workDir.exists()) {\n      throw new RuntimeException(\"Specified work directory does not exists: \"\n              + workDir.getAbsolutePath());\n    }\n    Properties conf \u003d createConf();\n    File file \u003d new File(args[1]);\n    if (!file.exists()) {\n      throw new RuntimeException(\"Specified configuration does not exists: \"\n              + file.getAbsolutePath());\n    }\n    Properties userConf \u003d new Properties();\n    InputStreamReader r \u003d null;\n    try {\n      r \u003d new InputStreamReader(new FileInputStream(file),\n          StandardCharsets.UTF_8);\n      userConf.load(r);\n    } finally {\n      if (r !\u003d null) {\n        r.close();\n      }\n    }\n    for (Map.Entry\u003c?, ?\u003e entry : userConf.entrySet()) {\n      conf.put(entry.getKey(), entry.getValue());\n    }\n    final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n    miniKdc.start();\n    File krb5conf \u003d new File(workDir, \"krb5.conf\");\n    if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n      File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n      String[] principals \u003d new String[args.length - 3];\n      System.arraycopy(args, 3, principals, 0, args.length - 3);\n      miniKdc.createPrincipal(keytabFile, principals);\n      System.out.println();\n      System.out.println(\"Standalone MiniKdc Running\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n      System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n              miniKdc.getHost());\n      System.out.println(\"  krb5conf        : \" + krb5conf);\n      System.out.println();\n      System.out.println(\"  created keytab  : \" + keytabFile);\n      System.out.println(\"  with principals : \" + Arrays.asList(principals));\n      System.out.println();\n      System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println();\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n          miniKdc.stop();\n        }\n      });\n    } else {\n      throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n              + krb5conf.getAbsolutePath());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
      "extendedDetails": {}
    },
    "bfc9c4b5a567a9f2efc185a7f25e17edd536101b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10479. Fix new findbugs warnings in hadoop-minikdc. Contributed by Swarnim Kulkarni.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604292 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/06/14 3:23 PM",
      "commitName": "bfc9c4b5a567a9f2efc185a7f25e17edd536101b",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "06/05/14 9:50 AM",
      "commitNameOld": "0ba580e9e3d91f7402ac4cd4872a10627997eda8",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 45.23,
      "commitsBetweenForRepo": 279,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   public static void main(String[] args) throws  Exception {\n     if (args.length \u003c 4) {\n       System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n               \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n       System.exit(1);\n     }\n     File workDir \u003d new File(args[0]);\n     if (!workDir.exists()) {\n       throw new RuntimeException(\"Specified work directory does not exists: \"\n               + workDir.getAbsolutePath());\n     }\n     Properties conf \u003d createConf();\n     File file \u003d new File(args[1]);\n     if (!file.exists()) {\n       throw new RuntimeException(\"Specified configuration does not exists: \"\n               + file.getAbsolutePath());\n     }\n     Properties userConf \u003d new Properties();\n-    FileReader r \u003d null;\n+    InputStreamReader r \u003d null;\n     try {\n-      r \u003d new FileReader(file);\n+      r \u003d new InputStreamReader(new FileInputStream(file), Charsets.UTF_8);\n       userConf.load(r);\n     } finally {\n       if (r !\u003d null) {\n         r.close();\n       }\n     }\n     for (Map.Entry\u003c?, ?\u003e entry : userConf.entrySet()) {\n       conf.put(entry.getKey(), entry.getValue());\n     }\n     final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n     miniKdc.start();\n     File krb5conf \u003d new File(workDir, \"krb5.conf\");\n     if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n       File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n       String[] principals \u003d new String[args.length - 3];\n       System.arraycopy(args, 3, principals, 0, args.length - 3);\n       miniKdc.createPrincipal(keytabFile, principals);\n       System.out.println();\n       System.out.println(\"Standalone MiniKdc Running\");\n       System.out.println(\"---------------------------------------------------\");\n       System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n       System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n               miniKdc.getHost());\n       System.out.println(\"  krb5conf        : \" + krb5conf);\n       System.out.println();\n       System.out.println(\"  created keytab  : \" + keytabFile);\n       System.out.println(\"  with principals : \" + Arrays.asList(principals));\n       System.out.println();\n       System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n       System.out.println(\"---------------------------------------------------\");\n       System.out.println();\n       Runtime.getRuntime().addShutdownHook(new Thread() {\n         @Override\n         public void run() {\n           miniKdc.stop();\n         }\n       });\n     } else {\n       throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n               + krb5conf.getAbsolutePath());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws  Exception {\n    if (args.length \u003c 4) {\n      System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n              \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n      System.exit(1);\n    }\n    File workDir \u003d new File(args[0]);\n    if (!workDir.exists()) {\n      throw new RuntimeException(\"Specified work directory does not exists: \"\n              + workDir.getAbsolutePath());\n    }\n    Properties conf \u003d createConf();\n    File file \u003d new File(args[1]);\n    if (!file.exists()) {\n      throw new RuntimeException(\"Specified configuration does not exists: \"\n              + file.getAbsolutePath());\n    }\n    Properties userConf \u003d new Properties();\n    InputStreamReader r \u003d null;\n    try {\n      r \u003d new InputStreamReader(new FileInputStream(file), Charsets.UTF_8);\n      userConf.load(r);\n    } finally {\n      if (r !\u003d null) {\n        r.close();\n      }\n    }\n    for (Map.Entry\u003c?, ?\u003e entry : userConf.entrySet()) {\n      conf.put(entry.getKey(), entry.getValue());\n    }\n    final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n    miniKdc.start();\n    File krb5conf \u003d new File(workDir, \"krb5.conf\");\n    if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n      File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n      String[] principals \u003d new String[args.length - 3];\n      System.arraycopy(args, 3, principals, 0, args.length - 3);\n      miniKdc.createPrincipal(keytabFile, principals);\n      System.out.println();\n      System.out.println(\"Standalone MiniKdc Running\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n      System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n              miniKdc.getHost());\n      System.out.println(\"  krb5conf        : \" + krb5conf);\n      System.out.println();\n      System.out.println(\"  created keytab  : \" + keytabFile);\n      System.out.println(\"  with principals : \" + Arrays.asList(principals));\n      System.out.println();\n      System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println();\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n          miniKdc.stop();\n        }\n      });\n    } else {\n      throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n              + krb5conf.getAbsolutePath());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
      "extendedDetails": {}
    },
    "b7428fe63d80ce150a964fae427f13c161f39164": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10393. Fix the javac warnings in hadoop-auth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575470 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/14 6:16 PM",
      "commitName": "b7428fe63d80ce150a964fae427f13c161f39164",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/01/14 3:24 PM",
      "commitNameOld": "bc2a4434183e833c4f74ff91583747be5033a1be",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 54.12,
      "commitsBetweenForRepo": 479,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   public static void main(String[] args) throws  Exception {\n     if (args.length \u003c 4) {\n       System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n               \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n       System.exit(1);\n     }\n     File workDir \u003d new File(args[0]);\n     if (!workDir.exists()) {\n       throw new RuntimeException(\"Specified work directory does not exists: \"\n               + workDir.getAbsolutePath());\n     }\n     Properties conf \u003d createConf();\n     File file \u003d new File(args[1]);\n     if (!file.exists()) {\n       throw new RuntimeException(\"Specified configuration does not exists: \"\n               + file.getAbsolutePath());\n     }\n     Properties userConf \u003d new Properties();\n     FileReader r \u003d null;\n     try {\n       r \u003d new FileReader(file);\n       userConf.load(r);\n     } finally {\n       if (r !\u003d null) {\n         r.close();\n       }\n     }\n-    for (Map.Entry entry : userConf.entrySet()) {\n+    for (Map.Entry\u003c?, ?\u003e entry : userConf.entrySet()) {\n       conf.put(entry.getKey(), entry.getValue());\n     }\n     final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n     miniKdc.start();\n     File krb5conf \u003d new File(workDir, \"krb5.conf\");\n     if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n       File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n       String[] principals \u003d new String[args.length - 3];\n       System.arraycopy(args, 3, principals, 0, args.length - 3);\n       miniKdc.createPrincipal(keytabFile, principals);\n       System.out.println();\n       System.out.println(\"Standalone MiniKdc Running\");\n       System.out.println(\"---------------------------------------------------\");\n       System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n       System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n               miniKdc.getHost());\n       System.out.println(\"  krb5conf        : \" + krb5conf);\n       System.out.println();\n       System.out.println(\"  created keytab  : \" + keytabFile);\n       System.out.println(\"  with principals : \" + Arrays.asList(principals));\n       System.out.println();\n       System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n       System.out.println(\"---------------------------------------------------\");\n       System.out.println();\n       Runtime.getRuntime().addShutdownHook(new Thread() {\n         @Override\n         public void run() {\n           miniKdc.stop();\n         }\n       });\n     } else {\n       throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n               + krb5conf.getAbsolutePath());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws  Exception {\n    if (args.length \u003c 4) {\n      System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n              \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n      System.exit(1);\n    }\n    File workDir \u003d new File(args[0]);\n    if (!workDir.exists()) {\n      throw new RuntimeException(\"Specified work directory does not exists: \"\n              + workDir.getAbsolutePath());\n    }\n    Properties conf \u003d createConf();\n    File file \u003d new File(args[1]);\n    if (!file.exists()) {\n      throw new RuntimeException(\"Specified configuration does not exists: \"\n              + file.getAbsolutePath());\n    }\n    Properties userConf \u003d new Properties();\n    FileReader r \u003d null;\n    try {\n      r \u003d new FileReader(file);\n      userConf.load(r);\n    } finally {\n      if (r !\u003d null) {\n        r.close();\n      }\n    }\n    for (Map.Entry\u003c?, ?\u003e entry : userConf.entrySet()) {\n      conf.put(entry.getKey(), entry.getValue());\n    }\n    final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n    miniKdc.start();\n    File krb5conf \u003d new File(workDir, \"krb5.conf\");\n    if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n      File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n      String[] principals \u003d new String[args.length - 3];\n      System.arraycopy(args, 3, principals, 0, args.length - 3);\n      miniKdc.createPrincipal(keytabFile, principals);\n      System.out.println();\n      System.out.println(\"Standalone MiniKdc Running\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n      System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n              miniKdc.getHost());\n      System.out.println(\"  krb5conf        : \" + krb5conf);\n      System.out.println();\n      System.out.println(\"  created keytab  : \" + keytabFile);\n      System.out.println(\"  with principals : \" + Arrays.asList(principals));\n      System.out.println();\n      System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println();\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n          miniKdc.stop();\n        }\n      });\n    } else {\n      throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n              + krb5conf.getAbsolutePath());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
      "extendedDetails": {}
    },
    "bc2a4434183e833c4f74ff91583747be5033a1be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10223. MiniKdc#main() should close the FileReader it creates. (Ted Yu via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557627 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/01/14 3:24 PM",
      "commitName": "bc2a4434183e833c4f74ff91583747be5033a1be",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "29/08/13 3:35 PM",
      "commitNameOld": "eef32121d1d81076fd7e49ae65af03d1a6837dca",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 136.03,
      "commitsBetweenForRepo": 814,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,63 @@\n   public static void main(String[] args) throws  Exception {\n     if (args.length \u003c 4) {\n       System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n               \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n       System.exit(1);\n     }\n     File workDir \u003d new File(args[0]);\n     if (!workDir.exists()) {\n       throw new RuntimeException(\"Specified work directory does not exists: \"\n               + workDir.getAbsolutePath());\n     }\n     Properties conf \u003d createConf();\n     File file \u003d new File(args[1]);\n     if (!file.exists()) {\n       throw new RuntimeException(\"Specified configuration does not exists: \"\n               + file.getAbsolutePath());\n     }\n     Properties userConf \u003d new Properties();\n-    userConf.load(new FileReader(file));\n+    FileReader r \u003d null;\n+    try {\n+      r \u003d new FileReader(file);\n+      userConf.load(r);\n+    } finally {\n+      if (r !\u003d null) {\n+        r.close();\n+      }\n+    }\n     for (Map.Entry entry : userConf.entrySet()) {\n       conf.put(entry.getKey(), entry.getValue());\n     }\n     final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n     miniKdc.start();\n     File krb5conf \u003d new File(workDir, \"krb5.conf\");\n     if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n       File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n       String[] principals \u003d new String[args.length - 3];\n       System.arraycopy(args, 3, principals, 0, args.length - 3);\n       miniKdc.createPrincipal(keytabFile, principals);\n       System.out.println();\n       System.out.println(\"Standalone MiniKdc Running\");\n       System.out.println(\"---------------------------------------------------\");\n       System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n       System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n               miniKdc.getHost());\n       System.out.println(\"  krb5conf        : \" + krb5conf);\n       System.out.println();\n       System.out.println(\"  created keytab  : \" + keytabFile);\n       System.out.println(\"  with principals : \" + Arrays.asList(principals));\n       System.out.println();\n       System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n       System.out.println(\"---------------------------------------------------\");\n       System.out.println();\n       Runtime.getRuntime().addShutdownHook(new Thread() {\n         @Override\n         public void run() {\n           miniKdc.stop();\n         }\n       });\n     } else {\n       throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n               + krb5conf.getAbsolutePath());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws  Exception {\n    if (args.length \u003c 4) {\n      System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n              \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n      System.exit(1);\n    }\n    File workDir \u003d new File(args[0]);\n    if (!workDir.exists()) {\n      throw new RuntimeException(\"Specified work directory does not exists: \"\n              + workDir.getAbsolutePath());\n    }\n    Properties conf \u003d createConf();\n    File file \u003d new File(args[1]);\n    if (!file.exists()) {\n      throw new RuntimeException(\"Specified configuration does not exists: \"\n              + file.getAbsolutePath());\n    }\n    Properties userConf \u003d new Properties();\n    FileReader r \u003d null;\n    try {\n      r \u003d new FileReader(file);\n      userConf.load(r);\n    } finally {\n      if (r !\u003d null) {\n        r.close();\n      }\n    }\n    for (Map.Entry entry : userConf.entrySet()) {\n      conf.put(entry.getKey(), entry.getValue());\n    }\n    final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n    miniKdc.start();\n    File krb5conf \u003d new File(workDir, \"krb5.conf\");\n    if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n      File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n      String[] principals \u003d new String[args.length - 3];\n      System.arraycopy(args, 3, principals, 0, args.length - 3);\n      miniKdc.createPrincipal(keytabFile, principals);\n      System.out.println();\n      System.out.println(\"Standalone MiniKdc Running\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n      System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n              miniKdc.getHost());\n      System.out.println(\"  krb5conf        : \" + krb5conf);\n      System.out.println();\n      System.out.println(\"  created keytab  : \" + keytabFile);\n      System.out.println(\"  with principals : \" + Arrays.asList(principals));\n      System.out.println();\n      System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println();\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n          miniKdc.stop();\n        }\n      });\n    } else {\n      throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n              + krb5conf.getAbsolutePath());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
      "extendedDetails": {}
    },
    "1d1ab587e4e92ce3aea4cb144811f69145cb3b33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9848. Create a MiniKDC for use with security testing. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1513308 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/13 5:23 PM",
      "commitName": "1d1ab587e4e92ce3aea4cb144811f69145cb3b33",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,55 @@\n+  public static void main(String[] args) throws  Exception {\n+    if (args.length \u003c 4) {\n+      System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n+              \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n+      System.exit(1);\n+    }\n+    File workDir \u003d new File(args[0]);\n+    if (!workDir.exists()) {\n+      throw new RuntimeException(\"Specified work directory does not exists: \"\n+              + workDir.getAbsolutePath());\n+    }\n+    Properties conf \u003d createConf();\n+    File file \u003d new File(args[1]);\n+    if (!file.exists()) {\n+      throw new RuntimeException(\"Specified configuration does not exists: \"\n+              + file.getAbsolutePath());\n+    }\n+    Properties userConf \u003d new Properties();\n+    userConf.load(new FileReader(file));\n+    for (Map.Entry entry : userConf.entrySet()) {\n+      conf.put(entry.getKey(), entry.getValue());\n+    }\n+    final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n+    miniKdc.start();\n+    File krb5conf \u003d new File(workDir, \"krb5.conf\");\n+    if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n+      File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n+      String[] principals \u003d new String[args.length - 3];\n+      System.arraycopy(args, 3, principals, 0, args.length - 3);\n+      miniKdc.createPrincipal(keytabFile, principals);\n+      System.out.println();\n+      System.out.println(\"Standalone MiniKdc Running\");\n+      System.out.println(\"---------------------------------------------------\");\n+      System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n+      System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n+              miniKdc.getHost());\n+      System.out.println(\"  krb5conf        : \" + krb5conf);\n+      System.out.println();\n+      System.out.println(\"  created keytab  : \" + keytabFile);\n+      System.out.println(\"  with principals : \" + Arrays.asList(principals));\n+      System.out.println();\n+      System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n+      System.out.println(\"---------------------------------------------------\");\n+      System.out.println();\n+      Runtime.getRuntime().addShutdownHook(new Thread() {\n+        @Override\n+        public void run() {\n+          miniKdc.stop();\n+        }\n+      });\n+    } else {\n+      throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n+              + krb5conf.getAbsolutePath());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws  Exception {\n    if (args.length \u003c 4) {\n      System.out.println(\"Arguments: \u003cWORKDIR\u003e \u003cMINIKDCPROPERTIES\u003e \" +\n              \"\u003cKEYTABFILE\u003e [\u003cPRINCIPALS\u003e]+\");\n      System.exit(1);\n    }\n    File workDir \u003d new File(args[0]);\n    if (!workDir.exists()) {\n      throw new RuntimeException(\"Specified work directory does not exists: \"\n              + workDir.getAbsolutePath());\n    }\n    Properties conf \u003d createConf();\n    File file \u003d new File(args[1]);\n    if (!file.exists()) {\n      throw new RuntimeException(\"Specified configuration does not exists: \"\n              + file.getAbsolutePath());\n    }\n    Properties userConf \u003d new Properties();\n    userConf.load(new FileReader(file));\n    for (Map.Entry entry : userConf.entrySet()) {\n      conf.put(entry.getKey(), entry.getValue());\n    }\n    final MiniKdc miniKdc \u003d new MiniKdc(conf, workDir);\n    miniKdc.start();\n    File krb5conf \u003d new File(workDir, \"krb5.conf\");\n    if (miniKdc.getKrb5conf().renameTo(krb5conf)) {\n      File keytabFile \u003d new File(args[2]).getAbsoluteFile();\n      String[] principals \u003d new String[args.length - 3];\n      System.arraycopy(args, 3, principals, 0, args.length - 3);\n      miniKdc.createPrincipal(keytabFile, principals);\n      System.out.println();\n      System.out.println(\"Standalone MiniKdc Running\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println(\"  Realm           : \" + miniKdc.getRealm());\n      System.out.println(\"  Running at      : \" + miniKdc.getHost() + \":\" +\n              miniKdc.getHost());\n      System.out.println(\"  krb5conf        : \" + krb5conf);\n      System.out.println();\n      System.out.println(\"  created keytab  : \" + keytabFile);\n      System.out.println(\"  with principals : \" + Arrays.asList(principals));\n      System.out.println();\n      System.out.println(\" Do \u003cCTRL-C\u003e or kill \u003cPID\u003e to stop it\");\n      System.out.println(\"---------------------------------------------------\");\n      System.out.println();\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n          miniKdc.stop();\n        }\n      });\n    } else {\n      throw new RuntimeException(\"Cannot rename KDC\u0027s krb5conf to \"\n              + krb5conf.getAbsolutePath());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java"
    }
  }
}