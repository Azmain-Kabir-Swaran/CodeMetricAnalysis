{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProtobufRpcEngine.java",
  "functionName": "getReturnMessage",
  "functionId": "getReturnMessage___method-Method(modifiers-final)__buf-RpcWritable.Buffer(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
  "functionStartLine": 279,
  "functionEndLine": 301,
  "numCommitsSeen": 114,
  "timeTaken": 2041,
  "changeHistory": [
    "23abb09c1f979d8c18ece81e32630a35ed569399",
    "eded3d109e4c5225d8c5cd3c2d82e7ac93841263"
  ],
  "changeHistoryShort": {
    "23abb09c1f979d8c18ece81e32630a35ed569399": "Ymultichange(Yparameterchange,Ybodychange)",
    "eded3d109e4c5225d8c5cd3c2d82e7ac93841263": "Yintroduced"
  },
  "changeHistoryDetails": {
    "23abb09c1f979d8c18ece81e32630a35ed569399": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13547. Optimize IPC client protobuf decoding. Contributed by Daryn Sharp.\n",
      "commitDate": "02/09/16 9:03 AM",
      "commitName": "23abb09c1f979d8c18ece81e32630a35ed569399",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13547. Optimize IPC client protobuf decoding. Contributed by Daryn Sharp.\n",
          "commitDate": "02/09/16 9:03 AM",
          "commitName": "23abb09c1f979d8c18ece81e32630a35ed569399",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "09/08/16 12:33 PM",
          "commitNameOld": "caf800d5290d8618003b764afb0b3ef8d9a5a0a8",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 23.85,
          "commitsBetweenForRepo": 162,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n     private Message getReturnMessage(final Method method,\n-        final RpcResponseWrapper rrw) throws ServiceException {\n+        final RpcWritable.Buffer buf) throws ServiceException {\n       Message prototype \u003d null;\n       try {\n         prototype \u003d getReturnProtoType(method);\n       } catch (Exception e) {\n         throw new ServiceException(e);\n       }\n       Message returnMessage;\n       try {\n-        returnMessage \u003d prototype.newBuilderForType()\n-            .mergeFrom(rrw.theResponseRead).build();\n+        returnMessage \u003d buf.getValue(prototype.getDefaultInstanceForType());\n \n         if (LOG.isTraceEnabled()) {\n           LOG.trace(Thread.currentThread().getId() + \": Response \u003c- \" +\n               remoteId + \": \" + method.getName() +\n                 \" {\" + TextFormat.shortDebugString(returnMessage) + \"}\");\n         }\n \n       } catch (Throwable e) {\n         throw new ServiceException(e);\n       }\n       return returnMessage;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Message getReturnMessage(final Method method,\n        final RpcWritable.Buffer buf) throws ServiceException {\n      Message prototype \u003d null;\n      try {\n        prototype \u003d getReturnProtoType(method);\n      } catch (Exception e) {\n        throw new ServiceException(e);\n      }\n      Message returnMessage;\n      try {\n        returnMessage \u003d buf.getValue(prototype.getDefaultInstanceForType());\n\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(Thread.currentThread().getId() + \": Response \u003c- \" +\n              remoteId + \": \" + method.getName() +\n                \" {\" + TextFormat.shortDebugString(returnMessage) + \"}\");\n        }\n\n      } catch (Throwable e) {\n        throw new ServiceException(e);\n      }\n      return returnMessage;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {
            "oldValue": "[method-Method(modifiers-final), rrw-RpcResponseWrapper(modifiers-final)]",
            "newValue": "[method-Method(modifiers-final), buf-RpcWritable.Buffer(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13547. Optimize IPC client protobuf decoding. Contributed by Daryn Sharp.\n",
          "commitDate": "02/09/16 9:03 AM",
          "commitName": "23abb09c1f979d8c18ece81e32630a35ed569399",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "09/08/16 12:33 PM",
          "commitNameOld": "caf800d5290d8618003b764afb0b3ef8d9a5a0a8",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 23.85,
          "commitsBetweenForRepo": 162,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n     private Message getReturnMessage(final Method method,\n-        final RpcResponseWrapper rrw) throws ServiceException {\n+        final RpcWritable.Buffer buf) throws ServiceException {\n       Message prototype \u003d null;\n       try {\n         prototype \u003d getReturnProtoType(method);\n       } catch (Exception e) {\n         throw new ServiceException(e);\n       }\n       Message returnMessage;\n       try {\n-        returnMessage \u003d prototype.newBuilderForType()\n-            .mergeFrom(rrw.theResponseRead).build();\n+        returnMessage \u003d buf.getValue(prototype.getDefaultInstanceForType());\n \n         if (LOG.isTraceEnabled()) {\n           LOG.trace(Thread.currentThread().getId() + \": Response \u003c- \" +\n               remoteId + \": \" + method.getName() +\n                 \" {\" + TextFormat.shortDebugString(returnMessage) + \"}\");\n         }\n \n       } catch (Throwable e) {\n         throw new ServiceException(e);\n       }\n       return returnMessage;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Message getReturnMessage(final Method method,\n        final RpcWritable.Buffer buf) throws ServiceException {\n      Message prototype \u003d null;\n      try {\n        prototype \u003d getReturnProtoType(method);\n      } catch (Exception e) {\n        throw new ServiceException(e);\n      }\n      Message returnMessage;\n      try {\n        returnMessage \u003d buf.getValue(prototype.getDefaultInstanceForType());\n\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(Thread.currentThread().getId() + \": Response \u003c- \" +\n              remoteId + \": \" + method.getName() +\n                \" {\" + TextFormat.shortDebugString(returnMessage) + \"}\");\n        }\n\n      } catch (Throwable e) {\n        throw new ServiceException(e);\n      }\n      return returnMessage;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {}
        }
      ]
    },
    "eded3d109e4c5225d8c5cd3c2d82e7ac93841263": {
      "type": "Yintroduced",
      "commitMessage": "Revert \"Revert \"HDFS-10224. Implement asynchronous rename for DistributedFileSystem.  Contributed by Xiaobing Zhou\"\"\n\nThis reverts commit 106234d873c60fa52cd0d812fb1cdc0c6b998a6d.\n",
      "commitDate": "06/06/16 1:28 AM",
      "commitName": "eded3d109e4c5225d8c5cd3c2d82e7ac93841263",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,24 @@\n+    private Message getReturnMessage(final Method method,\n+        final RpcResponseWrapper rrw) throws ServiceException {\n+      Message prototype \u003d null;\n+      try {\n+        prototype \u003d getReturnProtoType(method);\n+      } catch (Exception e) {\n+        throw new ServiceException(e);\n+      }\n+      Message returnMessage;\n+      try {\n+        returnMessage \u003d prototype.newBuilderForType()\n+            .mergeFrom(rrw.theResponseRead).build();\n+\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(Thread.currentThread().getId() + \": Response \u003c- \" +\n+              remoteId + \": \" + method.getName() +\n+                \" {\" + TextFormat.shortDebugString(returnMessage) + \"}\");\n+        }\n+\n+      } catch (Throwable e) {\n+        throw new ServiceException(e);\n+      }\n+      return returnMessage;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private Message getReturnMessage(final Method method,\n        final RpcResponseWrapper rrw) throws ServiceException {\n      Message prototype \u003d null;\n      try {\n        prototype \u003d getReturnProtoType(method);\n      } catch (Exception e) {\n        throw new ServiceException(e);\n      }\n      Message returnMessage;\n      try {\n        returnMessage \u003d prototype.newBuilderForType()\n            .mergeFrom(rrw.theResponseRead).build();\n\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(Thread.currentThread().getId() + \": Response \u003c- \" +\n              remoteId + \": \" + method.getName() +\n                \" {\" + TextFormat.shortDebugString(returnMessage) + \"}\");\n        }\n\n      } catch (Throwable e) {\n        throw new ServiceException(e);\n      }\n      return returnMessage;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java"
    }
  }
}