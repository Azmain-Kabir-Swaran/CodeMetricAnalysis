{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryAliasMap.java",
  "functionName": "transferForBootstrap",
  "functionId": "transferForBootstrap___response-HttpServletResponse__conf-Configuration__aliasMap-InMemoryAliasMap",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/aliasmap/InMemoryAliasMap.java",
  "functionStartLine": 238,
  "functionEndLine": 273,
  "numCommitsSeen": 7,
  "timeTaken": 1315,
  "changeHistory": [
    "8fc0d04517912766a3102f3e611f7d0fabd2f815"
  ],
  "changeHistoryShort": {
    "8fc0d04517912766a3102f3e611f7d0fabd2f815": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8fc0d04517912766a3102f3e611f7d0fabd2f815": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14001. [PROVIDED Storage] bootstrapStandby should manage the InMemoryAliasMap. Contributed by Virajith Jalaparti.\n",
      "commitDate": "07/12/18 6:30 PM",
      "commitName": "8fc0d04517912766a3102f3e611f7d0fabd2f815",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,36 @@\n+  public static void transferForBootstrap(HttpServletResponse response,\n+      Configuration conf, InMemoryAliasMap aliasMap) throws IOException {\n+    File aliasMapSnapshot \u003d null;\n+    File compressedAliasMap \u003d null;\n+    try {\n+      aliasMapSnapshot \u003d createSnapshot(aliasMap);\n+      // compress the snapshot that is associated with the\n+      // block pool id of the aliasmap.\n+      compressedAliasMap \u003d getCompressedAliasMap(\n+          new File(aliasMapSnapshot, aliasMap.blockPoolID));\n+      try (FileInputStream fis \u003d new FileInputStream(compressedAliasMap)) {\n+        ImageServlet.setVerificationHeadersForGet(response, compressedAliasMap);\n+        ImageServlet.setFileNameHeaders(response, compressedAliasMap);\n+        // send file\n+        DataTransferThrottler throttler \u003d\n+            ImageServlet.getThrottlerForBootstrapStandby(conf);\n+        TransferFsImage.copyFileToStream(response.getOutputStream(),\n+            compressedAliasMap, fis, throttler);\n+      }\n+    } finally {\n+      // cleanup the temporary snapshot and compressed files.\n+      StringBuilder errMessage \u003d new StringBuilder();\n+      if (compressedAliasMap !\u003d null\n+          \u0026\u0026 !FileUtil.fullyDelete(compressedAliasMap)) {\n+        errMessage.append(\"Failed to fully delete compressed aliasmap \")\n+            .append(compressedAliasMap.getAbsolutePath()).append(\"\\n\");\n+      }\n+      if (aliasMapSnapshot !\u003d null \u0026\u0026 !FileUtil.fullyDelete(aliasMapSnapshot)) {\n+        errMessage.append(\"Failed to fully delete the aliasmap snapshot \")\n+            .append(aliasMapSnapshot.getAbsolutePath()).append(\"\\n\");\n+      }\n+      if (errMessage.length() \u003e 0) {\n+        throw new IOException(errMessage.toString());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void transferForBootstrap(HttpServletResponse response,\n      Configuration conf, InMemoryAliasMap aliasMap) throws IOException {\n    File aliasMapSnapshot \u003d null;\n    File compressedAliasMap \u003d null;\n    try {\n      aliasMapSnapshot \u003d createSnapshot(aliasMap);\n      // compress the snapshot that is associated with the\n      // block pool id of the aliasmap.\n      compressedAliasMap \u003d getCompressedAliasMap(\n          new File(aliasMapSnapshot, aliasMap.blockPoolID));\n      try (FileInputStream fis \u003d new FileInputStream(compressedAliasMap)) {\n        ImageServlet.setVerificationHeadersForGet(response, compressedAliasMap);\n        ImageServlet.setFileNameHeaders(response, compressedAliasMap);\n        // send file\n        DataTransferThrottler throttler \u003d\n            ImageServlet.getThrottlerForBootstrapStandby(conf);\n        TransferFsImage.copyFileToStream(response.getOutputStream(),\n            compressedAliasMap, fis, throttler);\n      }\n    } finally {\n      // cleanup the temporary snapshot and compressed files.\n      StringBuilder errMessage \u003d new StringBuilder();\n      if (compressedAliasMap !\u003d null\n          \u0026\u0026 !FileUtil.fullyDelete(compressedAliasMap)) {\n        errMessage.append(\"Failed to fully delete compressed aliasmap \")\n            .append(compressedAliasMap.getAbsolutePath()).append(\"\\n\");\n      }\n      if (aliasMapSnapshot !\u003d null \u0026\u0026 !FileUtil.fullyDelete(aliasMapSnapshot)) {\n        errMessage.append(\"Failed to fully delete the aliasmap snapshot \")\n            .append(aliasMapSnapshot.getAbsolutePath()).append(\"\\n\");\n      }\n      if (errMessage.length() \u003e 0) {\n        throw new IOException(errMessage.toString());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/aliasmap/InMemoryAliasMap.java"
    }
  }
}