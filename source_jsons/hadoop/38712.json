{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FiCaSchedulerApp.java",
  "functionName": "findNodeToUnreserve",
  "functionId": "findNodeToUnreserve___node-FiCaSchedulerNode__schedulerKey-SchedulerRequestKey__minimumUnreservedResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
  "functionStartLine": 917,
  "functionEndLine": 950,
  "numCommitsSeen": 423,
  "timeTaken": 10634,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "e81596d06d226f1cfa44b2390ce3095ed4dee621",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "189a63a719c63b67a1783a280bfc2f72dcb55277",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15",
    "9c22065109a77681bc2534063eabe8692fbcb3cd"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "e81596d06d226f1cfa44b2390ce3095ed4dee621": "Ymultichange(Yparameterchange,Ybodychange)",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
    "189a63a719c63b67a1783a280bfc2f72dcb55277": "Ymultichange(Yparameterchange,Ybodychange)",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": "Ymultichange(Yparameterchange,Ybodychange)",
    "9c22065109a77681bc2534063eabe8692fbcb3cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,34 @@\n   public RMContainer findNodeToUnreserve(FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource) {\n     readLock.lock();\n     try {\n       // need to unreserve some other container first\n       NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n           minimumUnreservedResource, rc);\n       if (idToUnreserve \u003d\u003d null) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"checked to see if could unreserve for app but nothing \"\n-              + \"reserved that matches for this app\");\n-        }\n+        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n+            + \"reserved that matches for this app\");\n         return null;\n       }\n       FiCaSchedulerNode nodeToUnreserve \u003d\n           ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n       if (nodeToUnreserve \u003d\u003d null) {\n         LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n         return null;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n             + idToUnreserve\n             + \" in order to replace reserved application and place it on node: \"\n             + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n       }\n \n       // headroom\n       Resources.addTo(getHeadroom(),\n           nodeToUnreserve.getReservedContainer().getReservedResource());\n \n       return nodeToUnreserve.getReservedContainer();\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer findNodeToUnreserve(FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource) {\n    readLock.lock();\n    try {\n      // need to unreserve some other container first\n      NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n          minimumUnreservedResource, rc);\n      if (idToUnreserve \u003d\u003d null) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n        return null;\n      }\n      FiCaSchedulerNode nodeToUnreserve \u003d\n          ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n      if (nodeToUnreserve \u003d\u003d null) {\n        LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n        return null;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n            + idToUnreserve\n            + \" in order to replace reserved application and place it on node: \"\n            + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n      }\n\n      // headroom\n      Resources.addTo(getHeadroom(),\n          nodeToUnreserve.getReservedContainer().getReservedResource());\n\n      return nodeToUnreserve.getReservedContainer();\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public RMContainer findNodeToUnreserve(FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource) {\n+    readLock.lock();\n     try {\n-      readLock.lock();\n       // need to unreserve some other container first\n       NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n           minimumUnreservedResource, rc);\n       if (idToUnreserve \u003d\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"checked to see if could unreserve for app but nothing \"\n               + \"reserved that matches for this app\");\n         }\n         return null;\n       }\n       FiCaSchedulerNode nodeToUnreserve \u003d\n           ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n       if (nodeToUnreserve \u003d\u003d null) {\n         LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n         return null;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n             + idToUnreserve\n             + \" in order to replace reserved application and place it on node: \"\n             + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n       }\n \n       // headroom\n       Resources.addTo(getHeadroom(),\n           nodeToUnreserve.getReservedContainer().getReservedResource());\n \n       return nodeToUnreserve.getReservedContainer();\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer findNodeToUnreserve(FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource) {\n    readLock.lock();\n    try {\n      // need to unreserve some other container first\n      NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n          minimumUnreservedResource, rc);\n      if (idToUnreserve \u003d\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"checked to see if could unreserve for app but nothing \"\n              + \"reserved that matches for this app\");\n        }\n        return null;\n      }\n      FiCaSchedulerNode nodeToUnreserve \u003d\n          ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n      if (nodeToUnreserve \u003d\u003d null) {\n        LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n        return null;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n            + idToUnreserve\n            + \" in order to replace reserved application and place it on node: \"\n            + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n      }\n\n      // headroom\n      Resources.addTo(getHeadroom(),\n          nodeToUnreserve.getReservedContainer().getReservedResource());\n\n      return nodeToUnreserve.getReservedContainer();\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "e81596d06d226f1cfa44b2390ce3095ed4dee621": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7172. ResourceCalculator.fitsIn() should not take a cluster resource parameter. (Sen Zhao via wangda)\n\nChange-Id: Icc3670c9381ce7591ca69ec12da5aa52d3612d34\n",
      "commitDate": "17/09/17 9:20 PM",
      "commitName": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7172. ResourceCalculator.fitsIn() should not take a cluster resource parameter. (Sen Zhao via wangda)\n\nChange-Id: Icc3670c9381ce7591ca69ec12da5aa52d3612d34\n",
          "commitDate": "17/09/17 9:20 PM",
          "commitName": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "03/08/17 6:57 AM",
          "commitNameOld": "f64cfeaf61ec65a465decdd8215f567d4e6677a9",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 45.6,
          "commitsBetweenForRepo": 408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n-  public RMContainer findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n-      Resource minimumUnreservedResource) {\n+  public RMContainer findNodeToUnreserve(FiCaSchedulerNode node,\n+      SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource) {\n     try {\n       readLock.lock();\n       // need to unreserve some other container first\n       NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n-          minimumUnreservedResource, rc, clusterResource);\n+          minimumUnreservedResource, rc);\n       if (idToUnreserve \u003d\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"checked to see if could unreserve for app but nothing \"\n               + \"reserved that matches for this app\");\n         }\n         return null;\n       }\n       FiCaSchedulerNode nodeToUnreserve \u003d\n           ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n       if (nodeToUnreserve \u003d\u003d null) {\n         LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n         return null;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n             + idToUnreserve\n             + \" in order to replace reserved application and place it on node: \"\n             + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n       }\n \n       // headroom\n       Resources.addTo(getHeadroom(),\n           nodeToUnreserve.getReservedContainer().getReservedResource());\n \n       return nodeToUnreserve.getReservedContainer();\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource) {\n    try {\n      readLock.lock();\n      // need to unreserve some other container first\n      NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n          minimumUnreservedResource, rc);\n      if (idToUnreserve \u003d\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"checked to see if could unreserve for app but nothing \"\n              + \"reserved that matches for this app\");\n        }\n        return null;\n      }\n      FiCaSchedulerNode nodeToUnreserve \u003d\n          ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n      if (nodeToUnreserve \u003d\u003d null) {\n        LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n        return null;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n            + idToUnreserve\n            + \" in order to replace reserved application and place it on node: \"\n            + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n      }\n\n      // headroom\n      Resources.addTo(getHeadroom(),\n          nodeToUnreserve.getReservedContainer().getReservedResource());\n\n      return nodeToUnreserve.getReservedContainer();\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, minimumUnreservedResource-Resource]",
            "newValue": "[node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, minimumUnreservedResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7172. ResourceCalculator.fitsIn() should not take a cluster resource parameter. (Sen Zhao via wangda)\n\nChange-Id: Icc3670c9381ce7591ca69ec12da5aa52d3612d34\n",
          "commitDate": "17/09/17 9:20 PM",
          "commitName": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "03/08/17 6:57 AM",
          "commitNameOld": "f64cfeaf61ec65a465decdd8215f567d4e6677a9",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 45.6,
          "commitsBetweenForRepo": 408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n-  public RMContainer findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n-      Resource minimumUnreservedResource) {\n+  public RMContainer findNodeToUnreserve(FiCaSchedulerNode node,\n+      SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource) {\n     try {\n       readLock.lock();\n       // need to unreserve some other container first\n       NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n-          minimumUnreservedResource, rc, clusterResource);\n+          minimumUnreservedResource, rc);\n       if (idToUnreserve \u003d\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"checked to see if could unreserve for app but nothing \"\n               + \"reserved that matches for this app\");\n         }\n         return null;\n       }\n       FiCaSchedulerNode nodeToUnreserve \u003d\n           ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n       if (nodeToUnreserve \u003d\u003d null) {\n         LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n         return null;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n             + idToUnreserve\n             + \" in order to replace reserved application and place it on node: \"\n             + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n       }\n \n       // headroom\n       Resources.addTo(getHeadroom(),\n           nodeToUnreserve.getReservedContainer().getReservedResource());\n \n       return nodeToUnreserve.getReservedContainer();\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource) {\n    try {\n      readLock.lock();\n      // need to unreserve some other container first\n      NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n          minimumUnreservedResource, rc);\n      if (idToUnreserve \u003d\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"checked to see if could unreserve for app but nothing \"\n              + \"reserved that matches for this app\");\n        }\n        return null;\n      }\n      FiCaSchedulerNode nodeToUnreserve \u003d\n          ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n      if (nodeToUnreserve \u003d\u003d null) {\n        LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n        return null;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n            + idToUnreserve\n            + \" in order to replace reserved application and place it on node: \"\n            + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n      }\n\n      // headroom\n      Resources.addTo(getHeadroom(),\n          nodeToUnreserve.getReservedContainer().getReservedResource());\n\n      return nodeToUnreserve.getReservedContainer();\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "31/10/16 3:18 PM",
      "commitNameOld": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.83,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,37 @@\n   public RMContainer findNodeToUnreserve(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       Resource minimumUnreservedResource) {\n-    // need to unreserve some other container first\n-    NodeId idToUnreserve \u003d\n-        getNodeIdToUnreserve(schedulerKey, minimumUnreservedResource,\n-            rc, clusterResource);\n-    if (idToUnreserve \u003d\u003d null) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n-            + \"reserved that matches for this app\");\n+    try {\n+      readLock.lock();\n+      // need to unreserve some other container first\n+      NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n+          minimumUnreservedResource, rc, clusterResource);\n+      if (idToUnreserve \u003d\u003d null) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"checked to see if could unreserve for app but nothing \"\n+              + \"reserved that matches for this app\");\n+        }\n+        return null;\n       }\n-      return null;\n-    }\n-    FiCaSchedulerNode nodeToUnreserve \u003d\n-        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n-    if (nodeToUnreserve \u003d\u003d null) {\n-      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n-      return null;\n-    }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"unreserving for app: \" + getApplicationId()\n-        + \" on nodeId: \" + idToUnreserve\n-        + \" in order to replace reserved application and place it on node: \"\n-        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n-    }\n+      FiCaSchedulerNode nodeToUnreserve \u003d\n+          ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n+      if (nodeToUnreserve \u003d\u003d null) {\n+        LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n+        return null;\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n+            + idToUnreserve\n+            + \" in order to replace reserved application and place it on node: \"\n+            + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n+      }\n \n-    // headroom\n-    Resources.addTo(getHeadroom(), nodeToUnreserve\n-        .getReservedContainer().getReservedResource());\n+      // headroom\n+      Resources.addTo(getHeadroom(),\n+          nodeToUnreserve.getReservedContainer().getReservedResource());\n \n-    return nodeToUnreserve.getReservedContainer();\n+      return nodeToUnreserve.getReservedContainer();\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      Resource minimumUnreservedResource) {\n    try {\n      readLock.lock();\n      // need to unreserve some other container first\n      NodeId idToUnreserve \u003d getNodeIdToUnreserve(schedulerKey,\n          minimumUnreservedResource, rc, clusterResource);\n      if (idToUnreserve \u003d\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"checked to see if could unreserve for app but nothing \"\n              + \"reserved that matches for this app\");\n        }\n        return null;\n      }\n      FiCaSchedulerNode nodeToUnreserve \u003d\n          ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n      if (nodeToUnreserve \u003d\u003d null) {\n        LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n        return null;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"unreserving for app: \" + getApplicationId() + \" on nodeId: \"\n            + idToUnreserve\n            + \" in order to replace reserved application and place it on node: \"\n            + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n      }\n\n      // headroom\n      Resources.addTo(getHeadroom(),\n          nodeToUnreserve.getReservedContainer().getReservedResource());\n\n      return nodeToUnreserve.getReservedContainer();\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/05/16 12:56 PM",
          "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 82.08,
          "commitsBetweenForRepo": 671,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n   public RMContainer findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, Priority priority,\n+      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n-        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+        getNodeIdToUnreserve(schedulerKey, minimumUnreservedResource,\n             rc, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n       return null;\n     }\n     FiCaSchedulerNode nodeToUnreserve \u003d\n         ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n       return null;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"unreserving for app: \" + getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n         + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n     Resources.addTo(getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n     return nodeToUnreserve.getReservedContainer();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        getNodeIdToUnreserve(schedulerKey, minimumUnreservedResource,\n            rc, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return null;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d\n        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return null;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    return nodeToUnreserve.getReservedContainer();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, priority-Priority, minimumUnreservedResource-Resource]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, minimumUnreservedResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/05/16 12:56 PM",
          "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 82.08,
          "commitsBetweenForRepo": 671,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n   public RMContainer findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, Priority priority,\n+      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n-        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+        getNodeIdToUnreserve(schedulerKey, minimumUnreservedResource,\n             rc, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n       return null;\n     }\n     FiCaSchedulerNode nodeToUnreserve \u003d\n         ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n       return null;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"unreserving for app: \" + getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n         + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n     Resources.addTo(getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n     return nodeToUnreserve.getReservedContainer();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        getNodeIdToUnreserve(schedulerKey, minimumUnreservedResource,\n            rc, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return null;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d\n        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return null;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    return nodeToUnreserve.getReservedContainer();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  protected boolean findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+  public RMContainer findNodeToUnreserve(Resource clusterResource,\n+      FiCaSchedulerNode node, Priority priority,\n       Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n-        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n-            resourceCalculator, clusterResource);\n+        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+            rc, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n-      return false;\n+      return null;\n     }\n-    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n+    FiCaSchedulerNode nodeToUnreserve \u003d\n+        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n-      return false;\n+      return null;\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n+      LOG.debug(\"unreserving for app: \" + getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n         + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n-    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n+    Resources.addTo(getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n-    // Make sure to not have completedContainers sort the queues here since\n-    // we are already inside an iterator loop for the queues and this would\n-    // cause an concurrent modification exception.\n-    completedContainer(clusterResource, application, nodeToUnreserve,\n-        nodeToUnreserve.getReservedContainer(),\n-        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n-            .getReservedContainer().getContainerId(),\n-            SchedulerUtils.UNRESERVED_CONTAINER),\n-        RMContainerEventType.RELEASED, null, false);\n-    return true;\n+    return nodeToUnreserve.getReservedContainer();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            rc, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return null;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d\n        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return null;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    return nodeToUnreserve.getReservedContainer();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "oldMethodName": "findNodeToUnreserve",
            "newMethodName": "findNodeToUnreserve"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  protected boolean findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+  public RMContainer findNodeToUnreserve(Resource clusterResource,\n+      FiCaSchedulerNode node, Priority priority,\n       Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n-        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n-            resourceCalculator, clusterResource);\n+        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+            rc, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n-      return false;\n+      return null;\n     }\n-    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n+    FiCaSchedulerNode nodeToUnreserve \u003d\n+        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n-      return false;\n+      return null;\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n+      LOG.debug(\"unreserving for app: \" + getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n         + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n-    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n+    Resources.addTo(getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n-    // Make sure to not have completedContainers sort the queues here since\n-    // we are already inside an iterator loop for the queues and this would\n-    // cause an concurrent modification exception.\n-    completedContainer(clusterResource, application, nodeToUnreserve,\n-        nodeToUnreserve.getReservedContainer(),\n-        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n-            .getReservedContainer().getContainerId(),\n-            SchedulerUtils.UNRESERVED_CONTAINER),\n-        RMContainerEventType.RELEASED, null, false);\n-    return true;\n+    return nodeToUnreserve.getReservedContainer();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            rc, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return null;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d\n        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return null;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    return nodeToUnreserve.getReservedContainer();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "RMContainer"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  protected boolean findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+  public RMContainer findNodeToUnreserve(Resource clusterResource,\n+      FiCaSchedulerNode node, Priority priority,\n       Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n-        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n-            resourceCalculator, clusterResource);\n+        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+            rc, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n-      return false;\n+      return null;\n     }\n-    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n+    FiCaSchedulerNode nodeToUnreserve \u003d\n+        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n-      return false;\n+      return null;\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n+      LOG.debug(\"unreserving for app: \" + getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n         + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n-    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n+    Resources.addTo(getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n-    // Make sure to not have completedContainers sort the queues here since\n-    // we are already inside an iterator loop for the queues and this would\n-    // cause an concurrent modification exception.\n-    completedContainer(clusterResource, application, nodeToUnreserve,\n-        nodeToUnreserve.getReservedContainer(),\n-        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n-            .getReservedContainer().getContainerId(),\n-            SchedulerUtils.UNRESERVED_CONTAINER),\n-        RMContainerEventType.RELEASED, null, false);\n-    return true;\n+    return nodeToUnreserve.getReservedContainer();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            rc, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return null;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d\n        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return null;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    return nodeToUnreserve.getReservedContainer();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  protected boolean findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+  public RMContainer findNodeToUnreserve(Resource clusterResource,\n+      FiCaSchedulerNode node, Priority priority,\n       Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n-        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n-            resourceCalculator, clusterResource);\n+        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+            rc, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n-      return false;\n+      return null;\n     }\n-    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n+    FiCaSchedulerNode nodeToUnreserve \u003d\n+        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n-      return false;\n+      return null;\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n+      LOG.debug(\"unreserving for app: \" + getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n         + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n-    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n+    Resources.addTo(getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n-    // Make sure to not have completedContainers sort the queues here since\n-    // we are already inside an iterator loop for the queues and this would\n-    // cause an concurrent modification exception.\n-    completedContainer(clusterResource, application, nodeToUnreserve,\n-        nodeToUnreserve.getReservedContainer(),\n-        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n-            .getReservedContainer().getContainerId(),\n-            SchedulerUtils.UNRESERVED_CONTAINER),\n-        RMContainerEventType.RELEASED, null, false);\n-    return true;\n+    return nodeToUnreserve.getReservedContainer();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            rc, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return null;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d\n        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return null;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    return nodeToUnreserve.getReservedContainer();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  protected boolean findNodeToUnreserve(Resource clusterResource,\n-      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+  public RMContainer findNodeToUnreserve(Resource clusterResource,\n+      FiCaSchedulerNode node, Priority priority,\n       Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n-        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n-            resourceCalculator, clusterResource);\n+        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+            rc, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n-      return false;\n+      return null;\n     }\n-    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n+    FiCaSchedulerNode nodeToUnreserve \u003d\n+        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n-      return false;\n+      return null;\n     }\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n+      LOG.debug(\"unreserving for app: \" + getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n         + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n-    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n+    Resources.addTo(getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n-    // Make sure to not have completedContainers sort the queues here since\n-    // we are already inside an iterator loop for the queues and this would\n-    // cause an concurrent modification exception.\n-    completedContainer(clusterResource, application, nodeToUnreserve,\n-        nodeToUnreserve.getReservedContainer(),\n-        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n-            .getReservedContainer().getContainerId(),\n-            SchedulerUtils.UNRESERVED_CONTAINER),\n-        RMContainerEventType.RELEASED, null, false);\n-    return true;\n+    return nodeToUnreserve.getReservedContainer();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            rc, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return null;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d\n        ((CapacityScheduler) scheduler).getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return null;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    return nodeToUnreserve.getReservedContainer();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, minimumUnreservedResource-Resource]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, priority-Priority, minimumUnreservedResource-Resource]"
          }
        }
      ]
    },
    "189a63a719c63b67a1783a280bfc2f72dcb55277": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3434. Interaction between reservations and userlimit can result in significant ULF violation\n",
      "commitDate": "23/04/15 7:39 AM",
      "commitName": "189a63a719c63b67a1783a280bfc2f72dcb55277",
      "commitAuthor": "tgraves",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3434. Interaction between reservations and userlimit can result in significant ULF violation\n",
          "commitDate": "23/04/15 7:39 AM",
          "commitName": "189a63a719c63b67a1783a280bfc2f72dcb55277",
          "commitAuthor": "tgraves",
          "commitDateOld": "21/04/15 8:06 PM",
          "commitNameOld": "bdd90110e6904b59746812d9a093924a65e72280",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 1.48,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n   protected boolean findNodeToUnreserve(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      Resource askedResource, Resource minimumUnreservedResource) {\n+      Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n         application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n             resourceCalculator, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n       return false;\n     }\n     FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n       return false;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n-        + node.getNodeID() + \" needing: \" + askedResource);\n+        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n     Resources.addTo(application.getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n     // Make sure to not have completedContainers sort the queues here since\n     // we are already inside an iterator loop for the queues and this would\n     // cause an concurrent modification exception.\n     completedContainer(clusterResource, application, nodeToUnreserve,\n         nodeToUnreserve.getReservedContainer(),\n         SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n             .getReservedContainer().getContainerId(),\n             SchedulerUtils.UNRESERVED_CONTAINER),\n         RMContainerEventType.RELEASED, null, false);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected boolean findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            resourceCalculator, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return false;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return false;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    // Make sure to not have completedContainers sort the queues here since\n    // we are already inside an iterator loop for the queues and this would\n    // cause an concurrent modification exception.\n    completedContainer(clusterResource, application, nodeToUnreserve,\n        nodeToUnreserve.getReservedContainer(),\n        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n            .getReservedContainer().getContainerId(),\n            SchedulerUtils.UNRESERVED_CONTAINER),\n        RMContainerEventType.RELEASED, null, false);\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, askedResource-Resource, minimumUnreservedResource-Resource]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, minimumUnreservedResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3434. Interaction between reservations and userlimit can result in significant ULF violation\n",
          "commitDate": "23/04/15 7:39 AM",
          "commitName": "189a63a719c63b67a1783a280bfc2f72dcb55277",
          "commitAuthor": "tgraves",
          "commitDateOld": "21/04/15 8:06 PM",
          "commitNameOld": "bdd90110e6904b59746812d9a093924a65e72280",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 1.48,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n   protected boolean findNodeToUnreserve(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      Resource askedResource, Resource minimumUnreservedResource) {\n+      Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n     NodeId idToUnreserve \u003d\n         application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n             resourceCalculator, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n       return false;\n     }\n     FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n       return false;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n-        + node.getNodeID() + \" needing: \" + askedResource);\n+        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n     }\n \n     // headroom\n     Resources.addTo(application.getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n     // Make sure to not have completedContainers sort the queues here since\n     // we are already inside an iterator loop for the queues and this would\n     // cause an concurrent modification exception.\n     completedContainer(clusterResource, application, nodeToUnreserve,\n         nodeToUnreserve.getReservedContainer(),\n         SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n             .getReservedContainer().getContainerId(),\n             SchedulerUtils.UNRESERVED_CONTAINER),\n         RMContainerEventType.RELEASED, null, false);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected boolean findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            resourceCalculator, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return false;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return false;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + minimumUnreservedResource);\n    }\n\n    // headroom\n    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    // Make sure to not have completedContainers sort the queues here since\n    // we are already inside an iterator loop for the queues and this would\n    // cause an concurrent modification exception.\n    completedContainer(clusterResource, application, nodeToUnreserve,\n        nodeToUnreserve.getReservedContainer(),\n        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n            .getReservedContainer().getContainerId(),\n            SchedulerUtils.UNRESERVED_CONTAINER),\n        RMContainerEventType.RELEASED, null, false);\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
      "commitDate": "17/03/15 10:24 AM",
      "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
          "commitDate": "17/03/15 10:24 AM",
          "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/03/15 11:49 AM",
          "commitNameOld": "e17e5ba9d7e2bd45ba6884f59f8045817594b284",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 13.9,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,41 @@\n   protected boolean findNodeToUnreserve(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      Resource capability) {\n+      Resource askedResource, Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n-    NodeId idToUnreserve \u003d application.getNodeIdToUnreserve(priority, capability);\n+    NodeId idToUnreserve \u003d\n+        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+            resourceCalculator, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n       return false;\n     }\n     FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n       return false;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n-        + node.getNodeID() + \" needing: \" + capability);\n+        + node.getNodeID() + \" needing: \" + askedResource);\n     }\n \n     // headroom\n     Resources.addTo(application.getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n     // Make sure to not have completedContainers sort the queues here since\n     // we are already inside an iterator loop for the queues and this would\n     // cause an concurrent modification exception.\n     completedContainer(clusterResource, application, nodeToUnreserve,\n         nodeToUnreserve.getReservedContainer(),\n         SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n             .getReservedContainer().getContainerId(),\n             SchedulerUtils.UNRESERVED_CONTAINER),\n         RMContainerEventType.RELEASED, null, false);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected boolean findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      Resource askedResource, Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            resourceCalculator, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return false;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return false;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + askedResource);\n    }\n\n    // headroom\n    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    // Make sure to not have completedContainers sort the queues here since\n    // we are already inside an iterator loop for the queues and this would\n    // cause an concurrent modification exception.\n    completedContainer(clusterResource, application, nodeToUnreserve,\n        nodeToUnreserve.getReservedContainer(),\n        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n            .getReservedContainer().getContainerId(),\n            SchedulerUtils.UNRESERVED_CONTAINER),\n        RMContainerEventType.RELEASED, null, false);\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, capability-Resource]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, askedResource-Resource, minimumUnreservedResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
          "commitDate": "17/03/15 10:24 AM",
          "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/03/15 11:49 AM",
          "commitNameOld": "e17e5ba9d7e2bd45ba6884f59f8045817594b284",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 13.9,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,41 @@\n   protected boolean findNodeToUnreserve(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      Resource capability) {\n+      Resource askedResource, Resource minimumUnreservedResource) {\n     // need to unreserve some other container first\n-    NodeId idToUnreserve \u003d application.getNodeIdToUnreserve(priority, capability);\n+    NodeId idToUnreserve \u003d\n+        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n+            resourceCalculator, clusterResource);\n     if (idToUnreserve \u003d\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"checked to see if could unreserve for app but nothing \"\n             + \"reserved that matches for this app\");\n       }\n       return false;\n     }\n     FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n     if (nodeToUnreserve \u003d\u003d null) {\n       LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n       return false;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n         + \" on nodeId: \" + idToUnreserve\n         + \" in order to replace reserved application and place it on node: \"\n-        + node.getNodeID() + \" needing: \" + capability);\n+        + node.getNodeID() + \" needing: \" + askedResource);\n     }\n \n     // headroom\n     Resources.addTo(application.getHeadroom(), nodeToUnreserve\n         .getReservedContainer().getReservedResource());\n \n     // Make sure to not have completedContainers sort the queues here since\n     // we are already inside an iterator loop for the queues and this would\n     // cause an concurrent modification exception.\n     completedContainer(clusterResource, application, nodeToUnreserve,\n         nodeToUnreserve.getReservedContainer(),\n         SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n             .getReservedContainer().getContainerId(),\n             SchedulerUtils.UNRESERVED_CONTAINER),\n         RMContainerEventType.RELEASED, null, false);\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected boolean findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      Resource askedResource, Resource minimumUnreservedResource) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d\n        application.getNodeIdToUnreserve(priority, minimumUnreservedResource,\n            resourceCalculator, clusterResource);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return false;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return false;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + askedResource);\n    }\n\n    // headroom\n    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    // Make sure to not have completedContainers sort the queues here since\n    // we are already inside an iterator loop for the queues and this would\n    // cause an concurrent modification exception.\n    completedContainer(clusterResource, application, nodeToUnreserve,\n        nodeToUnreserve.getReservedContainer(),\n        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n            .getReservedContainer().getContainerId(),\n            SchedulerUtils.UNRESERVED_CONTAINER),\n        RMContainerEventType.RELEASED, null, false);\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "9c22065109a77681bc2534063eabe8692fbcb3cd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
      "commitDate": "29/09/14 7:12 AM",
      "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,39 @@\n+  protected boolean findNodeToUnreserve(Resource clusterResource,\n+      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+      Resource capability) {\n+    // need to unreserve some other container first\n+    NodeId idToUnreserve \u003d application.getNodeIdToUnreserve(priority, capability);\n+    if (idToUnreserve \u003d\u003d null) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n+            + \"reserved that matches for this app\");\n+      }\n+      return false;\n+    }\n+    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n+    if (nodeToUnreserve \u003d\u003d null) {\n+      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n+      return false;\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n+        + \" on nodeId: \" + idToUnreserve\n+        + \" in order to replace reserved application and place it on node: \"\n+        + node.getNodeID() + \" needing: \" + capability);\n+    }\n+\n+    // headroom\n+    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n+        .getReservedContainer().getReservedResource());\n+\n+    // Make sure to not have completedContainers sort the queues here since\n+    // we are already inside an iterator loop for the queues and this would\n+    // cause an concurrent modification exception.\n+    completedContainer(clusterResource, application, nodeToUnreserve,\n+        nodeToUnreserve.getReservedContainer(),\n+        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n+            .getReservedContainer().getContainerId(),\n+            SchedulerUtils.UNRESERVED_CONTAINER),\n+        RMContainerEventType.RELEASED, null, false);\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean findNodeToUnreserve(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      Resource capability) {\n    // need to unreserve some other container first\n    NodeId idToUnreserve \u003d application.getNodeIdToUnreserve(priority, capability);\n    if (idToUnreserve \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"checked to see if could unreserve for app but nothing \"\n            + \"reserved that matches for this app\");\n      }\n      return false;\n    }\n    FiCaSchedulerNode nodeToUnreserve \u003d scheduler.getNode(idToUnreserve);\n    if (nodeToUnreserve \u003d\u003d null) {\n      LOG.error(\"node to unreserve doesn\u0027t exist, nodeid: \" + idToUnreserve);\n      return false;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"unreserving for app: \" + application.getApplicationId()\n        + \" on nodeId: \" + idToUnreserve\n        + \" in order to replace reserved application and place it on node: \"\n        + node.getNodeID() + \" needing: \" + capability);\n    }\n\n    // headroom\n    Resources.addTo(application.getHeadroom(), nodeToUnreserve\n        .getReservedContainer().getReservedResource());\n\n    // Make sure to not have completedContainers sort the queues here since\n    // we are already inside an iterator loop for the queues and this would\n    // cause an concurrent modification exception.\n    completedContainer(clusterResource, application, nodeToUnreserve,\n        nodeToUnreserve.getReservedContainer(),\n        SchedulerUtils.createAbnormalContainerStatus(nodeToUnreserve\n            .getReservedContainer().getContainerId(),\n            SchedulerUtils.UNRESERVED_CONTAINER),\n        RMContainerEventType.RELEASED, null, false);\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}