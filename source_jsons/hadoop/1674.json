{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataTransferSaslUtil.java",
  "functionName": "readSaslMessageAndNegotiatedCipherOption",
  "functionId": "readSaslMessageAndNegotiatedCipherOption___in-InputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
  "functionStartLine": 466,
  "functionEndLine": 484,
  "numCommitsSeen": 13,
  "timeTaken": 1987,
  "changeHistory": [
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "58c0bb9ed9f4a2491395b63c68046562a73526c9"
  ],
  "changeHistoryShort": {
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Ymultichange(Yfilerename,Ybodychange)",
    "58c0bb9ed9f4a2491395b63c68046562a73526c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "03/09/15 3:32 PM",
          "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "03/09/15 1:26 PM",
          "commitNameOld": "c2d2c1802a11e3e11a953b23b0eccbf4d107de59",
          "commitAuthorOld": "Jakob Homan",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n       readSaslMessageAndNegotiatedCipherOption(InputStream in)\n           throws IOException {\n     DataTransferEncryptorMessageProto proto \u003d\n         DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));\n     if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {\n       throw new InvalidEncryptionKeyException(proto.getMessage());\n     } else if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR) {\n       throw new IOException(proto.getMessage());\n     } else {\n       byte[] response \u003d proto.getPayload().toByteArray();\n-      List\u003cCipherOption\u003e options \u003d PBHelper.convertCipherOptionProtos(\n+      List\u003cCipherOption\u003e options \u003d PBHelperClient.convertCipherOptionProtos(\n           proto.getCipherOptionList());\n       CipherOption option \u003d null;\n       if (options !\u003d null \u0026\u0026 !options.isEmpty()) {\n         option \u003d options.get(0);\n       }\n       return new SaslResponseWithNegotiatedCipherOption(response, option);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readSaslMessageAndNegotiatedCipherOption(InputStream in)\n          throws IOException {\n    DataTransferEncryptorMessageProto proto \u003d\n        DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));\n    if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {\n      throw new InvalidEncryptionKeyException(proto.getMessage());\n    } else if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR) {\n      throw new IOException(proto.getMessage());\n    } else {\n      byte[] response \u003d proto.getPayload().toByteArray();\n      List\u003cCipherOption\u003e options \u003d PBHelperClient.convertCipherOptionProtos(\n          proto.getCipherOptionList());\n      CipherOption option \u003d null;\n      if (options !\u003d null \u0026\u0026 !options.isEmpty()) {\n        option \u003d options.get(0);\n      }\n      return new SaslResponseWithNegotiatedCipherOption(response, option);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "03/09/15 3:32 PM",
          "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "03/09/15 1:26 PM",
          "commitNameOld": "c2d2c1802a11e3e11a953b23b0eccbf4d107de59",
          "commitAuthorOld": "Jakob Homan",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n       readSaslMessageAndNegotiatedCipherOption(InputStream in)\n           throws IOException {\n     DataTransferEncryptorMessageProto proto \u003d\n         DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));\n     if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {\n       throw new InvalidEncryptionKeyException(proto.getMessage());\n     } else if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR) {\n       throw new IOException(proto.getMessage());\n     } else {\n       byte[] response \u003d proto.getPayload().toByteArray();\n-      List\u003cCipherOption\u003e options \u003d PBHelper.convertCipherOptionProtos(\n+      List\u003cCipherOption\u003e options \u003d PBHelperClient.convertCipherOptionProtos(\n           proto.getCipherOptionList());\n       CipherOption option \u003d null;\n       if (options !\u003d null \u0026\u0026 !options.isEmpty()) {\n         option \u003d options.get(0);\n       }\n       return new SaslResponseWithNegotiatedCipherOption(response, option);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      readSaslMessageAndNegotiatedCipherOption(InputStream in)\n          throws IOException {\n    DataTransferEncryptorMessageProto proto \u003d\n        DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));\n    if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {\n      throw new InvalidEncryptionKeyException(proto.getMessage());\n    } else if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR) {\n      throw new IOException(proto.getMessage());\n    } else {\n      byte[] response \u003d proto.getPayload().toByteArray();\n      List\u003cCipherOption\u003e options \u003d PBHelperClient.convertCipherOptionProtos(\n          proto.getCipherOptionList());\n      CipherOption option \u003d null;\n      if (options !\u003d null \u0026\u0026 !options.isEmpty()) {\n        option \u003d options.get(0);\n      }\n      return new SaslResponseWithNegotiatedCipherOption(response, option);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "58c0bb9ed9f4a2491395b63c68046562a73526c9": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6606. Optimize HDFS Encrypted Transport performance. (yliu)\n",
      "commitDate": "28/10/14 6:11 AM",
      "commitName": "58c0bb9ed9f4a2491395b63c68046562a73526c9",
      "commitAuthor": "yliu",
      "diff": "@@ -0,0 +1,19 @@\n+      readSaslMessageAndNegotiatedCipherOption(InputStream in)\n+          throws IOException {\n+    DataTransferEncryptorMessageProto proto \u003d\n+        DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));\n+    if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {\n+      throw new InvalidEncryptionKeyException(proto.getMessage());\n+    } else if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR) {\n+      throw new IOException(proto.getMessage());\n+    } else {\n+      byte[] response \u003d proto.getPayload().toByteArray();\n+      List\u003cCipherOption\u003e options \u003d PBHelper.convertCipherOptionProtos(\n+          proto.getCipherOptionList());\n+      CipherOption option \u003d null;\n+      if (options !\u003d null \u0026\u0026 !options.isEmpty()) {\n+        option \u003d options.get(0);\n+      }\n+      return new SaslResponseWithNegotiatedCipherOption(response, option);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      readSaslMessageAndNegotiatedCipherOption(InputStream in)\n          throws IOException {\n    DataTransferEncryptorMessageProto proto \u003d\n        DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));\n    if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {\n      throw new InvalidEncryptionKeyException(proto.getMessage());\n    } else if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR) {\n      throw new IOException(proto.getMessage());\n    } else {\n      byte[] response \u003d proto.getPayload().toByteArray();\n      List\u003cCipherOption\u003e options \u003d PBHelper.convertCipherOptionProtos(\n          proto.getCipherOptionList());\n      CipherOption option \u003d null;\n      if (options !\u003d null \u0026\u0026 !options.isEmpty()) {\n        option \u003d options.get(0);\n      }\n      return new SaslResponseWithNegotiatedCipherOption(response, option);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java"
    }
  }
}