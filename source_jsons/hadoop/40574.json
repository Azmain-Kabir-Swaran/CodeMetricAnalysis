{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TargetApplicationsNamespace.java",
  "functionName": "parse",
  "functionId": "parse___namespaceStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/TargetApplicationsNamespace.java",
  "functionStartLine": 222,
  "functionEndLine": 261,
  "numCommitsSeen": 3,
  "timeTaken": 4168,
  "changeHistory": [
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
    "a08921ca6cb1dad98935808c8f474b654f861263",
    "1054b48c27f3158110bd0512afecded36eecb8ad"
  ],
  "changeHistoryShort": {
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "a08921ca6cb1dad98935808c8f474b654f861263": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange)",
    "1054b48c27f3158110bd0512afecded36eecb8ad": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
      "commitDate": "04/04/18 10:51 AM",
      "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
      "commitAuthor": "Konstantinos Karanasos",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
          "commitDate": "04/04/18 10:51 AM",
          "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "04/04/18 9:43 AM",
          "commitNameOld": "42cd367c9308b944bc71de6c07b6c3f028a0d874",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  public static AllocationTagNamespace parse(String namespaceStr)\n+  public static TargetApplicationsNamespace parse(String namespaceStr)\n       throws InvalidAllocationTagsQueryException {\n     // Return the default namespace if no valid string is given.\n     if (Strings.isNullOrEmpty(namespaceStr)) {\n       return new Self();\n     }\n \n     // Normalize the input, escape additional chars.\n     List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n     // The first string should be the prefix.\n     String nsPrefix \u003d nsValues.get(0);\n     AllocationTagNamespaceType allocationTagNamespaceType \u003d\n         fromString(nsPrefix);\n     switch (allocationTagNamespaceType) {\n     case SELF:\n       return new Self();\n     case NOT_SELF:\n       return new NotSelf();\n     case ALL:\n       return new All();\n     case APP_ID:\n       if (nsValues.size() !\u003d 2) {\n         throw new InvalidAllocationTagsQueryException(\n             \"Missing the application ID in the namespace string: \"\n                 + namespaceStr);\n       }\n       String appIDStr \u003d nsValues.get(1);\n       return parseAppID(appIDStr);\n-    case APP_LABEL:\n-      return new AppLabel();\n+    case APP_TAG:\n+      if (nsValues.size() !\u003d 2) {\n+        throw new InvalidAllocationTagsQueryException(\n+            \"Missing the application tag in the namespace string: \"\n+                + namespaceStr);\n+      }\n+      return new AppTag(nsValues.get(1));\n     default:\n       throw new InvalidAllocationTagsQueryException(\n           \"Invalid namespace string \" + namespaceStr);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TargetApplicationsNamespace parse(String namespaceStr)\n      throws InvalidAllocationTagsQueryException {\n    // Return the default namespace if no valid string is given.\n    if (Strings.isNullOrEmpty(namespaceStr)) {\n      return new Self();\n    }\n\n    // Normalize the input, escape additional chars.\n    List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n    // The first string should be the prefix.\n    String nsPrefix \u003d nsValues.get(0);\n    AllocationTagNamespaceType allocationTagNamespaceType \u003d\n        fromString(nsPrefix);\n    switch (allocationTagNamespaceType) {\n    case SELF:\n      return new Self();\n    case NOT_SELF:\n      return new NotSelf();\n    case ALL:\n      return new All();\n    case APP_ID:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application ID in the namespace string: \"\n                + namespaceStr);\n      }\n      String appIDStr \u003d nsValues.get(1);\n      return parseAppID(appIDStr);\n    case APP_TAG:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application tag in the namespace string: \"\n                + namespaceStr);\n      }\n      return new AppTag(nsValues.get(1));\n    default:\n      throw new InvalidAllocationTagsQueryException(\n          \"Invalid namespace string \" + namespaceStr);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/TargetApplicationsNamespace.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagNamespace.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/TargetApplicationsNamespace.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
          "commitDate": "04/04/18 10:51 AM",
          "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "04/04/18 9:43 AM",
          "commitNameOld": "42cd367c9308b944bc71de6c07b6c3f028a0d874",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  public static AllocationTagNamespace parse(String namespaceStr)\n+  public static TargetApplicationsNamespace parse(String namespaceStr)\n       throws InvalidAllocationTagsQueryException {\n     // Return the default namespace if no valid string is given.\n     if (Strings.isNullOrEmpty(namespaceStr)) {\n       return new Self();\n     }\n \n     // Normalize the input, escape additional chars.\n     List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n     // The first string should be the prefix.\n     String nsPrefix \u003d nsValues.get(0);\n     AllocationTagNamespaceType allocationTagNamespaceType \u003d\n         fromString(nsPrefix);\n     switch (allocationTagNamespaceType) {\n     case SELF:\n       return new Self();\n     case NOT_SELF:\n       return new NotSelf();\n     case ALL:\n       return new All();\n     case APP_ID:\n       if (nsValues.size() !\u003d 2) {\n         throw new InvalidAllocationTagsQueryException(\n             \"Missing the application ID in the namespace string: \"\n                 + namespaceStr);\n       }\n       String appIDStr \u003d nsValues.get(1);\n       return parseAppID(appIDStr);\n-    case APP_LABEL:\n-      return new AppLabel();\n+    case APP_TAG:\n+      if (nsValues.size() !\u003d 2) {\n+        throw new InvalidAllocationTagsQueryException(\n+            \"Missing the application tag in the namespace string: \"\n+                + namespaceStr);\n+      }\n+      return new AppTag(nsValues.get(1));\n     default:\n       throw new InvalidAllocationTagsQueryException(\n           \"Invalid namespace string \" + namespaceStr);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TargetApplicationsNamespace parse(String namespaceStr)\n      throws InvalidAllocationTagsQueryException {\n    // Return the default namespace if no valid string is given.\n    if (Strings.isNullOrEmpty(namespaceStr)) {\n      return new Self();\n    }\n\n    // Normalize the input, escape additional chars.\n    List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n    // The first string should be the prefix.\n    String nsPrefix \u003d nsValues.get(0);\n    AllocationTagNamespaceType allocationTagNamespaceType \u003d\n        fromString(nsPrefix);\n    switch (allocationTagNamespaceType) {\n    case SELF:\n      return new Self();\n    case NOT_SELF:\n      return new NotSelf();\n    case ALL:\n      return new All();\n    case APP_ID:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application ID in the namespace string: \"\n                + namespaceStr);\n      }\n      String appIDStr \u003d nsValues.get(1);\n      return parseAppID(appIDStr);\n    case APP_TAG:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application tag in the namespace string: \"\n                + namespaceStr);\n      }\n      return new AppTag(nsValues.get(1));\n    default:\n      throw new InvalidAllocationTagsQueryException(\n          \"Invalid namespace string \" + namespaceStr);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/TargetApplicationsNamespace.java",
          "extendedDetails": {
            "oldValue": "AllocationTagNamespace",
            "newValue": "TargetApplicationsNamespace"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
          "commitDate": "04/04/18 10:51 AM",
          "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "04/04/18 9:43 AM",
          "commitNameOld": "42cd367c9308b944bc71de6c07b6c3f028a0d874",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  public static AllocationTagNamespace parse(String namespaceStr)\n+  public static TargetApplicationsNamespace parse(String namespaceStr)\n       throws InvalidAllocationTagsQueryException {\n     // Return the default namespace if no valid string is given.\n     if (Strings.isNullOrEmpty(namespaceStr)) {\n       return new Self();\n     }\n \n     // Normalize the input, escape additional chars.\n     List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n     // The first string should be the prefix.\n     String nsPrefix \u003d nsValues.get(0);\n     AllocationTagNamespaceType allocationTagNamespaceType \u003d\n         fromString(nsPrefix);\n     switch (allocationTagNamespaceType) {\n     case SELF:\n       return new Self();\n     case NOT_SELF:\n       return new NotSelf();\n     case ALL:\n       return new All();\n     case APP_ID:\n       if (nsValues.size() !\u003d 2) {\n         throw new InvalidAllocationTagsQueryException(\n             \"Missing the application ID in the namespace string: \"\n                 + namespaceStr);\n       }\n       String appIDStr \u003d nsValues.get(1);\n       return parseAppID(appIDStr);\n-    case APP_LABEL:\n-      return new AppLabel();\n+    case APP_TAG:\n+      if (nsValues.size() !\u003d 2) {\n+        throw new InvalidAllocationTagsQueryException(\n+            \"Missing the application tag in the namespace string: \"\n+                + namespaceStr);\n+      }\n+      return new AppTag(nsValues.get(1));\n     default:\n       throw new InvalidAllocationTagsQueryException(\n           \"Invalid namespace string \" + namespaceStr);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static TargetApplicationsNamespace parse(String namespaceStr)\n      throws InvalidAllocationTagsQueryException {\n    // Return the default namespace if no valid string is given.\n    if (Strings.isNullOrEmpty(namespaceStr)) {\n      return new Self();\n    }\n\n    // Normalize the input, escape additional chars.\n    List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n    // The first string should be the prefix.\n    String nsPrefix \u003d nsValues.get(0);\n    AllocationTagNamespaceType allocationTagNamespaceType \u003d\n        fromString(nsPrefix);\n    switch (allocationTagNamespaceType) {\n    case SELF:\n      return new Self();\n    case NOT_SELF:\n      return new NotSelf();\n    case ALL:\n      return new All();\n    case APP_ID:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application ID in the namespace string: \"\n                + namespaceStr);\n      }\n      String appIDStr \u003d nsValues.get(1);\n      return parseAppID(appIDStr);\n    case APP_TAG:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application tag in the namespace string: \"\n                + namespaceStr);\n      }\n      return new AppTag(nsValues.get(1));\n    default:\n      throw new InvalidAllocationTagsQueryException(\n          \"Invalid namespace string \" + namespaceStr);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/TargetApplicationsNamespace.java",
          "extendedDetails": {}
        }
      ]
    },
    "a08921ca6cb1dad98935808c8f474b654f861263": {
      "type": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
      "commitDate": "19/03/18 11:04 AM",
      "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
          "commitDate": "19/03/18 11:04 AM",
          "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/03/18 12:02 AM",
          "commitNameOld": "d67a5e2dec5c60d96b0c216182891cdfd7832ac5",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 0.46,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   public static AllocationTagNamespace parse(String namespaceStr)\n-      throws InvalidAllocationTagException {\n+      throws InvalidAllocationTagsQueryException {\n     // Return the default namespace if no valid string is given.\n     if (Strings.isNullOrEmpty(namespaceStr)) {\n       return new Self();\n     }\n \n     // Normalize the input, escape additional chars.\n     List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n     // The first string should be the prefix.\n     String nsPrefix \u003d nsValues.get(0);\n     AllocationTagNamespaceType allocationTagNamespaceType \u003d\n         fromString(nsPrefix);\n     switch (allocationTagNamespaceType) {\n     case SELF:\n       return new Self();\n     case NOT_SELF:\n       return new NotSelf();\n     case ALL:\n       return new All();\n     case APP_ID:\n       if (nsValues.size() !\u003d 2) {\n-        throw new InvalidAllocationTagException(\n+        throw new InvalidAllocationTagsQueryException(\n             \"Missing the application ID in the namespace string: \"\n                 + namespaceStr);\n       }\n       String appIDStr \u003d nsValues.get(1);\n       return parseAppID(appIDStr);\n     case APP_LABEL:\n       return new AppLabel();\n     default:\n-      throw new InvalidAllocationTagException(\n+      throw new InvalidAllocationTagsQueryException(\n           \"Invalid namespace string \" + namespaceStr);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AllocationTagNamespace parse(String namespaceStr)\n      throws InvalidAllocationTagsQueryException {\n    // Return the default namespace if no valid string is given.\n    if (Strings.isNullOrEmpty(namespaceStr)) {\n      return new Self();\n    }\n\n    // Normalize the input, escape additional chars.\n    List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n    // The first string should be the prefix.\n    String nsPrefix \u003d nsValues.get(0);\n    AllocationTagNamespaceType allocationTagNamespaceType \u003d\n        fromString(nsPrefix);\n    switch (allocationTagNamespaceType) {\n    case SELF:\n      return new Self();\n    case NOT_SELF:\n      return new NotSelf();\n    case ALL:\n      return new All();\n    case APP_ID:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application ID in the namespace string: \"\n                + namespaceStr);\n      }\n      String appIDStr \u003d nsValues.get(1);\n      return parseAppID(appIDStr);\n    case APP_LABEL:\n      return new AppLabel();\n    default:\n      throw new InvalidAllocationTagsQueryException(\n          \"Invalid namespace string \" + namespaceStr);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagNamespace.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/AllocationTagNamespace.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagNamespace.java"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
          "commitDate": "19/03/18 11:04 AM",
          "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/03/18 12:02 AM",
          "commitNameOld": "d67a5e2dec5c60d96b0c216182891cdfd7832ac5",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 0.46,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   public static AllocationTagNamespace parse(String namespaceStr)\n-      throws InvalidAllocationTagException {\n+      throws InvalidAllocationTagsQueryException {\n     // Return the default namespace if no valid string is given.\n     if (Strings.isNullOrEmpty(namespaceStr)) {\n       return new Self();\n     }\n \n     // Normalize the input, escape additional chars.\n     List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n     // The first string should be the prefix.\n     String nsPrefix \u003d nsValues.get(0);\n     AllocationTagNamespaceType allocationTagNamespaceType \u003d\n         fromString(nsPrefix);\n     switch (allocationTagNamespaceType) {\n     case SELF:\n       return new Self();\n     case NOT_SELF:\n       return new NotSelf();\n     case ALL:\n       return new All();\n     case APP_ID:\n       if (nsValues.size() !\u003d 2) {\n-        throw new InvalidAllocationTagException(\n+        throw new InvalidAllocationTagsQueryException(\n             \"Missing the application ID in the namespace string: \"\n                 + namespaceStr);\n       }\n       String appIDStr \u003d nsValues.get(1);\n       return parseAppID(appIDStr);\n     case APP_LABEL:\n       return new AppLabel();\n     default:\n-      throw new InvalidAllocationTagException(\n+      throw new InvalidAllocationTagsQueryException(\n           \"Invalid namespace string \" + namespaceStr);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AllocationTagNamespace parse(String namespaceStr)\n      throws InvalidAllocationTagsQueryException {\n    // Return the default namespace if no valid string is given.\n    if (Strings.isNullOrEmpty(namespaceStr)) {\n      return new Self();\n    }\n\n    // Normalize the input, escape additional chars.\n    List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n    // The first string should be the prefix.\n    String nsPrefix \u003d nsValues.get(0);\n    AllocationTagNamespaceType allocationTagNamespaceType \u003d\n        fromString(nsPrefix);\n    switch (allocationTagNamespaceType) {\n    case SELF:\n      return new Self();\n    case NOT_SELF:\n      return new NotSelf();\n    case ALL:\n      return new All();\n    case APP_ID:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application ID in the namespace string: \"\n                + namespaceStr);\n      }\n      String appIDStr \u003d nsValues.get(1);\n      return parseAppID(appIDStr);\n    case APP_LABEL:\n      return new AppLabel();\n    default:\n      throw new InvalidAllocationTagsQueryException(\n          \"Invalid namespace string \" + namespaceStr);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagNamespace.java",
          "extendedDetails": {
            "oldValue": "[InvalidAllocationTagException]",
            "newValue": "[InvalidAllocationTagsQueryException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
          "commitDate": "19/03/18 11:04 AM",
          "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/03/18 12:02 AM",
          "commitNameOld": "d67a5e2dec5c60d96b0c216182891cdfd7832ac5",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 0.46,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   public static AllocationTagNamespace parse(String namespaceStr)\n-      throws InvalidAllocationTagException {\n+      throws InvalidAllocationTagsQueryException {\n     // Return the default namespace if no valid string is given.\n     if (Strings.isNullOrEmpty(namespaceStr)) {\n       return new Self();\n     }\n \n     // Normalize the input, escape additional chars.\n     List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n     // The first string should be the prefix.\n     String nsPrefix \u003d nsValues.get(0);\n     AllocationTagNamespaceType allocationTagNamespaceType \u003d\n         fromString(nsPrefix);\n     switch (allocationTagNamespaceType) {\n     case SELF:\n       return new Self();\n     case NOT_SELF:\n       return new NotSelf();\n     case ALL:\n       return new All();\n     case APP_ID:\n       if (nsValues.size() !\u003d 2) {\n-        throw new InvalidAllocationTagException(\n+        throw new InvalidAllocationTagsQueryException(\n             \"Missing the application ID in the namespace string: \"\n                 + namespaceStr);\n       }\n       String appIDStr \u003d nsValues.get(1);\n       return parseAppID(appIDStr);\n     case APP_LABEL:\n       return new AppLabel();\n     default:\n-      throw new InvalidAllocationTagException(\n+      throw new InvalidAllocationTagsQueryException(\n           \"Invalid namespace string \" + namespaceStr);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AllocationTagNamespace parse(String namespaceStr)\n      throws InvalidAllocationTagsQueryException {\n    // Return the default namespace if no valid string is given.\n    if (Strings.isNullOrEmpty(namespaceStr)) {\n      return new Self();\n    }\n\n    // Normalize the input, escape additional chars.\n    List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n    // The first string should be the prefix.\n    String nsPrefix \u003d nsValues.get(0);\n    AllocationTagNamespaceType allocationTagNamespaceType \u003d\n        fromString(nsPrefix);\n    switch (allocationTagNamespaceType) {\n    case SELF:\n      return new Self();\n    case NOT_SELF:\n      return new NotSelf();\n    case ALL:\n      return new All();\n    case APP_ID:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Missing the application ID in the namespace string: \"\n                + namespaceStr);\n      }\n      String appIDStr \u003d nsValues.get(1);\n      return parseAppID(appIDStr);\n    case APP_LABEL:\n      return new AppLabel();\n    default:\n      throw new InvalidAllocationTagsQueryException(\n          \"Invalid namespace string \" + namespaceStr);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagNamespace.java",
          "extendedDetails": {}
        }
      ]
    },
    "1054b48c27f3158110bd0512afecded36eecb8ad": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7972. Support inter-app placement constraints for allocation tags by application ID. (Weiwei Yang via asuresh)\n",
      "commitDate": "05/03/18 11:24 AM",
      "commitName": "1054b48c27f3158110bd0512afecded36eecb8ad",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,35 @@\n+  public static AllocationTagNamespace parse(String namespaceStr)\n+      throws InvalidAllocationTagException {\n+    // Return the default namespace if no valid string is given.\n+    if (Strings.isNullOrEmpty(namespaceStr)) {\n+      return new Self();\n+    }\n+\n+    // Normalize the input, escape additional chars.\n+    List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n+    // The first string should be the prefix.\n+    String nsPrefix \u003d nsValues.get(0);\n+    AllocationTagNamespaceType allocationTagNamespaceType \u003d\n+        fromString(nsPrefix);\n+    switch (allocationTagNamespaceType) {\n+    case SELF:\n+      return new Self();\n+    case NOT_SELF:\n+      return new NotSelf();\n+    case ALL:\n+      return new All();\n+    case APP_ID:\n+      if (nsValues.size() !\u003d 2) {\n+        throw new InvalidAllocationTagException(\n+            \"Missing the application ID in the namespace string: \"\n+                + namespaceStr);\n+      }\n+      String appIDStr \u003d nsValues.get(1);\n+      return parseAppID(appIDStr);\n+    case APP_LABEL:\n+      return new AppLabel();\n+    default:\n+      throw new InvalidAllocationTagException(\n+          \"Invalid namespace string \" + namespaceStr);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AllocationTagNamespace parse(String namespaceStr)\n      throws InvalidAllocationTagException {\n    // Return the default namespace if no valid string is given.\n    if (Strings.isNullOrEmpty(namespaceStr)) {\n      return new Self();\n    }\n\n    // Normalize the input, escape additional chars.\n    List\u003cString\u003e nsValues \u003d normalize(namespaceStr);\n    // The first string should be the prefix.\n    String nsPrefix \u003d nsValues.get(0);\n    AllocationTagNamespaceType allocationTagNamespaceType \u003d\n        fromString(nsPrefix);\n    switch (allocationTagNamespaceType) {\n    case SELF:\n      return new Self();\n    case NOT_SELF:\n      return new NotSelf();\n    case ALL:\n      return new All();\n    case APP_ID:\n      if (nsValues.size() !\u003d 2) {\n        throw new InvalidAllocationTagException(\n            \"Missing the application ID in the namespace string: \"\n                + namespaceStr);\n      }\n      String appIDStr \u003d nsValues.get(1);\n      return parseAppID(appIDStr);\n    case APP_LABEL:\n      return new AppLabel();\n    default:\n      throw new InvalidAllocationTagException(\n          \"Invalid namespace string \" + namespaceStr);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/AllocationTagNamespace.java"
    }
  }
}