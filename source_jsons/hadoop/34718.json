{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMTokenSecretManagerInNM.java",
  "functionName": "retrievePassword",
  "functionId": "retrievePassword___identifier-NMTokenIdentifier",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMTokenSecretManagerInNM.java",
  "functionStartLine": 158,
  "functionEndLine": 194,
  "numCommitsSeen": 9,
  "timeTaken": 1440,
  "changeHistory": [
    "243bcd367ff3130d74676280233041f88aca62a5",
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb"
  ],
  "changeHistoryShort": {
    "243bcd367ff3130d74676280233041f88aca62a5": "Ybodychange",
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/06/13 5:06 PM",
      "commitNameOld": "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.97,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n-  public synchronized byte[] retrievePassword(\n-      NMTokenIdentifier identifier) throws InvalidToken {\n-    int keyId \u003d identifier.getMastKeyId();\n+  public synchronized byte[] retrievePassword(NMTokenIdentifier identifier)\n+      throws InvalidToken {\n+    int keyId \u003d identifier.getKeyId();\n     ApplicationAttemptId appAttemptId \u003d identifier.getApplicationAttemptId();\n-    \n+\n     /*\n-     * MasterKey used for retrieving password will be as follows.\n-     * 1) By default older saved master key will be used.\n-     * 2) If identifier\u0027s master key id matches that of previous master key\n-     * id then previous key will be used.\n-     * 3) If identifier\u0027s master key id matches that of current master key\n-     * id then current key will be used.\n+     * MasterKey used for retrieving password will be as follows. 1) By default\n+     * older saved master key will be used. 2) If identifier\u0027s master key id\n+     * matches that of previous master key id then previous key will be used. 3)\n+     * If identifier\u0027s master key id matches that of current master key id then\n+     * current key will be used.\n      */\n     MasterKeyData oldMasterKey \u003d oldMasterKeys.get(appAttemptId);\n     MasterKeyData masterKeyToUse \u003d oldMasterKey;\n     if (previousMasterKey !\u003d null\n         \u0026\u0026 keyId \u003d\u003d previousMasterKey.getMasterKey().getKeyId()) {\n       masterKeyToUse \u003d previousMasterKey;\n-    } else if ( keyId \u003d\u003d currentMasterKey.getMasterKey().getKeyId()) {\n+    } else if (keyId \u003d\u003d currentMasterKey.getMasterKey().getKeyId()) {\n       masterKeyToUse \u003d currentMasterKey;\n     }\n     \n+    if (nodeId !\u003d null \u0026\u0026 !identifier.getNodeId().equals(nodeId)) {\n+      throw new InvalidToken(\"Given NMToken for application : \"\n+          + appAttemptId.toString() + \" is not valid for current node manager.\"\n+          + \"expected : \" + nodeId.toString() + \" found : \"\n+          + identifier.getNodeId().toString());\n+    }\n+    \n     if (masterKeyToUse !\u003d null) {\n       byte[] password \u003d retrivePasswordInternal(identifier, masterKeyToUse);\n-      if (masterKeyToUse.getMasterKey().getKeyId() !\u003d oldMasterKey\n-        .getMasterKey().getKeyId()) {\n-        oldMasterKeys.put(appAttemptId, masterKeyToUse);\n-      }\n+      LOG.debug(\"NMToken password retrieved successfully!!\");\n       return password;\n     }\n-    \n+\n     throw new InvalidToken(\"Given NMToken for application : \"\n         + appAttemptId.toString() + \" seems to have been generated illegally.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized byte[] retrievePassword(NMTokenIdentifier identifier)\n      throws InvalidToken {\n    int keyId \u003d identifier.getKeyId();\n    ApplicationAttemptId appAttemptId \u003d identifier.getApplicationAttemptId();\n\n    /*\n     * MasterKey used for retrieving password will be as follows. 1) By default\n     * older saved master key will be used. 2) If identifier\u0027s master key id\n     * matches that of previous master key id then previous key will be used. 3)\n     * If identifier\u0027s master key id matches that of current master key id then\n     * current key will be used.\n     */\n    MasterKeyData oldMasterKey \u003d oldMasterKeys.get(appAttemptId);\n    MasterKeyData masterKeyToUse \u003d oldMasterKey;\n    if (previousMasterKey !\u003d null\n        \u0026\u0026 keyId \u003d\u003d previousMasterKey.getMasterKey().getKeyId()) {\n      masterKeyToUse \u003d previousMasterKey;\n    } else if (keyId \u003d\u003d currentMasterKey.getMasterKey().getKeyId()) {\n      masterKeyToUse \u003d currentMasterKey;\n    }\n    \n    if (nodeId !\u003d null \u0026\u0026 !identifier.getNodeId().equals(nodeId)) {\n      throw new InvalidToken(\"Given NMToken for application : \"\n          + appAttemptId.toString() + \" is not valid for current node manager.\"\n          + \"expected : \" + nodeId.toString() + \" found : \"\n          + identifier.getNodeId().toString());\n    }\n    \n    if (masterKeyToUse !\u003d null) {\n      byte[] password \u003d retrivePasswordInternal(identifier, masterKeyToUse);\n      LOG.debug(\"NMToken password retrieved successfully!!\");\n      return password;\n    }\n\n    throw new InvalidToken(\"Given NMToken for application : \"\n        + appAttemptId.toString() + \" seems to have been generated illegally.\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMTokenSecretManagerInNM.java",
      "extendedDetails": {}
    },
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-692. Creating NMToken master key on RM and sharing it with NM as a part of RM-NM heartbeat. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492907 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 5:06 PM",
      "commitName": "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,34 @@\n+  public synchronized byte[] retrievePassword(\n+      NMTokenIdentifier identifier) throws InvalidToken {\n+    int keyId \u003d identifier.getMastKeyId();\n+    ApplicationAttemptId appAttemptId \u003d identifier.getApplicationAttemptId();\n+    \n+    /*\n+     * MasterKey used for retrieving password will be as follows.\n+     * 1) By default older saved master key will be used.\n+     * 2) If identifier\u0027s master key id matches that of previous master key\n+     * id then previous key will be used.\n+     * 3) If identifier\u0027s master key id matches that of current master key\n+     * id then current key will be used.\n+     */\n+    MasterKeyData oldMasterKey \u003d oldMasterKeys.get(appAttemptId);\n+    MasterKeyData masterKeyToUse \u003d oldMasterKey;\n+    if (previousMasterKey !\u003d null\n+        \u0026\u0026 keyId \u003d\u003d previousMasterKey.getMasterKey().getKeyId()) {\n+      masterKeyToUse \u003d previousMasterKey;\n+    } else if ( keyId \u003d\u003d currentMasterKey.getMasterKey().getKeyId()) {\n+      masterKeyToUse \u003d currentMasterKey;\n+    }\n+    \n+    if (masterKeyToUse !\u003d null) {\n+      byte[] password \u003d retrivePasswordInternal(identifier, masterKeyToUse);\n+      if (masterKeyToUse.getMasterKey().getKeyId() !\u003d oldMasterKey\n+        .getMasterKey().getKeyId()) {\n+        oldMasterKeys.put(appAttemptId, masterKeyToUse);\n+      }\n+      return password;\n+    }\n+    \n+    throw new InvalidToken(\"Given NMToken for application : \"\n+        + appAttemptId.toString() + \" seems to have been generated illegally.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized byte[] retrievePassword(\n      NMTokenIdentifier identifier) throws InvalidToken {\n    int keyId \u003d identifier.getMastKeyId();\n    ApplicationAttemptId appAttemptId \u003d identifier.getApplicationAttemptId();\n    \n    /*\n     * MasterKey used for retrieving password will be as follows.\n     * 1) By default older saved master key will be used.\n     * 2) If identifier\u0027s master key id matches that of previous master key\n     * id then previous key will be used.\n     * 3) If identifier\u0027s master key id matches that of current master key\n     * id then current key will be used.\n     */\n    MasterKeyData oldMasterKey \u003d oldMasterKeys.get(appAttemptId);\n    MasterKeyData masterKeyToUse \u003d oldMasterKey;\n    if (previousMasterKey !\u003d null\n        \u0026\u0026 keyId \u003d\u003d previousMasterKey.getMasterKey().getKeyId()) {\n      masterKeyToUse \u003d previousMasterKey;\n    } else if ( keyId \u003d\u003d currentMasterKey.getMasterKey().getKeyId()) {\n      masterKeyToUse \u003d currentMasterKey;\n    }\n    \n    if (masterKeyToUse !\u003d null) {\n      byte[] password \u003d retrivePasswordInternal(identifier, masterKeyToUse);\n      if (masterKeyToUse.getMasterKey().getKeyId() !\u003d oldMasterKey\n        .getMasterKey().getKeyId()) {\n        oldMasterKeys.put(appAttemptId, masterKeyToUse);\n      }\n      return password;\n    }\n    \n    throw new InvalidToken(\"Given NMToken for application : \"\n        + appAttemptId.toString() + \" seems to have been generated illegally.\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMTokenSecretManagerInNM.java"
    }
  }
}