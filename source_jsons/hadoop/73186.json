{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpServer2.java",
  "functionName": "initializeWebServer",
  "functionId": "initializeWebServer___name-String__hostName-String__conf-Configuration__pathSpecs-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
  "functionStartLine": 638,
  "functionEndLine": 685,
  "numCommitsSeen": 89,
  "timeTaken": 5335,
  "changeHistory": [
    "3d41f330186f6481850b46e0c345d3ecf7b1b818",
    "8bda91d20ab248a0d262d396646861113195f3ed",
    "294695dd57cb75f2756a31a54264bdd37b32bb01",
    "aa23d49fc8b9c2537529dbdc13512000e2ab295a",
    "9130af3f74a7923fff3f80360ba043ab2c6558a9",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "ef30bf3c3f2688f803b3e9d16cc7e9f61a1ab0de",
    "2860eeb14a958a8861b9ad3d6bd685df48da8cd3",
    "b44b648d0848f7bb370524437cc5f7d718f183bd",
    "95ebf9ecc4809b8a977a0a847515649486a004c4",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "2214871d916fdcae62aa51afbb5fd571f2808745"
  ],
  "changeHistoryShort": {
    "3d41f330186f6481850b46e0c345d3ecf7b1b818": "Ybodychange",
    "8bda91d20ab248a0d262d396646861113195f3ed": "Ybodychange",
    "294695dd57cb75f2756a31a54264bdd37b32bb01": "Ybodychange",
    "aa23d49fc8b9c2537529dbdc13512000e2ab295a": "Ybodychange",
    "9130af3f74a7923fff3f80360ba043ab2c6558a9": "Ybodychange",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ybodychange",
    "ef30bf3c3f2688f803b3e9d16cc7e9f61a1ab0de": "Ybodychange",
    "2860eeb14a958a8861b9ad3d6bd685df48da8cd3": "Yexceptionschange",
    "b44b648d0848f7bb370524437cc5f7d718f183bd": "Ybodychange",
    "95ebf9ecc4809b8a977a0a847515649486a004c4": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Yfilerename",
    "2214871d916fdcae62aa51afbb5fd571f2808745": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3d41f330186f6481850b46e0c345d3ecf7b1b818": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16152. Upgrade Eclipse Jetty version to 9.4.x. Contributed by Yuming Wang, Siyao Meng.\n\nCo-authored-By: Siyao Meng \u003csmeng@cloudera.com\u003e\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "18/10/19 8:25 AM",
      "commitName": "3d41f330186f6481850b46e0c345d3ecf7b1b818",
      "commitAuthor": "Yuming Wang",
      "commitDateOld": "15/10/19 1:55 PM",
      "commitNameOld": "c39e9fc9a3ce7bf6f627c003526fa903a69c2646",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,48 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n \n     QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n     threadPool.setDaemon(true);\n     if (maxThreads !\u003d -1) {\n       threadPool.setMaxThreads(maxThreads);\n     }\n \n-    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n-    if (sm instanceof AbstractSessionManager) {\n-      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n-      asm.setHttpOnly(true);\n-      asm.getSessionCookieConfig().setSecure(true);\n-    }\n+    SessionHandler handler \u003d webAppContext.getSessionHandler();\n+    handler.setHttpOnly(true);\n+    handler.getSessionCookieConfig().setSecure(true);\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     handlers.addHandler(contexts);\n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       handlers.addHandler(requestLogHandler);\n     }\n     handlers.addHandler(webAppContext);\n     final String appDir \u003d getWebAppsPath(name);\n     addDefaultApps(contexts, appDir, conf);\n     webServer.setHandler(handlers);\n \n     Map\u003cString, String\u003e xFrameParams \u003d setHeaders(conf);\n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n     addPrometheusServlet(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads !\u003d -1) {\n      threadPool.setMaxThreads(maxThreads);\n    }\n\n    SessionHandler handler \u003d webAppContext.getSessionHandler();\n    handler.setHttpOnly(true);\n    handler.getSessionCookieConfig().setSecure(true);\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir \u003d getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map\u003cString, String\u003e xFrameParams \u003d setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n    addPrometheusServlet(conf);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "8bda91d20ab248a0d262d396646861113195f3ed": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16398. Exports Hadoop metrics to Prometheus (#1170)\n\n",
      "commitDate": "31/07/19 10:11 AM",
      "commitName": "8bda91d20ab248a0d262d396646861113195f3ed",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "05/06/19 3:55 PM",
      "commitNameOld": "294695dd57cb75f2756a31a54264bdd37b32bb01",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 55.76,
      "commitsBetweenForRepo": 456,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n \n     QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n     threadPool.setDaemon(true);\n     if (maxThreads !\u003d -1) {\n       threadPool.setMaxThreads(maxThreads);\n     }\n \n     SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n     if (sm instanceof AbstractSessionManager) {\n       AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n       asm.setHttpOnly(true);\n       asm.getSessionCookieConfig().setSecure(true);\n     }\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     handlers.addHandler(contexts);\n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       handlers.addHandler(requestLogHandler);\n     }\n     handlers.addHandler(webAppContext);\n     final String appDir \u003d getWebAppsPath(name);\n     addDefaultApps(contexts, appDir, conf);\n     webServer.setHandler(handlers);\n \n     Map\u003cString, String\u003e xFrameParams \u003d setHeaders(conf);\n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n+    addPrometheusServlet(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads !\u003d -1) {\n      threadPool.setMaxThreads(maxThreads);\n    }\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.getSessionCookieConfig().setSecure(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir \u003d getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map\u003cString, String\u003e xFrameParams \u003d setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n    addPrometheusServlet(conf);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "294695dd57cb75f2756a31a54264bdd37b32bb01": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16314.  Make sure all web end points are covered by the same authentication filter.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "05/06/19 3:55 PM",
      "commitName": "294695dd57cb75f2756a31a54264bdd37b32bb01",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/01/19 2:54 PM",
      "commitNameOld": "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 152.0,
      "commitsBetweenForRepo": 1072,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,50 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n \n     QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n     threadPool.setDaemon(true);\n     if (maxThreads !\u003d -1) {\n       threadPool.setMaxThreads(maxThreads);\n     }\n \n     SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n     if (sm instanceof AbstractSessionManager) {\n       AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n       asm.setHttpOnly(true);\n       asm.getSessionCookieConfig().setSecure(true);\n     }\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     handlers.addHandler(contexts);\n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       handlers.addHandler(requestLogHandler);\n     }\n     handlers.addHandler(webAppContext);\n     final String appDir \u003d getWebAppsPath(name);\n     addDefaultApps(contexts, appDir, conf);\n     webServer.setHandler(handlers);\n \n     Map\u003cString, String\u003e xFrameParams \u003d setHeaders(conf);\n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n-\n-    if (pathSpecs !\u003d null) {\n-      for (String path : pathSpecs) {\n-        LOG.info(\"adding path spec: \" + path);\n-        addFilterPathMapping(path, webAppContext);\n-      }\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads !\u003d -1) {\n      threadPool.setMaxThreads(maxThreads);\n    }\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.getSessionCookieConfig().setSecure(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir \u003d getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map\u003cString, String\u003e xFrameParams \u003d setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "aa23d49fc8b9c2537529dbdc13512000e2ab295a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15457. Add Security-Related HTTP Response Header in WEBUIs. (kanwaljeets via rkanter)\n",
      "commitDate": "23/05/18 10:24 AM",
      "commitName": "aa23d49fc8b9c2537529dbdc13512000e2ab295a",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "14/03/18 1:36 PM",
      "commitNameOld": "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 69.87,
      "commitsBetweenForRepo": 1117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,57 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n \n     QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n     threadPool.setDaemon(true);\n     if (maxThreads !\u003d -1) {\n       threadPool.setMaxThreads(maxThreads);\n     }\n \n     SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n     if (sm instanceof AbstractSessionManager) {\n       AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n       asm.setHttpOnly(true);\n       asm.getSessionCookieConfig().setSecure(true);\n     }\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     handlers.addHandler(contexts);\n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       handlers.addHandler(requestLogHandler);\n     }\n     handlers.addHandler(webAppContext);\n     final String appDir \u003d getWebAppsPath(name);\n     addDefaultApps(contexts, appDir, conf);\n     webServer.setHandler(handlers);\n \n-    Map\u003cString, String\u003e xFrameParams \u003d new HashMap\u003c\u003e();\n-    xFrameParams.put(X_FRAME_ENABLED,\n-        String.valueOf(this.xFrameOptionIsEnabled));\n-    xFrameParams.put(X_FRAME_VALUE,  this.xFrameOption.toString());\n+    Map\u003cString, String\u003e xFrameParams \u003d setHeaders(conf);\n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n \n     if (pathSpecs !\u003d null) {\n       for (String path : pathSpecs) {\n         LOG.info(\"adding path spec: \" + path);\n         addFilterPathMapping(path, webAppContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads !\u003d -1) {\n      threadPool.setMaxThreads(maxThreads);\n    }\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.getSessionCookieConfig().setSecure(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir \u003d getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map\u003cString, String\u003e xFrameParams \u003d setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "9130af3f74a7923fff3f80360ba043ab2c6558a9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13955. Replace deprecated HttpServer2 and SSLFactory constants. Contributed by John Zhuge.\n",
      "commitDate": "18/01/17 1:11 AM",
      "commitName": "9130af3f74a7923fff3f80360ba043ab2c6558a9",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "05/01/17 5:21 PM",
      "commitNameOld": "5d182949badb2eb80393de7ba3838102d006488b",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 12.33,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n-    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n+    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n \n     QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n     threadPool.setDaemon(true);\n     if (maxThreads !\u003d -1) {\n       threadPool.setMaxThreads(maxThreads);\n     }\n \n     SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n     if (sm instanceof AbstractSessionManager) {\n       AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n       asm.setHttpOnly(true);\n       asm.getSessionCookieConfig().setSecure(true);\n     }\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     handlers.addHandler(contexts);\n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       handlers.addHandler(requestLogHandler);\n     }\n     handlers.addHandler(webAppContext);\n     final String appDir \u003d getWebAppsPath(name);\n     addDefaultApps(contexts, appDir, conf);\n     webServer.setHandler(handlers);\n \n     Map\u003cString, String\u003e xFrameParams \u003d new HashMap\u003c\u003e();\n     xFrameParams.put(X_FRAME_ENABLED,\n         String.valueOf(this.xFrameOptionIsEnabled));\n     xFrameParams.put(X_FRAME_VALUE,  this.xFrameOption.toString());\n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n \n     if (pathSpecs !\u003d null) {\n       for (String path : pathSpecs) {\n         LOG.info(\"adding path spec: \" + path);\n         addFilterPathMapping(path, webAppContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads !\u003d -1) {\n      threadPool.setMaxThreads(maxThreads);\n    }\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.getSessionCookieConfig().setSecure(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir \u003d getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map\u003cString, String\u003e xFrameParams \u003d new HashMap\u003c\u003e();\n    xFrameParams.put(X_FRAME_ENABLED,\n        String.valueOf(this.xFrameOptionIsEnabled));\n    xFrameParams.put(X_FRAME_VALUE,  this.xFrameOption.toString());\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "19/08/16 9:22 AM",
      "commitNameOld": "03a9343d5798384b66fbd21e1e028acaf55b00e9",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 69.28,
      "commitsBetweenForRepo": 490,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,60 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n-    QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n-        : new QueuedThreadPool(maxThreads);\n+\n+    QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n     threadPool.setDaemon(true);\n-    webServer.setThreadPool(threadPool);\n+    if (maxThreads !\u003d -1) {\n+      threadPool.setMaxThreads(maxThreads);\n+    }\n \n     SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n     if (sm instanceof AbstractSessionManager) {\n       AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n       asm.setHttpOnly(true);\n-      asm.setSecureCookies(true);\n+      asm.getSessionCookieConfig().setSecure(true);\n     }\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n+    handlers.addHandler(contexts);\n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n-      HandlerCollection handlers \u003d new HandlerCollection();\n-      handlers.setHandlers(new Handler[] {contexts, requestLogHandler});\n-      webServer.setHandler(handlers);\n-    } else {\n-      webServer.setHandler(contexts);\n+      handlers.addHandler(requestLogHandler);\n     }\n-\n+    handlers.addHandler(webAppContext);\n     final String appDir \u003d getWebAppsPath(name);\n-\n-    webServer.addHandler(webAppContext);\n-\n     addDefaultApps(contexts, appDir, conf);\n+    webServer.setHandler(handlers);\n \n     Map\u003cString, String\u003e xFrameParams \u003d new HashMap\u003c\u003e();\n     xFrameParams.put(X_FRAME_ENABLED,\n         String.valueOf(this.xFrameOptionIsEnabled));\n     xFrameParams.put(X_FRAME_VALUE,  this.xFrameOption.toString());\n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n \n     if (pathSpecs !\u003d null) {\n       for (String path : pathSpecs) {\n         LOG.info(\"adding path spec: \" + path);\n         addFilterPathMapping(path, webAppContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool \u003d (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads !\u003d -1) {\n      threadPool.setMaxThreads(maxThreads);\n    }\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.getSessionCookieConfig().setSecure(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir \u003d getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map\u003cString, String\u003e xFrameParams \u003d new HashMap\u003c\u003e();\n    xFrameParams.put(X_FRAME_ENABLED,\n        String.valueOf(this.xFrameOptionIsEnabled));\n    xFrameParams.put(X_FRAME_VALUE,  this.xFrameOption.toString());\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "ef30bf3c3f2688f803b3e9d16cc7e9f61a1ab0de": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13352. Make X-FRAME-OPTIONS configurable in HttpServer2. Contributed by Anu Engineer.\n",
      "commitDate": "08/07/16 2:17 PM",
      "commitName": "ef30bf3c3f2688f803b3e9d16cc7e9f61a1ab0de",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "04/05/16 6:52 AM",
      "commitNameOld": "36972d61d1cf0b8248a4887df780d9863b27b7c1",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 65.31,
      "commitsBetweenForRepo": 452,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n     QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n         : new QueuedThreadPool(maxThreads);\n     threadPool.setDaemon(true);\n     webServer.setThreadPool(threadPool);\n \n     SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n     if (sm instanceof AbstractSessionManager) {\n       AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n       asm.setHttpOnly(true);\n       asm.setSecureCookies(true);\n     }\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       HandlerCollection handlers \u003d new HandlerCollection();\n       handlers.setHandlers(new Handler[] {contexts, requestLogHandler});\n       webServer.setHandler(handlers);\n     } else {\n       webServer.setHandler(contexts);\n     }\n \n     final String appDir \u003d getWebAppsPath(name);\n \n     webServer.addHandler(webAppContext);\n \n     addDefaultApps(contexts, appDir, conf);\n \n-    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n+    Map\u003cString, String\u003e xFrameParams \u003d new HashMap\u003c\u003e();\n+    xFrameParams.put(X_FRAME_ENABLED,\n+        String.valueOf(this.xFrameOptionIsEnabled));\n+    xFrameParams.put(X_FRAME_VALUE,  this.xFrameOption.toString());\n+    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n \n     if (pathSpecs !\u003d null) {\n       for (String path : pathSpecs) {\n         LOG.info(\"adding path spec: \" + path);\n         addFilterPathMapping(path, webAppContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n    QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n        : new QueuedThreadPool(maxThreads);\n    threadPool.setDaemon(true);\n    webServer.setThreadPool(threadPool);\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.setSecureCookies(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      HandlerCollection handlers \u003d new HandlerCollection();\n      handlers.setHandlers(new Handler[] {contexts, requestLogHandler});\n      webServer.setHandler(handlers);\n    } else {\n      webServer.setHandler(contexts);\n    }\n\n    final String appDir \u003d getWebAppsPath(name);\n\n    webServer.addHandler(webAppContext);\n\n    addDefaultApps(contexts, appDir, conf);\n\n    Map\u003cString, String\u003e xFrameParams \u003d new HashMap\u003c\u003e();\n    xFrameParams.put(X_FRAME_ENABLED,\n        String.valueOf(this.xFrameOptionIsEnabled));\n    xFrameParams.put(X_FRAME_VALUE,  this.xFrameOption.toString());\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "2860eeb14a958a8861b9ad3d6bd685df48da8cd3": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-7555. Remove the support of unmanaged connectors in HttpServer2. Contributed by Haohui Mai.\n",
      "commitDate": "21/12/14 2:45 PM",
      "commitName": "2860eeb14a958a8861b9ad3d6bd685df48da8cd3",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "11/12/14 4:42 PM",
      "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 9.92,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n-      throws FileNotFoundException, IOException {\n+      throws IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n     QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n         : new QueuedThreadPool(maxThreads);\n     threadPool.setDaemon(true);\n     webServer.setThreadPool(threadPool);\n \n     SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n     if (sm instanceof AbstractSessionManager) {\n       AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n       asm.setHttpOnly(true);\n       asm.setSecureCookies(true);\n     }\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       HandlerCollection handlers \u003d new HandlerCollection();\n       handlers.setHandlers(new Handler[] {contexts, requestLogHandler});\n       webServer.setHandler(handlers);\n     } else {\n       webServer.setHandler(contexts);\n     }\n \n     final String appDir \u003d getWebAppsPath(name);\n \n     webServer.addHandler(webAppContext);\n \n     addDefaultApps(contexts, appDir, conf);\n \n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n \n     if (pathSpecs !\u003d null) {\n       for (String path : pathSpecs) {\n         LOG.info(\"adding path spec: \" + path);\n         addFilterPathMapping(path, webAppContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n    QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n        : new QueuedThreadPool(maxThreads);\n    threadPool.setDaemon(true);\n    webServer.setThreadPool(threadPool);\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.setSecureCookies(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      HandlerCollection handlers \u003d new HandlerCollection();\n      handlers.setHandlers(new Handler[] {contexts, requestLogHandler});\n      webServer.setHandler(handlers);\n    } else {\n      webServer.setHandler(contexts);\n    }\n\n    final String appDir \u003d getWebAppsPath(name);\n\n    webServer.addHandler(webAppContext);\n\n    addDefaultApps(contexts, appDir, conf);\n\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {
        "oldValue": "[FileNotFoundException, IOException]",
        "newValue": "[IOException]"
      }
    },
    "b44b648d0848f7bb370524437cc5f7d718f183bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10332. HttpServer\u0027s jetty audit log always logs 200 OK (jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577220 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/03/14 9:10 AM",
      "commitName": "b44b648d0848f7bb370524437cc5f7d718f183bd",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "04/03/14 5:48 PM",
      "commitNameOld": "95ebf9ecc4809b8a977a0a847515649486a004c4",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 8.6,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws FileNotFoundException, IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n     QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n         : new QueuedThreadPool(maxThreads);\n     threadPool.setDaemon(true);\n     webServer.setThreadPool(threadPool);\n \n     SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n     if (sm instanceof AbstractSessionManager) {\n       AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n       asm.setHttpOnly(true);\n       asm.setSecureCookies(true);\n     }\n \n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       HandlerCollection handlers \u003d new HandlerCollection();\n-      handlers.setHandlers(new Handler[] { requestLogHandler, contexts });\n+      handlers.setHandlers(new Handler[] {contexts, requestLogHandler});\n       webServer.setHandler(handlers);\n     } else {\n       webServer.setHandler(contexts);\n     }\n \n     final String appDir \u003d getWebAppsPath(name);\n \n     webServer.addHandler(webAppContext);\n \n     addDefaultApps(contexts, appDir, conf);\n \n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n \n     if (pathSpecs !\u003d null) {\n       for (String path : pathSpecs) {\n         LOG.info(\"adding path spec: \" + path);\n         addFilterPathMapping(path, webAppContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws FileNotFoundException, IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n    QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n        : new QueuedThreadPool(maxThreads);\n    threadPool.setDaemon(true);\n    webServer.setThreadPool(threadPool);\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.setSecureCookies(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      HandlerCollection handlers \u003d new HandlerCollection();\n      handlers.setHandlers(new Handler[] {contexts, requestLogHandler});\n      webServer.setHandler(handlers);\n    } else {\n      webServer.setHandler(contexts);\n    }\n\n    final String appDir \u003d getWebAppsPath(name);\n\n    webServer.addHandler(webAppContext);\n\n    addDefaultApps(contexts, appDir, conf);\n\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "95ebf9ecc4809b8a977a0a847515649486a004c4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10379. Protect authentication cookies with the HttpOnly and Secure flags. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/14 5:48 PM",
      "commitName": "95ebf9ecc4809b8a977a0a847515649486a004c4",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/01/14 11:32 PM",
      "commitNameOld": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 35.76,
      "commitsBetweenForRepo": 346,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,59 @@\n   private void initializeWebServer(String name, String hostName,\n       Configuration conf, String[] pathSpecs)\n       throws FileNotFoundException, IOException {\n \n     Preconditions.checkNotNull(webAppContext);\n \n     int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n     // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n     // default value (currently 250).\n     QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n         : new QueuedThreadPool(maxThreads);\n     threadPool.setDaemon(true);\n     webServer.setThreadPool(threadPool);\n \n+    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n+    if (sm instanceof AbstractSessionManager) {\n+      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n+      asm.setHttpOnly(true);\n+      asm.setSecureCookies(true);\n+    }\n+\n     ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n     RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n \n     if (requestLog !\u003d null) {\n       RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n       requestLogHandler.setRequestLog(requestLog);\n       HandlerCollection handlers \u003d new HandlerCollection();\n       handlers.setHandlers(new Handler[] { requestLogHandler, contexts });\n       webServer.setHandler(handlers);\n     } else {\n       webServer.setHandler(contexts);\n     }\n \n     final String appDir \u003d getWebAppsPath(name);\n \n     webServer.addHandler(webAppContext);\n \n     addDefaultApps(contexts, appDir, conf);\n \n     addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n     final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n     if (initializers !\u003d null) {\n       conf \u003d new Configuration(conf);\n       conf.set(BIND_ADDRESS, hostName);\n       for (FilterInitializer c : initializers) {\n         c.initFilter(this, conf);\n       }\n     }\n \n     addDefaultServlets();\n \n     if (pathSpecs !\u003d null) {\n       for (String path : pathSpecs) {\n         LOG.info(\"adding path spec: \" + path);\n         addFilterPathMapping(path, webAppContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws FileNotFoundException, IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n    QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n        : new QueuedThreadPool(maxThreads);\n    threadPool.setDaemon(true);\n    webServer.setThreadPool(threadPool);\n\n    SessionManager sm \u003d webAppContext.getSessionHandler().getSessionManager();\n    if (sm instanceof AbstractSessionManager) {\n      AbstractSessionManager asm \u003d (AbstractSessionManager)sm;\n      asm.setHttpOnly(true);\n      asm.setSecureCookies(true);\n    }\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      HandlerCollection handlers \u003d new HandlerCollection();\n      handlers.setHandlers(new Handler[] { requestLogHandler, contexts });\n      webServer.setHandler(handlers);\n    } else {\n      webServer.setHandler(contexts);\n    }\n\n    final String appDir \u003d getWebAppsPath(name);\n\n    webServer.addHandler(webAppContext);\n\n    addDefaultApps(contexts, appDir, conf);\n\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "27/01/14 10:41 PM",
      "commitNameOld": "87166f1ee81dbad579508c2bdbc7dda96b1ef809",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws FileNotFoundException, IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n    QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n        : new QueuedThreadPool(maxThreads);\n    threadPool.setDaemon(true);\n    webServer.setThreadPool(threadPool);\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      HandlerCollection handlers \u003d new HandlerCollection();\n      handlers.setHandlers(new Handler[] { requestLogHandler, contexts });\n      webServer.setHandler(handlers);\n    } else {\n      webServer.setHandler(contexts);\n    }\n\n    final String appDir \u003d getWebAppsPath(name);\n\n    webServer.addHandler(webAppContext);\n\n    addDefaultApps(contexts, appDir, conf);\n\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java"
      }
    },
    "2214871d916fdcae62aa51afbb5fd571f2808745": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5545. Allow specifying endpoints for listeners in HttpServer. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 10:20 AM",
      "commitName": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,52 @@\n+  private void initializeWebServer(String name, String hostName,\n+      Configuration conf, String[] pathSpecs)\n+      throws FileNotFoundException, IOException {\n+\n+    Preconditions.checkNotNull(webAppContext);\n+\n+    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n+    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n+    // default value (currently 250).\n+    QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n+        : new QueuedThreadPool(maxThreads);\n+    threadPool.setDaemon(true);\n+    webServer.setThreadPool(threadPool);\n+\n+    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n+    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n+\n+    if (requestLog !\u003d null) {\n+      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n+      requestLogHandler.setRequestLog(requestLog);\n+      HandlerCollection handlers \u003d new HandlerCollection();\n+      handlers.setHandlers(new Handler[] { requestLogHandler, contexts });\n+      webServer.setHandler(handlers);\n+    } else {\n+      webServer.setHandler(contexts);\n+    }\n+\n+    final String appDir \u003d getWebAppsPath(name);\n+\n+    webServer.addHandler(webAppContext);\n+\n+    addDefaultApps(contexts, appDir, conf);\n+\n+    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n+    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n+    if (initializers !\u003d null) {\n+      conf \u003d new Configuration(conf);\n+      conf.set(BIND_ADDRESS, hostName);\n+      for (FilterInitializer c : initializers) {\n+        c.initFilter(this, conf);\n+      }\n+    }\n+\n+    addDefaultServlets();\n+\n+    if (pathSpecs !\u003d null) {\n+      for (String path : pathSpecs) {\n+        LOG.info(\"adding path spec: \" + path);\n+        addFilterPathMapping(path, webAppContext);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeWebServer(String name, String hostName,\n      Configuration conf, String[] pathSpecs)\n      throws FileNotFoundException, IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads \u003d conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n    QueuedThreadPool threadPool \u003d maxThreads \u003d\u003d -1 ? new QueuedThreadPool()\n        : new QueuedThreadPool(maxThreads);\n    threadPool.setDaemon(true);\n    webServer.setThreadPool(threadPool);\n\n    ContextHandlerCollection contexts \u003d new ContextHandlerCollection();\n    RequestLog requestLog \u003d HttpRequestLog.getRequestLog(name);\n\n    if (requestLog !\u003d null) {\n      RequestLogHandler requestLogHandler \u003d new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      HandlerCollection handlers \u003d new HandlerCollection();\n      handlers.setHandlers(new Handler[] { requestLogHandler, contexts });\n      webServer.setHandler(handlers);\n    } else {\n      webServer.setHandler(contexts);\n    }\n\n    final String appDir \u003d getWebAppsPath(name);\n\n    webServer.addHandler(webAppContext);\n\n    addDefaultApps(contexts, appDir, conf);\n\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n    final FilterInitializer[] initializers \u003d getFilterInitializers(conf);\n    if (initializers !\u003d null) {\n      conf \u003d new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs !\u003d null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java"
    }
  }
}