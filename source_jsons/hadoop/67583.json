{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryStore.java",
  "functionName": "addHistory",
  "functionId": "addHistory___recurrenceId-RecurrenceId(modifiers-final)__resourceSkylines-List__ResourceSkyline__(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/InMemoryStore.java",
  "functionStartLine": 76,
  "functionEndLine": 121,
  "numCommitsSeen": 1,
  "timeTaken": 443,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,46 @@\n+  @Override public final void addHistory(final RecurrenceId recurrenceId,\n+      final List\u003cResourceSkyline\u003e resourceSkylines)\n+      throws SkylineStoreException {\n+    inputValidator.validate(recurrenceId, resourceSkylines);\n+    writeLock.lock();\n+    try {\n+      // remove the null elements in the resourceSkylines\n+      final List\u003cResourceSkyline\u003e filteredInput \u003d\n+          eliminateNull(resourceSkylines);\n+      if (filteredInput.size() \u003e 0) {\n+        if (skylineStore.containsKey(recurrenceId)) {\n+          // if filteredInput has duplicate jobIds with existing skylines in the\n+          // store,\n+          // throw out an exception\n+          final List\u003cResourceSkyline\u003e jobHistory \u003d\n+              skylineStore.get(recurrenceId);\n+          final List\u003cString\u003e oldJobIds \u003d new ArrayList\u003c\u003e();\n+          for (final ResourceSkyline resourceSkyline : jobHistory) {\n+            oldJobIds.add(resourceSkyline.getJobId());\n+          }\n+          if (!oldJobIds.isEmpty()) {\n+            for (ResourceSkyline elem : filteredInput) {\n+              if (oldJobIds.contains(elem.getJobId())) {\n+                StringBuilder errMsg \u003d new StringBuilder();\n+                errMsg.append(\n+                    \"Trying to addHistory duplicate resource skylines for \"\n+                        + recurrenceId\n+                        + \". Use updateHistory function instead.\");\n+                LOGGER.error(errMsg.toString());\n+                throw new DuplicateRecurrenceIdException(errMsg.toString());\n+              }\n+            }\n+          }\n+          skylineStore.get(recurrenceId).addAll(filteredInput);\n+          LOGGER.info(\"Successfully addHistory new resource skylines for {}.\",\n+              recurrenceId);\n+        } else {\n+          skylineStore.put(recurrenceId, filteredInput);\n+          LOGGER.info(\"Successfully addHistory new resource skylines for {}.\",\n+              recurrenceId);\n+        }\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  @Override public final void addHistory(final RecurrenceId recurrenceId,\n      final List\u003cResourceSkyline\u003e resourceSkylines)\n      throws SkylineStoreException {\n    inputValidator.validate(recurrenceId, resourceSkylines);\n    writeLock.lock();\n    try {\n      // remove the null elements in the resourceSkylines\n      final List\u003cResourceSkyline\u003e filteredInput \u003d\n          eliminateNull(resourceSkylines);\n      if (filteredInput.size() \u003e 0) {\n        if (skylineStore.containsKey(recurrenceId)) {\n          // if filteredInput has duplicate jobIds with existing skylines in the\n          // store,\n          // throw out an exception\n          final List\u003cResourceSkyline\u003e jobHistory \u003d\n              skylineStore.get(recurrenceId);\n          final List\u003cString\u003e oldJobIds \u003d new ArrayList\u003c\u003e();\n          for (final ResourceSkyline resourceSkyline : jobHistory) {\n            oldJobIds.add(resourceSkyline.getJobId());\n          }\n          if (!oldJobIds.isEmpty()) {\n            for (ResourceSkyline elem : filteredInput) {\n              if (oldJobIds.contains(elem.getJobId())) {\n                StringBuilder errMsg \u003d new StringBuilder();\n                errMsg.append(\n                    \"Trying to addHistory duplicate resource skylines for \"\n                        + recurrenceId\n                        + \". Use updateHistory function instead.\");\n                LOGGER.error(errMsg.toString());\n                throw new DuplicateRecurrenceIdException(errMsg.toString());\n              }\n            }\n          }\n          skylineStore.get(recurrenceId).addAll(filteredInput);\n          LOGGER.info(\"Successfully addHistory new resource skylines for {}.\",\n              recurrenceId);\n        } else {\n          skylineStore.put(recurrenceId, filteredInput);\n          LOGGER.info(\"Successfully addHistory new resource skylines for {}.\",\n              recurrenceId);\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/skylinestore/impl/InMemoryStore.java"
    }
  }
}