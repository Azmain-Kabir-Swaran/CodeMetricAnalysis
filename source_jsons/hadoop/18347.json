{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Join.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/Join.java",
  "functionStartLine": 82,
  "functionEndLine": 170,
  "numCommitsSeen": 6,
  "timeTaken": 4370,
  "changeHistory": [
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5800. Use Job#getInstance instead of deprecated constructors. (aajisaka)\n",
      "commitDate": "03/02/15 2:30 PM",
      "commitName": "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "04/12/11 11:58 AM",
      "commitNameOld": "1972a76e5a4483b2da431cc7532207c2e6274c6c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 1157.11,
      "commitsBetweenForRepo": 7773,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,89 @@\n   public int run(String[] args) throws Exception {\n     Configuration conf \u003d getConf();\n     JobClient client \u003d new JobClient(conf);\n     ClusterStatus cluster \u003d client.getClusterStatus();\n     int num_reduces \u003d (int) (cluster.getMaxReduceTasks() * 0.9);\n     String join_reduces \u003d conf.get(REDUCES_PER_HOST);\n     if (join_reduces !\u003d null) {\n        num_reduces \u003d cluster.getTaskTrackers() * \n                        Integer.parseInt(join_reduces);\n     }\n-    Job job \u003d new Job(conf);\n+    Job job \u003d Job.getInstance(conf);\n     job.setJobName(\"join\");\n     job.setJarByClass(Sort.class);\n \n     job.setMapperClass(Mapper.class);        \n     job.setReducerClass(Reducer.class);\n \n     Class\u003c? extends InputFormat\u003e inputFormatClass \u003d \n       SequenceFileInputFormat.class;\n     Class\u003c? extends OutputFormat\u003e outputFormatClass \u003d \n       SequenceFileOutputFormat.class;\n     Class\u003c? extends WritableComparable\u003e outputKeyClass \u003d BytesWritable.class;\n     Class\u003c? extends Writable\u003e outputValueClass \u003d TupleWritable.class;\n     String op \u003d \"inner\";\n     List\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n     for(int i\u003d0; i \u003c args.length; ++i) {\n       try {\n         if (\"-r\".equals(args[i])) {\n           num_reduces \u003d Integer.parseInt(args[++i]);\n         } else if (\"-inFormat\".equals(args[i])) {\n           inputFormatClass \u003d \n             Class.forName(args[++i]).asSubclass(InputFormat.class);\n         } else if (\"-outFormat\".equals(args[i])) {\n           outputFormatClass \u003d \n             Class.forName(args[++i]).asSubclass(OutputFormat.class);\n         } else if (\"-outKey\".equals(args[i])) {\n           outputKeyClass \u003d \n             Class.forName(args[++i]).asSubclass(WritableComparable.class);\n         } else if (\"-outValue\".equals(args[i])) {\n           outputValueClass \u003d \n             Class.forName(args[++i]).asSubclass(Writable.class);\n         } else if (\"-joinOp\".equals(args[i])) {\n           op \u003d args[++i];\n         } else {\n           otherArgs.add(args[i]);\n         }\n       } catch (NumberFormatException except) {\n         System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n         return printUsage();\n       } catch (ArrayIndexOutOfBoundsException except) {\n         System.out.println(\"ERROR: Required parameter missing from \" +\n             args[i-1]);\n         return printUsage(); // exits\n       }\n     }\n \n     // Set user-supplied (possibly default) job configs\n     job.setNumReduceTasks(num_reduces);\n \n     if (otherArgs.size() \u003c 2) {\n       System.out.println(\"ERROR: Wrong number of parameters: \");\n       return printUsage();\n     }\n \n     FileOutputFormat.setOutputPath(job, \n       new Path(otherArgs.remove(otherArgs.size() - 1)));\n     List\u003cPath\u003e plist \u003d new ArrayList\u003cPath\u003e(otherArgs.size());\n     for (String s : otherArgs) {\n       plist.add(new Path(s));\n     }\n \n     job.setInputFormatClass(CompositeInputFormat.class);\n     job.getConfiguration().set(CompositeInputFormat.JOIN_EXPR, \n       CompositeInputFormat.compose(op, inputFormatClass,\n       plist.toArray(new Path[0])));\n     job.setOutputFormatClass(outputFormatClass);\n \n     job.setOutputKeyClass(outputKeyClass);\n     job.setOutputValueClass(outputValueClass);\n \n     Date startTime \u003d new Date();\n     System.out.println(\"Job started: \" + startTime);\n     int ret \u003d job.waitForCompletion(true) ? 0 : 1 ;\n     Date end_time \u003d new Date();\n     System.out.println(\"Job ended: \" + end_time);\n     System.out.println(\"The job took \" + \n         (end_time.getTime() - startTime.getTime()) /1000 + \" seconds.\");\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int num_reduces \u003d (int) (cluster.getMaxReduceTasks() * 0.9);\n    String join_reduces \u003d conf.get(REDUCES_PER_HOST);\n    if (join_reduces !\u003d null) {\n       num_reduces \u003d cluster.getTaskTrackers() * \n                       Integer.parseInt(join_reduces);\n    }\n    Job job \u003d Job.getInstance(conf);\n    job.setJobName(\"join\");\n    job.setJarByClass(Sort.class);\n\n    job.setMapperClass(Mapper.class);        \n    job.setReducerClass(Reducer.class);\n\n    Class\u003c? extends InputFormat\u003e inputFormatClass \u003d \n      SequenceFileInputFormat.class;\n    Class\u003c? extends OutputFormat\u003e outputFormatClass \u003d \n      SequenceFileOutputFormat.class;\n    Class\u003c? extends WritableComparable\u003e outputKeyClass \u003d BytesWritable.class;\n    Class\u003c? extends Writable\u003e outputValueClass \u003d TupleWritable.class;\n    String op \u003d \"inner\";\n    List\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          num_reduces \u003d Integer.parseInt(args[++i]);\n        } else if (\"-inFormat\".equals(args[i])) {\n          inputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(InputFormat.class);\n        } else if (\"-outFormat\".equals(args[i])) {\n          outputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(OutputFormat.class);\n        } else if (\"-outKey\".equals(args[i])) {\n          outputKeyClass \u003d \n            Class.forName(args[++i]).asSubclass(WritableComparable.class);\n        } else if (\"-outValue\".equals(args[i])) {\n          outputValueClass \u003d \n            Class.forName(args[++i]).asSubclass(Writable.class);\n        } else if (\"-joinOp\".equals(args[i])) {\n          op \u003d args[++i];\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage(); // exits\n      }\n    }\n\n    // Set user-supplied (possibly default) job configs\n    job.setNumReduceTasks(num_reduces);\n\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n\n    FileOutputFormat.setOutputPath(job, \n      new Path(otherArgs.remove(otherArgs.size() - 1)));\n    List\u003cPath\u003e plist \u003d new ArrayList\u003cPath\u003e(otherArgs.size());\n    for (String s : otherArgs) {\n      plist.add(new Path(s));\n    }\n\n    job.setInputFormatClass(CompositeInputFormat.class);\n    job.getConfiguration().set(CompositeInputFormat.JOIN_EXPR, \n      CompositeInputFormat.compose(op, inputFormatClass,\n      plist.toArray(new Path[0])));\n    job.setOutputFormatClass(outputFormatClass);\n\n    job.setOutputKeyClass(outputKeyClass);\n    job.setOutputValueClass(outputValueClass);\n\n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1 ;\n    Date end_time \u003d new Date();\n    System.out.println(\"Job ended: \" + end_time);\n    System.out.println(\"The job took \" + \n        (end_time.getTime() - startTime.getTime()) /1000 + \" seconds.\");\n    return ret;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/Join.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int num_reduces \u003d (int) (cluster.getMaxReduceTasks() * 0.9);\n    String join_reduces \u003d conf.get(REDUCES_PER_HOST);\n    if (join_reduces !\u003d null) {\n       num_reduces \u003d cluster.getTaskTrackers() * \n                       Integer.parseInt(join_reduces);\n    }\n    Job job \u003d new Job(conf);\n    job.setJobName(\"join\");\n    job.setJarByClass(Sort.class);\n\n    job.setMapperClass(Mapper.class);        \n    job.setReducerClass(Reducer.class);\n\n    Class\u003c? extends InputFormat\u003e inputFormatClass \u003d \n      SequenceFileInputFormat.class;\n    Class\u003c? extends OutputFormat\u003e outputFormatClass \u003d \n      SequenceFileOutputFormat.class;\n    Class\u003c? extends WritableComparable\u003e outputKeyClass \u003d BytesWritable.class;\n    Class\u003c? extends Writable\u003e outputValueClass \u003d TupleWritable.class;\n    String op \u003d \"inner\";\n    List\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          num_reduces \u003d Integer.parseInt(args[++i]);\n        } else if (\"-inFormat\".equals(args[i])) {\n          inputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(InputFormat.class);\n        } else if (\"-outFormat\".equals(args[i])) {\n          outputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(OutputFormat.class);\n        } else if (\"-outKey\".equals(args[i])) {\n          outputKeyClass \u003d \n            Class.forName(args[++i]).asSubclass(WritableComparable.class);\n        } else if (\"-outValue\".equals(args[i])) {\n          outputValueClass \u003d \n            Class.forName(args[++i]).asSubclass(Writable.class);\n        } else if (\"-joinOp\".equals(args[i])) {\n          op \u003d args[++i];\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage(); // exits\n      }\n    }\n\n    // Set user-supplied (possibly default) job configs\n    job.setNumReduceTasks(num_reduces);\n\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n\n    FileOutputFormat.setOutputPath(job, \n      new Path(otherArgs.remove(otherArgs.size() - 1)));\n    List\u003cPath\u003e plist \u003d new ArrayList\u003cPath\u003e(otherArgs.size());\n    for (String s : otherArgs) {\n      plist.add(new Path(s));\n    }\n\n    job.setInputFormatClass(CompositeInputFormat.class);\n    job.getConfiguration().set(CompositeInputFormat.JOIN_EXPR, \n      CompositeInputFormat.compose(op, inputFormatClass,\n      plist.toArray(new Path[0])));\n    job.setOutputFormatClass(outputFormatClass);\n\n    job.setOutputKeyClass(outputKeyClass);\n    job.setOutputValueClass(outputValueClass);\n\n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1 ;\n    Date end_time \u003d new Date();\n    System.out.println(\"Job ended: \" + end_time);\n    System.out.println(\"The job took \" + \n        (end_time.getTime() - startTime.getTime()) /1000 + \" seconds.\");\n    return ret;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/Join.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/Join.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/Join.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int num_reduces \u003d (int) (cluster.getMaxReduceTasks() * 0.9);\n    String join_reduces \u003d conf.get(REDUCES_PER_HOST);\n    if (join_reduces !\u003d null) {\n       num_reduces \u003d cluster.getTaskTrackers() * \n                       Integer.parseInt(join_reduces);\n    }\n    Job job \u003d new Job(conf);\n    job.setJobName(\"join\");\n    job.setJarByClass(Sort.class);\n\n    job.setMapperClass(Mapper.class);        \n    job.setReducerClass(Reducer.class);\n\n    Class\u003c? extends InputFormat\u003e inputFormatClass \u003d \n      SequenceFileInputFormat.class;\n    Class\u003c? extends OutputFormat\u003e outputFormatClass \u003d \n      SequenceFileOutputFormat.class;\n    Class\u003c? extends WritableComparable\u003e outputKeyClass \u003d BytesWritable.class;\n    Class\u003c? extends Writable\u003e outputValueClass \u003d TupleWritable.class;\n    String op \u003d \"inner\";\n    List\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          num_reduces \u003d Integer.parseInt(args[++i]);\n        } else if (\"-inFormat\".equals(args[i])) {\n          inputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(InputFormat.class);\n        } else if (\"-outFormat\".equals(args[i])) {\n          outputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(OutputFormat.class);\n        } else if (\"-outKey\".equals(args[i])) {\n          outputKeyClass \u003d \n            Class.forName(args[++i]).asSubclass(WritableComparable.class);\n        } else if (\"-outValue\".equals(args[i])) {\n          outputValueClass \u003d \n            Class.forName(args[++i]).asSubclass(Writable.class);\n        } else if (\"-joinOp\".equals(args[i])) {\n          op \u003d args[++i];\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage(); // exits\n      }\n    }\n\n    // Set user-supplied (possibly default) job configs\n    job.setNumReduceTasks(num_reduces);\n\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n\n    FileOutputFormat.setOutputPath(job, \n      new Path(otherArgs.remove(otherArgs.size() - 1)));\n    List\u003cPath\u003e plist \u003d new ArrayList\u003cPath\u003e(otherArgs.size());\n    for (String s : otherArgs) {\n      plist.add(new Path(s));\n    }\n\n    job.setInputFormatClass(CompositeInputFormat.class);\n    job.getConfiguration().set(CompositeInputFormat.JOIN_EXPR, \n      CompositeInputFormat.compose(op, inputFormatClass,\n      plist.toArray(new Path[0])));\n    job.setOutputFormatClass(outputFormatClass);\n\n    job.setOutputKeyClass(outputKeyClass);\n    job.setOutputValueClass(outputValueClass);\n\n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1 ;\n    Date end_time \u003d new Date();\n    System.out.println(\"Job ended: \" + end_time);\n    System.out.println(\"The job took \" + \n        (end_time.getTime() - startTime.getTime()) /1000 + \" seconds.\");\n    return ret;\n  }",
      "path": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/Join.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/Join.java",
        "newPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/Join.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int num_reduces \u003d (int) (cluster.getMaxReduceTasks() * 0.9);\n    String join_reduces \u003d conf.get(REDUCES_PER_HOST);\n    if (join_reduces !\u003d null) {\n       num_reduces \u003d cluster.getTaskTrackers() * \n                       Integer.parseInt(join_reduces);\n    }\n    Job job \u003d new Job(conf);\n    job.setJobName(\"join\");\n    job.setJarByClass(Sort.class);\n\n    job.setMapperClass(Mapper.class);        \n    job.setReducerClass(Reducer.class);\n\n    Class\u003c? extends InputFormat\u003e inputFormatClass \u003d \n      SequenceFileInputFormat.class;\n    Class\u003c? extends OutputFormat\u003e outputFormatClass \u003d \n      SequenceFileOutputFormat.class;\n    Class\u003c? extends WritableComparable\u003e outputKeyClass \u003d BytesWritable.class;\n    Class\u003c? extends Writable\u003e outputValueClass \u003d TupleWritable.class;\n    String op \u003d \"inner\";\n    List\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          num_reduces \u003d Integer.parseInt(args[++i]);\n        } else if (\"-inFormat\".equals(args[i])) {\n          inputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(InputFormat.class);\n        } else if (\"-outFormat\".equals(args[i])) {\n          outputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(OutputFormat.class);\n        } else if (\"-outKey\".equals(args[i])) {\n          outputKeyClass \u003d \n            Class.forName(args[++i]).asSubclass(WritableComparable.class);\n        } else if (\"-outValue\".equals(args[i])) {\n          outputValueClass \u003d \n            Class.forName(args[++i]).asSubclass(Writable.class);\n        } else if (\"-joinOp\".equals(args[i])) {\n          op \u003d args[++i];\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage(); // exits\n      }\n    }\n\n    // Set user-supplied (possibly default) job configs\n    job.setNumReduceTasks(num_reduces);\n\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n\n    FileOutputFormat.setOutputPath(job, \n      new Path(otherArgs.remove(otherArgs.size() - 1)));\n    List\u003cPath\u003e plist \u003d new ArrayList\u003cPath\u003e(otherArgs.size());\n    for (String s : otherArgs) {\n      plist.add(new Path(s));\n    }\n\n    job.setInputFormatClass(CompositeInputFormat.class);\n    job.getConfiguration().set(CompositeInputFormat.JOIN_EXPR, \n      CompositeInputFormat.compose(op, inputFormatClass,\n      plist.toArray(new Path[0])));\n    job.setOutputFormatClass(outputFormatClass);\n\n    job.setOutputKeyClass(outputKeyClass);\n    job.setOutputValueClass(outputValueClass);\n\n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1 ;\n    Date end_time \u003d new Date();\n    System.out.println(\"Job ended: \" + end_time);\n    System.out.println(\"The job took \" + \n        (end_time.getTime() - startTime.getTime()) /1000 + \" seconds.\");\n    return ret;\n  }",
      "path": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/Join.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/examples/org/apache/hadoop/examples/Join.java",
        "newPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/Join.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,89 @@\n+  public int run(String[] args) throws Exception {\n+    Configuration conf \u003d getConf();\n+    JobClient client \u003d new JobClient(conf);\n+    ClusterStatus cluster \u003d client.getClusterStatus();\n+    int num_reduces \u003d (int) (cluster.getMaxReduceTasks() * 0.9);\n+    String join_reduces \u003d conf.get(REDUCES_PER_HOST);\n+    if (join_reduces !\u003d null) {\n+       num_reduces \u003d cluster.getTaskTrackers() * \n+                       Integer.parseInt(join_reduces);\n+    }\n+    Job job \u003d new Job(conf);\n+    job.setJobName(\"join\");\n+    job.setJarByClass(Sort.class);\n+\n+    job.setMapperClass(Mapper.class);        \n+    job.setReducerClass(Reducer.class);\n+\n+    Class\u003c? extends InputFormat\u003e inputFormatClass \u003d \n+      SequenceFileInputFormat.class;\n+    Class\u003c? extends OutputFormat\u003e outputFormatClass \u003d \n+      SequenceFileOutputFormat.class;\n+    Class\u003c? extends WritableComparable\u003e outputKeyClass \u003d BytesWritable.class;\n+    Class\u003c? extends Writable\u003e outputValueClass \u003d TupleWritable.class;\n+    String op \u003d \"inner\";\n+    List\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n+    for(int i\u003d0; i \u003c args.length; ++i) {\n+      try {\n+        if (\"-r\".equals(args[i])) {\n+          num_reduces \u003d Integer.parseInt(args[++i]);\n+        } else if (\"-inFormat\".equals(args[i])) {\n+          inputFormatClass \u003d \n+            Class.forName(args[++i]).asSubclass(InputFormat.class);\n+        } else if (\"-outFormat\".equals(args[i])) {\n+          outputFormatClass \u003d \n+            Class.forName(args[++i]).asSubclass(OutputFormat.class);\n+        } else if (\"-outKey\".equals(args[i])) {\n+          outputKeyClass \u003d \n+            Class.forName(args[++i]).asSubclass(WritableComparable.class);\n+        } else if (\"-outValue\".equals(args[i])) {\n+          outputValueClass \u003d \n+            Class.forName(args[++i]).asSubclass(Writable.class);\n+        } else if (\"-joinOp\".equals(args[i])) {\n+          op \u003d args[++i];\n+        } else {\n+          otherArgs.add(args[i]);\n+        }\n+      } catch (NumberFormatException except) {\n+        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n+        return printUsage();\n+      } catch (ArrayIndexOutOfBoundsException except) {\n+        System.out.println(\"ERROR: Required parameter missing from \" +\n+            args[i-1]);\n+        return printUsage(); // exits\n+      }\n+    }\n+\n+    // Set user-supplied (possibly default) job configs\n+    job.setNumReduceTasks(num_reduces);\n+\n+    if (otherArgs.size() \u003c 2) {\n+      System.out.println(\"ERROR: Wrong number of parameters: \");\n+      return printUsage();\n+    }\n+\n+    FileOutputFormat.setOutputPath(job, \n+      new Path(otherArgs.remove(otherArgs.size() - 1)));\n+    List\u003cPath\u003e plist \u003d new ArrayList\u003cPath\u003e(otherArgs.size());\n+    for (String s : otherArgs) {\n+      plist.add(new Path(s));\n+    }\n+\n+    job.setInputFormatClass(CompositeInputFormat.class);\n+    job.getConfiguration().set(CompositeInputFormat.JOIN_EXPR, \n+      CompositeInputFormat.compose(op, inputFormatClass,\n+      plist.toArray(new Path[0])));\n+    job.setOutputFormatClass(outputFormatClass);\n+\n+    job.setOutputKeyClass(outputKeyClass);\n+    job.setOutputValueClass(outputValueClass);\n+\n+    Date startTime \u003d new Date();\n+    System.out.println(\"Job started: \" + startTime);\n+    int ret \u003d job.waitForCompletion(true) ? 0 : 1 ;\n+    Date end_time \u003d new Date();\n+    System.out.println(\"Job ended: \" + end_time);\n+    System.out.println(\"The job took \" + \n+        (end_time.getTime() - startTime.getTime()) /1000 + \" seconds.\");\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int num_reduces \u003d (int) (cluster.getMaxReduceTasks() * 0.9);\n    String join_reduces \u003d conf.get(REDUCES_PER_HOST);\n    if (join_reduces !\u003d null) {\n       num_reduces \u003d cluster.getTaskTrackers() * \n                       Integer.parseInt(join_reduces);\n    }\n    Job job \u003d new Job(conf);\n    job.setJobName(\"join\");\n    job.setJarByClass(Sort.class);\n\n    job.setMapperClass(Mapper.class);        \n    job.setReducerClass(Reducer.class);\n\n    Class\u003c? extends InputFormat\u003e inputFormatClass \u003d \n      SequenceFileInputFormat.class;\n    Class\u003c? extends OutputFormat\u003e outputFormatClass \u003d \n      SequenceFileOutputFormat.class;\n    Class\u003c? extends WritableComparable\u003e outputKeyClass \u003d BytesWritable.class;\n    Class\u003c? extends Writable\u003e outputValueClass \u003d TupleWritable.class;\n    String op \u003d \"inner\";\n    List\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          num_reduces \u003d Integer.parseInt(args[++i]);\n        } else if (\"-inFormat\".equals(args[i])) {\n          inputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(InputFormat.class);\n        } else if (\"-outFormat\".equals(args[i])) {\n          outputFormatClass \u003d \n            Class.forName(args[++i]).asSubclass(OutputFormat.class);\n        } else if (\"-outKey\".equals(args[i])) {\n          outputKeyClass \u003d \n            Class.forName(args[++i]).asSubclass(WritableComparable.class);\n        } else if (\"-outValue\".equals(args[i])) {\n          outputValueClass \u003d \n            Class.forName(args[++i]).asSubclass(Writable.class);\n        } else if (\"-joinOp\".equals(args[i])) {\n          op \u003d args[++i];\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage(); // exits\n      }\n    }\n\n    // Set user-supplied (possibly default) job configs\n    job.setNumReduceTasks(num_reduces);\n\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n\n    FileOutputFormat.setOutputPath(job, \n      new Path(otherArgs.remove(otherArgs.size() - 1)));\n    List\u003cPath\u003e plist \u003d new ArrayList\u003cPath\u003e(otherArgs.size());\n    for (String s : otherArgs) {\n      plist.add(new Path(s));\n    }\n\n    job.setInputFormatClass(CompositeInputFormat.class);\n    job.getConfiguration().set(CompositeInputFormat.JOIN_EXPR, \n      CompositeInputFormat.compose(op, inputFormatClass,\n      plist.toArray(new Path[0])));\n    job.setOutputFormatClass(outputFormatClass);\n\n    job.setOutputKeyClass(outputKeyClass);\n    job.setOutputValueClass(outputValueClass);\n\n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1 ;\n    Date end_time \u003d new Date();\n    System.out.println(\"Job ended: \" + end_time);\n    System.out.println(\"The job took \" + \n        (end_time.getTime() - startTime.getTime()) /1000 + \" seconds.\");\n    return ret;\n  }",
      "path": "mapreduce/src/examples/org/apache/hadoop/examples/Join.java"
    }
  }
}