{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NonAggregatingLogHandler.java",
  "functionName": "recover",
  "functionId": "recover",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/loghandler/NonAggregatingLogHandler.java",
  "functionStartLine": 126,
  "functionEndLine": 148,
  "numCommitsSeen": 14,
  "timeTaken": 1941,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "04f5ef18f7877ce30b12b1a3c1e851c420531b72"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "04f5ef18f7877ce30b12b1a3c1e851c420531b72": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "31/07/18 12:08 PM",
      "commitNameOld": "4b540bbfcf02d828052999215c6135603d98f5db",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 227.18,
      "commitsBetweenForRepo": 1854,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,23 @@\n   private void recover() throws IOException {\n     if (stateStore.canRecover()) {\n       RecoveredLogDeleterState state \u003d stateStore.loadLogDeleterState();\n       long now \u003d System.currentTimeMillis();\n       for (Map.Entry\u003cApplicationId, LogDeleterProto\u003e entry :\n         state.getLogDeleterMap().entrySet()) {\n         ApplicationId appId \u003d entry.getKey();\n         LogDeleterProto proto \u003d entry.getValue();\n         long deleteDelayMsec \u003d proto.getDeletionTime() - now;\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Scheduling deletion of \" + appId + \" logs in \"\n-              + deleteDelayMsec + \" msec\");\n-        }\n+        LOG.debug(\"Scheduling deletion of {} logs in {} msec\", appId,\n+            deleteDelayMsec);\n         LogDeleterRunnable logDeleter \u003d\n             new LogDeleterRunnable(proto.getUser(), appId);\n         try {\n           sched.schedule(logDeleter, deleteDelayMsec, TimeUnit.MILLISECONDS);\n         } catch (RejectedExecutionException e) {\n           // Handling this event in local thread before starting threads\n           // or after calling sched.shutdownNow().\n           logDeleter.run();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException {\n    if (stateStore.canRecover()) {\n      RecoveredLogDeleterState state \u003d stateStore.loadLogDeleterState();\n      long now \u003d System.currentTimeMillis();\n      for (Map.Entry\u003cApplicationId, LogDeleterProto\u003e entry :\n        state.getLogDeleterMap().entrySet()) {\n        ApplicationId appId \u003d entry.getKey();\n        LogDeleterProto proto \u003d entry.getValue();\n        long deleteDelayMsec \u003d proto.getDeletionTime() - now;\n        LOG.debug(\"Scheduling deletion of {} logs in {} msec\", appId,\n            deleteDelayMsec);\n        LogDeleterRunnable logDeleter \u003d\n            new LogDeleterRunnable(proto.getUser(), appId);\n        try {\n          sched.schedule(logDeleter, deleteDelayMsec, TimeUnit.MILLISECONDS);\n        } catch (RejectedExecutionException e) {\n          // Handling this event in local thread before starting threads\n          // or after calling sched.shutdownNow().\n          logDeleter.run();\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/loghandler/NonAggregatingLogHandler.java",
      "extendedDetails": {}
    },
    "04f5ef18f7877ce30b12b1a3c1e851c420531b72": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2079. Recover NonAggregatingLogHandler state upon nodemanager restart. (Contributed by Jason Lowe)\n",
      "commitDate": "12/02/15 11:46 AM",
      "commitName": "04f5ef18f7877ce30b12b1a3c1e851c420531b72",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,25 @@\n+  private void recover() throws IOException {\n+    if (stateStore.canRecover()) {\n+      RecoveredLogDeleterState state \u003d stateStore.loadLogDeleterState();\n+      long now \u003d System.currentTimeMillis();\n+      for (Map.Entry\u003cApplicationId, LogDeleterProto\u003e entry :\n+        state.getLogDeleterMap().entrySet()) {\n+        ApplicationId appId \u003d entry.getKey();\n+        LogDeleterProto proto \u003d entry.getValue();\n+        long deleteDelayMsec \u003d proto.getDeletionTime() - now;\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Scheduling deletion of \" + appId + \" logs in \"\n+              + deleteDelayMsec + \" msec\");\n+        }\n+        LogDeleterRunnable logDeleter \u003d\n+            new LogDeleterRunnable(proto.getUser(), appId);\n+        try {\n+          sched.schedule(logDeleter, deleteDelayMsec, TimeUnit.MILLISECONDS);\n+        } catch (RejectedExecutionException e) {\n+          // Handling this event in local thread before starting threads\n+          // or after calling sched.shutdownNow().\n+          logDeleter.run();\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recover() throws IOException {\n    if (stateStore.canRecover()) {\n      RecoveredLogDeleterState state \u003d stateStore.loadLogDeleterState();\n      long now \u003d System.currentTimeMillis();\n      for (Map.Entry\u003cApplicationId, LogDeleterProto\u003e entry :\n        state.getLogDeleterMap().entrySet()) {\n        ApplicationId appId \u003d entry.getKey();\n        LogDeleterProto proto \u003d entry.getValue();\n        long deleteDelayMsec \u003d proto.getDeletionTime() - now;\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Scheduling deletion of \" + appId + \" logs in \"\n              + deleteDelayMsec + \" msec\");\n        }\n        LogDeleterRunnable logDeleter \u003d\n            new LogDeleterRunnable(proto.getUser(), appId);\n        try {\n          sched.schedule(logDeleter, deleteDelayMsec, TimeUnit.MILLISECONDS);\n        } catch (RejectedExecutionException e) {\n          // Handling this event in local thread before starting threads\n          // or after calling sched.shutdownNow().\n          logDeleter.run();\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/loghandler/NonAggregatingLogHandler.java"
    }
  }
}