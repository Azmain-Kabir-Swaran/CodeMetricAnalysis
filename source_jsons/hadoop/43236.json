{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "registerServiceInstance",
  "functionId": "registerServiceInstance___attemptId-ApplicationAttemptId__service-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 561,
  "functionEndLine": 595,
  "numCommitsSeen": 34,
  "timeTaken": 5493,
  "changeHistory": [
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "b8a7ef1b64392094562e7782e0fd092934724ad2",
    "ce74e64363abc64561263be70a923ab3e67f043f",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "79bf5c084d4a063f1a933cae498af23edfd46792",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "b8a7ef1b64392094562e7782e0fd092934724ad2": "Ybodychange",
    "ce74e64363abc64561263be70a923ab3e67f043f": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymultichange(Ymodifierchange,Ybodychange)",
    "79bf5c084d4a063f1a933cae498af23edfd46792": "Ymodifierchange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 7:58 AM",
      "commitNameOld": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 18.18,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private void registerServiceInstance(ApplicationAttemptId attemptId,\n       Service service) throws IOException {\n     LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n     serviceRecord.description \u003d \"YarnServiceMaster\";\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, false);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n-              \"Failed to register app \" + app.getName() + \" in registry\");\n+              \"Failed to register app \" + app.getName() + \" in registry\", e);\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Service service) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"YarnServiceMaster\";\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, false);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\", e);\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,35 @@\n   private void registerServiceInstance(ApplicationAttemptId attemptId,\n       Service service) throws IOException {\n     LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n     serviceRecord.description \u003d \"YarnServiceMaster\";\n \n-    // set any provided attributes\n-    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n-        serviceRecord);\n-\n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, false);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Service service) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"YarnServiceMaster\";\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, false);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "b8a7ef1b64392094562e7782e0fd092934724ad2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private void registerServiceInstance(ApplicationAttemptId attemptId,\n       Service service) throws IOException {\n     LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n     serviceRecord.description \u003d \"YarnServiceMaster\";\n \n     // set any provided attributes\n     setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n         serviceRecord);\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n-          yarnRegistryOperations.registerSelf(serviceRecord, true);\n+          yarnRegistryOperations.registerSelf(serviceRecord, false);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Service service) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"YarnServiceMaster\";\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, false);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "ce74e64363abc64561263be70a923ab3e67f043f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7210. Some NPE fixes in Registry DNS. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "307d55b3e1ec9261c73e63286887c0b90a0c961e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,39 @@\n   private void registerServiceInstance(ApplicationAttemptId attemptId,\n       Service service) throws IOException {\n     LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n-    serviceRecord.description \u003d \"Yarn Service Master\";\n-\n-    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n-        .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n-            context.clientAMService.getBindAddress()));\n+    serviceRecord.description \u003d \"YarnServiceMaster\";\n \n     // set any provided attributes\n     setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n         serviceRecord);\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, true);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Service service) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"YarnServiceMaster\";\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, true);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void registerServiceInstance(ApplicationAttemptId attemptId,\n-      Application application) throws IOException {\n-    LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n+      Service service) throws IOException {\n+    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n     serviceRecord.description \u003d \"Yarn Service Master\";\n \n     serviceRecord.addExternalEndpoint(RegistryTypeUtils\n         .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n             context.clientAMService.getBindAddress()));\n \n     // set any provided attributes\n-    setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n+    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n         serviceRecord);\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, true);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Service service) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"Yarn Service Master\";\n\n    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n        .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n            context.clientAMService.getBindAddress()));\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, true);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void registerServiceInstance(ApplicationAttemptId attemptId,\n-      Application application) throws IOException {\n-    LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n+      Service service) throws IOException {\n+    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n     serviceRecord.description \u003d \"Yarn Service Master\";\n \n     serviceRecord.addExternalEndpoint(RegistryTypeUtils\n         .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n             context.clientAMService.getBindAddress()));\n \n     // set any provided attributes\n-    setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n+    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n         serviceRecord);\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, true);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Service service) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"Yarn Service Master\";\n\n    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n        .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n            context.clientAMService.getBindAddress()));\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, true);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void registerServiceInstance(ApplicationAttemptId attemptId,\n-      Application application) throws IOException {\n-    LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n+      Service service) throws IOException {\n+    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n     serviceRecord.description \u003d \"Yarn Service Master\";\n \n     serviceRecord.addExternalEndpoint(RegistryTypeUtils\n         .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n             context.clientAMService.getBindAddress()));\n \n     // set any provided attributes\n-    setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n+    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n         serviceRecord);\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, true);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Service service) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + service.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"Yarn Service Master\";\n\n    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n        .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n            context.clientAMService.getBindAddress()));\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(service.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, true);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldValue": "[attemptId-ApplicationAttemptId, application-Application]",
            "newValue": "[attemptId-ApplicationAttemptId, service-Service]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  protected void registerServiceInstance(ApplicationAttemptId attemptId,\n+  private void registerServiceInstance(ApplicationAttemptId attemptId,\n       Application application) throws IOException {\n     LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n-    serviceRecord.description \u003d \"Slider Application Master\";\n+    serviceRecord.description \u003d \"Yarn Service Master\";\n \n     serviceRecord.addExternalEndpoint(RegistryTypeUtils\n-        .ipcEndpoint(CustomRegistryConstants.AM_IPC_PROTOCOL,\n-            new InetSocketAddress(5000))); // FIXME\n+        .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n+            context.clientAMService.getBindAddress()));\n \n     // set any provided attributes\n     setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n         serviceRecord);\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, true);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n-      serviceTimelinePublisher.serviceAttemptRegistered(app);\n+      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Application application) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"Yarn Service Master\";\n\n    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n        .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n            context.clientAMService.getBindAddress()));\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, true);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  protected void registerServiceInstance(ApplicationAttemptId attemptId,\n+  private void registerServiceInstance(ApplicationAttemptId attemptId,\n       Application application) throws IOException {\n     LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n-    serviceRecord.description \u003d \"Slider Application Master\";\n+    serviceRecord.description \u003d \"Yarn Service Master\";\n \n     serviceRecord.addExternalEndpoint(RegistryTypeUtils\n-        .ipcEndpoint(CustomRegistryConstants.AM_IPC_PROTOCOL,\n-            new InetSocketAddress(5000))); // FIXME\n+        .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n+            context.clientAMService.getBindAddress()));\n \n     // set any provided attributes\n     setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n         serviceRecord);\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, true);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n-      serviceTimelinePublisher.serviceAttemptRegistered(app);\n+      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Application application) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"Yarn Service Master\";\n\n    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n        .ipcEndpoint(\"classpath:org.apache.hadoop.yarn.service.appmaster.ipc\",\n            context.clientAMService.getBindAddress()));\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, true);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "79bf5c084d4a063f1a933cae498af23edfd46792": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-7029. Add more UTs in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n-  private void registerServiceInstance(ApplicationAttemptId attemptId,\n+  protected void registerServiceInstance(ApplicationAttemptId attemptId,\n       Application application) throws IOException {\n     LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n         + \" into registry\");\n     ServiceRecord serviceRecord \u003d new ServiceRecord();\n     serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n         attemptId.getApplicationId().toString());\n     serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n         PersistencePolicies.APPLICATION);\n     serviceRecord.description \u003d \"Slider Application Master\";\n \n     serviceRecord.addExternalEndpoint(RegistryTypeUtils\n         .ipcEndpoint(CustomRegistryConstants.AM_IPC_PROTOCOL,\n             new InetSocketAddress(5000))); // FIXME\n \n     // set any provided attributes\n     setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n         serviceRecord);\n \n     executorService.submit(new Runnable() {\n       @Override public void run() {\n         try {\n           yarnRegistryOperations.registerSelf(serviceRecord, true);\n           LOG.info(\"Registered service under {}; absolute path {}\",\n               yarnRegistryOperations.getSelfRegistrationPath(),\n               yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n           boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n           // delete the children in case there are any and this is an AM startup.\n           // just to make sure everything underneath is purged\n           if (isFirstAttempt) {\n             yarnRegistryOperations.deleteChildren(\n                 yarnRegistryOperations.getSelfRegistrationPath(), true);\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to register app \" + app.getName() + \" in registry\");\n         }\n       }\n     });\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher.serviceAttemptRegistered(app);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerServiceInstance(ApplicationAttemptId attemptId,\n      Application application) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"Slider Application Master\";\n\n    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n        .ipcEndpoint(CustomRegistryConstants.AM_IPC_PROTOCOL,\n            new InetSocketAddress(5000))); // FIXME\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, true);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,43 @@\n+  private void registerServiceInstance(ApplicationAttemptId attemptId,\n+      Application application) throws IOException {\n+    LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n+        + \" into registry\");\n+    ServiceRecord serviceRecord \u003d new ServiceRecord();\n+    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n+        attemptId.getApplicationId().toString());\n+    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n+        PersistencePolicies.APPLICATION);\n+    serviceRecord.description \u003d \"Slider Application Master\";\n+\n+    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n+        .ipcEndpoint(CustomRegistryConstants.AM_IPC_PROTOCOL,\n+            new InetSocketAddress(5000))); // FIXME\n+\n+    // set any provided attributes\n+    setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n+        serviceRecord);\n+\n+    executorService.submit(new Runnable() {\n+      @Override public void run() {\n+        try {\n+          yarnRegistryOperations.registerSelf(serviceRecord, true);\n+          LOG.info(\"Registered service under {}; absolute path {}\",\n+              yarnRegistryOperations.getSelfRegistrationPath(),\n+              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n+          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n+          // delete the children in case there are any and this is an AM startup.\n+          // just to make sure everything underneath is purged\n+          if (isFirstAttempt) {\n+            yarnRegistryOperations.deleteChildren(\n+                yarnRegistryOperations.getSelfRegistrationPath(), true);\n+          }\n+        } catch (IOException e) {\n+          LOG.error(\n+              \"Failed to register app \" + app.getName() + \" in registry\");\n+        }\n+      }\n+    });\n+    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n+      serviceTimelinePublisher.serviceAttemptRegistered(app);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerServiceInstance(ApplicationAttemptId attemptId,\n      Application application) throws IOException {\n    LOG.info(\"Registering \" + attemptId + \", \" + application.getName()\n        + \" into registry\");\n    ServiceRecord serviceRecord \u003d new ServiceRecord();\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID,\n        attemptId.getApplicationId().toString());\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.APPLICATION);\n    serviceRecord.description \u003d \"Slider Application Master\";\n\n    serviceRecord.addExternalEndpoint(RegistryTypeUtils\n        .ipcEndpoint(CustomRegistryConstants.AM_IPC_PROTOCOL,\n            new InetSocketAddress(5000))); // FIXME\n\n    // set any provided attributes\n    setUserProvidedServiceRecordAttributes(application.getConfiguration(),\n        serviceRecord);\n\n    executorService.submit(new Runnable() {\n      @Override public void run() {\n        try {\n          yarnRegistryOperations.registerSelf(serviceRecord, true);\n          LOG.info(\"Registered service under {}; absolute path {}\",\n              yarnRegistryOperations.getSelfRegistrationPath(),\n              yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\n          boolean isFirstAttempt \u003d 1 \u003d\u003d attemptId.getAttemptId();\n          // delete the children in case there are any and this is an AM startup.\n          // just to make sure everything underneath is purged\n          if (isFirstAttempt) {\n            yarnRegistryOperations.deleteChildren(\n                yarnRegistryOperations.getSelfRegistrationPath(), true);\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to register app \" + app.getName() + \" in registry\");\n        }\n      }\n    });\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptRegistered(app);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}