{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSFileSystem.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___path-Path",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
  "functionStartLine": 258,
  "functionEndLine": 296,
  "numCommitsSeen": 22,
  "timeTaken": 2390,
  "changeHistory": [
    "6dfe00c71eb3721e9be3fc42349a81c4b013ada1",
    "5ff0cf86a940fd83f1425794921cc075b19f1108",
    "a8a594b4c89319bef294534755f0e4ed6198ec88",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
    "a5d5342228050a778b20e95adf7885bdba39985d"
  ],
  "changeHistoryShort": {
    "6dfe00c71eb3721e9be3fc42349a81c4b013ada1": "Ybodychange",
    "5ff0cf86a940fd83f1425794921cc075b19f1108": "Ybodychange",
    "a8a594b4c89319bef294534755f0e4ed6198ec88": "Ybodychange",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": "Ybodychange",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": "Ybodychange",
    "a5d5342228050a778b20e95adf7885bdba39985d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6dfe00c71eb3721e9be3fc42349a81c4b013ada1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16840. AliyunOSS: getFileStatus throws FileNotFoundException in versioning bucket. Contributed by wujinhu.\n",
      "commitDate": "08/03/20 9:01 PM",
      "commitName": "6dfe00c71eb3721e9be3fc42349a81c4b013ada1",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "18/03/19 6:55 PM",
      "commitNameOld": "568d3ab8b65d1348dec9c971feffe200e6cba2ef",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 356.09,
      "commitsBetweenForRepo": 2116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,39 @@\n   public FileStatus getFileStatus(Path path) throws IOException {\n     Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n     String key \u003d pathToKey(qualifiedPath);\n \n     // Root always exists\n     if (key.length() \u003d\u003d 0) {\n       return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n     }\n \n     ObjectMetadata meta \u003d store.getObjectMetadata(key);\n     // If key not found and key does not end with \"/\"\n     if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n       // In case of \u0027dir + \"/\"\u0027\n       key +\u003d \"/\";\n       meta \u003d store.getObjectMetadata(key);\n     }\n     if (meta \u003d\u003d null) {\n       ObjectListing listing \u003d store.listObjects(key, 1, null, false);\n-      if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n-          CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n-        return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n-      } else {\n-        throw new FileNotFoundException(path + \": No such file or directory!\");\n-      }\n+      do {\n+        if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n+            CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n+          return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n+        } else if (listing.isTruncated()) {\n+          listing \u003d store.listObjects(key, 1000, listing.getNextMarker(),\n+              false);\n+        } else {\n+          throw new FileNotFoundException(\n+              path + \": No such file or directory!\");\n+        }\n+      } while (true);\n     } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n       return new OSSFileStatus(0, true, 1, 0, meta.getLastModified().getTime(),\n           qualifiedPath, username);\n     } else {\n       return new OSSFileStatus(meta.getContentLength(), false, 1,\n           getDefaultBlockSize(path), meta.getLastModified().getTime(),\n           qualifiedPath, username);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path path) throws IOException {\n    Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n    String key \u003d pathToKey(qualifiedPath);\n\n    // Root always exists\n    if (key.length() \u003d\u003d 0) {\n      return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n    }\n\n    ObjectMetadata meta \u003d store.getObjectMetadata(key);\n    // If key not found and key does not end with \"/\"\n    if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n      // In case of \u0027dir + \"/\"\u0027\n      key +\u003d \"/\";\n      meta \u003d store.getObjectMetadata(key);\n    }\n    if (meta \u003d\u003d null) {\n      ObjectListing listing \u003d store.listObjects(key, 1, null, false);\n      do {\n        if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n            CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n          return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n        } else if (listing.isTruncated()) {\n          listing \u003d store.listObjects(key, 1000, listing.getNextMarker(),\n              false);\n        } else {\n          throw new FileNotFoundException(\n              path + \": No such file or directory!\");\n        }\n      } while (true);\n    } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n      return new OSSFileStatus(0, true, 1, 0, meta.getLastModified().getTime(),\n          qualifiedPath, username);\n    } else {\n      return new OSSFileStatus(meta.getContentLength(), false, 1,\n          getDefaultBlockSize(path), meta.getLastModified().getTime(),\n          qualifiedPath, username);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "5ff0cf86a940fd83f1425794921cc075b19f1108": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15943. AliyunOSS: add missing owner \u0026 group attributes for oss FileStatus. Contributed by wujinhu.\n",
      "commitDate": "22/11/18 9:56 PM",
      "commitName": "5ff0cf86a940fd83f1425794921cc075b19f1108",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "18/11/18 10:00 PM",
      "commitNameOld": "be0708c6eb3c759e43639e0f8df7c9910308fb97",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 4.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public FileStatus getFileStatus(Path path) throws IOException {\n     Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n     String key \u003d pathToKey(qualifiedPath);\n \n     // Root always exists\n     if (key.length() \u003d\u003d 0) {\n-      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n+      return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n     }\n \n     ObjectMetadata meta \u003d store.getObjectMetadata(key);\n     // If key not found and key does not end with \"/\"\n     if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n       // In case of \u0027dir + \"/\"\u0027\n       key +\u003d \"/\";\n       meta \u003d store.getObjectMetadata(key);\n     }\n     if (meta \u003d\u003d null) {\n       ObjectListing listing \u003d store.listObjects(key, 1, null, false);\n       if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n           CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n-        return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n+        return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n       } else {\n         throw new FileNotFoundException(path + \": No such file or directory!\");\n       }\n     } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n-      return new FileStatus(0, true, 1, 0, meta.getLastModified().getTime(),\n-          qualifiedPath);\n+      return new OSSFileStatus(0, true, 1, 0, meta.getLastModified().getTime(),\n+          qualifiedPath, username);\n     } else {\n-      return new FileStatus(meta.getContentLength(), false, 1,\n+      return new OSSFileStatus(meta.getContentLength(), false, 1,\n           getDefaultBlockSize(path), meta.getLastModified().getTime(),\n-          qualifiedPath);\n+          qualifiedPath, username);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path path) throws IOException {\n    Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n    String key \u003d pathToKey(qualifiedPath);\n\n    // Root always exists\n    if (key.length() \u003d\u003d 0) {\n      return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n    }\n\n    ObjectMetadata meta \u003d store.getObjectMetadata(key);\n    // If key not found and key does not end with \"/\"\n    if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n      // In case of \u0027dir + \"/\"\u0027\n      key +\u003d \"/\";\n      meta \u003d store.getObjectMetadata(key);\n    }\n    if (meta \u003d\u003d null) {\n      ObjectListing listing \u003d store.listObjects(key, 1, null, false);\n      if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n          CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n        return new OSSFileStatus(0, true, 1, 0, 0, qualifiedPath, username);\n      } else {\n        throw new FileNotFoundException(path + \": No such file or directory!\");\n      }\n    } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n      return new OSSFileStatus(0, true, 1, 0, meta.getLastModified().getTime(),\n          qualifiedPath, username);\n    } else {\n      return new OSSFileStatus(meta.getContentLength(), false, 1,\n          getDefaultBlockSize(path), meta.getLastModified().getTime(),\n          qualifiedPath, username);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "a8a594b4c89319bef294534755f0e4ed6198ec88": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14065. AliyunOSS: oss directory filestatus should use meta time. Contributed by Fei Hui\n",
      "commitDate": "09/02/17 2:00 AM",
      "commitName": "a8a594b4c89319bef294534755f0e4ed6198ec88",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "08/10/16 4:35 AM",
      "commitNameOld": "c31b5e61b1f09949548116309218a2b3e9c0beda",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 123.93,
      "commitsBetweenForRepo": 767,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   public FileStatus getFileStatus(Path path) throws IOException {\n     Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n     String key \u003d pathToKey(qualifiedPath);\n \n     // Root always exists\n     if (key.length() \u003d\u003d 0) {\n       return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n     }\n \n     ObjectMetadata meta \u003d store.getObjectMetadata(key);\n     // If key not found and key does not end with \"/\"\n     if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n       // In case of \u0027dir + \"/\"\u0027\n       key +\u003d \"/\";\n       meta \u003d store.getObjectMetadata(key);\n     }\n     if (meta \u003d\u003d null) {\n       ObjectListing listing \u003d store.listObjects(key, 1, null, false);\n       if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n           CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n         return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n       } else {\n         throw new FileNotFoundException(path + \": No such file or directory!\");\n       }\n     } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n-      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n+      return new FileStatus(0, true, 1, 0, meta.getLastModified().getTime(),\n+           qualifiedPath);\n     } else {\n       return new FileStatus(meta.getContentLength(), false, 1,\n           getDefaultBlockSize(path), meta.getLastModified().getTime(),\n           qualifiedPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path path) throws IOException {\n    Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n    String key \u003d pathToKey(qualifiedPath);\n\n    // Root always exists\n    if (key.length() \u003d\u003d 0) {\n      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n    }\n\n    ObjectMetadata meta \u003d store.getObjectMetadata(key);\n    // If key not found and key does not end with \"/\"\n    if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n      // In case of \u0027dir + \"/\"\u0027\n      key +\u003d \"/\";\n      meta \u003d store.getObjectMetadata(key);\n    }\n    if (meta \u003d\u003d null) {\n      ObjectListing listing \u003d store.listObjects(key, 1, null, false);\n      if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n          CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n        return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n      } else {\n        throw new FileNotFoundException(path + \": No such file or directory!\");\n      }\n    } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n      return new FileStatus(0, true, 1, 0, meta.getLastModified().getTime(),\n           qualifiedPath);\n    } else {\n      return new FileStatus(meta.getContentLength(), false, 1,\n          getDefaultBlockSize(path), meta.getLastModified().getTime(),\n          qualifiedPath);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13591. Unit test failure in TestOSSContractGetFileStatus and TestOSSContractRootDir. Contributed by Genmao Yu\n",
      "commitDate": "20/09/16 12:12 AM",
      "commitName": "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "19/09/16 8:39 PM",
      "commitNameOld": "9cd47602576cd01a905e27642b685905a88eee72",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public FileStatus getFileStatus(Path path) throws IOException {\n     Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n     String key \u003d pathToKey(qualifiedPath);\n \n     // Root always exists\n     if (key.length() \u003d\u003d 0) {\n       return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n     }\n \n     ObjectMetadata meta \u003d store.getObjectMetadata(key);\n     // If key not found and key does not end with \"/\"\n     if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n-      // Case: dir + \"/\"\n+      // In case of \u0027dir + \"/\"\u0027\n       key +\u003d \"/\";\n       meta \u003d store.getObjectMetadata(key);\n     }\n     if (meta \u003d\u003d null) {\n-      ObjectListing listing \u003d store.listObjects(key, 1, \"/\", null);\n-      if (!listing.getObjectSummaries().isEmpty() ||\n-          !listing.getCommonPrefixes().isEmpty()) {\n+      ObjectListing listing \u003d store.listObjects(key, 1, null, false);\n+      if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n+          CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n         return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n       } else {\n         throw new FileNotFoundException(path + \": No such file or directory!\");\n       }\n     } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n       return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n     } else {\n       return new FileStatus(meta.getContentLength(), false, 1,\n           getDefaultBlockSize(path), meta.getLastModified().getTime(),\n           qualifiedPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path path) throws IOException {\n    Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n    String key \u003d pathToKey(qualifiedPath);\n\n    // Root always exists\n    if (key.length() \u003d\u003d 0) {\n      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n    }\n\n    ObjectMetadata meta \u003d store.getObjectMetadata(key);\n    // If key not found and key does not end with \"/\"\n    if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n      // In case of \u0027dir + \"/\"\u0027\n      key +\u003d \"/\";\n      meta \u003d store.getObjectMetadata(key);\n    }\n    if (meta \u003d\u003d null) {\n      ObjectListing listing \u003d store.listObjects(key, 1, null, false);\n      if (CollectionUtils.isNotEmpty(listing.getObjectSummaries()) ||\n          CollectionUtils.isNotEmpty(listing.getCommonPrefixes())) {\n        return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n      } else {\n        throw new FileNotFoundException(path + \": No such file or directory!\");\n      }\n    } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n    } else {\n      return new FileStatus(meta.getContentLength(), false, 1,\n          getDefaultBlockSize(path), meta.getLastModified().getTime(),\n          qualifiedPath);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthor": "Mingfei",
      "commitDateOld": "06/09/16 8:15 PM",
      "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
      "commitAuthorOld": "Mingfei",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,32 @@\n   public FileStatus getFileStatus(Path path) throws IOException {\n     Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n     String key \u003d pathToKey(qualifiedPath);\n \n     // Root always exists\n     if (key.length() \u003d\u003d 0) {\n       return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n     }\n \n-    ObjectMetadata meta \u003d getObjectMetadata(key);\n+    ObjectMetadata meta \u003d store.getObjectMetadata(key);\n     // If key not found and key does not end with \"/\"\n     if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n       // Case: dir + \"/\"\n       key +\u003d \"/\";\n-      meta \u003d getObjectMetadata(key);\n+      meta \u003d store.getObjectMetadata(key);\n     }\n     if (meta \u003d\u003d null) {\n-      // Case: dir + \"/\" + file\n-      ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n-      listRequest.setPrefix(key);\n-      listRequest.setDelimiter(\"/\");\n-      listRequest.setMaxKeys(1);\n-\n-      ObjectListing listing \u003d ossClient.listObjects(listRequest);\n-      statistics.incrementReadOps(1);\n+      ObjectListing listing \u003d store.listObjects(key, 1, \"/\", null);\n       if (!listing.getObjectSummaries().isEmpty() ||\n           !listing.getCommonPrefixes().isEmpty()) {\n         return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n       } else {\n         throw new FileNotFoundException(path + \": No such file or directory!\");\n       }\n     } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n       return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n     } else {\n       return new FileStatus(meta.getContentLength(), false, 1,\n           getDefaultBlockSize(path), meta.getLastModified().getTime(),\n           qualifiedPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path path) throws IOException {\n    Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n    String key \u003d pathToKey(qualifiedPath);\n\n    // Root always exists\n    if (key.length() \u003d\u003d 0) {\n      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n    }\n\n    ObjectMetadata meta \u003d store.getObjectMetadata(key);\n    // If key not found and key does not end with \"/\"\n    if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n      // Case: dir + \"/\"\n      key +\u003d \"/\";\n      meta \u003d store.getObjectMetadata(key);\n    }\n    if (meta \u003d\u003d null) {\n      ObjectListing listing \u003d store.listObjects(key, 1, \"/\", null);\n      if (!listing.getObjectSummaries().isEmpty() ||\n          !listing.getCommonPrefixes().isEmpty()) {\n        return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n      } else {\n        throw new FileNotFoundException(path + \": No such file or directory!\");\n      }\n    } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n    } else {\n      return new FileStatus(meta.getContentLength(), false, 1,\n          getDefaultBlockSize(path), meta.getLastModified().getTime(),\n          qualifiedPath);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "a5d5342228050a778b20e95adf7885bdba39985d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12756. Incorporate Aliyun OSS file system implementation. Contributed by Mingfei Shi and Lin Zhou\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "a5d5342228050a778b20e95adf7885bdba39985d",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,39 @@\n+  public FileStatus getFileStatus(Path path) throws IOException {\n+    Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n+    String key \u003d pathToKey(qualifiedPath);\n+\n+    // Root always exists\n+    if (key.length() \u003d\u003d 0) {\n+      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n+    }\n+\n+    ObjectMetadata meta \u003d getObjectMetadata(key);\n+    // If key not found and key does not end with \"/\"\n+    if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n+      // Case: dir + \"/\"\n+      key +\u003d \"/\";\n+      meta \u003d getObjectMetadata(key);\n+    }\n+    if (meta \u003d\u003d null) {\n+      // Case: dir + \"/\" + file\n+      ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n+      listRequest.setPrefix(key);\n+      listRequest.setDelimiter(\"/\");\n+      listRequest.setMaxKeys(1);\n+\n+      ObjectListing listing \u003d ossClient.listObjects(listRequest);\n+      statistics.incrementReadOps(1);\n+      if (!listing.getObjectSummaries().isEmpty() ||\n+          !listing.getCommonPrefixes().isEmpty()) {\n+        return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n+      } else {\n+        throw new FileNotFoundException(path + \": No such file or directory!\");\n+      }\n+    } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n+      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n+    } else {\n+      return new FileStatus(meta.getContentLength(), false, 1,\n+          getDefaultBlockSize(path), meta.getLastModified().getTime(),\n+          qualifiedPath);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path path) throws IOException {\n    Path qualifiedPath \u003d path.makeQualified(uri, workingDir);\n    String key \u003d pathToKey(qualifiedPath);\n\n    // Root always exists\n    if (key.length() \u003d\u003d 0) {\n      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n    }\n\n    ObjectMetadata meta \u003d getObjectMetadata(key);\n    // If key not found and key does not end with \"/\"\n    if (meta \u003d\u003d null \u0026\u0026 !key.endsWith(\"/\")) {\n      // Case: dir + \"/\"\n      key +\u003d \"/\";\n      meta \u003d getObjectMetadata(key);\n    }\n    if (meta \u003d\u003d null) {\n      // Case: dir + \"/\" + file\n      ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n      listRequest.setPrefix(key);\n      listRequest.setDelimiter(\"/\");\n      listRequest.setMaxKeys(1);\n\n      ObjectListing listing \u003d ossClient.listObjects(listRequest);\n      statistics.incrementReadOps(1);\n      if (!listing.getObjectSummaries().isEmpty() ||\n          !listing.getCommonPrefixes().isEmpty()) {\n        return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n      } else {\n        throw new FileNotFoundException(path + \": No such file or directory!\");\n      }\n    } else if (objectRepresentsDirectory(key, meta.getContentLength())) {\n      return new FileStatus(0, true, 1, 0, 0, qualifiedPath);\n    } else {\n      return new FileStatus(meta.getContentLength(), false, 1,\n          getDefaultBlockSize(path), meta.getLastModified().getTime(),\n          qualifiedPath);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java"
    }
  }
}