{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeManagerHardwareUtils.java",
  "functionName": "getContainerMemoryMB",
  "functionId": "getContainerMemoryMB___plugin-ResourceCalculatorPlugin__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java",
  "functionStartLine": 302,
  "functionEndLine": 308,
  "numCommitsSeen": 10,
  "timeTaken": 2151,
  "changeHistory": [
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
    "3541ed80685f25486f33ef0f553854ccbdeb51d4",
    "500a1d9c76ec612b4e737888f4be79951c11591d"
  ],
  "changeHistoryShort": {
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d": "Yreturntypechange",
    "3541ed80685f25486f33ef0f553854ccbdeb51d4": "Ybodychange",
    "500a1d9c76ec612b4e737888f4be79951c11591d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d": {
      "type": "Yreturntypechange",
      "commitMessage": "YARN-7039. Fix javac and javadoc errors in YARN-3926 branch. (Sunil G via wangda)\n\nChange-Id: I442bf6d838b3aba83f1f6779cf9dcf8596a2102d\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n-  public static int getContainerMemoryMB(ResourceCalculatorPlugin plugin,\n+  public static long getContainerMemoryMB(ResourceCalculatorPlugin plugin,\n       Configuration conf) {\n     if (!isHardwareDetectionEnabled(conf) || plugin \u003d\u003d null) {\n       return getConfiguredMemoryMB(conf);\n     }\n     return getContainerMemoryMBInternal(plugin, conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static long getContainerMemoryMB(ResourceCalculatorPlugin plugin,\n      Configuration conf) {\n    if (!isHardwareDetectionEnabled(conf) || plugin \u003d\u003d null) {\n      return getConfiguredMemoryMB(conf);\n    }\n    return getContainerMemoryMBInternal(plugin, conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java",
      "extendedDetails": {
        "oldValue": "int",
        "newValue": "long"
      }
    },
    "3541ed80685f25486f33ef0f553854ccbdeb51d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4330. MiniYARNCluster is showing multiple  Failed to instantiate default resource calculator warning messages. Contributed by Varun Saxena\n",
      "commitDate": "23/11/16 12:42 AM",
      "commitName": "3541ed80685f25486f33ef0f553854ccbdeb51d4",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "26/05/15 11:38 AM",
      "commitNameOld": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 546.59,
      "commitsBetweenForRepo": 3985,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,7 @@\n   public static int getContainerMemoryMB(ResourceCalculatorPlugin plugin,\n       Configuration conf) {\n-\n-    int memoryMb;\n-    boolean hardwareDetectionEnabled \u003d conf.getBoolean(\n-          YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION,\n-          YarnConfiguration.DEFAULT_NM_ENABLE_HARDWARE_CAPABILITY_DETECTION);\n-\n-    if (!hardwareDetectionEnabled || plugin \u003d\u003d null) {\n-      memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB,\n-            YarnConfiguration.DEFAULT_NM_PMEM_MB);\n-      if (memoryMb \u003d\u003d -1) {\n-        memoryMb \u003d YarnConfiguration.DEFAULT_NM_PMEM_MB;\n-      }\n-    } else {\n-      memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, -1);\n-      if (memoryMb \u003d\u003d -1) {\n-        int physicalMemoryMB \u003d\n-            (int) (plugin.getPhysicalMemorySize() / (1024 * 1024));\n-        int hadoopHeapSizeMB \u003d\n-            (int) (Runtime.getRuntime().maxMemory() / (1024 * 1024));\n-        int containerPhysicalMemoryMB \u003d\n-            (int) (0.8f * (physicalMemoryMB - (2 * hadoopHeapSizeMB)));\n-        int reservedMemoryMB \u003d\n-            conf.getInt(YarnConfiguration.NM_SYSTEM_RESERVED_PMEM_MB, -1);\n-        if (reservedMemoryMB !\u003d -1) {\n-          containerPhysicalMemoryMB \u003d physicalMemoryMB - reservedMemoryMB;\n-        }\n-        if(containerPhysicalMemoryMB \u003c\u003d 0) {\n-          LOG.error(\"Calculated memory for YARN containers is too low.\"\n-              + \" Node memory is \" + physicalMemoryMB\n-              + \" MB, system reserved memory is \"\n-              + reservedMemoryMB + \" MB.\");\n-        }\n-        containerPhysicalMemoryMB \u003d Math.max(containerPhysicalMemoryMB, 0);\n-        memoryMb \u003d containerPhysicalMemoryMB;\n-      }\n+    if (!isHardwareDetectionEnabled(conf) || plugin \u003d\u003d null) {\n+      return getConfiguredMemoryMB(conf);\n     }\n-    if(memoryMb \u003c\u003d 0) {\n-      String message \u003d \"Illegal value for \" + YarnConfiguration.NM_PMEM_MB\n-          + \". Value must be greater than 0.\";\n-      throw new IllegalArgumentException(message);\n-    }\n-    return memoryMb;\n+    return getContainerMemoryMBInternal(plugin, conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int getContainerMemoryMB(ResourceCalculatorPlugin plugin,\n      Configuration conf) {\n    if (!isHardwareDetectionEnabled(conf) || plugin \u003d\u003d null) {\n      return getConfiguredMemoryMB(conf);\n    }\n    return getContainerMemoryMBInternal(plugin, conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java",
      "extendedDetails": {}
    },
    "500a1d9c76ec612b4e737888f4be79951c11591d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-160. Enhanced NodeManager to automatically obtain cpu/memory values from underlying OS when configured to do so. Contributed by Varun Vasudev.\n",
      "commitDate": "26/05/15 11:38 AM",
      "commitName": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,45 @@\n+  public static int getContainerMemoryMB(ResourceCalculatorPlugin plugin,\n+      Configuration conf) {\n+\n+    int memoryMb;\n+    boolean hardwareDetectionEnabled \u003d conf.getBoolean(\n+          YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION,\n+          YarnConfiguration.DEFAULT_NM_ENABLE_HARDWARE_CAPABILITY_DETECTION);\n+\n+    if (!hardwareDetectionEnabled || plugin \u003d\u003d null) {\n+      memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB,\n+            YarnConfiguration.DEFAULT_NM_PMEM_MB);\n+      if (memoryMb \u003d\u003d -1) {\n+        memoryMb \u003d YarnConfiguration.DEFAULT_NM_PMEM_MB;\n+      }\n+    } else {\n+      memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, -1);\n+      if (memoryMb \u003d\u003d -1) {\n+        int physicalMemoryMB \u003d\n+            (int) (plugin.getPhysicalMemorySize() / (1024 * 1024));\n+        int hadoopHeapSizeMB \u003d\n+            (int) (Runtime.getRuntime().maxMemory() / (1024 * 1024));\n+        int containerPhysicalMemoryMB \u003d\n+            (int) (0.8f * (physicalMemoryMB - (2 * hadoopHeapSizeMB)));\n+        int reservedMemoryMB \u003d\n+            conf.getInt(YarnConfiguration.NM_SYSTEM_RESERVED_PMEM_MB, -1);\n+        if (reservedMemoryMB !\u003d -1) {\n+          containerPhysicalMemoryMB \u003d physicalMemoryMB - reservedMemoryMB;\n+        }\n+        if(containerPhysicalMemoryMB \u003c\u003d 0) {\n+          LOG.error(\"Calculated memory for YARN containers is too low.\"\n+              + \" Node memory is \" + physicalMemoryMB\n+              + \" MB, system reserved memory is \"\n+              + reservedMemoryMB + \" MB.\");\n+        }\n+        containerPhysicalMemoryMB \u003d Math.max(containerPhysicalMemoryMB, 0);\n+        memoryMb \u003d containerPhysicalMemoryMB;\n+      }\n+    }\n+    if(memoryMb \u003c\u003d 0) {\n+      String message \u003d \"Illegal value for \" + YarnConfiguration.NM_PMEM_MB\n+          + \". Value must be greater than 0.\";\n+      throw new IllegalArgumentException(message);\n+    }\n+    return memoryMb;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int getContainerMemoryMB(ResourceCalculatorPlugin plugin,\n      Configuration conf) {\n\n    int memoryMb;\n    boolean hardwareDetectionEnabled \u003d conf.getBoolean(\n          YarnConfiguration.NM_ENABLE_HARDWARE_CAPABILITY_DETECTION,\n          YarnConfiguration.DEFAULT_NM_ENABLE_HARDWARE_CAPABILITY_DETECTION);\n\n    if (!hardwareDetectionEnabled || plugin \u003d\u003d null) {\n      memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB,\n            YarnConfiguration.DEFAULT_NM_PMEM_MB);\n      if (memoryMb \u003d\u003d -1) {\n        memoryMb \u003d YarnConfiguration.DEFAULT_NM_PMEM_MB;\n      }\n    } else {\n      memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, -1);\n      if (memoryMb \u003d\u003d -1) {\n        int physicalMemoryMB \u003d\n            (int) (plugin.getPhysicalMemorySize() / (1024 * 1024));\n        int hadoopHeapSizeMB \u003d\n            (int) (Runtime.getRuntime().maxMemory() / (1024 * 1024));\n        int containerPhysicalMemoryMB \u003d\n            (int) (0.8f * (physicalMemoryMB - (2 * hadoopHeapSizeMB)));\n        int reservedMemoryMB \u003d\n            conf.getInt(YarnConfiguration.NM_SYSTEM_RESERVED_PMEM_MB, -1);\n        if (reservedMemoryMB !\u003d -1) {\n          containerPhysicalMemoryMB \u003d physicalMemoryMB - reservedMemoryMB;\n        }\n        if(containerPhysicalMemoryMB \u003c\u003d 0) {\n          LOG.error(\"Calculated memory for YARN containers is too low.\"\n              + \" Node memory is \" + physicalMemoryMB\n              + \" MB, system reserved memory is \"\n              + reservedMemoryMB + \" MB.\");\n        }\n        containerPhysicalMemoryMB \u003d Math.max(containerPhysicalMemoryMB, 0);\n        memoryMb \u003d containerPhysicalMemoryMB;\n      }\n    }\n    if(memoryMb \u003c\u003d 0) {\n      String message \u003d \"Illegal value for \" + YarnConfiguration.NM_PMEM_MB\n          + \". Value must be greater than 0.\";\n      throw new IllegalArgumentException(message);\n    }\n    return memoryMb;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java"
    }
  }
}