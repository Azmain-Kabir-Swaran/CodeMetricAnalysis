{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Receiver.java",
  "functionName": "opWriteBlock",
  "functionId": "opWriteBlock___in-DataInputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
  "functionStartLine": 167,
  "functionEndLine": 196,
  "numCommitsSeen": 33,
  "timeTaken": 7028,
  "changeHistory": [
    "a3954ccab148bddc290cb96528e63ff19799bcc9",
    "06022b8fdc40e50eaac63758246353058e8cfa6d",
    "e2c9b288b223b9fd82dc12018936e13128413492",
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
    "085b1e293ff53f7a86aa21406cfd4bfa0f3bf33b",
    "56119fec96abbcc44c5dd82fdb694d2c3b53feb3",
    "c2354a7f81ff5a48a5b65d25e1036d3e0ba86420",
    "25b0e8471ed744578b2d8e3f0debe5477b268e54",
    "c1314eb2a382bd9ce045a2fcc4a9e5c1fc368a24",
    "3cd17b614e9436d06cd9b4ccc5f9cf59fbe1cf21",
    "1c940637b14eee777a65d153d0d712a1aea3866c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "2f48fae72aa52e6ec42264cad24fab36b6a426c2",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "a3954ccab148bddc290cb96528e63ff19799bcc9": "Ybodychange",
    "06022b8fdc40e50eaac63758246353058e8cfa6d": "Ybodychange",
    "e2c9b288b223b9fd82dc12018936e13128413492": "Ybodychange",
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42": "Ybodychange",
    "085b1e293ff53f7a86aa21406cfd4bfa0f3bf33b": "Ybodychange",
    "56119fec96abbcc44c5dd82fdb694d2c3b53feb3": "Ybodychange",
    "c2354a7f81ff5a48a5b65d25e1036d3e0ba86420": "Ybodychange",
    "25b0e8471ed744578b2d8e3f0debe5477b268e54": "Ybodychange",
    "c1314eb2a382bd9ce045a2fcc4a9e5c1fc368a24": "Ybodychange",
    "3cd17b614e9436d06cd9b4ccc5f9cf59fbe1cf21": "Ybodychange",
    "1c940637b14eee777a65d153d0d712a1aea3866c": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "2f48fae72aa52e6ec42264cad24fab36b6a426c2": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3954ccab148bddc290cb96528e63ff19799bcc9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9807. Add an optional StorageID to writes. Contributed by Ewan Higgs\n",
      "commitDate": "05/05/17 12:01 PM",
      "commitName": "a3954ccab148bddc290cb96528e63ff19799bcc9",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "24/06/16 2:39 AM",
      "commitNameOld": "e6cb07520f935efde3e881de8f84ee7f6e0a746f",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 315.39,
      "commitsBetweenForRepo": 2062,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n     final DatanodeInfo[] targets \u003d PBHelperClient.convert(proto.getTargetsList());\n     TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n         proto.getClass().getSimpleName());\n     try {\n       writeBlock(PBHelperClient.convert(proto.getHeader().getBaseHeader().getBlock()),\n           PBHelperClient.convertStorageType(proto.getStorageType()),\n           PBHelperClient.convert(proto.getHeader().getBaseHeader().getToken()),\n           proto.getHeader().getClientName(),\n           targets,\n           PBHelperClient.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n           PBHelperClient.convert(proto.getSource()),\n           fromProto(proto.getStage()),\n           proto.getPipelineSize(),\n           proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n           proto.getLatestGenerationStamp(),\n           fromProto(proto.getRequestedChecksum()),\n           (proto.hasCachingStrategy() ?\n               getCachingStrategy(proto.getCachingStrategy()) :\n             CachingStrategy.newDefaultStrategy()),\n           (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n           (proto.hasPinning() ? proto.getPinning(): false),\n-          (PBHelperClient.convertBooleanList(proto.getTargetPinningsList())));\n+          (PBHelperClient.convertBooleanList(proto.getTargetPinningsList())),\n+          proto.getStorageId(),\n+          proto.getTargetStorageIdsList().toArray(new String[0]));\n     } finally {\n      if (traceScope !\u003d null) traceScope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    final DatanodeInfo[] targets \u003d PBHelperClient.convert(proto.getTargetsList());\n    TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n        proto.getClass().getSimpleName());\n    try {\n      writeBlock(PBHelperClient.convert(proto.getHeader().getBaseHeader().getBlock()),\n          PBHelperClient.convertStorageType(proto.getStorageType()),\n          PBHelperClient.convert(proto.getHeader().getBaseHeader().getToken()),\n          proto.getHeader().getClientName(),\n          targets,\n          PBHelperClient.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n          PBHelperClient.convert(proto.getSource()),\n          fromProto(proto.getStage()),\n          proto.getPipelineSize(),\n          proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n          proto.getLatestGenerationStamp(),\n          fromProto(proto.getRequestedChecksum()),\n          (proto.hasCachingStrategy() ?\n              getCachingStrategy(proto.getCachingStrategy()) :\n            CachingStrategy.newDefaultStrategy()),\n          (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n          (proto.hasPinning() ? proto.getPinning(): false),\n          (PBHelperClient.convertBooleanList(proto.getTargetPinningsList())),\n          proto.getStorageId(),\n          proto.getTargetStorageIdsList().toArray(new String[0]));\n    } finally {\n     if (traceScope !\u003d null) traceScope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "06022b8fdc40e50eaac63758246353058e8cfa6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9111. Move hdfs-client protobuf convert methods from PBHelper to PBHelperClient. Contributed by Mingliang Liu.\n",
      "commitDate": "21/09/15 6:53 PM",
      "commitName": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:38 PM",
      "commitNameOld": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 24.18,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n-    final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n+    final DatanodeInfo[] targets \u003d PBHelperClient.convert(proto.getTargetsList());\n     TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n         proto.getClass().getSimpleName());\n     try {\n       writeBlock(PBHelperClient.convert(proto.getHeader().getBaseHeader().getBlock()),\n           PBHelperClient.convertStorageType(proto.getStorageType()),\n-          PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n+          PBHelperClient.convert(proto.getHeader().getBaseHeader().getToken()),\n           proto.getHeader().getClientName(),\n           targets,\n-          PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n-          PBHelper.convert(proto.getSource()),\n+          PBHelperClient.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n+          PBHelperClient.convert(proto.getSource()),\n           fromProto(proto.getStage()),\n           proto.getPipelineSize(),\n           proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n           proto.getLatestGenerationStamp(),\n           fromProto(proto.getRequestedChecksum()),\n           (proto.hasCachingStrategy() ?\n               getCachingStrategy(proto.getCachingStrategy()) :\n             CachingStrategy.newDefaultStrategy()),\n           (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n           (proto.hasPinning() ? proto.getPinning(): false),\n-          (PBHelper.convertBooleanList(proto.getTargetPinningsList())));\n+          (PBHelperClient.convertBooleanList(proto.getTargetPinningsList())));\n     } finally {\n      if (traceScope !\u003d null) traceScope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    final DatanodeInfo[] targets \u003d PBHelperClient.convert(proto.getTargetsList());\n    TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n        proto.getClass().getSimpleName());\n    try {\n      writeBlock(PBHelperClient.convert(proto.getHeader().getBaseHeader().getBlock()),\n          PBHelperClient.convertStorageType(proto.getStorageType()),\n          PBHelperClient.convert(proto.getHeader().getBaseHeader().getToken()),\n          proto.getHeader().getClientName(),\n          targets,\n          PBHelperClient.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n          PBHelperClient.convert(proto.getSource()),\n          fromProto(proto.getStage()),\n          proto.getPipelineSize(),\n          proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n          proto.getLatestGenerationStamp(),\n          fromProto(proto.getRequestedChecksum()),\n          (proto.hasCachingStrategy() ?\n              getCachingStrategy(proto.getCachingStrategy()) :\n            CachingStrategy.newDefaultStrategy()),\n          (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n          (proto.hasPinning() ? proto.getPinning(): false),\n          (PBHelperClient.convertBooleanList(proto.getTargetPinningsList())));\n    } finally {\n     if (traceScope !\u003d null) traceScope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "e2c9b288b223b9fd82dc12018936e13128413492": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "28/08/15 2:38 PM",
      "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/08/15 1:31 PM",
      "commitNameOld": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n     final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n     TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n         proto.getClass().getSimpleName());\n     try {\n-      writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n+      writeBlock(PBHelperClient.convert(proto.getHeader().getBaseHeader().getBlock()),\n           PBHelperClient.convertStorageType(proto.getStorageType()),\n           PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n           proto.getHeader().getClientName(),\n           targets,\n           PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n           PBHelper.convert(proto.getSource()),\n           fromProto(proto.getStage()),\n           proto.getPipelineSize(),\n           proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n           proto.getLatestGenerationStamp(),\n           fromProto(proto.getRequestedChecksum()),\n           (proto.hasCachingStrategy() ?\n               getCachingStrategy(proto.getCachingStrategy()) :\n             CachingStrategy.newDefaultStrategy()),\n           (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n           (proto.hasPinning() ? proto.getPinning(): false),\n           (PBHelper.convertBooleanList(proto.getTargetPinningsList())));\n     } finally {\n      if (traceScope !\u003d null) traceScope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n    TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n        proto.getClass().getSimpleName());\n    try {\n      writeBlock(PBHelperClient.convert(proto.getHeader().getBaseHeader().getBlock()),\n          PBHelperClient.convertStorageType(proto.getStorageType()),\n          PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n          proto.getHeader().getClientName(),\n          targets,\n          PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n          PBHelper.convert(proto.getSource()),\n          fromProto(proto.getStage()),\n          proto.getPipelineSize(),\n          proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n          proto.getLatestGenerationStamp(),\n          fromProto(proto.getRequestedChecksum()),\n          (proto.hasCachingStrategy() ?\n              getCachingStrategy(proto.getCachingStrategy()) :\n            CachingStrategy.newDefaultStrategy()),\n          (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n          (proto.hasPinning() ? proto.getPinning(): false),\n          (PBHelper.convertBooleanList(proto.getTargetPinningsList())));\n    } finally {\n     if (traceScope !\u003d null) traceScope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8934. Move ShortCircuitShm to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "22/08/15 1:31 PM",
      "commitName": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/08/15 5:02 PM",
      "commitNameOld": "7087e700e032dabc174ecc12b62c12e7d49b995f",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n     final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n     TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n         proto.getClass().getSimpleName());\n     try {\n       writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n-          PBHelper.convertStorageType(proto.getStorageType()),\n+          PBHelperClient.convertStorageType(proto.getStorageType()),\n           PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n           proto.getHeader().getClientName(),\n           targets,\n           PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n           PBHelper.convert(proto.getSource()),\n           fromProto(proto.getStage()),\n           proto.getPipelineSize(),\n           proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n           proto.getLatestGenerationStamp(),\n           fromProto(proto.getRequestedChecksum()),\n           (proto.hasCachingStrategy() ?\n               getCachingStrategy(proto.getCachingStrategy()) :\n             CachingStrategy.newDefaultStrategy()),\n           (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n           (proto.hasPinning() ? proto.getPinning(): false),\n           (PBHelper.convertBooleanList(proto.getTargetPinningsList())));\n     } finally {\n      if (traceScope !\u003d null) traceScope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n    TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n        proto.getClass().getSimpleName());\n    try {\n      writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n          PBHelperClient.convertStorageType(proto.getStorageType()),\n          PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n          proto.getHeader().getClientName(),\n          targets,\n          PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n          PBHelper.convert(proto.getSource()),\n          fromProto(proto.getStage()),\n          proto.getPipelineSize(),\n          proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n          proto.getLatestGenerationStamp(),\n          fromProto(proto.getRequestedChecksum()),\n          (proto.hasCachingStrategy() ?\n              getCachingStrategy(proto.getCachingStrategy()) :\n            CachingStrategy.newDefaultStrategy()),\n          (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n          (proto.hasPinning() ? proto.getPinning(): false),\n          (PBHelper.convertBooleanList(proto.getTargetPinningsList())));\n    } finally {\n     if (traceScope !\u003d null) traceScope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "085b1e293ff53f7a86aa21406cfd4bfa0f3bf33b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6133. Add a feature for replica pinning so that a pinned replica will not be moved by Balancer/Mover.  Contributed by zhaoyunjiong\n",
      "commitDate": "11/02/15 3:12 PM",
      "commitName": "085b1e293ff53f7a86aa21406cfd4bfa0f3bf33b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "30/01/15 4:01 PM",
      "commitNameOld": "09ad9a868a89922e9b55b3e7c5b9f41fa54d3770",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 11.97,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n     final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n     TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n         proto.getClass().getSimpleName());\n     try {\n       writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n           PBHelper.convertStorageType(proto.getStorageType()),\n           PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n           proto.getHeader().getClientName(),\n           targets,\n           PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n           PBHelper.convert(proto.getSource()),\n           fromProto(proto.getStage()),\n           proto.getPipelineSize(),\n           proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n           proto.getLatestGenerationStamp(),\n           fromProto(proto.getRequestedChecksum()),\n           (proto.hasCachingStrategy() ?\n               getCachingStrategy(proto.getCachingStrategy()) :\n             CachingStrategy.newDefaultStrategy()),\n-          (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false));\n+          (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n+          (proto.hasPinning() ? proto.getPinning(): false),\n+          (PBHelper.convertBooleanList(proto.getTargetPinningsList())));\n     } finally {\n      if (traceScope !\u003d null) traceScope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n    TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n        proto.getClass().getSimpleName());\n    try {\n      writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n          PBHelper.convertStorageType(proto.getStorageType()),\n          PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n          proto.getHeader().getClientName(),\n          targets,\n          PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n          PBHelper.convert(proto.getSource()),\n          fromProto(proto.getStage()),\n          proto.getPipelineSize(),\n          proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n          proto.getLatestGenerationStamp(),\n          fromProto(proto.getRequestedChecksum()),\n          (proto.hasCachingStrategy() ?\n              getCachingStrategy(proto.getCachingStrategy()) :\n            CachingStrategy.newDefaultStrategy()),\n          (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false),\n          (proto.hasPinning() ? proto.getPinning(): false),\n          (PBHelper.convertBooleanList(proto.getTargetPinningsList())));\n    } finally {\n     if (traceScope !\u003d null) traceScope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "56119fec96abbcc44c5dd82fdb694d2c3b53feb3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6880. Adding tracing to DataNode data transfer protocol (iwasakims via cmccabe)\n",
      "commitDate": "16/09/14 1:59 PM",
      "commitName": "56119fec96abbcc44c5dd82fdb694d2c3b53feb3",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "22/07/14 12:41 AM",
      "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 56.55,
      "commitsBetweenForRepo": 480,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,25 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n     final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n-    writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n-        PBHelper.convertStorageType(proto.getStorageType()),\n-        PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n-        proto.getHeader().getClientName(),\n-        targets,\n-        PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n-        PBHelper.convert(proto.getSource()),\n-        fromProto(proto.getStage()),\n-        proto.getPipelineSize(),\n-        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n-        proto.getLatestGenerationStamp(),\n-        fromProto(proto.getRequestedChecksum()),\n-        (proto.hasCachingStrategy() ?\n-            getCachingStrategy(proto.getCachingStrategy()) :\n-          CachingStrategy.newDefaultStrategy()));\n+    TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n+        proto.getClass().getSimpleName());\n+    try {\n+      writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n+          PBHelper.convertStorageType(proto.getStorageType()),\n+          PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n+          proto.getHeader().getClientName(),\n+          targets,\n+          PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n+          PBHelper.convert(proto.getSource()),\n+          fromProto(proto.getStage()),\n+          proto.getPipelineSize(),\n+          proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n+          proto.getLatestGenerationStamp(),\n+          fromProto(proto.getRequestedChecksum()),\n+          (proto.hasCachingStrategy() ?\n+              getCachingStrategy(proto.getCachingStrategy()) :\n+            CachingStrategy.newDefaultStrategy()));\n+     } finally {\n+      if (traceScope !\u003d null) traceScope.close();\n+     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n    TraceScope traceScope \u003d continueTraceSpan(proto.getHeader(),\n        proto.getClass().getSimpleName());\n    try {\n      writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n          PBHelper.convertStorageType(proto.getStorageType()),\n          PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n          proto.getHeader().getClientName(),\n          targets,\n          PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n          PBHelper.convert(proto.getSource()),\n          fromProto(proto.getStage()),\n          proto.getPipelineSize(),\n          proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n          proto.getLatestGenerationStamp(),\n          fromProto(proto.getRequestedChecksum()),\n          (proto.hasCachingStrategy() ?\n              getCachingStrategy(proto.getCachingStrategy()) :\n            CachingStrategy.newDefaultStrategy()));\n     } finally {\n      if (traceScope !\u003d null) traceScope.close();\n     }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "c2354a7f81ff5a48a5b65d25e1036d3e0ba86420": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6923. Propagate LazyPersist flag to DNs via DataTransferProtocol. (Arpit Agarwal)\n",
      "commitDate": "27/08/14 9:47 PM",
      "commitName": "c2354a7f81ff5a48a5b65d25e1036d3e0ba86420",
      "commitAuthor": "arp",
      "commitDateOld": "22/07/14 12:41 AM",
      "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 36.88,
      "commitsBetweenForRepo": 307,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n     final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n     writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n         PBHelper.convertStorageType(proto.getStorageType()),\n         PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n         proto.getHeader().getClientName(),\n         targets,\n         PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n         PBHelper.convert(proto.getSource()),\n         fromProto(proto.getStage()),\n         proto.getPipelineSize(),\n         proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n         proto.getLatestGenerationStamp(),\n         fromProto(proto.getRequestedChecksum()),\n         (proto.hasCachingStrategy() ?\n             getCachingStrategy(proto.getCachingStrategy()) :\n-          CachingStrategy.newDefaultStrategy()));\n+          CachingStrategy.newDefaultStrategy()),\n+        (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n    writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n        PBHelper.convertStorageType(proto.getStorageType()),\n        PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n        proto.getHeader().getClientName(),\n        targets,\n        PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n        PBHelper.convert(proto.getSource()),\n        fromProto(proto.getStage()),\n        proto.getPipelineSize(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getLatestGenerationStamp(),\n        fromProto(proto.getRequestedChecksum()),\n        (proto.hasCachingStrategy() ?\n            getCachingStrategy(proto.getCachingStrategy()) :\n          CachingStrategy.newDefaultStrategy()),\n        (proto.hasAllowLazyPersist() ? proto.getAllowLazyPersist() : false));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "25b0e8471ed744578b2d8e3f0debe5477b268e54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6702. Change DFSClient to pass the StorageType from the namenode to datanodes and change datanode to write block replicas using the specified storage type.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612493 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/14 12:41 AM",
      "commitName": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 10:09 PM",
      "commitNameOld": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 111.11,
      "commitsBetweenForRepo": 679,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n+    final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n     writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n+        PBHelper.convertStorageType(proto.getStorageType()),\n         PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n         proto.getHeader().getClientName(),\n-        PBHelper.convert(proto.getTargetsList()),\n+        targets,\n+        PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n         PBHelper.convert(proto.getSource()),\n         fromProto(proto.getStage()),\n         proto.getPipelineSize(),\n         proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n         proto.getLatestGenerationStamp(),\n         fromProto(proto.getRequestedChecksum()),\n         (proto.hasCachingStrategy() ?\n             getCachingStrategy(proto.getCachingStrategy()) :\n           CachingStrategy.newDefaultStrategy()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    final DatanodeInfo[] targets \u003d PBHelper.convert(proto.getTargetsList());\n    writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n        PBHelper.convertStorageType(proto.getStorageType()),\n        PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n        proto.getHeader().getClientName(),\n        targets,\n        PBHelper.convertStorageTypes(proto.getTargetStorageTypesList(), targets.length),\n        PBHelper.convert(proto.getSource()),\n        fromProto(proto.getStage()),\n        proto.getPipelineSize(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getLatestGenerationStamp(),\n        fromProto(proto.getRequestedChecksum()),\n        (proto.hasCachingStrategy() ?\n            getCachingStrategy(proto.getCachingStrategy()) :\n          CachingStrategy.newDefaultStrategy()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "c1314eb2a382bd9ce045a2fcc4a9e5c1fc368a24": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4817.  Make HDFS advisory caching configurable on a per-file basis.  (Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/13 11:15 AM",
      "commitName": "c1314eb2a382bd9ce045a2fcc4a9e5c1fc368a24",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "14/01/13 1:12 PM",
      "commitNameOld": "12bf674e8eeae15ff9ad86dccd91ef644ab52775",
      "commitAuthorOld": "",
      "daysBetweenCommits": 188.88,
      "commitsBetweenForRepo": 1117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,16 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n     writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n         PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n         proto.getHeader().getClientName(),\n         PBHelper.convert(proto.getTargetsList()),\n         PBHelper.convert(proto.getSource()),\n         fromProto(proto.getStage()),\n         proto.getPipelineSize(),\n         proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n         proto.getLatestGenerationStamp(),\n-        fromProto(proto.getRequestedChecksum()));\n+        fromProto(proto.getRequestedChecksum()),\n+        (proto.hasCachingStrategy() ?\n+            getCachingStrategy(proto.getCachingStrategy()) :\n+          CachingStrategy.newDefaultStrategy()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n        PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n        proto.getHeader().getClientName(),\n        PBHelper.convert(proto.getTargetsList()),\n        PBHelper.convert(proto.getSource()),\n        fromProto(proto.getStage()),\n        proto.getPipelineSize(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getLatestGenerationStamp(),\n        fromProto(proto.getRequestedChecksum()),\n        (proto.hasCachingStrategy() ?\n            getCachingStrategy(proto.getCachingStrategy()) :\n          CachingStrategy.newDefaultStrategy()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "3cd17b614e9436d06cd9b4ccc5f9cf59fbe1cf21": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4363. Combine PBHelper and HdfsProtoUtil and remove redundant methods. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1431088 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 1:20 PM",
      "commitName": "3cd17b614e9436d06cd9b4ccc5f9cf59fbe1cf21",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "07/08/12 9:40 AM",
      "commitNameOld": "9b4a7900c7dfc0590316eedaa97144f938885651",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 155.19,
      "commitsBetweenForRepo": 827,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n-    writeBlock(fromProto(proto.getHeader().getBaseHeader().getBlock()),\n-        fromProto(proto.getHeader().getBaseHeader().getToken()),\n+    writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n+        PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n         proto.getHeader().getClientName(),\n-        fromProtos(proto.getTargetsList()),\n-        fromProto(proto.getSource()),\n+        PBHelper.convert(proto.getTargetsList()),\n+        PBHelper.convert(proto.getSource()),\n         fromProto(proto.getStage()),\n         proto.getPipelineSize(),\n         proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n         proto.getLatestGenerationStamp(),\n         fromProto(proto.getRequestedChecksum()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    writeBlock(PBHelper.convert(proto.getHeader().getBaseHeader().getBlock()),\n        PBHelper.convert(proto.getHeader().getBaseHeader().getToken()),\n        proto.getHeader().getClientName(),\n        PBHelper.convert(proto.getTargetsList()),\n        PBHelper.convert(proto.getSource()),\n        fromProto(proto.getStage()),\n        proto.getPipelineSize(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getLatestGenerationStamp(),\n        fromProto(proto.getRequestedChecksum()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "1c940637b14eee777a65d153d0d712a1aea3866c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2521. Remove custom checksum headers from data transfer protocol. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 10:17 PM",
      "commitName": "1c940637b14eee777a65d153d0d712a1aea3866c",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 68.21,
      "commitsBetweenForRepo": 525,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,13 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n     writeBlock(fromProto(proto.getHeader().getBaseHeader().getBlock()),\n         fromProto(proto.getHeader().getBaseHeader().getToken()),\n         proto.getHeader().getClientName(),\n         fromProtos(proto.getTargetsList()),\n         fromProto(proto.getSource()),\n         fromProto(proto.getStage()),\n         proto.getPipelineSize(),\n         proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n-        proto.getLatestGenerationStamp());\n+        proto.getLatestGenerationStamp(),\n+        fromProto(proto.getRequestedChecksum()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    writeBlock(fromProto(proto.getHeader().getBaseHeader().getBlock()),\n        fromProto(proto.getHeader().getBaseHeader().getToken()),\n        proto.getHeader().getClientName(),\n        fromProtos(proto.getTargetsList()),\n        fromProto(proto.getSource()),\n        fromProto(proto.getStage()),\n        proto.getPipelineSize(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getLatestGenerationStamp(),\n        fromProto(proto.getRequestedChecksum()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    writeBlock(fromProto(proto.getHeader().getBaseHeader().getBlock()),\n        fromProto(proto.getHeader().getBaseHeader().getToken()),\n        proto.getHeader().getClientName(),\n        fromProtos(proto.getTargetsList()),\n        fromProto(proto.getSource()),\n        fromProto(proto.getStage()),\n        proto.getPipelineSize(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getLatestGenerationStamp());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    writeBlock(fromProto(proto.getHeader().getBaseHeader().getBlock()),\n        fromProto(proto.getHeader().getBaseHeader().getToken()),\n        proto.getHeader().getClientName(),\n        fromProtos(proto.getTargetsList()),\n        fromProto(proto.getSource()),\n        fromProto(proto.getStage()),\n        proto.getPipelineSize(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getLatestGenerationStamp());\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java"
      }
    },
    "2f48fae72aa52e6ec42264cad24fab36b6a426c2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2087. Declare methods in DataTransferProtocol interface, and change Sender and Receiver to implement the interface.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/06/11 4:57 PM",
      "commitName": "2f48fae72aa52e6ec42264cad24fab36b6a426c2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 11.08,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,12 @@\n   private void opWriteBlock(DataInputStream in) throws IOException {\n     final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n-    opWriteBlock(in,\n-        fromProto(proto.getHeader().getBaseHeader().getBlock()),\n-        proto.getPipelineSize(),\n-        fromProto(proto.getStage()),\n-        proto.getLatestGenerationStamp(),\n-        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n+    writeBlock(fromProto(proto.getHeader().getBaseHeader().getBlock()),\n+        fromProto(proto.getHeader().getBaseHeader().getToken()),\n         proto.getHeader().getClientName(),\n-        fromProto(proto.getSource()),\n         fromProtos(proto.getTargetsList()),\n-        fromProto(proto.getHeader().getBaseHeader().getToken()));\n+        fromProto(proto.getSource()),\n+        fromProto(proto.getStage()),\n+        proto.getPipelineSize(),\n+        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n+        proto.getLatestGenerationStamp());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    writeBlock(fromProto(proto.getHeader().getBaseHeader().getBlock()),\n        fromProto(proto.getHeader().getBaseHeader().getToken()),\n        proto.getHeader().getClientName(),\n        fromProtos(proto.getTargetsList()),\n        fromProto(proto.getSource()),\n        fromProto(proto.getStage()),\n        proto.getPipelineSize(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getLatestGenerationStamp());\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,13 @@\n+  private void opWriteBlock(DataInputStream in) throws IOException {\n+    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n+    opWriteBlock(in,\n+        fromProto(proto.getHeader().getBaseHeader().getBlock()),\n+        proto.getPipelineSize(),\n+        fromProto(proto.getStage()),\n+        proto.getLatestGenerationStamp(),\n+        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n+        proto.getHeader().getClientName(),\n+        fromProto(proto.getSource()),\n+        fromProtos(proto.getTargetsList()),\n+        fromProto(proto.getHeader().getBaseHeader().getToken()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void opWriteBlock(DataInputStream in) throws IOException {\n    final OpWriteBlockProto proto \u003d OpWriteBlockProto.parseFrom(vintPrefixed(in));\n    opWriteBlock(in,\n        fromProto(proto.getHeader().getBaseHeader().getBlock()),\n        proto.getPipelineSize(),\n        fromProto(proto.getStage()),\n        proto.getLatestGenerationStamp(),\n        proto.getMinBytesRcvd(), proto.getMaxBytesRcvd(),\n        proto.getHeader().getClientName(),\n        fromProto(proto.getSource()),\n        fromProtos(proto.getTargetsList()),\n        fromProto(proto.getHeader().getBaseHeader().getToken()));\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/datatransfer/Receiver.java"
    }
  }
}