{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShortCircuitCache.java",
  "functionName": "fetchOrCreate",
  "functionId": "fetchOrCreate___key-ExtendedBlockId__creator-ShortCircuitReplicaCreator",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
  "functionStartLine": 694,
  "functionEndLine": 724,
  "numCommitsSeen": 32,
  "timeTaken": 3841,
  "changeHistory": [
    "e66e287efe2b43e710137a628f03c7df3ebdf498",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "c992bcf9c136d3df686655a80e636bb7bb0664da",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "f0d64a078da7e932b9509734f75170e3e525e68c",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "e66e287efe2b43e710137a628f03c7df3ebdf498": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "c992bcf9c136d3df686655a80e636bb7bb0664da": "Yfilerename",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Yfilerename",
    "f0d64a078da7e932b9509734f75170e3e525e68c": "Yparameterchange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e66e287efe2b43e710137a628f03c7df3ebdf498": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13330. ShortCircuitCache#fetchOrCreate never retries. Contributed by Gabor Bota.\n",
      "commitDate": "13/04/18 9:17 AM",
      "commitName": "e66e287efe2b43e710137a628f03c7df3ebdf498",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "30/01/18 3:25 PM",
      "commitNameOld": "2e7331ca264dd366b975f3c8e610cf84eb8cc155",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 72.7,
      "commitsBetweenForRepo": 631,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator) {\n-    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n+    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable;\n     lock.lock();\n     try {\n       ShortCircuitReplicaInfo info \u003d null;\n-      do {\n+      for (int i \u003d 0; i \u003c FETCH_OR_CREATE_RETRY_TIMES; i++){\n         if (closed) {\n           LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n               this, key);\n           return null;\n         }\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n         if (waitable !\u003d null) {\n           try {\n             info \u003d fetch(key, waitable);\n+            break;\n           } catch (RetriableException e) {\n             LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n           }\n         }\n-      } while (false);\n+      }\n       if (info !\u003d null) return info;\n       // We need to load the replica ourselves.\n       newWaitable \u003d new Waitable\u003c\u003e(lock.newCondition());\n       replicaInfoMap.put(key, newWaitable);\n     } finally {\n       lock.unlock();\n     }\n     return create(key, creator, newWaitable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      for (int i \u003d 0; i \u003c FETCH_OR_CREATE_RETRY_TIMES; i++){\n        if (closed) {\n          LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n              this, key);\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n            break;\n          } catch (RetriableException e) {\n            LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n          }\n        }\n      }\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003c\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:52 PM",
      "commitNameOld": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator) {\n     Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n     lock.lock();\n     try {\n       ShortCircuitReplicaInfo info \u003d null;\n       do {\n         if (closed) {\n           LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n               this, key);\n           return null;\n         }\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n         if (waitable !\u003d null) {\n           try {\n             info \u003d fetch(key, waitable);\n           } catch (RetriableException e) {\n             LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n-            continue;\n           }\n         }\n       } while (false);\n       if (info !\u003d null) return info;\n       // We need to load the replica ourselves.\n-      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n+      newWaitable \u003d new Waitable\u003c\u003e(lock.newCondition());\n       replicaInfoMap.put(key, newWaitable);\n     } finally {\n       lock.unlock();\n     }\n     return create(key, creator, newWaitable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      do {\n        if (closed) {\n          LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n              this, key);\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n          } catch (RetriableException e) {\n            LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n          }\n        }\n      } while (false);\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003c\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,31 @@\n   public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator) {\n     Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n     lock.lock();\n     try {\n       ShortCircuitReplicaInfo info \u003d null;\n       do {\n         if (closed) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n-                \" because the cache is closed.\");\n-          }\n+          LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n+              this, key);\n           return null;\n         }\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n         if (waitable !\u003d null) {\n           try {\n             info \u003d fetch(key, waitable);\n           } catch (RetriableException e) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(this + \": retrying \" + e.getMessage());\n-            }\n+            LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n             continue;\n           }\n         }\n       } while (false);\n       if (info !\u003d null) return info;\n       // We need to load the replica ourselves.\n       newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n       replicaInfoMap.put(key, newWaitable);\n     } finally {\n       lock.unlock();\n     }\n     return create(key, creator, newWaitable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      do {\n        if (closed) {\n          LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n              this, key);\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n          } catch (RetriableException e) {\n            LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n            continue;\n          }\n        }\n      } while (false);\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n   public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator) {\n     Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n     lock.lock();\n     try {\n       ShortCircuitReplicaInfo info \u003d null;\n       do {\n         if (closed) {\n-          LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n-              this, key);\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n+                \" because the cache is closed.\");\n+          }\n           return null;\n         }\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n         if (waitable !\u003d null) {\n           try {\n             info \u003d fetch(key, waitable);\n           } catch (RetriableException e) {\n-            LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(this + \": retrying \" + e.getMessage());\n+            }\n             continue;\n           }\n         }\n       } while (false);\n       if (info !\u003d null) return info;\n       // We need to load the replica ourselves.\n       newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n       replicaInfoMap.put(key, newWaitable);\n     } finally {\n       lock.unlock();\n     }\n     return create(key, creator, newWaitable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      do {\n        if (closed) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n                \" because the cache is closed.\");\n          }\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n          } catch (RetriableException e) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(this + \": retrying \" + e.getMessage());\n            }\n            continue;\n          }\n        }\n      } while (false);\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/08/15 2:02 PM",
      "commitNameOld": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 34.16,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,31 @@\n   public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator) {\n     Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n     lock.lock();\n     try {\n       ShortCircuitReplicaInfo info \u003d null;\n       do {\n         if (closed) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n-                \" because the cache is closed.\");\n-          }\n+          LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n+              this, key);\n           return null;\n         }\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n         if (waitable !\u003d null) {\n           try {\n             info \u003d fetch(key, waitable);\n           } catch (RetriableException e) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(this + \": retrying \" + e.getMessage());\n-            }\n+            LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n             continue;\n           }\n         }\n       } while (false);\n       if (info !\u003d null) return info;\n       // We need to load the replica ourselves.\n       newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n       replicaInfoMap.put(key, newWaitable);\n     } finally {\n       lock.unlock();\n     }\n     return create(key, creator, newWaitable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      do {\n        if (closed) {\n          LOG.trace(\"{}: can\u0027t fethchOrCreate {} because the cache is closed.\",\n              this, key);\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n          } catch (RetriableException e) {\n            LOG.debug(\"{}: retrying {}\", this, e.getMessage());\n            continue;\n          }\n        }\n      } while (false);\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "c992bcf9c136d3df686655a80e636bb7bb0664da": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/08/15 2:02 PM",
      "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/08/15 2:29 PM",
      "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      do {\n        if (closed) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n                \" because the cache is closed.\");\n          }\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n          } catch (RetriableException e) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(this + \": retrying \" + e.getMessage());\n            }\n            continue;\n          }\n        }\n      } while (false);\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 6:00 PM",
      "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      do {\n        if (closed) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n                \" because the cache is closed.\");\n          }\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n          } catch (RetriableException e) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(this + \": retrying \" + e.getMessage());\n            }\n            continue;\n          }\n        }\n      } while (false);\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "f0d64a078da7e932b9509734f75170e3e525e68c": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5940.  Minor cleanups to ShortCircuitReplica, FsDatasetCache, and DomainSocketWatcher (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567835 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 7:10 PM",
      "commitName": "f0d64a078da7e932b9509734f75170e3e525e68c",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/02/14 11:08 AM",
      "commitNameOld": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n-  public ShortCircuitReplicaInfo fetchOrCreate(Key key,\n+  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator) {\n     Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n     lock.lock();\n     try {\n       ShortCircuitReplicaInfo info \u003d null;\n       do {\n         if (closed) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n                 \" because the cache is closed.\");\n           }\n           return null;\n         }\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n         if (waitable !\u003d null) {\n           try {\n             info \u003d fetch(key, waitable);\n           } catch (RetriableException e) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(this + \": retrying \" + e.getMessage());\n             }\n             continue;\n           }\n         }\n       } while (false);\n       if (info !\u003d null) return info;\n       // We need to load the replica ourselves.\n       newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n       replicaInfoMap.put(key, newWaitable);\n     } finally {\n       lock.unlock();\n     }\n     return create(key, creator, newWaitable);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      do {\n        if (closed) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n                \" because the cache is closed.\");\n          }\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n          } catch (RetriableException e) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(this + \": retrying \" + e.getMessage());\n            }\n            continue;\n          }\n        }\n      } while (false);\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
      "extendedDetails": {
        "oldValue": "[key-Key, creator-ShortCircuitReplicaCreator]",
        "newValue": "[key-ExtendedBlockId, creator-ShortCircuitReplicaCreator]"
      }
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,35 @@\n+  public ShortCircuitReplicaInfo fetchOrCreate(Key key,\n+      ShortCircuitReplicaCreator creator) {\n+    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n+    lock.lock();\n+    try {\n+      ShortCircuitReplicaInfo info \u003d null;\n+      do {\n+        if (closed) {\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n+                \" because the cache is closed.\");\n+          }\n+          return null;\n+        }\n+        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n+        if (waitable !\u003d null) {\n+          try {\n+            info \u003d fetch(key, waitable);\n+          } catch (RetriableException e) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(this + \": retrying \" + e.getMessage());\n+            }\n+            continue;\n+          }\n+        }\n+      } while (false);\n+      if (info !\u003d null) return info;\n+      // We need to load the replica ourselves.\n+      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n+      replicaInfoMap.put(key, newWaitable);\n+    } finally {\n+      lock.unlock();\n+    }\n+    return create(key, creator, newWaitable);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo fetchOrCreate(Key key,\n      ShortCircuitReplicaCreator creator) {\n    Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable \u003d null;\n    lock.lock();\n    try {\n      ShortCircuitReplicaInfo info \u003d null;\n      do {\n        if (closed) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": can\u0027t fetchOrCreate \" + key +\n                \" because the cache is closed.\");\n          }\n          return null;\n        }\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d replicaInfoMap.get(key);\n        if (waitable !\u003d null) {\n          try {\n            info \u003d fetch(key, waitable);\n          } catch (RetriableException e) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(this + \": retrying \" + e.getMessage());\n            }\n            continue;\n          }\n        }\n      } while (false);\n      if (info !\u003d null) return info;\n      // We need to load the replica ourselves.\n      newWaitable \u003d new Waitable\u003cShortCircuitReplicaInfo\u003e(lock.newCondition());\n      replicaInfoMap.put(key, newWaitable);\n    } finally {\n      lock.unlock();\n    }\n    return create(key, creator, newWaitable);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java"
    }
  }
}