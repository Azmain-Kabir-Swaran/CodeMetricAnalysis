{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclUtil.java",
  "functionName": "getAclFromPermAndEntries",
  "functionId": "getAclFromPermAndEntries___perm-FsPermission__entries-List__AclEntry__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclUtil.java",
  "functionStartLine": 42,
  "functionEndLine": 90,
  "numCommitsSeen": 2,
  "timeTaken": 1058,
  "changeHistory": [
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05"
  ],
  "changeHistoryShort": {
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Yintroduced"
  },
  "changeHistoryDetails": {
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,49 @@\n+  public static List\u003cAclEntry\u003e getAclFromPermAndEntries(FsPermission perm,\n+      List\u003cAclEntry\u003e entries) {\n+    List\u003cAclEntry\u003e acl \u003d Lists.newArrayListWithCapacity(entries.size() + 3);\n+\n+    // Owner entry implied by owner permission bits.\n+    acl.add(new AclEntry.Builder()\n+      .setScope(AclEntryScope.ACCESS)\n+      .setType(AclEntryType.USER)\n+      .setPermission(perm.getUserAction())\n+      .build());\n+\n+    // All extended access ACL entries.\n+    boolean hasAccessAcl \u003d false;\n+    Iterator\u003cAclEntry\u003e entryIter \u003d entries.iterator();\n+    AclEntry curEntry \u003d null;\n+    while (entryIter.hasNext()) {\n+      curEntry \u003d entryIter.next();\n+      if (curEntry.getScope() \u003d\u003d AclEntryScope.DEFAULT) {\n+        break;\n+      }\n+      hasAccessAcl \u003d true;\n+      acl.add(curEntry);\n+    }\n+\n+    // Mask entry implied by group permission bits, or group entry if there is\n+    // no access ACL (only default ACL).\n+    acl.add(new AclEntry.Builder()\n+      .setScope(AclEntryScope.ACCESS)\n+      .setType(hasAccessAcl ? AclEntryType.MASK : AclEntryType.GROUP)\n+      .setPermission(perm.getGroupAction())\n+      .build());\n+\n+    // Other entry implied by other bits.\n+    acl.add(new AclEntry.Builder()\n+      .setScope(AclEntryScope.ACCESS)\n+      .setType(AclEntryType.OTHER)\n+      .setPermission(perm.getOtherAction())\n+      .build());\n+\n+    // Default ACL entries.\n+    if (curEntry !\u003d null \u0026\u0026 curEntry.getScope() \u003d\u003d AclEntryScope.DEFAULT) {\n+      acl.add(curEntry);\n+      while (entryIter.hasNext()) {\n+        acl.add(entryIter.next());\n+      }\n+    }\n+\n+    return acl;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cAclEntry\u003e getAclFromPermAndEntries(FsPermission perm,\n      List\u003cAclEntry\u003e entries) {\n    List\u003cAclEntry\u003e acl \u003d Lists.newArrayListWithCapacity(entries.size() + 3);\n\n    // Owner entry implied by owner permission bits.\n    acl.add(new AclEntry.Builder()\n      .setScope(AclEntryScope.ACCESS)\n      .setType(AclEntryType.USER)\n      .setPermission(perm.getUserAction())\n      .build());\n\n    // All extended access ACL entries.\n    boolean hasAccessAcl \u003d false;\n    Iterator\u003cAclEntry\u003e entryIter \u003d entries.iterator();\n    AclEntry curEntry \u003d null;\n    while (entryIter.hasNext()) {\n      curEntry \u003d entryIter.next();\n      if (curEntry.getScope() \u003d\u003d AclEntryScope.DEFAULT) {\n        break;\n      }\n      hasAccessAcl \u003d true;\n      acl.add(curEntry);\n    }\n\n    // Mask entry implied by group permission bits, or group entry if there is\n    // no access ACL (only default ACL).\n    acl.add(new AclEntry.Builder()\n      .setScope(AclEntryScope.ACCESS)\n      .setType(hasAccessAcl ? AclEntryType.MASK : AclEntryType.GROUP)\n      .setPermission(perm.getGroupAction())\n      .build());\n\n    // Other entry implied by other bits.\n    acl.add(new AclEntry.Builder()\n      .setScope(AclEntryScope.ACCESS)\n      .setType(AclEntryType.OTHER)\n      .setPermission(perm.getOtherAction())\n      .build());\n\n    // Default ACL entries.\n    if (curEntry !\u003d null \u0026\u0026 curEntry.getScope() \u003d\u003d AclEntryScope.DEFAULT) {\n      acl.add(curEntry);\n      while (entryIter.hasNext()) {\n        acl.add(entryIter.next());\n      }\n    }\n\n    return acl;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclUtil.java"
    }
  }
}