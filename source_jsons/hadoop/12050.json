{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetImpl.java",
  "functionName": "saveNextReplica",
  "functionId": "saveNextReplica",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
  "functionStartLine": 3211,
  "functionEndLine": 3262,
  "numCommitsSeen": 197,
  "timeTaken": 7374,
  "changeHistory": [
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
    "a3954ccab148bddc290cb96528e63ff19799bcc9",
    "86c9862bec0248d671e657aa56094a2919b8ac14",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
    "b7f4a3156c0f5c600816c469637237ba6c9b330c",
    "1efd9c98258fbb973d2058dcf0850042e53bd02f",
    "5e8b6973527e5f714652641ed95e8a4509e18cfa",
    "b2d5ed36bcb80e2581191dcdc3976e825c959142"
  ],
  "changeHistoryShort": {
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": "Ybodychange",
    "a3954ccab148bddc290cb96528e63ff19799bcc9": "Ybodychange",
    "86c9862bec0248d671e657aa56094a2919b8ac14": "Ybodychange",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": "Ybodychange",
    "b7f4a3156c0f5c600816c469637237ba6c9b330c": "Ybodychange",
    "1efd9c98258fbb973d2058dcf0850042e53bd02f": "Ybodychange",
    "5e8b6973527e5f714652641ed95e8a4509e18cfa": "Ybodychange",
    "b2d5ed36bcb80e2581191dcdc3976e825c959142": "Ybodychange"
  },
  "changeHistoryDetails": {
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15150. Introduce read write lock to Datanode. Contributed Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "11/02/20 8:00 AM",
      "commitName": "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "28/01/20 10:10 AM",
      "commitNameOld": "1839c467f60cbb8592d446694ec3d7710cda5142",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 13.91,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private boolean saveNextReplica() {\n       RamDiskReplica block \u003d null;\n       FsVolumeReference targetReference;\n       FsVolumeImpl targetVolume;\n       ReplicaInfo replicaInfo;\n       boolean succeeded \u003d false;\n \n       try {\n         block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n         if (block !\u003d null) {\n-          try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+          try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n             replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n \n             // If replicaInfo is null, the block was either deleted before\n             // it could be checkpointed or it is already on persistent storage.\n             // This can occur if a second replica on persistent storage was found\n             // after the lazy write was scheduled.\n             if (replicaInfo !\u003d null \u0026\u0026\n                 replicaInfo.getVolume().isTransientStorage()) {\n               // Pick a target volume to persist the block.\n               targetReference \u003d volumes.getNextVolume(\n                   StorageType.DEFAULT, null, replicaInfo.getNumBytes());\n               targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n \n               ramDiskReplicaTracker.recordStartLazyPersist(\n                   block.getBlockPoolId(), block.getBlockId(), targetVolume);\n \n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                     + \" block pool Id: \" + block.getBlockPoolId()\n                     + \" block id: \" + block.getBlockId()\n                     + \" on target volume \" + targetVolume);\n               }\n \n               asyncLazyPersistService.submitLazyPersistTask(\n                   block.getBlockPoolId(), block.getBlockId(),\n                   replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                   replicaInfo, targetReference);\n             }\n           }\n         }\n         succeeded \u003d true;\n       } catch(IOException ioe) {\n         LOG.warn(\"Exception saving replica \" + block, ioe);\n       } finally {\n         if (!succeeded \u0026\u0026 block !\u003d null) {\n           LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n           onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n         }\n       }\n       return succeeded;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean saveNextReplica() {\n      RamDiskReplica block \u003d null;\n      FsVolumeReference targetReference;\n      FsVolumeImpl targetVolume;\n      ReplicaInfo replicaInfo;\n      boolean succeeded \u003d false;\n\n      try {\n        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n        if (block !\u003d null) {\n          try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n            replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n\n            // If replicaInfo is null, the block was either deleted before\n            // it could be checkpointed or it is already on persistent storage.\n            // This can occur if a second replica on persistent storage was found\n            // after the lazy write was scheduled.\n            if (replicaInfo !\u003d null \u0026\u0026\n                replicaInfo.getVolume().isTransientStorage()) {\n              // Pick a target volume to persist the block.\n              targetReference \u003d volumes.getNextVolume(\n                  StorageType.DEFAULT, null, replicaInfo.getNumBytes());\n              targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n\n              ramDiskReplicaTracker.recordStartLazyPersist(\n                  block.getBlockPoolId(), block.getBlockId(), targetVolume);\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                    + \" block pool Id: \" + block.getBlockPoolId()\n                    + \" block id: \" + block.getBlockId()\n                    + \" on target volume \" + targetVolume);\n              }\n\n              asyncLazyPersistService.submitLazyPersistTask(\n                  block.getBlockPoolId(), block.getBlockId(),\n                  replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                  replicaInfo, targetReference);\n            }\n          }\n        }\n        succeeded \u003d true;\n      } catch(IOException ioe) {\n        LOG.warn(\"Exception saving replica \" + block, ioe);\n      } finally {\n        if (!succeeded \u0026\u0026 block !\u003d null) {\n          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n          onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n        }\n      }\n      return succeeded;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "a3954ccab148bddc290cb96528e63ff19799bcc9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9807. Add an optional StorageID to writes. Contributed by Ewan Higgs\n",
      "commitDate": "05/05/17 12:01 PM",
      "commitName": "a3954ccab148bddc290cb96528e63ff19799bcc9",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "10/03/17 2:37 PM",
      "commitNameOld": "6d356b6b4d8ccb32397cacfb5d0357b21f6035fc",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 55.85,
      "commitsBetweenForRepo": 315,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private boolean saveNextReplica() {\n       RamDiskReplica block \u003d null;\n       FsVolumeReference targetReference;\n       FsVolumeImpl targetVolume;\n       ReplicaInfo replicaInfo;\n       boolean succeeded \u003d false;\n \n       try {\n         block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n         if (block !\u003d null) {\n           try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n             replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n \n             // If replicaInfo is null, the block was either deleted before\n             // it could be checkpointed or it is already on persistent storage.\n             // This can occur if a second replica on persistent storage was found\n             // after the lazy write was scheduled.\n             if (replicaInfo !\u003d null \u0026\u0026\n                 replicaInfo.getVolume().isTransientStorage()) {\n               // Pick a target volume to persist the block.\n               targetReference \u003d volumes.getNextVolume(\n-                  StorageType.DEFAULT, replicaInfo.getNumBytes());\n+                  StorageType.DEFAULT, null, replicaInfo.getNumBytes());\n               targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n \n               ramDiskReplicaTracker.recordStartLazyPersist(\n                   block.getBlockPoolId(), block.getBlockId(), targetVolume);\n \n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                     + \" block pool Id: \" + block.getBlockPoolId()\n                     + \" block id: \" + block.getBlockId()\n                     + \" on target volume \" + targetVolume);\n               }\n \n               asyncLazyPersistService.submitLazyPersistTask(\n                   block.getBlockPoolId(), block.getBlockId(),\n                   replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                   replicaInfo, targetReference);\n             }\n           }\n         }\n         succeeded \u003d true;\n       } catch(IOException ioe) {\n         LOG.warn(\"Exception saving replica \" + block, ioe);\n       } finally {\n         if (!succeeded \u0026\u0026 block !\u003d null) {\n           LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n           onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n         }\n       }\n       return succeeded;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean saveNextReplica() {\n      RamDiskReplica block \u003d null;\n      FsVolumeReference targetReference;\n      FsVolumeImpl targetVolume;\n      ReplicaInfo replicaInfo;\n      boolean succeeded \u003d false;\n\n      try {\n        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n        if (block !\u003d null) {\n          try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n            replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n\n            // If replicaInfo is null, the block was either deleted before\n            // it could be checkpointed or it is already on persistent storage.\n            // This can occur if a second replica on persistent storage was found\n            // after the lazy write was scheduled.\n            if (replicaInfo !\u003d null \u0026\u0026\n                replicaInfo.getVolume().isTransientStorage()) {\n              // Pick a target volume to persist the block.\n              targetReference \u003d volumes.getNextVolume(\n                  StorageType.DEFAULT, null, replicaInfo.getNumBytes());\n              targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n\n              ramDiskReplicaTracker.recordStartLazyPersist(\n                  block.getBlockPoolId(), block.getBlockId(), targetVolume);\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                    + \" block pool Id: \" + block.getBlockPoolId()\n                    + \" block id: \" + block.getBlockId()\n                    + \" on target volume \" + targetVolume);\n              }\n\n              asyncLazyPersistService.submitLazyPersistTask(\n                  block.getBlockPoolId(), block.getBlockId(),\n                  replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                  replicaInfo, targetReference);\n            }\n          }\n        }\n        succeeded \u003d true;\n      } catch(IOException ioe) {\n        LOG.warn(\"Exception saving replica \" + block, ioe);\n      } finally {\n        if (!succeeded \u0026\u0026 block !\u003d null) {\n          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n          onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n        }\n      }\n      return succeeded;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "86c9862bec0248d671e657aa56094a2919b8ac14": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "13/09/16 12:54 PM",
      "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "10/09/16 6:22 PM",
      "commitNameOld": "a99bf26a0899bcc4307c3a242c8414eaef555aa7",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,52 @@\n     private boolean saveNextReplica() {\n       RamDiskReplica block \u003d null;\n       FsVolumeReference targetReference;\n       FsVolumeImpl targetVolume;\n       ReplicaInfo replicaInfo;\n       boolean succeeded \u003d false;\n \n       try {\n         block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n         if (block !\u003d null) {\n           try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n             replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n \n             // If replicaInfo is null, the block was either deleted before\n             // it could be checkpointed or it is already on persistent storage.\n             // This can occur if a second replica on persistent storage was found\n             // after the lazy write was scheduled.\n             if (replicaInfo !\u003d null \u0026\u0026\n                 replicaInfo.getVolume().isTransientStorage()) {\n               // Pick a target volume to persist the block.\n               targetReference \u003d volumes.getNextVolume(\n                   StorageType.DEFAULT, replicaInfo.getNumBytes());\n               targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n \n               ramDiskReplicaTracker.recordStartLazyPersist(\n                   block.getBlockPoolId(), block.getBlockId(), targetVolume);\n \n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                     + \" block pool Id: \" + block.getBlockPoolId()\n                     + \" block id: \" + block.getBlockId()\n                     + \" on target volume \" + targetVolume);\n               }\n \n               asyncLazyPersistService.submitLazyPersistTask(\n                   block.getBlockPoolId(), block.getBlockId(),\n                   replicaInfo.getGenerationStamp(), block.getCreationTime(),\n-                  replicaInfo.getMetaFile(), replicaInfo.getBlockFile(),\n-                  targetReference);\n+                  replicaInfo, targetReference);\n             }\n           }\n         }\n         succeeded \u003d true;\n       } catch(IOException ioe) {\n         LOG.warn(\"Exception saving replica \" + block, ioe);\n       } finally {\n         if (!succeeded \u0026\u0026 block !\u003d null) {\n           LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n           onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n         }\n       }\n       return succeeded;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean saveNextReplica() {\n      RamDiskReplica block \u003d null;\n      FsVolumeReference targetReference;\n      FsVolumeImpl targetVolume;\n      ReplicaInfo replicaInfo;\n      boolean succeeded \u003d false;\n\n      try {\n        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n        if (block !\u003d null) {\n          try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n            replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n\n            // If replicaInfo is null, the block was either deleted before\n            // it could be checkpointed or it is already on persistent storage.\n            // This can occur if a second replica on persistent storage was found\n            // after the lazy write was scheduled.\n            if (replicaInfo !\u003d null \u0026\u0026\n                replicaInfo.getVolume().isTransientStorage()) {\n              // Pick a target volume to persist the block.\n              targetReference \u003d volumes.getNextVolume(\n                  StorageType.DEFAULT, replicaInfo.getNumBytes());\n              targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n\n              ramDiskReplicaTracker.recordStartLazyPersist(\n                  block.getBlockPoolId(), block.getBlockId(), targetVolume);\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                    + \" block pool Id: \" + block.getBlockPoolId()\n                    + \" block id: \" + block.getBlockId()\n                    + \" on target volume \" + targetVolume);\n              }\n\n              asyncLazyPersistService.submitLazyPersistTask(\n                  block.getBlockPoolId(), block.getBlockId(),\n                  replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                  replicaInfo, targetReference);\n            }\n          }\n        }\n        succeeded \u003d true;\n      } catch(IOException ioe) {\n        LOG.warn(\"Exception saving replica \" + block, ioe);\n      } finally {\n        if (!succeeded \u0026\u0026 block !\u003d null) {\n          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n          onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n        }\n      }\n      return succeeded;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
      "commitDate": "08/08/16 12:02 PM",
      "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "08/07/16 7:40 PM",
      "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 30.68,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n     private boolean saveNextReplica() {\n       RamDiskReplica block \u003d null;\n       FsVolumeReference targetReference;\n       FsVolumeImpl targetVolume;\n       ReplicaInfo replicaInfo;\n       boolean succeeded \u003d false;\n \n       try {\n         block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n         if (block !\u003d null) {\n-          synchronized (FsDatasetImpl.this) {\n+          try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n             replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n \n             // If replicaInfo is null, the block was either deleted before\n             // it could be checkpointed or it is already on persistent storage.\n             // This can occur if a second replica on persistent storage was found\n             // after the lazy write was scheduled.\n             if (replicaInfo !\u003d null \u0026\u0026\n                 replicaInfo.getVolume().isTransientStorage()) {\n               // Pick a target volume to persist the block.\n               targetReference \u003d volumes.getNextVolume(\n                   StorageType.DEFAULT, replicaInfo.getNumBytes());\n               targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n \n               ramDiskReplicaTracker.recordStartLazyPersist(\n                   block.getBlockPoolId(), block.getBlockId(), targetVolume);\n \n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                     + \" block pool Id: \" + block.getBlockPoolId()\n                     + \" block id: \" + block.getBlockId()\n                     + \" on target volume \" + targetVolume);\n               }\n \n               asyncLazyPersistService.submitLazyPersistTask(\n                   block.getBlockPoolId(), block.getBlockId(),\n                   replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                   replicaInfo.getMetaFile(), replicaInfo.getBlockFile(),\n                   targetReference);\n             }\n           }\n         }\n         succeeded \u003d true;\n       } catch(IOException ioe) {\n         LOG.warn(\"Exception saving replica \" + block, ioe);\n       } finally {\n         if (!succeeded \u0026\u0026 block !\u003d null) {\n           LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n           onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n         }\n       }\n       return succeeded;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean saveNextReplica() {\n      RamDiskReplica block \u003d null;\n      FsVolumeReference targetReference;\n      FsVolumeImpl targetVolume;\n      ReplicaInfo replicaInfo;\n      boolean succeeded \u003d false;\n\n      try {\n        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n        if (block !\u003d null) {\n          try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n            replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n\n            // If replicaInfo is null, the block was either deleted before\n            // it could be checkpointed or it is already on persistent storage.\n            // This can occur if a second replica on persistent storage was found\n            // after the lazy write was scheduled.\n            if (replicaInfo !\u003d null \u0026\u0026\n                replicaInfo.getVolume().isTransientStorage()) {\n              // Pick a target volume to persist the block.\n              targetReference \u003d volumes.getNextVolume(\n                  StorageType.DEFAULT, replicaInfo.getNumBytes());\n              targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n\n              ramDiskReplicaTracker.recordStartLazyPersist(\n                  block.getBlockPoolId(), block.getBlockId(), targetVolume);\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                    + \" block pool Id: \" + block.getBlockPoolId()\n                    + \" block id: \" + block.getBlockId()\n                    + \" on target volume \" + targetVolume);\n              }\n\n              asyncLazyPersistService.submitLazyPersistTask(\n                  block.getBlockPoolId(), block.getBlockId(),\n                  replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                  replicaInfo.getMetaFile(), replicaInfo.getBlockFile(),\n                  targetReference);\n            }\n          }\n        }\n        succeeded \u003d true;\n      } catch(IOException ioe) {\n        LOG.warn(\"Exception saving replica \" + block, ioe);\n      } finally {\n        if (!succeeded \u0026\u0026 block !\u003d null) {\n          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n          onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n        }\n      }\n      return succeeded;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "b7f4a3156c0f5c600816c469637237ba6c9b330c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7496. Fix FsVolume removal race conditions on the DataNode by reference-counting the volume instances (lei via cmccabe)\n",
      "commitDate": "20/01/15 7:05 PM",
      "commitName": "b7f4a3156c0f5c600816c469637237ba6c9b330c",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "13/01/15 12:24 AM",
      "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n     private boolean saveNextReplica() {\n       RamDiskReplica block \u003d null;\n+      FsVolumeReference targetReference;\n       FsVolumeImpl targetVolume;\n       ReplicaInfo replicaInfo;\n       boolean succeeded \u003d false;\n \n       try {\n         block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n         if (block !\u003d null) {\n           synchronized (FsDatasetImpl.this) {\n             replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n \n             // If replicaInfo is null, the block was either deleted before\n             // it could be checkpointed or it is already on persistent storage.\n             // This can occur if a second replica on persistent storage was found\n             // after the lazy write was scheduled.\n             if (replicaInfo !\u003d null \u0026\u0026\n                 replicaInfo.getVolume().isTransientStorage()) {\n               // Pick a target volume to persist the block.\n-              targetVolume \u003d volumes.getNextVolume(\n+              targetReference \u003d volumes.getNextVolume(\n                   StorageType.DEFAULT, replicaInfo.getNumBytes());\n+              targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n \n               ramDiskReplicaTracker.recordStartLazyPersist(\n                   block.getBlockPoolId(), block.getBlockId(), targetVolume);\n \n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                     + \" block pool Id: \" + block.getBlockPoolId()\n                     + \" block id: \" + block.getBlockId()\n                     + \" on target volume \" + targetVolume);\n               }\n \n               asyncLazyPersistService.submitLazyPersistTask(\n                   block.getBlockPoolId(), block.getBlockId(),\n                   replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                   replicaInfo.getMetaFile(), replicaInfo.getBlockFile(),\n-                  targetVolume);\n+                  targetReference);\n             }\n           }\n         }\n         succeeded \u003d true;\n       } catch(IOException ioe) {\n         LOG.warn(\"Exception saving replica \" + block, ioe);\n       } finally {\n         if (!succeeded \u0026\u0026 block !\u003d null) {\n           LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n           onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n         }\n       }\n       return succeeded;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean saveNextReplica() {\n      RamDiskReplica block \u003d null;\n      FsVolumeReference targetReference;\n      FsVolumeImpl targetVolume;\n      ReplicaInfo replicaInfo;\n      boolean succeeded \u003d false;\n\n      try {\n        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n        if (block !\u003d null) {\n          synchronized (FsDatasetImpl.this) {\n            replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n\n            // If replicaInfo is null, the block was either deleted before\n            // it could be checkpointed or it is already on persistent storage.\n            // This can occur if a second replica on persistent storage was found\n            // after the lazy write was scheduled.\n            if (replicaInfo !\u003d null \u0026\u0026\n                replicaInfo.getVolume().isTransientStorage()) {\n              // Pick a target volume to persist the block.\n              targetReference \u003d volumes.getNextVolume(\n                  StorageType.DEFAULT, replicaInfo.getNumBytes());\n              targetVolume \u003d (FsVolumeImpl) targetReference.getVolume();\n\n              ramDiskReplicaTracker.recordStartLazyPersist(\n                  block.getBlockPoolId(), block.getBlockId(), targetVolume);\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                    + \" block pool Id: \" + block.getBlockPoolId()\n                    + \" block id: \" + block.getBlockId()\n                    + \" on target volume \" + targetVolume);\n              }\n\n              asyncLazyPersistService.submitLazyPersistTask(\n                  block.getBlockPoolId(), block.getBlockId(),\n                  replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                  replicaInfo.getMetaFile(), replicaInfo.getBlockFile(),\n                  targetReference);\n            }\n          }\n        }\n        succeeded \u003d true;\n      } catch(IOException ioe) {\n        LOG.warn(\"Exception saving replica \" + block, ioe);\n      } finally {\n        if (!succeeded \u0026\u0026 block !\u003d null) {\n          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n          onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n        }\n      }\n      return succeeded;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "1efd9c98258fbb973d2058dcf0850042e53bd02f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7112. LazyWriter should use either async IO or one thread per physical disk. Contributed by Xiaoyu Yao.\n",
      "commitDate": "07/10/14 8:25 PM",
      "commitName": "1efd9c98258fbb973d2058dcf0850042e53bd02f",
      "commitAuthor": "cnauroth",
      "commitDateOld": "30/09/14 12:53 AM",
      "commitNameOld": "5e8b6973527e5f714652641ed95e8a4509e18cfa",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 7.81,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,51 @@\n     private boolean saveNextReplica() {\n       RamDiskReplica block \u003d null;\n+      FsVolumeImpl targetVolume;\n+      ReplicaInfo replicaInfo;\n       boolean succeeded \u003d false;\n \n       try {\n         block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n         if (block !\u003d null) {\n-          moveReplicaToNewVolume(block.getBlockPoolId(), block.getBlockId(),\n-            block.getCreationTime());\n+          synchronized (FsDatasetImpl.this) {\n+            replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n+\n+            // If replicaInfo is null, the block was either deleted before\n+            // it could be checkpointed or it is already on persistent storage.\n+            // This can occur if a second replica on persistent storage was found\n+            // after the lazy write was scheduled.\n+            if (replicaInfo !\u003d null \u0026\u0026\n+                replicaInfo.getVolume().isTransientStorage()) {\n+              // Pick a target volume to persist the block.\n+              targetVolume \u003d volumes.getNextVolume(\n+                  StorageType.DEFAULT, replicaInfo.getNumBytes());\n+\n+              ramDiskReplicaTracker.recordStartLazyPersist(\n+                  block.getBlockPoolId(), block.getBlockId(), targetVolume);\n+\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n+                    + \" block pool Id: \" + block.getBlockPoolId()\n+                    + \" block id: \" + block.getBlockId()\n+                    + \" on target volume \" + targetVolume);\n+              }\n+\n+              asyncLazyPersistService.submitLazyPersistTask(\n+                  block.getBlockPoolId(), block.getBlockId(),\n+                  replicaInfo.getGenerationStamp(), block.getCreationTime(),\n+                  replicaInfo.getMetaFile(), replicaInfo.getBlockFile(),\n+                  targetVolume);\n+            }\n+          }\n         }\n         succeeded \u003d true;\n       } catch(IOException ioe) {\n         LOG.warn(\"Exception saving replica \" + block, ioe);\n       } finally {\n         if (!succeeded \u0026\u0026 block !\u003d null) {\n           LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n-          ramDiskReplicaTracker.reenqueueReplicaNotPersisted(block);\n+          onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n         }\n       }\n-\n       return succeeded;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean saveNextReplica() {\n      RamDiskReplica block \u003d null;\n      FsVolumeImpl targetVolume;\n      ReplicaInfo replicaInfo;\n      boolean succeeded \u003d false;\n\n      try {\n        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n        if (block !\u003d null) {\n          synchronized (FsDatasetImpl.this) {\n            replicaInfo \u003d volumeMap.get(block.getBlockPoolId(), block.getBlockId());\n\n            // If replicaInfo is null, the block was either deleted before\n            // it could be checkpointed or it is already on persistent storage.\n            // This can occur if a second replica on persistent storage was found\n            // after the lazy write was scheduled.\n            if (replicaInfo !\u003d null \u0026\u0026\n                replicaInfo.getVolume().isTransientStorage()) {\n              // Pick a target volume to persist the block.\n              targetVolume \u003d volumes.getNextVolume(\n                  StorageType.DEFAULT, replicaInfo.getNumBytes());\n\n              ramDiskReplicaTracker.recordStartLazyPersist(\n                  block.getBlockPoolId(), block.getBlockId(), targetVolume);\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"LazyWriter: Start persisting RamDisk block:\"\n                    + \" block pool Id: \" + block.getBlockPoolId()\n                    + \" block id: \" + block.getBlockId()\n                    + \" on target volume \" + targetVolume);\n              }\n\n              asyncLazyPersistService.submitLazyPersistTask(\n                  block.getBlockPoolId(), block.getBlockId(),\n                  replicaInfo.getGenerationStamp(), block.getCreationTime(),\n                  replicaInfo.getMetaFile(), replicaInfo.getBlockFile(),\n                  targetVolume);\n            }\n          }\n        }\n        succeeded \u003d true;\n      } catch(IOException ioe) {\n        LOG.warn(\"Exception saving replica \" + block, ioe);\n      } finally {\n        if (!succeeded \u0026\u0026 block !\u003d null) {\n          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n          onFailLazyPersist(block.getBlockPoolId(), block.getBlockId());\n        }\n      }\n      return succeeded;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "5e8b6973527e5f714652641ed95e8a4509e18cfa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7129. Metrics to track usage of memory for writes. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "30/09/14 12:53 AM",
      "commitName": "5e8b6973527e5f714652641ed95e8a4509e18cfa",
      "commitAuthor": "arp",
      "commitDateOld": "29/09/14 10:27 PM",
      "commitNameOld": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n     private boolean saveNextReplica() {\n       RamDiskReplica block \u003d null;\n       boolean succeeded \u003d false;\n \n       try {\n         block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n         if (block !\u003d null) {\n-          moveReplicaToNewVolume(block.getBlockPoolId(), block.getBlockId());\n+          moveReplicaToNewVolume(block.getBlockPoolId(), block.getBlockId(),\n+            block.getCreationTime());\n         }\n         succeeded \u003d true;\n       } catch(IOException ioe) {\n         LOG.warn(\"Exception saving replica \" + block, ioe);\n       } finally {\n         if (!succeeded \u0026\u0026 block !\u003d null) {\n           LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n           ramDiskReplicaTracker.reenqueueReplicaNotPersisted(block);\n         }\n       }\n \n       return succeeded;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean saveNextReplica() {\n      RamDiskReplica block \u003d null;\n      boolean succeeded \u003d false;\n\n      try {\n        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n        if (block !\u003d null) {\n          moveReplicaToNewVolume(block.getBlockPoolId(), block.getBlockId(),\n            block.getCreationTime());\n        }\n        succeeded \u003d true;\n      } catch(IOException ioe) {\n        LOG.warn(\"Exception saving replica \" + block, ioe);\n      } finally {\n        if (!succeeded \u0026\u0026 block !\u003d null) {\n          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n          ramDiskReplicaTracker.reenqueueReplicaNotPersisted(block);\n        }\n      }\n\n      return succeeded;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "b2d5ed36bcb80e2581191dcdc3976e825c959142": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7100. Make eviction scheme pluggable. (Arpit Agarwal)\n",
      "commitDate": "20/09/14 1:25 PM",
      "commitName": "b2d5ed36bcb80e2581191dcdc3976e825c959142",
      "commitAuthor": "arp",
      "commitDateOld": "19/09/14 10:02 AM",
      "commitNameOld": "222bf0fe6706ee43964fd39b8315c1a339fbc84a",
      "commitAuthorOld": "",
      "daysBetweenCommits": 1.14,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private boolean saveNextReplica() {\n-      LazyWriteReplicaTracker.ReplicaState replicaState \u003d null;\n+      RamDiskReplica block \u003d null;\n       boolean succeeded \u003d false;\n \n       try {\n-        replicaState \u003d lazyWriteReplicaTracker.dequeueNextReplicaToPersist();\n-        if (replicaState !\u003d null) {\n-          moveReplicaToNewVolume(replicaState.bpid, replicaState.blockId);\n+        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n+        if (block !\u003d null) {\n+          moveReplicaToNewVolume(block.getBlockPoolId(), block.getBlockId());\n         }\n         succeeded \u003d true;\n       } catch(IOException ioe) {\n-        LOG.warn(\"Exception saving replica \" + replicaState, ioe);\n+        LOG.warn(\"Exception saving replica \" + block, ioe);\n       } finally {\n-        if (!succeeded \u0026\u0026 replicaState !\u003d null) {\n-          LOG.warn(\"Failed to save replica \" + replicaState + \". re-enqueueing it.\");\n-          lazyWriteReplicaTracker.reenqueueReplicaNotPersisted(replicaState);\n+        if (!succeeded \u0026\u0026 block !\u003d null) {\n+          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n+          ramDiskReplicaTracker.reenqueueReplicaNotPersisted(block);\n         }\n       }\n \n       return succeeded;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean saveNextReplica() {\n      RamDiskReplica block \u003d null;\n      boolean succeeded \u003d false;\n\n      try {\n        block \u003d ramDiskReplicaTracker.dequeueNextReplicaToPersist();\n        if (block !\u003d null) {\n          moveReplicaToNewVolume(block.getBlockPoolId(), block.getBlockId());\n        }\n        succeeded \u003d true;\n      } catch(IOException ioe) {\n        LOG.warn(\"Exception saving replica \" + block, ioe);\n      } finally {\n        if (!succeeded \u0026\u0026 block !\u003d null) {\n          LOG.warn(\"Failed to save replica \" + block + \". re-enqueueing it.\");\n          ramDiskReplicaTracker.reenqueueReplicaNotPersisted(block);\n        }\n      }\n\n      return succeeded;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    }
  }
}