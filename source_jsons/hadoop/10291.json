{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReplicaBuilder.java",
  "functionName": "buildProvidedFinalizedReplica",
  "functionId": "buildProvidedFinalizedReplica",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java",
  "functionStartLine": 311,
  "functionEndLine": 336,
  "numCommitsSeen": 7,
  "timeTaken": 4344,
  "changeHistory": [
    "4531588a94dcd2b4141b12828cb60ca3b953a58c",
    "352f994b6484524cdcfcda021046c59905b62f31",
    "e1a28f95b8ffcb86300148f10a23b710f8388341",
    "2407c9b93aabb021b76c802b19c928fb6cbb0a85",
    "b668eb91556b8c85c2b4925808ccb1f769031c20"
  ],
  "changeHistoryShort": {
    "4531588a94dcd2b4141b12828cb60ca3b953a58c": "Ybodychange",
    "352f994b6484524cdcfcda021046c59905b62f31": "Ybodychange",
    "e1a28f95b8ffcb86300148f10a23b710f8388341": "Ybodychange",
    "2407c9b93aabb021b76c802b19c928fb6cbb0a85": "Ybodychange",
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4531588a94dcd2b4141b12828cb60ca3b953a58c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11640. [READ] Datanodes should use a unique identifier when reading from external stores\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "4531588a94dcd2b4141b12828cb60ca3b953a58c",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "352f994b6484524cdcfcda021046c59905b62f31",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private ProvidedReplica buildProvidedFinalizedReplica()\n       throws IllegalArgumentException {\n     ProvidedReplica info \u003d null;\n     if (fromReplica !\u003d null) {\n       throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n           \"cannot be constructed from another replica\");\n     }\n     if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null \u0026\u0026\n         (pathPrefix \u003d\u003d null || pathSuffix \u003d\u003d null)) {\n       throw new IllegalArgumentException(\n           \"Trying to construct a provided replica on \" + volume +\n           \" without enough information\");\n     }\n     if (fileRegion \u003d\u003d null) {\n       if (uri !\u003d null) {\n         info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n-            length, genStamp, volume, conf, remoteFS);\n+            length, genStamp, pathHandle, volume, conf, remoteFS);\n       } else {\n         info \u003d new FinalizedProvidedReplica(blockId, pathPrefix, pathSuffix,\n-            offset, length, genStamp, volume, conf, remoteFS);\n+            offset, length, genStamp, pathHandle, volume, conf, remoteFS);\n       }\n     } else {\n       info \u003d new FinalizedProvidedReplica(fileRegion, volume, conf, remoteFS);\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ProvidedReplica buildProvidedFinalizedReplica()\n      throws IllegalArgumentException {\n    ProvidedReplica info \u003d null;\n    if (fromReplica !\u003d null) {\n      throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n          \"cannot be constructed from another replica\");\n    }\n    if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null \u0026\u0026\n        (pathPrefix \u003d\u003d null || pathSuffix \u003d\u003d null)) {\n      throw new IllegalArgumentException(\n          \"Trying to construct a provided replica on \" + volume +\n          \" without enough information\");\n    }\n    if (fileRegion \u003d\u003d null) {\n      if (uri !\u003d null) {\n        info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n            length, genStamp, pathHandle, volume, conf, remoteFS);\n      } else {\n        info \u003d new FinalizedProvidedReplica(blockId, pathPrefix, pathSuffix,\n            offset, length, genStamp, pathHandle, volume, conf, remoteFS);\n      }\n    } else {\n      info \u003d new FinalizedProvidedReplica(fileRegion, volume, conf, remoteFS);\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java",
      "extendedDetails": {}
    },
    "352f994b6484524cdcfcda021046c59905b62f31": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12665. [AliasMap] Create a version of the AliasMap that runs in memory in the Namenode (leveldb). Contributed by Ewan Higgs.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "352f994b6484524cdcfcda021046c59905b62f31",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "e1a28f95b8ffcb86300148f10a23b710f8388341",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,26 @@\n   private ProvidedReplica buildProvidedFinalizedReplica()\n       throws IllegalArgumentException {\n     ProvidedReplica info \u003d null;\n     if (fromReplica !\u003d null) {\n       throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n           \"cannot be constructed from another replica\");\n     }\n     if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null \u0026\u0026\n         (pathPrefix \u003d\u003d null || pathSuffix \u003d\u003d null)) {\n       throw new IllegalArgumentException(\n           \"Trying to construct a provided replica on \" + volume +\n           \" without enough information\");\n     }\n     if (fileRegion \u003d\u003d null) {\n       if (uri !\u003d null) {\n         info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n             length, genStamp, volume, conf, remoteFS);\n       } else {\n         info \u003d new FinalizedProvidedReplica(blockId, pathPrefix, pathSuffix,\n             offset, length, genStamp, volume, conf, remoteFS);\n       }\n     } else {\n-      info \u003d new FinalizedProvidedReplica(fileRegion.getBlock().getBlockId(),\n-          fileRegion.getPath().toUri(),\n-          fileRegion.getOffset(),\n-          fileRegion.getBlock().getNumBytes(),\n-          fileRegion.getBlock().getGenerationStamp(),\n-          volume, conf, remoteFS);\n+      info \u003d new FinalizedProvidedReplica(fileRegion, volume, conf, remoteFS);\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ProvidedReplica buildProvidedFinalizedReplica()\n      throws IllegalArgumentException {\n    ProvidedReplica info \u003d null;\n    if (fromReplica !\u003d null) {\n      throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n          \"cannot be constructed from another replica\");\n    }\n    if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null \u0026\u0026\n        (pathPrefix \u003d\u003d null || pathSuffix \u003d\u003d null)) {\n      throw new IllegalArgumentException(\n          \"Trying to construct a provided replica on \" + volume +\n          \" without enough information\");\n    }\n    if (fileRegion \u003d\u003d null) {\n      if (uri !\u003d null) {\n        info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n            length, genStamp, volume, conf, remoteFS);\n      } else {\n        info \u003d new FinalizedProvidedReplica(blockId, pathPrefix, pathSuffix,\n            offset, length, genStamp, volume, conf, remoteFS);\n      }\n    } else {\n      info \u003d new FinalizedProvidedReplica(fileRegion, volume, conf, remoteFS);\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java",
      "extendedDetails": {}
    },
    "e1a28f95b8ffcb86300148f10a23b710f8388341": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12777. [READ] Reduce memory and CPU footprint for PROVIDED volumes.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "e1a28f95b8ffcb86300148f10a23b710f8388341",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "2407c9b93aabb021b76c802b19c928fb6cbb0a85",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,31 @@\n   private ProvidedReplica buildProvidedFinalizedReplica()\n       throws IllegalArgumentException {\n     ProvidedReplica info \u003d null;\n     if (fromReplica !\u003d null) {\n       throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n           \"cannot be constructed from another replica\");\n     }\n-    if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null) {\n+    if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null \u0026\u0026\n+        (pathPrefix \u003d\u003d null || pathSuffix \u003d\u003d null)) {\n       throw new IllegalArgumentException(\n           \"Trying to construct a provided replica on \" + volume +\n           \" without enough information\");\n     }\n     if (fileRegion \u003d\u003d null) {\n-      info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n-          length, genStamp, volume, conf, remoteFS);\n+      if (uri !\u003d null) {\n+        info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n+            length, genStamp, volume, conf, remoteFS);\n+      } else {\n+        info \u003d new FinalizedProvidedReplica(blockId, pathPrefix, pathSuffix,\n+            offset, length, genStamp, volume, conf, remoteFS);\n+      }\n     } else {\n       info \u003d new FinalizedProvidedReplica(fileRegion.getBlock().getBlockId(),\n           fileRegion.getPath().toUri(),\n           fileRegion.getOffset(),\n           fileRegion.getBlock().getNumBytes(),\n           fileRegion.getBlock().getGenerationStamp(),\n           volume, conf, remoteFS);\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ProvidedReplica buildProvidedFinalizedReplica()\n      throws IllegalArgumentException {\n    ProvidedReplica info \u003d null;\n    if (fromReplica !\u003d null) {\n      throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n          \"cannot be constructed from another replica\");\n    }\n    if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null \u0026\u0026\n        (pathPrefix \u003d\u003d null || pathSuffix \u003d\u003d null)) {\n      throw new IllegalArgumentException(\n          \"Trying to construct a provided replica on \" + volume +\n          \" without enough information\");\n    }\n    if (fileRegion \u003d\u003d null) {\n      if (uri !\u003d null) {\n        info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n            length, genStamp, volume, conf, remoteFS);\n      } else {\n        info \u003d new FinalizedProvidedReplica(blockId, pathPrefix, pathSuffix,\n            offset, length, genStamp, volume, conf, remoteFS);\n      }\n    } else {\n      info \u003d new FinalizedProvidedReplica(fileRegion.getBlock().getBlockId(),\n          fileRegion.getPath().toUri(),\n          fileRegion.getOffset(),\n          fileRegion.getBlock().getNumBytes(),\n          fileRegion.getBlock().getGenerationStamp(),\n          volume, conf, remoteFS);\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java",
      "extendedDetails": {}
    },
    "2407c9b93aabb021b76c802b19c928fb6cbb0a85": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12093. [READ] Share remoteFS between ProvidedReplica instances.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "2407c9b93aabb021b76c802b19c928fb6cbb0a85",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private ProvidedReplica buildProvidedFinalizedReplica()\n       throws IllegalArgumentException {\n     ProvidedReplica info \u003d null;\n     if (fromReplica !\u003d null) {\n       throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n           \"cannot be constructed from another replica\");\n     }\n     if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null) {\n       throw new IllegalArgumentException(\n           \"Trying to construct a provided replica on \" + volume +\n           \" without enough information\");\n     }\n     if (fileRegion \u003d\u003d null) {\n       info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n-          length, genStamp, volume, conf);\n+          length, genStamp, volume, conf, remoteFS);\n     } else {\n       info \u003d new FinalizedProvidedReplica(fileRegion.getBlock().getBlockId(),\n           fileRegion.getPath().toUri(),\n           fileRegion.getOffset(),\n           fileRegion.getBlock().getNumBytes(),\n           fileRegion.getBlock().getGenerationStamp(),\n-          volume, conf);\n+          volume, conf, remoteFS);\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ProvidedReplica buildProvidedFinalizedReplica()\n      throws IllegalArgumentException {\n    ProvidedReplica info \u003d null;\n    if (fromReplica !\u003d null) {\n      throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n          \"cannot be constructed from another replica\");\n    }\n    if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null) {\n      throw new IllegalArgumentException(\n          \"Trying to construct a provided replica on \" + volume +\n          \" without enough information\");\n    }\n    if (fileRegion \u003d\u003d null) {\n      info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n          length, genStamp, volume, conf, remoteFS);\n    } else {\n      info \u003d new FinalizedProvidedReplica(fileRegion.getBlock().getBlockId(),\n          fileRegion.getPath().toUri(),\n          fileRegion.getOffset(),\n          fileRegion.getBlock().getNumBytes(),\n          fileRegion.getBlock().getGenerationStamp(),\n          volume, conf, remoteFS);\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java",
      "extendedDetails": {}
    },
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "diff": "@@ -0,0 +1,25 @@\n+  private ProvidedReplica buildProvidedFinalizedReplica()\n+      throws IllegalArgumentException {\n+    ProvidedReplica info \u003d null;\n+    if (fromReplica !\u003d null) {\n+      throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n+          \"cannot be constructed from another replica\");\n+    }\n+    if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null) {\n+      throw new IllegalArgumentException(\n+          \"Trying to construct a provided replica on \" + volume +\n+          \" without enough information\");\n+    }\n+    if (fileRegion \u003d\u003d null) {\n+      info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n+          length, genStamp, volume, conf);\n+    } else {\n+      info \u003d new FinalizedProvidedReplica(fileRegion.getBlock().getBlockId(),\n+          fileRegion.getPath().toUri(),\n+          fileRegion.getOffset(),\n+          fileRegion.getBlock().getNumBytes(),\n+          fileRegion.getBlock().getGenerationStamp(),\n+          volume, conf);\n+    }\n+    return info;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ProvidedReplica buildProvidedFinalizedReplica()\n      throws IllegalArgumentException {\n    ProvidedReplica info \u003d null;\n    if (fromReplica !\u003d null) {\n      throw new IllegalArgumentException(\"Finalized PROVIDED replica \" +\n          \"cannot be constructed from another replica\");\n    }\n    if (fileRegion \u003d\u003d null \u0026\u0026 uri \u003d\u003d null) {\n      throw new IllegalArgumentException(\n          \"Trying to construct a provided replica on \" + volume +\n          \" without enough information\");\n    }\n    if (fileRegion \u003d\u003d null) {\n      info \u003d new FinalizedProvidedReplica(blockId, uri, offset,\n          length, genStamp, volume, conf);\n    } else {\n      info \u003d new FinalizedProvidedReplica(fileRegion.getBlock().getBlockId(),\n          fileRegion.getPath().toUri(),\n          fileRegion.getOffset(),\n          fileRegion.getBlock().getNumBytes(),\n          fileRegion.getBlock().getGenerationStamp(),\n          volume, conf);\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ReplicaBuilder.java"
    }
  }
}