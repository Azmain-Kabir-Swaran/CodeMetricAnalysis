{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerUtils.java",
  "functionName": "validateResourceRequest",
  "functionId": "validateResourceRequest___resReq-ResourceRequest__maximumAllocation-Resource__queueInfo-QueueInfo__rmContext-RMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
  "functionStartLine": 333,
  "functionEndLine": 375,
  "numCommitsSeen": 153,
  "timeTaken": 9229,
  "changeHistory": [
    "fd6be5898ad1a650e3bceacb8169a53520da57e5",
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba",
    "aae629913cee0157c945a2c7384c7bf398f10616",
    "d02e42cee4a08a47ed2835f7a4a100daaa95833f",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
    "1bbd023275db535ab80fcb60e022151e9679d468",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e",
    "9e792da01419998c2ebfafd7161070150d85d3ac",
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
    "f65eeb412d140a3808bcf99344a9f3a965918f70",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
    "c1957fef29b07fea70938e971b30532a1e131fd0",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "bc6777dd5bdcbaef09897b506bc6511ae456033d"
  ],
  "changeHistoryShort": {
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": "Ymultichange(Yparameterchange,Ybodychange)",
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba": "Ybodychange",
    "aae629913cee0157c945a2c7384c7bf398f10616": "Ybodychange",
    "d02e42cee4a08a47ed2835f7a4a100daaa95833f": "Ybodychange",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Ybodychange",
    "1bbd023275db535ab80fcb60e022151e9679d468": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e": "Ybodychange",
    "9e792da01419998c2ebfafd7161070150d85d3ac": "Ybodychange",
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "f65eeb412d140a3808bcf99344a9f3a965918f70": "Ymultichange(Yparameterchange,Ybodychange)",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": "Ybodychange",
    "c1957fef29b07fea70938e971b30532a1e131fd0": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ymultichange(Yparameterchange,Ybodychange)",
    "bc6777dd5bdcbaef09897b506bc6511ae456033d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal Bálint Steinbach.\n",
      "commitDate": "29/09/18 2:47 AM",
      "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal Bálint Steinbach.\n",
          "commitDate": "29/09/18 2:47 AM",
          "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "27/07/18 2:35 PM",
          "commitNameOld": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 63.51,
          "commitsBetweenForRepo": 571,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n+      Resource maximumAllocation, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     final Resource requestedResource \u003d resReq.getCapability();\n     checkResourceRequestAgainstAvailableResource(requestedResource,\n-        maximumResource);\n+        maximumAllocation);\n \n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n             \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                 + \" doesn\u0027t have permission to access all labels \"\n                 + \"in resource request. labelExpression of resource request\u003d\"\n                 + labelExp + \". Queue labels\u003d\"\n                 + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                     : StringUtils.join(\n                         queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       } else {\n         checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumAllocation, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    final Resource requestedResource \u003d resReq.getCapability();\n    checkResourceRequestAgainstAvailableResource(requestedResource,\n        maximumAllocation);\n\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n\n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n\n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[resReq-ResourceRequest, maximumResource-Resource, queueInfo-QueueInfo, rmContext-RMContext]",
            "newValue": "[resReq-ResourceRequest, maximumAllocation-Resource, queueInfo-QueueInfo, rmContext-RMContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal Bálint Steinbach.\n",
          "commitDate": "29/09/18 2:47 AM",
          "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "27/07/18 2:35 PM",
          "commitNameOld": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 63.51,
          "commitsBetweenForRepo": 571,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n+      Resource maximumAllocation, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     final Resource requestedResource \u003d resReq.getCapability();\n     checkResourceRequestAgainstAvailableResource(requestedResource,\n-        maximumResource);\n+        maximumAllocation);\n \n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n             \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                 + \" doesn\u0027t have permission to access all labels \"\n                 + \"in resource request. labelExpression of resource request\u003d\"\n                 + labelExp + \". Queue labels\u003d\"\n                 + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                     : StringUtils.join(\n                         queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       } else {\n         checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumAllocation, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    final Resource requestedResource \u003d resReq.getCapability();\n    checkResourceRequestAgainstAvailableResource(requestedResource,\n        maximumAllocation);\n\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n\n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n\n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n",
      "commitDate": "10/05/18 9:31 AM",
      "commitName": "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/04/18 8:47 AM",
      "commitNameOld": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 31.03,
      "commitsBetweenForRepo": 729,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,43 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n-    Resource requestedResource \u003d resReq.getCapability();\n-    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n-      ResourceInformation reqRI \u003d requestedResource.getResourceInformation(i);\n-      ResourceInformation maxRI \u003d maximumResource.getResourceInformation(i);\n-      if (reqRI.getValue() \u003c 0 || reqRI.getValue() \u003e maxRI.getValue()) {\n-        throw new InvalidResourceRequestException(\n-            \"Invalid resource request, requested resource type\u003d[\" + reqRI\n-                .getName()\n-                + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n-                + \"resource\u003d\" + requestedResource\n-                + \", maximum allowed allocation\u003d\" + maximumResource\n-                + \", please note that maximum allowed allocation is calculated \"\n-                + \"by scheduler based on maximum resource of registered \"\n-                + \"NodeManagers, which might be less than configured \"\n-                + \"maximum allocation\u003d\" + ResourceUtils\n-                .getResourceTypesMaximumAllocation());\n-      }\n-    }\n+    final Resource requestedResource \u003d resReq.getCapability();\n+    checkResourceRequestAgainstAvailableResource(requestedResource,\n+        maximumResource);\n+\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n             \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                 + \" doesn\u0027t have permission to access all labels \"\n                 + \"in resource request. labelExpression of resource request\u003d\"\n                 + labelExp + \". Queue labels\u003d\"\n                 + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                     : StringUtils.join(\n                         queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       } else {\n         checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    final Resource requestedResource \u003d resReq.getCapability();\n    checkResourceRequestAgainstAvailableResource(requestedResource,\n        maximumResource);\n\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n\n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n\n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "aae629913cee0157c945a2c7384c7bf398f10616": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7292. Retrospect Resource Profile Behavior for overriding capability. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 11:07 PM",
      "commitName": "aae629913cee0157c945a2c7384c7bf398f10616",
      "commitAuthor": "Sunil G",
      "commitDateOld": "11/02/18 6:29 PM",
      "commitNameOld": "d02e42cee4a08a47ed2835f7a4a100daaa95833f",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 4.19,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,57 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n-    try {\n-      RMServerUtils.convertProfileToResourceCapability(resReq,\n-          rmContext.getYarnConfiguration(),\n-          rmContext.getResourceProfilesManager());\n-    } catch (YarnException ye) {\n-      throw new InvalidResourceRequestException(ye);\n-    }\n-\n     Resource requestedResource \u003d resReq.getCapability();\n     for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n       ResourceInformation reqRI \u003d requestedResource.getResourceInformation(i);\n       ResourceInformation maxRI \u003d maximumResource.getResourceInformation(i);\n       if (reqRI.getValue() \u003c 0 || reqRI.getValue() \u003e maxRI.getValue()) {\n         throw new InvalidResourceRequestException(\n             \"Invalid resource request, requested resource type\u003d[\" + reqRI\n                 .getName()\n                 + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n                 + \"resource\u003d\" + requestedResource\n                 + \", maximum allowed allocation\u003d\" + maximumResource\n                 + \", please note that maximum allowed allocation is calculated \"\n                 + \"by scheduler based on maximum resource of registered \"\n                 + \"NodeManagers, which might be less than configured \"\n                 + \"maximum allocation\u003d\" + ResourceUtils\n                 .getResourceTypesMaximumAllocation());\n       }\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n             \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                 + \" doesn\u0027t have permission to access all labels \"\n                 + \"in resource request. labelExpression of resource request\u003d\"\n                 + labelExp + \". Queue labels\u003d\"\n                 + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                     : StringUtils.join(\n                         queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       } else {\n         checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    Resource requestedResource \u003d resReq.getCapability();\n    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n      ResourceInformation reqRI \u003d requestedResource.getResourceInformation(i);\n      ResourceInformation maxRI \u003d maximumResource.getResourceInformation(i);\n      if (reqRI.getValue() \u003c 0 || reqRI.getValue() \u003e maxRI.getValue()) {\n        throw new InvalidResourceRequestException(\n            \"Invalid resource request, requested resource type\u003d[\" + reqRI\n                .getName()\n                + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n                + \"resource\u003d\" + requestedResource\n                + \", maximum allowed allocation\u003d\" + maximumResource\n                + \", please note that maximum allowed allocation is calculated \"\n                + \"by scheduler based on maximum resource of registered \"\n                + \"NodeManagers, which might be less than configured \"\n                + \"maximum allocation\u003d\" + ResourceUtils\n                .getResourceTypesMaximumAllocation());\n      }\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "d02e42cee4a08a47ed2835f7a4a100daaa95833f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7739. DefaultAMSProcessor should properly check customized resource types against minimum/maximum allocation. (wangda)\n\nChange-Id: I10cc9341237d9a2fc0f8c855efb98a36b91389e2\n",
      "commitDate": "11/02/18 6:29 PM",
      "commitName": "d02e42cee4a08a47ed2835f7a4a100daaa95833f",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/11/17 10:49 AM",
      "commitNameOld": "a1382a18dff8a70aa25240d6fbba6e22832a7679",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 94.32,
      "commitsBetweenForRepo": 531,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     try {\n       RMServerUtils.convertProfileToResourceCapability(resReq,\n           rmContext.getYarnConfiguration(),\n           rmContext.getResourceProfilesManager());\n     } catch (YarnException ye) {\n       throw new InvalidResourceRequestException(ye);\n     }\n \n-    if (resReq.getCapability().getMemorySize() \u003c 0 ||\n-        resReq.getCapability().getMemorySize() \u003e maximumResource.getMemorySize()) {\n-      throw new InvalidResourceRequestException(\"Invalid resource request\"\n-          + \", requested memory \u003c 0\"\n-          + \", or requested memory \u003e max configured\"\n-          + \", requestedMemory\u003d\" + resReq.getCapability().getMemorySize()\n-          + \", maxMemory\u003d\" + maximumResource.getMemorySize());\n-    }\n-    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n-        resReq.getCapability().getVirtualCores() \u003e\n-        maximumResource.getVirtualCores()) {\n-      throw new InvalidResourceRequestException(\"Invalid resource request\"\n-          + \", requested virtual cores \u003c 0\"\n-          + \", or requested virtual cores \u003e max configured\"\n-          + \", requestedVirtualCores\u003d\"\n-          + resReq.getCapability().getVirtualCores()\n-          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n+    Resource requestedResource \u003d resReq.getCapability();\n+    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n+      ResourceInformation reqRI \u003d requestedResource.getResourceInformation(i);\n+      ResourceInformation maxRI \u003d maximumResource.getResourceInformation(i);\n+      if (reqRI.getValue() \u003c 0 || reqRI.getValue() \u003e maxRI.getValue()) {\n+        throw new InvalidResourceRequestException(\n+            \"Invalid resource request, requested resource type\u003d[\" + reqRI\n+                .getName()\n+                + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n+                + \"resource\u003d\" + requestedResource\n+                + \", maximum allowed allocation\u003d\" + maximumResource\n+                + \", please note that maximum allowed allocation is calculated \"\n+                + \"by scheduler based on maximum resource of registered \"\n+                + \"NodeManagers, which might be less than configured \"\n+                + \"maximum allocation\u003d\" + ResourceUtils\n+                .getResourceTypesMaximumAllocation());\n+      }\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n             \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                 + \" doesn\u0027t have permission to access all labels \"\n                 + \"in resource request. labelExpression of resource request\u003d\"\n                 + labelExp + \". Queue labels\u003d\"\n                 + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                     : StringUtils.join(\n                         queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       } else {\n         checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    try {\n      RMServerUtils.convertProfileToResourceCapability(resReq,\n          rmContext.getYarnConfiguration(),\n          rmContext.getResourceProfilesManager());\n    } catch (YarnException ye) {\n      throw new InvalidResourceRequestException(ye);\n    }\n\n    Resource requestedResource \u003d resReq.getCapability();\n    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n      ResourceInformation reqRI \u003d requestedResource.getResourceInformation(i);\n      ResourceInformation maxRI \u003d maximumResource.getResourceInformation(i);\n      if (reqRI.getValue() \u003c 0 || reqRI.getValue() \u003e maxRI.getValue()) {\n        throw new InvalidResourceRequestException(\n            \"Invalid resource request, requested resource type\u003d[\" + reqRI\n                .getName()\n                + \"] \u003c 0 or greater than maximum allowed allocation. Requested \"\n                + \"resource\u003d\" + requestedResource\n                + \", maximum allowed allocation\u003d\" + maximumResource\n                + \", please note that maximum allowed allocation is calculated \"\n                + \"by scheduler based on maximum resource of registered \"\n                + \"NodeManagers, which might be less than configured \"\n                + \"maximum allocation\u003d\" + ResourceUtils\n                .getResourceTypesMaximumAllocation());\n      }\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/08/17 9:56 AM",
      "commitNameOld": "91f120f743662c6e037e8f21b1792e81d58ac664",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 41.97,
      "commitsBetweenForRepo": 394,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,65 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n+    try {\n+      RMServerUtils.convertProfileToResourceCapability(resReq,\n+          rmContext.getYarnConfiguration(),\n+          rmContext.getResourceProfilesManager());\n+    } catch (YarnException ye) {\n+      throw new InvalidResourceRequestException(ye);\n+    }\n+\n     if (resReq.getCapability().getMemorySize() \u003c 0 ||\n         resReq.getCapability().getMemorySize() \u003e maximumResource.getMemorySize()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemorySize()\n           + \", maxMemory\u003d\" + maximumResource.getMemorySize());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n             \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                 + \" doesn\u0027t have permission to access all labels \"\n                 + \"in resource request. labelExpression of resource request\u003d\"\n                 + labelExp + \". Queue labels\u003d\"\n                 + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                     : StringUtils.join(\n                         queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       } else {\n         checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    try {\n      RMServerUtils.convertProfileToResourceCapability(resReq,\n          rmContext.getYarnConfiguration(),\n          rmContext.getResourceProfilesManager());\n    } catch (YarnException ye) {\n      throw new InvalidResourceRequestException(ye);\n    }\n\n    if (resReq.getCapability().getMemorySize() \u003c 0 ||\n        resReq.getCapability().getMemorySize() \u003e maximumResource.getMemorySize()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemorySize()\n          + \", maxMemory\u003d\" + maximumResource.getMemorySize());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "1bbd023275db535ab80fcb60e022151e9679d468": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5962. Spelling errors in logging and exceptions for resource manager code (gsohn via rkanter)\n",
      "commitDate": "27/12/16 1:35 PM",
      "commitName": "1bbd023275db535ab80fcb60e022151e9679d468",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 28.16,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemorySize() \u003c 0 ||\n         resReq.getCapability().getMemorySize() \u003e maximumResource.getMemorySize()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemorySize()\n           + \", maxMemory\u003d\" + maximumResource.getMemorySize());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n-          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n+          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n             \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                 + \" doesn\u0027t have permission to access all labels \"\n                 + \"in resource request. labelExpression of resource request\u003d\"\n                 + labelExp + \". Queue labels\u003d\"\n                 + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                     : StringUtils.join(\n                         queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       } else {\n         checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemorySize() \u003c 0 ||\n        resReq.getCapability().getMemorySize() \u003e maximumResource.getMemorySize()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemorySize()\n          + \", maxMemory\u003d\" + maximumResource.getMemorySize());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "08/03/16 2:27 PM",
      "commitNameOld": "0233d4e0ee9947a95c018b1539310fc0bff6c44e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 81.73,
      "commitsBetweenForRepo": 511,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n-    if (resReq.getCapability().getMemory() \u003c 0 ||\n-        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n+    if (resReq.getCapability().getMemorySize() \u003c 0 ||\n+        resReq.getCapability().getMemorySize() \u003e maximumResource.getMemorySize()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n-          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n-          + \", maxMemory\u003d\" + maximumResource.getMemory());\n+          + \", requestedMemory\u003d\" + resReq.getCapability().getMemorySize()\n+          + \", maxMemory\u003d\" + maximumResource.getMemorySize());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n             \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                 + \" doesn\u0027t have permission to access all labels \"\n                 + \"in resource request. labelExpression of resource request\u003d\"\n                 + labelExp + \". Queue labels\u003d\"\n                 + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                     : StringUtils.join(\n                         queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       } else {\n         checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemorySize() \u003c 0 ||\n        resReq.getCapability().getMemorySize() \u003e maximumResource.getMemorySize()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemorySize()\n          + \", maxMemory\u003d\" + maximumResource.getMemorySize());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4465. SchedulerUtils#validateRequest for Label check should happen only when nodelabel enabled. (Bibin A Chundatt via wangda)\n",
      "commitDate": "08/03/16 2:27 PM",
      "commitName": "0233d4e0ee9947a95c018b1539310fc0bff6c44e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/01/16 8:53 PM",
      "commitNameOld": "9e792da01419998c2ebfafd7161070150d85d3ac",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 56.73,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n-      throw new InvalidResourceRequestException(\n-          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n+      throw new InvalidLabelResourceRequestException(\n+          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidLabelResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n         throw new InvalidLabelResourceRequestException(\n-            \"Invalid resource request\"\n-            + \", queue\u003d\"\n-            + queueInfo.getQueueName()\n-            + \" doesn\u0027t have permission to access all labels \"\n-            + \"in resource request. labelExpression of resource request\u003d\"\n-            + labelExp\n-            + \". Queue labels\u003d\"\n-            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n-                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n+            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n+                + \" doesn\u0027t have permission to access all labels \"\n+                + \"in resource request. labelExpression of resource request\u003d\"\n+                + labelExp + \". Queue labels\u003d\"\n+                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n+                    : StringUtils.join(\n+                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n+      } else {\n+        checkQueueLabelInLabelManager(labelExp, rmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invalid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\" + \", queue\u003d\" + queueInfo.getQueueName()\n                + \" doesn\u0027t have permission to access all labels \"\n                + \"in resource request. labelExpression of resource request\u003d\"\n                + labelExp + \". Queue labels\u003d\"\n                + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\"\n                    : StringUtils.join(\n                        queueInfo.getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      } else {\n        checkQueueLabelInLabelManager(labelExp, rmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "9e792da01419998c2ebfafd7161070150d85d3ac": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4582. Label-related invalid resource request exception should be able to properly handled by application. (Bibin A Chundatt via wangda)\n",
      "commitDate": "11/01/16 8:53 PM",
      "commitName": "9e792da01419998c2ebfafd7161070150d85d3ac",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 110.35,
      "commitsBetweenForRepo": 749,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n   private static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n-      throw new InvalidResourceRequestException(\n+      throw new InvalidLabelResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp, rmContext)) {\n-        throw new InvalidResourceRequestException(\"Invalid resource request\"\n+        throw new InvalidLabelResourceRequestException(\n+            \"Invalid resource request\"\n             + \", queue\u003d\"\n             + queueInfo.getQueueName()\n             + \" doesn\u0027t have permission to access all labels \"\n             + \"in resource request. labelExpression of resource request\u003d\"\n             + labelExp\n             + \". Queue labels\u003d\"\n             + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                 .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidLabelResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "f489a4ec969f3727d03c8e85d51af1018fc0b2a1": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2918. RM should not fail on startup if queue\u0027s configured labels do not exist in cluster-node-labels. Contributed by Wangda Tan\n",
      "commitDate": "07/05/15 5:35 PM",
      "commitName": "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2918. RM should not fail on startup if queue\u0027s configured labels do not exist in cluster-node-labels. Contributed by Wangda Tan\n",
          "commitDate": "07/05/15 5:35 PM",
          "commitName": "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/04/15 5:11 PM",
          "commitNameOld": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 20.02,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,56 @@\n-  public static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource, QueueInfo queueInfo)\n+  private static void validateResourceRequest(ResourceRequest resReq,\n+      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n-          labelExp)) {\n+          labelExp, rmContext)) {\n         throw new InvalidResourceRequestException(\"Invalid resource request\"\n             + \", queue\u003d\"\n             + queueInfo.getQueueName()\n             + \" doesn\u0027t have permission to access all labels \"\n             + \"in resource request. labelExpression of resource request\u003d\"\n             + labelExp\n             + \". Queue labels\u003d\"\n             + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                 .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[resReq-ResourceRequest, maximumResource-Resource, queueInfo-QueueInfo]",
            "newValue": "[resReq-ResourceRequest, maximumResource-Resource, queueInfo-QueueInfo, rmContext-RMContext]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2918. RM should not fail on startup if queue\u0027s configured labels do not exist in cluster-node-labels. Contributed by Wangda Tan\n",
          "commitDate": "07/05/15 5:35 PM",
          "commitName": "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/04/15 5:11 PM",
          "commitNameOld": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 20.02,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,56 @@\n-  public static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource, QueueInfo queueInfo)\n+  private static void validateResourceRequest(ResourceRequest resReq,\n+      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n-          labelExp)) {\n+          labelExp, rmContext)) {\n         throw new InvalidResourceRequestException(\"Invalid resource request\"\n             + \", queue\u003d\"\n             + queueInfo.getQueueName()\n             + \" doesn\u0027t have permission to access all labels \"\n             + \"in resource request. labelExpression of resource request\u003d\"\n             + labelExp\n             + \". Queue labels\u003d\"\n             + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                 .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2918. RM should not fail on startup if queue\u0027s configured labels do not exist in cluster-node-labels. Contributed by Wangda Tan\n",
          "commitDate": "07/05/15 5:35 PM",
          "commitName": "f489a4ec969f3727d03c8e85d51af1018fc0b2a1",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/04/15 5:11 PM",
          "commitNameOld": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 20.02,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,56 @@\n-  public static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource, QueueInfo queueInfo)\n+  private static void validateResourceRequest(ResourceRequest resReq,\n+      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n-          labelExp)) {\n+          labelExp, rmContext)) {\n         throw new InvalidResourceRequestException(\"Invalid resource request\"\n             + \", queue\u003d\"\n             + queueInfo.getQueueName()\n             + \" doesn\u0027t have permission to access all labels \"\n             + \"in resource request. labelExpression of resource request\u003d\"\n             + labelExp\n             + \". Queue labels\u003d\"\n             + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                 .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo, RMContext rmContext)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp, rmContext)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "f65eeb412d140a3808bcf99344a9f3a965918f70": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3493. RM fails to come up with error \"Failed to load/recover state\" when mem settings are changed. (Jian He via wangda)\n",
      "commitDate": "17/04/15 5:11 PM",
      "commitName": "f65eeb412d140a3808bcf99344a9f3a965918f70",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3493. RM fails to come up with error \"Failed to load/recover state\" when mem settings are changed. (Jian He via wangda)\n",
          "commitDate": "17/04/15 5:11 PM",
          "commitName": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "14/04/15 11:45 AM",
          "commitNameOld": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 3.23,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,80 +1,56 @@\n   public static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource, String queueName, YarnScheduler scheduler)\n+      Resource maximumResource, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n-    \n-    // Get queue from scheduler\n-    QueueInfo queueInfo \u003d null;\n-    try {\n-      queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n-    } catch (IOException e) {\n-      // it is possible queue cannot get when queue mapping is set, just ignore\n-      // the queueInfo here, and move forward\n-    }\n-\n-    // check labels in the resource request.\n     String labelExp \u003d resReq.getNodeLabelExpression();\n-    \n-    // if queue has default label expression, and RR doesn\u0027t have, use the\n-    // default label expression of queue\n-    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null\n-        \u0026\u0026 ResourceRequest.ANY.equals(resReq.getResourceName())) {\n-      labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n-    }\n-    \n-    // If labelExp still equals to null, set it to be NO_LABEL\n-    resReq\n-        .setNodeLabelExpression(labelExp \u003d\u003d null ? RMNodeLabelsManager.NO_LABEL\n-            : labelExp);\n-    \n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp)) {\n         throw new InvalidResourceRequestException(\"Invalid resource request\"\n             + \", queue\u003d\"\n             + queueInfo.getQueueName()\n             + \" doesn\u0027t have permission to access all labels \"\n             + \"in resource request. labelExpression of resource request\u003d\"\n             + labelExp\n             + \". Queue labels\u003d\"\n             + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                 .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[resReq-ResourceRequest, maximumResource-Resource, queueName-String, scheduler-YarnScheduler]",
            "newValue": "[resReq-ResourceRequest, maximumResource-Resource, queueInfo-QueueInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3493. RM fails to come up with error \"Failed to load/recover state\" when mem settings are changed. (Jian He via wangda)\n",
          "commitDate": "17/04/15 5:11 PM",
          "commitName": "f65eeb412d140a3808bcf99344a9f3a965918f70",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "14/04/15 11:45 AM",
          "commitNameOld": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 3.23,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,80 +1,56 @@\n   public static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource, String queueName, YarnScheduler scheduler)\n+      Resource maximumResource, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n-    \n-    // Get queue from scheduler\n-    QueueInfo queueInfo \u003d null;\n-    try {\n-      queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n-    } catch (IOException e) {\n-      // it is possible queue cannot get when queue mapping is set, just ignore\n-      // the queueInfo here, and move forward\n-    }\n-\n-    // check labels in the resource request.\n     String labelExp \u003d resReq.getNodeLabelExpression();\n-    \n-    // if queue has default label expression, and RR doesn\u0027t have, use the\n-    // default label expression of queue\n-    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null\n-        \u0026\u0026 ResourceRequest.ANY.equals(resReq.getResourceName())) {\n-      labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n-    }\n-    \n-    // If labelExp still equals to null, set it to be NO_LABEL\n-    resReq\n-        .setNodeLabelExpression(labelExp \u003d\u003d null ? RMNodeLabelsManager.NO_LABEL\n-            : labelExp);\n-    \n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp)) {\n         throw new InvalidResourceRequestException(\"Invalid resource request\"\n             + \", queue\u003d\"\n             + queueInfo.getQueueName()\n             + \" doesn\u0027t have permission to access all labels \"\n             + \"in resource request. labelExpression of resource request\u003d\"\n             + labelExp\n             + \". Queue labels\u003d\"\n             + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                 .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
      "commitDate": "14/04/15 11:45 AM",
      "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/03/15 7:19 AM",
      "commitNameOld": "3da9a97cfbcc3a1c50aaf85b1a129d4d269cd5fd",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 29.19,
      "commitsBetweenForRepo": 283,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,80 @@\n   public static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, String queueName, YarnScheduler scheduler)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     \n     // Get queue from scheduler\n     QueueInfo queueInfo \u003d null;\n     try {\n       queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n     } catch (IOException e) {\n       // it is possible queue cannot get when queue mapping is set, just ignore\n       // the queueInfo here, and move forward\n     }\n \n     // check labels in the resource request.\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     \n     // if queue has default label expression, and RR doesn\u0027t have, use the\n     // default label expression of queue\n     if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null\n         \u0026\u0026 ResourceRequest.ANY.equals(resReq.getResourceName())) {\n       labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n-      resReq.setNodeLabelExpression(labelExp);\n     }\n     \n+    // If labelExp still equals to null, set it to be NO_LABEL\n+    resReq\n+        .setNodeLabelExpression(labelExp \u003d\u003d null ? RMNodeLabelsManager.NO_LABEL\n+            : labelExp);\n+    \n     // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n     if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n         \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified node label expression in a \"\n               + \"resource request has resource name \u003d \"\n               + resReq.getResourceName());\n     }\n     \n     // we don\u0027t allow specify label expression with more than one node labels now\n     if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n       throw new InvalidResourceRequestException(\n           \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n               + \" specified more than one node label \"\n               + \"in a node label expression, node label expression \u003d \"\n               + labelExp);\n     }\n     \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp)) {\n         throw new InvalidResourceRequestException(\"Invalid resource request\"\n             + \", queue\u003d\"\n             + queueInfo.getQueueName()\n             + \" doesn\u0027t have permission to access all labels \"\n             + \"in resource request. labelExpression of resource request\u003d\"\n             + labelExp\n             + \". Queue labels\u003d\"\n             + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                 .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, String queueName, YarnScheduler scheduler)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    \n    // Get queue from scheduler\n    QueueInfo queueInfo \u003d null;\n    try {\n      queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n    } catch (IOException e) {\n      // it is possible queue cannot get when queue mapping is set, just ignore\n      // the queueInfo here, and move forward\n    }\n\n    // check labels in the resource request.\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    \n    // if queue has default label expression, and RR doesn\u0027t have, use the\n    // default label expression of queue\n    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null\n        \u0026\u0026 ResourceRequest.ANY.equals(resReq.getResourceName())) {\n      labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n    }\n    \n    // If labelExp still equals to null, set it to be NO_LABEL\n    resReq\n        .setNodeLabelExpression(labelExp \u003d\u003d null ? RMNodeLabelsManager.NO_LABEL\n            : labelExp);\n    \n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "c1957fef29b07fea70938e971b30532a1e131fd0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2694. Ensure only single node label specified in ResourceRequest. Contributed by Wangda Tan\n",
      "commitDate": "06/02/15 11:34 AM",
      "commitName": "c1957fef29b07fea70938e971b30532a1e131fd0",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/10/14 6:33 PM",
      "commitNameOld": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 113.75,
      "commitsBetweenForRepo": 847,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,76 @@\n   public static void validateResourceRequest(ResourceRequest resReq,\n       Resource maximumResource, String queueName, YarnScheduler scheduler)\n       throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n     \n     // Get queue from scheduler\n     QueueInfo queueInfo \u003d null;\n     try {\n       queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n     } catch (IOException e) {\n       // it is possible queue cannot get when queue mapping is set, just ignore\n       // the queueInfo here, and move forward\n     }\n \n     // check labels in the resource request.\n     String labelExp \u003d resReq.getNodeLabelExpression();\n     \n     // if queue has default label expression, and RR doesn\u0027t have, use the\n     // default label expression of queue\n-    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null) {\n+    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null\n+        \u0026\u0026 ResourceRequest.ANY.equals(resReq.getResourceName())) {\n       labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n       resReq.setNodeLabelExpression(labelExp);\n     }\n     \n+    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n+    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n+        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n+      throw new InvalidResourceRequestException(\n+          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n+              + \" specified node label expression in a \"\n+              + \"resource request has resource name \u003d \"\n+              + resReq.getResourceName());\n+    }\n+    \n+    // we don\u0027t allow specify label expression with more than one node labels now\n+    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n+      throw new InvalidResourceRequestException(\n+          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n+              + \" specified more than one node label \"\n+              + \"in a node label expression, node label expression \u003d \"\n+              + labelExp);\n+    }\n+    \n     if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n       if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n           labelExp)) {\n         throw new InvalidResourceRequestException(\"Invalid resource request\"\n             + \", queue\u003d\"\n             + queueInfo.getQueueName()\n             + \" doesn\u0027t have permission to access all labels \"\n             + \"in resource request. labelExpression of resource request\u003d\"\n             + labelExp\n             + \". Queue labels\u003d\"\n             + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                 .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, String queueName, YarnScheduler scheduler)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    \n    // Get queue from scheduler\n    QueueInfo queueInfo \u003d null;\n    try {\n      queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n    } catch (IOException e) {\n      // it is possible queue cannot get when queue mapping is set, just ignore\n      // the queueInfo here, and move forward\n    }\n\n    // check labels in the resource request.\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    \n    // if queue has default label expression, and RR doesn\u0027t have, use the\n    // default label expression of queue\n    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null\n        \u0026\u0026 ResourceRequest.ANY.equals(resReq.getResourceName())) {\n      labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n      resReq.setNodeLabelExpression(labelExp);\n    }\n    \n    // we don\u0027t allow specify label expression other than resourceName\u003dANY now\n    if (!ResourceRequest.ANY.equals(resReq.getResourceName())\n        \u0026\u0026 labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty()) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified node label expression in a \"\n              + \"resource request has resource name \u003d \"\n              + resReq.getResourceName());\n    }\n    \n    // we don\u0027t allow specify label expression with more than one node labels now\n    if (labelExp !\u003d null \u0026\u0026 labelExp.contains(\"\u0026\u0026\")) {\n      throw new InvalidResourceRequestException(\n          \"Invailid resource request, queue\u003d\" + queueInfo.getQueueName()\n              + \" specified more than one node label \"\n              + \"in a node label expression, node label expression \u003d \"\n              + labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/08/14 11:05 PM",
          "commitNameOld": "5c14bc426b4be381383018ebc2236be83eef15cd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 46.81,
          "commitsBetweenForRepo": 479,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,56 @@\n   public static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource) throws InvalidResourceRequestException {\n+      Resource maximumResource, String queueName, YarnScheduler scheduler)\n+      throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n+    \n+    // Get queue from scheduler\n+    QueueInfo queueInfo \u003d null;\n+    try {\n+      queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n+    } catch (IOException e) {\n+      // it is possible queue cannot get when queue mapping is set, just ignore\n+      // the queueInfo here, and move forward\n+    }\n+\n+    // check labels in the resource request.\n+    String labelExp \u003d resReq.getNodeLabelExpression();\n+    \n+    // if queue has default label expression, and RR doesn\u0027t have, use the\n+    // default label expression of queue\n+    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null) {\n+      labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n+      resReq.setNodeLabelExpression(labelExp);\n+    }\n+    \n+    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n+      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n+          labelExp)) {\n+        throw new InvalidResourceRequestException(\"Invalid resource request\"\n+            + \", queue\u003d\"\n+            + queueInfo.getQueueName()\n+            + \" doesn\u0027t have permission to access all labels \"\n+            + \"in resource request. labelExpression of resource request\u003d\"\n+            + labelExp\n+            + \". Queue labels\u003d\"\n+            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n+                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, String queueName, YarnScheduler scheduler)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    \n    // Get queue from scheduler\n    QueueInfo queueInfo \u003d null;\n    try {\n      queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n    } catch (IOException e) {\n      // it is possible queue cannot get when queue mapping is set, just ignore\n      // the queueInfo here, and move forward\n    }\n\n    // check labels in the resource request.\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    \n    // if queue has default label expression, and RR doesn\u0027t have, use the\n    // default label expression of queue\n    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null) {\n      labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n      resReq.setNodeLabelExpression(labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[resReq-ResourceRequest, maximumResource-Resource]",
            "newValue": "[resReq-ResourceRequest, maximumResource-Resource, queueName-String, scheduler-YarnScheduler]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/08/14 11:05 PM",
          "commitNameOld": "5c14bc426b4be381383018ebc2236be83eef15cd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 46.81,
          "commitsBetweenForRepo": 479,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,56 @@\n   public static void validateResourceRequest(ResourceRequest resReq,\n-      Resource maximumResource) throws InvalidResourceRequestException {\n+      Resource maximumResource, String queueName, YarnScheduler scheduler)\n+      throws InvalidResourceRequestException {\n     if (resReq.getCapability().getMemory() \u003c 0 ||\n         resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested memory \u003c 0\"\n           + \", or requested memory \u003e max configured\"\n           + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n           + \", maxMemory\u003d\" + maximumResource.getMemory());\n     }\n     if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n         resReq.getCapability().getVirtualCores() \u003e\n         maximumResource.getVirtualCores()) {\n       throw new InvalidResourceRequestException(\"Invalid resource request\"\n           + \", requested virtual cores \u003c 0\"\n           + \", or requested virtual cores \u003e max configured\"\n           + \", requestedVirtualCores\u003d\"\n           + resReq.getCapability().getVirtualCores()\n           + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n     }\n+    \n+    // Get queue from scheduler\n+    QueueInfo queueInfo \u003d null;\n+    try {\n+      queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n+    } catch (IOException e) {\n+      // it is possible queue cannot get when queue mapping is set, just ignore\n+      // the queueInfo here, and move forward\n+    }\n+\n+    // check labels in the resource request.\n+    String labelExp \u003d resReq.getNodeLabelExpression();\n+    \n+    // if queue has default label expression, and RR doesn\u0027t have, use the\n+    // default label expression of queue\n+    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null) {\n+      labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n+      resReq.setNodeLabelExpression(labelExp);\n+    }\n+    \n+    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n+      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n+          labelExp)) {\n+        throw new InvalidResourceRequestException(\"Invalid resource request\"\n+            + \", queue\u003d\"\n+            + queueInfo.getQueueName()\n+            + \" doesn\u0027t have permission to access all labels \"\n+            + \"in resource request. labelExpression of resource request\u003d\"\n+            + labelExp\n+            + \". Queue labels\u003d\"\n+            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n+                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource, String queueName, YarnScheduler scheduler)\n      throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n    \n    // Get queue from scheduler\n    QueueInfo queueInfo \u003d null;\n    try {\n      queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n    } catch (IOException e) {\n      // it is possible queue cannot get when queue mapping is set, just ignore\n      // the queueInfo here, and move forward\n    }\n\n    // check labels in the resource request.\n    String labelExp \u003d resReq.getNodeLabelExpression();\n    \n    // if queue has default label expression, and RR doesn\u0027t have, use the\n    // default label expression of queue\n    if (labelExp \u003d\u003d null \u0026\u0026 queueInfo !\u003d null) {\n      labelExp \u003d queueInfo.getDefaultNodeLabelExpression();\n      resReq.setNodeLabelExpression(labelExp);\n    }\n    \n    if (labelExp !\u003d null \u0026\u0026 !labelExp.trim().isEmpty() \u0026\u0026 queueInfo !\u003d null) {\n      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),\n          labelExp)) {\n        throw new InvalidResourceRequestException(\"Invalid resource request\"\n            + \", queue\u003d\"\n            + queueInfo.getQueueName()\n            + \" doesn\u0027t have permission to access all labels \"\n            + \"in resource request. labelExpression of resource request\u003d\"\n            + labelExp\n            + \". Queue labels\u003d\"\n            + (queueInfo.getAccessibleNodeLabels() \u003d\u003d null ? \"\" : StringUtils.join(queueInfo\n                .getAccessibleNodeLabels().iterator(), \u0027,\u0027)));\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "bc6777dd5bdcbaef09897b506bc6511ae456033d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-193. Scheduler.normalizeRequest does not account for allocation requests that exceed maximumAllocation limits (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465067 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/04/13 10:45 AM",
      "commitName": "bc6777dd5bdcbaef09897b506bc6511ae456033d",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,21 @@\n+  public static void validateResourceRequest(ResourceRequest resReq,\n+      Resource maximumResource) throws InvalidResourceRequestException {\n+    if (resReq.getCapability().getMemory() \u003c 0 ||\n+        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n+      throw new InvalidResourceRequestException(\"Invalid resource request\"\n+          + \", requested memory \u003c 0\"\n+          + \", or requested memory \u003e max configured\"\n+          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n+          + \", maxMemory\u003d\" + maximumResource.getMemory());\n+    }\n+    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n+        resReq.getCapability().getVirtualCores() \u003e\n+        maximumResource.getVirtualCores()) {\n+      throw new InvalidResourceRequestException(\"Invalid resource request\"\n+          + \", requested virtual cores \u003c 0\"\n+          + \", or requested virtual cores \u003e max configured\"\n+          + \", requestedVirtualCores\u003d\"\n+          + resReq.getCapability().getVirtualCores()\n+          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateResourceRequest(ResourceRequest resReq,\n      Resource maximumResource) throws InvalidResourceRequestException {\n    if (resReq.getCapability().getMemory() \u003c 0 ||\n        resReq.getCapability().getMemory() \u003e maximumResource.getMemory()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested memory \u003c 0\"\n          + \", or requested memory \u003e max configured\"\n          + \", requestedMemory\u003d\" + resReq.getCapability().getMemory()\n          + \", maxMemory\u003d\" + maximumResource.getMemory());\n    }\n    if (resReq.getCapability().getVirtualCores() \u003c 0 ||\n        resReq.getCapability().getVirtualCores() \u003e\n        maximumResource.getVirtualCores()) {\n      throw new InvalidResourceRequestException(\"Invalid resource request\"\n          + \", requested virtual cores \u003c 0\"\n          + \", or requested virtual cores \u003e max configured\"\n          + \", requestedVirtualCores\u003d\"\n          + resReq.getCapability().getVirtualCores()\n          + \", maxVirtualCores\u003d\" + maximumResource.getVirtualCores());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java"
    }
  }
}