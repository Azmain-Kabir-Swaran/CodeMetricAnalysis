{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirXAttrOp.java",
  "functionName": "getXAttrs",
  "functionId": "getXAttrs___fsd-FSDirectory__pc-FSPermissionChecker__srcArg-String(modifiers-final)__xAttrs-List__XAttr__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
  "functionStartLine": 96,
  "functionEndLine": 137,
  "numCommitsSeen": 49,
  "timeTaken": 4313,
  "changeHistory": [
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "3df61f303a8c0f5105661dc86fc3a34a60c49066",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9"
  ],
  "changeHistoryShort": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ymultichange(Yparameterchange,Ybodychange)",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "3df61f303a8c0f5105661dc86fc3a34a60c49066": "Ybodychange",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "15/02/18 9:11 AM",
          "commitNameOld": "da59acd8ca9ab5b49b988ffca64e8cce91c5f741",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 7.1,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,42 @@\n-  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n-                               List\u003cXAttr\u003e xAttrs)\n-      throws IOException {\n+  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, FSPermissionChecker pc,\n+      final String srcArg, List\u003cXAttr\u003e xAttrs) throws IOException {\n     String src \u003d srcArg;\n     checkXAttrsConfigFlag(fsd);\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n     boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n     if (!getAll) {\n       XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n     }\n     final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n     if (fsd.isPermissionEnabled()) {\n       fsd.checkPathAccess(pc, iip, FsAction.READ);\n     }\n     List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, iip);\n     List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n         filterXAttrsForApi(pc, all, isRawPath);\n \n     if (getAll) {\n       return filteredAll;\n     }\n     if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n       throw new IOException(\n           \"At least one of the attributes provided was not found.\");\n     }\n     List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n     for (XAttr xAttr : xAttrs) {\n       boolean foundIt \u003d false;\n       for (XAttr a : filteredAll) {\n         if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n             a.getName())) {\n           toGet.add(a);\n           foundIt \u003d true;\n           break;\n         }\n       }\n       if (!foundIt) {\n         throw new IOException(\n             \"At least one of the attributes provided was not found.\");\n       }\n     }\n     return toGet;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, FSPermissionChecker pc,\n      final String srcArg, List\u003cXAttr\u003e xAttrs) throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag(fsd);\n    final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n    boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n    if (!getAll) {\n      XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n    }\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n    if (fsd.isPermissionEnabled()) {\n      fsd.checkPathAccess(pc, iip, FsAction.READ);\n    }\n    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, iip);\n    List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n        filterXAttrsForApi(pc, all, isRawPath);\n\n    if (getAll) {\n      return filteredAll;\n    }\n    if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n      throw new IOException(\n          \"At least one of the attributes provided was not found.\");\n    }\n    List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n    for (XAttr xAttr : xAttrs) {\n      boolean foundIt \u003d false;\n      for (XAttr a : filteredAll) {\n        if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n            a.getName())) {\n          toGet.add(a);\n          foundIt \u003d true;\n          break;\n        }\n      }\n      if (!foundIt) {\n        throw new IOException(\n            \"At least one of the attributes provided was not found.\");\n      }\n    }\n    return toGet;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, srcArg-String(modifiers-final), xAttrs-List\u003cXAttr\u003e]",
            "newValue": "[fsd-FSDirectory, pc-FSPermissionChecker, srcArg-String(modifiers-final), xAttrs-List\u003cXAttr\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "15/02/18 9:11 AM",
          "commitNameOld": "da59acd8ca9ab5b49b988ffca64e8cce91c5f741",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 7.1,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,42 @@\n-  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n-                               List\u003cXAttr\u003e xAttrs)\n-      throws IOException {\n+  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, FSPermissionChecker pc,\n+      final String srcArg, List\u003cXAttr\u003e xAttrs) throws IOException {\n     String src \u003d srcArg;\n     checkXAttrsConfigFlag(fsd);\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n     boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n     if (!getAll) {\n       XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n     }\n     final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n     if (fsd.isPermissionEnabled()) {\n       fsd.checkPathAccess(pc, iip, FsAction.READ);\n     }\n     List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, iip);\n     List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n         filterXAttrsForApi(pc, all, isRawPath);\n \n     if (getAll) {\n       return filteredAll;\n     }\n     if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n       throw new IOException(\n           \"At least one of the attributes provided was not found.\");\n     }\n     List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n     for (XAttr xAttr : xAttrs) {\n       boolean foundIt \u003d false;\n       for (XAttr a : filteredAll) {\n         if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n             a.getName())) {\n           toGet.add(a);\n           foundIt \u003d true;\n           break;\n         }\n       }\n       if (!foundIt) {\n         throw new IOException(\n             \"At least one of the attributes provided was not found.\");\n       }\n     }\n     return toGet;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, FSPermissionChecker pc,\n      final String srcArg, List\u003cXAttr\u003e xAttrs) throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag(fsd);\n    final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n    boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n    if (!getAll) {\n      XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n    }\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n    if (fsd.isPermissionEnabled()) {\n      fsd.checkPathAccess(pc, iip, FsAction.READ);\n    }\n    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, iip);\n    List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n        filterXAttrsForApi(pc, all, isRawPath);\n\n    if (getAll) {\n      return filteredAll;\n    }\n    if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n      throw new IOException(\n          \"At least one of the attributes provided was not found.\");\n    }\n    List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n    for (XAttr xAttr : xAttrs) {\n      boolean foundIt \u003d false;\n      for (XAttr a : filteredAll) {\n        if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n            a.getName())) {\n          toGet.add(a);\n          foundIt \u003d true;\n          break;\n        }\n      }\n      if (!foundIt) {\n        throw new IOException(\n            \"At least one of the attributes provided was not found.\");\n      }\n    }\n    return toGet;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 1:11 PM",
      "commitNameOld": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                                List\u003cXAttr\u003e xAttrs)\n       throws IOException {\n     String src \u003d srcArg;\n     checkXAttrsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n     boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n     if (!getAll) {\n       XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n     }\n-    final INodesInPath iip \u003d fsd.resolvePath(pc, src);\n+    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n     if (fsd.isPermissionEnabled()) {\n       fsd.checkPathAccess(pc, iip, FsAction.READ);\n     }\n     List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, iip);\n     List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n         filterXAttrsForApi(pc, all, isRawPath);\n \n     if (getAll) {\n       return filteredAll;\n     }\n     if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n       throw new IOException(\n           \"At least one of the attributes provided was not found.\");\n     }\n     List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n     for (XAttr xAttr : xAttrs) {\n       boolean foundIt \u003d false;\n       for (XAttr a : filteredAll) {\n         if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n             a.getName())) {\n           toGet.add(a);\n           foundIt \u003d true;\n           break;\n         }\n       }\n       if (!foundIt) {\n         throw new IOException(\n             \"At least one of the attributes provided was not found.\");\n       }\n     }\n     return toGet;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                               List\u003cXAttr\u003e xAttrs)\n      throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n    boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n    if (!getAll) {\n      XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n    }\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n    if (fsd.isPermissionEnabled()) {\n      fsd.checkPathAccess(pc, iip, FsAction.READ);\n    }\n    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, iip);\n    List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n        filterXAttrsForApi(pc, all, isRawPath);\n\n    if (getAll) {\n      return filteredAll;\n    }\n    if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n      throw new IOException(\n          \"At least one of the attributes provided was not found.\");\n    }\n    List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n    for (XAttr xAttr : xAttrs) {\n      boolean foundIt \u003d false;\n      for (XAttr a : filteredAll) {\n        if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n            a.getName())) {\n          toGet.add(a);\n          foundIt \u003d true;\n          break;\n        }\n      }\n      if (!foundIt) {\n        throw new IOException(\n            \"At least one of the attributes provided was not found.\");\n      }\n    }\n    return toGet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 2:45 PM",
      "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                                List\u003cXAttr\u003e xAttrs)\n       throws IOException {\n     String src \u003d srcArg;\n     checkXAttrsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n     boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n     if (!getAll) {\n       XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n     }\n-    src \u003d fsd.resolvePath(pc, src);\n-    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n+    final INodesInPath iip \u003d fsd.resolvePath(pc, src);\n     if (fsd.isPermissionEnabled()) {\n       fsd.checkPathAccess(pc, iip, FsAction.READ);\n     }\n-    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, src);\n+    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, iip);\n     List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n         filterXAttrsForApi(pc, all, isRawPath);\n \n     if (getAll) {\n       return filteredAll;\n     }\n     if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n       throw new IOException(\n           \"At least one of the attributes provided was not found.\");\n     }\n     List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n     for (XAttr xAttr : xAttrs) {\n       boolean foundIt \u003d false;\n       for (XAttr a : filteredAll) {\n         if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n             a.getName())) {\n           toGet.add(a);\n           foundIt \u003d true;\n           break;\n         }\n       }\n       if (!foundIt) {\n         throw new IOException(\n             \"At least one of the attributes provided was not found.\");\n       }\n     }\n     return toGet;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                               List\u003cXAttr\u003e xAttrs)\n      throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n    boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n    if (!getAll) {\n      XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n    }\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src);\n    if (fsd.isPermissionEnabled()) {\n      fsd.checkPathAccess(pc, iip, FsAction.READ);\n    }\n    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, iip);\n    List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n        filterXAttrsForApi(pc, all, isRawPath);\n\n    if (getAll) {\n      return filteredAll;\n    }\n    if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n      throw new IOException(\n          \"At least one of the attributes provided was not found.\");\n    }\n    List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n    for (XAttr xAttr : xAttrs) {\n      boolean foundIt \u003d false;\n      for (XAttr a : filteredAll) {\n        if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n            a.getName())) {\n          toGet.add(a);\n          foundIt \u003d true;\n          break;\n        }\n      }\n      if (!foundIt) {\n        throw new IOException(\n            \"At least one of the attributes provided was not found.\");\n      }\n    }\n    return toGet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "04/08/16 7:07 AM",
      "commitNameOld": "6ae39199dac6ac7be6802b31452552c76da16e24",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 11.32,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n   static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                                List\u003cXAttr\u003e xAttrs)\n       throws IOException {\n     String src \u003d srcArg;\n     checkXAttrsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n     boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n     if (!getAll) {\n       XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n     }\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    src \u003d fsd.resolvePath(pc, src);\n     final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n     if (fsd.isPermissionEnabled()) {\n       fsd.checkPathAccess(pc, iip, FsAction.READ);\n     }\n     List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, src);\n     List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n         filterXAttrsForApi(pc, all, isRawPath);\n \n     if (getAll) {\n       return filteredAll;\n     }\n     if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n       throw new IOException(\n           \"At least one of the attributes provided was not found.\");\n     }\n     List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n     for (XAttr xAttr : xAttrs) {\n       boolean foundIt \u003d false;\n       for (XAttr a : filteredAll) {\n         if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n             a.getName())) {\n           toGet.add(a);\n           foundIt \u003d true;\n           break;\n         }\n       }\n       if (!foundIt) {\n         throw new IOException(\n             \"At least one of the attributes provided was not found.\");\n       }\n     }\n     return toGet;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                               List\u003cXAttr\u003e xAttrs)\n      throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n    boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n    if (!getAll) {\n      XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n    }\n    src \u003d fsd.resolvePath(pc, src);\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n    if (fsd.isPermissionEnabled()) {\n      fsd.checkPathAccess(pc, iip, FsAction.READ);\n    }\n    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, src);\n    List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n        filterXAttrsForApi(pc, all, isRawPath);\n\n    if (getAll) {\n      return filteredAll;\n    }\n    if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n      throw new IOException(\n          \"At least one of the attributes provided was not found.\");\n    }\n    List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n    for (XAttr xAttr : xAttrs) {\n      boolean foundIt \u003d false;\n      for (XAttr a : filteredAll) {\n        if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n            a.getName())) {\n          toGet.add(a);\n          foundIt \u003d true;\n          break;\n        }\n      }\n      if (!foundIt) {\n        throw new IOException(\n            \"At least one of the attributes provided was not found.\");\n      }\n    }\n    return toGet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "3df61f303a8c0f5105661dc86fc3a34a60c49066": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7997. The first non-existing xattr should also throw IOException. (zhouyingchao via yliu)\n",
      "commitDate": "31/03/15 6:17 AM",
      "commitName": "3df61f303a8c0f5105661dc86fc3a34a60c49066",
      "commitAuthor": "yliu",
      "commitDateOld": "18/12/14 11:25 AM",
      "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 102.74,
      "commitsBetweenForRepo": 814,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                                List\u003cXAttr\u003e xAttrs)\n       throws IOException {\n     String src \u003d srcArg;\n     checkXAttrsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n     boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n     if (!getAll) {\n       XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n     }\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     src \u003d fsd.resolvePath(pc, src, pathComponents);\n     final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n     if (fsd.isPermissionEnabled()) {\n       fsd.checkPathAccess(pc, iip, FsAction.READ);\n     }\n     List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, src);\n     List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n         filterXAttrsForApi(pc, all, isRawPath);\n \n     if (getAll) {\n       return filteredAll;\n     }\n     if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n-      return null;\n+      throw new IOException(\n+          \"At least one of the attributes provided was not found.\");\n     }\n     List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n     for (XAttr xAttr : xAttrs) {\n       boolean foundIt \u003d false;\n       for (XAttr a : filteredAll) {\n         if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n             a.getName())) {\n           toGet.add(a);\n           foundIt \u003d true;\n           break;\n         }\n       }\n       if (!foundIt) {\n         throw new IOException(\n             \"At least one of the attributes provided was not found.\");\n       }\n     }\n     return toGet;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                               List\u003cXAttr\u003e xAttrs)\n      throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n    boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n    if (!getAll) {\n      XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n    }\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n    if (fsd.isPermissionEnabled()) {\n      fsd.checkPathAccess(pc, iip, FsAction.READ);\n    }\n    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, src);\n    List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n        filterXAttrsForApi(pc, all, isRawPath);\n\n    if (getAll) {\n      return filteredAll;\n    }\n    if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n      throw new IOException(\n          \"At least one of the attributes provided was not found.\");\n    }\n    List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n    for (XAttr xAttr : xAttrs) {\n      boolean foundIt \u003d false;\n      for (XAttr a : filteredAll) {\n        if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n            a.getName())) {\n          toGet.add(a);\n          foundIt \u003d true;\n          break;\n        }\n      }\n      if (!foundIt) {\n        throw new IOException(\n            \"At least one of the attributes provided was not found.\");\n      }\n    }\n    return toGet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "08/12/14 11:52 AM",
      "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,45 @@\n+  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n+                               List\u003cXAttr\u003e xAttrs)\n+      throws IOException {\n+    String src \u003d srcArg;\n+    checkXAttrsConfigFlag(fsd);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n+    boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n+    if (!getAll) {\n+      XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n+    }\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n+    if (fsd.isPermissionEnabled()) {\n+      fsd.checkPathAccess(pc, iip, FsAction.READ);\n+    }\n+    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, src);\n+    List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n+        filterXAttrsForApi(pc, all, isRawPath);\n+\n+    if (getAll) {\n+      return filteredAll;\n+    }\n+    if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n+      return null;\n+    }\n+    List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n+    for (XAttr xAttr : xAttrs) {\n+      boolean foundIt \u003d false;\n+      for (XAttr a : filteredAll) {\n+        if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n+            a.getName())) {\n+          toGet.add(a);\n+          foundIt \u003d true;\n+          break;\n+        }\n+      }\n+      if (!foundIt) {\n+        throw new IOException(\n+            \"At least one of the attributes provided was not found.\");\n+      }\n+    }\n+    return toGet;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static List\u003cXAttr\u003e getXAttrs(FSDirectory fsd, final String srcArg,\n                               List\u003cXAttr\u003e xAttrs)\n      throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    final boolean isRawPath \u003d FSDirectory.isReservedRawName(src);\n    boolean getAll \u003d xAttrs \u003d\u003d null || xAttrs.isEmpty();\n    if (!getAll) {\n      XAttrPermissionFilter.checkPermissionForApi(pc, xAttrs, isRawPath);\n    }\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath(src, true);\n    if (fsd.isPermissionEnabled()) {\n      fsd.checkPathAccess(pc, iip, FsAction.READ);\n    }\n    List\u003cXAttr\u003e all \u003d FSDirXAttrOp.getXAttrs(fsd, src);\n    List\u003cXAttr\u003e filteredAll \u003d XAttrPermissionFilter.\n        filterXAttrsForApi(pc, all, isRawPath);\n\n    if (getAll) {\n      return filteredAll;\n    }\n    if (filteredAll \u003d\u003d null || filteredAll.isEmpty()) {\n      return null;\n    }\n    List\u003cXAttr\u003e toGet \u003d Lists.newArrayListWithCapacity(xAttrs.size());\n    for (XAttr xAttr : xAttrs) {\n      boolean foundIt \u003d false;\n      for (XAttr a : filteredAll) {\n        if (xAttr.getNameSpace() \u003d\u003d a.getNameSpace() \u0026\u0026 xAttr.getName().equals(\n            a.getName())) {\n          toGet.add(a);\n          foundIt \u003d true;\n          break;\n        }\n      }\n      if (!foundIt) {\n        throw new IOException(\n            \"At least one of the attributes provided was not found.\");\n      }\n    }\n    return toGet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java"
    }
  }
}