{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Pentomino.java",
  "functionName": "generateRows",
  "functionId": "generateRows___dancer-DancingLinks__piece-Piece__width-int__height-int__flip-boolean__row-boolean[]__upperLeft-boolean",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/dancing/Pentomino.java",
  "functionStartLine": 319,
  "functionEndLine": 353,
  "numCommitsSeen": 7,
  "timeTaken": 4299,
  "changeHistory": [
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void generateRows(DancingLinks dancer,\n                                   Piece piece,\n                                   int width,\n                                   int height,\n                                   boolean flip,\n                                   boolean[] row,\n                                   boolean upperLeft) {\n    // for each rotation\n    int[] rotations \u003d piece.getRotations();\n    for(int rotIndex \u003d 0; rotIndex \u003c rotations.length; ++rotIndex) {\n      // get the shape\n      boolean[][] shape \u003d piece.getShape(flip, rotations[rotIndex]);\n      // find all of the valid offsets\n      for(int x\u003d0; x \u003c width; ++x) {\n        for(int y\u003d0; y \u003c height; ++y) {\n          if (y + shape.length \u003c\u003d height \u0026\u0026 x + shape[0].length \u003c\u003d width \u0026\u0026\n              (!upperLeft || \n                  (isSide(x, shape[0].length, width) \u0026\u0026 \n                   isSide(y, shape.length, height)))) {\n            // clear the columns related to the points on the board\n            for(int idx\u003d0; idx \u003c width * height; ++idx) {\n              row[idx] \u003d false;\n            }\n            // mark the shape\n            for(int subY\u003d0; subY \u003c shape.length; ++subY) {\n              for(int subX\u003d0; subX \u003c shape[0].length; ++subX) {\n                row[(y + subY) * width + x + subX] \u003d shape[subY][subX];\n              }\n            }\n            dancer.addRow(row);\n          }         \n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/dancing/Pentomino.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/dancing/Pentomino.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/dancing/Pentomino.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void generateRows(DancingLinks dancer,\n                                   Piece piece,\n                                   int width,\n                                   int height,\n                                   boolean flip,\n                                   boolean[] row,\n                                   boolean upperLeft) {\n    // for each rotation\n    int[] rotations \u003d piece.getRotations();\n    for(int rotIndex \u003d 0; rotIndex \u003c rotations.length; ++rotIndex) {\n      // get the shape\n      boolean[][] shape \u003d piece.getShape(flip, rotations[rotIndex]);\n      // find all of the valid offsets\n      for(int x\u003d0; x \u003c width; ++x) {\n        for(int y\u003d0; y \u003c height; ++y) {\n          if (y + shape.length \u003c\u003d height \u0026\u0026 x + shape[0].length \u003c\u003d width \u0026\u0026\n              (!upperLeft || \n                  (isSide(x, shape[0].length, width) \u0026\u0026 \n                   isSide(y, shape.length, height)))) {\n            // clear the columns related to the points on the board\n            for(int idx\u003d0; idx \u003c width * height; ++idx) {\n              row[idx] \u003d false;\n            }\n            // mark the shape\n            for(int subY\u003d0; subY \u003c shape.length; ++subY) {\n              for(int subX\u003d0; subX \u003c shape[0].length; ++subX) {\n                row[(y + subY) * width + x + subX] \u003d shape[subY][subX];\n              }\n            }\n            dancer.addRow(row);\n          }         \n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/dancing/Pentomino.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/dancing/Pentomino.java",
        "newPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/dancing/Pentomino.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void generateRows(DancingLinks dancer,\n                                   Piece piece,\n                                   int width,\n                                   int height,\n                                   boolean flip,\n                                   boolean[] row,\n                                   boolean upperLeft) {\n    // for each rotation\n    int[] rotations \u003d piece.getRotations();\n    for(int rotIndex \u003d 0; rotIndex \u003c rotations.length; ++rotIndex) {\n      // get the shape\n      boolean[][] shape \u003d piece.getShape(flip, rotations[rotIndex]);\n      // find all of the valid offsets\n      for(int x\u003d0; x \u003c width; ++x) {\n        for(int y\u003d0; y \u003c height; ++y) {\n          if (y + shape.length \u003c\u003d height \u0026\u0026 x + shape[0].length \u003c\u003d width \u0026\u0026\n              (!upperLeft || \n                  (isSide(x, shape[0].length, width) \u0026\u0026 \n                   isSide(y, shape.length, height)))) {\n            // clear the columns related to the points on the board\n            for(int idx\u003d0; idx \u003c width * height; ++idx) {\n              row[idx] \u003d false;\n            }\n            // mark the shape\n            for(int subY\u003d0; subY \u003c shape.length; ++subY) {\n              for(int subX\u003d0; subX \u003c shape[0].length; ++subX) {\n                row[(y + subY) * width + x + subX] \u003d shape[subY][subX];\n              }\n            }\n            dancer.addRow(row);\n          }         \n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/dancing/Pentomino.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/examples/org/apache/hadoop/examples/dancing/Pentomino.java",
        "newPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/dancing/Pentomino.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,35 @@\n+  private static void generateRows(DancingLinks dancer,\n+                                   Piece piece,\n+                                   int width,\n+                                   int height,\n+                                   boolean flip,\n+                                   boolean[] row,\n+                                   boolean upperLeft) {\n+    // for each rotation\n+    int[] rotations \u003d piece.getRotations();\n+    for(int rotIndex \u003d 0; rotIndex \u003c rotations.length; ++rotIndex) {\n+      // get the shape\n+      boolean[][] shape \u003d piece.getShape(flip, rotations[rotIndex]);\n+      // find all of the valid offsets\n+      for(int x\u003d0; x \u003c width; ++x) {\n+        for(int y\u003d0; y \u003c height; ++y) {\n+          if (y + shape.length \u003c\u003d height \u0026\u0026 x + shape[0].length \u003c\u003d width \u0026\u0026\n+              (!upperLeft || \n+                  (isSide(x, shape[0].length, width) \u0026\u0026 \n+                   isSide(y, shape.length, height)))) {\n+            // clear the columns related to the points on the board\n+            for(int idx\u003d0; idx \u003c width * height; ++idx) {\n+              row[idx] \u003d false;\n+            }\n+            // mark the shape\n+            for(int subY\u003d0; subY \u003c shape.length; ++subY) {\n+              for(int subX\u003d0; subX \u003c shape[0].length; ++subX) {\n+                row[(y + subY) * width + x + subX] \u003d shape[subY][subX];\n+              }\n+            }\n+            dancer.addRow(row);\n+          }         \n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void generateRows(DancingLinks dancer,\n                                   Piece piece,\n                                   int width,\n                                   int height,\n                                   boolean flip,\n                                   boolean[] row,\n                                   boolean upperLeft) {\n    // for each rotation\n    int[] rotations \u003d piece.getRotations();\n    for(int rotIndex \u003d 0; rotIndex \u003c rotations.length; ++rotIndex) {\n      // get the shape\n      boolean[][] shape \u003d piece.getShape(flip, rotations[rotIndex]);\n      // find all of the valid offsets\n      for(int x\u003d0; x \u003c width; ++x) {\n        for(int y\u003d0; y \u003c height; ++y) {\n          if (y + shape.length \u003c\u003d height \u0026\u0026 x + shape[0].length \u003c\u003d width \u0026\u0026\n              (!upperLeft || \n                  (isSide(x, shape[0].length, width) \u0026\u0026 \n                   isSide(y, shape.length, height)))) {\n            // clear the columns related to the points on the board\n            for(int idx\u003d0; idx \u003c width * height; ++idx) {\n              row[idx] \u003d false;\n            }\n            // mark the shape\n            for(int subY\u003d0; subY \u003c shape.length; ++subY) {\n              for(int subX\u003d0; subX \u003c shape[0].length; ++subX) {\n                row[(y + subY) * width + x + subX] \u003d shape[subY][subX];\n              }\n            }\n            dancer.addRow(row);\n          }         \n        }\n      }\n    }\n  }",
      "path": "mapreduce/src/examples/org/apache/hadoop/examples/dancing/Pentomino.java"
    }
  }
}