{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCSQueue.java",
  "functionName": "setupMaximumAllocation",
  "functionId": "setupMaximumAllocation___csConf-CapacitySchedulerConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
  "functionStartLine": 466,
  "functionEndLine": 509,
  "numCommitsSeen": 76,
  "timeTaken": 3339,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "a4bd64e724cbe2ef639c984ddfe2da3baf170a96"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "a4bd64e724cbe2ef639c984ddfe2da3baf170a96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/01/20 7:54 PM",
      "commitNameOld": "e578e52aae01248507e089b406fe038ab8e84207",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 56.31,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   private void setupMaximumAllocation(CapacitySchedulerConfiguration csConf) {\n-    String queue \u003d getQueuePath();\n+    String myQueuePath \u003d getQueuePath();\n     Resource clusterMax \u003d ResourceUtils\n             .fetchMaximumAllocationFromConfig(csConf);\n-    Resource queueMax \u003d csConf.getQueueMaximumAllocation(queue);\n+    Resource queueMax \u003d csConf.getQueueMaximumAllocation(myQueuePath);\n \n     maximumAllocation \u003d Resources.clone(\n             parent \u003d\u003d null ? clusterMax : parent.getMaximumAllocation());\n \n     String errMsg \u003d\n             \"Queue maximum allocation cannot be larger than the cluster setting\"\n-            + \" for queue \" + queue\n+            + \" for queue \" + myQueuePath\n             + \" max allocation per queue: %s\"\n             + \" cluster setting: \" + clusterMax;\n \n     if (queueMax \u003d\u003d Resources.none()) {\n       // Handle backward compatibility\n-      long queueMemory \u003d csConf.getQueueMaximumAllocationMb(queue);\n-      int queueVcores \u003d csConf.getQueueMaximumAllocationVcores(queue);\n+      long queueMemory \u003d csConf.getQueueMaximumAllocationMb(myQueuePath);\n+      int queueVcores \u003d csConf.getQueueMaximumAllocationVcores(myQueuePath);\n       if (queueMemory !\u003d UNDEFINED) {\n         maximumAllocation.setMemorySize(queueMemory);\n       }\n \n       if (queueVcores !\u003d UNDEFINED) {\n         maximumAllocation.setVirtualCores(queueVcores);\n       }\n \n       if ((queueMemory !\u003d UNDEFINED \u0026\u0026 queueMemory \u003e clusterMax.getMemorySize()\n           || (queueVcores !\u003d UNDEFINED\n               \u0026\u0026 queueVcores \u003e clusterMax.getVirtualCores()))) {\n         throw new IllegalArgumentException(\n                 String.format(errMsg, maximumAllocation));\n       }\n     } else {\n       // Queue level maximum-allocation can\u0027t be larger than cluster setting\n       for (ResourceInformation ri : queueMax.getResources()) {\n         if (ri.compareTo(clusterMax.getResourceInformation(ri.getName())) \u003e 0) {\n           throw new IllegalArgumentException(String.format(errMsg, queueMax));\n         }\n \n         maximumAllocation.setResourceInformation(ri.getName(), ri);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupMaximumAllocation(CapacitySchedulerConfiguration csConf) {\n    String myQueuePath \u003d getQueuePath();\n    Resource clusterMax \u003d ResourceUtils\n            .fetchMaximumAllocationFromConfig(csConf);\n    Resource queueMax \u003d csConf.getQueueMaximumAllocation(myQueuePath);\n\n    maximumAllocation \u003d Resources.clone(\n            parent \u003d\u003d null ? clusterMax : parent.getMaximumAllocation());\n\n    String errMsg \u003d\n            \"Queue maximum allocation cannot be larger than the cluster setting\"\n            + \" for queue \" + myQueuePath\n            + \" max allocation per queue: %s\"\n            + \" cluster setting: \" + clusterMax;\n\n    if (queueMax \u003d\u003d Resources.none()) {\n      // Handle backward compatibility\n      long queueMemory \u003d csConf.getQueueMaximumAllocationMb(myQueuePath);\n      int queueVcores \u003d csConf.getQueueMaximumAllocationVcores(myQueuePath);\n      if (queueMemory !\u003d UNDEFINED) {\n        maximumAllocation.setMemorySize(queueMemory);\n      }\n\n      if (queueVcores !\u003d UNDEFINED) {\n        maximumAllocation.setVirtualCores(queueVcores);\n      }\n\n      if ((queueMemory !\u003d UNDEFINED \u0026\u0026 queueMemory \u003e clusterMax.getMemorySize()\n          || (queueVcores !\u003d UNDEFINED\n              \u0026\u0026 queueVcores \u003e clusterMax.getVirtualCores()))) {\n        throw new IllegalArgumentException(\n                String.format(errMsg, maximumAllocation));\n      }\n    } else {\n      // Queue level maximum-allocation can\u0027t be larger than cluster setting\n      for (ResourceInformation ri : queueMax.getResources()) {\n        if (ri.compareTo(clusterMax.getResourceInformation(ri.getName())) \u003e 0) {\n          throw new IllegalArgumentException(String.format(errMsg, queueMax));\n        }\n\n        maximumAllocation.setResourceInformation(ri.getName(), ri);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "a4bd64e724cbe2ef639c984ddfe2da3baf170a96": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9116. Capacity Scheduler: implements queue level maximum-allocation inheritance. Contributed by Aihua Xu.\n",
      "commitDate": "24/01/19 1:53 AM",
      "commitName": "a4bd64e724cbe2ef639c984ddfe2da3baf170a96",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,44 @@\n+  private void setupMaximumAllocation(CapacitySchedulerConfiguration csConf) {\n+    String queue \u003d getQueuePath();\n+    Resource clusterMax \u003d ResourceUtils\n+            .fetchMaximumAllocationFromConfig(csConf);\n+    Resource queueMax \u003d csConf.getQueueMaximumAllocation(queue);\n+\n+    maximumAllocation \u003d Resources.clone(\n+            parent \u003d\u003d null ? clusterMax : parent.getMaximumAllocation());\n+\n+    String errMsg \u003d\n+            \"Queue maximum allocation cannot be larger than the cluster setting\"\n+            + \" for queue \" + queue\n+            + \" max allocation per queue: %s\"\n+            + \" cluster setting: \" + clusterMax;\n+\n+    if (queueMax \u003d\u003d Resources.none()) {\n+      // Handle backward compatibility\n+      long queueMemory \u003d csConf.getQueueMaximumAllocationMb(queue);\n+      int queueVcores \u003d csConf.getQueueMaximumAllocationVcores(queue);\n+      if (queueMemory !\u003d UNDEFINED) {\n+        maximumAllocation.setMemorySize(queueMemory);\n+      }\n+\n+      if (queueVcores !\u003d UNDEFINED) {\n+        maximumAllocation.setVirtualCores(queueVcores);\n+      }\n+\n+      if ((queueMemory !\u003d UNDEFINED \u0026\u0026 queueMemory \u003e clusterMax.getMemorySize()\n+          || (queueVcores !\u003d UNDEFINED\n+              \u0026\u0026 queueVcores \u003e clusterMax.getVirtualCores()))) {\n+        throw new IllegalArgumentException(\n+                String.format(errMsg, maximumAllocation));\n+      }\n+    } else {\n+      // Queue level maximum-allocation can\u0027t be larger than cluster setting\n+      for (ResourceInformation ri : queueMax.getResources()) {\n+        if (ri.compareTo(clusterMax.getResourceInformation(ri.getName())) \u003e 0) {\n+          throw new IllegalArgumentException(String.format(errMsg, queueMax));\n+        }\n+\n+        maximumAllocation.setResourceInformation(ri.getName(), ri);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupMaximumAllocation(CapacitySchedulerConfiguration csConf) {\n    String queue \u003d getQueuePath();\n    Resource clusterMax \u003d ResourceUtils\n            .fetchMaximumAllocationFromConfig(csConf);\n    Resource queueMax \u003d csConf.getQueueMaximumAllocation(queue);\n\n    maximumAllocation \u003d Resources.clone(\n            parent \u003d\u003d null ? clusterMax : parent.getMaximumAllocation());\n\n    String errMsg \u003d\n            \"Queue maximum allocation cannot be larger than the cluster setting\"\n            + \" for queue \" + queue\n            + \" max allocation per queue: %s\"\n            + \" cluster setting: \" + clusterMax;\n\n    if (queueMax \u003d\u003d Resources.none()) {\n      // Handle backward compatibility\n      long queueMemory \u003d csConf.getQueueMaximumAllocationMb(queue);\n      int queueVcores \u003d csConf.getQueueMaximumAllocationVcores(queue);\n      if (queueMemory !\u003d UNDEFINED) {\n        maximumAllocation.setMemorySize(queueMemory);\n      }\n\n      if (queueVcores !\u003d UNDEFINED) {\n        maximumAllocation.setVirtualCores(queueVcores);\n      }\n\n      if ((queueMemory !\u003d UNDEFINED \u0026\u0026 queueMemory \u003e clusterMax.getMemorySize()\n          || (queueVcores !\u003d UNDEFINED\n              \u0026\u0026 queueVcores \u003e clusterMax.getVirtualCores()))) {\n        throw new IllegalArgumentException(\n                String.format(errMsg, maximumAllocation));\n      }\n    } else {\n      // Queue level maximum-allocation can\u0027t be larger than cluster setting\n      for (ResourceInformation ri : queueMax.getResources()) {\n        if (ri.compareTo(clusterMax.getResourceInformation(ri.getName())) \u003e 0) {\n          throw new IllegalArgumentException(String.format(errMsg, queueMax));\n        }\n\n        maximumAllocation.setResourceInformation(ri.getName(), ri);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java"
    }
  }
}