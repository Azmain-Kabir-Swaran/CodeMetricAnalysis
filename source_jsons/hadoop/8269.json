{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclTransformation.java",
  "functionName": "copyDefaultsIfNeeded",
  "functionId": "copyDefaultsIfNeeded___aclBuilder-List__AclEntry__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclTransformation.java",
  "functionStartLine": 409,
  "functionEndLine": 439,
  "numCommitsSeen": 8,
  "timeTaken": 1110,
  "changeHistory": [
    "5300294fbe9e235ce42253d6bcd69d8154d8f198",
    "023c11ec7eae9bb21598f3d3ad0cd5b07b2b737e",
    "c6585675710aa800317ad35e6fdf95c50c559d68"
  ],
  "changeHistoryShort": {
    "5300294fbe9e235ce42253d6bcd69d8154d8f198": "Ybodychange",
    "023c11ec7eae9bb21598f3d3ad0cd5b07b2b737e": "Ybodychange",
    "c6585675710aa800317ad35e6fdf95c50c559d68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5300294fbe9e235ce42253d6bcd69d8154d8f198": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5758. NameNode: complete implementation of inode modifications for ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559267 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/01/14 2:05 PM",
      "commitName": "5300294fbe9e235ce42253d6bcd69d8154d8f198",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/01/14 2:02 PM",
      "commitNameOld": "023c11ec7eae9bb21598f3d3ad0cd5b07b2b737e",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 9.0,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n   private static void copyDefaultsIfNeeded(List\u003cAclEntry\u003e aclBuilder) {\n     Collections.sort(aclBuilder, ACL_ENTRY_COMPARATOR);\n-    int pivot \u003d calculatePivotOnDefaultEntries(aclBuilder);\n-    if (pivot !\u003d PIVOT_NOT_FOUND) {\n-      List\u003cAclEntry\u003e accessEntries \u003d aclBuilder.subList(0, pivot);\n-      List\u003cAclEntry\u003e defaultEntries \u003d aclBuilder.subList(pivot,\n-        aclBuilder.size());\n+    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(aclBuilder);\n+    if (!scopedEntries.getDefaultEntries().isEmpty()) {\n+      List\u003cAclEntry\u003e accessEntries \u003d scopedEntries.getAccessEntries();\n+      List\u003cAclEntry\u003e defaultEntries \u003d scopedEntries.getDefaultEntries();\n       List\u003cAclEntry\u003e copiedEntries \u003d Lists.newArrayListWithCapacity(3);\n       for (AclEntryType type: EnumSet.of(USER, GROUP, OTHER)) {\n         AclEntry defaultEntryKey \u003d new AclEntry.Builder().setScope(DEFAULT)\n           .setType(type).build();\n         int defaultEntryIndex \u003d Collections.binarySearch(defaultEntries,\n           defaultEntryKey, ACL_ENTRY_COMPARATOR);\n         if (defaultEntryIndex \u003c 0) {\n           AclEntry accessEntryKey \u003d new AclEntry.Builder().setScope(ACCESS)\n             .setType(type).build();\n           int accessEntryIndex \u003d Collections.binarySearch(accessEntries,\n             accessEntryKey, ACL_ENTRY_COMPARATOR);\n           if (accessEntryIndex \u003e\u003d 0) {\n             copiedEntries.add(new AclEntry.Builder()\n               .setScope(DEFAULT)\n               .setType(type)\n               .setPermission(accessEntries.get(accessEntryIndex).getPermission())\n               .build());\n           }\n         }\n       }\n       // Add all copied entries when done to prevent potential issues with binary\n       // search on a modified aclBulider during the main loop.\n       aclBuilder.addAll(copiedEntries);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void copyDefaultsIfNeeded(List\u003cAclEntry\u003e aclBuilder) {\n    Collections.sort(aclBuilder, ACL_ENTRY_COMPARATOR);\n    ScopedAclEntries scopedEntries \u003d new ScopedAclEntries(aclBuilder);\n    if (!scopedEntries.getDefaultEntries().isEmpty()) {\n      List\u003cAclEntry\u003e accessEntries \u003d scopedEntries.getAccessEntries();\n      List\u003cAclEntry\u003e defaultEntries \u003d scopedEntries.getDefaultEntries();\n      List\u003cAclEntry\u003e copiedEntries \u003d Lists.newArrayListWithCapacity(3);\n      for (AclEntryType type: EnumSet.of(USER, GROUP, OTHER)) {\n        AclEntry defaultEntryKey \u003d new AclEntry.Builder().setScope(DEFAULT)\n          .setType(type).build();\n        int defaultEntryIndex \u003d Collections.binarySearch(defaultEntries,\n          defaultEntryKey, ACL_ENTRY_COMPARATOR);\n        if (defaultEntryIndex \u003c 0) {\n          AclEntry accessEntryKey \u003d new AclEntry.Builder().setScope(ACCESS)\n            .setType(type).build();\n          int accessEntryIndex \u003d Collections.binarySearch(accessEntries,\n            accessEntryKey, ACL_ENTRY_COMPARATOR);\n          if (accessEntryIndex \u003e\u003d 0) {\n            copiedEntries.add(new AclEntry.Builder()\n              .setScope(DEFAULT)\n              .setType(type)\n              .setPermission(accessEntries.get(accessEntryIndex).getPermission())\n              .build());\n          }\n        }\n      }\n      // Add all copied entries when done to prevent potential issues with binary\n      // search on a modified aclBulider during the main loop.\n      aclBuilder.addAll(copiedEntries);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclTransformation.java",
      "extendedDetails": {}
    },
    "023c11ec7eae9bb21598f3d3ad0cd5b07b2b737e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5737. Replacing only the default ACL can fail to copy unspecified base entries from the access ACL. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1556652 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/14 2:02 PM",
      "commitName": "023c11ec7eae9bb21598f3d3ad0cd5b07b2b737e",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "06/01/14 4:47 PM",
      "commitNameOld": "c6585675710aa800317ad35e6fdf95c50c559d68",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,32 @@\n   private static void copyDefaultsIfNeeded(List\u003cAclEntry\u003e aclBuilder) {\n-    int pivot \u003d -1;\n-    for (int i \u003d 0; i \u003c aclBuilder.size(); ++i) {\n-      if (aclBuilder.get(i).getScope() \u003d\u003d DEFAULT) {\n-        pivot \u003d i;\n-        break;\n-      }\n-    }\n-    if (pivot \u003e -1) {\n+    Collections.sort(aclBuilder, ACL_ENTRY_COMPARATOR);\n+    int pivot \u003d calculatePivotOnDefaultEntries(aclBuilder);\n+    if (pivot !\u003d PIVOT_NOT_FOUND) {\n       List\u003cAclEntry\u003e accessEntries \u003d aclBuilder.subList(0, pivot);\n       List\u003cAclEntry\u003e defaultEntries \u003d aclBuilder.subList(pivot,\n         aclBuilder.size());\n       List\u003cAclEntry\u003e copiedEntries \u003d Lists.newArrayListWithCapacity(3);\n       for (AclEntryType type: EnumSet.of(USER, GROUP, OTHER)) {\n         AclEntry defaultEntryKey \u003d new AclEntry.Builder().setScope(DEFAULT)\n           .setType(type).build();\n         int defaultEntryIndex \u003d Collections.binarySearch(defaultEntries,\n           defaultEntryKey, ACL_ENTRY_COMPARATOR);\n         if (defaultEntryIndex \u003c 0) {\n           AclEntry accessEntryKey \u003d new AclEntry.Builder().setScope(ACCESS)\n             .setType(type).build();\n           int accessEntryIndex \u003d Collections.binarySearch(accessEntries,\n             accessEntryKey, ACL_ENTRY_COMPARATOR);\n           if (accessEntryIndex \u003e\u003d 0) {\n             copiedEntries.add(new AclEntry.Builder()\n               .setScope(DEFAULT)\n               .setType(type)\n               .setPermission(accessEntries.get(accessEntryIndex).getPermission())\n               .build());\n           }\n         }\n       }\n       // Add all copied entries when done to prevent potential issues with binary\n       // search on a modified aclBulider during the main loop.\n       aclBuilder.addAll(copiedEntries);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void copyDefaultsIfNeeded(List\u003cAclEntry\u003e aclBuilder) {\n    Collections.sort(aclBuilder, ACL_ENTRY_COMPARATOR);\n    int pivot \u003d calculatePivotOnDefaultEntries(aclBuilder);\n    if (pivot !\u003d PIVOT_NOT_FOUND) {\n      List\u003cAclEntry\u003e accessEntries \u003d aclBuilder.subList(0, pivot);\n      List\u003cAclEntry\u003e defaultEntries \u003d aclBuilder.subList(pivot,\n        aclBuilder.size());\n      List\u003cAclEntry\u003e copiedEntries \u003d Lists.newArrayListWithCapacity(3);\n      for (AclEntryType type: EnumSet.of(USER, GROUP, OTHER)) {\n        AclEntry defaultEntryKey \u003d new AclEntry.Builder().setScope(DEFAULT)\n          .setType(type).build();\n        int defaultEntryIndex \u003d Collections.binarySearch(defaultEntries,\n          defaultEntryKey, ACL_ENTRY_COMPARATOR);\n        if (defaultEntryIndex \u003c 0) {\n          AclEntry accessEntryKey \u003d new AclEntry.Builder().setScope(ACCESS)\n            .setType(type).build();\n          int accessEntryIndex \u003d Collections.binarySearch(accessEntries,\n            accessEntryKey, ACL_ENTRY_COMPARATOR);\n          if (accessEntryIndex \u003e\u003d 0) {\n            copiedEntries.add(new AclEntry.Builder()\n              .setScope(DEFAULT)\n              .setType(type)\n              .setPermission(accessEntries.get(accessEntryIndex).getPermission())\n              .build());\n          }\n        }\n      }\n      // Add all copied entries when done to prevent potential issues with binary\n      // search on a modified aclBulider during the main loop.\n      aclBuilder.addAll(copiedEntries);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclTransformation.java",
      "extendedDetails": {}
    },
    "c6585675710aa800317ad35e6fdf95c50c559d68": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5673. Implement logic for modification of ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1556090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/14 4:47 PM",
      "commitName": "c6585675710aa800317ad35e6fdf95c50c559d68",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,37 @@\n+  private static void copyDefaultsIfNeeded(List\u003cAclEntry\u003e aclBuilder) {\n+    int pivot \u003d -1;\n+    for (int i \u003d 0; i \u003c aclBuilder.size(); ++i) {\n+      if (aclBuilder.get(i).getScope() \u003d\u003d DEFAULT) {\n+        pivot \u003d i;\n+        break;\n+      }\n+    }\n+    if (pivot \u003e -1) {\n+      List\u003cAclEntry\u003e accessEntries \u003d aclBuilder.subList(0, pivot);\n+      List\u003cAclEntry\u003e defaultEntries \u003d aclBuilder.subList(pivot,\n+        aclBuilder.size());\n+      List\u003cAclEntry\u003e copiedEntries \u003d Lists.newArrayListWithCapacity(3);\n+      for (AclEntryType type: EnumSet.of(USER, GROUP, OTHER)) {\n+        AclEntry defaultEntryKey \u003d new AclEntry.Builder().setScope(DEFAULT)\n+          .setType(type).build();\n+        int defaultEntryIndex \u003d Collections.binarySearch(defaultEntries,\n+          defaultEntryKey, ACL_ENTRY_COMPARATOR);\n+        if (defaultEntryIndex \u003c 0) {\n+          AclEntry accessEntryKey \u003d new AclEntry.Builder().setScope(ACCESS)\n+            .setType(type).build();\n+          int accessEntryIndex \u003d Collections.binarySearch(accessEntries,\n+            accessEntryKey, ACL_ENTRY_COMPARATOR);\n+          if (accessEntryIndex \u003e\u003d 0) {\n+            copiedEntries.add(new AclEntry.Builder()\n+              .setScope(DEFAULT)\n+              .setType(type)\n+              .setPermission(accessEntries.get(accessEntryIndex).getPermission())\n+              .build());\n+          }\n+        }\n+      }\n+      // Add all copied entries when done to prevent potential issues with binary\n+      // search on a modified aclBulider during the main loop.\n+      aclBuilder.addAll(copiedEntries);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void copyDefaultsIfNeeded(List\u003cAclEntry\u003e aclBuilder) {\n    int pivot \u003d -1;\n    for (int i \u003d 0; i \u003c aclBuilder.size(); ++i) {\n      if (aclBuilder.get(i).getScope() \u003d\u003d DEFAULT) {\n        pivot \u003d i;\n        break;\n      }\n    }\n    if (pivot \u003e -1) {\n      List\u003cAclEntry\u003e accessEntries \u003d aclBuilder.subList(0, pivot);\n      List\u003cAclEntry\u003e defaultEntries \u003d aclBuilder.subList(pivot,\n        aclBuilder.size());\n      List\u003cAclEntry\u003e copiedEntries \u003d Lists.newArrayListWithCapacity(3);\n      for (AclEntryType type: EnumSet.of(USER, GROUP, OTHER)) {\n        AclEntry defaultEntryKey \u003d new AclEntry.Builder().setScope(DEFAULT)\n          .setType(type).build();\n        int defaultEntryIndex \u003d Collections.binarySearch(defaultEntries,\n          defaultEntryKey, ACL_ENTRY_COMPARATOR);\n        if (defaultEntryIndex \u003c 0) {\n          AclEntry accessEntryKey \u003d new AclEntry.Builder().setScope(ACCESS)\n            .setType(type).build();\n          int accessEntryIndex \u003d Collections.binarySearch(accessEntries,\n            accessEntryKey, ACL_ENTRY_COMPARATOR);\n          if (accessEntryIndex \u003e\u003d 0) {\n            copiedEntries.add(new AclEntry.Builder()\n              .setScope(DEFAULT)\n              .setType(type)\n              .setPermission(accessEntries.get(accessEntryIndex).getPermission())\n              .build());\n          }\n        }\n      }\n      // Add all copied entries when done to prevent potential issues with binary\n      // search on a modified aclBulider during the main loop.\n      aclBuilder.addAll(copiedEntries);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclTransformation.java"
    }
  }
}