{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GuaranteedOrZeroCapacityOverTimePolicy.java",
  "functionName": "reinitialize",
  "functionId": "reinitialize___schedulerContext-CapacitySchedulerContext__parentQueue-ParentQueue(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
  "functionStartLine": 737,
  "functionEndLine": 764,
  "numCommitsSeen": 7,
  "timeTaken": 3267,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "821b0de4c59156d4a65112de03ba3e7e1c88e309",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "821b0de4c59156d4a65112de03ba3e7e1c88e309": "Ymultichange(Yexceptionschange,Ybodychange)",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/03/19 10:57 AM",
      "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 372.72,
      "commitsBetweenForRepo": 2179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void reinitialize(CapacitySchedulerContext schedulerContext,\n       final ParentQueue parentQueue) throws IOException {\n     if (!(parentQueue instanceof ManagedParentQueue)) {\n       throw new IllegalStateException(\n           \"Expected instance of type \" + ManagedParentQueue.class + \" found  \"\n               + \" : \" + parentQueue.getClass());\n     }\n \n     if (this.managedParentQueue !\u003d null \u0026\u0026 !parentQueue.getQueuePath().equals(\n         this.managedParentQueue.getQueuePath())) {\n       throw new IllegalStateException(\n           \"Expected parent queue path to match \" + this.managedParentQueue\n               .getQueuePath() + \" found : \" + parentQueue.getQueuePath());\n     }\n \n     this.managedParentQueue \u003d (ManagedParentQueue) parentQueue;\n \n     initializeLeafQueueTemplate(this.managedParentQueue);\n \n     //clear state\n     parentQueueState.clear();\n     leafQueueState.clear();\n \n     LOG.info(\n         \"Reinitialized queue management policy for parent queue \" + parentQueue\n-            .getQueueName() + \" with leaf queue template \" + \"capacities : [\"\n+            .getQueuePath() + \" with leaf queue template \" + \"capacities : [\"\n             + leafQueueTemplate.getQueueCapacities() + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CapacitySchedulerContext schedulerContext,\n      final ParentQueue parentQueue) throws IOException {\n    if (!(parentQueue instanceof ManagedParentQueue)) {\n      throw new IllegalStateException(\n          \"Expected instance of type \" + ManagedParentQueue.class + \" found  \"\n              + \" : \" + parentQueue.getClass());\n    }\n\n    if (this.managedParentQueue !\u003d null \u0026\u0026 !parentQueue.getQueuePath().equals(\n        this.managedParentQueue.getQueuePath())) {\n      throw new IllegalStateException(\n          \"Expected parent queue path to match \" + this.managedParentQueue\n              .getQueuePath() + \" found : \" + parentQueue.getQueuePath());\n    }\n\n    this.managedParentQueue \u003d (ManagedParentQueue) parentQueue;\n\n    initializeLeafQueueTemplate(this.managedParentQueue);\n\n    //clear state\n    parentQueueState.clear();\n    leafQueueState.clear();\n\n    LOG.info(\n        \"Reinitialized queue management policy for parent queue \" + parentQueue\n            .getQueuePath() + \" with leaf queue template \" + \"capacities : [\"\n            + leafQueueTemplate.getQueueCapacities() + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "821b0de4c59156d4a65112de03ba3e7e1c88e309": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7574. Add support for Node Labels on Auto Created Leaf Queue Template. Contributed by Suma Shivaprasad.\n",
      "commitDate": "09/04/18 8:47 AM",
      "commitName": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7574. Add support for Node Labels on Auto Created Leaf Queue Template. Contributed by Suma Shivaprasad.\n",
          "commitDate": "09/04/18 8:47 AM",
          "commitName": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
          "commitAuthor": "Sunil G",
          "commitDateOld": "08/12/17 3:10 PM",
          "commitNameOld": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 121.69,
          "commitsBetweenForRepo": 859,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n   public void reinitialize(CapacitySchedulerContext schedulerContext,\n-      final ParentQueue parentQueue) {\n+      final ParentQueue parentQueue) throws IOException {\n     if (!(parentQueue instanceof ManagedParentQueue)) {\n       throw new IllegalStateException(\n           \"Expected instance of type \" + ManagedParentQueue.class + \" found  \"\n               + \" : \" + parentQueue.getClass());\n     }\n \n     if (this.managedParentQueue !\u003d null \u0026\u0026 !parentQueue.getQueuePath().equals(\n         this.managedParentQueue.getQueuePath())) {\n       throw new IllegalStateException(\n           \"Expected parent queue path to match \" + this.managedParentQueue\n               .getQueuePath() + \" found : \" + parentQueue.getQueuePath());\n     }\n \n     this.managedParentQueue \u003d (ManagedParentQueue) parentQueue;\n \n     initializeLeafQueueTemplate(this.managedParentQueue);\n \n     //clear state\n     parentQueueState.clear();\n-    clearLeafQueueState();\n+    leafQueueState.clear();\n \n     LOG.info(\n-        \"Reinitialized queue management policy for parent queue \"\n-            + parentQueue.getQueueName() +\" with leaf queue template \"\n-            + \"capacities : [\"\n+        \"Reinitialized queue management policy for parent queue \" + parentQueue\n+            .getQueueName() + \" with leaf queue template \" + \"capacities : [\"\n             + leafQueueTemplate.getQueueCapacities() + \"]\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(CapacitySchedulerContext schedulerContext,\n      final ParentQueue parentQueue) throws IOException {\n    if (!(parentQueue instanceof ManagedParentQueue)) {\n      throw new IllegalStateException(\n          \"Expected instance of type \" + ManagedParentQueue.class + \" found  \"\n              + \" : \" + parentQueue.getClass());\n    }\n\n    if (this.managedParentQueue !\u003d null \u0026\u0026 !parentQueue.getQueuePath().equals(\n        this.managedParentQueue.getQueuePath())) {\n      throw new IllegalStateException(\n          \"Expected parent queue path to match \" + this.managedParentQueue\n              .getQueuePath() + \" found : \" + parentQueue.getQueuePath());\n    }\n\n    this.managedParentQueue \u003d (ManagedParentQueue) parentQueue;\n\n    initializeLeafQueueTemplate(this.managedParentQueue);\n\n    //clear state\n    parentQueueState.clear();\n    leafQueueState.clear();\n\n    LOG.info(\n        \"Reinitialized queue management policy for parent queue \" + parentQueue\n            .getQueueName() + \" with leaf queue template \" + \"capacities : [\"\n            + leafQueueTemplate.getQueueCapacities() + \"]\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7574. Add support for Node Labels on Auto Created Leaf Queue Template. Contributed by Suma Shivaprasad.\n",
          "commitDate": "09/04/18 8:47 AM",
          "commitName": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
          "commitAuthor": "Sunil G",
          "commitDateOld": "08/12/17 3:10 PM",
          "commitNameOld": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 121.69,
          "commitsBetweenForRepo": 859,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n   public void reinitialize(CapacitySchedulerContext schedulerContext,\n-      final ParentQueue parentQueue) {\n+      final ParentQueue parentQueue) throws IOException {\n     if (!(parentQueue instanceof ManagedParentQueue)) {\n       throw new IllegalStateException(\n           \"Expected instance of type \" + ManagedParentQueue.class + \" found  \"\n               + \" : \" + parentQueue.getClass());\n     }\n \n     if (this.managedParentQueue !\u003d null \u0026\u0026 !parentQueue.getQueuePath().equals(\n         this.managedParentQueue.getQueuePath())) {\n       throw new IllegalStateException(\n           \"Expected parent queue path to match \" + this.managedParentQueue\n               .getQueuePath() + \" found : \" + parentQueue.getQueuePath());\n     }\n \n     this.managedParentQueue \u003d (ManagedParentQueue) parentQueue;\n \n     initializeLeafQueueTemplate(this.managedParentQueue);\n \n     //clear state\n     parentQueueState.clear();\n-    clearLeafQueueState();\n+    leafQueueState.clear();\n \n     LOG.info(\n-        \"Reinitialized queue management policy for parent queue \"\n-            + parentQueue.getQueueName() +\" with leaf queue template \"\n-            + \"capacities : [\"\n+        \"Reinitialized queue management policy for parent queue \" + parentQueue\n+            .getQueueName() + \" with leaf queue template \" + \"capacities : [\"\n             + leafQueueTemplate.getQueueCapacities() + \"]\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(CapacitySchedulerContext schedulerContext,\n      final ParentQueue parentQueue) throws IOException {\n    if (!(parentQueue instanceof ManagedParentQueue)) {\n      throw new IllegalStateException(\n          \"Expected instance of type \" + ManagedParentQueue.class + \" found  \"\n              + \" : \" + parentQueue.getClass());\n    }\n\n    if (this.managedParentQueue !\u003d null \u0026\u0026 !parentQueue.getQueuePath().equals(\n        this.managedParentQueue.getQueuePath())) {\n      throw new IllegalStateException(\n          \"Expected parent queue path to match \" + this.managedParentQueue\n              .getQueuePath() + \" found : \" + parentQueue.getQueuePath());\n    }\n\n    this.managedParentQueue \u003d (ManagedParentQueue) parentQueue;\n\n    initializeLeafQueueTemplate(this.managedParentQueue);\n\n    //clear state\n    parentQueueState.clear();\n    leafQueueState.clear();\n\n    LOG.info(\n        \"Reinitialized queue management policy for parent queue \" + parentQueue\n            .getQueueName() + \" with leaf queue template \" + \"capacities : [\"\n            + leafQueueTemplate.getQueueCapacities() + \"]\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
      "commitDate": "08/12/17 3:10 PM",
      "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,29 @@\n+  public void reinitialize(CapacitySchedulerContext schedulerContext,\n+      final ParentQueue parentQueue) {\n+    if (!(parentQueue instanceof ManagedParentQueue)) {\n+      throw new IllegalStateException(\n+          \"Expected instance of type \" + ManagedParentQueue.class + \" found  \"\n+              + \" : \" + parentQueue.getClass());\n+    }\n+\n+    if (this.managedParentQueue !\u003d null \u0026\u0026 !parentQueue.getQueuePath().equals(\n+        this.managedParentQueue.getQueuePath())) {\n+      throw new IllegalStateException(\n+          \"Expected parent queue path to match \" + this.managedParentQueue\n+              .getQueuePath() + \" found : \" + parentQueue.getQueuePath());\n+    }\n+\n+    this.managedParentQueue \u003d (ManagedParentQueue) parentQueue;\n+\n+    initializeLeafQueueTemplate(this.managedParentQueue);\n+\n+    //clear state\n+    parentQueueState.clear();\n+    clearLeafQueueState();\n+\n+    LOG.info(\n+        \"Reinitialized queue management policy for parent queue \"\n+            + parentQueue.getQueueName() +\" with leaf queue template \"\n+            + \"capacities : [\"\n+            + leafQueueTemplate.getQueueCapacities() + \"]\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CapacitySchedulerContext schedulerContext,\n      final ParentQueue parentQueue) {\n    if (!(parentQueue instanceof ManagedParentQueue)) {\n      throw new IllegalStateException(\n          \"Expected instance of type \" + ManagedParentQueue.class + \" found  \"\n              + \" : \" + parentQueue.getClass());\n    }\n\n    if (this.managedParentQueue !\u003d null \u0026\u0026 !parentQueue.getQueuePath().equals(\n        this.managedParentQueue.getQueuePath())) {\n      throw new IllegalStateException(\n          \"Expected parent queue path to match \" + this.managedParentQueue\n              .getQueuePath() + \" found : \" + parentQueue.getQueuePath());\n    }\n\n    this.managedParentQueue \u003d (ManagedParentQueue) parentQueue;\n\n    initializeLeafQueueTemplate(this.managedParentQueue);\n\n    //clear state\n    parentQueueState.clear();\n    clearLeafQueueState();\n\n    LOG.info(\n        \"Reinitialized queue management policy for parent queue \"\n            + parentQueue.getQueueName() +\" with leaf queue template \"\n            + \"capacities : [\"\n            + leafQueueTemplate.getQueueCapacities() + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java"
    }
  }
}