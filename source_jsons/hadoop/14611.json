{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtil.java",
  "functionName": "createKeyProviderCryptoExtension",
  "functionId": "createKeyProviderCryptoExtension___conf-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
  "functionStartLine": 1720,
  "functionEndLine": 1729,
  "numCommitsSeen": 154,
  "timeTaken": 3063,
  "changeHistory": [
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
    "e2c9b288b223b9fd82dc12018936e13128413492",
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
    "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1"
  ],
  "changeHistoryShort": {
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc": "Ybodychange",
    "e2c9b288b223b9fd82dc12018936e13128413492": "Ybodychange",
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa": "Ybodychange",
    "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1": "Ybodychange"
  },
  "changeHistoryDetails": {
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12396. Webhdfs file system should get delegation token from kms provider. Contributed by Rushabh S Shah.\n",
      "commitDate": "04/12/17 10:40 AM",
      "commitName": "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "30/11/17 12:18 PM",
      "commitNameOld": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.93,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n       final Configuration conf) throws IOException {\n-    KeyProvider keyProvider \u003d DFSUtilClient.createKeyProvider(conf);\n+    KeyProvider keyProvider \u003d HdfsKMSUtil.createKeyProvider(conf);\n     if (keyProvider \u003d\u003d null) {\n       return null;\n     }\n     KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n         .createKeyProviderCryptoExtension(keyProvider);\n     return cryptoProvider;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n      final Configuration conf) throws IOException {\n    KeyProvider keyProvider \u003d HdfsKMSUtil.createKeyProvider(conf);\n    if (keyProvider \u003d\u003d null) {\n      return null;\n    }\n    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n        .createKeyProviderCryptoExtension(keyProvider);\n    return cryptoProvider;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "e2c9b288b223b9fd82dc12018936e13128413492": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "28/08/15 2:38 PM",
      "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/05/15 11:58 AM",
      "commitNameOld": "05e04f34f27149537fdb89f46af26bee14531ca4",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 99.11,
      "commitsBetweenForRepo": 609,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n       final Configuration conf) throws IOException {\n-    KeyProvider keyProvider \u003d createKeyProvider(conf);\n+    KeyProvider keyProvider \u003d DFSUtilClient.createKeyProvider(conf);\n     if (keyProvider \u003d\u003d null) {\n       return null;\n     }\n     KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n         .createKeyProviderCryptoExtension(keyProvider);\n     return cryptoProvider;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n      final Configuration conf) throws IOException {\n    KeyProvider keyProvider \u003d DFSUtilClient.createKeyProvider(conf);\n    if (keyProvider \u003d\u003d null) {\n      return null;\n    }\n    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n        .createKeyProviderCryptoExtension(keyProvider);\n    return cryptoProvider;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7179. DFSClient should instantiate a KeyProvider, not a KeyProviderCryptoExtension. (wang)\n",
      "commitDate": "02/10/14 1:50 PM",
      "commitName": "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "17/09/14 8:14 PM",
      "commitNameOld": "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 14.73,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,10 @@\n   public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n       final Configuration conf) throws IOException {\n-    final String providerUriStr \u003d\n-        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n-    // No provider set in conf\n-    if (providerUriStr \u003d\u003d null) {\n-      return null;\n-    }\n-    final URI providerUri;\n-    try {\n-      providerUri \u003d new URI(providerUriStr);\n-    } catch (URISyntaxException e) {\n-      throw new IOException(e);\n-    }\n-    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n+    KeyProvider keyProvider \u003d createKeyProvider(conf);\n     if (keyProvider \u003d\u003d null) {\n-      throw new IOException(\"Could not instantiate KeyProvider from \" + \n-          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n-          providerUriStr +\"\u0027\");\n-    }\n-    if (keyProvider.isTransient()) {\n-      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n-          + \" was found but it is a transient provider.\");\n+      return null;\n     }\n     KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n         .createKeyProviderCryptoExtension(keyProvider);\n     return cryptoProvider;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n      final Configuration conf) throws IOException {\n    KeyProvider keyProvider \u003d createKeyProvider(conf);\n    if (keyProvider \u003d\u003d null) {\n      return null;\n    }\n    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n        .createKeyProviderCryptoExtension(keyProvider);\n    return cryptoProvider;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7004. Update KeyProvider instantiation to create by URI. (wang)\n",
      "commitDate": "17/09/14 8:14 PM",
      "commitName": "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "05/09/14 10:40 AM",
      "commitNameOld": "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 12.4,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n       final Configuration conf) throws IOException {\n-    final List\u003cKeyProvider\u003e providers \u003d KeyProviderFactory.getProviders(conf);\n-    if (providers \u003d\u003d null || providers.size() \u003d\u003d 0) {\n+    final String providerUriStr \u003d\n+        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n+    // No provider set in conf\n+    if (providerUriStr \u003d\u003d null) {\n       return null;\n     }\n-    if (providers.size() \u003e 1) {\n-      StringBuilder builder \u003d new StringBuilder();\n-      builder.append(\"Found multiple KeyProviders but only one is permitted [\");\n-      String prefix \u003d \" \";\n-      for (KeyProvider kp: providers) {\n-        builder.append(prefix + kp.toString());\n-        prefix \u003d \", \";\n-      }\n-      builder.append(\"]\");\n-      throw new IOException(builder.toString());\n+    final URI providerUri;\n+    try {\n+      providerUri \u003d new URI(providerUriStr);\n+    } catch (URISyntaxException e) {\n+      throw new IOException(e);\n     }\n-    KeyProviderCryptoExtension provider \u003d KeyProviderCryptoExtension\n-        .createKeyProviderCryptoExtension(providers.get(0));\n-    if (provider.isTransient()) {\n-      throw new IOException(\"KeyProvider \" + provider.toString()\n+    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n+    if (keyProvider \u003d\u003d null) {\n+      throw new IOException(\"Could not instantiate KeyProvider from \" + \n+          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n+          providerUriStr +\"\u0027\");\n+    }\n+    if (keyProvider.isTransient()) {\n+      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n           + \" was found but it is a transient provider.\");\n     }\n-    return provider;\n+    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n+        .createKeyProviderCryptoExtension(keyProvider);\n+    return cryptoProvider;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n      final Configuration conf) throws IOException {\n    final String providerUriStr \u003d\n        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n    // No provider set in conf\n    if (providerUriStr \u003d\u003d null) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" + \n          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n          providerUriStr +\"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n        .createKeyProviderCryptoExtension(keyProvider);\n    return cryptoProvider;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    }
  }
}