{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedBlockReader.java",
  "functionName": "readFromBlock",
  "functionId": "readFromBlock___length-int(modifiers-final)__corruptedBlocks-CorruptedBlocks(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockReader.java",
  "functionStartLine": 165,
  "functionEndLine": 185,
  "numCommitsSeen": 90,
  "timeTaken": 6702,
  "changeHistory": [
    "08bb6c49a5aec32b7d9f29238560f947420405d6",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
    "8808779db351fe444388d4acb3094766b5980718",
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
    "6616de24cb14f1c2d0d6568fd4382062618834bd"
  ],
  "changeHistoryShort": {
    "08bb6c49a5aec32b7d9f29238560f947420405d6": "Ymultichange(Yreturntypechange,Ybodychange)",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "8808779db351fe444388d4acb3094766b5980718": "Ymultichange(Yparameterchange,Ybodychange)",
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987": "Ybodychange",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": "Ymultichange(Yparameterchange,Ybodychange)",
    "6616de24cb14f1c2d0d6568fd4382062618834bd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "08bb6c49a5aec32b7d9f29238560f947420405d6": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-13926. ThreadLocal aggregations for FileSystem.Statistics are incorrect with striped reads.\nContributed by Xiao Chen, Hrishikesh Gadre.\n\nSigned-off-by: Xiao Chen \u003cxiao@apache.org\u003e\n",
      "commitDate": "08/10/18 8:31 PM",
      "commitName": "08bb6c49a5aec32b7d9f29238560f947420405d6",
      "commitAuthor": "Hrishikesh Gadre",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-13926. ThreadLocal aggregations for FileSystem.Statistics are incorrect with striped reads.\nContributed by Xiao Chen, Hrishikesh Gadre.\n\nSigned-off-by: Xiao Chen \u003cxiao@apache.org\u003e\n",
          "commitDate": "08/10/18 8:31 PM",
          "commitName": "08bb6c49a5aec32b7d9f29238560f947420405d6",
          "commitAuthor": "Hrishikesh Gadre",
          "commitDateOld": "02/07/18 3:11 AM",
          "commitNameOld": "5d748bd056a32f2c6922514cd0c5b31d866a9919",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 98.72,
          "commitsBetweenForRepo": 804,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  Callable\u003cVoid\u003e readFromBlock(final int length,\n+  Callable\u003cBlockReadStats\u003e readFromBlock(final int length,\n                                final CorruptedBlocks corruptedBlocks) {\n-    return new Callable\u003cVoid\u003e() {\n+    return new Callable\u003cBlockReadStats\u003e() {\n \n       @Override\n-      public Void call() throws Exception {\n+      public BlockReadStats call() throws Exception {\n         try {\n           getReadBuffer().limit(length);\n-          actualReadFromBlock();\n-          return null;\n+          return actualReadFromBlock();\n         } catch (ChecksumException e) {\n           LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n               source, e.getPos());\n           corruptedBlocks.addCorruptedBlock(block, source);\n           throw e;\n         } catch (IOException e) {\n           LOG.info(e.getMessage());\n           throw e;\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Callable\u003cBlockReadStats\u003e readFromBlock(final int length,\n                               final CorruptedBlocks corruptedBlocks) {\n    return new Callable\u003cBlockReadStats\u003e() {\n\n      @Override\n      public BlockReadStats call() throws Exception {\n        try {\n          getReadBuffer().limit(length);\n          return actualReadFromBlock();\n        } catch (ChecksumException e) {\n          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n              source, e.getPos());\n          corruptedBlocks.addCorruptedBlock(block, source);\n          throw e;\n        } catch (IOException e) {\n          LOG.info(e.getMessage());\n          throw e;\n        }\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockReader.java",
          "extendedDetails": {
            "oldValue": "Callable\u003cVoid\u003e",
            "newValue": "Callable\u003cBlockReadStats\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13926. ThreadLocal aggregations for FileSystem.Statistics are incorrect with striped reads.\nContributed by Xiao Chen, Hrishikesh Gadre.\n\nSigned-off-by: Xiao Chen \u003cxiao@apache.org\u003e\n",
          "commitDate": "08/10/18 8:31 PM",
          "commitName": "08bb6c49a5aec32b7d9f29238560f947420405d6",
          "commitAuthor": "Hrishikesh Gadre",
          "commitDateOld": "02/07/18 3:11 AM",
          "commitNameOld": "5d748bd056a32f2c6922514cd0c5b31d866a9919",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 98.72,
          "commitsBetweenForRepo": 804,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  Callable\u003cVoid\u003e readFromBlock(final int length,\n+  Callable\u003cBlockReadStats\u003e readFromBlock(final int length,\n                                final CorruptedBlocks corruptedBlocks) {\n-    return new Callable\u003cVoid\u003e() {\n+    return new Callable\u003cBlockReadStats\u003e() {\n \n       @Override\n-      public Void call() throws Exception {\n+      public BlockReadStats call() throws Exception {\n         try {\n           getReadBuffer().limit(length);\n-          actualReadFromBlock();\n-          return null;\n+          return actualReadFromBlock();\n         } catch (ChecksumException e) {\n           LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n               source, e.getPos());\n           corruptedBlocks.addCorruptedBlock(block, source);\n           throw e;\n         } catch (IOException e) {\n           LOG.info(e.getMessage());\n           throw e;\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Callable\u003cBlockReadStats\u003e readFromBlock(final int length,\n                               final CorruptedBlocks corruptedBlocks) {\n    return new Callable\u003cBlockReadStats\u003e() {\n\n      @Override\n      public BlockReadStats call() throws Exception {\n        try {\n          getReadBuffer().limit(length);\n          return actualReadFromBlock();\n        } catch (ChecksumException e) {\n          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n              source, e.getPos());\n          corruptedBlocks.addCorruptedBlock(block, source);\n          throw e;\n        } catch (IOException e) {\n          LOG.info(e.getMessage());\n          throw e;\n        }\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
      "commitDate": "06/04/16 10:50 PM",
      "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,22 @@\n-    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n-        final ByteBuffer buf, final int length,\n-        final CorruptedBlocks corruptedBlocks) {\n-      return new Callable\u003cVoid\u003e() {\n+  Callable\u003cVoid\u003e readFromBlock(final int length,\n+                               final CorruptedBlocks corruptedBlocks) {\n+    return new Callable\u003cVoid\u003e() {\n \n-        @Override\n-        public Void call() throws Exception {\n-          try {\n-            buf.limit(length);\n-            actualReadFromBlock(reader.blockReader, buf);\n-            return null;\n-          } catch (ChecksumException e) {\n-            LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n-                reader.source, e.getPos());\n-            corruptedBlocks.addCorruptedBlock(reader.block, reader.source);\n-            throw e;\n-          } catch (IOException e) {\n-            LOG.info(e.getMessage());\n-            throw e;\n-          }\n+      @Override\n+      public Void call() throws Exception {\n+        try {\n+          getReadBuffer().limit(length);\n+          actualReadFromBlock();\n+          return null;\n+        } catch (ChecksumException e) {\n+          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n+              source, e.getPos());\n+          corruptedBlocks.addCorruptedBlock(block, source);\n+          throw e;\n+        } catch (IOException e) {\n+          LOG.info(e.getMessage());\n+          throw e;\n         }\n-\n-      };\n-    }\n\\ No newline at end of file\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  Callable\u003cVoid\u003e readFromBlock(final int length,\n                               final CorruptedBlocks corruptedBlocks) {\n    return new Callable\u003cVoid\u003e() {\n\n      @Override\n      public Void call() throws Exception {\n        try {\n          getReadBuffer().limit(length);\n          actualReadFromBlock();\n          return null;\n        } catch (ChecksumException e) {\n          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n              source, e.getPos());\n          corruptedBlocks.addCorruptedBlock(block, source);\n          throw e;\n        } catch (IOException e) {\n          LOG.info(e.getMessage());\n          throw e;\n        }\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockReader.java",
            "oldMethodName": "readFromBlock",
            "newMethodName": "readFromBlock"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,22 @@\n-    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n-        final ByteBuffer buf, final int length,\n-        final CorruptedBlocks corruptedBlocks) {\n-      return new Callable\u003cVoid\u003e() {\n+  Callable\u003cVoid\u003e readFromBlock(final int length,\n+                               final CorruptedBlocks corruptedBlocks) {\n+    return new Callable\u003cVoid\u003e() {\n \n-        @Override\n-        public Void call() throws Exception {\n-          try {\n-            buf.limit(length);\n-            actualReadFromBlock(reader.blockReader, buf);\n-            return null;\n-          } catch (ChecksumException e) {\n-            LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n-                reader.source, e.getPos());\n-            corruptedBlocks.addCorruptedBlock(reader.block, reader.source);\n-            throw e;\n-          } catch (IOException e) {\n-            LOG.info(e.getMessage());\n-            throw e;\n-          }\n+      @Override\n+      public Void call() throws Exception {\n+        try {\n+          getReadBuffer().limit(length);\n+          actualReadFromBlock();\n+          return null;\n+        } catch (ChecksumException e) {\n+          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n+              source, e.getPos());\n+          corruptedBlocks.addCorruptedBlock(block, source);\n+          throw e;\n+        } catch (IOException e) {\n+          LOG.info(e.getMessage());\n+          throw e;\n         }\n-\n-      };\n-    }\n\\ No newline at end of file\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  Callable\u003cVoid\u003e readFromBlock(final int length,\n                               final CorruptedBlocks corruptedBlocks) {\n    return new Callable\u003cVoid\u003e() {\n\n      @Override\n      public Void call() throws Exception {\n        try {\n          getReadBuffer().limit(length);\n          actualReadFromBlock();\n          return null;\n        } catch (ChecksumException e) {\n          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n              source, e.getPos());\n          corruptedBlocks.addCorruptedBlock(block, source);\n          throw e;\n        } catch (IOException e) {\n          LOG.info(e.getMessage());\n          throw e;\n        }\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockReader.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,22 @@\n-    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n-        final ByteBuffer buf, final int length,\n-        final CorruptedBlocks corruptedBlocks) {\n-      return new Callable\u003cVoid\u003e() {\n+  Callable\u003cVoid\u003e readFromBlock(final int length,\n+                               final CorruptedBlocks corruptedBlocks) {\n+    return new Callable\u003cVoid\u003e() {\n \n-        @Override\n-        public Void call() throws Exception {\n-          try {\n-            buf.limit(length);\n-            actualReadFromBlock(reader.blockReader, buf);\n-            return null;\n-          } catch (ChecksumException e) {\n-            LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n-                reader.source, e.getPos());\n-            corruptedBlocks.addCorruptedBlock(reader.block, reader.source);\n-            throw e;\n-          } catch (IOException e) {\n-            LOG.info(e.getMessage());\n-            throw e;\n-          }\n+      @Override\n+      public Void call() throws Exception {\n+        try {\n+          getReadBuffer().limit(length);\n+          actualReadFromBlock();\n+          return null;\n+        } catch (ChecksumException e) {\n+          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n+              source, e.getPos());\n+          corruptedBlocks.addCorruptedBlock(block, source);\n+          throw e;\n+        } catch (IOException e) {\n+          LOG.info(e.getMessage());\n+          throw e;\n         }\n-\n-      };\n-    }\n\\ No newline at end of file\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  Callable\u003cVoid\u003e readFromBlock(final int length,\n                               final CorruptedBlocks corruptedBlocks) {\n    return new Callable\u003cVoid\u003e() {\n\n      @Override\n      public Void call() throws Exception {\n        try {\n          getReadBuffer().limit(length);\n          actualReadFromBlock();\n          return null;\n        } catch (ChecksumException e) {\n          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n              source, e.getPos());\n          corruptedBlocks.addCorruptedBlock(block, source);\n          throw e;\n        } catch (IOException e) {\n          LOG.info(e.getMessage());\n          throw e;\n        }\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockReader.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,22 @@\n-    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n-        final ByteBuffer buf, final int length,\n-        final CorruptedBlocks corruptedBlocks) {\n-      return new Callable\u003cVoid\u003e() {\n+  Callable\u003cVoid\u003e readFromBlock(final int length,\n+                               final CorruptedBlocks corruptedBlocks) {\n+    return new Callable\u003cVoid\u003e() {\n \n-        @Override\n-        public Void call() throws Exception {\n-          try {\n-            buf.limit(length);\n-            actualReadFromBlock(reader.blockReader, buf);\n-            return null;\n-          } catch (ChecksumException e) {\n-            LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n-                reader.source, e.getPos());\n-            corruptedBlocks.addCorruptedBlock(reader.block, reader.source);\n-            throw e;\n-          } catch (IOException e) {\n-            LOG.info(e.getMessage());\n-            throw e;\n-          }\n+      @Override\n+      public Void call() throws Exception {\n+        try {\n+          getReadBuffer().limit(length);\n+          actualReadFromBlock();\n+          return null;\n+        } catch (ChecksumException e) {\n+          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n+              source, e.getPos());\n+          corruptedBlocks.addCorruptedBlock(block, source);\n+          throw e;\n+        } catch (IOException e) {\n+          LOG.info(e.getMessage());\n+          throw e;\n         }\n-\n-      };\n-    }\n\\ No newline at end of file\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  Callable\u003cVoid\u003e readFromBlock(final int length,\n                               final CorruptedBlocks corruptedBlocks) {\n    return new Callable\u003cVoid\u003e() {\n\n      @Override\n      public Void call() throws Exception {\n        try {\n          getReadBuffer().limit(length);\n          actualReadFromBlock();\n          return null;\n        } catch (ChecksumException e) {\n          LOG.warn(\"Found Checksum error for {} from {} at {}\", block,\n              source, e.getPos());\n          corruptedBlocks.addCorruptedBlock(block, source);\n          throw e;\n        } catch (IOException e) {\n          LOG.info(e.getMessage());\n          throw e;\n        }\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockReader.java",
          "extendedDetails": {
            "oldValue": "[reader-StripedReader(modifiers-final), buf-ByteBuffer(modifiers-final), length-int(modifiers-final), corruptedBlocks-CorruptedBlocks(modifiers-final)]",
            "newValue": "[length-int(modifiers-final), corruptedBlocks-CorruptedBlocks(modifiers-final)]"
          }
        }
      ]
    },
    "8808779db351fe444388d4acb3094766b5980718": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
      "commitDate": "25/02/16 9:55 AM",
      "commitName": "8808779db351fe444388d4acb3094766b5980718",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "19/02/16 7:02 PM",
          "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n     private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n         final ByteBuffer buf, final int length,\n-        final Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n+        final CorruptedBlocks corruptedBlocks) {\n       return new Callable\u003cVoid\u003e() {\n \n         @Override\n         public Void call() throws Exception {\n           try {\n             buf.limit(length);\n             actualReadFromBlock(reader.blockReader, buf);\n             return null;\n           } catch (ChecksumException e) {\n             LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n                 reader.source, e.getPos());\n-            addCorruptedBlock(reader.block, reader.source, corruptionMap);\n+            corruptedBlocks.addCorruptedBlock(reader.block, reader.source);\n             throw e;\n           } catch (IOException e) {\n             LOG.info(e.getMessage());\n             throw e;\n           }\n         }\n \n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n        final ByteBuffer buf, final int length,\n        final CorruptedBlocks corruptedBlocks) {\n      return new Callable\u003cVoid\u003e() {\n\n        @Override\n        public Void call() throws Exception {\n          try {\n            buf.limit(length);\n            actualReadFromBlock(reader.blockReader, buf);\n            return null;\n          } catch (ChecksumException e) {\n            LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n                reader.source, e.getPos());\n            corruptedBlocks.addCorruptedBlock(reader.block, reader.source);\n            throw e;\n          } catch (IOException e) {\n            LOG.info(e.getMessage());\n            throw e;\n          }\n        }\n\n      };\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "[reader-StripedReader(modifiers-final), buf-ByteBuffer(modifiers-final), length-int(modifiers-final), corruptionMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e(modifiers-final)]",
            "newValue": "[reader-StripedReader(modifiers-final), buf-ByteBuffer(modifiers-final), length-int(modifiers-final), corruptedBlocks-CorruptedBlocks(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "19/02/16 7:02 PM",
          "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n     private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n         final ByteBuffer buf, final int length,\n-        final Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n+        final CorruptedBlocks corruptedBlocks) {\n       return new Callable\u003cVoid\u003e() {\n \n         @Override\n         public Void call() throws Exception {\n           try {\n             buf.limit(length);\n             actualReadFromBlock(reader.blockReader, buf);\n             return null;\n           } catch (ChecksumException e) {\n             LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n                 reader.source, e.getPos());\n-            addCorruptedBlock(reader.block, reader.source, corruptionMap);\n+            corruptedBlocks.addCorruptedBlock(reader.block, reader.source);\n             throw e;\n           } catch (IOException e) {\n             LOG.info(e.getMessage());\n             throw e;\n           }\n         }\n \n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n        final ByteBuffer buf, final int length,\n        final CorruptedBlocks corruptedBlocks) {\n      return new Callable\u003cVoid\u003e() {\n\n        @Override\n        public Void call() throws Exception {\n          try {\n            buf.limit(length);\n            actualReadFromBlock(reader.blockReader, buf);\n            return null;\n          } catch (ChecksumException e) {\n            LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n                reader.source, e.getPos());\n            corruptedBlocks.addCorruptedBlock(reader.block, reader.source);\n            throw e;\n          } catch (IOException e) {\n            LOG.info(e.getMessage());\n            throw e;\n          }\n        }\n\n      };\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9829. Erasure Coding: Improve few exception handling logic of ErasureCodingWorker. Contributed by Rakesh R.\n",
      "commitDate": "19/02/16 10:40 AM",
      "commitName": "6546d9e7ff73d2c81a803f2c61a1376a8c426987",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/02/16 12:32 PM",
      "commitNameOld": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
      "commitAuthorOld": "zhezhang",
      "daysBetweenCommits": 16.92,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n         final ByteBuffer buf, final int length,\n         final Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n       return new Callable\u003cVoid\u003e() {\n \n         @Override\n         public Void call() throws Exception {\n           try {\n             buf.limit(length);\n             actualReadFromBlock(reader.blockReader, buf);\n             return null;\n           } catch (ChecksumException e) {\n-            LOG.warn(\"Found Checksum error for \" + reader.block + \" from \"\n-                + reader.source + \" at \" + e.getPos());\n+            LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n+                reader.source, e.getPos());\n             addCorruptedBlock(reader.block, reader.source, corruptionMap);\n             throw e;\n           } catch (IOException e) {\n             LOG.info(e.getMessage());\n             throw e;\n           }\n         }\n \n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n        final ByteBuffer buf, final int length,\n        final Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n      return new Callable\u003cVoid\u003e() {\n\n        @Override\n        public Void call() throws Exception {\n          try {\n            buf.limit(length);\n            actualReadFromBlock(reader.blockReader, buf);\n            return null;\n          } catch (ChecksumException e) {\n            LOG.warn(\"Found Checksum error for {} from {} at {}\", reader.block,\n                reader.source, e.getPos());\n            addCorruptedBlock(reader.block, reader.source, corruptionMap);\n            throw e;\n          } catch (IOException e) {\n            LOG.info(e.getMessage());\n            throw e;\n          }\n        }\n\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
      "commitDate": "22/01/16 9:46 AM",
      "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
          "commitDate": "22/01/16 9:46 AM",
          "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/12/15 10:47 PM",
          "commitNameOld": "70d6f201260086a3f12beaa317fede2a99639fef",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 31.46,
          "commitsBetweenForRepo": 179,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,24 @@\n-    private Callable\u003cVoid\u003e readFromBlock(final BlockReader reader,\n-        final ByteBuffer buf) {\n+    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n+        final ByteBuffer buf, final int length,\n+        final Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n       return new Callable\u003cVoid\u003e() {\n \n         @Override\n         public Void call() throws Exception {\n           try {\n-            actualReadFromBlock(reader, buf);\n+            buf.limit(length);\n+            actualReadFromBlock(reader.blockReader, buf);\n             return null;\n+          } catch (ChecksumException e) {\n+            LOG.warn(\"Found Checksum error for \" + reader.block + \" from \"\n+                + reader.source + \" at \" + e.getPos());\n+            addCorruptedBlock(reader.block, reader.source, corruptionMap);\n+            throw e;\n           } catch (IOException e) {\n             LOG.info(e.getMessage());\n             throw e;\n           }\n         }\n \n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n        final ByteBuffer buf, final int length,\n        final Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n      return new Callable\u003cVoid\u003e() {\n\n        @Override\n        public Void call() throws Exception {\n          try {\n            buf.limit(length);\n            actualReadFromBlock(reader.blockReader, buf);\n            return null;\n          } catch (ChecksumException e) {\n            LOG.warn(\"Found Checksum error for \" + reader.block + \" from \"\n                + reader.source + \" at \" + e.getPos());\n            addCorruptedBlock(reader.block, reader.source, corruptionMap);\n            throw e;\n          } catch (IOException e) {\n            LOG.info(e.getMessage());\n            throw e;\n          }\n        }\n\n      };\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "[reader-BlockReader(modifiers-final), buf-ByteBuffer(modifiers-final)]",
            "newValue": "[reader-StripedReader(modifiers-final), buf-ByteBuffer(modifiers-final), length-int(modifiers-final), corruptionMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
          "commitDate": "22/01/16 9:46 AM",
          "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/12/15 10:47 PM",
          "commitNameOld": "70d6f201260086a3f12beaa317fede2a99639fef",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 31.46,
          "commitsBetweenForRepo": 179,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,24 @@\n-    private Callable\u003cVoid\u003e readFromBlock(final BlockReader reader,\n-        final ByteBuffer buf) {\n+    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n+        final ByteBuffer buf, final int length,\n+        final Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n       return new Callable\u003cVoid\u003e() {\n \n         @Override\n         public Void call() throws Exception {\n           try {\n-            actualReadFromBlock(reader, buf);\n+            buf.limit(length);\n+            actualReadFromBlock(reader.blockReader, buf);\n             return null;\n+          } catch (ChecksumException e) {\n+            LOG.warn(\"Found Checksum error for \" + reader.block + \" from \"\n+                + reader.source + \" at \" + e.getPos());\n+            addCorruptedBlock(reader.block, reader.source, corruptionMap);\n+            throw e;\n           } catch (IOException e) {\n             LOG.info(e.getMessage());\n             throw e;\n           }\n         }\n \n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Callable\u003cVoid\u003e readFromBlock(final StripedReader reader,\n        final ByteBuffer buf, final int length,\n        final Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n      return new Callable\u003cVoid\u003e() {\n\n        @Override\n        public Void call() throws Exception {\n          try {\n            buf.limit(length);\n            actualReadFromBlock(reader.blockReader, buf);\n            return null;\n          } catch (ChecksumException e) {\n            LOG.warn(\"Found Checksum error for \" + reader.block + \" from \"\n                + reader.source + \" at \" + e.getPos());\n            addCorruptedBlock(reader.block, reader.source, corruptionMap);\n            throw e;\n          } catch (IOException e) {\n            LOG.info(e.getMessage());\n            throw e;\n          }\n        }\n\n      };\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "6616de24cb14f1c2d0d6568fd4382062618834bd": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7348. Erasure Coding: DataNode reconstruct striped blocks. Contributed by Yi Liu.\n",
      "commitDate": "26/05/15 12:01 PM",
      "commitName": "6616de24cb14f1c2d0d6568fd4382062618834bd",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,17 @@\n+    private Callable\u003cVoid\u003e readFromBlock(final BlockReader reader,\n+        final ByteBuffer buf) {\n+      return new Callable\u003cVoid\u003e() {\n+\n+        @Override\n+        public Void call() throws Exception {\n+          try {\n+            actualReadFromBlock(reader, buf);\n+            return null;\n+          } catch (IOException e) {\n+            LOG.info(e.getMessage());\n+            throw e;\n+          }\n+        }\n+\n+      };\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private Callable\u003cVoid\u003e readFromBlock(final BlockReader reader,\n        final ByteBuffer buf) {\n      return new Callable\u003cVoid\u003e() {\n\n        @Override\n        public Void call() throws Exception {\n          try {\n            actualReadFromBlock(reader, buf);\n            return null;\n          } catch (IOException e) {\n            LOG.info(e.getMessage());\n            throw e;\n          }\n        }\n\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java"
    }
  }
}