{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcfsBasedProcessTree.java",
  "functionName": "getCmdLine",
  "functionId": "getCmdLine___procfsDir-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
  "functionStartLine": 704,
  "functionEndLine": 753,
  "numCommitsSeen": 34,
  "timeTaken": 8239,
  "changeHistory": [
    "626b5103d44692adf3882af61bdafa40114c44f7",
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "626b5103d44692adf3882af61bdafa40114c44f7": "Ybodychange",
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "626b5103d44692adf3882af61bdafa40114c44f7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7688. Miscellaneous Improvements To ProcfsBasedProcessTree. Contributed by BELUGA BEHR.\n",
      "commitDate": "02/01/18 5:39 PM",
      "commitName": "626b5103d44692adf3882af61bdafa40114c44f7",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "01/05/17 4:01 AM",
      "commitNameOld": "4b5bd73ac53f7de4899b5b70078249ad20216048",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 246.61,
      "commitsBetweenForRepo": 1710,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     public String getCmdLine(String procfsDir) {\n       String ret \u003d \"N/A\";\n       if (pid \u003d\u003d null) {\n         return ret;\n       }\n       BufferedReader in \u003d null;\n       InputStreamReader fReader \u003d null;\n       try {\n         fReader \u003d new InputStreamReader(\n             new FileInputStream(\n                 new File(new File(procfsDir, pid.toString()), PROCFS_CMDLINE_FILE)),\n                 Charset.forName(\"UTF-8\"));\n       } catch (FileNotFoundException f) {\n         // The process vanished in the interim!\n         return ret;\n       }\n \n       in \u003d new BufferedReader(fReader);\n \n       try {\n         ret \u003d in.readLine(); // only one line\n         if (ret \u003d\u003d null) {\n           ret \u003d \"N/A\";\n         } else {\n           ret \u003d ret.replace(\u0027\\0\u0027, \u0027 \u0027); // Replace each null char with a space\n-          if (ret.equals(\"\")) {\n+          if (ret.isEmpty()) {\n             // The cmdline might be empty because the process is swapped out or\n             // is a zombie.\n             ret \u003d \"N/A\";\n           }\n         }\n       } catch (IOException io) {\n-        LOG.warn(\"Error reading the stream \" + io);\n+        LOG.warn(\"Error reading the stream\", io);\n         ret \u003d \"N/A\";\n       } finally {\n         // Close the streams\n         try {\n           fReader.close();\n           try {\n             in.close();\n           } catch (IOException i) {\n-            LOG.warn(\"Error closing the stream \" + in);\n+            LOG.warn(\"Error closing the stream\", i);\n           }\n         } catch (IOException i) {\n-          LOG.warn(\"Error closing the stream \" + fReader);\n+          LOG.warn(\"Error closing the stream\", i);\n         }\n       }\n \n       return ret;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String getCmdLine(String procfsDir) {\n      String ret \u003d \"N/A\";\n      if (pid \u003d\u003d null) {\n        return ret;\n      }\n      BufferedReader in \u003d null;\n      InputStreamReader fReader \u003d null;\n      try {\n        fReader \u003d new InputStreamReader(\n            new FileInputStream(\n                new File(new File(procfsDir, pid.toString()), PROCFS_CMDLINE_FILE)),\n                Charset.forName(\"UTF-8\"));\n      } catch (FileNotFoundException f) {\n        // The process vanished in the interim!\n        return ret;\n      }\n\n      in \u003d new BufferedReader(fReader);\n\n      try {\n        ret \u003d in.readLine(); // only one line\n        if (ret \u003d\u003d null) {\n          ret \u003d \"N/A\";\n        } else {\n          ret \u003d ret.replace(\u0027\\0\u0027, \u0027 \u0027); // Replace each null char with a space\n          if (ret.isEmpty()) {\n            // The cmdline might be empty because the process is swapped out or\n            // is a zombie.\n            ret \u003d \"N/A\";\n          }\n        }\n      } catch (IOException io) {\n        LOG.warn(\"Error reading the stream\", io);\n        ret \u003d \"N/A\";\n      } finally {\n        // Close the streams\n        try {\n          fReader.close();\n          try {\n            in.close();\n          } catch (IOException i) {\n            LOG.warn(\"Error closing the stream\", i);\n          }\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream\", i);\n        }\n      }\n\n      return ret;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2939. Fix new findbugs warnings in hadoop-yarn-common. (Li Lu via junping_du)\n",
      "commitDate": "22/12/14 3:06 AM",
      "commitName": "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
      "commitAuthor": "Junping Du",
      "commitDateOld": "17/04/14 11:05 AM",
      "commitNameOld": "36ed8c74eaa13c0cbff94f852bb5c1dd94d864ed",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 248.71,
      "commitsBetweenForRepo": 2030,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n     public String getCmdLine(String procfsDir) {\n       String ret \u003d \"N/A\";\n       if (pid \u003d\u003d null) {\n         return ret;\n       }\n       BufferedReader in \u003d null;\n-      FileReader fReader \u003d null;\n+      InputStreamReader fReader \u003d null;\n       try {\n-        fReader \u003d\n-            new FileReader(new File(new File(procfsDir, pid.toString()),\n-                PROCFS_CMDLINE_FILE));\n+        fReader \u003d new InputStreamReader(\n+            new FileInputStream(\n+                new File(new File(procfsDir, pid.toString()), PROCFS_CMDLINE_FILE)),\n+                Charset.forName(\"UTF-8\"));\n       } catch (FileNotFoundException f) {\n         // The process vanished in the interim!\n         return ret;\n       }\n \n       in \u003d new BufferedReader(fReader);\n \n       try {\n         ret \u003d in.readLine(); // only one line\n         if (ret \u003d\u003d null) {\n           ret \u003d \"N/A\";\n         } else {\n           ret \u003d ret.replace(\u0027\\0\u0027, \u0027 \u0027); // Replace each null char with a space\n           if (ret.equals(\"\")) {\n             // The cmdline might be empty because the process is swapped out or\n             // is a zombie.\n             ret \u003d \"N/A\";\n           }\n         }\n       } catch (IOException io) {\n         LOG.warn(\"Error reading the stream \" + io);\n         ret \u003d \"N/A\";\n       } finally {\n         // Close the streams\n         try {\n           fReader.close();\n           try {\n             in.close();\n           } catch (IOException i) {\n             LOG.warn(\"Error closing the stream \" + in);\n           }\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + fReader);\n         }\n       }\n \n       return ret;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String getCmdLine(String procfsDir) {\n      String ret \u003d \"N/A\";\n      if (pid \u003d\u003d null) {\n        return ret;\n      }\n      BufferedReader in \u003d null;\n      InputStreamReader fReader \u003d null;\n      try {\n        fReader \u003d new InputStreamReader(\n            new FileInputStream(\n                new File(new File(procfsDir, pid.toString()), PROCFS_CMDLINE_FILE)),\n                Charset.forName(\"UTF-8\"));\n      } catch (FileNotFoundException f) {\n        // The process vanished in the interim!\n        return ret;\n      }\n\n      in \u003d new BufferedReader(fReader);\n\n      try {\n        ret \u003d in.readLine(); // only one line\n        if (ret \u003d\u003d null) {\n          ret \u003d \"N/A\";\n        } else {\n          ret \u003d ret.replace(\u0027\\0\u0027, \u0027 \u0027); // Replace each null char with a space\n          if (ret.equals(\"\")) {\n            // The cmdline might be empty because the process is swapped out or\n            // is a zombie.\n            ret \u003d \"N/A\";\n          }\n        }\n      } catch (IOException io) {\n        LOG.warn(\"Error reading the stream \" + io);\n        ret \u003d \"N/A\";\n      } finally {\n        // Close the streams\n        try {\n          fReader.close();\n          try {\n            in.close();\n          } catch (IOException i) {\n            LOG.warn(\"Error closing the stream \" + in);\n          }\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + fReader);\n        }\n      }\n\n      return ret;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public String getCmdLine(String procfsDir) {\n      String ret \u003d \"N/A\";\n      if (pid \u003d\u003d null) {\n        return ret;\n      }\n      BufferedReader in \u003d null;\n      FileReader fReader \u003d null;\n      try {\n        fReader \u003d\n            new FileReader(new File(new File(procfsDir, pid.toString()),\n                PROCFS_CMDLINE_FILE));\n      } catch (FileNotFoundException f) {\n        // The process vanished in the interim!\n        return ret;\n      }\n\n      in \u003d new BufferedReader(fReader);\n\n      try {\n        ret \u003d in.readLine(); // only one line\n        if (ret \u003d\u003d null) {\n          ret \u003d \"N/A\";\n        } else {\n          ret \u003d ret.replace(\u0027\\0\u0027, \u0027 \u0027); // Replace each null char with a space\n          if (ret.equals(\"\")) {\n            // The cmdline might be empty because the process is swapped out or\n            // is a zombie.\n            ret \u003d \"N/A\";\n          }\n        }\n      } catch (IOException io) {\n        LOG.warn(\"Error reading the stream \" + io);\n        ret \u003d \"N/A\";\n      } finally {\n        // Close the streams\n        try {\n          fReader.close();\n          try {\n            in.close();\n          } catch (IOException i) {\n            LOG.warn(\"Error closing the stream \" + in);\n          }\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + fReader);\n        }\n      }\n\n      return ret;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public String getCmdLine(String procfsDir) {\n      String ret \u003d \"N/A\";\n      if (pid \u003d\u003d null) {\n        return ret;\n      }\n      BufferedReader in \u003d null;\n      FileReader fReader \u003d null;\n      try {\n        fReader \u003d\n            new FileReader(new File(new File(procfsDir, pid.toString()),\n                PROCFS_CMDLINE_FILE));\n      } catch (FileNotFoundException f) {\n        // The process vanished in the interim!\n        return ret;\n      }\n\n      in \u003d new BufferedReader(fReader);\n\n      try {\n        ret \u003d in.readLine(); // only one line\n        if (ret \u003d\u003d null) {\n          ret \u003d \"N/A\";\n        } else {\n          ret \u003d ret.replace(\u0027\\0\u0027, \u0027 \u0027); // Replace each null char with a space\n          if (ret.equals(\"\")) {\n            // The cmdline might be empty because the process is swapped out or\n            // is a zombie.\n            ret \u003d \"N/A\";\n          }\n        }\n      } catch (IOException io) {\n        LOG.warn(\"Error reading the stream \" + io);\n        ret \u003d \"N/A\";\n      } finally {\n        // Close the streams\n        try {\n          fReader.close();\n          try {\n            in.close();\n          } catch (IOException i) {\n            LOG.warn(\"Error closing the stream \" + in);\n          }\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + fReader);\n        }\n      }\n\n      return ret;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,49 @@\n+    public String getCmdLine(String procfsDir) {\n+      String ret \u003d \"N/A\";\n+      if (pid \u003d\u003d null) {\n+        return ret;\n+      }\n+      BufferedReader in \u003d null;\n+      FileReader fReader \u003d null;\n+      try {\n+        fReader \u003d\n+            new FileReader(new File(new File(procfsDir, pid.toString()),\n+                PROCFS_CMDLINE_FILE));\n+      } catch (FileNotFoundException f) {\n+        // The process vanished in the interim!\n+        return ret;\n+      }\n+\n+      in \u003d new BufferedReader(fReader);\n+\n+      try {\n+        ret \u003d in.readLine(); // only one line\n+        if (ret \u003d\u003d null) {\n+          ret \u003d \"N/A\";\n+        } else {\n+          ret \u003d ret.replace(\u0027\\0\u0027, \u0027 \u0027); // Replace each null char with a space\n+          if (ret.equals(\"\")) {\n+            // The cmdline might be empty because the process is swapped out or\n+            // is a zombie.\n+            ret \u003d \"N/A\";\n+          }\n+        }\n+      } catch (IOException io) {\n+        LOG.warn(\"Error reading the stream \" + io);\n+        ret \u003d \"N/A\";\n+      } finally {\n+        // Close the streams\n+        try {\n+          fReader.close();\n+          try {\n+            in.close();\n+          } catch (IOException i) {\n+            LOG.warn(\"Error closing the stream \" + in);\n+          }\n+        } catch (IOException i) {\n+          LOG.warn(\"Error closing the stream \" + fReader);\n+        }\n+      }\n+\n+      return ret;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public String getCmdLine(String procfsDir) {\n      String ret \u003d \"N/A\";\n      if (pid \u003d\u003d null) {\n        return ret;\n      }\n      BufferedReader in \u003d null;\n      FileReader fReader \u003d null;\n      try {\n        fReader \u003d\n            new FileReader(new File(new File(procfsDir, pid.toString()),\n                PROCFS_CMDLINE_FILE));\n      } catch (FileNotFoundException f) {\n        // The process vanished in the interim!\n        return ret;\n      }\n\n      in \u003d new BufferedReader(fReader);\n\n      try {\n        ret \u003d in.readLine(); // only one line\n        if (ret \u003d\u003d null) {\n          ret \u003d \"N/A\";\n        } else {\n          ret \u003d ret.replace(\u0027\\0\u0027, \u0027 \u0027); // Replace each null char with a space\n          if (ret.equals(\"\")) {\n            // The cmdline might be empty because the process is swapped out or\n            // is a zombie.\n            ret \u003d \"N/A\";\n          }\n        }\n      } catch (IOException io) {\n        LOG.warn(\"Error reading the stream \" + io);\n        ret \u003d \"N/A\";\n      } finally {\n        // Close the streams\n        try {\n          fReader.close();\n          try {\n            in.close();\n          } catch (IOException i) {\n            LOG.warn(\"Error closing the stream \" + in);\n          }\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + fReader);\n        }\n      }\n\n      return ret;\n    }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
    }
  }
}