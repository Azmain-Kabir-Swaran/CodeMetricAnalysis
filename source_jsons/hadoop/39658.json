{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "internalReleaseContainer",
  "functionId": "internalReleaseContainer___clusterResource-Resource__schedulerContainer-SchedulerContainer__FiCaSchedulerApp,FiCaSchedulerNode__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 1250,
  "functionEndLine": 1281,
  "numCommitsSeen": 176,
  "timeTaken": 3360,
  "changeHistory": [
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/02/17 10:23 AM",
      "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.01,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,32 @@\n   private void internalReleaseContainer(Resource clusterResource,\n       SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer) {\n     RMContainer rmContainer \u003d schedulerContainer.getRmContainer();\n \n     LeafQueue targetLeafQueue \u003d\n         schedulerContainer.getSchedulerApplicationAttempt().getCSLeafQueue();\n \n     if (targetLeafQueue \u003d\u003d this) {\n       // When trying to preempt containers from the same queue\n-      if (rmContainer.hasIncreaseReservation()) {\n-        // Increased container reservation\n-        unreserveIncreasedContainer(clusterResource,\n-            schedulerContainer.getSchedulerApplicationAttempt(),\n-            schedulerContainer.getSchedulerNode(), rmContainer);\n-      } else if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n+      if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n         // For other reserved containers\n         // This is a reservation exchange, complete previous reserved container\n         completedContainer(clusterResource,\n             schedulerContainer.getSchedulerApplicationAttempt(),\n             schedulerContainer.getSchedulerNode(), rmContainer, SchedulerUtils\n                 .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                     SchedulerUtils.UNRESERVED_CONTAINER),\n             RMContainerEventType.RELEASED, null, false);\n       }\n     } else{\n       // When trying to preempt containers from different queue -- this\n       // is for lazy preemption feature (kill preemption candidate in scheduling\n       // cycle).\n       targetLeafQueue.completedContainer(clusterResource,\n           schedulerContainer.getSchedulerApplicationAttempt(),\n           schedulerContainer.getSchedulerNode(),\n           schedulerContainer.getRmContainer(), SchedulerUtils\n               .createPreemptedContainerStatus(rmContainer.getContainerId(),\n                   SchedulerUtils.PREEMPTED_CONTAINER),\n           RMContainerEventType.KILL, null, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalReleaseContainer(Resource clusterResource,\n      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer) {\n    RMContainer rmContainer \u003d schedulerContainer.getRmContainer();\n\n    LeafQueue targetLeafQueue \u003d\n        schedulerContainer.getSchedulerApplicationAttempt().getCSLeafQueue();\n\n    if (targetLeafQueue \u003d\u003d this) {\n      // When trying to preempt containers from the same queue\n      if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n        // For other reserved containers\n        // This is a reservation exchange, complete previous reserved container\n        completedContainer(clusterResource,\n            schedulerContainer.getSchedulerApplicationAttempt(),\n            schedulerContainer.getSchedulerNode(), rmContainer, SchedulerUtils\n                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                    SchedulerUtils.UNRESERVED_CONTAINER),\n            RMContainerEventType.RELEASED, null, false);\n      }\n    } else{\n      // When trying to preempt containers from different queue -- this\n      // is for lazy preemption feature (kill preemption candidate in scheduling\n      // cycle).\n      targetLeafQueue.completedContainer(clusterResource,\n          schedulerContainer.getSchedulerApplicationAttempt(),\n          schedulerContainer.getSchedulerNode(),\n          schedulerContainer.getRmContainer(), SchedulerUtils\n              .createPreemptedContainerStatus(rmContainer.getContainerId(),\n                  SchedulerUtils.PREEMPTED_CONTAINER),\n          RMContainerEventType.KILL, null, false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,37 @@\n+  private void internalReleaseContainer(Resource clusterResource,\n+      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer) {\n+    RMContainer rmContainer \u003d schedulerContainer.getRmContainer();\n+\n+    LeafQueue targetLeafQueue \u003d\n+        schedulerContainer.getSchedulerApplicationAttempt().getCSLeafQueue();\n+\n+    if (targetLeafQueue \u003d\u003d this) {\n+      // When trying to preempt containers from the same queue\n+      if (rmContainer.hasIncreaseReservation()) {\n+        // Increased container reservation\n+        unreserveIncreasedContainer(clusterResource,\n+            schedulerContainer.getSchedulerApplicationAttempt(),\n+            schedulerContainer.getSchedulerNode(), rmContainer);\n+      } else if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n+        // For other reserved containers\n+        // This is a reservation exchange, complete previous reserved container\n+        completedContainer(clusterResource,\n+            schedulerContainer.getSchedulerApplicationAttempt(),\n+            schedulerContainer.getSchedulerNode(), rmContainer, SchedulerUtils\n+                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n+                    SchedulerUtils.UNRESERVED_CONTAINER),\n+            RMContainerEventType.RELEASED, null, false);\n+      }\n+    } else{\n+      // When trying to preempt containers from different queue -- this\n+      // is for lazy preemption feature (kill preemption candidate in scheduling\n+      // cycle).\n+      targetLeafQueue.completedContainer(clusterResource,\n+          schedulerContainer.getSchedulerApplicationAttempt(),\n+          schedulerContainer.getSchedulerNode(),\n+          schedulerContainer.getRmContainer(), SchedulerUtils\n+              .createPreemptedContainerStatus(rmContainer.getContainerId(),\n+                  SchedulerUtils.PREEMPTED_CONTAINER),\n+          RMContainerEventType.KILL, null, false);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalReleaseContainer(Resource clusterResource,\n      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e schedulerContainer) {\n    RMContainer rmContainer \u003d schedulerContainer.getRmContainer();\n\n    LeafQueue targetLeafQueue \u003d\n        schedulerContainer.getSchedulerApplicationAttempt().getCSLeafQueue();\n\n    if (targetLeafQueue \u003d\u003d this) {\n      // When trying to preempt containers from the same queue\n      if (rmContainer.hasIncreaseReservation()) {\n        // Increased container reservation\n        unreserveIncreasedContainer(clusterResource,\n            schedulerContainer.getSchedulerApplicationAttempt(),\n            schedulerContainer.getSchedulerNode(), rmContainer);\n      } else if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n        // For other reserved containers\n        // This is a reservation exchange, complete previous reserved container\n        completedContainer(clusterResource,\n            schedulerContainer.getSchedulerApplicationAttempt(),\n            schedulerContainer.getSchedulerNode(), rmContainer, SchedulerUtils\n                .createAbnormalContainerStatus(rmContainer.getContainerId(),\n                    SchedulerUtils.UNRESERVED_CONTAINER),\n            RMContainerEventType.RELEASED, null, false);\n      }\n    } else{\n      // When trying to preempt containers from different queue -- this\n      // is for lazy preemption feature (kill preemption candidate in scheduling\n      // cycle).\n      targetLeafQueue.completedContainer(clusterResource,\n          schedulerContainer.getSchedulerApplicationAttempt(),\n          schedulerContainer.getSchedulerNode(),\n          schedulerContainer.getRmContainer(), SchedulerUtils\n              .createPreemptedContainerStatus(rmContainer.getContainerId(),\n                  SchedulerUtils.PREEMPTED_CONTAINER),\n          RMContainerEventType.KILL, null, false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}