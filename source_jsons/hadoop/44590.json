{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "fetchAMContainerLogs",
  "functionId": "fetchAMContainerLogs___request-ContainerLogsRequest__amContainersList-List__String____logCliHelper-LogCLIHelpers__useRegex-boolean__ignoreSizeLimit-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 1054,
  "functionEndLine": 1059,
  "numCommitsSeen": 140,
  "timeTaken": 5823,
  "changeHistory": [
    "ec2ae3060a807c8754826af2135a68c08b2e4f13",
    "e605d47df05619c6b1c18aca59f709899498da75",
    "3818393297c7b337e380e8111a55f2ac4745cb83",
    "429347289c7787364e654334cd84115ae40bb22d",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "ef1757790d89cc72f88f5330761b1c8901c59e94",
    "87f5e351337a905af5215af76c72b9312616cd4f",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835"
  ],
  "changeHistoryShort": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": "Ymultichange(Yparameterchange,Ybodychange)",
    "e605d47df05619c6b1c18aca59f709899498da75": "Ymultichange(Yparameterchange,Ybodychange)",
    "3818393297c7b337e380e8111a55f2ac4745cb83": "Ybodychange",
    "429347289c7787364e654334cd84115ae40bb22d": "Ybodychange",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ymultichange(Yparameterchange,Ybodychange)",
    "ef1757790d89cc72f88f5330761b1c8901c59e94": "Ymultichange(Yparameterchange,Ybodychange)",
    "87f5e351337a905af5215af76c72b9312616cd4f": "Ybodychange",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
      "commitDate": "29/09/17 4:42 PM",
      "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   private int fetchAMContainerLogs(ContainerLogsRequest request,\n       List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper,\n-      boolean useRegex) throws Exception {\n+      boolean useRegex, boolean ignoreSizeLimit) throws Exception {\n     return printAMContainerLogs(getConf(), request, amContainersList,\n-        logCliHelper, useRegex);\n+        logCliHelper, useRegex, ignoreSizeLimit);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws Exception {\n    return printAMContainerLogs(getConf(), request, amContainersList,\n        logCliHelper, useRegex, ignoreSizeLimit);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[request-ContainerLogsRequest, amContainersList-List\u003cString\u003e, logCliHelper-LogCLIHelpers, useRegex-boolean]",
            "newValue": "[request-ContainerLogsRequest, amContainersList-List\u003cString\u003e, logCliHelper-LogCLIHelpers, useRegex-boolean, ignoreSizeLimit-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   private int fetchAMContainerLogs(ContainerLogsRequest request,\n       List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper,\n-      boolean useRegex) throws Exception {\n+      boolean useRegex, boolean ignoreSizeLimit) throws Exception {\n     return printAMContainerLogs(getConf(), request, amContainersList,\n-        logCliHelper, useRegex);\n+        logCliHelper, useRegex, ignoreSizeLimit);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws Exception {\n    return printAMContainerLogs(getConf(), request, amContainersList,\n        logCliHelper, useRegex, ignoreSizeLimit);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "e605d47df05619c6b1c18aca59f709899498da75": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
      "commitDate": "05/08/16 10:55 AM",
      "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   private int fetchAMContainerLogs(ContainerLogsRequest request,\n-      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n-      throws Exception {\n+      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper,\n+      boolean useRegex) throws Exception {\n     return printAMContainerLogs(getConf(), request, amContainersList,\n-        logCliHelper);\n+        logCliHelper, useRegex);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws Exception {\n    return printAMContainerLogs(getConf(), request, amContainersList,\n        logCliHelper, useRegex);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[request-ContainerLogsRequest, amContainersList-List\u003cString\u003e, logCliHelper-LogCLIHelpers]",
            "newValue": "[request-ContainerLogsRequest, amContainersList-List\u003cString\u003e, logCliHelper-LogCLIHelpers, useRegex-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   private int fetchAMContainerLogs(ContainerLogsRequest request,\n-      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n-      throws Exception {\n+      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper,\n+      boolean useRegex) throws Exception {\n     return printAMContainerLogs(getConf(), request, amContainersList,\n-        logCliHelper);\n+        logCliHelper, useRegex);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws Exception {\n    return printAMContainerLogs(getConf(), request, amContainersList,\n        logCliHelper, useRegex);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "3818393297c7b337e380e8111a55f2ac4745cb83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5226. Remove AHS enable check from LogsCLI#fetchAMContainerLogs. Contributed by Xuan Gong.\n",
      "commitDate": "02/08/16 10:41 AM",
      "commitName": "3818393297c7b337e380e8111a55f2ac4745cb83",
      "commitAuthor": "Junping Du",
      "commitDateOld": "15/07/16 9:23 AM",
      "commitNameOld": "7e5355c14e55fd6540f7f070df4b78fa94a81618",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,6 @@\n   private int fetchAMContainerLogs(ContainerLogsRequest request,\n       List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n       throws Exception {\n-\n-    // If the application is running, we will call the RM WebService\n-    // to get the AppAttempts which includes the nodeHttpAddress\n-    // and containerId for all the AM Containers.\n-    // After that, we will call NodeManager webService to get the\n-    // related logs\n-    if (!request.isAppFinished()) {\n-      return printAMContainerLogs(getConf(), request, amContainersList,\n-          logCliHelper);\n-    } else {\n-      // If the application is in the final state, we will call RM webservice\n-      // to get all AppAttempts information first. If we get nothing,\n-      // we will try to call AHS webservice to get related AppAttempts\n-      // which includes nodeAddress for the AM Containers.\n-      // After that, we will use nodeAddress and containerId\n-      // to get logs from HDFS directly.\n-      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n-          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n-        return printAMContainerLogs(getConf(), request, amContainersList,\n-            logCliHelper);\n-      } else {\n-        ApplicationId appId \u003d request.getAppId();\n-        String appOwner \u003d request.getAppOwner();\n-        System.err.println(\"Can not get AMContainers logs for \"\n-            + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n-        System.err.println(\"This application:\" + appId + \" has finished.\"\n-            + \" Please enable the application-history service or explicitly\"\n-            + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n-            + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n-            + \"to get the container logs.\");\n-        return -1;\n-      }\n-    }\n+    return printAMContainerLogs(getConf(), request, amContainersList,\n+        logCliHelper);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n      throws Exception {\n    return printAMContainerLogs(getConf(), request, amContainersList,\n        logCliHelper);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "429347289c7787364e654334cd84115ae40bb22d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5363. For AM containers, or for containers of running-apps, \"yarn logs\" incorrectly only (tries to) shows syslog file-type by default. (Contributed by Vinod Kumar Vavilapalli)\n",
      "commitDate": "14/07/16 10:20 AM",
      "commitName": "429347289c7787364e654334cd84115ae40bb22d",
      "commitAuthor": "Xuan",
      "commitDateOld": "13/07/16 2:52 PM",
      "commitNameOld": "d18050522c5c6bd9e32eb9a1be4ffe2288624c40",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,37 @@\n   private int fetchAMContainerLogs(ContainerLogsRequest request,\n       List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n       throws Exception {\n-    List\u003cString\u003e logFiles \u003d request.getLogTypes();\n-    // if we do not specify the value for CONTAINER_LOG_FILES option,\n-    // we will only output syslog\n-    if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n-      logFiles \u003d Arrays.asList(\"syslog\");\n-    }\n-    request.setLogTypes(logFiles);\n+\n     // If the application is running, we will call the RM WebService\n     // to get the AppAttempts which includes the nodeHttpAddress\n     // and containerId for all the AM Containers.\n     // After that, we will call NodeManager webService to get the\n     // related logs\n     if (!request.isAppFinished()) {\n       return printAMContainerLogs(getConf(), request, amContainersList,\n           logCliHelper);\n     } else {\n       // If the application is in the final state, we will call RM webservice\n       // to get all AppAttempts information first. If we get nothing,\n       // we will try to call AHS webservice to get related AppAttempts\n       // which includes nodeAddress for the AM Containers.\n       // After that, we will use nodeAddress and containerId\n       // to get logs from HDFS directly.\n       if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n           YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n         return printAMContainerLogs(getConf(), request, amContainersList,\n             logCliHelper);\n       } else {\n         ApplicationId appId \u003d request.getAppId();\n         String appOwner \u003d request.getAppOwner();\n         System.err.println(\"Can not get AMContainers logs for \"\n             + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n         System.err.println(\"This application:\" + appId + \" has finished.\"\n             + \" Please enable the application-history service or explicitly\"\n             + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n             + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n             + \"to get the container logs.\");\n         return -1;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n      throws Exception {\n\n    // If the application is running, we will call the RM WebService\n    // to get the AppAttempts which includes the nodeHttpAddress\n    // and containerId for all the AM Containers.\n    // After that, we will call NodeManager webService to get the\n    // related logs\n    if (!request.isAppFinished()) {\n      return printAMContainerLogs(getConf(), request, amContainersList,\n          logCliHelper);\n    } else {\n      // If the application is in the final state, we will call RM webservice\n      // to get all AppAttempts information first. If we get nothing,\n      // we will try to call AHS webservice to get related AppAttempts\n      // which includes nodeAddress for the AM Containers.\n      // After that, we will use nodeAddress and containerId\n      // to get logs from HDFS directly.\n      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n        return printAMContainerLogs(getConf(), request, amContainersList,\n            logCliHelper);\n      } else {\n        ApplicationId appId \u003d request.getAppId();\n        String appOwner \u003d request.getAppOwner();\n        System.err.println(\"Can not get AMContainers logs for \"\n            + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n        System.err.println(\"This application:\" + appId + \" has finished.\"\n            + \" Please enable the application-history service or explicitly\"\n            + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n            + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n            + \"to get the container logs.\");\n        return -1;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,43 @@\n   private int fetchAMContainerLogs(ContainerLogsRequest request,\n-      List\u003cString\u003e amContainersList, String[] logFiles,\n-      LogCLIHelpers logCliHelper, String localDir) throws Exception {\n+      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n+      throws Exception {\n+    List\u003cString\u003e logFiles \u003d request.getLogTypes();\n     // if we do not specify the value for CONTAINER_LOG_FILES option,\n     // we will only output syslog\n-    if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n-      logFiles \u003d new String[] {\"syslog\"};\n+    if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n+      logFiles \u003d Arrays.asList(\"syslog\");\n     }\n+    request.setLogTypes(logFiles);\n     // If the application is running, we will call the RM WebService\n     // to get the AppAttempts which includes the nodeHttpAddress\n     // and containerId for all the AM Containers.\n     // After that, we will call NodeManager webService to get the\n     // related logs\n     if (!request.isAppFinished()) {\n       return printAMContainerLogs(getConf(), request, amContainersList,\n-          logFiles, logCliHelper, localDir);\n+          logCliHelper);\n     } else {\n       // If the application is in the final state, we will call RM webservice\n       // to get all AppAttempts information first. If we get nothing,\n       // we will try to call AHS webservice to get related AppAttempts\n       // which includes nodeAddress for the AM Containers.\n       // After that, we will use nodeAddress and containerId\n       // to get logs from HDFS directly.\n       if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n           YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n         return printAMContainerLogs(getConf(), request, amContainersList,\n-            logFiles, logCliHelper, localDir);\n+            logCliHelper);\n       } else {\n         ApplicationId appId \u003d request.getAppId();\n         String appOwner \u003d request.getAppOwner();\n         System.err.println(\"Can not get AMContainers logs for \"\n             + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n         System.err.println(\"This application:\" + appId + \" has finished.\"\n             + \" Please enable the application-history service or explicitly\"\n             + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n             + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n             + \"to get the container logs.\");\n         return -1;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n      throws Exception {\n    List\u003cString\u003e logFiles \u003d request.getLogTypes();\n    // if we do not specify the value for CONTAINER_LOG_FILES option,\n    // we will only output syslog\n    if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n      logFiles \u003d Arrays.asList(\"syslog\");\n    }\n    request.setLogTypes(logFiles);\n    // If the application is running, we will call the RM WebService\n    // to get the AppAttempts which includes the nodeHttpAddress\n    // and containerId for all the AM Containers.\n    // After that, we will call NodeManager webService to get the\n    // related logs\n    if (!request.isAppFinished()) {\n      return printAMContainerLogs(getConf(), request, amContainersList,\n          logCliHelper);\n    } else {\n      // If the application is in the final state, we will call RM webservice\n      // to get all AppAttempts information first. If we get nothing,\n      // we will try to call AHS webservice to get related AppAttempts\n      // which includes nodeAddress for the AM Containers.\n      // After that, we will use nodeAddress and containerId\n      // to get logs from HDFS directly.\n      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n        return printAMContainerLogs(getConf(), request, amContainersList,\n            logCliHelper);\n      } else {\n        ApplicationId appId \u003d request.getAppId();\n        String appOwner \u003d request.getAppOwner();\n        System.err.println(\"Can not get AMContainers logs for \"\n            + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n        System.err.println(\"This application:\" + appId + \" has finished.\"\n            + \" Please enable the application-history service or explicitly\"\n            + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n            + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n            + \"to get the container logs.\");\n        return -1;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[request-ContainerLogsRequest, amContainersList-List\u003cString\u003e, logFiles-String[], logCliHelper-LogCLIHelpers, localDir-String]",
            "newValue": "[request-ContainerLogsRequest, amContainersList-List\u003cString\u003e, logCliHelper-LogCLIHelpers]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,43 @@\n   private int fetchAMContainerLogs(ContainerLogsRequest request,\n-      List\u003cString\u003e amContainersList, String[] logFiles,\n-      LogCLIHelpers logCliHelper, String localDir) throws Exception {\n+      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n+      throws Exception {\n+    List\u003cString\u003e logFiles \u003d request.getLogTypes();\n     // if we do not specify the value for CONTAINER_LOG_FILES option,\n     // we will only output syslog\n-    if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n-      logFiles \u003d new String[] {\"syslog\"};\n+    if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n+      logFiles \u003d Arrays.asList(\"syslog\");\n     }\n+    request.setLogTypes(logFiles);\n     // If the application is running, we will call the RM WebService\n     // to get the AppAttempts which includes the nodeHttpAddress\n     // and containerId for all the AM Containers.\n     // After that, we will call NodeManager webService to get the\n     // related logs\n     if (!request.isAppFinished()) {\n       return printAMContainerLogs(getConf(), request, amContainersList,\n-          logFiles, logCliHelper, localDir);\n+          logCliHelper);\n     } else {\n       // If the application is in the final state, we will call RM webservice\n       // to get all AppAttempts information first. If we get nothing,\n       // we will try to call AHS webservice to get related AppAttempts\n       // which includes nodeAddress for the AM Containers.\n       // After that, we will use nodeAddress and containerId\n       // to get logs from HDFS directly.\n       if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n           YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n         return printAMContainerLogs(getConf(), request, amContainersList,\n-            logFiles, logCliHelper, localDir);\n+            logCliHelper);\n       } else {\n         ApplicationId appId \u003d request.getAppId();\n         String appOwner \u003d request.getAppOwner();\n         System.err.println(\"Can not get AMContainers logs for \"\n             + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n         System.err.println(\"This application:\" + appId + \" has finished.\"\n             + \" Please enable the application-history service or explicitly\"\n             + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n             + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n             + \"to get the container logs.\");\n         return -1;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, LogCLIHelpers logCliHelper)\n      throws Exception {\n    List\u003cString\u003e logFiles \u003d request.getLogTypes();\n    // if we do not specify the value for CONTAINER_LOG_FILES option,\n    // we will only output syslog\n    if (logFiles \u003d\u003d null || logFiles.isEmpty()) {\n      logFiles \u003d Arrays.asList(\"syslog\");\n    }\n    request.setLogTypes(logFiles);\n    // If the application is running, we will call the RM WebService\n    // to get the AppAttempts which includes the nodeHttpAddress\n    // and containerId for all the AM Containers.\n    // After that, we will call NodeManager webService to get the\n    // related logs\n    if (!request.isAppFinished()) {\n      return printAMContainerLogs(getConf(), request, amContainersList,\n          logCliHelper);\n    } else {\n      // If the application is in the final state, we will call RM webservice\n      // to get all AppAttempts information first. If we get nothing,\n      // we will try to call AHS webservice to get related AppAttempts\n      // which includes nodeAddress for the AM Containers.\n      // After that, we will use nodeAddress and containerId\n      // to get logs from HDFS directly.\n      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n        return printAMContainerLogs(getConf(), request, amContainersList,\n            logCliHelper);\n      } else {\n        ApplicationId appId \u003d request.getAppId();\n        String appOwner \u003d request.getAppOwner();\n        System.err.println(\"Can not get AMContainers logs for \"\n            + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n        System.err.println(\"This application:\" + appId + \" has finished.\"\n            + \" Please enable the application-history service or explicitly\"\n            + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n            + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n            + \"to get the container logs.\");\n        return -1;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "ef1757790d89cc72f88f5330761b1c8901c59e94": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
      "commitDate": "18/05/16 10:14 AM",
      "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
          "commitDate": "18/05/16 10:14 AM",
          "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "14/05/16 12:19 PM",
          "commitNameOld": "7be53b65f95dae89c760cde354b42f15f5ee3b5f",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n-  private int fetchAMContainerLogs(String[] logFiles,\n-      YarnApplicationState appState, ApplicationId appId,\n-      String appOwner, List\u003cString\u003e amContainersList,\n-      LogCLIHelpers logCliHelper) throws Exception {\n+  private int fetchAMContainerLogs(ContainerLogsRequest request,\n+      List\u003cString\u003e amContainersList, String[] logFiles,\n+      LogCLIHelpers logCliHelper, String localDir) throws Exception {\n     // if we do not specify the value for CONTAINER_LOG_FILES option,\n     // we will only output syslog\n     if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n       logFiles \u003d new String[] {\"syslog\"};\n     }\n     // If the application is running, we will call the RM WebService\n     // to get the AppAttempts which includes the nodeHttpAddress\n     // and containerId for all the AM Containers.\n     // After that, we will call NodeManager webService to get the\n     // related logs\n-    if (appState \u003d\u003d YarnApplicationState.ACCEPTED\n-        || appState \u003d\u003d YarnApplicationState.RUNNING) {\n-      return printAMContainerLogs(getConf(), appId.toString(), amContainersList,\n-        logFiles, logCliHelper, appOwner, false);\n+    if (!request.isAppFinished()) {\n+      return printAMContainerLogs(getConf(), request, amContainersList,\n+          logFiles, logCliHelper, localDir);\n     } else {\n       // If the application is in the final state, we will call RM webservice\n       // to get all AppAttempts information first. If we get nothing,\n       // we will try to call AHS webservice to get related AppAttempts\n       // which includes nodeAddress for the AM Containers.\n       // After that, we will use nodeAddress and containerId\n       // to get logs from HDFS directly.\n       if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n           YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n-        return printAMContainerLogs(getConf(), appId.toString(),\n-            amContainersList, logFiles, logCliHelper, appOwner, true);\n+        return printAMContainerLogs(getConf(), request, amContainersList,\n+            logFiles, logCliHelper, localDir);\n       } else {\n+        ApplicationId appId \u003d request.getAppId();\n+        String appOwner \u003d request.getAppOwner();\n         System.err.println(\"Can not get AMContainers logs for \"\n             + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n         System.err.println(\"This application:\" + appId + \" has finished.\"\n             + \" Please enable the application-history service or explicitly\"\n             + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n             + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n             + \"to get the container logs.\");\n         return -1;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, String[] logFiles,\n      LogCLIHelpers logCliHelper, String localDir) throws Exception {\n    // if we do not specify the value for CONTAINER_LOG_FILES option,\n    // we will only output syslog\n    if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n      logFiles \u003d new String[] {\"syslog\"};\n    }\n    // If the application is running, we will call the RM WebService\n    // to get the AppAttempts which includes the nodeHttpAddress\n    // and containerId for all the AM Containers.\n    // After that, we will call NodeManager webService to get the\n    // related logs\n    if (!request.isAppFinished()) {\n      return printAMContainerLogs(getConf(), request, amContainersList,\n          logFiles, logCliHelper, localDir);\n    } else {\n      // If the application is in the final state, we will call RM webservice\n      // to get all AppAttempts information first. If we get nothing,\n      // we will try to call AHS webservice to get related AppAttempts\n      // which includes nodeAddress for the AM Containers.\n      // After that, we will use nodeAddress and containerId\n      // to get logs from HDFS directly.\n      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n        return printAMContainerLogs(getConf(), request, amContainersList,\n            logFiles, logCliHelper, localDir);\n      } else {\n        ApplicationId appId \u003d request.getAppId();\n        String appOwner \u003d request.getAppOwner();\n        System.err.println(\"Can not get AMContainers logs for \"\n            + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n        System.err.println(\"This application:\" + appId + \" has finished.\"\n            + \" Please enable the application-history service or explicitly\"\n            + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n            + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n            + \"to get the container logs.\");\n        return -1;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[logFiles-String[], appState-YarnApplicationState, appId-ApplicationId, appOwner-String, amContainersList-List\u003cString\u003e, logCliHelper-LogCLIHelpers]",
            "newValue": "[request-ContainerLogsRequest, amContainersList-List\u003cString\u003e, logFiles-String[], logCliHelper-LogCLIHelpers, localDir-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
          "commitDate": "18/05/16 10:14 AM",
          "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "14/05/16 12:19 PM",
          "commitNameOld": "7be53b65f95dae89c760cde354b42f15f5ee3b5f",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n-  private int fetchAMContainerLogs(String[] logFiles,\n-      YarnApplicationState appState, ApplicationId appId,\n-      String appOwner, List\u003cString\u003e amContainersList,\n-      LogCLIHelpers logCliHelper) throws Exception {\n+  private int fetchAMContainerLogs(ContainerLogsRequest request,\n+      List\u003cString\u003e amContainersList, String[] logFiles,\n+      LogCLIHelpers logCliHelper, String localDir) throws Exception {\n     // if we do not specify the value for CONTAINER_LOG_FILES option,\n     // we will only output syslog\n     if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n       logFiles \u003d new String[] {\"syslog\"};\n     }\n     // If the application is running, we will call the RM WebService\n     // to get the AppAttempts which includes the nodeHttpAddress\n     // and containerId for all the AM Containers.\n     // After that, we will call NodeManager webService to get the\n     // related logs\n-    if (appState \u003d\u003d YarnApplicationState.ACCEPTED\n-        || appState \u003d\u003d YarnApplicationState.RUNNING) {\n-      return printAMContainerLogs(getConf(), appId.toString(), amContainersList,\n-        logFiles, logCliHelper, appOwner, false);\n+    if (!request.isAppFinished()) {\n+      return printAMContainerLogs(getConf(), request, amContainersList,\n+          logFiles, logCliHelper, localDir);\n     } else {\n       // If the application is in the final state, we will call RM webservice\n       // to get all AppAttempts information first. If we get nothing,\n       // we will try to call AHS webservice to get related AppAttempts\n       // which includes nodeAddress for the AM Containers.\n       // After that, we will use nodeAddress and containerId\n       // to get logs from HDFS directly.\n       if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n           YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n-        return printAMContainerLogs(getConf(), appId.toString(),\n-            amContainersList, logFiles, logCliHelper, appOwner, true);\n+        return printAMContainerLogs(getConf(), request, amContainersList,\n+            logFiles, logCliHelper, localDir);\n       } else {\n+        ApplicationId appId \u003d request.getAppId();\n+        String appOwner \u003d request.getAppOwner();\n         System.err.println(\"Can not get AMContainers logs for \"\n             + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n         System.err.println(\"This application:\" + appId + \" has finished.\"\n             + \" Please enable the application-history service or explicitly\"\n             + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n             + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n             + \"to get the container logs.\");\n         return -1;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchAMContainerLogs(ContainerLogsRequest request,\n      List\u003cString\u003e amContainersList, String[] logFiles,\n      LogCLIHelpers logCliHelper, String localDir) throws Exception {\n    // if we do not specify the value for CONTAINER_LOG_FILES option,\n    // we will only output syslog\n    if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n      logFiles \u003d new String[] {\"syslog\"};\n    }\n    // If the application is running, we will call the RM WebService\n    // to get the AppAttempts which includes the nodeHttpAddress\n    // and containerId for all the AM Containers.\n    // After that, we will call NodeManager webService to get the\n    // related logs\n    if (!request.isAppFinished()) {\n      return printAMContainerLogs(getConf(), request, amContainersList,\n          logFiles, logCliHelper, localDir);\n    } else {\n      // If the application is in the final state, we will call RM webservice\n      // to get all AppAttempts information first. If we get nothing,\n      // we will try to call AHS webservice to get related AppAttempts\n      // which includes nodeAddress for the AM Containers.\n      // After that, we will use nodeAddress and containerId\n      // to get logs from HDFS directly.\n      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n        return printAMContainerLogs(getConf(), request, amContainersList,\n            logFiles, logCliHelper, localDir);\n      } else {\n        ApplicationId appId \u003d request.getAppId();\n        String appOwner \u003d request.getAppOwner();\n        System.err.println(\"Can not get AMContainers logs for \"\n            + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n        System.err.println(\"This application:\" + appId + \" has finished.\"\n            + \" Please enable the application-history service or explicitly\"\n            + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n            + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n            + \"to get the container logs.\");\n        return -1;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "87f5e351337a905af5215af76c72b9312616cd4f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4842. Fixed \"yarn logs\" command to guess (and thus not require) the appOwner argument when viewing another user\u0027s logs. Contributed by Ram Venkatesh and Xuan Gong.\n",
      "commitDate": "09/05/16 10:41 PM",
      "commitName": "87f5e351337a905af5215af76c72b9312616cd4f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/05/16 2:16 PM",
      "commitNameOld": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.35,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   private int fetchAMContainerLogs(String[] logFiles,\n       YarnApplicationState appState, ApplicationId appId,\n       String appOwner, List\u003cString\u003e amContainersList,\n       LogCLIHelpers logCliHelper) throws Exception {\n     // if we do not specify the value for CONTAINER_LOG_FILES option,\n     // we will only output syslog\n     if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n       logFiles \u003d new String[] {\"syslog\"};\n     }\n     // If the application is running, we will call the RM WebService\n     // to get the AppAttempts which includes the nodeHttpAddress\n     // and containerId for all the AM Containers.\n     // After that, we will call NodeManager webService to get the\n     // related logs\n     if (appState \u003d\u003d YarnApplicationState.ACCEPTED\n         || appState \u003d\u003d YarnApplicationState.RUNNING) {\n       return printAMContainerLogs(getConf(), appId.toString(), amContainersList,\n         logFiles, logCliHelper, appOwner, false);\n     } else {\n       // If the application is in the final state, we will call RM webservice\n       // to get all AppAttempts information first. If we get nothing,\n       // we will try to call AHS webservice to get related AppAttempts\n       // which includes nodeAddress for the AM Containers.\n       // After that, we will use nodeAddress and containerId\n       // to get logs from HDFS directly.\n       if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n           YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n         return printAMContainerLogs(getConf(), appId.toString(),\n             amContainersList, logFiles, logCliHelper, appOwner, true);\n       } else {\n         System.err.println(\"Can not get AMContainers logs for \"\n-            + \"the application:\" + appId);\n-        System.err.println(\"This application:\" + appId + \" is finished.\"\n-            + \" Please enable the application history service. Or Using \"\n-            + \"yarn logs -applicationId \u003cappId\u003e -containerId \u003ccontainerId\u003e \"\n-            + \"--nodeAddress \u003cnodeHttpAddress\u003e to get the container logs\");\n+            + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n+        System.err.println(\"This application:\" + appId + \" has finished.\"\n+            + \" Please enable the application-history service or explicitly\"\n+            + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n+            + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n+            + \"to get the container logs.\");\n         return -1;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int fetchAMContainerLogs(String[] logFiles,\n      YarnApplicationState appState, ApplicationId appId,\n      String appOwner, List\u003cString\u003e amContainersList,\n      LogCLIHelpers logCliHelper) throws Exception {\n    // if we do not specify the value for CONTAINER_LOG_FILES option,\n    // we will only output syslog\n    if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n      logFiles \u003d new String[] {\"syslog\"};\n    }\n    // If the application is running, we will call the RM WebService\n    // to get the AppAttempts which includes the nodeHttpAddress\n    // and containerId for all the AM Containers.\n    // After that, we will call NodeManager webService to get the\n    // related logs\n    if (appState \u003d\u003d YarnApplicationState.ACCEPTED\n        || appState \u003d\u003d YarnApplicationState.RUNNING) {\n      return printAMContainerLogs(getConf(), appId.toString(), amContainersList,\n        logFiles, logCliHelper, appOwner, false);\n    } else {\n      // If the application is in the final state, we will call RM webservice\n      // to get all AppAttempts information first. If we get nothing,\n      // we will try to call AHS webservice to get related AppAttempts\n      // which includes nodeAddress for the AM Containers.\n      // After that, we will use nodeAddress and containerId\n      // to get logs from HDFS directly.\n      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n        return printAMContainerLogs(getConf(), appId.toString(),\n            amContainersList, logFiles, logCliHelper, appOwner, true);\n      } else {\n        System.err.println(\"Can not get AMContainers logs for \"\n            + \"the application:\" + appId + \" with the appOwner:\" + appOwner);\n        System.err.println(\"This application:\" + appId + \" has finished.\"\n            + \" Please enable the application-history service or explicitly\"\n            + \" use \u0027yarn logs -applicationId \u003cappId\u003e \"\n            + \"-containerId \u003ccontainerId\u003e --nodeAddress \u003cnodeHttpAddress\u003e\u0027 \"\n            + \"to get the container logs.\");\n        return -1;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4905. Improved \"yarn logs\" command-line to optionally show log metadata also. Contributed by Xuan Gong.\n",
      "commitDate": "04/05/16 2:16 PM",
      "commitName": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,40 @@\n+  private int fetchAMContainerLogs(String[] logFiles,\n+      YarnApplicationState appState, ApplicationId appId,\n+      String appOwner, List\u003cString\u003e amContainersList,\n+      LogCLIHelpers logCliHelper) throws Exception {\n+    // if we do not specify the value for CONTAINER_LOG_FILES option,\n+    // we will only output syslog\n+    if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n+      logFiles \u003d new String[] {\"syslog\"};\n+    }\n+    // If the application is running, we will call the RM WebService\n+    // to get the AppAttempts which includes the nodeHttpAddress\n+    // and containerId for all the AM Containers.\n+    // After that, we will call NodeManager webService to get the\n+    // related logs\n+    if (appState \u003d\u003d YarnApplicationState.ACCEPTED\n+        || appState \u003d\u003d YarnApplicationState.RUNNING) {\n+      return printAMContainerLogs(getConf(), appId.toString(), amContainersList,\n+        logFiles, logCliHelper, appOwner, false);\n+    } else {\n+      // If the application is in the final state, we will call RM webservice\n+      // to get all AppAttempts information first. If we get nothing,\n+      // we will try to call AHS webservice to get related AppAttempts\n+      // which includes nodeAddress for the AM Containers.\n+      // After that, we will use nodeAddress and containerId\n+      // to get logs from HDFS directly.\n+      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n+          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n+        return printAMContainerLogs(getConf(), appId.toString(),\n+            amContainersList, logFiles, logCliHelper, appOwner, true);\n+      } else {\n+        System.err.println(\"Can not get AMContainers logs for \"\n+            + \"the application:\" + appId);\n+        System.err.println(\"This application:\" + appId + \" is finished.\"\n+            + \" Please enable the application history service. Or Using \"\n+            + \"yarn logs -applicationId \u003cappId\u003e -containerId \u003ccontainerId\u003e \"\n+            + \"--nodeAddress \u003cnodeHttpAddress\u003e to get the container logs\");\n+        return -1;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int fetchAMContainerLogs(String[] logFiles,\n      YarnApplicationState appState, ApplicationId appId,\n      String appOwner, List\u003cString\u003e amContainersList,\n      LogCLIHelpers logCliHelper) throws Exception {\n    // if we do not specify the value for CONTAINER_LOG_FILES option,\n    // we will only output syslog\n    if (logFiles \u003d\u003d null || logFiles.length \u003d\u003d 0) {\n      logFiles \u003d new String[] {\"syslog\"};\n    }\n    // If the application is running, we will call the RM WebService\n    // to get the AppAttempts which includes the nodeHttpAddress\n    // and containerId for all the AM Containers.\n    // After that, we will call NodeManager webService to get the\n    // related logs\n    if (appState \u003d\u003d YarnApplicationState.ACCEPTED\n        || appState \u003d\u003d YarnApplicationState.RUNNING) {\n      return printAMContainerLogs(getConf(), appId.toString(), amContainersList,\n        logFiles, logCliHelper, appOwner, false);\n    } else {\n      // If the application is in the final state, we will call RM webservice\n      // to get all AppAttempts information first. If we get nothing,\n      // we will try to call AHS webservice to get related AppAttempts\n      // which includes nodeAddress for the AM Containers.\n      // After that, we will use nodeAddress and containerId\n      // to get logs from HDFS directly.\n      if (getConf().getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n          YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n        return printAMContainerLogs(getConf(), appId.toString(),\n            amContainersList, logFiles, logCliHelper, appOwner, true);\n      } else {\n        System.err.println(\"Can not get AMContainers logs for \"\n            + \"the application:\" + appId);\n        System.err.println(\"This application:\" + appId + \" is finished.\"\n            + \" Please enable the application history service. Or Using \"\n            + \"yarn logs -applicationId \u003cappId\u003e -containerId \u003ccontainerId\u003e \"\n            + \"--nodeAddress \u003cnodeHttpAddress\u003e to get the container logs\");\n        return -1;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}