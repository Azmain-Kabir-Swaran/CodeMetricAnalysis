{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerUtils.java",
  "functionName": "normalizeAndValidateRequest",
  "functionId": "normalizeAndValidateRequest___resReq-ResourceRequest__maximumAllocation-Resource__queueName-String__isRecovery-boolean__rmContext-RMContext__queueInfo-QueueInfo__nodeLabelsEnabled-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
  "functionStartLine": 260,
  "functionEndLine": 294,
  "numCommitsSeen": 143,
  "timeTaken": 6764,
  "changeHistory": [
    "570fa2da20706490dc7823efd0ce0cef3ddc81f9",
    "fd6be5898ad1a650e3bceacb8169a53520da57e5",
    "2cccf4061cc4021c48e29879700dbc94f832b7d1",
    "821b0de4c59156d4a65112de03ba3e7e1c88e309",
    "91f120f743662c6e037e8f21b1792e81d58ac664",
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e",
    "d6f6741296639a73f5306e3ebefec84a40ca03e5"
  ],
  "changeHistoryShort": {
    "570fa2da20706490dc7823efd0ce0cef3ddc81f9": "Ymultichange(Yparameterchange,Ybodychange)",
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "2cccf4061cc4021c48e29879700dbc94f832b7d1": "Ymodifierchange",
    "821b0de4c59156d4a65112de03ba3e7e1c88e309": "Ybodychange",
    "91f120f743662c6e037e8f21b1792e81d58ac664": "Ybodychange",
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e": "Ybodychange",
    "d6f6741296639a73f5306e3ebefec84a40ca03e5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "570fa2da20706490dc7823efd0ce0cef3ddc81f9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9508. YarnConfiguration areNodeLabel enabled is costly in allocation flow. Contributed by Bilwa S T.\n",
      "commitDate": "15/05/19 1:00 AM",
      "commitName": "570fa2da20706490dc7823efd0ce0cef3ddc81f9",
      "commitAuthor": "bibinchundatt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9508. YarnConfiguration areNodeLabel enabled is costly in allocation flow. Contributed by Bilwa S T.\n",
          "commitDate": "15/05/19 1:00 AM",
          "commitName": "570fa2da20706490dc7823efd0ce0cef3ddc81f9",
          "commitAuthor": "bibinchundatt",
          "commitDateOld": "15/03/19 4:20 PM",
          "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 60.36,
          "commitsBetweenForRepo": 359,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,35 @@\n   public static void normalizeAndValidateRequest(ResourceRequest resReq,\n-      Resource maximumAllocation, String queueName, YarnScheduler scheduler,\n-      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n-      throws InvalidResourceRequestException {\n+      Resource maximumAllocation, String queueName, boolean isRecovery,\n+      RMContext rmContext, QueueInfo queueInfo, boolean nodeLabelsEnabled)\n+          throws InvalidResourceRequestException {\n     Configuration conf \u003d rmContext.getYarnConfiguration();\n     // If Node label is not enabled throw exception\n-    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n+    if (null !\u003d conf \u0026\u0026 !nodeLabelsEnabled) {\n       String labelExp \u003d resReq.getNodeLabelExpression();\n       if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n           || null \u003d\u003d labelExp)) {\n         String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n             + \" request contains a label expression.\";\n         LOG.warn(message);\n         if (!isRecovery) {\n           throw new InvalidLabelResourceRequestException(\n               \"Invalid resource request, node label not enabled \"\n                   + \"but request contains label expression\");\n         }\n       }\n     }\n     if (null \u003d\u003d queueInfo) {\n       try {\n-        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n+        queueInfo \u003d rmContext.getScheduler().getQueueInfo(queueName, false,\n+            false);\n       } catch (IOException e) {\n         //Queue may not exist since it could be auto-created in case of\n         // dynamic queues\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n \n     if (!isRecovery) {\n       validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumAllocation, String queueName, boolean isRecovery,\n      RMContext rmContext, QueueInfo queueInfo, boolean nodeLabelsEnabled)\n          throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !nodeLabelsEnabled) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n            + \" request contains a label expression.\";\n        LOG.warn(message);\n        if (!isRecovery) {\n          throw new InvalidLabelResourceRequestException(\n              \"Invalid resource request, node label not enabled \"\n                  + \"but request contains label expression\");\n        }\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d rmContext.getScheduler().getQueueInfo(queueName, false,\n            false);\n      } catch (IOException e) {\n        //Queue may not exist since it could be auto-created in case of\n        // dynamic queues\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[resReq-ResourceRequest, maximumAllocation-Resource, queueName-String, scheduler-YarnScheduler, isRecovery-boolean, rmContext-RMContext, queueInfo-QueueInfo]",
            "newValue": "[resReq-ResourceRequest, maximumAllocation-Resource, queueName-String, isRecovery-boolean, rmContext-RMContext, queueInfo-QueueInfo, nodeLabelsEnabled-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9508. YarnConfiguration areNodeLabel enabled is costly in allocation flow. Contributed by Bilwa S T.\n",
          "commitDate": "15/05/19 1:00 AM",
          "commitName": "570fa2da20706490dc7823efd0ce0cef3ddc81f9",
          "commitAuthor": "bibinchundatt",
          "commitDateOld": "15/03/19 4:20 PM",
          "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 60.36,
          "commitsBetweenForRepo": 359,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,35 @@\n   public static void normalizeAndValidateRequest(ResourceRequest resReq,\n-      Resource maximumAllocation, String queueName, YarnScheduler scheduler,\n-      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n-      throws InvalidResourceRequestException {\n+      Resource maximumAllocation, String queueName, boolean isRecovery,\n+      RMContext rmContext, QueueInfo queueInfo, boolean nodeLabelsEnabled)\n+          throws InvalidResourceRequestException {\n     Configuration conf \u003d rmContext.getYarnConfiguration();\n     // If Node label is not enabled throw exception\n-    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n+    if (null !\u003d conf \u0026\u0026 !nodeLabelsEnabled) {\n       String labelExp \u003d resReq.getNodeLabelExpression();\n       if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n           || null \u003d\u003d labelExp)) {\n         String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n             + \" request contains a label expression.\";\n         LOG.warn(message);\n         if (!isRecovery) {\n           throw new InvalidLabelResourceRequestException(\n               \"Invalid resource request, node label not enabled \"\n                   + \"but request contains label expression\");\n         }\n       }\n     }\n     if (null \u003d\u003d queueInfo) {\n       try {\n-        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n+        queueInfo \u003d rmContext.getScheduler().getQueueInfo(queueName, false,\n+            false);\n       } catch (IOException e) {\n         //Queue may not exist since it could be auto-created in case of\n         // dynamic queues\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n \n     if (!isRecovery) {\n       validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumAllocation, String queueName, boolean isRecovery,\n      RMContext rmContext, QueueInfo queueInfo, boolean nodeLabelsEnabled)\n          throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !nodeLabelsEnabled) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n            + \" request contains a label expression.\";\n        LOG.warn(message);\n        if (!isRecovery) {\n          throw new InvalidLabelResourceRequestException(\n              \"Invalid resource request, node label not enabled \"\n                  + \"but request contains label expression\");\n        }\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d rmContext.getScheduler().getQueueInfo(queueName, false,\n            false);\n      } catch (IOException e) {\n        //Queue may not exist since it could be auto-created in case of\n        // dynamic queues\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal Bálint Steinbach.\n",
      "commitDate": "29/09/18 2:47 AM",
      "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal Bálint Steinbach.\n",
          "commitDate": "29/09/18 2:47 AM",
          "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "27/07/18 2:35 PM",
          "commitNameOld": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 63.51,
          "commitsBetweenForRepo": 571,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-  private static void normalizeAndValidateRequest(ResourceRequest resReq,\n-          Resource maximumResource, String queueName, YarnScheduler scheduler,\n-          boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n+  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n+      Resource maximumAllocation, String queueName, YarnScheduler scheduler,\n+      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n     Configuration conf \u003d rmContext.getYarnConfiguration();\n     // If Node label is not enabled throw exception\n     if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       String labelExp \u003d resReq.getNodeLabelExpression();\n       if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n           || null \u003d\u003d labelExp)) {\n         String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n             + \" request contains a label expression.\";\n         LOG.warn(message);\n         if (!isRecovery) {\n           throw new InvalidLabelResourceRequestException(\n               \"Invalid resource request, node label not enabled \"\n                   + \"but request contains label expression\");\n         }\n       }\n     }\n     if (null \u003d\u003d queueInfo) {\n       try {\n         queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n       } catch (IOException e) {\n         //Queue may not exist since it could be auto-created in case of\n         // dynamic queues\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n \n     if (!isRecovery) {\n-      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n+      validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumAllocation, String queueName, YarnScheduler scheduler,\n      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n            + \" request contains a label expression.\";\n        LOG.warn(message);\n        if (!isRecovery) {\n          throw new InvalidLabelResourceRequestException(\n              \"Invalid resource request, node label not enabled \"\n                  + \"but request contains label expression\");\n        }\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n      } catch (IOException e) {\n        //Queue may not exist since it could be auto-created in case of\n        // dynamic queues\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[resReq-ResourceRequest, maximumResource-Resource, queueName-String, scheduler-YarnScheduler, isRecovery-boolean, rmContext-RMContext, queueInfo-QueueInfo]",
            "newValue": "[resReq-ResourceRequest, maximumAllocation-Resource, queueName-String, scheduler-YarnScheduler, isRecovery-boolean, rmContext-RMContext, queueInfo-QueueInfo]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal Bálint Steinbach.\n",
          "commitDate": "29/09/18 2:47 AM",
          "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "27/07/18 2:35 PM",
          "commitNameOld": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 63.51,
          "commitsBetweenForRepo": 571,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-  private static void normalizeAndValidateRequest(ResourceRequest resReq,\n-          Resource maximumResource, String queueName, YarnScheduler scheduler,\n-          boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n+  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n+      Resource maximumAllocation, String queueName, YarnScheduler scheduler,\n+      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n     Configuration conf \u003d rmContext.getYarnConfiguration();\n     // If Node label is not enabled throw exception\n     if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       String labelExp \u003d resReq.getNodeLabelExpression();\n       if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n           || null \u003d\u003d labelExp)) {\n         String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n             + \" request contains a label expression.\";\n         LOG.warn(message);\n         if (!isRecovery) {\n           throw new InvalidLabelResourceRequestException(\n               \"Invalid resource request, node label not enabled \"\n                   + \"but request contains label expression\");\n         }\n       }\n     }\n     if (null \u003d\u003d queueInfo) {\n       try {\n         queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n       } catch (IOException e) {\n         //Queue may not exist since it could be auto-created in case of\n         // dynamic queues\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n \n     if (!isRecovery) {\n-      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n+      validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumAllocation, String queueName, YarnScheduler scheduler,\n      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n            + \" request contains a label expression.\";\n        LOG.warn(message);\n        if (!isRecovery) {\n          throw new InvalidLabelResourceRequestException(\n              \"Invalid resource request, node label not enabled \"\n                  + \"but request contains label expression\");\n        }\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n      } catch (IOException e) {\n        //Queue may not exist since it could be auto-created in case of\n        // dynamic queues\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal Bálint Steinbach.\n",
          "commitDate": "29/09/18 2:47 AM",
          "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "27/07/18 2:35 PM",
          "commitNameOld": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 63.51,
          "commitsBetweenForRepo": 571,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-  private static void normalizeAndValidateRequest(ResourceRequest resReq,\n-          Resource maximumResource, String queueName, YarnScheduler scheduler,\n-          boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n+  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n+      Resource maximumAllocation, String queueName, YarnScheduler scheduler,\n+      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n     Configuration conf \u003d rmContext.getYarnConfiguration();\n     // If Node label is not enabled throw exception\n     if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       String labelExp \u003d resReq.getNodeLabelExpression();\n       if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n           || null \u003d\u003d labelExp)) {\n         String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n             + \" request contains a label expression.\";\n         LOG.warn(message);\n         if (!isRecovery) {\n           throw new InvalidLabelResourceRequestException(\n               \"Invalid resource request, node label not enabled \"\n                   + \"but request contains label expression\");\n         }\n       }\n     }\n     if (null \u003d\u003d queueInfo) {\n       try {\n         queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n       } catch (IOException e) {\n         //Queue may not exist since it could be auto-created in case of\n         // dynamic queues\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n \n     if (!isRecovery) {\n-      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n+      validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumAllocation, String queueName, YarnScheduler scheduler,\n      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n            + \" request contains a label expression.\";\n        LOG.warn(message);\n        if (!isRecovery) {\n          throw new InvalidLabelResourceRequestException(\n              \"Invalid resource request, node label not enabled \"\n                  + \"but request contains label expression\");\n        }\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n      } catch (IOException e) {\n        //Queue may not exist since it could be auto-created in case of\n        // dynamic queues\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumAllocation, queueInfo, rmContext);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "2cccf4061cc4021c48e29879700dbc94f832b7d1": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-8517. getContainer and getContainers ResourceManager REST API methods are not documented (snemeth via rkanter)\n",
      "commitDate": "27/07/18 2:35 PM",
      "commitName": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 45.25,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n-  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n-      Resource maximumResource, String queueName, YarnScheduler scheduler,\n-      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n+  private static void normalizeAndValidateRequest(ResourceRequest resReq,\n+          Resource maximumResource, String queueName, YarnScheduler scheduler,\n+          boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n     Configuration conf \u003d rmContext.getYarnConfiguration();\n     // If Node label is not enabled throw exception\n     if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       String labelExp \u003d resReq.getNodeLabelExpression();\n       if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n           || null \u003d\u003d labelExp)) {\n         String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n             + \" request contains a label expression.\";\n         LOG.warn(message);\n         if (!isRecovery) {\n           throw new InvalidLabelResourceRequestException(\n               \"Invalid resource request, node label not enabled \"\n                   + \"but request contains label expression\");\n         }\n       }\n     }\n     if (null \u003d\u003d queueInfo) {\n       try {\n         queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n       } catch (IOException e) {\n         //Queue may not exist since it could be auto-created in case of\n         // dynamic queues\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n \n     if (!isRecovery) {\n       validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void normalizeAndValidateRequest(ResourceRequest resReq,\n          Resource maximumResource, String queueName, YarnScheduler scheduler,\n          boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n            + \" request contains a label expression.\";\n        LOG.warn(message);\n        if (!isRecovery) {\n          throw new InvalidLabelResourceRequestException(\n              \"Invalid resource request, node label not enabled \"\n                  + \"but request contains label expression\");\n        }\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n      } catch (IOException e) {\n        //Queue may not exist since it could be auto-created in case of\n        // dynamic queues\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {
        "oldValue": "[public, static]",
        "newValue": "[private, static]"
      }
    },
    "821b0de4c59156d4a65112de03ba3e7e1c88e309": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7574. Add support for Node Labels on Auto Created Leaf Queue Template. Contributed by Suma Shivaprasad.\n",
      "commitDate": "09/04/18 8:47 AM",
      "commitName": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
      "commitAuthor": "Sunil G",
      "commitDateOld": "15/02/18 11:07 PM",
      "commitNameOld": "aae629913cee0157c945a2c7384c7bf398f10616",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 52.36,
      "commitsBetweenForRepo": 457,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public static void normalizeAndValidateRequest(ResourceRequest resReq,\n       Resource maximumResource, String queueName, YarnScheduler scheduler,\n       boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n     Configuration conf \u003d rmContext.getYarnConfiguration();\n     // If Node label is not enabled throw exception\n     if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       String labelExp \u003d resReq.getNodeLabelExpression();\n       if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n           || null \u003d\u003d labelExp)) {\n         String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n             + \" request contains a label expression.\";\n         LOG.warn(message);\n         if (!isRecovery) {\n           throw new InvalidLabelResourceRequestException(\n               \"Invalid resource request, node label not enabled \"\n                   + \"but request contains label expression\");\n         }\n       }\n     }\n     if (null \u003d\u003d queueInfo) {\n       try {\n         queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n       } catch (IOException e) {\n-        // it is possible queue cannot get when queue mapping is set, just ignore\n-        // the queueInfo here, and move forward\n+        //Queue may not exist since it could be auto-created in case of\n+        // dynamic queues\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n+\n     if (!isRecovery) {\n       validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumResource, String queueName, YarnScheduler scheduler,\n      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n            + \" request contains a label expression.\";\n        LOG.warn(message);\n        if (!isRecovery) {\n          throw new InvalidLabelResourceRequestException(\n              \"Invalid resource request, node label not enabled \"\n                  + \"but request contains label expression\");\n        }\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n      } catch (IOException e) {\n        //Queue may not exist since it could be auto-created in case of\n        // dynamic queues\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "91f120f743662c6e037e8f21b1792e81d58ac664": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6872. Ensure apps could run given NodeLabels are disabled post RM switchover/restart. Contributed by Sunil G\n",
      "commitDate": "01/08/17 9:56 AM",
      "commitName": "91f120f743662c6e037e8f21b1792e81d58ac664",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/07/17 3:27 AM",
      "commitNameOld": "c5a0c38d8e1752031d1dd8bdd4a7a3894cf775cb",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 23.27,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,33 @@\n   public static void normalizeAndValidateRequest(ResourceRequest resReq,\n       Resource maximumResource, String queueName, YarnScheduler scheduler,\n       boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n     Configuration conf \u003d rmContext.getYarnConfiguration();\n     // If Node label is not enabled throw exception\n     if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       String labelExp \u003d resReq.getNodeLabelExpression();\n       if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n           || null \u003d\u003d labelExp)) {\n-        throw new InvalidLabelResourceRequestException(\n-            \"Invalid resource request, node label not enabled \"\n-                + \"but request contains label expression\");\n+        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n+            + \" request contains a label expression.\";\n+        LOG.warn(message);\n+        if (!isRecovery) {\n+          throw new InvalidLabelResourceRequestException(\n+              \"Invalid resource request, node label not enabled \"\n+                  + \"but request contains label expression\");\n+        }\n       }\n     }\n     if (null \u003d\u003d queueInfo) {\n       try {\n         queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n       } catch (IOException e) {\n         // it is possible queue cannot get when queue mapping is set, just ignore\n         // the queueInfo here, and move forward\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n     if (!isRecovery) {\n       validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumResource, String queueName, YarnScheduler scheduler,\n      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        String message \u003d \"NodeLabel is not enabled in cluster, but resource\"\n            + \" request contains a label expression.\";\n        LOG.warn(message);\n        if (!isRecovery) {\n          throw new InvalidLabelResourceRequestException(\n              \"Invalid resource request, node label not enabled \"\n                  + \"but request contains label expression\");\n        }\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n      } catch (IOException e) {\n        // it is possible queue cannot get when queue mapping is set, just ignore\n        // the queueInfo here, and move forward\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "0233d4e0ee9947a95c018b1539310fc0bff6c44e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4465. SchedulerUtils#validateRequest for Label check should happen only when nodelabel enabled. (Bibin A Chundatt via wangda)\n",
      "commitDate": "08/03/16 2:27 PM",
      "commitName": "0233d4e0ee9947a95c018b1539310fc0bff6c44e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/01/16 8:53 PM",
      "commitNameOld": "9e792da01419998c2ebfafd7161070150d85d3ac",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 56.73,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,28 @@\n   public static void normalizeAndValidateRequest(ResourceRequest resReq,\n       Resource maximumResource, String queueName, YarnScheduler scheduler,\n       boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n       throws InvalidResourceRequestException {\n+    Configuration conf \u003d rmContext.getYarnConfiguration();\n+    // If Node label is not enabled throw exception\n+    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n+      String labelExp \u003d resReq.getNodeLabelExpression();\n+      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n+          || null \u003d\u003d labelExp)) {\n+        throw new InvalidLabelResourceRequestException(\n+            \"Invalid resource request, node label not enabled \"\n+                + \"but request contains label expression\");\n+      }\n+    }\n     if (null \u003d\u003d queueInfo) {\n       try {\n         queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n       } catch (IOException e) {\n         // it is possible queue cannot get when queue mapping is set, just ignore\n         // the queueInfo here, and move forward\n       }\n     }\n     SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n     if (!isRecovery) {\n       validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumResource, String queueName, YarnScheduler scheduler,\n      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    Configuration conf \u003d rmContext.getYarnConfiguration();\n    // If Node label is not enabled throw exception\n    if (null !\u003d conf \u0026\u0026 !YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      String labelExp \u003d resReq.getNodeLabelExpression();\n      if (!(RMNodeLabelsManager.NO_LABEL.equals(labelExp)\n          || null \u003d\u003d labelExp)) {\n        throw new InvalidLabelResourceRequestException(\n            \"Invalid resource request, node label not enabled \"\n                + \"but request contains label expression\");\n      }\n    }\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n      } catch (IOException e) {\n        // it is possible queue cannot get when queue mapping is set, just ignore\n        // the queueInfo here, and move forward\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "d6f6741296639a73f5306e3ebefec84a40ca03e5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3489. RMServerUtils.validateResourceRequests should only obtain queue info once. (Varun Saxena via wangda)\n",
      "commitDate": "11/05/15 5:31 PM",
      "commitName": "d6f6741296639a73f5306e3ebefec84a40ca03e5",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,17 @@\n+  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n+      Resource maximumResource, String queueName, YarnScheduler scheduler,\n+      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n+      throws InvalidResourceRequestException {\n+    if (null \u003d\u003d queueInfo) {\n+      try {\n+        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n+      } catch (IOException e) {\n+        // it is possible queue cannot get when queue mapping is set, just ignore\n+        // the queueInfo here, and move forward\n+      }\n+    }\n+    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n+    if (!isRecovery) {\n+      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void normalizeAndValidateRequest(ResourceRequest resReq,\n      Resource maximumResource, String queueName, YarnScheduler scheduler,\n      boolean isRecovery, RMContext rmContext, QueueInfo queueInfo)\n      throws InvalidResourceRequestException {\n    if (null \u003d\u003d queueInfo) {\n      try {\n        queueInfo \u003d scheduler.getQueueInfo(queueName, false, false);\n      } catch (IOException e) {\n        // it is possible queue cannot get when queue mapping is set, just ignore\n        // the queueInfo here, and move forward\n      }\n    }\n    SchedulerUtils.normalizeNodeLabelExpressionInRequest(resReq, queueInfo);\n    if (!isRecovery) {\n      validateResourceRequest(resReq, maximumResource, queueInfo, rmContext);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java"
    }
  }
}