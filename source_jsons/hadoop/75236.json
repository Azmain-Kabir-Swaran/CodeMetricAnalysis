{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HAAdmin.java",
  "functionName": "runCmd",
  "functionId": "runCmd___argv-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
  "functionStartLine": 387,
  "functionEndLine": 437,
  "numCommitsSeen": 43,
  "timeTaken": 3043,
  "changeHistory": [
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76",
    "cbc2f932eb3caeacd4b22f0ca964f60426becdee",
    "091ad974cd29fae0cf8fbc98ab84900a1a324839",
    "ccaf036662e22da14583942054898c99fa51dae5",
    "e407449ddb52c36b74358f22db498424e82ec4a7",
    "88e76f9c45e57c9fad52864cfd46794fefb02615",
    "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
    "7b913180be9cb8f5aaded964179d6313add2f13f",
    "fb9cdcfa60cb641faded2d3843c81e969ac33147",
    "45e81ae415141c306df9746353faec2f9f151ab1",
    "b4992f671d36e35fd874958ffbc9e66abc29a725"
  ],
  "changeHistoryShort": {
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76": "Ybodychange",
    "cbc2f932eb3caeacd4b22f0ca964f60426becdee": "Ybodychange",
    "091ad974cd29fae0cf8fbc98ab84900a1a324839": "Ybodychange",
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "e407449ddb52c36b74358f22db498424e82ec4a7": "Ybodychange",
    "88e76f9c45e57c9fad52864cfd46794fefb02615": "Ybodychange",
    "41a014c31b3e435354a25d4b7d53f0bd2cede9a1": "Ybodychange",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": "Ybodychange",
    "7b913180be9cb8f5aaded964179d6313add2f13f": "Ymultichange(Yrename,Ymodifierchange)",
    "fb9cdcfa60cb641faded2d3843c81e969ac33147": "Ybodychange",
    "45e81ae415141c306df9746353faec2f9f151ab1": "Ybodychange",
    "b4992f671d36e35fd874958ffbc9e66abc29a725": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16753. Refactor HAAdmin. Contributed by Xieming Li.\n",
      "commitDate": "20/01/20 5:58 PM",
      "commitName": "1defe3a65af5faf5117978f4f2cf6a24d17a2e76",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/12/18 9:34 AM",
      "commitNameOld": "cbc2f932eb3caeacd4b22f0ca964f60426becdee",
      "commitAuthorOld": "Chao Sun",
      "daysBetweenCommits": 392.35,
      "commitsBetweenForRepo": 2588,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,51 @@\n   protected int runCmd(String[] argv) throws Exception {\n-    if (argv.length \u003c 1) {\n-      printUsage(errOut);\n+    if (!checkParameterValidity(argv, USAGE)){\n       return -1;\n     }\n \n     String cmd \u003d argv[0];\n-\n-    if (!cmd.startsWith(\"-\")) {\n-      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n-      printUsage(errOut);\n-      return -1;\n-    }\n-    \n-    if (!USAGE.containsKey(cmd)) {\n-      errOut.println(cmd.substring(1) + \": Unknown command\");\n-      printUsage(errOut);\n-      return -1;\n-    }\n-    \n     Options opts \u003d new Options();\n-\n     // Add command-specific options\n-    if (\"-failover\".equals(cmd)) {\n-      addFailoverCliOpts(opts);\n-    }\n     if(\"-transitionToActive\".equals(cmd)) {\n       addTransitionToActiveCliOpts(opts);\n     }\n     // Mutative commands take FORCEMANUAL option\n     if (\"-transitionToActive\".equals(cmd) ||\n-        \"-transitionToStandby\".equals(cmd) ||\n-        \"-transitionToObserver\".equals(cmd) ||\n-        \"-failover\".equals(cmd)) {\n+        \"-transitionToStandby\".equals(cmd)) {\n       opts.addOption(FORCEMANUAL, false,\n           \"force manual control even if auto-failover is enabled\");\n     }\n-         \n     CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n     if (cmdLine \u003d\u003d null) {\n       // error already printed\n       return -1;\n     }\n     \n     if (cmdLine.hasOption(FORCEMANUAL)) {\n       if (!confirmForceManual()) {\n         LOG.error(\"Aborted\");\n         return -1;\n       }\n       // Instruct the NNs to honor this request even if they\u0027re\n       // configured for manual failover.\n       requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n     }\n \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(cmdLine);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(cmdLine);\n-    } else if (\"-transitionToObserver\".equals(cmd)) {\n-      return transitionToObserver(cmdLine);\n-    } else if (\"-failover\".equals(cmd)) {\n-      return failover(cmdLine);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(cmdLine);\n     } else if (\"-getAllServiceState\".equals(cmd)) {\n       return getAllServiceState();\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(cmdLine);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       // we already checked command validity above, so getting here\n       // would be a coding error\n       throw new AssertionError(\"Should not get here, command: \" + cmd);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (!checkParameterValidity(argv, USAGE)){\n      return -1;\n    }\n\n    String cmd \u003d argv[0];\n    Options opts \u003d new Options();\n    // Add command-specific options\n    if(\"-transitionToActive\".equals(cmd)) {\n      addTransitionToActiveCliOpts(opts);\n    }\n    // Mutative commands take FORCEMANUAL option\n    if (\"-transitionToActive\".equals(cmd) ||\n        \"-transitionToStandby\".equals(cmd)) {\n      opts.addOption(FORCEMANUAL, false,\n          \"force manual control even if auto-failover is enabled\");\n    }\n    CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n    if (cmdLine \u003d\u003d null) {\n      // error already printed\n      return -1;\n    }\n    \n    if (cmdLine.hasOption(FORCEMANUAL)) {\n      if (!confirmForceManual()) {\n        LOG.error(\"Aborted\");\n        return -1;\n      }\n      // Instruct the NNs to honor this request even if they\u0027re\n      // configured for manual failover.\n      requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(cmdLine);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(cmdLine);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(cmdLine);\n    } else if (\"-getAllServiceState\".equals(cmd)) {\n      return getAllServiceState();\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(cmdLine);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      // we already checked command validity above, so getting here\n      // would be a coding error\n      throw new AssertionError(\"Should not get here, command: \" + cmd);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "cbc2f932eb3caeacd4b22f0ca964f60426becdee": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14067. [SBN read] Allow manual failover between standby and observer. Contributed by Chao Sun.",
      "commitDate": "24/12/18 9:34 AM",
      "commitName": "cbc2f932eb3caeacd4b22f0ca964f60426becdee",
      "commitAuthor": "Chao Sun",
      "commitDateOld": "24/12/18 9:33 AM",
      "commitNameOld": "091ad974cd29fae0cf8fbc98ab84900a1a324839",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,76 @@\n   protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     String cmd \u003d argv[0];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     if (!USAGE.containsKey(cmd)) {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     Options opts \u003d new Options();\n \n     // Add command-specific options\n     if (\"-failover\".equals(cmd)) {\n       addFailoverCliOpts(opts);\n     }\n     if(\"-transitionToActive\".equals(cmd)) {\n       addTransitionToActiveCliOpts(opts);\n     }\n     // Mutative commands take FORCEMANUAL option\n     if (\"-transitionToActive\".equals(cmd) ||\n         \"-transitionToStandby\".equals(cmd) ||\n+        \"-transitionToObserver\".equals(cmd) ||\n         \"-failover\".equals(cmd)) {\n       opts.addOption(FORCEMANUAL, false,\n           \"force manual control even if auto-failover is enabled\");\n     }\n          \n     CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n     if (cmdLine \u003d\u003d null) {\n       // error already printed\n       return -1;\n     }\n     \n     if (cmdLine.hasOption(FORCEMANUAL)) {\n       if (!confirmForceManual()) {\n         LOG.error(\"Aborted\");\n         return -1;\n       }\n       // Instruct the NNs to honor this request even if they\u0027re\n       // configured for manual failover.\n       requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n     }\n \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(cmdLine);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(cmdLine);\n     } else if (\"-transitionToObserver\".equals(cmd)) {\n       return transitionToObserver(cmdLine);\n     } else if (\"-failover\".equals(cmd)) {\n       return failover(cmdLine);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(cmdLine);\n     } else if (\"-getAllServiceState\".equals(cmd)) {\n       return getAllServiceState();\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(cmdLine);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       // we already checked command validity above, so getting here\n       // would be a coding error\n       throw new AssertionError(\"Should not get here, command: \" + cmd);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    String cmd \u003d argv[0];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (!USAGE.containsKey(cmd)) {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    Options opts \u003d new Options();\n\n    // Add command-specific options\n    if (\"-failover\".equals(cmd)) {\n      addFailoverCliOpts(opts);\n    }\n    if(\"-transitionToActive\".equals(cmd)) {\n      addTransitionToActiveCliOpts(opts);\n    }\n    // Mutative commands take FORCEMANUAL option\n    if (\"-transitionToActive\".equals(cmd) ||\n        \"-transitionToStandby\".equals(cmd) ||\n        \"-transitionToObserver\".equals(cmd) ||\n        \"-failover\".equals(cmd)) {\n      opts.addOption(FORCEMANUAL, false,\n          \"force manual control even if auto-failover is enabled\");\n    }\n         \n    CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n    if (cmdLine \u003d\u003d null) {\n      // error already printed\n      return -1;\n    }\n    \n    if (cmdLine.hasOption(FORCEMANUAL)) {\n      if (!confirmForceManual()) {\n        LOG.error(\"Aborted\");\n        return -1;\n      }\n      // Instruct the NNs to honor this request even if they\u0027re\n      // configured for manual failover.\n      requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(cmdLine);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(cmdLine);\n    } else if (\"-transitionToObserver\".equals(cmd)) {\n      return transitionToObserver(cmdLine);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(cmdLine);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(cmdLine);\n    } else if (\"-getAllServiceState\".equals(cmd)) {\n      return getAllServiceState();\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(cmdLine);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      // we already checked command validity above, so getting here\n      // would be a coding error\n      throw new AssertionError(\"Should not get here, command: \" + cmd);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "091ad974cd29fae0cf8fbc98ab84900a1a324839": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13286. [SBN read] Add haadmin commands to transition between standby and observer. Contributed by Chao Sun.\n",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "091ad974cd29fae0cf8fbc98ab84900a1a324839",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 74.53,
      "commitsBetweenForRepo": 564,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,75 @@\n   protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     String cmd \u003d argv[0];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     if (!USAGE.containsKey(cmd)) {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     Options opts \u003d new Options();\n \n     // Add command-specific options\n     if (\"-failover\".equals(cmd)) {\n       addFailoverCliOpts(opts);\n     }\n     if(\"-transitionToActive\".equals(cmd)) {\n       addTransitionToActiveCliOpts(opts);\n     }\n     // Mutative commands take FORCEMANUAL option\n     if (\"-transitionToActive\".equals(cmd) ||\n         \"-transitionToStandby\".equals(cmd) ||\n         \"-failover\".equals(cmd)) {\n       opts.addOption(FORCEMANUAL, false,\n           \"force manual control even if auto-failover is enabled\");\n     }\n          \n     CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n     if (cmdLine \u003d\u003d null) {\n       // error already printed\n       return -1;\n     }\n     \n     if (cmdLine.hasOption(FORCEMANUAL)) {\n       if (!confirmForceManual()) {\n         LOG.error(\"Aborted\");\n         return -1;\n       }\n       // Instruct the NNs to honor this request even if they\u0027re\n       // configured for manual failover.\n       requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n     }\n \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(cmdLine);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(cmdLine);\n+    } else if (\"-transitionToObserver\".equals(cmd)) {\n+      return transitionToObserver(cmdLine);\n     } else if (\"-failover\".equals(cmd)) {\n       return failover(cmdLine);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(cmdLine);\n     } else if (\"-getAllServiceState\".equals(cmd)) {\n       return getAllServiceState();\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(cmdLine);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       // we already checked command validity above, so getting here\n       // would be a coding error\n       throw new AssertionError(\"Should not get here, command: \" + cmd);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    String cmd \u003d argv[0];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (!USAGE.containsKey(cmd)) {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    Options opts \u003d new Options();\n\n    // Add command-specific options\n    if (\"-failover\".equals(cmd)) {\n      addFailoverCliOpts(opts);\n    }\n    if(\"-transitionToActive\".equals(cmd)) {\n      addTransitionToActiveCliOpts(opts);\n    }\n    // Mutative commands take FORCEMANUAL option\n    if (\"-transitionToActive\".equals(cmd) ||\n        \"-transitionToStandby\".equals(cmd) ||\n        \"-failover\".equals(cmd)) {\n      opts.addOption(FORCEMANUAL, false,\n          \"force manual control even if auto-failover is enabled\");\n    }\n         \n    CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n    if (cmdLine \u003d\u003d null) {\n      // error already printed\n      return -1;\n    }\n    \n    if (cmdLine.hasOption(FORCEMANUAL)) {\n      if (!confirmForceManual()) {\n        LOG.error(\"Aborted\");\n        return -1;\n      }\n      // Instruct the NNs to honor this request even if they\u0027re\n      // configured for manual failover.\n      requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(cmdLine);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(cmdLine);\n    } else if (\"-transitionToObserver\".equals(cmd)) {\n      return transitionToObserver(cmdLine);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(cmdLine);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(cmdLine);\n    } else if (\"-getAllServiceState\".equals(cmd)) {\n      return getAllServiceState();\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(cmdLine);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      // we already checked command validity above, so getting here\n      // would be a coding error\n      throw new AssertionError(\"Should not get here, command: \" + cmd);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "16/01/17 5:10 PM",
      "commitNameOld": "e407449ddb52c36b74358f22db498424e82ec4a7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 182.14,
      "commitsBetweenForRepo": 969,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     String cmd \u003d argv[0];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     if (!USAGE.containsKey(cmd)) {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     Options opts \u003d new Options();\n \n     // Add command-specific options\n     if (\"-failover\".equals(cmd)) {\n       addFailoverCliOpts(opts);\n     }\n     if(\"-transitionToActive\".equals(cmd)) {\n       addTransitionToActiveCliOpts(opts);\n     }\n     // Mutative commands take FORCEMANUAL option\n     if (\"-transitionToActive\".equals(cmd) ||\n         \"-transitionToStandby\".equals(cmd) ||\n         \"-failover\".equals(cmd)) {\n       opts.addOption(FORCEMANUAL, false,\n           \"force manual control even if auto-failover is enabled\");\n     }\n          \n     CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n     if (cmdLine \u003d\u003d null) {\n       // error already printed\n       return -1;\n     }\n     \n     if (cmdLine.hasOption(FORCEMANUAL)) {\n       if (!confirmForceManual()) {\n-        LOG.fatal(\"Aborted\");\n+        LOG.error(\"Aborted\");\n         return -1;\n       }\n       // Instruct the NNs to honor this request even if they\u0027re\n       // configured for manual failover.\n       requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n     }\n \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(cmdLine);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(cmdLine);\n     } else if (\"-failover\".equals(cmd)) {\n       return failover(cmdLine);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(cmdLine);\n     } else if (\"-getAllServiceState\".equals(cmd)) {\n       return getAllServiceState();\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(cmdLine);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       // we already checked command validity above, so getting here\n       // would be a coding error\n       throw new AssertionError(\"Should not get here, command: \" + cmd);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    String cmd \u003d argv[0];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (!USAGE.containsKey(cmd)) {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    Options opts \u003d new Options();\n\n    // Add command-specific options\n    if (\"-failover\".equals(cmd)) {\n      addFailoverCliOpts(opts);\n    }\n    if(\"-transitionToActive\".equals(cmd)) {\n      addTransitionToActiveCliOpts(opts);\n    }\n    // Mutative commands take FORCEMANUAL option\n    if (\"-transitionToActive\".equals(cmd) ||\n        \"-transitionToStandby\".equals(cmd) ||\n        \"-failover\".equals(cmd)) {\n      opts.addOption(FORCEMANUAL, false,\n          \"force manual control even if auto-failover is enabled\");\n    }\n         \n    CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n    if (cmdLine \u003d\u003d null) {\n      // error already printed\n      return -1;\n    }\n    \n    if (cmdLine.hasOption(FORCEMANUAL)) {\n      if (!confirmForceManual()) {\n        LOG.error(\"Aborted\");\n        return -1;\n      }\n      // Instruct the NNs to honor this request even if they\u0027re\n      // configured for manual failover.\n      requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(cmdLine);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(cmdLine);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(cmdLine);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(cmdLine);\n    } else if (\"-getAllServiceState\".equals(cmd)) {\n      return getAllServiceState();\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(cmdLine);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      // we already checked command validity above, so getting here\n      // would be a coding error\n      throw new AssertionError(\"Should not get here, command: \" + cmd);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "e407449ddb52c36b74358f22db498424e82ec4a7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13933. Add haadmin -getAllServiceState option to get the HA state of all the NameNodes/ResourceManagers. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "16/01/17 5:10 PM",
      "commitName": "e407449ddb52c36b74358f22db498424e82ec4a7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "01/05/15 4:40 PM",
      "commitNameOld": "7d46a806e71de6692cd230e64e7de18a8252019d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 626.06,
      "commitsBetweenForRepo": 4547,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,73 @@\n   protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     String cmd \u003d argv[0];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     if (!USAGE.containsKey(cmd)) {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     Options opts \u003d new Options();\n \n     // Add command-specific options\n     if (\"-failover\".equals(cmd)) {\n       addFailoverCliOpts(opts);\n     }\n     if(\"-transitionToActive\".equals(cmd)) {\n       addTransitionToActiveCliOpts(opts);\n     }\n     // Mutative commands take FORCEMANUAL option\n     if (\"-transitionToActive\".equals(cmd) ||\n         \"-transitionToStandby\".equals(cmd) ||\n         \"-failover\".equals(cmd)) {\n       opts.addOption(FORCEMANUAL, false,\n           \"force manual control even if auto-failover is enabled\");\n     }\n          \n     CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n     if (cmdLine \u003d\u003d null) {\n       // error already printed\n       return -1;\n     }\n     \n     if (cmdLine.hasOption(FORCEMANUAL)) {\n       if (!confirmForceManual()) {\n         LOG.fatal(\"Aborted\");\n         return -1;\n       }\n       // Instruct the NNs to honor this request even if they\u0027re\n       // configured for manual failover.\n       requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n     }\n \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(cmdLine);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(cmdLine);\n     } else if (\"-failover\".equals(cmd)) {\n       return failover(cmdLine);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(cmdLine);\n+    } else if (\"-getAllServiceState\".equals(cmd)) {\n+      return getAllServiceState();\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(cmdLine);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       // we already checked command validity above, so getting here\n       // would be a coding error\n       throw new AssertionError(\"Should not get here, command: \" + cmd);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    String cmd \u003d argv[0];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (!USAGE.containsKey(cmd)) {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    Options opts \u003d new Options();\n\n    // Add command-specific options\n    if (\"-failover\".equals(cmd)) {\n      addFailoverCliOpts(opts);\n    }\n    if(\"-transitionToActive\".equals(cmd)) {\n      addTransitionToActiveCliOpts(opts);\n    }\n    // Mutative commands take FORCEMANUAL option\n    if (\"-transitionToActive\".equals(cmd) ||\n        \"-transitionToStandby\".equals(cmd) ||\n        \"-failover\".equals(cmd)) {\n      opts.addOption(FORCEMANUAL, false,\n          \"force manual control even if auto-failover is enabled\");\n    }\n         \n    CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n    if (cmdLine \u003d\u003d null) {\n      // error already printed\n      return -1;\n    }\n    \n    if (cmdLine.hasOption(FORCEMANUAL)) {\n      if (!confirmForceManual()) {\n        LOG.fatal(\"Aborted\");\n        return -1;\n      }\n      // Instruct the NNs to honor this request even if they\u0027re\n      // configured for manual failover.\n      requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(cmdLine);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(cmdLine);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(cmdLine);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(cmdLine);\n    } else if (\"-getAllServiceState\".equals(cmd)) {\n      return getAllServiceState();\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(cmdLine);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      // we already checked command validity above, so getting here\n      // would be a coding error\n      throw new AssertionError(\"Should not get here, command: \" + cmd);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "88e76f9c45e57c9fad52864cfd46794fefb02615": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2949. Add check to active state transition to prevent operator-induced split brain. Contributed by Rushabh S Shah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594709 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/05/14 1:45 PM",
      "commitName": "88e76f9c45e57c9fad52864cfd46794fefb02615",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "29/10/13 2:03 PM",
      "commitNameOld": "03510d00f48137fe4273c3e694e87fc0e660a706",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 196.99,
      "commitsBetweenForRepo": 1339,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,71 @@\n   protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     String cmd \u003d argv[0];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     if (!USAGE.containsKey(cmd)) {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     Options opts \u003d new Options();\n \n     // Add command-specific options\n     if (\"-failover\".equals(cmd)) {\n       addFailoverCliOpts(opts);\n     }\n+    if(\"-transitionToActive\".equals(cmd)) {\n+      addTransitionToActiveCliOpts(opts);\n+    }\n     // Mutative commands take FORCEMANUAL option\n     if (\"-transitionToActive\".equals(cmd) ||\n         \"-transitionToStandby\".equals(cmd) ||\n         \"-failover\".equals(cmd)) {\n       opts.addOption(FORCEMANUAL, false,\n           \"force manual control even if auto-failover is enabled\");\n     }\n          \n     CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n     if (cmdLine \u003d\u003d null) {\n       // error already printed\n       return -1;\n     }\n     \n     if (cmdLine.hasOption(FORCEMANUAL)) {\n       if (!confirmForceManual()) {\n         LOG.fatal(\"Aborted\");\n         return -1;\n       }\n       // Instruct the NNs to honor this request even if they\u0027re\n       // configured for manual failover.\n       requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n     }\n \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(cmdLine);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(cmdLine);\n     } else if (\"-failover\".equals(cmd)) {\n       return failover(cmdLine);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(cmdLine);\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(cmdLine);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       // we already checked command validity above, so getting here\n       // would be a coding error\n       throw new AssertionError(\"Should not get here, command: \" + cmd);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    String cmd \u003d argv[0];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (!USAGE.containsKey(cmd)) {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    Options opts \u003d new Options();\n\n    // Add command-specific options\n    if (\"-failover\".equals(cmd)) {\n      addFailoverCliOpts(opts);\n    }\n    if(\"-transitionToActive\".equals(cmd)) {\n      addTransitionToActiveCliOpts(opts);\n    }\n    // Mutative commands take FORCEMANUAL option\n    if (\"-transitionToActive\".equals(cmd) ||\n        \"-transitionToStandby\".equals(cmd) ||\n        \"-failover\".equals(cmd)) {\n      opts.addOption(FORCEMANUAL, false,\n          \"force manual control even if auto-failover is enabled\");\n    }\n         \n    CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n    if (cmdLine \u003d\u003d null) {\n      // error already printed\n      return -1;\n    }\n    \n    if (cmdLine.hasOption(FORCEMANUAL)) {\n      if (!confirmForceManual()) {\n        LOG.fatal(\"Aborted\");\n        return -1;\n      }\n      // Instruct the NNs to honor this request even if they\u0027re\n      // configured for manual failover.\n      requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(cmdLine);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(cmdLine);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(cmdLine);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(cmdLine);\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(cmdLine);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      // we already checked command validity above, so getting here\n      // would be a coding error\n      throw new AssertionError(\"Should not get here, command: \" + cmd);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "41a014c31b3e435354a25d4b7d53f0bd2cede9a1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8247. Add a config to enable auto-HA, which disables manual FailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1324566 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/12 10:40 PM",
      "commitName": "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "03/04/12 1:41 PM",
      "commitNameOld": "84ff2d6d066ee7d854dfcb93bb85df7b98a3d761",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 7.37,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,68 @@\n   protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     String cmd \u003d argv[0];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n-\n-    if (\"-transitionToActive\".equals(cmd)) {\n-      return transitionToActive(argv);\n-    } else if (\"-transitionToStandby\".equals(cmd)) {\n-      return transitionToStandby(argv);\n-    } else if (\"-failover\".equals(cmd)) {\n-      return failover(argv);\n-    } else if (\"-getServiceState\".equals(cmd)) {\n-      return getServiceState(argv);\n-    } else if (\"-checkHealth\".equals(cmd)) {\n-      return checkHealth(argv);\n-    } else if (\"-help\".equals(cmd)) {\n-      return help(argv);\n-    } else {\n+    \n+    if (!USAGE.containsKey(cmd)) {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n+    }\n+    \n+    Options opts \u003d new Options();\n+\n+    // Add command-specific options\n+    if (\"-failover\".equals(cmd)) {\n+      addFailoverCliOpts(opts);\n+    }\n+    // Mutative commands take FORCEMANUAL option\n+    if (\"-transitionToActive\".equals(cmd) ||\n+        \"-transitionToStandby\".equals(cmd) ||\n+        \"-failover\".equals(cmd)) {\n+      opts.addOption(FORCEMANUAL, false,\n+          \"force manual control even if auto-failover is enabled\");\n+    }\n+         \n+    CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n+    if (cmdLine \u003d\u003d null) {\n+      // error already printed\n+      return -1;\n+    }\n+    \n+    if (cmdLine.hasOption(FORCEMANUAL)) {\n+      if (!confirmForceManual()) {\n+        LOG.fatal(\"Aborted\");\n+        return -1;\n+      }\n+      // Instruct the NNs to honor this request even if they\u0027re\n+      // configured for manual failover.\n+      requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n+    }\n+\n+    if (\"-transitionToActive\".equals(cmd)) {\n+      return transitionToActive(cmdLine);\n+    } else if (\"-transitionToStandby\".equals(cmd)) {\n+      return transitionToStandby(cmdLine);\n+    } else if (\"-failover\".equals(cmd)) {\n+      return failover(cmdLine);\n+    } else if (\"-getServiceState\".equals(cmd)) {\n+      return getServiceState(cmdLine);\n+    } else if (\"-checkHealth\".equals(cmd)) {\n+      return checkHealth(cmdLine);\n+    } else if (\"-help\".equals(cmd)) {\n+      return help(argv);\n+    } else {\n+      // we already checked command validity above, so getting here\n+      // would be a coding error\n+      throw new AssertionError(\"Should not get here, command: \" + cmd);\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    String cmd \u003d argv[0];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (!USAGE.containsKey(cmd)) {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    Options opts \u003d new Options();\n\n    // Add command-specific options\n    if (\"-failover\".equals(cmd)) {\n      addFailoverCliOpts(opts);\n    }\n    // Mutative commands take FORCEMANUAL option\n    if (\"-transitionToActive\".equals(cmd) ||\n        \"-transitionToStandby\".equals(cmd) ||\n        \"-failover\".equals(cmd)) {\n      opts.addOption(FORCEMANUAL, false,\n          \"force manual control even if auto-failover is enabled\");\n    }\n         \n    CommandLine cmdLine \u003d parseOpts(cmd, opts, argv);\n    if (cmdLine \u003d\u003d null) {\n      // error already printed\n      return -1;\n    }\n    \n    if (cmdLine.hasOption(FORCEMANUAL)) {\n      if (!confirmForceManual()) {\n        LOG.fatal(\"Aborted\");\n        return -1;\n      }\n      // Instruct the NNs to honor this request even if they\u0027re\n      // configured for manual failover.\n      requestSource \u003d RequestSource.REQUEST_BY_USER_FORCED;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(cmdLine);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(cmdLine);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(cmdLine);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(cmdLine);\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(cmdLine);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      // we already checked command validity above, so getting here\n      // would be a coding error\n      throw new AssertionError(\"Should not get here, command: \" + cmd);\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3039. Address findbugs and javadoc warnings on branch. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1296017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/03/12 5:32 PM",
      "commitName": "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "16/02/12 11:37 PM",
      "commitNameOld": "7933dc583838fa7273cf55c03400a591a41d23db",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 13.75,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n-    int i \u003d 0;\n-    String cmd \u003d argv[i++];\n+    String cmd \u003d argv[0];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(argv);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(argv);\n     } else if (\"-failover\".equals(cmd)) {\n       return failover(argv);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(argv);\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(argv);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    String cmd \u003d argv[0];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(argv);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(argv);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(argv);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(argv);\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(argv);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "7b913180be9cb8f5aaded964179d6313add2f13f": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "HDFS-2808. HA: haadmin should use namenode ids. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/12 12:12 PM",
      "commitName": "7b913180be9cb8f5aaded964179d6313add2f13f",
      "commitAuthor": "Eli Collins",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-2808. HA: haadmin should use namenode ids. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240600 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/02/12 12:12 PM",
          "commitName": "7b913180be9cb8f5aaded964179d6313add2f13f",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "02/02/12 11:20 AM",
          "commitNameOld": "4324e1bcd78a98e2fb92c81ee959e25b4193da4f",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 2.04,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  public int run(String[] argv) throws Exception {\n+  protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n-    \n+\n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(argv);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(argv);\n     } else if (\"-failover\".equals(cmd)) {\n       return failover(argv);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(argv);\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(argv);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     } \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(argv);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(argv);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(argv);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(argv);\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(argv);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    } \n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
          "extendedDetails": {
            "oldValue": "run",
            "newValue": "runCmd"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2808. HA: haadmin should use namenode ids. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240600 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/02/12 12:12 PM",
          "commitName": "7b913180be9cb8f5aaded964179d6313add2f13f",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "02/02/12 11:20 AM",
          "commitNameOld": "4324e1bcd78a98e2fb92c81ee959e25b4193da4f",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 2.04,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  public int run(String[] argv) throws Exception {\n+  protected int runCmd(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n-    \n+\n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(argv);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(argv);\n     } else if (\"-failover\".equals(cmd)) {\n       return failover(argv);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(argv);\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(argv);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     } \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int runCmd(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n\n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(argv);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(argv);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(argv);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(argv);\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(argv);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    } \n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        }
      ]
    },
    "fb9cdcfa60cb641faded2d3843c81e969ac33147": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7924. \u2029FailoverController for client-based configuration. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1227836 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/01/12 1:02 PM",
      "commitName": "fb9cdcfa60cb641faded2d3843c81e969ac33147",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "18/12/11 9:21 PM",
      "commitNameOld": "45e81ae415141c306df9746353faec2f9f151ab1",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 17.65,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   public int run(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(argv);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(argv);\n+    } else if (\"-failover\".equals(cmd)) {\n+      return failover(argv);\n     } else if (\"-getServiceState\".equals(cmd)) {\n       return getServiceState(argv);\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(argv);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(argv);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(argv);\n    } else if (\"-failover\".equals(cmd)) {\n      return failover(argv);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(argv);\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(argv);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "45e81ae415141c306df9746353faec2f9f151ab1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7925. Add interface and update CLI to query current state to HAServiceProtocol. Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1220611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/11 9:21 PM",
      "commitName": "45e81ae415141c306df9746353faec2f9f151ab1",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "28/10/11 2:24 PM",
      "commitNameOld": "b4992f671d36e35fd874958ffbc9e66abc29a725",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 51.33,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   public int run(String[] argv) throws Exception {\n     if (argv.length \u003c 1) {\n       printUsage(errOut);\n       return -1;\n     }\n \n     int i \u003d 0;\n     String cmd \u003d argv[i++];\n \n     if (!cmd.startsWith(\"-\")) {\n       errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n       printUsage(errOut);\n       return -1;\n     }\n     \n     if (\"-transitionToActive\".equals(cmd)) {\n       return transitionToActive(argv);\n     } else if (\"-transitionToStandby\".equals(cmd)) {\n       return transitionToStandby(argv);\n+    } else if (\"-getServiceState\".equals(cmd)) {\n+      return getServiceState(argv);\n     } else if (\"-checkHealth\".equals(cmd)) {\n       return checkHealth(argv);\n     } else if (\"-help\".equals(cmd)) {\n       return help(argv);\n     } else {\n       errOut.println(cmd.substring(1) + \": Unknown command\");\n       printUsage(errOut);\n       return -1;\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(argv);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(argv);\n    } else if (\"-getServiceState\".equals(cmd)) {\n      return getServiceState(argv);\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(argv);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java",
      "extendedDetails": {}
    },
    "b4992f671d36e35fd874958ffbc9e66abc29a725": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7774. HA: Administrative CLI to control HA daemons. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1190584 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/11 2:24 PM",
      "commitName": "b4992f671d36e35fd874958ffbc9e66abc29a725",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,29 @@\n+  public int run(String[] argv) throws Exception {\n+    if (argv.length \u003c 1) {\n+      printUsage(errOut);\n+      return -1;\n+    }\n+\n+    int i \u003d 0;\n+    String cmd \u003d argv[i++];\n+\n+    if (!cmd.startsWith(\"-\")) {\n+      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n+      printUsage(errOut);\n+      return -1;\n+    }\n+    \n+    if (\"-transitionToActive\".equals(cmd)) {\n+      return transitionToActive(argv);\n+    } else if (\"-transitionToStandby\".equals(cmd)) {\n+      return transitionToStandby(argv);\n+    } else if (\"-checkHealth\".equals(cmd)) {\n+      return checkHealth(argv);\n+    } else if (\"-help\".equals(cmd)) {\n+      return help(argv);\n+    } else {\n+      errOut.println(cmd.substring(1) + \": Unknown command\");\n+      printUsage(errOut);\n+      return -1;\n+    } \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    if (argv.length \u003c 1) {\n      printUsage(errOut);\n      return -1;\n    }\n\n    int i \u003d 0;\n    String cmd \u003d argv[i++];\n\n    if (!cmd.startsWith(\"-\")) {\n      errOut.println(\"Bad command \u0027\" + cmd + \"\u0027: expected command starting with \u0027-\u0027\");\n      printUsage(errOut);\n      return -1;\n    }\n    \n    if (\"-transitionToActive\".equals(cmd)) {\n      return transitionToActive(argv);\n    } else if (\"-transitionToStandby\".equals(cmd)) {\n      return transitionToStandby(argv);\n    } else if (\"-checkHealth\".equals(cmd)) {\n      return checkHealth(argv);\n    } else if (\"-help\".equals(cmd)) {\n      return help(argv);\n    } else {\n      errOut.println(cmd.substring(1) + \": Unknown command\");\n      printUsage(errOut);\n      return -1;\n    } \n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/HAAdmin.java"
    }
  }
}