{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeCLI.java",
  "functionName": "printNodeStatus",
  "functionId": "printNodeStatus___nodeIdStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
  "functionStartLine": 261,
  "functionEndLine": 351,
  "numCommitsSeen": 28,
  "timeTaken": 2939,
  "changeHistory": [
    "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4",
    "d468c9aaf15e977f12e6214b47996412c907e069",
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
    "ca3381de61ff53604d9389694049a1a4dedc7571",
    "b6c1188b855d636586cd8fd0fb6d8e984bbfb0f5",
    "13b526b15f7e967d55d2c9ca75d98f0d8b174531",
    "af8514eef297574240652672d048748100c97733",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "0b708ab75d050b61c030b1d164d6992dabf82653",
    "10e1e314acc9d4d08765eb81906db7d636bc9609",
    "331b1123fbb892524ecb58e551c20befd26c9ea9"
  ],
  "changeHistoryShort": {
    "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4": "Ybodychange",
    "d468c9aaf15e977f12e6214b47996412c907e069": "Ybodychange",
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488": "Ybodychange",
    "ca3381de61ff53604d9389694049a1a4dedc7571": "Ybodychange",
    "b6c1188b855d636586cd8fd0fb6d8e984bbfb0f5": "Ybodychange",
    "13b526b15f7e967d55d2c9ca75d98f0d8b174531": "Ybodychange",
    "af8514eef297574240652672d048748100c97733": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "0b708ab75d050b61c030b1d164d6992dabf82653": "Ybodychange",
    "10e1e314acc9d4d08765eb81906db7d636bc9609": "Ymultichange(Yexceptionschange,Ybodychange)",
    "331b1123fbb892524ecb58e551c20befd26c9ea9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8103. Add CLI interface to query node attributes. Contributed by Bibin A Chundatt.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 91.79,
      "commitsBetweenForRepo": 656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,91 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d NodeId.fromString(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n           : (nodeReport.getUsed().getMemorySize() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemorySize() + \"MB\");\n       nodeReportStr.print(\"\\tCPU-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n           : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n       nodeReportStr.print(\"\\tCPU-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n       nodeReportStr.print(\"\\tNode-Labels : \");\n       \n       // Create a List for node labels since we need it get sorted\n       List\u003cString\u003e nodeLabelsList \u003d\n           new ArrayList\u003cString\u003e(report.getNodeLabels());\n       Collections.sort(nodeLabelsList);\n       nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n \n+      if (nodeReport.getNodeAttributes().size() \u003e 0) {\n+        ArrayList nodeAtrs \u003d new ArrayList\u003c\u003e(nodeReport.getNodeAttributes());\n+        nodeReportStr.print(\"\\tNode Attributes : \");\n+        nodeReportStr.println(nodeAtrs.get(0).toString());\n+        for (int index \u003d 1; index \u003c nodeAtrs.size(); index++) {\n+          nodeReportStr.println(\n+              String.format(\"\\t%18s%s\", \"\", nodeAtrs.get(index).toString()));\n+        }\n+      } else {\n+        nodeReportStr.println(\"\\tNode Attributes : \");\n+      }\n+\n       nodeReportStr.print(\"\\tResource Utilization by Node : \");\n       if (nodeReport.getNodeUtilization() !\u003d null) {\n         nodeReportStr.print(\"PMem:\"\n             + nodeReport.getNodeUtilization().getPhysicalMemory()\n             + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n             + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n       }\n       nodeReportStr.println();\n \n       nodeReportStr.print(\"\\tResource Utilization by Containers : \");\n       if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n         nodeReportStr.print(\"PMem:\"\n             + nodeReport.getAggregatedContainersUtilization()\n                 .getPhysicalMemory()\n             + \" MB, VMem:\"\n             + nodeReport.getAggregatedContainersUtilization()\n                 .getVirtualMemory() + \" MB, VCores:\"\n             + nodeReport.getAggregatedContainersUtilization().getCPU());\n       }\n       nodeReportStr.println();\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d NodeId.fromString(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemorySize() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemorySize() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n      nodeReportStr.print(\"\\tNode-Labels : \");\n      \n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d\n          new ArrayList\u003cString\u003e(report.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n\n      if (nodeReport.getNodeAttributes().size() \u003e 0) {\n        ArrayList nodeAtrs \u003d new ArrayList\u003c\u003e(nodeReport.getNodeAttributes());\n        nodeReportStr.print(\"\\tNode Attributes : \");\n        nodeReportStr.println(nodeAtrs.get(0).toString());\n        for (int index \u003d 1; index \u003c nodeAtrs.size(); index++) {\n          nodeReportStr.println(\n              String.format(\"\\t%18s%s\", \"\", nodeAtrs.get(index).toString()));\n        }\n      } else {\n        nodeReportStr.println(\"\\tNode Attributes : \");\n      }\n\n      nodeReportStr.print(\"\\tResource Utilization by Node : \");\n      if (nodeReport.getNodeUtilization() !\u003d null) {\n        nodeReportStr.print(\"PMem:\"\n            + nodeReport.getNodeUtilization().getPhysicalMemory()\n            + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n            + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n      }\n      nodeReportStr.println();\n\n      nodeReportStr.print(\"\\tResource Utilization by Containers : \");\n      if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n        nodeReportStr.print(\"PMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getPhysicalMemory()\n            + \" MB, VMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getVirtualMemory() + \" MB, VCores:\"\n            + nodeReport.getAggregatedContainersUtilization().getCPU());\n      }\n      nodeReportStr.println();\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 16.26,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,79 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n-    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n+    NodeId nodeId \u003d NodeId.fromString(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n           : (nodeReport.getUsed().getMemorySize() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemorySize() + \"MB\");\n       nodeReportStr.print(\"\\tCPU-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n           : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n       nodeReportStr.print(\"\\tCPU-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n       nodeReportStr.print(\"\\tNode-Labels : \");\n       \n       // Create a List for node labels since we need it get sorted\n       List\u003cString\u003e nodeLabelsList \u003d\n           new ArrayList\u003cString\u003e(report.getNodeLabels());\n       Collections.sort(nodeLabelsList);\n       nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n \n       nodeReportStr.print(\"\\tResource Utilization by Node : \");\n       if (nodeReport.getNodeUtilization() !\u003d null) {\n         nodeReportStr.print(\"PMem:\"\n             + nodeReport.getNodeUtilization().getPhysicalMemory()\n             + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n             + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n       }\n       nodeReportStr.println();\n \n       nodeReportStr.print(\"\\tResource Utilization by Containers : \");\n       if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n         nodeReportStr.print(\"PMem:\"\n             + nodeReport.getAggregatedContainersUtilization()\n                 .getPhysicalMemory()\n             + \" MB, VMem:\"\n             + nodeReport.getAggregatedContainersUtilization()\n                 .getVirtualMemory() + \" MB, VCores:\"\n             + nodeReport.getAggregatedContainersUtilization().getCPU());\n       }\n       nodeReportStr.println();\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d NodeId.fromString(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemorySize() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemorySize() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n      nodeReportStr.print(\"\\tNode-Labels : \");\n      \n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d\n          new ArrayList\u003cString\u003e(report.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n\n      nodeReportStr.print(\"\\tResource Utilization by Node : \");\n      if (nodeReport.getNodeUtilization() !\u003d null) {\n        nodeReportStr.print(\"PMem:\"\n            + nodeReport.getNodeUtilization().getPhysicalMemory()\n            + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n            + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n      }\n      nodeReportStr.println();\n\n      nodeReportStr.print(\"\\tResource Utilization by Containers : \");\n      if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n        nodeReportStr.print(\"PMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getPhysicalMemory()\n            + \" MB, VMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getVirtualMemory() + \" MB, VCores:\"\n            + nodeReport.getAggregatedContainersUtilization().getCPU());\n      }\n      nodeReportStr.println();\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "21/12/15 11:36 AM",
      "commitNameOld": "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 159.85,
      "commitsBetweenForRepo": 1008,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,79 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n-          : (nodeReport.getUsed().getMemory() + \"MB\"));\n+          : (nodeReport.getUsed().getMemorySize() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n-      nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n+      nodeReportStr.println(nodeReport.getCapability().getMemorySize() + \"MB\");\n       nodeReportStr.print(\"\\tCPU-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n           : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n       nodeReportStr.print(\"\\tCPU-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n       nodeReportStr.print(\"\\tNode-Labels : \");\n       \n       // Create a List for node labels since we need it get sorted\n       List\u003cString\u003e nodeLabelsList \u003d\n           new ArrayList\u003cString\u003e(report.getNodeLabels());\n       Collections.sort(nodeLabelsList);\n       nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n \n       nodeReportStr.print(\"\\tResource Utilization by Node : \");\n       if (nodeReport.getNodeUtilization() !\u003d null) {\n         nodeReportStr.print(\"PMem:\"\n             + nodeReport.getNodeUtilization().getPhysicalMemory()\n             + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n             + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n       }\n       nodeReportStr.println();\n \n       nodeReportStr.print(\"\\tResource Utilization by Containers : \");\n       if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n         nodeReportStr.print(\"PMem:\"\n             + nodeReport.getAggregatedContainersUtilization()\n                 .getPhysicalMemory()\n             + \" MB, VMem:\"\n             + nodeReport.getAggregatedContainersUtilization()\n                 .getVirtualMemory() + \" MB, VCores:\"\n             + nodeReport.getAggregatedContainersUtilization().getCPU());\n       }\n       nodeReportStr.println();\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemorySize() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemorySize() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n      nodeReportStr.print(\"\\tNode-Labels : \");\n      \n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d\n          new ArrayList\u003cString\u003e(report.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n\n      nodeReportStr.print(\"\\tResource Utilization by Node : \");\n      if (nodeReport.getNodeUtilization() !\u003d null) {\n        nodeReportStr.print(\"PMem:\"\n            + nodeReport.getNodeUtilization().getPhysicalMemory()\n            + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n            + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n      }\n      nodeReportStr.println();\n\n      nodeReportStr.print(\"\\tResource Utilization by Containers : \");\n      if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n        nodeReportStr.print(\"PMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getPhysicalMemory()\n            + \" MB, VMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getVirtualMemory() + \" MB, VCores:\"\n            + nodeReport.getAggregatedContainersUtilization().getCPU());\n      }\n      nodeReportStr.println();\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4293. ResourceUtilization should be a part of yarn node CLI. (Sunil G via wangda)\n",
      "commitDate": "16/12/15 1:18 PM",
      "commitName": "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 288.67,
      "commitsBetweenForRepo": 2371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,79 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n           : (nodeReport.getUsed().getMemory() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n       nodeReportStr.print(\"\\tCPU-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n           : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n       nodeReportStr.print(\"\\tCPU-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n       nodeReportStr.print(\"\\tNode-Labels : \");\n       \n       // Create a List for node labels since we need it get sorted\n       List\u003cString\u003e nodeLabelsList \u003d\n           new ArrayList\u003cString\u003e(report.getNodeLabels());\n       Collections.sort(nodeLabelsList);\n       nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n+\n+      nodeReportStr.print(\"\\tResource Utilization by Node : \");\n+      if (nodeReport.getNodeUtilization() !\u003d null) {\n+        nodeReportStr.print(\"PMem:\"\n+            + nodeReport.getNodeUtilization().getPhysicalMemory()\n+            + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n+            + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n+      }\n+      nodeReportStr.println();\n+\n+      nodeReportStr.print(\"\\tResource Utilization by Containers : \");\n+      if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n+        nodeReportStr.print(\"PMem:\"\n+            + nodeReport.getAggregatedContainersUtilization()\n+                .getPhysicalMemory()\n+            + \" MB, VMem:\"\n+            + nodeReport.getAggregatedContainersUtilization()\n+                .getVirtualMemory() + \" MB, VCores:\"\n+            + nodeReport.getAggregatedContainersUtilization().getCPU());\n+      }\n+      nodeReportStr.println();\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemory() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n      nodeReportStr.print(\"\\tNode-Labels : \");\n      \n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d\n          new ArrayList\u003cString\u003e(report.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n\n      nodeReportStr.print(\"\\tResource Utilization by Node : \");\n      if (nodeReport.getNodeUtilization() !\u003d null) {\n        nodeReportStr.print(\"PMem:\"\n            + nodeReport.getNodeUtilization().getPhysicalMemory()\n            + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n            + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n      }\n      nodeReportStr.println();\n\n      nodeReportStr.print(\"\\tResource Utilization by Containers : \");\n      if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n        nodeReportStr.print(\"PMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getPhysicalMemory()\n            + \" MB, VMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getVirtualMemory() + \" MB, VCores:\"\n            + nodeReport.getAggregatedContainersUtilization().getCPU());\n      }\n      nodeReportStr.println();\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "d468c9aaf15e977f12e6214b47996412c907e069": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2940. Fix new findbugs warnings in rest of the hadoop-yarn components. (Contributed by Li Lu)\n",
      "commitDate": "23/12/14 8:04 PM",
      "commitName": "d468c9aaf15e977f12e6214b47996412c907e069",
      "commitAuthor": "Junping Du",
      "commitDateOld": "23/12/14 8:02 PM",
      "commitNameOld": "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n+    PrintWriter nodeReportStr \u003d new PrintWriter(\n+        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n           : (nodeReport.getUsed().getMemory() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n       nodeReportStr.print(\"\\tCPU-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n           : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n       nodeReportStr.print(\"\\tCPU-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n       nodeReportStr.print(\"\\tNode-Labels : \");\n       \n       // Create a List for node labels since we need it get sorted\n       List\u003cString\u003e nodeLabelsList \u003d\n           new ArrayList\u003cString\u003e(report.getNodeLabels());\n       Collections.sort(nodeLabelsList);\n       nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemory() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n      nodeReportStr.print(\"\\tNode-Labels : \");\n      \n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d\n          new ArrayList\u003cString\u003e(report.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488": {
      "type": "Ybodychange",
      "commitMessage": "Revert ca3381de61ff53604d9389694049a1a4dedc7571 and 20674255ad891bb693ecb2faa5bdb37477073dac as missing JIRA number in commit message\n",
      "commitDate": "23/12/14 8:02 PM",
      "commitName": "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
      "commitAuthor": "Junping Du",
      "commitDateOld": "23/12/14 6:57 PM",
      "commitNameOld": "ca3381de61ff53604d9389694049a1a4dedc7571",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,57 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter nodeReportStr \u003d new PrintWriter(\n-        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n+    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n           : (nodeReport.getUsed().getMemory() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n       nodeReportStr.print(\"\\tCPU-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n           : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n       nodeReportStr.print(\"\\tCPU-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n       nodeReportStr.print(\"\\tNode-Labels : \");\n       \n       // Create a List for node labels since we need it get sorted\n       List\u003cString\u003e nodeLabelsList \u003d\n           new ArrayList\u003cString\u003e(report.getNodeLabels());\n       Collections.sort(nodeLabelsList);\n       nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemory() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n      nodeReportStr.print(\"\\tNode-Labels : \");\n      \n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d\n          new ArrayList\u003cString\u003e(report.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "ca3381de61ff53604d9389694049a1a4dedc7571": {
      "type": "Ybodychange",
      "commitMessage": "Fix new findbugs warnings in rest of the hadoop-yarn components. (Contributed by Li Lu)\n",
      "commitDate": "23/12/14 6:57 PM",
      "commitName": "ca3381de61ff53604d9389694049a1a4dedc7571",
      "commitAuthor": "Junping Du",
      "commitDateOld": "31/10/14 10:11 AM",
      "commitNameOld": "b6c1188b855d636586cd8fd0fb6d8e984bbfb0f5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 53.41,
      "commitsBetweenForRepo": 416,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n+    PrintWriter nodeReportStr \u003d new PrintWriter(\n+        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n           : (nodeReport.getUsed().getMemory() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n       nodeReportStr.print(\"\\tCPU-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n           : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n       nodeReportStr.print(\"\\tCPU-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n       nodeReportStr.print(\"\\tNode-Labels : \");\n       \n       // Create a List for node labels since we need it get sorted\n       List\u003cString\u003e nodeLabelsList \u003d\n           new ArrayList\u003cString\u003e(report.getNodeLabels());\n       Collections.sort(nodeLabelsList);\n       nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemory() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n      nodeReportStr.print(\"\\tNode-Labels : \");\n      \n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d\n          new ArrayList\u003cString\u003e(report.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "b6c1188b855d636586cd8fd0fb6d8e984bbfb0f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2778. Moved node-lables\u0027 reports to the yarn nodes CLI from the admin CLI. Contributed by Wangda Tan.\n",
      "commitDate": "31/10/14 10:11 AM",
      "commitName": "b6c1188b855d636586cd8fd0fb6d8e984bbfb0f5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/08/13 4:26 PM",
      "commitNameOld": "6d100eb79409cbca70a22ada705dedf6658545e3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 426.74,
      "commitsBetweenForRepo": 3217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,57 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n           : (nodeReport.getUsed().getMemory() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n       nodeReportStr.print(\"\\tCPU-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n           : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n       nodeReportStr.print(\"\\tCPU-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n+      nodeReportStr.print(\"\\tNode-Labels : \");\n+      \n+      // Create a List for node labels since we need it get sorted\n+      List\u003cString\u003e nodeLabelsList \u003d\n+          new ArrayList\u003cString\u003e(report.getNodeLabels());\n+      Collections.sort(nodeLabelsList);\n+      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemory() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n      nodeReportStr.print(\"\\tNode-Labels : \");\n      \n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d\n          new ArrayList\u003cString\u003e(report.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "13b526b15f7e967d55d2c9ca75d98f0d8b174531": {
      "type": "Ybodychange",
      "commitMessage": "YARN-347. Node CLI should show CPU info besides memory in node status. (Junping Du via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 12:34 AM",
      "commitName": "13b526b15f7e967d55d2c9ca75d98f0d8b174531",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "08/07/13 3:30 PM",
      "commitNameOld": "5e4f6ad1d9aa6df96af837600674af4467c1e99c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.38,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,50 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getLastHealthReportTime()),\n             \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n-      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n-          : (nodeReport.getUsed().getMemory() + \"M\"));\n+      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n+          : (nodeReport.getUsed().getMemory() + \"MB\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n-      nodeReportStr.println(nodeReport.getCapability().getMemory());\n+      nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n+      nodeReportStr.print(\"\\tCPU-Used : \");\n+      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n+          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n+      nodeReportStr.print(\"\\tCPU-Capacity : \");\n+      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0MB\"\n          : (nodeReport.getUsed().getMemory() + \"MB\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory() + \"MB\");\n      nodeReportStr.print(\"\\tCPU-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0 vcores\"\n          : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\n      nodeReportStr.print(\"\\tCPU-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "af8514eef297574240652672d048748100c97733": {
      "type": "Ybodychange",
      "commitMessage": "YARN-686. Flatten NodeReport. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/13 1:59 PM",
      "commitName": "af8514eef297574240652672d048748100c97733",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.7,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,45 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n-      nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n-      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n-          .getIsNodeHealthy());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n-          new Date(nodeReport.getNodeHealthStatus().\n-            getLastHealthReportTime()),\"E dd/MMM/yy hh:mm:ss:SSzz\"));\n+          new Date(nodeReport.getLastHealthReportTime()),\n+            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n-          .println(nodeReport.getNodeHealthStatus().getHealthReport());\n+          .println(nodeReport.getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n           : (nodeReport.getUsed().getMemory() + \"M\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemory());\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getLastHealthReportTime()),\n            \"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n          : (nodeReport.getUsed().getMemory() + \"M\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory());\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/05/13 3:53 PM",
      "commitNameOld": "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.22,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException,\n+  private void printNodeStatus(String nodeIdStr) throws YarnException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n       nodeReportStr.println(nodeReport.getNodeHealthStatus()\n           .getIsNodeHealthy());\n       nodeReportStr.print(\"\\tLast-Health-Update : \");\n       nodeReportStr.println(DateFormatUtils.format(\n           new Date(nodeReport.getNodeHealthStatus().\n             getLastHealthReportTime()),\"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getNodeHealthStatus().getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n           : (nodeReport.getUsed().getMemory() + \"M\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemory());\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n          .getIsNodeHealthy());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getNodeHealthStatus().\n            getLastHealthReportTime()),\"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getNodeHealthStatus().getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n          : (nodeReport.getUsed().getMemory() + \"M\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory());\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException, IOException]",
        "newValue": "[YarnException, IOException]"
      }
    },
    "0b708ab75d050b61c030b1d164d6992dabf82653": {
      "type": "Ybodychange",
      "commitMessage": "YARN-380. Fix yarn node -status output to be better readable. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1451711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/03/13 12:39 PM",
      "commitName": "0b708ab75d050b61c030b1d164d6992dabf82653",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/02/13 4:26 PM",
      "commitNameOld": "10e1e314acc9d4d08765eb81906db7d636bc9609",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 3.84,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private void printNodeStatus(String nodeIdStr) throws YarnRemoteException,\n       IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n       nodeReportStr.println(\"Node Report : \");\n       nodeReportStr.print(\"\\tNode-Id : \");\n       nodeReportStr.println(nodeReport.getNodeId());\n       nodeReportStr.print(\"\\tRack : \");\n       nodeReportStr.println(nodeReport.getRackName());\n       nodeReportStr.print(\"\\tNode-State : \");\n       nodeReportStr.println(nodeReport.getNodeState());\n       nodeReportStr.print(\"\\tNode-Http-Address : \");\n       nodeReportStr.println(nodeReport.getHttpAddress());\n       nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n       nodeReportStr.println(nodeReport.getNodeHealthStatus()\n           .getIsNodeHealthy());\n-      nodeReportStr.print(\"\\tLast-Last-Health-Update : \");\n-      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n-          .getLastHealthReportTime());\n+      nodeReportStr.print(\"\\tLast-Health-Update : \");\n+      nodeReportStr.println(DateFormatUtils.format(\n+          new Date(nodeReport.getNodeHealthStatus().\n+            getLastHealthReportTime()),\"E dd/MMM/yy hh:mm:ss:SSzz\"));\n       nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n           .println(nodeReport.getNodeHealthStatus().getHealthReport());\n       nodeReportStr.print(\"\\tContainers : \");\n       nodeReportStr.println(nodeReport.getNumContainers());\n       nodeReportStr.print(\"\\tMemory-Used : \");\n       nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n           : (nodeReport.getUsed().getMemory() + \"M\"));\n       nodeReportStr.print(\"\\tMemory-Capacity : \");\n       nodeReportStr.println(nodeReport.getCapability().getMemory());\n     }\n \n     if (nodeReport \u003d\u003d null) {\n       nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n     nodeReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n          .getIsNodeHealthy());\n      nodeReportStr.print(\"\\tLast-Health-Update : \");\n      nodeReportStr.println(DateFormatUtils.format(\n          new Date(nodeReport.getNodeHealthStatus().\n            getLastHealthReportTime()),\"E dd/MMM/yy hh:mm:ss:SSzz\"));\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getNodeHealthStatus().getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n          : (nodeReport.getUsed().getMemory() + \"M\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory());\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "10e1e314acc9d4d08765eb81906db7d636bc9609": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-390. ApplicationCLI and NodeCLI hard-coded platform-specific line separator causes test failures on Windows. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 4:26 PM",
      "commitName": "10e1e314acc9d4d08765eb81906db7d636bc9609",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-390. ApplicationCLI and NodeCLI hard-coded platform-specific line separator causes test failures on Windows. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449980 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/13 4:26 PM",
          "commitName": "10e1e314acc9d4d08765eb81906db7d636bc9609",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "08/10/12 3:18 PM",
          "commitNameOld": "331b1123fbb892524ecb58e551c20befd26c9ea9",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 140.09,
          "commitsBetweenForRepo": 634,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,47 @@\n-  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException {\n+  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException,\n+      IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n-    StringBuffer nodeReportStr \u003d new StringBuffer();\n+    // Use PrintWriter.println, which uses correct platform line ending.\n+    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n+    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n-      nodeReportStr.append(\"Node Report : \");\n-      nodeReportStr.append(\"\\n\\tNode-Id : \");\n-      nodeReportStr.append(nodeReport.getNodeId());\n-      nodeReportStr.append(\"\\n\\tRack : \");\n-      nodeReportStr.append(nodeReport.getRackName());\n-      nodeReportStr.append(\"\\n\\tNode-State : \");\n-      nodeReportStr.append(nodeReport.getNodeState());\n-      nodeReportStr.append(\"\\n\\tNode-Http-Address : \");\n-      nodeReportStr.append(nodeReport.getHttpAddress());\n-      nodeReportStr.append(\"\\n\\tHealth-Status(isNodeHealthy) : \");\n-      nodeReportStr.append(nodeReport.getNodeHealthStatus()\n+      nodeReportStr.println(\"Node Report : \");\n+      nodeReportStr.print(\"\\tNode-Id : \");\n+      nodeReportStr.println(nodeReport.getNodeId());\n+      nodeReportStr.print(\"\\tRack : \");\n+      nodeReportStr.println(nodeReport.getRackName());\n+      nodeReportStr.print(\"\\tNode-State : \");\n+      nodeReportStr.println(nodeReport.getNodeState());\n+      nodeReportStr.print(\"\\tNode-Http-Address : \");\n+      nodeReportStr.println(nodeReport.getHttpAddress());\n+      nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n+      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n           .getIsNodeHealthy());\n-      nodeReportStr.append(\"\\n\\tLast-Last-Health-Update : \");\n-      nodeReportStr.append(nodeReport.getNodeHealthStatus()\n+      nodeReportStr.print(\"\\tLast-Last-Health-Update : \");\n+      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n           .getLastHealthReportTime());\n-      nodeReportStr.append(\"\\n\\tHealth-Report : \");\n+      nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n-          .append(nodeReport.getNodeHealthStatus().getHealthReport());\n-      nodeReportStr.append(\"\\n\\tContainers : \");\n-      nodeReportStr.append(nodeReport.getNumContainers());\n-      nodeReportStr.append(\"\\n\\tMemory-Used : \");\n-      nodeReportStr.append((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n+          .println(nodeReport.getNodeHealthStatus().getHealthReport());\n+      nodeReportStr.print(\"\\tContainers : \");\n+      nodeReportStr.println(nodeReport.getNumContainers());\n+      nodeReportStr.print(\"\\tMemory-Used : \");\n+      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n           : (nodeReport.getUsed().getMemory() + \"M\"));\n-      nodeReportStr.append(\"\\n\\tMemory-Capacity : \");\n-      nodeReportStr.append(nodeReport.getCapability().getMemory());\n+      nodeReportStr.print(\"\\tMemory-Capacity : \");\n+      nodeReportStr.println(nodeReport.getCapability().getMemory());\n     }\n \n     if (nodeReport \u003d\u003d null) {\n-      nodeReportStr.append(\"Could not find the node report for node id : \"\n+      nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n-\n-    sysout.println(nodeReportStr.toString());\n+    nodeReportStr.close();\n+    sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n          .getIsNodeHealthy());\n      nodeReportStr.print(\"\\tLast-Last-Health-Update : \");\n      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n          .getLastHealthReportTime());\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getNodeHealthStatus().getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n          : (nodeReport.getUsed().getMemory() + \"M\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory());\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
          "extendedDetails": {
            "oldValue": "[YarnRemoteException]",
            "newValue": "[YarnRemoteException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-390. ApplicationCLI and NodeCLI hard-coded platform-specific line separator causes test failures on Windows. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449980 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/13 4:26 PM",
          "commitName": "10e1e314acc9d4d08765eb81906db7d636bc9609",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "08/10/12 3:18 PM",
          "commitNameOld": "331b1123fbb892524ecb58e551c20befd26c9ea9",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 140.09,
          "commitsBetweenForRepo": 634,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,47 @@\n-  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException {\n+  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException,\n+      IOException {\n     NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n     List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n-    StringBuffer nodeReportStr \u003d new StringBuffer();\n+    // Use PrintWriter.println, which uses correct platform line ending.\n+    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n+    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n     NodeReport nodeReport \u003d null;\n     for (NodeReport report : nodesReport) {\n       if (!report.getNodeId().equals(nodeId)) {\n         continue;\n       }\n       nodeReport \u003d report;\n-      nodeReportStr.append(\"Node Report : \");\n-      nodeReportStr.append(\"\\n\\tNode-Id : \");\n-      nodeReportStr.append(nodeReport.getNodeId());\n-      nodeReportStr.append(\"\\n\\tRack : \");\n-      nodeReportStr.append(nodeReport.getRackName());\n-      nodeReportStr.append(\"\\n\\tNode-State : \");\n-      nodeReportStr.append(nodeReport.getNodeState());\n-      nodeReportStr.append(\"\\n\\tNode-Http-Address : \");\n-      nodeReportStr.append(nodeReport.getHttpAddress());\n-      nodeReportStr.append(\"\\n\\tHealth-Status(isNodeHealthy) : \");\n-      nodeReportStr.append(nodeReport.getNodeHealthStatus()\n+      nodeReportStr.println(\"Node Report : \");\n+      nodeReportStr.print(\"\\tNode-Id : \");\n+      nodeReportStr.println(nodeReport.getNodeId());\n+      nodeReportStr.print(\"\\tRack : \");\n+      nodeReportStr.println(nodeReport.getRackName());\n+      nodeReportStr.print(\"\\tNode-State : \");\n+      nodeReportStr.println(nodeReport.getNodeState());\n+      nodeReportStr.print(\"\\tNode-Http-Address : \");\n+      nodeReportStr.println(nodeReport.getHttpAddress());\n+      nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n+      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n           .getIsNodeHealthy());\n-      nodeReportStr.append(\"\\n\\tLast-Last-Health-Update : \");\n-      nodeReportStr.append(nodeReport.getNodeHealthStatus()\n+      nodeReportStr.print(\"\\tLast-Last-Health-Update : \");\n+      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n           .getLastHealthReportTime());\n-      nodeReportStr.append(\"\\n\\tHealth-Report : \");\n+      nodeReportStr.print(\"\\tHealth-Report : \");\n       nodeReportStr\n-          .append(nodeReport.getNodeHealthStatus().getHealthReport());\n-      nodeReportStr.append(\"\\n\\tContainers : \");\n-      nodeReportStr.append(nodeReport.getNumContainers());\n-      nodeReportStr.append(\"\\n\\tMemory-Used : \");\n-      nodeReportStr.append((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n+          .println(nodeReport.getNodeHealthStatus().getHealthReport());\n+      nodeReportStr.print(\"\\tContainers : \");\n+      nodeReportStr.println(nodeReport.getNumContainers());\n+      nodeReportStr.print(\"\\tMemory-Used : \");\n+      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n           : (nodeReport.getUsed().getMemory() + \"M\"));\n-      nodeReportStr.append(\"\\n\\tMemory-Capacity : \");\n-      nodeReportStr.append(nodeReport.getCapability().getMemory());\n+      nodeReportStr.print(\"\\tMemory-Capacity : \");\n+      nodeReportStr.println(nodeReport.getCapability().getMemory());\n     }\n \n     if (nodeReport \u003d\u003d null) {\n-      nodeReportStr.append(\"Could not find the node report for node id : \"\n+      nodeReportStr.print(\"Could not find the node report for node id : \"\n           + nodeIdStr);\n     }\n-\n-    sysout.println(nodeReportStr.toString());\n+    nodeReportStr.close();\n+    sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException,\n      IOException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter nodeReportStr \u003d new PrintWriter(baos);\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.println(\"Node Report : \");\n      nodeReportStr.print(\"\\tNode-Id : \");\n      nodeReportStr.println(nodeReport.getNodeId());\n      nodeReportStr.print(\"\\tRack : \");\n      nodeReportStr.println(nodeReport.getRackName());\n      nodeReportStr.print(\"\\tNode-State : \");\n      nodeReportStr.println(nodeReport.getNodeState());\n      nodeReportStr.print(\"\\tNode-Http-Address : \");\n      nodeReportStr.println(nodeReport.getHttpAddress());\n      nodeReportStr.print(\"\\tHealth-Status(isNodeHealthy) : \");\n      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n          .getIsNodeHealthy());\n      nodeReportStr.print(\"\\tLast-Last-Health-Update : \");\n      nodeReportStr.println(nodeReport.getNodeHealthStatus()\n          .getLastHealthReportTime());\n      nodeReportStr.print(\"\\tHealth-Report : \");\n      nodeReportStr\n          .println(nodeReport.getNodeHealthStatus().getHealthReport());\n      nodeReportStr.print(\"\\tContainers : \");\n      nodeReportStr.println(nodeReport.getNumContainers());\n      nodeReportStr.print(\"\\tMemory-Used : \");\n      nodeReportStr.println((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n          : (nodeReport.getUsed().getMemory() + \"M\"));\n      nodeReportStr.print(\"\\tMemory-Capacity : \");\n      nodeReportStr.println(nodeReport.getCapability().getMemory());\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.print(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n    nodeReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "331b1123fbb892524ecb58e551c20befd26c9ea9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-40. Provided support for missing YARN commands Contributed by Devaraj K and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1395793 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/12 3:18 PM",
      "commitName": "331b1123fbb892524ecb58e551c20befd26c9ea9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,44 @@\n+  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException {\n+    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n+    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n+    StringBuffer nodeReportStr \u003d new StringBuffer();\n+    NodeReport nodeReport \u003d null;\n+    for (NodeReport report : nodesReport) {\n+      if (!report.getNodeId().equals(nodeId)) {\n+        continue;\n+      }\n+      nodeReport \u003d report;\n+      nodeReportStr.append(\"Node Report : \");\n+      nodeReportStr.append(\"\\n\\tNode-Id : \");\n+      nodeReportStr.append(nodeReport.getNodeId());\n+      nodeReportStr.append(\"\\n\\tRack : \");\n+      nodeReportStr.append(nodeReport.getRackName());\n+      nodeReportStr.append(\"\\n\\tNode-State : \");\n+      nodeReportStr.append(nodeReport.getNodeState());\n+      nodeReportStr.append(\"\\n\\tNode-Http-Address : \");\n+      nodeReportStr.append(nodeReport.getHttpAddress());\n+      nodeReportStr.append(\"\\n\\tHealth-Status(isNodeHealthy) : \");\n+      nodeReportStr.append(nodeReport.getNodeHealthStatus()\n+          .getIsNodeHealthy());\n+      nodeReportStr.append(\"\\n\\tLast-Last-Health-Update : \");\n+      nodeReportStr.append(nodeReport.getNodeHealthStatus()\n+          .getLastHealthReportTime());\n+      nodeReportStr.append(\"\\n\\tHealth-Report : \");\n+      nodeReportStr\n+          .append(nodeReport.getNodeHealthStatus().getHealthReport());\n+      nodeReportStr.append(\"\\n\\tContainers : \");\n+      nodeReportStr.append(nodeReport.getNumContainers());\n+      nodeReportStr.append(\"\\n\\tMemory-Used : \");\n+      nodeReportStr.append((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n+          : (nodeReport.getUsed().getMemory() + \"M\"));\n+      nodeReportStr.append(\"\\n\\tMemory-Capacity : \");\n+      nodeReportStr.append(nodeReport.getCapability().getMemory());\n+    }\n+\n+    if (nodeReport \u003d\u003d null) {\n+      nodeReportStr.append(\"Could not find the node report for node id : \"\n+          + nodeIdStr);\n+    }\n+\n+    sysout.println(nodeReportStr.toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printNodeStatus(String nodeIdStr) throws YarnRemoteException {\n    NodeId nodeId \u003d ConverterUtils.toNodeId(nodeIdStr);\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports();\n    StringBuffer nodeReportStr \u003d new StringBuffer();\n    NodeReport nodeReport \u003d null;\n    for (NodeReport report : nodesReport) {\n      if (!report.getNodeId().equals(nodeId)) {\n        continue;\n      }\n      nodeReport \u003d report;\n      nodeReportStr.append(\"Node Report : \");\n      nodeReportStr.append(\"\\n\\tNode-Id : \");\n      nodeReportStr.append(nodeReport.getNodeId());\n      nodeReportStr.append(\"\\n\\tRack : \");\n      nodeReportStr.append(nodeReport.getRackName());\n      nodeReportStr.append(\"\\n\\tNode-State : \");\n      nodeReportStr.append(nodeReport.getNodeState());\n      nodeReportStr.append(\"\\n\\tNode-Http-Address : \");\n      nodeReportStr.append(nodeReport.getHttpAddress());\n      nodeReportStr.append(\"\\n\\tHealth-Status(isNodeHealthy) : \");\n      nodeReportStr.append(nodeReport.getNodeHealthStatus()\n          .getIsNodeHealthy());\n      nodeReportStr.append(\"\\n\\tLast-Last-Health-Update : \");\n      nodeReportStr.append(nodeReport.getNodeHealthStatus()\n          .getLastHealthReportTime());\n      nodeReportStr.append(\"\\n\\tHealth-Report : \");\n      nodeReportStr\n          .append(nodeReport.getNodeHealthStatus().getHealthReport());\n      nodeReportStr.append(\"\\n\\tContainers : \");\n      nodeReportStr.append(nodeReport.getNumContainers());\n      nodeReportStr.append(\"\\n\\tMemory-Used : \");\n      nodeReportStr.append((nodeReport.getUsed() \u003d\u003d null) ? \"0M\"\n          : (nodeReport.getUsed().getMemory() + \"M\"));\n      nodeReportStr.append(\"\\n\\tMemory-Capacity : \");\n      nodeReportStr.append(nodeReport.getCapability().getMemory());\n    }\n\n    if (nodeReport \u003d\u003d null) {\n      nodeReportStr.append(\"Could not find the node report for node id : \"\n          + nodeIdStr);\n    }\n\n    sysout.println(nodeReportStr.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java"
    }
  }
}