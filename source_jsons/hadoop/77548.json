{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RetryPolicies.java",
  "functionName": "shouldFailoverOnException",
  "functionId": "shouldFailoverOnException___e-Exception",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java",
  "functionStartLine": 734,
  "functionEndLine": 742,
  "numCommitsSeen": 59,
  "timeTaken": 2495,
  "changeHistory": [
    "26a969ec734dbdbf1d544f486dfa33f15c291789",
    "9818091a66b9c8e337de9d4e18655cf4b157056b"
  ],
  "changeHistoryShort": {
    "26a969ec734dbdbf1d544f486dfa33f15c291789": "Ymultichange(Yrename,Ybodychange)",
    "9818091a66b9c8e337de9d4e18655cf4b157056b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26a969ec734dbdbf1d544f486dfa33f15c291789": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-15099. [SBN Read] checkOperation(WRITE) should throw ObserverRetryOnActiveException for ObserverNode. Contributed by Chen Liang.",
      "commitDate": "10/01/20 5:06 PM",
      "commitName": "26a969ec734dbdbf1d544f486dfa33f15c291789",
      "commitAuthor": "Chen Liang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-15099. [SBN Read] checkOperation(WRITE) should throw ObserverRetryOnActiveException for ObserverNode. Contributed by Chen Liang.",
          "commitDate": "10/01/20 5:06 PM",
          "commitName": "26a969ec734dbdbf1d544f486dfa33f15c291789",
          "commitAuthor": "Chen Liang",
          "commitDateOld": "09/11/19 6:43 AM",
          "commitNameOld": "3d249301f42130de80ab3ecf8c783bb51b0fa8a3",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 62.43,
          "commitsBetweenForRepo": 232,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,9 @@\n-  private static boolean isWrappedStandbyException(Exception e) {\n+  private static boolean shouldFailoverOnException(Exception e) {\n     if (!(e instanceof RemoteException)) {\n       return false;\n     }\n     Exception unwrapped \u003d ((RemoteException)e).unwrapRemoteException(\n-        StandbyException.class);\n+        StandbyException.class,\n+        ObserverRetryOnActiveException.class);\n     return unwrapped instanceof StandbyException;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean shouldFailoverOnException(Exception e) {\n    if (!(e instanceof RemoteException)) {\n      return false;\n    }\n    Exception unwrapped \u003d ((RemoteException)e).unwrapRemoteException(\n        StandbyException.class,\n        ObserverRetryOnActiveException.class);\n    return unwrapped instanceof StandbyException;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java",
          "extendedDetails": {
            "oldValue": "isWrappedStandbyException",
            "newValue": "shouldFailoverOnException"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-15099. [SBN Read] checkOperation(WRITE) should throw ObserverRetryOnActiveException for ObserverNode. Contributed by Chen Liang.",
          "commitDate": "10/01/20 5:06 PM",
          "commitName": "26a969ec734dbdbf1d544f486dfa33f15c291789",
          "commitAuthor": "Chen Liang",
          "commitDateOld": "09/11/19 6:43 AM",
          "commitNameOld": "3d249301f42130de80ab3ecf8c783bb51b0fa8a3",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 62.43,
          "commitsBetweenForRepo": 232,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,9 @@\n-  private static boolean isWrappedStandbyException(Exception e) {\n+  private static boolean shouldFailoverOnException(Exception e) {\n     if (!(e instanceof RemoteException)) {\n       return false;\n     }\n     Exception unwrapped \u003d ((RemoteException)e).unwrapRemoteException(\n-        StandbyException.class);\n+        StandbyException.class,\n+        ObserverRetryOnActiveException.class);\n     return unwrapped instanceof StandbyException;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean shouldFailoverOnException(Exception e) {\n    if (!(e instanceof RemoteException)) {\n      return false;\n    }\n    Exception unwrapped \u003d ((RemoteException)e).unwrapRemoteException(\n        StandbyException.class,\n        ObserverRetryOnActiveException.class);\n    return unwrapped instanceof StandbyException;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java",
          "extendedDetails": {}
        }
      ]
    },
    "9818091a66b9c8e337de9d4e18655cf4b157056b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7896. HA: if both NNs are in Standby mode, client needs to try failing back and forth several times with sleeps. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1214076 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 11:24 PM",
      "commitName": "9818091a66b9c8e337de9d4e18655cf4b157056b",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,8 @@\n+  private static boolean isWrappedStandbyException(Exception e) {\n+    if (!(e instanceof RemoteException)) {\n+      return false;\n+    }\n+    Exception unwrapped \u003d ((RemoteException)e).unwrapRemoteException(\n+        StandbyException.class);\n+    return unwrapped instanceof StandbyException;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean isWrappedStandbyException(Exception e) {\n    if (!(e instanceof RemoteException)) {\n      return false;\n    }\n    Exception unwrapped \u003d ((RemoteException)e).unwrapRemoteException(\n        StandbyException.class);\n    return unwrapped instanceof StandbyException;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java"
    }
  }
}