{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Configuration.java",
  "functionName": "getStreamReader",
  "functionId": "getStreamReader___wrapper-Resource__quiet-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
  "functionStartLine": 3059,
  "functionEndLine": 3087,
  "numCommitsSeen": 132,
  "timeTaken": 1816,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "3961690037fa4274a3640104b3c344e8626caa10"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "3961690037fa4274a3640104b3c344e8626caa10": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "22/04/19 8:16 AM",
      "commitNameOld": "1ddb48872f6a4985f4d0baadbb183899226cff68",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 10.2,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private XMLStreamReader2 getStreamReader(Resource wrapper, boolean quiet)\n       throws XMLStreamException, IOException {\n     Object resource \u003d wrapper.getResource();\n     boolean isRestricted \u003d wrapper.isParserRestricted();\n     XMLStreamReader2 reader \u003d null;\n     if (resource instanceof URL) {                  // an URL resource\n       reader  \u003d (XMLStreamReader2)parse((URL)resource, isRestricted);\n     } else if (resource instanceof String) {        // a CLASSPATH resource\n       URL url \u003d getResource((String)resource);\n       reader \u003d (XMLStreamReader2)parse(url, isRestricted);\n     } else if (resource instanceof Path) {          // a file resource\n       // Can\u0027t use FileSystem API or we get an infinite loop\n       // since FileSystem uses Configuration API.  Use java.io.File instead.\n       File file \u003d new File(((Path)resource).toUri().getPath())\n         .getAbsoluteFile();\n       if (file.exists()) {\n         if (!quiet) {\n           LOG.debug(\"parsing File \" + file);\n         }\n         reader \u003d (XMLStreamReader2)parse(new BufferedInputStream(\n-            new FileInputStream(file)), ((Path)resource).toString(),\n+            Files.newInputStream(file.toPath())), ((Path) resource).toString(),\n             isRestricted);\n       }\n     } else if (resource instanceof InputStream) {\n       reader \u003d (XMLStreamReader2)parse((InputStream)resource, null,\n           isRestricted);\n     }\n     return reader;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private XMLStreamReader2 getStreamReader(Resource wrapper, boolean quiet)\n      throws XMLStreamException, IOException {\n    Object resource \u003d wrapper.getResource();\n    boolean isRestricted \u003d wrapper.isParserRestricted();\n    XMLStreamReader2 reader \u003d null;\n    if (resource instanceof URL) {                  // an URL resource\n      reader  \u003d (XMLStreamReader2)parse((URL)resource, isRestricted);\n    } else if (resource instanceof String) {        // a CLASSPATH resource\n      URL url \u003d getResource((String)resource);\n      reader \u003d (XMLStreamReader2)parse(url, isRestricted);\n    } else if (resource instanceof Path) {          // a file resource\n      // Can\u0027t use FileSystem API or we get an infinite loop\n      // since FileSystem uses Configuration API.  Use java.io.File instead.\n      File file \u003d new File(((Path)resource).toUri().getPath())\n        .getAbsoluteFile();\n      if (file.exists()) {\n        if (!quiet) {\n          LOG.debug(\"parsing File \" + file);\n        }\n        reader \u003d (XMLStreamReader2)parse(new BufferedInputStream(\n            Files.newInputStream(file.toPath())), ((Path) resource).toString(),\n            isRestricted);\n      }\n    } else if (resource instanceof InputStream) {\n      reader \u003d (XMLStreamReader2)parse((InputStream)resource, null,\n          isRestricted);\n    }\n    return reader;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "3961690037fa4274a3640104b3c344e8626caa10": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15973. Configuration: Included properties are not cached if resource is a stream. Contributed by Eric Payne\n",
      "commitDate": "20/12/18 7:29 AM",
      "commitName": "3961690037fa4274a3640104b3c344e8626caa10",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,29 @@\n+  private XMLStreamReader2 getStreamReader(Resource wrapper, boolean quiet)\n+      throws XMLStreamException, IOException {\n+    Object resource \u003d wrapper.getResource();\n+    boolean isRestricted \u003d wrapper.isParserRestricted();\n+    XMLStreamReader2 reader \u003d null;\n+    if (resource instanceof URL) {                  // an URL resource\n+      reader  \u003d (XMLStreamReader2)parse((URL)resource, isRestricted);\n+    } else if (resource instanceof String) {        // a CLASSPATH resource\n+      URL url \u003d getResource((String)resource);\n+      reader \u003d (XMLStreamReader2)parse(url, isRestricted);\n+    } else if (resource instanceof Path) {          // a file resource\n+      // Can\u0027t use FileSystem API or we get an infinite loop\n+      // since FileSystem uses Configuration API.  Use java.io.File instead.\n+      File file \u003d new File(((Path)resource).toUri().getPath())\n+        .getAbsoluteFile();\n+      if (file.exists()) {\n+        if (!quiet) {\n+          LOG.debug(\"parsing File \" + file);\n+        }\n+        reader \u003d (XMLStreamReader2)parse(new BufferedInputStream(\n+            new FileInputStream(file)), ((Path)resource).toString(),\n+            isRestricted);\n+      }\n+    } else if (resource instanceof InputStream) {\n+      reader \u003d (XMLStreamReader2)parse((InputStream)resource, null,\n+          isRestricted);\n+    }\n+    return reader;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private XMLStreamReader2 getStreamReader(Resource wrapper, boolean quiet)\n      throws XMLStreamException, IOException {\n    Object resource \u003d wrapper.getResource();\n    boolean isRestricted \u003d wrapper.isParserRestricted();\n    XMLStreamReader2 reader \u003d null;\n    if (resource instanceof URL) {                  // an URL resource\n      reader  \u003d (XMLStreamReader2)parse((URL)resource, isRestricted);\n    } else if (resource instanceof String) {        // a CLASSPATH resource\n      URL url \u003d getResource((String)resource);\n      reader \u003d (XMLStreamReader2)parse(url, isRestricted);\n    } else if (resource instanceof Path) {          // a file resource\n      // Can\u0027t use FileSystem API or we get an infinite loop\n      // since FileSystem uses Configuration API.  Use java.io.File instead.\n      File file \u003d new File(((Path)resource).toUri().getPath())\n        .getAbsoluteFile();\n      if (file.exists()) {\n        if (!quiet) {\n          LOG.debug(\"parsing File \" + file);\n        }\n        reader \u003d (XMLStreamReader2)parse(new BufferedInputStream(\n            new FileInputStream(file)), ((Path)resource).toString(),\n            isRestricted);\n      }\n    } else if (resource instanceof InputStream) {\n      reader \u003d (XMLStreamReader2)parse((InputStream)resource, null,\n          isRestricted);\n    }\n    return reader;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
    }
  }
}