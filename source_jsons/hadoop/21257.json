{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HumanReadableHistoryViewerPrinter.java",
  "functionName": "printAnalysis",
  "functionId": "printAnalysis___ps-PrintStream__tasks-JobHistoryParser.TaskAttemptInfo[]__cmp-Comparator__JobHistoryParser.TaskAttemptInfo____taskType-String__avg-long__showTasks-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HumanReadableHistoryViewerPrinter.java",
  "functionStartLine": 294,
  "functionEndLine": 342,
  "numCommitsSeen": 12,
  "timeTaken": 10298,
  "changeHistory": [
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
      "commitDate": "18/02/16 5:58 PM",
      "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
          "commitDate": "18/02/16 5:58 PM",
          "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "18/02/16 2:06 PM",
          "commitNameOld": "8ab7658025616d154decd97578de3327ec6f9109",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,49 @@\n-  private void printAnalysis(JobHistoryParser.TaskAttemptInfo [] tasks,\n+  protected void printAnalysis(PrintStream ps,\n+      JobHistoryParser.TaskAttemptInfo[] tasks,\n       Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n-      String taskType,\n-      long avg,\n-      int showTasks) {\n+      String taskType, long avg, int showTasks) {\n     Arrays.sort(tasks, cmp);\n     JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n-    StringBuffer details \u003d new StringBuffer();\n+    StringBuilder details \u003d new StringBuilder();\n     details.append(\"\\nTime taken by best performing \");\n     details.append(taskType).append(\" task \");\n     details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n     if (\"map\".equals(taskType)) {\n       details.append(StringUtils.formatTimeDiff(\n           min.getFinishTime(),\n           min.getStartTime()));\n     } else if (\"shuffle\".equals(taskType)) {\n       details.append(StringUtils.formatTimeDiff(\n           min.getShuffleFinishTime(),\n           min.getStartTime()));\n     } else {\n       details.append(StringUtils.formatTimeDiff(\n           min.getFinishTime(),\n           min.getShuffleFinishTime()));\n     }\n     details.append(\"\\nAverage time taken by \");\n-    details.append(taskType).append(\" tasks: \"); \n+    details.append(taskType).append(\" tasks: \");\n     details.append(StringUtils.formatTimeDiff(avg, 0));\n     details.append(\"\\nWorse performing \");\n     details.append(taskType).append(\" tasks: \");\n     details.append(\"\\nTaskId\\t\\tTimetaken\");\n-    System.out.println(details.toString());\n+    ps.println(details);\n     for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n       details.setLength(0);\n       details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n       if (\"map\".equals(taskType)) {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getFinishTime(),\n             tasks[i].getStartTime()));\n       } else if (\"shuffle\".equals(taskType)) {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getShuffleFinishTime(),\n             tasks[i].getStartTime()));\n       } else {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getFinishTime(),\n             tasks[i].getShuffleFinishTime()));\n       }\n-      System.out.println(details.toString());\n+      ps.println(details);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void printAnalysis(PrintStream ps,\n      JobHistoryParser.TaskAttemptInfo[] tasks,\n      Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n      String taskType, long avg, int showTasks) {\n    Arrays.sort(tasks, cmp);\n    JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n    StringBuilder details \u003d new StringBuilder();\n    details.append(\"\\nTime taken by best performing \");\n    details.append(taskType).append(\" task \");\n    details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n    if (\"map\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getStartTime()));\n    } else if (\"shuffle\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getShuffleFinishTime(),\n          min.getStartTime()));\n    } else {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getShuffleFinishTime()));\n    }\n    details.append(\"\\nAverage time taken by \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(StringUtils.formatTimeDiff(avg, 0));\n    details.append(\"\\nWorse performing \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(\"\\nTaskId\\t\\tTimetaken\");\n    ps.println(details);\n    for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n      details.setLength(0);\n      details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n      if (\"map\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getStartTime()));\n      } else if (\"shuffle\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getShuffleFinishTime(),\n            tasks[i].getStartTime()));\n      } else {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getShuffleFinishTime()));\n      }\n      ps.println(details);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HumanReadableHistoryViewerPrinter.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HumanReadableHistoryViewerPrinter.java",
            "oldMethodName": "printAnalysis",
            "newMethodName": "printAnalysis"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
          "commitDate": "18/02/16 5:58 PM",
          "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "18/02/16 2:06 PM",
          "commitNameOld": "8ab7658025616d154decd97578de3327ec6f9109",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,49 @@\n-  private void printAnalysis(JobHistoryParser.TaskAttemptInfo [] tasks,\n+  protected void printAnalysis(PrintStream ps,\n+      JobHistoryParser.TaskAttemptInfo[] tasks,\n       Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n-      String taskType,\n-      long avg,\n-      int showTasks) {\n+      String taskType, long avg, int showTasks) {\n     Arrays.sort(tasks, cmp);\n     JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n-    StringBuffer details \u003d new StringBuffer();\n+    StringBuilder details \u003d new StringBuilder();\n     details.append(\"\\nTime taken by best performing \");\n     details.append(taskType).append(\" task \");\n     details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n     if (\"map\".equals(taskType)) {\n       details.append(StringUtils.formatTimeDiff(\n           min.getFinishTime(),\n           min.getStartTime()));\n     } else if (\"shuffle\".equals(taskType)) {\n       details.append(StringUtils.formatTimeDiff(\n           min.getShuffleFinishTime(),\n           min.getStartTime()));\n     } else {\n       details.append(StringUtils.formatTimeDiff(\n           min.getFinishTime(),\n           min.getShuffleFinishTime()));\n     }\n     details.append(\"\\nAverage time taken by \");\n-    details.append(taskType).append(\" tasks: \"); \n+    details.append(taskType).append(\" tasks: \");\n     details.append(StringUtils.formatTimeDiff(avg, 0));\n     details.append(\"\\nWorse performing \");\n     details.append(taskType).append(\" tasks: \");\n     details.append(\"\\nTaskId\\t\\tTimetaken\");\n-    System.out.println(details.toString());\n+    ps.println(details);\n     for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n       details.setLength(0);\n       details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n       if (\"map\".equals(taskType)) {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getFinishTime(),\n             tasks[i].getStartTime()));\n       } else if (\"shuffle\".equals(taskType)) {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getShuffleFinishTime(),\n             tasks[i].getStartTime()));\n       } else {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getFinishTime(),\n             tasks[i].getShuffleFinishTime()));\n       }\n-      System.out.println(details.toString());\n+      ps.println(details);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void printAnalysis(PrintStream ps,\n      JobHistoryParser.TaskAttemptInfo[] tasks,\n      Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n      String taskType, long avg, int showTasks) {\n    Arrays.sort(tasks, cmp);\n    JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n    StringBuilder details \u003d new StringBuilder();\n    details.append(\"\\nTime taken by best performing \");\n    details.append(taskType).append(\" task \");\n    details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n    if (\"map\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getStartTime()));\n    } else if (\"shuffle\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getShuffleFinishTime(),\n          min.getStartTime()));\n    } else {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getShuffleFinishTime()));\n    }\n    details.append(\"\\nAverage time taken by \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(StringUtils.formatTimeDiff(avg, 0));\n    details.append(\"\\nWorse performing \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(\"\\nTaskId\\t\\tTimetaken\");\n    ps.println(details);\n    for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n      details.setLength(0);\n      details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n      if (\"map\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getStartTime()));\n      } else if (\"shuffle\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getShuffleFinishTime(),\n            tasks[i].getStartTime()));\n      } else {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getShuffleFinishTime()));\n      }\n      ps.println(details);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HumanReadableHistoryViewerPrinter.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
          "commitDate": "18/02/16 5:58 PM",
          "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "18/02/16 2:06 PM",
          "commitNameOld": "8ab7658025616d154decd97578de3327ec6f9109",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,49 @@\n-  private void printAnalysis(JobHistoryParser.TaskAttemptInfo [] tasks,\n+  protected void printAnalysis(PrintStream ps,\n+      JobHistoryParser.TaskAttemptInfo[] tasks,\n       Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n-      String taskType,\n-      long avg,\n-      int showTasks) {\n+      String taskType, long avg, int showTasks) {\n     Arrays.sort(tasks, cmp);\n     JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n-    StringBuffer details \u003d new StringBuffer();\n+    StringBuilder details \u003d new StringBuilder();\n     details.append(\"\\nTime taken by best performing \");\n     details.append(taskType).append(\" task \");\n     details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n     if (\"map\".equals(taskType)) {\n       details.append(StringUtils.formatTimeDiff(\n           min.getFinishTime(),\n           min.getStartTime()));\n     } else if (\"shuffle\".equals(taskType)) {\n       details.append(StringUtils.formatTimeDiff(\n           min.getShuffleFinishTime(),\n           min.getStartTime()));\n     } else {\n       details.append(StringUtils.formatTimeDiff(\n           min.getFinishTime(),\n           min.getShuffleFinishTime()));\n     }\n     details.append(\"\\nAverage time taken by \");\n-    details.append(taskType).append(\" tasks: \"); \n+    details.append(taskType).append(\" tasks: \");\n     details.append(StringUtils.formatTimeDiff(avg, 0));\n     details.append(\"\\nWorse performing \");\n     details.append(taskType).append(\" tasks: \");\n     details.append(\"\\nTaskId\\t\\tTimetaken\");\n-    System.out.println(details.toString());\n+    ps.println(details);\n     for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n       details.setLength(0);\n       details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n       if (\"map\".equals(taskType)) {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getFinishTime(),\n             tasks[i].getStartTime()));\n       } else if (\"shuffle\".equals(taskType)) {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getShuffleFinishTime(),\n             tasks[i].getStartTime()));\n       } else {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getFinishTime(),\n             tasks[i].getShuffleFinishTime()));\n       }\n-      System.out.println(details.toString());\n+      ps.println(details);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void printAnalysis(PrintStream ps,\n      JobHistoryParser.TaskAttemptInfo[] tasks,\n      Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n      String taskType, long avg, int showTasks) {\n    Arrays.sort(tasks, cmp);\n    JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n    StringBuilder details \u003d new StringBuilder();\n    details.append(\"\\nTime taken by best performing \");\n    details.append(taskType).append(\" task \");\n    details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n    if (\"map\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getStartTime()));\n    } else if (\"shuffle\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getShuffleFinishTime(),\n          min.getStartTime()));\n    } else {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getShuffleFinishTime()));\n    }\n    details.append(\"\\nAverage time taken by \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(StringUtils.formatTimeDiff(avg, 0));\n    details.append(\"\\nWorse performing \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(\"\\nTaskId\\t\\tTimetaken\");\n    ps.println(details);\n    for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n      details.setLength(0);\n      details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n      if (\"map\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getStartTime()));\n      } else if (\"shuffle\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getShuffleFinishTime(),\n            tasks[i].getStartTime()));\n      } else {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getShuffleFinishTime()));\n      }\n      ps.println(details);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HumanReadableHistoryViewerPrinter.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
          "commitDate": "18/02/16 5:58 PM",
          "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "18/02/16 2:06 PM",
          "commitNameOld": "8ab7658025616d154decd97578de3327ec6f9109",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,49 @@\n-  private void printAnalysis(JobHistoryParser.TaskAttemptInfo [] tasks,\n+  protected void printAnalysis(PrintStream ps,\n+      JobHistoryParser.TaskAttemptInfo[] tasks,\n       Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n-      String taskType,\n-      long avg,\n-      int showTasks) {\n+      String taskType, long avg, int showTasks) {\n     Arrays.sort(tasks, cmp);\n     JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n-    StringBuffer details \u003d new StringBuffer();\n+    StringBuilder details \u003d new StringBuilder();\n     details.append(\"\\nTime taken by best performing \");\n     details.append(taskType).append(\" task \");\n     details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n     if (\"map\".equals(taskType)) {\n       details.append(StringUtils.formatTimeDiff(\n           min.getFinishTime(),\n           min.getStartTime()));\n     } else if (\"shuffle\".equals(taskType)) {\n       details.append(StringUtils.formatTimeDiff(\n           min.getShuffleFinishTime(),\n           min.getStartTime()));\n     } else {\n       details.append(StringUtils.formatTimeDiff(\n           min.getFinishTime(),\n           min.getShuffleFinishTime()));\n     }\n     details.append(\"\\nAverage time taken by \");\n-    details.append(taskType).append(\" tasks: \"); \n+    details.append(taskType).append(\" tasks: \");\n     details.append(StringUtils.formatTimeDiff(avg, 0));\n     details.append(\"\\nWorse performing \");\n     details.append(taskType).append(\" tasks: \");\n     details.append(\"\\nTaskId\\t\\tTimetaken\");\n-    System.out.println(details.toString());\n+    ps.println(details);\n     for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n       details.setLength(0);\n       details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n       if (\"map\".equals(taskType)) {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getFinishTime(),\n             tasks[i].getStartTime()));\n       } else if (\"shuffle\".equals(taskType)) {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getShuffleFinishTime(),\n             tasks[i].getStartTime()));\n       } else {\n         details.append(StringUtils.formatTimeDiff(\n             tasks[i].getFinishTime(),\n             tasks[i].getShuffleFinishTime()));\n       }\n-      System.out.println(details.toString());\n+      ps.println(details);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void printAnalysis(PrintStream ps,\n      JobHistoryParser.TaskAttemptInfo[] tasks,\n      Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n      String taskType, long avg, int showTasks) {\n    Arrays.sort(tasks, cmp);\n    JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n    StringBuilder details \u003d new StringBuilder();\n    details.append(\"\\nTime taken by best performing \");\n    details.append(taskType).append(\" task \");\n    details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n    if (\"map\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getStartTime()));\n    } else if (\"shuffle\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getShuffleFinishTime(),\n          min.getStartTime()));\n    } else {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getShuffleFinishTime()));\n    }\n    details.append(\"\\nAverage time taken by \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(StringUtils.formatTimeDiff(avg, 0));\n    details.append(\"\\nWorse performing \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(\"\\nTaskId\\t\\tTimetaken\");\n    ps.println(details);\n    for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n      details.setLength(0);\n      details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n      if (\"map\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getStartTime()));\n      } else if (\"shuffle\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getShuffleFinishTime(),\n            tasks[i].getStartTime()));\n      } else {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getShuffleFinishTime()));\n      }\n      ps.println(details);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HumanReadableHistoryViewerPrinter.java",
          "extendedDetails": {
            "oldValue": "[tasks-JobHistoryParser.TaskAttemptInfo[], cmp-Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e, taskType-String, avg-long, showTasks-int]",
            "newValue": "[ps-PrintStream, tasks-JobHistoryParser.TaskAttemptInfo[], cmp-Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e, taskType-String, avg-long, showTasks-int]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void printAnalysis(JobHistoryParser.TaskAttemptInfo [] tasks,\n      Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n      String taskType,\n      long avg,\n      int showTasks) {\n    Arrays.sort(tasks, cmp);\n    JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n    StringBuffer details \u003d new StringBuffer();\n    details.append(\"\\nTime taken by best performing \");\n    details.append(taskType).append(\" task \");\n    details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n    if (\"map\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getStartTime()));\n    } else if (\"shuffle\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getShuffleFinishTime(),\n          min.getStartTime()));\n    } else {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getShuffleFinishTime()));\n    }\n    details.append(\"\\nAverage time taken by \");\n    details.append(taskType).append(\" tasks: \"); \n    details.append(StringUtils.formatTimeDiff(avg, 0));\n    details.append(\"\\nWorse performing \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(\"\\nTaskId\\t\\tTimetaken\");\n    System.out.println(details.toString());\n    for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n      details.setLength(0);\n      details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n      if (\"map\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getStartTime()));\n      } else if (\"shuffle\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getShuffleFinishTime(),\n            tasks[i].getStartTime()));\n      } else {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getShuffleFinishTime()));\n      }\n      System.out.println(details.toString());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void printAnalysis(JobHistoryParser.TaskAttemptInfo [] tasks,\n      Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n      String taskType,\n      long avg,\n      int showTasks) {\n    Arrays.sort(tasks, cmp);\n    JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n    StringBuffer details \u003d new StringBuffer();\n    details.append(\"\\nTime taken by best performing \");\n    details.append(taskType).append(\" task \");\n    details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n    if (\"map\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getStartTime()));\n    } else if (\"shuffle\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getShuffleFinishTime(),\n          min.getStartTime()));\n    } else {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getShuffleFinishTime()));\n    }\n    details.append(\"\\nAverage time taken by \");\n    details.append(taskType).append(\" tasks: \"); \n    details.append(StringUtils.formatTimeDiff(avg, 0));\n    details.append(\"\\nWorse performing \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(\"\\nTaskId\\t\\tTimetaken\");\n    System.out.println(details.toString());\n    for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n      details.setLength(0);\n      details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n      if (\"map\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getStartTime()));\n      } else if (\"shuffle\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getShuffleFinishTime(),\n            tasks[i].getStartTime()));\n      } else {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getShuffleFinishTime()));\n      }\n      System.out.println(details.toString());\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
        "oldMethodName": "printAnalysis",
        "newMethodName": "printAnalysis"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,50 @@\n+  private void printAnalysis(JobHistoryParser.TaskAttemptInfo [] tasks,\n+      Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n+      String taskType,\n+      long avg,\n+      int showTasks) {\n+    Arrays.sort(tasks, cmp);\n+    JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n+    StringBuffer details \u003d new StringBuffer();\n+    details.append(\"\\nTime taken by best performing \");\n+    details.append(taskType).append(\" task \");\n+    details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n+    if (\"map\".equals(taskType)) {\n+      details.append(StringUtils.formatTimeDiff(\n+          min.getFinishTime(),\n+          min.getStartTime()));\n+    } else if (\"shuffle\".equals(taskType)) {\n+      details.append(StringUtils.formatTimeDiff(\n+          min.getShuffleFinishTime(),\n+          min.getStartTime()));\n+    } else {\n+      details.append(StringUtils.formatTimeDiff(\n+          min.getFinishTime(),\n+          min.getShuffleFinishTime()));\n+    }\n+    details.append(\"\\nAverage time taken by \");\n+    details.append(taskType).append(\" tasks: \"); \n+    details.append(StringUtils.formatTimeDiff(avg, 0));\n+    details.append(\"\\nWorse performing \");\n+    details.append(taskType).append(\" tasks: \");\n+    details.append(\"\\nTaskId\\t\\tTimetaken\");\n+    System.out.println(details.toString());\n+    for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n+      details.setLength(0);\n+      details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n+      if (\"map\".equals(taskType)) {\n+        details.append(StringUtils.formatTimeDiff(\n+            tasks[i].getFinishTime(),\n+            tasks[i].getStartTime()));\n+      } else if (\"shuffle\".equals(taskType)) {\n+        details.append(StringUtils.formatTimeDiff(\n+            tasks[i].getShuffleFinishTime(),\n+            tasks[i].getStartTime()));\n+      } else {\n+        details.append(StringUtils.formatTimeDiff(\n+            tasks[i].getFinishTime(),\n+            tasks[i].getShuffleFinishTime()));\n+      }\n+      System.out.println(details.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printAnalysis(JobHistoryParser.TaskAttemptInfo [] tasks,\n      Comparator\u003cJobHistoryParser.TaskAttemptInfo\u003e cmp,\n      String taskType,\n      long avg,\n      int showTasks) {\n    Arrays.sort(tasks, cmp);\n    JobHistoryParser.TaskAttemptInfo min \u003d tasks[tasks.length-1];\n    StringBuffer details \u003d new StringBuffer();\n    details.append(\"\\nTime taken by best performing \");\n    details.append(taskType).append(\" task \");\n    details.append(min.getAttemptId().getTaskID().toString()).append(\": \");\n    if (\"map\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getStartTime()));\n    } else if (\"shuffle\".equals(taskType)) {\n      details.append(StringUtils.formatTimeDiff(\n          min.getShuffleFinishTime(),\n          min.getStartTime()));\n    } else {\n      details.append(StringUtils.formatTimeDiff(\n          min.getFinishTime(),\n          min.getShuffleFinishTime()));\n    }\n    details.append(\"\\nAverage time taken by \");\n    details.append(taskType).append(\" tasks: \"); \n    details.append(StringUtils.formatTimeDiff(avg, 0));\n    details.append(\"\\nWorse performing \");\n    details.append(taskType).append(\" tasks: \");\n    details.append(\"\\nTaskId\\t\\tTimetaken\");\n    System.out.println(details.toString());\n    for (int i \u003d 0; i \u003c showTasks \u0026\u0026 i \u003c tasks.length; i++) {\n      details.setLength(0);\n      details.append(tasks[i].getAttemptId().getTaskID()).append(\" \");\n      if (\"map\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getStartTime()));\n      } else if (\"shuffle\".equals(taskType)) {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getShuffleFinishTime(),\n            tasks[i].getStartTime()));\n      } else {\n        details.append(StringUtils.formatTimeDiff(\n            tasks[i].getFinishTime(),\n            tasks[i].getShuffleFinishTime()));\n      }\n      System.out.println(details.toString());\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java"
    }
  }
}