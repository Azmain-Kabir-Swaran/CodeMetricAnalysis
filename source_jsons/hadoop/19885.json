{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SortedRanges.java",
  "functionName": "add",
  "functionId": "add___range-Range",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SortedRanges.java",
  "functionStartLine": 80,
  "functionEndLine": 125,
  "numCommitsSeen": 5,
  "timeTaken": 4397,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void add(Range range){\n    if(range.isEmpty()) {\n      return;\n    }\n    \n    long startIndex \u003d range.getStartIndex();\n    long endIndex \u003d range.getEndIndex();\n    //make sure that there are no overlapping ranges\n    SortedSet\u003cRange\u003e headSet \u003d ranges.headSet(range);\n    if(headSet.size()\u003e0) {\n      Range previousRange \u003d headSet.last();\n      LOG.debug(\"previousRange \"+previousRange);\n      if(startIndex\u003cpreviousRange.getEndIndex()) {\n        //previousRange overlaps this range\n        //remove the previousRange\n        if(ranges.remove(previousRange)) {\n          indicesCount-\u003dpreviousRange.getLength();\n        }\n        //expand this range\n        startIndex \u003d previousRange.getStartIndex();\n        endIndex \u003d endIndex\u003e\u003dpreviousRange.getEndIndex() ?\n                          endIndex : previousRange.getEndIndex();\n      }\n    }\n    \n    Iterator\u003cRange\u003e tailSetIt \u003d ranges.tailSet(range).iterator();\n    while(tailSetIt.hasNext()) {\n      Range nextRange \u003d tailSetIt.next();\n      LOG.debug(\"nextRange \"+nextRange +\"   startIndex:\"+startIndex+\n          \"  endIndex:\"+endIndex);\n      if(endIndex\u003e\u003dnextRange.getStartIndex()) {\n        //nextRange overlaps this range\n        //remove the nextRange\n        tailSetIt.remove();\n        indicesCount-\u003dnextRange.getLength();\n        if(endIndex\u003cnextRange.getEndIndex()) {\n          //expand this range\n          endIndex \u003d nextRange.getEndIndex();\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    add(startIndex,endIndex);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SortedRanges.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SortedRanges.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SortedRanges.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void add(Range range){\n    if(range.isEmpty()) {\n      return;\n    }\n    \n    long startIndex \u003d range.getStartIndex();\n    long endIndex \u003d range.getEndIndex();\n    //make sure that there are no overlapping ranges\n    SortedSet\u003cRange\u003e headSet \u003d ranges.headSet(range);\n    if(headSet.size()\u003e0) {\n      Range previousRange \u003d headSet.last();\n      LOG.debug(\"previousRange \"+previousRange);\n      if(startIndex\u003cpreviousRange.getEndIndex()) {\n        //previousRange overlaps this range\n        //remove the previousRange\n        if(ranges.remove(previousRange)) {\n          indicesCount-\u003dpreviousRange.getLength();\n        }\n        //expand this range\n        startIndex \u003d previousRange.getStartIndex();\n        endIndex \u003d endIndex\u003e\u003dpreviousRange.getEndIndex() ?\n                          endIndex : previousRange.getEndIndex();\n      }\n    }\n    \n    Iterator\u003cRange\u003e tailSetIt \u003d ranges.tailSet(range).iterator();\n    while(tailSetIt.hasNext()) {\n      Range nextRange \u003d tailSetIt.next();\n      LOG.debug(\"nextRange \"+nextRange +\"   startIndex:\"+startIndex+\n          \"  endIndex:\"+endIndex);\n      if(endIndex\u003e\u003dnextRange.getStartIndex()) {\n        //nextRange overlaps this range\n        //remove the nextRange\n        tailSetIt.remove();\n        indicesCount-\u003dnextRange.getLength();\n        if(endIndex\u003cnextRange.getEndIndex()) {\n          //expand this range\n          endIndex \u003d nextRange.getEndIndex();\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    add(startIndex,endIndex);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SortedRanges.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/SortedRanges.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/SortedRanges.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,46 @@\n+  synchronized void add(Range range){\n+    if(range.isEmpty()) {\n+      return;\n+    }\n+    \n+    long startIndex \u003d range.getStartIndex();\n+    long endIndex \u003d range.getEndIndex();\n+    //make sure that there are no overlapping ranges\n+    SortedSet\u003cRange\u003e headSet \u003d ranges.headSet(range);\n+    if(headSet.size()\u003e0) {\n+      Range previousRange \u003d headSet.last();\n+      LOG.debug(\"previousRange \"+previousRange);\n+      if(startIndex\u003cpreviousRange.getEndIndex()) {\n+        //previousRange overlaps this range\n+        //remove the previousRange\n+        if(ranges.remove(previousRange)) {\n+          indicesCount-\u003dpreviousRange.getLength();\n+        }\n+        //expand this range\n+        startIndex \u003d previousRange.getStartIndex();\n+        endIndex \u003d endIndex\u003e\u003dpreviousRange.getEndIndex() ?\n+                          endIndex : previousRange.getEndIndex();\n+      }\n+    }\n+    \n+    Iterator\u003cRange\u003e tailSetIt \u003d ranges.tailSet(range).iterator();\n+    while(tailSetIt.hasNext()) {\n+      Range nextRange \u003d tailSetIt.next();\n+      LOG.debug(\"nextRange \"+nextRange +\"   startIndex:\"+startIndex+\n+          \"  endIndex:\"+endIndex);\n+      if(endIndex\u003e\u003dnextRange.getStartIndex()) {\n+        //nextRange overlaps this range\n+        //remove the nextRange\n+        tailSetIt.remove();\n+        indicesCount-\u003dnextRange.getLength();\n+        if(endIndex\u003cnextRange.getEndIndex()) {\n+          //expand this range\n+          endIndex \u003d nextRange.getEndIndex();\n+          break;\n+        }\n+      } else {\n+        break;\n+      }\n+    }\n+    add(startIndex,endIndex);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void add(Range range){\n    if(range.isEmpty()) {\n      return;\n    }\n    \n    long startIndex \u003d range.getStartIndex();\n    long endIndex \u003d range.getEndIndex();\n    //make sure that there are no overlapping ranges\n    SortedSet\u003cRange\u003e headSet \u003d ranges.headSet(range);\n    if(headSet.size()\u003e0) {\n      Range previousRange \u003d headSet.last();\n      LOG.debug(\"previousRange \"+previousRange);\n      if(startIndex\u003cpreviousRange.getEndIndex()) {\n        //previousRange overlaps this range\n        //remove the previousRange\n        if(ranges.remove(previousRange)) {\n          indicesCount-\u003dpreviousRange.getLength();\n        }\n        //expand this range\n        startIndex \u003d previousRange.getStartIndex();\n        endIndex \u003d endIndex\u003e\u003dpreviousRange.getEndIndex() ?\n                          endIndex : previousRange.getEndIndex();\n      }\n    }\n    \n    Iterator\u003cRange\u003e tailSetIt \u003d ranges.tailSet(range).iterator();\n    while(tailSetIt.hasNext()) {\n      Range nextRange \u003d tailSetIt.next();\n      LOG.debug(\"nextRange \"+nextRange +\"   startIndex:\"+startIndex+\n          \"  endIndex:\"+endIndex);\n      if(endIndex\u003e\u003dnextRange.getStartIndex()) {\n        //nextRange overlaps this range\n        //remove the nextRange\n        tailSetIt.remove();\n        indicesCount-\u003dnextRange.getLength();\n        if(endIndex\u003cnextRange.getEndIndex()) {\n          //expand this range\n          endIndex \u003d nextRange.getEndIndex();\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    add(startIndex,endIndex);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/SortedRanges.java"
    }
  }
}