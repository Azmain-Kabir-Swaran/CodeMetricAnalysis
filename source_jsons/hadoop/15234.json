{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSAdmin.java",
  "functionName": "printTopology",
  "functionId": "printTopology",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
  "functionStartLine": 1589,
  "functionEndLine": 1625,
  "numCommitsSeen": 118,
  "timeTaken": 6569,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "c163455df487f99171e5045cdf0c2e1be1c4f99e",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "c163455df487f99171e5045cdf0c2e1be1c4f99e": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int printTopology() throws IOException {\n      DistributedFileSystem dfs \u003d getDFS();\n      final DatanodeInfo[] report \u003d dfs.getDataNodeStats();\n\n      // Build a map of rack -\u003e nodes from the datanode report\n      HashMap\u003cString, TreeSet\u003cString\u003e \u003e tree \u003d new HashMap\u003cString, TreeSet\u003cString\u003e\u003e();\n      for(DatanodeInfo dni : report) {\n        String location \u003d dni.getNetworkLocation();\n        String name \u003d dni.getName();\n        \n        if(!tree.containsKey(location)) {\n          tree.put(location, new TreeSet\u003cString\u003e());\n        }\n        \n        tree.get(location).add(name);\n      }\n      \n      // Sort the racks (and nodes) alphabetically, display in order\n      ArrayList\u003cString\u003e racks \u003d new ArrayList\u003cString\u003e(tree.keySet());\n      Collections.sort(racks);\n      \n      for(String r : racks) {\n        System.out.println(\"Rack: \" + r);\n        TreeSet\u003cString\u003e nodes \u003d tree.get(r);\n\n        for(String n : nodes) {\n          System.out.print(\"   \" + n);\n          String hostname \u003d NetUtils.getHostNameOfIP(n);\n          if(hostname !\u003d null)\n            System.out.print(\" (\" + hostname + \")\");\n          System.out.println();\n        }\n\n        System.out.println();\n      }\n    return 0;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int printTopology() throws IOException {\n      DistributedFileSystem dfs \u003d getDFS();\n      final DatanodeInfo[] report \u003d dfs.getDataNodeStats();\n\n      // Build a map of rack -\u003e nodes from the datanode report\n      HashMap\u003cString, TreeSet\u003cString\u003e \u003e tree \u003d new HashMap\u003cString, TreeSet\u003cString\u003e\u003e();\n      for(DatanodeInfo dni : report) {\n        String location \u003d dni.getNetworkLocation();\n        String name \u003d dni.getName();\n        \n        if(!tree.containsKey(location)) {\n          tree.put(location, new TreeSet\u003cString\u003e());\n        }\n        \n        tree.get(location).add(name);\n      }\n      \n      // Sort the racks (and nodes) alphabetically, display in order\n      ArrayList\u003cString\u003e racks \u003d new ArrayList\u003cString\u003e(tree.keySet());\n      Collections.sort(racks);\n      \n      for(String r : racks) {\n        System.out.println(\"Rack: \" + r);\n        TreeSet\u003cString\u003e nodes \u003d tree.get(r);\n\n        for(String n : nodes) {\n          System.out.print(\"   \" + n);\n          String hostname \u003d NetUtils.getHostNameOfIP(n);\n          if(hostname !\u003d null)\n            System.out.print(\" (\" + hostname + \")\");\n          System.out.println();\n        }\n\n        System.out.println();\n      }\n    return 0;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java"
      }
    },
    "c163455df487f99171e5045cdf0c2e1be1c4f99e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2159. Deprecate DistributedFileSystem.getClient() and fixed the deprecated warnings in DFSAdmin.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1147359 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/11 10:12 PM",
      "commitName": "c163455df487f99171e5045cdf0c2e1be1c4f99e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n   public int printTopology() throws IOException {\n       DistributedFileSystem dfs \u003d getDFS();\n-      DFSClient client \u003d dfs.getClient();\n-      DatanodeInfo[] report \u003d client.datanodeReport(DatanodeReportType.ALL);\n-      \n+      final DatanodeInfo[] report \u003d dfs.getDataNodeStats();\n+\n       // Build a map of rack -\u003e nodes from the datanode report\n       HashMap\u003cString, TreeSet\u003cString\u003e \u003e tree \u003d new HashMap\u003cString, TreeSet\u003cString\u003e\u003e();\n       for(DatanodeInfo dni : report) {\n         String location \u003d dni.getNetworkLocation();\n         String name \u003d dni.getName();\n         \n         if(!tree.containsKey(location)) {\n           tree.put(location, new TreeSet\u003cString\u003e());\n         }\n         \n         tree.get(location).add(name);\n       }\n       \n       // Sort the racks (and nodes) alphabetically, display in order\n       ArrayList\u003cString\u003e racks \u003d new ArrayList\u003cString\u003e(tree.keySet());\n       Collections.sort(racks);\n       \n       for(String r : racks) {\n         System.out.println(\"Rack: \" + r);\n         TreeSet\u003cString\u003e nodes \u003d tree.get(r);\n \n         for(String n : nodes) {\n           System.out.print(\"   \" + n);\n           String hostname \u003d NetUtils.getHostNameOfIP(n);\n           if(hostname !\u003d null)\n             System.out.print(\" (\" + hostname + \")\");\n           System.out.println();\n         }\n \n         System.out.println();\n       }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printTopology() throws IOException {\n      DistributedFileSystem dfs \u003d getDFS();\n      final DatanodeInfo[] report \u003d dfs.getDataNodeStats();\n\n      // Build a map of rack -\u003e nodes from the datanode report\n      HashMap\u003cString, TreeSet\u003cString\u003e \u003e tree \u003d new HashMap\u003cString, TreeSet\u003cString\u003e\u003e();\n      for(DatanodeInfo dni : report) {\n        String location \u003d dni.getNetworkLocation();\n        String name \u003d dni.getName();\n        \n        if(!tree.containsKey(location)) {\n          tree.put(location, new TreeSet\u003cString\u003e());\n        }\n        \n        tree.get(location).add(name);\n      }\n      \n      // Sort the racks (and nodes) alphabetically, display in order\n      ArrayList\u003cString\u003e racks \u003d new ArrayList\u003cString\u003e(tree.keySet());\n      Collections.sort(racks);\n      \n      for(String r : racks) {\n        System.out.println(\"Rack: \" + r);\n        TreeSet\u003cString\u003e nodes \u003d tree.get(r);\n\n        for(String n : nodes) {\n          System.out.print(\"   \" + n);\n          String hostname \u003d NetUtils.getHostNameOfIP(n);\n          if(hostname !\u003d null)\n            System.out.print(\" (\" + hostname + \")\");\n          System.out.println();\n        }\n\n        System.out.println();\n      }\n    return 0;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,38 @@\n+  public int printTopology() throws IOException {\n+      DistributedFileSystem dfs \u003d getDFS();\n+      DFSClient client \u003d dfs.getClient();\n+      DatanodeInfo[] report \u003d client.datanodeReport(DatanodeReportType.ALL);\n+      \n+      // Build a map of rack -\u003e nodes from the datanode report\n+      HashMap\u003cString, TreeSet\u003cString\u003e \u003e tree \u003d new HashMap\u003cString, TreeSet\u003cString\u003e\u003e();\n+      for(DatanodeInfo dni : report) {\n+        String location \u003d dni.getNetworkLocation();\n+        String name \u003d dni.getName();\n+        \n+        if(!tree.containsKey(location)) {\n+          tree.put(location, new TreeSet\u003cString\u003e());\n+        }\n+        \n+        tree.get(location).add(name);\n+      }\n+      \n+      // Sort the racks (and nodes) alphabetically, display in order\n+      ArrayList\u003cString\u003e racks \u003d new ArrayList\u003cString\u003e(tree.keySet());\n+      Collections.sort(racks);\n+      \n+      for(String r : racks) {\n+        System.out.println(\"Rack: \" + r);\n+        TreeSet\u003cString\u003e nodes \u003d tree.get(r);\n+\n+        for(String n : nodes) {\n+          System.out.print(\"   \" + n);\n+          String hostname \u003d NetUtils.getHostNameOfIP(n);\n+          if(hostname !\u003d null)\n+            System.out.print(\" (\" + hostname + \")\");\n+          System.out.println();\n+        }\n+\n+        System.out.println();\n+      }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int printTopology() throws IOException {\n      DistributedFileSystem dfs \u003d getDFS();\n      DFSClient client \u003d dfs.getClient();\n      DatanodeInfo[] report \u003d client.datanodeReport(DatanodeReportType.ALL);\n      \n      // Build a map of rack -\u003e nodes from the datanode report\n      HashMap\u003cString, TreeSet\u003cString\u003e \u003e tree \u003d new HashMap\u003cString, TreeSet\u003cString\u003e\u003e();\n      for(DatanodeInfo dni : report) {\n        String location \u003d dni.getNetworkLocation();\n        String name \u003d dni.getName();\n        \n        if(!tree.containsKey(location)) {\n          tree.put(location, new TreeSet\u003cString\u003e());\n        }\n        \n        tree.get(location).add(name);\n      }\n      \n      // Sort the racks (and nodes) alphabetically, display in order\n      ArrayList\u003cString\u003e racks \u003d new ArrayList\u003cString\u003e(tree.keySet());\n      Collections.sort(racks);\n      \n      for(String r : racks) {\n        System.out.println(\"Rack: \" + r);\n        TreeSet\u003cString\u003e nodes \u003d tree.get(r);\n\n        for(String n : nodes) {\n          System.out.print(\"   \" + n);\n          String hostname \u003d NetUtils.getHostNameOfIP(n);\n          if(hostname !\u003d null)\n            System.out.print(\" (\" + hostname + \")\");\n          System.out.println();\n        }\n\n        System.out.println();\n      }\n    return 0;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java"
    }
  }
}