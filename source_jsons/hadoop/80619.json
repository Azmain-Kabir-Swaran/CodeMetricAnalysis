{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalFileSystem.java",
  "functionName": "reportChecksumFailure",
  "functionId": "reportChecksumFailure___p-Path__in-FSDataInputStream__inPos-long__sums-FSDataInputStream__sumsPos-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java",
  "functionStartLine": 96,
  "functionEndLine": 145,
  "numCommitsSeen": 15,
  "timeTaken": 1396,
  "changeHistory": [
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "30b7a9c49fe2aaffd1c2c36c473eba8e407b5973",
    "e2d901f4dabcf1fc3b400bc5d2b4f730104fd042",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "30b7a9c49fe2aaffd1c2c36c473eba8e407b5973": "Ybodychange",
    "e2d901f4dabcf1fc3b400bc5d2b4f730104fd042": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/07/13 11:10 AM",
      "commitNameOld": "e1a1c336323804e77265216da38a5e04e8214d85",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 1678.92,
      "commitsBetweenForRepo": 12110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                        long inPos,\n                                        FSDataInputStream sums, long sumsPos) {\n     try {\n       // canonicalize f\n       File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n       \n       // find highest writable parent dir of f on the same device\n       String device \u003d new DF(f, getConf()).getMount();\n       File parent \u003d f.getParentFile();\n       File dir \u003d null;\n       while (parent !\u003d null \u0026\u0026 FileUtil.canWrite(parent) \u0026\u0026\n           parent.toString().startsWith(device)) {\n         dir \u003d parent;\n         parent \u003d parent.getParentFile();\n       }\n \n       if (dir\u003d\u003dnull) {\n         throw new IOException(\n                               \"not able to find the highest writable parent dir\");\n       }\n         \n       // move the file there\n       File badDir \u003d new File(dir, \"bad_files\");\n       if (!badDir.mkdirs()) {\n         if (!badDir.isDirectory()) {\n           throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n         }\n       }\n       String suffix \u003d \".\" + rand.nextInt();\n       File badFile \u003d new File(badDir, f.getName()+suffix);\n       LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n       in.close();                               // close it first\n       boolean b \u003d f.renameTo(badFile);                      // rename it\n       if (!b) {\n         LOG.warn(\"Ignoring failure of renameTo\");\n       }\n       // move checksum file too\n       File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n       // close the stream before rename to release the file handle\n       sums.close();\n       b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n       if (!b) {\n           LOG.warn(\"Ignoring failure of renameTo\");\n         }\n     } catch (IOException e) {\n-      LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n+      LOG.warn(\"Error moving bad file \" + p, e);\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                       long inPos,\n                                       FSDataInputStream sums, long sumsPos) {\n    try {\n      // canonicalize f\n      File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n      \n      // find highest writable parent dir of f on the same device\n      String device \u003d new DF(f, getConf()).getMount();\n      File parent \u003d f.getParentFile();\n      File dir \u003d null;\n      while (parent !\u003d null \u0026\u0026 FileUtil.canWrite(parent) \u0026\u0026\n          parent.toString().startsWith(device)) {\n        dir \u003d parent;\n        parent \u003d parent.getParentFile();\n      }\n\n      if (dir\u003d\u003dnull) {\n        throw new IOException(\n                              \"not able to find the highest writable parent dir\");\n      }\n        \n      // move the file there\n      File badDir \u003d new File(dir, \"bad_files\");\n      if (!badDir.mkdirs()) {\n        if (!badDir.isDirectory()) {\n          throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n        }\n      }\n      String suffix \u003d \".\" + rand.nextInt();\n      File badFile \u003d new File(badDir, f.getName()+suffix);\n      LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n      in.close();                               // close it first\n      boolean b \u003d f.renameTo(badFile);                      // rename it\n      if (!b) {\n        LOG.warn(\"Ignoring failure of renameTo\");\n      }\n      // move checksum file too\n      File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n      // close the stream before rename to release the file handle\n      sums.close();\n      b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n      if (!b) {\n          LOG.warn(\"Ignoring failure of renameTo\");\n        }\n    } catch (IOException e) {\n      LOG.warn(\"Error moving bad file \" + p, e);\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java",
      "extendedDetails": {}
    },
    "30b7a9c49fe2aaffd1c2c36c473eba8e407b5973": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9413. Add common utils for File#setReadable/Writable/Executable \u0026 File#canRead/Write/Execute that work cross-platform. Contributed by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477376 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 3:12 PM",
      "commitName": "30b7a9c49fe2aaffd1c2c36c473eba8e407b5973",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "27/04/13 9:10 AM",
      "commitNameOld": "e2d901f4dabcf1fc3b400bc5d2b4f730104fd042",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 2.25,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                        long inPos,\n                                        FSDataInputStream sums, long sumsPos) {\n     try {\n       // canonicalize f\n       File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n       \n       // find highest writable parent dir of f on the same device\n       String device \u003d new DF(f, getConf()).getMount();\n       File parent \u003d f.getParentFile();\n       File dir \u003d null;\n-      while (parent!\u003dnull \u0026\u0026 parent.canWrite() \u0026\u0026 parent.toString().startsWith(device)) {\n+      while (parent !\u003d null \u0026\u0026 FileUtil.canWrite(parent) \u0026\u0026\n+          parent.toString().startsWith(device)) {\n         dir \u003d parent;\n         parent \u003d parent.getParentFile();\n       }\n \n       if (dir\u003d\u003dnull) {\n         throw new IOException(\n                               \"not able to find the highest writable parent dir\");\n       }\n         \n       // move the file there\n       File badDir \u003d new File(dir, \"bad_files\");\n       if (!badDir.mkdirs()) {\n         if (!badDir.isDirectory()) {\n           throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n         }\n       }\n       String suffix \u003d \".\" + rand.nextInt();\n       File badFile \u003d new File(badDir, f.getName()+suffix);\n       LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n       in.close();                               // close it first\n       boolean b \u003d f.renameTo(badFile);                      // rename it\n       if (!b) {\n         LOG.warn(\"Ignoring failure of renameTo\");\n       }\n       // move checksum file too\n       File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n       // close the stream before rename to release the file handle\n       sums.close();\n       b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n       if (!b) {\n           LOG.warn(\"Ignoring failure of renameTo\");\n         }\n     } catch (IOException e) {\n       LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                       long inPos,\n                                       FSDataInputStream sums, long sumsPos) {\n    try {\n      // canonicalize f\n      File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n      \n      // find highest writable parent dir of f on the same device\n      String device \u003d new DF(f, getConf()).getMount();\n      File parent \u003d f.getParentFile();\n      File dir \u003d null;\n      while (parent !\u003d null \u0026\u0026 FileUtil.canWrite(parent) \u0026\u0026\n          parent.toString().startsWith(device)) {\n        dir \u003d parent;\n        parent \u003d parent.getParentFile();\n      }\n\n      if (dir\u003d\u003dnull) {\n        throw new IOException(\n                              \"not able to find the highest writable parent dir\");\n      }\n        \n      // move the file there\n      File badDir \u003d new File(dir, \"bad_files\");\n      if (!badDir.mkdirs()) {\n        if (!badDir.isDirectory()) {\n          throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n        }\n      }\n      String suffix \u003d \".\" + rand.nextInt();\n      File badFile \u003d new File(badDir, f.getName()+suffix);\n      LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n      in.close();                               // close it first\n      boolean b \u003d f.renameTo(badFile);                      // rename it\n      if (!b) {\n        LOG.warn(\"Ignoring failure of renameTo\");\n      }\n      // move checksum file too\n      File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n      // close the stream before rename to release the file handle\n      sums.close();\n      b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n      if (!b) {\n          LOG.warn(\"Ignoring failure of renameTo\");\n        }\n    } catch (IOException e) {\n      LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java",
      "extendedDetails": {}
    },
    "e2d901f4dabcf1fc3b400bc5d2b4f730104fd042": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9490. LocalFileSystem#reportChecksumFailure not closing the checksum file handle before rename. Contributed by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476609 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/04/13 9:10 AM",
      "commitName": "e2d901f4dabcf1fc3b400bc5d2b4f730104fd042",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 245.63,
      "commitsBetweenForRepo": 1262,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,49 @@\n   public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                        long inPos,\n                                        FSDataInputStream sums, long sumsPos) {\n     try {\n       // canonicalize f\n       File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n       \n       // find highest writable parent dir of f on the same device\n       String device \u003d new DF(f, getConf()).getMount();\n       File parent \u003d f.getParentFile();\n       File dir \u003d null;\n       while (parent!\u003dnull \u0026\u0026 parent.canWrite() \u0026\u0026 parent.toString().startsWith(device)) {\n         dir \u003d parent;\n         parent \u003d parent.getParentFile();\n       }\n \n       if (dir\u003d\u003dnull) {\n         throw new IOException(\n                               \"not able to find the highest writable parent dir\");\n       }\n         \n       // move the file there\n       File badDir \u003d new File(dir, \"bad_files\");\n       if (!badDir.mkdirs()) {\n         if (!badDir.isDirectory()) {\n           throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n         }\n       }\n       String suffix \u003d \".\" + rand.nextInt();\n       File badFile \u003d new File(badDir, f.getName()+suffix);\n       LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n       in.close();                               // close it first\n       boolean b \u003d f.renameTo(badFile);                      // rename it\n       if (!b) {\n         LOG.warn(\"Ignoring failure of renameTo\");\n       }\n       // move checksum file too\n       File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n+      // close the stream before rename to release the file handle\n+      sums.close();\n       b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n       if (!b) {\n           LOG.warn(\"Ignoring failure of renameTo\");\n         }\n     } catch (IOException e) {\n       LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                       long inPos,\n                                       FSDataInputStream sums, long sumsPos) {\n    try {\n      // canonicalize f\n      File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n      \n      // find highest writable parent dir of f on the same device\n      String device \u003d new DF(f, getConf()).getMount();\n      File parent \u003d f.getParentFile();\n      File dir \u003d null;\n      while (parent!\u003dnull \u0026\u0026 parent.canWrite() \u0026\u0026 parent.toString().startsWith(device)) {\n        dir \u003d parent;\n        parent \u003d parent.getParentFile();\n      }\n\n      if (dir\u003d\u003dnull) {\n        throw new IOException(\n                              \"not able to find the highest writable parent dir\");\n      }\n        \n      // move the file there\n      File badDir \u003d new File(dir, \"bad_files\");\n      if (!badDir.mkdirs()) {\n        if (!badDir.isDirectory()) {\n          throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n        }\n      }\n      String suffix \u003d \".\" + rand.nextInt();\n      File badFile \u003d new File(badDir, f.getName()+suffix);\n      LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n      in.close();                               // close it first\n      boolean b \u003d f.renameTo(badFile);                      // rename it\n      if (!b) {\n        LOG.warn(\"Ignoring failure of renameTo\");\n      }\n      // move checksum file too\n      File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n      // close the stream before rename to release the file handle\n      sums.close();\n      b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n      if (!b) {\n          LOG.warn(\"Ignoring failure of renameTo\");\n        }\n    } catch (IOException e) {\n      LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                       long inPos,\n                                       FSDataInputStream sums, long sumsPos) {\n    try {\n      // canonicalize f\n      File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n      \n      // find highest writable parent dir of f on the same device\n      String device \u003d new DF(f, getConf()).getMount();\n      File parent \u003d f.getParentFile();\n      File dir \u003d null;\n      while (parent!\u003dnull \u0026\u0026 parent.canWrite() \u0026\u0026 parent.toString().startsWith(device)) {\n        dir \u003d parent;\n        parent \u003d parent.getParentFile();\n      }\n\n      if (dir\u003d\u003dnull) {\n        throw new IOException(\n                              \"not able to find the highest writable parent dir\");\n      }\n        \n      // move the file there\n      File badDir \u003d new File(dir, \"bad_files\");\n      if (!badDir.mkdirs()) {\n        if (!badDir.isDirectory()) {\n          throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n        }\n      }\n      String suffix \u003d \".\" + rand.nextInt();\n      File badFile \u003d new File(badDir, f.getName()+suffix);\n      LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n      in.close();                               // close it first\n      boolean b \u003d f.renameTo(badFile);                      // rename it\n      if (!b) {\n        LOG.warn(\"Ignoring failure of renameTo\");\n      }\n      // move checksum file too\n      File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n      b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n      if (!b) {\n          LOG.warn(\"Ignoring failure of renameTo\");\n        }\n    } catch (IOException e) {\n      LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n    }\n    return false;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                       long inPos,\n                                       FSDataInputStream sums, long sumsPos) {\n    try {\n      // canonicalize f\n      File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n      \n      // find highest writable parent dir of f on the same device\n      String device \u003d new DF(f, getConf()).getMount();\n      File parent \u003d f.getParentFile();\n      File dir \u003d null;\n      while (parent!\u003dnull \u0026\u0026 parent.canWrite() \u0026\u0026 parent.toString().startsWith(device)) {\n        dir \u003d parent;\n        parent \u003d parent.getParentFile();\n      }\n\n      if (dir\u003d\u003dnull) {\n        throw new IOException(\n                              \"not able to find the highest writable parent dir\");\n      }\n        \n      // move the file there\n      File badDir \u003d new File(dir, \"bad_files\");\n      if (!badDir.mkdirs()) {\n        if (!badDir.isDirectory()) {\n          throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n        }\n      }\n      String suffix \u003d \".\" + rand.nextInt();\n      File badFile \u003d new File(badDir, f.getName()+suffix);\n      LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n      in.close();                               // close it first\n      boolean b \u003d f.renameTo(badFile);                      // rename it\n      if (!b) {\n        LOG.warn(\"Ignoring failure of renameTo\");\n      }\n      // move checksum file too\n      File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n      b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n      if (!b) {\n          LOG.warn(\"Ignoring failure of renameTo\");\n        }\n    } catch (IOException e) {\n      LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n    }\n    return false;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/LocalFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/LocalFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                       long inPos,\n                                       FSDataInputStream sums, long sumsPos) {\n    try {\n      // canonicalize f\n      File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n      \n      // find highest writable parent dir of f on the same device\n      String device \u003d new DF(f, getConf()).getMount();\n      File parent \u003d f.getParentFile();\n      File dir \u003d null;\n      while (parent!\u003dnull \u0026\u0026 parent.canWrite() \u0026\u0026 parent.toString().startsWith(device)) {\n        dir \u003d parent;\n        parent \u003d parent.getParentFile();\n      }\n\n      if (dir\u003d\u003dnull) {\n        throw new IOException(\n                              \"not able to find the highest writable parent dir\");\n      }\n        \n      // move the file there\n      File badDir \u003d new File(dir, \"bad_files\");\n      if (!badDir.mkdirs()) {\n        if (!badDir.isDirectory()) {\n          throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n        }\n      }\n      String suffix \u003d \".\" + rand.nextInt();\n      File badFile \u003d new File(badDir, f.getName()+suffix);\n      LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n      in.close();                               // close it first\n      boolean b \u003d f.renameTo(badFile);                      // rename it\n      if (!b) {\n        LOG.warn(\"Ignoring failure of renameTo\");\n      }\n      // move checksum file too\n      File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n      b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n      if (!b) {\n          LOG.warn(\"Ignoring failure of renameTo\");\n        }\n    } catch (IOException e) {\n      LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n    }\n    return false;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/LocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/LocalFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/LocalFileSystem.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,47 @@\n+  public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n+                                       long inPos,\n+                                       FSDataInputStream sums, long sumsPos) {\n+    try {\n+      // canonicalize f\n+      File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n+      \n+      // find highest writable parent dir of f on the same device\n+      String device \u003d new DF(f, getConf()).getMount();\n+      File parent \u003d f.getParentFile();\n+      File dir \u003d null;\n+      while (parent!\u003dnull \u0026\u0026 parent.canWrite() \u0026\u0026 parent.toString().startsWith(device)) {\n+        dir \u003d parent;\n+        parent \u003d parent.getParentFile();\n+      }\n+\n+      if (dir\u003d\u003dnull) {\n+        throw new IOException(\n+                              \"not able to find the highest writable parent dir\");\n+      }\n+        \n+      // move the file there\n+      File badDir \u003d new File(dir, \"bad_files\");\n+      if (!badDir.mkdirs()) {\n+        if (!badDir.isDirectory()) {\n+          throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n+        }\n+      }\n+      String suffix \u003d \".\" + rand.nextInt();\n+      File badFile \u003d new File(badDir, f.getName()+suffix);\n+      LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n+      in.close();                               // close it first\n+      boolean b \u003d f.renameTo(badFile);                      // rename it\n+      if (!b) {\n+        LOG.warn(\"Ignoring failure of renameTo\");\n+      }\n+      // move checksum file too\n+      File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n+      b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n+      if (!b) {\n+          LOG.warn(\"Ignoring failure of renameTo\");\n+        }\n+    } catch (IOException e) {\n+      LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean reportChecksumFailure(Path p, FSDataInputStream in,\n                                       long inPos,\n                                       FSDataInputStream sums, long sumsPos) {\n    try {\n      // canonicalize f\n      File f \u003d ((RawLocalFileSystem)fs).pathToFile(p).getCanonicalFile();\n      \n      // find highest writable parent dir of f on the same device\n      String device \u003d new DF(f, getConf()).getMount();\n      File parent \u003d f.getParentFile();\n      File dir \u003d null;\n      while (parent!\u003dnull \u0026\u0026 parent.canWrite() \u0026\u0026 parent.toString().startsWith(device)) {\n        dir \u003d parent;\n        parent \u003d parent.getParentFile();\n      }\n\n      if (dir\u003d\u003dnull) {\n        throw new IOException(\n                              \"not able to find the highest writable parent dir\");\n      }\n        \n      // move the file there\n      File badDir \u003d new File(dir, \"bad_files\");\n      if (!badDir.mkdirs()) {\n        if (!badDir.isDirectory()) {\n          throw new IOException(\"Mkdirs failed to create \" + badDir.toString());\n        }\n      }\n      String suffix \u003d \".\" + rand.nextInt();\n      File badFile \u003d new File(badDir, f.getName()+suffix);\n      LOG.warn(\"Moving bad file \" + f + \" to \" + badFile);\n      in.close();                               // close it first\n      boolean b \u003d f.renameTo(badFile);                      // rename it\n      if (!b) {\n        LOG.warn(\"Ignoring failure of renameTo\");\n      }\n      // move checksum file too\n      File checkFile \u003d ((RawLocalFileSystem)fs).pathToFile(getChecksumFile(p));\n      b \u003d checkFile.renameTo(new File(badDir, checkFile.getName()+suffix));\n      if (!b) {\n          LOG.warn(\"Ignoring failure of renameTo\");\n        }\n    } catch (IOException e) {\n      LOG.warn(\"Error moving bad file \" + p + \": \" + e);\n    }\n    return false;\n  }",
      "path": "src/java/org/apache/hadoop/fs/LocalFileSystem.java"
    }
  }
}