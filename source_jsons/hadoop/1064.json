{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShortCircuitCache.java",
  "functionName": "close",
  "functionId": "close",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
  "functionStartLine": 888,
  "functionEndLine": 939,
  "numCommitsSeen": 32,
  "timeTaken": 4764,
  "changeHistory": [
    "f09710bbb8e56d066f9d7a2e70a41ed82d5aa781",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "607705c488fa5263d851cee578a2d319e6e52ecd",
    "c992bcf9c136d3df686655a80e636bb7bb0664da",
    "3c7adaaf3571c91fee80585472d2a81402a53e2b",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "95e0f616b96371824e653e761f3188c06615fe35",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036"
  ],
  "changeHistoryShort": {
    "f09710bbb8e56d066f9d7a2e70a41ed82d5aa781": "Ybodychange",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "607705c488fa5263d851cee578a2d319e6e52ecd": "Ybodychange",
    "c992bcf9c136d3df686655a80e636bb7bb0664da": "Ymultichange(Yfilerename,Ybodychange)",
    "3c7adaaf3571c91fee80585472d2a81402a53e2b": "Ybodychange",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Yfilerename",
    "95e0f616b96371824e653e761f3188c06615fe35": "Ybodychange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange)",
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f09710bbb8e56d066f9d7a2e70a41ed82d5aa781": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15161. When evictableMmapped or evictable size is zero, do not throw NoSuchElementException in ShortCircuitCache#close(). Contributed by Lisheng Sun\n",
      "commitDate": "12/02/20 6:59 AM",
      "commitName": "f09710bbb8e56d066f9d7a2e70a41ed82d5aa781",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "08/08/19 1:46 PM",
      "commitNameOld": "28a848412c8239dfc6bd3e42dbbfe711e19bc8eb",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 187.76,
      "commitsBetweenForRepo": 1012,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,52 @@\n   public void close() {\n     try {\n       lock.lock();\n       if (closed) return;\n       closed \u003d true;\n       LOG.info(this + \": closing\");\n       maxNonMmappedEvictableLifespanMs \u003d 0;\n       maxEvictableMmapedSize \u003d 0;\n       // Close and join cacheCleaner thread.\n       IOUtilsClient.cleanupWithLogger(LOG, cacheCleaner);\n       // Purge all replicas.\n-      while (true) {\n-        Object eldestKey;\n-        try {\n-          eldestKey \u003d evictable.firstKey();\n-        } catch (NoSuchElementException e) {\n-          break;\n-        }\n-        purge((ShortCircuitReplica)evictable.get(eldestKey));\n+      while (!evictable.isEmpty()) {\n+        Object eldestKey \u003d evictable.firstKey();\n+        purge((ShortCircuitReplica) evictable.get(eldestKey));\n       }\n-      while (true) {\n-        Object eldestKey;\n-        try {\n-          eldestKey \u003d evictableMmapped.firstKey();\n-        } catch (NoSuchElementException e) {\n-          break;\n-        }\n-        purge((ShortCircuitReplica)evictableMmapped.get(eldestKey));\n+      while (!evictableMmapped.isEmpty()) {\n+        Object eldestKey \u003d evictableMmapped.firstKey();\n+        purge((ShortCircuitReplica) evictableMmapped.get(eldestKey));\n       }\n     } finally {\n       lock.unlock();\n     }\n \n     releaserExecutor.shutdown();\n     cleanerExecutor.shutdown();\n     // wait for existing tasks to terminate\n     try {\n       if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n         releaserExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       releaserExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n           + \"to terminate\", e);\n     }\n \n     // wait for existing tasks to terminate\n     try {\n       if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n         cleanerExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       cleanerExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n           + \"to terminate\", e);\n     }\n     IOUtilsClient.cleanupWithLogger(LOG, shmManager);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtilsClient.cleanupWithLogger(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (!evictable.isEmpty()) {\n        Object eldestKey \u003d evictable.firstKey();\n        purge((ShortCircuitReplica) evictable.get(eldestKey));\n      }\n      while (!evictableMmapped.isEmpty()) {\n        Object eldestKey \u003d evictableMmapped.firstKey();\n        purge((ShortCircuitReplica) evictableMmapped.get(eldestKey));\n      }\n    } finally {\n      lock.unlock();\n    }\n\n    releaserExecutor.shutdown();\n    cleanerExecutor.shutdown();\n    // wait for existing tasks to terminate\n    try {\n      if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n        releaserExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      releaserExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n          + \"to terminate\", e);\n    }\n\n    // wait for existing tasks to terminate\n    try {\n      if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n        cleanerExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      cleanerExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n          + \"to terminate\", e);\n    }\n    IOUtilsClient.cleanupWithLogger(LOG, shmManager);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "18/06/18 10:17 AM",
      "commitNameOld": "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 80.19,
      "commitsBetweenForRepo": 552,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public void close() {\n     try {\n       lock.lock();\n       if (closed) return;\n       closed \u003d true;\n       LOG.info(this + \": closing\");\n       maxNonMmappedEvictableLifespanMs \u003d 0;\n       maxEvictableMmapedSize \u003d 0;\n       // Close and join cacheCleaner thread.\n-      IOUtilsClient.cleanup(LOG, cacheCleaner);\n+      IOUtilsClient.cleanupWithLogger(LOG, cacheCleaner);\n       // Purge all replicas.\n       while (true) {\n         Object eldestKey;\n         try {\n           eldestKey \u003d evictable.firstKey();\n         } catch (NoSuchElementException e) {\n           break;\n         }\n         purge((ShortCircuitReplica)evictable.get(eldestKey));\n       }\n       while (true) {\n         Object eldestKey;\n         try {\n           eldestKey \u003d evictableMmapped.firstKey();\n         } catch (NoSuchElementException e) {\n           break;\n         }\n         purge((ShortCircuitReplica)evictableMmapped.get(eldestKey));\n       }\n     } finally {\n       lock.unlock();\n     }\n \n     releaserExecutor.shutdown();\n     cleanerExecutor.shutdown();\n     // wait for existing tasks to terminate\n     try {\n       if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n         releaserExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       releaserExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n           + \"to terminate\", e);\n     }\n \n     // wait for existing tasks to terminate\n     try {\n       if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n         cleanerExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       cleanerExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n           + \"to terminate\", e);\n     }\n-    IOUtilsClient.cleanup(LOG, shmManager);\n+    IOUtilsClient.cleanupWithLogger(LOG, shmManager);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtilsClient.cleanupWithLogger(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Object eldestKey;\n        try {\n          eldestKey \u003d evictable.firstKey();\n        } catch (NoSuchElementException e) {\n          break;\n        }\n        purge((ShortCircuitReplica)evictable.get(eldestKey));\n      }\n      while (true) {\n        Object eldestKey;\n        try {\n          eldestKey \u003d evictableMmapped.firstKey();\n        } catch (NoSuchElementException e) {\n          break;\n        }\n        purge((ShortCircuitReplica)evictableMmapped.get(eldestKey));\n      }\n    } finally {\n      lock.unlock();\n    }\n\n    releaserExecutor.shutdown();\n    cleanerExecutor.shutdown();\n    // wait for existing tasks to terminate\n    try {\n      if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n        releaserExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      releaserExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n          + \"to terminate\", e);\n    }\n\n    // wait for existing tasks to terminate\n    try {\n      if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n        cleanerExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      cleanerExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n          + \"to terminate\", e);\n    }\n    IOUtilsClient.cleanupWithLogger(LOG, shmManager);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "607705c488fa5263d851cee578a2d319e6e52ecd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10690. Optimize insertion/removal of replica in ShortCircuitCache. Contributed by Fenghua Hu.\n",
      "commitDate": "03/10/16 10:53 AM",
      "commitName": "607705c488fa5263d851cee578a2d319e6e52ecd",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "03/10/15 11:38 AM",
      "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 365.97,
      "commitsBetweenForRepo": 2526,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,62 @@\n   public void close() {\n     try {\n       lock.lock();\n       if (closed) return;\n       closed \u003d true;\n       LOG.info(this + \": closing\");\n       maxNonMmappedEvictableLifespanMs \u003d 0;\n       maxEvictableMmapedSize \u003d 0;\n       // Close and join cacheCleaner thread.\n       IOUtilsClient.cleanup(LOG, cacheCleaner);\n       // Purge all replicas.\n       while (true) {\n-        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n-        if (entry \u003d\u003d null) break;\n-        purge(entry.getValue());\n+        Object eldestKey;\n+        try {\n+          eldestKey \u003d evictable.firstKey();\n+        } catch (NoSuchElementException e) {\n+          break;\n+        }\n+        purge((ShortCircuitReplica)evictable.get(eldestKey));\n       }\n       while (true) {\n-        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n-        if (entry \u003d\u003d null) break;\n-        purge(entry.getValue());\n+        Object eldestKey;\n+        try {\n+          eldestKey \u003d evictableMmapped.firstKey();\n+        } catch (NoSuchElementException e) {\n+          break;\n+        }\n+        purge((ShortCircuitReplica)evictableMmapped.get(eldestKey));\n       }\n     } finally {\n       lock.unlock();\n     }\n \n     releaserExecutor.shutdown();\n     cleanerExecutor.shutdown();\n     // wait for existing tasks to terminate\n     try {\n       if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n         releaserExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       releaserExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n           + \"to terminate\", e);\n     }\n \n     // wait for existing tasks to terminate\n     try {\n       if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n         cleanerExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       cleanerExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n           + \"to terminate\", e);\n     }\n     IOUtilsClient.cleanup(LOG, shmManager);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtilsClient.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Object eldestKey;\n        try {\n          eldestKey \u003d evictable.firstKey();\n        } catch (NoSuchElementException e) {\n          break;\n        }\n        purge((ShortCircuitReplica)evictable.get(eldestKey));\n      }\n      while (true) {\n        Object eldestKey;\n        try {\n          eldestKey \u003d evictableMmapped.firstKey();\n        } catch (NoSuchElementException e) {\n          break;\n        }\n        purge((ShortCircuitReplica)evictableMmapped.get(eldestKey));\n      }\n    } finally {\n      lock.unlock();\n    }\n\n    releaserExecutor.shutdown();\n    cleanerExecutor.shutdown();\n    // wait for existing tasks to terminate\n    try {\n      if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n        releaserExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      releaserExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n          + \"to terminate\", e);\n    }\n\n    // wait for existing tasks to terminate\n    try {\n      if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n        cleanerExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      cleanerExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n          + \"to terminate\", e);\n    }\n    IOUtilsClient.cleanup(LOG, shmManager);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "c992bcf9c136d3df686655a80e636bb7bb0664da": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/08/15 2:02 PM",
      "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/08/15 2:02 PM",
          "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "25/08/15 2:29 PM",
          "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,54 @@\n   public void close() {\n     try {\n       lock.lock();\n       if (closed) return;\n       closed \u003d true;\n       LOG.info(this + \": closing\");\n       maxNonMmappedEvictableLifespanMs \u003d 0;\n       maxEvictableMmapedSize \u003d 0;\n       // Close and join cacheCleaner thread.\n-      IOUtils.cleanup(LOG, cacheCleaner);\n+      IOUtilsClient.cleanup(LOG, cacheCleaner);\n       // Purge all replicas.\n       while (true) {\n         Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n         if (entry \u003d\u003d null) break;\n         purge(entry.getValue());\n       }\n       while (true) {\n         Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n         if (entry \u003d\u003d null) break;\n         purge(entry.getValue());\n       }\n     } finally {\n       lock.unlock();\n     }\n \n     releaserExecutor.shutdown();\n     cleanerExecutor.shutdown();\n     // wait for existing tasks to terminate\n     try {\n       if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n         releaserExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       releaserExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n           + \"to terminate\", e);\n     }\n \n     // wait for existing tasks to terminate\n     try {\n       if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n         cleanerExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       cleanerExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n           + \"to terminate\", e);\n     }\n-    IOUtils.cleanup(LOG, shmManager);\n+    IOUtilsClient.cleanup(LOG, shmManager);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtilsClient.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n    } finally {\n      lock.unlock();\n    }\n\n    releaserExecutor.shutdown();\n    cleanerExecutor.shutdown();\n    // wait for existing tasks to terminate\n    try {\n      if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n        releaserExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      releaserExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n          + \"to terminate\", e);\n    }\n\n    // wait for existing tasks to terminate\n    try {\n      if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n        cleanerExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      cleanerExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n          + \"to terminate\", e);\n    }\n    IOUtilsClient.cleanup(LOG, shmManager);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/08/15 2:02 PM",
          "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "25/08/15 2:29 PM",
          "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,54 @@\n   public void close() {\n     try {\n       lock.lock();\n       if (closed) return;\n       closed \u003d true;\n       LOG.info(this + \": closing\");\n       maxNonMmappedEvictableLifespanMs \u003d 0;\n       maxEvictableMmapedSize \u003d 0;\n       // Close and join cacheCleaner thread.\n-      IOUtils.cleanup(LOG, cacheCleaner);\n+      IOUtilsClient.cleanup(LOG, cacheCleaner);\n       // Purge all replicas.\n       while (true) {\n         Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n         if (entry \u003d\u003d null) break;\n         purge(entry.getValue());\n       }\n       while (true) {\n         Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n         if (entry \u003d\u003d null) break;\n         purge(entry.getValue());\n       }\n     } finally {\n       lock.unlock();\n     }\n \n     releaserExecutor.shutdown();\n     cleanerExecutor.shutdown();\n     // wait for existing tasks to terminate\n     try {\n       if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n         releaserExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       releaserExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n           + \"to terminate\", e);\n     }\n \n     // wait for existing tasks to terminate\n     try {\n       if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n         LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n         cleanerExecutor.shutdownNow();\n       }\n     } catch (InterruptedException e) {\n       cleanerExecutor.shutdownNow();\n       Thread.currentThread().interrupt();\n       LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n           + \"to terminate\", e);\n     }\n-    IOUtils.cleanup(LOG, shmManager);\n+    IOUtilsClient.cleanup(LOG, shmManager);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtilsClient.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n    } finally {\n      lock.unlock();\n    }\n\n    releaserExecutor.shutdown();\n    cleanerExecutor.shutdown();\n    // wait for existing tasks to terminate\n    try {\n      if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n        releaserExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      releaserExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n          + \"to terminate\", e);\n    }\n\n    // wait for existing tasks to terminate\n    try {\n      if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n        cleanerExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      cleanerExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n          + \"to terminate\", e);\n    }\n    IOUtilsClient.cleanup(LOG, shmManager);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "3c7adaaf3571c91fee80585472d2a81402a53e2b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7922. ShortCircuitCache#close is not releasing ScheduledThreadPoolExecutors (Rakesh R via Colin P. McCabe)\n",
      "commitDate": "01/04/15 4:02 PM",
      "commitName": "3c7adaaf3571c91fee80585472d2a81402a53e2b",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "01/04/15 12:54 PM",
      "commitNameOld": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,54 @@\n   public void close() {\n     try {\n       lock.lock();\n       if (closed) return;\n       closed \u003d true;\n       LOG.info(this + \": closing\");\n       maxNonMmappedEvictableLifespanMs \u003d 0;\n       maxEvictableMmapedSize \u003d 0;\n       // Close and join cacheCleaner thread.\n       IOUtils.cleanup(LOG, cacheCleaner);\n       // Purge all replicas.\n       while (true) {\n         Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n         if (entry \u003d\u003d null) break;\n         purge(entry.getValue());\n       }\n       while (true) {\n         Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n         if (entry \u003d\u003d null) break;\n         purge(entry.getValue());\n       }\n     } finally {\n       lock.unlock();\n     }\n+\n+    releaserExecutor.shutdown();\n+    cleanerExecutor.shutdown();\n+    // wait for existing tasks to terminate\n+    try {\n+      if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n+        LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n+        releaserExecutor.shutdownNow();\n+      }\n+    } catch (InterruptedException e) {\n+      releaserExecutor.shutdownNow();\n+      Thread.currentThread().interrupt();\n+      LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n+          + \"to terminate\", e);\n+    }\n+\n+    // wait for existing tasks to terminate\n+    try {\n+      if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n+        LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n+        cleanerExecutor.shutdownNow();\n+      }\n+    } catch (InterruptedException e) {\n+      cleanerExecutor.shutdownNow();\n+      Thread.currentThread().interrupt();\n+      LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n+          + \"to terminate\", e);\n+    }\n     IOUtils.cleanup(LOG, shmManager);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtils.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n    } finally {\n      lock.unlock();\n    }\n\n    releaserExecutor.shutdown();\n    cleanerExecutor.shutdown();\n    // wait for existing tasks to terminate\n    try {\n      if (!releaserExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing SlotReleaserThreadPool to shutdown!\");\n        releaserExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      releaserExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for SlotReleaserThreadPool \"\n          + \"to terminate\", e);\n    }\n\n    // wait for existing tasks to terminate\n    try {\n      if (!cleanerExecutor.awaitTermination(30, TimeUnit.SECONDS)) {\n        LOG.error(\"Forcing CleanerThreadPool to shutdown!\");\n        cleanerExecutor.shutdownNow();\n      }\n    } catch (InterruptedException e) {\n      cleanerExecutor.shutdownNow();\n      Thread.currentThread().interrupt();\n      LOG.error(\"Interrupted while waiting for CleanerThreadPool \"\n          + \"to terminate\", e);\n    }\n    IOUtils.cleanup(LOG, shmManager);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 6:00 PM",
      "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtils.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n    } finally {\n      lock.unlock();\n    }\n    IOUtils.cleanup(LOG, shmManager);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "95e0f616b96371824e653e761f3188c06615fe35": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6057. DomainSocketWatcher.watcherThread should be marked as a daemon thread (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574787 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/14 11:57 PM",
      "commitName": "95e0f616b96371824e653e761f3188c06615fe35",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/03/14 10:31 PM",
      "commitNameOld": "33500fd304ee1c9a1b5966de1eb1e78b58f0af26",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public void close() {\n     try {\n       lock.lock();\n       if (closed) return;\n       closed \u003d true;\n       LOG.info(this + \": closing\");\n       maxNonMmappedEvictableLifespanMs \u003d 0;\n       maxEvictableMmapedSize \u003d 0;\n       // Close and join cacheCleaner thread.\n       IOUtils.cleanup(LOG, cacheCleaner);\n       // Purge all replicas.\n       while (true) {\n         Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n         if (entry \u003d\u003d null) break;\n         purge(entry.getValue());\n       }\n       while (true) {\n         Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n         if (entry \u003d\u003d null) break;\n         purge(entry.getValue());\n       }\n     } finally {\n       lock.unlock();\n     }\n+    IOUtils.cleanup(LOG, shmManager);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtils.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n    } finally {\n      lock.unlock();\n    }\n    IOUtils.cleanup(LOG, shmManager);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,25 @@\n-  public void close() throws IOException {\n+  public void close() {\n     try {\n       lock.lock();\n+      if (closed) return;\n       closed \u003d true;\n+      LOG.info(this + \": closing\");\n+      maxNonMmappedEvictableLifespanMs \u003d 0;\n+      maxEvictableMmapedSize \u003d 0;\n+      // Close and join cacheCleaner thread.\n       IOUtils.cleanup(LOG, cacheCleaner);\n-\n-      // Unmap all the mmaps that nobody is using.\n-      // The ones which are in use will be unmapped just as soon as people stop\n-      // using them.\n-      evictStaleEntries(Long.MAX_VALUE);\n-\n-      executor.shutdown();\n+      // Purge all replicas.\n+      while (true) {\n+        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n+        if (entry \u003d\u003d null) break;\n+        purge(entry.getValue());\n+      }\n+      while (true) {\n+        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n+        if (entry \u003d\u003d null) break;\n+        purge(entry.getValue());\n+      }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtils.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ClientMmapManager.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
            "oldMethodName": "close",
            "newMethodName": "close"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,25 @@\n-  public void close() throws IOException {\n+  public void close() {\n     try {\n       lock.lock();\n+      if (closed) return;\n       closed \u003d true;\n+      LOG.info(this + \": closing\");\n+      maxNonMmappedEvictableLifespanMs \u003d 0;\n+      maxEvictableMmapedSize \u003d 0;\n+      // Close and join cacheCleaner thread.\n       IOUtils.cleanup(LOG, cacheCleaner);\n-\n-      // Unmap all the mmaps that nobody is using.\n-      // The ones which are in use will be unmapped just as soon as people stop\n-      // using them.\n-      evictStaleEntries(Long.MAX_VALUE);\n-\n-      executor.shutdown();\n+      // Purge all replicas.\n+      while (true) {\n+        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n+        if (entry \u003d\u003d null) break;\n+        purge(entry.getValue());\n+      }\n+      while (true) {\n+        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n+        if (entry \u003d\u003d null) break;\n+        purge(entry.getValue());\n+      }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtils.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,25 @@\n-  public void close() throws IOException {\n+  public void close() {\n     try {\n       lock.lock();\n+      if (closed) return;\n       closed \u003d true;\n+      LOG.info(this + \": closing\");\n+      maxNonMmappedEvictableLifespanMs \u003d 0;\n+      maxEvictableMmapedSize \u003d 0;\n+      // Close and join cacheCleaner thread.\n       IOUtils.cleanup(LOG, cacheCleaner);\n-\n-      // Unmap all the mmaps that nobody is using.\n-      // The ones which are in use will be unmapped just as soon as people stop\n-      // using them.\n-      evictStaleEntries(Long.MAX_VALUE);\n-\n-      executor.shutdown();\n+      // Purge all replicas.\n+      while (true) {\n+        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n+        if (entry \u003d\u003d null) break;\n+        purge(entry.getValue());\n+      }\n+      while (true) {\n+        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n+        if (entry \u003d\u003d null) break;\n+        purge(entry.getValue());\n+      }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void close() {\n    try {\n      lock.lock();\n      if (closed) return;\n      closed \u003d true;\n      LOG.info(this + \": closing\");\n      maxNonMmappedEvictableLifespanMs \u003d 0;\n      maxEvictableMmapedSize \u003d 0;\n      // Close and join cacheCleaner thread.\n      IOUtils.cleanup(LOG, cacheCleaner);\n      // Purge all replicas.\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictable.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n      while (true) {\n        Entry\u003cLong, ShortCircuitReplica\u003e entry \u003d evictableMmapped.firstEntry();\n        if (entry \u003d\u003d null) break;\n        purge(entry.getValue());\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5260. Merge zero-copy memory-mapped HDFS client reads to trunk and branch-2. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 3:51 PM",
      "commitName": "eccdb9aa8bcdee750583d16a1253f1c5faabd036",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,16 @@\n+  public void close() throws IOException {\n+    try {\n+      lock.lock();\n+      closed \u003d true;\n+      IOUtils.cleanup(LOG, cacheCleaner);\n+\n+      // Unmap all the mmaps that nobody is using.\n+      // The ones which are in use will be unmapped just as soon as people stop\n+      // using them.\n+      evictStaleEntries(Long.MAX_VALUE);\n+\n+      executor.shutdown();\n+    } finally {\n+      lock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() throws IOException {\n    try {\n      lock.lock();\n      closed \u003d true;\n      IOUtils.cleanup(LOG, cacheCleaner);\n\n      // Unmap all the mmaps that nobody is using.\n      // The ones which are in use will be unmapped just as soon as people stop\n      // using them.\n      evictStaleEntries(Long.MAX_VALUE);\n\n      executor.shutdown();\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ClientMmapManager.java"
    }
  }
}