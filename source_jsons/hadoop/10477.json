{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "loadDataStorage",
  "functionId": "loadDataStorage___datanode-DataNode__nsInfo-NamespaceInfo__dataDirs-Collection__StorageLocation____startOpt-StartupOption__executor-ExecutorService",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 398,
  "functionEndLine": 443,
  "numCommitsSeen": 126,
  "timeTaken": 3811,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "f209e93566b159c22054dcb276e45f23a2b7b7d1",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "f209e93566b159c22054dcb276e45f23a2b7b7d1": "Ybodychange",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": "Ybodychange",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt, ExecutorService executor) throws IOException {\n     final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n     final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       if (!containsStorageDir(dataDir)) {\n         try {\n           // It first ensures the datanode level format is completed.\n           final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n               \u003d Lists.newArrayList();\n           final StorageDirectory sd \u003d loadStorageDirectory(\n               datanode, nsInfo, dataDir, startOpt, callables);\n           if (callables.isEmpty()) {\n             addStorageDir(sd);\n             success.add(dataDir);\n           } else {\n             for(Callable\u003cStorageDirectory\u003e c : callables) {\n               tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n             }\n           }\n         } catch (IOException e) {\n-          LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n+          LOG.warn(\"Failed to add storage directory {}\", dataDir, e);\n         }\n       } else {\n-        LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n+        LOG.info(\"Storage directory {} has already been used.\", dataDir);\n         success.add(dataDir);\n       }\n     }\n \n     if (!tasks.isEmpty()) {\n-      LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n+      LOG.info(\"loadDataStorage: {} upgrade tasks\", tasks.size());\n       for(UpgradeTask t : tasks) {\n         try {\n           addStorageDir(t.future.get());\n           success.add(t.dataDir);\n         } catch (ExecutionException e) {\n-          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n+          LOG.warn(\"Failed to upgrade storage directory {}\", t.dataDir, e);\n         } catch (InterruptedException e) {\n           throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n         }\n       }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      if (!containsStorageDir(dataDir)) {\n        try {\n          // It first ensures the datanode level format is completed.\n          final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n              \u003d Lists.newArrayList();\n          final StorageDirectory sd \u003d loadStorageDirectory(\n              datanode, nsInfo, dataDir, startOpt, callables);\n          if (callables.isEmpty()) {\n            addStorageDir(sd);\n            success.add(dataDir);\n          } else {\n            for(Callable\u003cStorageDirectory\u003e c : callables) {\n              tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n            }\n          }\n        } catch (IOException e) {\n          LOG.warn(\"Failed to add storage directory {}\", dataDir, e);\n        }\n      } else {\n        LOG.info(\"Storage directory {} has already been used.\", dataDir);\n        success.add(dataDir);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadDataStorage: {} upgrade tasks\", tasks.size());\n      for(UpgradeTask t : tasks) {\n        try {\n          addStorageDir(t.future.get());\n          success.add(t.dataDir);\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory {}\", t.dataDir, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "f209e93566b159c22054dcb276e45f23a2b7b7d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10638. Modifications to remove the assumption that StorageLocation is associated with java.io.File in Datanode. (Virajith Jalaparti via lei)\n",
      "commitDate": "26/10/16 10:32 AM",
      "commitName": "f209e93566b159c22054dcb276e45f23a2b7b7d1",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "10/10/16 3:30 PM",
      "commitNameOld": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 15.79,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n   private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt, ExecutorService executor) throws IOException {\n     final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n     final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n-      File root \u003d dataDir.getFile();\n-      if (!containsStorageDir(root)) {\n+      if (!containsStorageDir(dataDir)) {\n         try {\n           // It first ensures the datanode level format is completed.\n           final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n               \u003d Lists.newArrayList();\n           final StorageDirectory sd \u003d loadStorageDirectory(\n-              datanode, nsInfo, root, dataDir, startOpt, callables);\n+              datanode, nsInfo, dataDir, startOpt, callables);\n           if (callables.isEmpty()) {\n             addStorageDir(sd);\n             success.add(dataDir);\n           } else {\n             for(Callable\u003cStorageDirectory\u003e c : callables) {\n               tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n             }\n           }\n         } catch (IOException e) {\n           LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n         }\n       } else {\n         LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n         success.add(dataDir);\n       }\n     }\n \n     if (!tasks.isEmpty()) {\n       LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n       for(UpgradeTask t : tasks) {\n         try {\n           addStorageDir(t.future.get());\n           success.add(t.dataDir);\n         } catch (ExecutionException e) {\n           LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n         } catch (InterruptedException e) {\n           throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n         }\n       }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      if (!containsStorageDir(dataDir)) {\n        try {\n          // It first ensures the datanode level format is completed.\n          final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n              \u003d Lists.newArrayList();\n          final StorageDirectory sd \u003d loadStorageDirectory(\n              datanode, nsInfo, dataDir, startOpt, callables);\n          if (callables.isEmpty()) {\n            addStorageDir(sd);\n            success.add(dataDir);\n          } else {\n            for(Callable\u003cStorageDirectory\u003e c : callables) {\n              tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n            }\n          }\n        } catch (IOException e) {\n          LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n        }\n      } else {\n        LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n        success.add(dataDir);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n      for(UpgradeTask t : tasks) {\n        try {\n          addStorageDir(t.future.get());\n          success.add(t.dataDir);\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "10/10/16 3:30 PM",
      "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "13/09/16 12:54 PM",
      "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 27.11,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n       StartupOption startOpt, ExecutorService executor) throws IOException {\n     final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n     final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       File root \u003d dataDir.getFile();\n       if (!containsStorageDir(root)) {\n         try {\n           // It first ensures the datanode level format is completed.\n           final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n               \u003d Lists.newArrayList();\n           final StorageDirectory sd \u003d loadStorageDirectory(\n-              datanode, nsInfo, root, startOpt, callables);\n+              datanode, nsInfo, root, dataDir, startOpt, callables);\n           if (callables.isEmpty()) {\n             addStorageDir(sd);\n             success.add(dataDir);\n           } else {\n             for(Callable\u003cStorageDirectory\u003e c : callables) {\n               tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n             }\n           }\n         } catch (IOException e) {\n           LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n         }\n       } else {\n         LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n         success.add(dataDir);\n       }\n     }\n \n     if (!tasks.isEmpty()) {\n       LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n       for(UpgradeTask t : tasks) {\n         try {\n           addStorageDir(t.future.get());\n           success.add(t.dataDir);\n         } catch (ExecutionException e) {\n           LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n         } catch (InterruptedException e) {\n           throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n         }\n       }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      File root \u003d dataDir.getFile();\n      if (!containsStorageDir(root)) {\n        try {\n          // It first ensures the datanode level format is completed.\n          final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n              \u003d Lists.newArrayList();\n          final StorageDirectory sd \u003d loadStorageDirectory(\n              datanode, nsInfo, root, dataDir, startOpt, callables);\n          if (callables.isEmpty()) {\n            addStorageDir(sd);\n            success.add(dataDir);\n          } else {\n            for(Callable\u003cStorageDirectory\u003e c : callables) {\n              tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n            }\n          }\n        } catch (IOException e) {\n          LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n        }\n      } else {\n        LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n        success.add(dataDir);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n      for(UpgradeTask t : tasks) {\n        try {\n          addStorageDir(t.future.get());\n          success.add(t.dataDir);\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
      "commitDate": "22/02/16 3:01 PM",
      "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "04/02/16 11:19 AM",
          "commitNameOld": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 18.15,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,47 @@\n   private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n-      StartupOption startOpt) throws IOException {\n+      StartupOption startOpt, ExecutorService executor) throws IOException {\n     final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n+    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       File root \u003d dataDir.getFile();\n       if (!containsStorageDir(root)) {\n         try {\n           // It first ensures the datanode level format is completed.\n+          final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n+              \u003d Lists.newArrayList();\n           final StorageDirectory sd \u003d loadStorageDirectory(\n-              datanode, nsInfo, root, startOpt);\n-          addStorageDir(sd);\n+              datanode, nsInfo, root, startOpt, callables);\n+          if (callables.isEmpty()) {\n+            addStorageDir(sd);\n+            success.add(dataDir);\n+          } else {\n+            for(Callable\u003cStorageDirectory\u003e c : callables) {\n+              tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n+            }\n+          }\n         } catch (IOException e) {\n           LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n-          continue;\n         }\n       } else {\n         LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n+        success.add(dataDir);\n       }\n-      success.add(dataDir);\n+    }\n+\n+    if (!tasks.isEmpty()) {\n+      LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n+      for(UpgradeTask t : tasks) {\n+        try {\n+          addStorageDir(t.future.get());\n+          success.add(t.dataDir);\n+        } catch (ExecutionException e) {\n+          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n+        } catch (InterruptedException e) {\n+          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n+        }\n+      }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      File root \u003d dataDir.getFile();\n      if (!containsStorageDir(root)) {\n        try {\n          // It first ensures the datanode level format is completed.\n          final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n              \u003d Lists.newArrayList();\n          final StorageDirectory sd \u003d loadStorageDirectory(\n              datanode, nsInfo, root, startOpt, callables);\n          if (callables.isEmpty()) {\n            addStorageDir(sd);\n            success.add(dataDir);\n          } else {\n            for(Callable\u003cStorageDirectory\u003e c : callables) {\n              tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n            }\n          }\n        } catch (IOException e) {\n          LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n        }\n      } else {\n        LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n        success.add(dataDir);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n      for(UpgradeTask t : tasks) {\n        try {\n          addStorageDir(t.future.get());\n          success.add(t.dataDir);\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, nsInfo-NamespaceInfo, dataDirs-Collection\u003cStorageLocation\u003e, startOpt-StartupOption]",
            "newValue": "[datanode-DataNode, nsInfo-NamespaceInfo, dataDirs-Collection\u003cStorageLocation\u003e, startOpt-StartupOption, executor-ExecutorService]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "04/02/16 11:19 AM",
          "commitNameOld": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 18.15,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,47 @@\n   private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n       NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n-      StartupOption startOpt) throws IOException {\n+      StartupOption startOpt, ExecutorService executor) throws IOException {\n     final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n+    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n     for (StorageLocation dataDir : dataDirs) {\n       File root \u003d dataDir.getFile();\n       if (!containsStorageDir(root)) {\n         try {\n           // It first ensures the datanode level format is completed.\n+          final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n+              \u003d Lists.newArrayList();\n           final StorageDirectory sd \u003d loadStorageDirectory(\n-              datanode, nsInfo, root, startOpt);\n-          addStorageDir(sd);\n+              datanode, nsInfo, root, startOpt, callables);\n+          if (callables.isEmpty()) {\n+            addStorageDir(sd);\n+            success.add(dataDir);\n+          } else {\n+            for(Callable\u003cStorageDirectory\u003e c : callables) {\n+              tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n+            }\n+          }\n         } catch (IOException e) {\n           LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n-          continue;\n         }\n       } else {\n         LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n+        success.add(dataDir);\n       }\n-      success.add(dataDir);\n+    }\n+\n+    if (!tasks.isEmpty()) {\n+      LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n+      for(UpgradeTask t : tasks) {\n+        try {\n+          addStorageDir(t.future.get());\n+          success.add(t.dataDir);\n+        } catch (ExecutionException e) {\n+          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n+        } catch (InterruptedException e) {\n+          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n+        }\n+      }\n     }\n \n     return success;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt, ExecutorService executor) throws IOException {\n    final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n    final List\u003cUpgradeTask\u003e tasks \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      File root \u003d dataDir.getFile();\n      if (!containsStorageDir(root)) {\n        try {\n          // It first ensures the datanode level format is completed.\n          final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables\n              \u003d Lists.newArrayList();\n          final StorageDirectory sd \u003d loadStorageDirectory(\n              datanode, nsInfo, root, startOpt, callables);\n          if (callables.isEmpty()) {\n            addStorageDir(sd);\n            success.add(dataDir);\n          } else {\n            for(Callable\u003cStorageDirectory\u003e c : callables) {\n              tasks.add(new UpgradeTask(dataDir, executor.submit(c)));\n            }\n          }\n        } catch (IOException e) {\n          LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n        }\n      } else {\n        LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n        success.add(dataDir);\n      }\n    }\n\n    if (!tasks.isEmpty()) {\n      LOG.info(\"loadDataStorage: \" + tasks.size() + \" upgrade tasks\");\n      for(UpgradeTask t : tasks) {\n        try {\n          addStorageDir(t.future.get());\n          success.add(t.dataDir);\n        } catch (ExecutionException e) {\n          LOG.warn(\"Failed to upgrade storage directory \" + t.dataDir, e);\n        } catch (InterruptedException e) {\n          throw DFSUtilClient.toInterruptedIOException(\"Task interrupted\", e);\n        }\n      }\n    }\n\n    return success;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,24 @@\n+  private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n+      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n+      StartupOption startOpt) throws IOException {\n+    final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n+    for (StorageLocation dataDir : dataDirs) {\n+      File root \u003d dataDir.getFile();\n+      if (!containsStorageDir(root)) {\n+        try {\n+          // It first ensures the datanode level format is completed.\n+          final StorageDirectory sd \u003d loadStorageDirectory(\n+              datanode, nsInfo, root, startOpt);\n+          addStorageDir(sd);\n+        } catch (IOException e) {\n+          LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n+          continue;\n+        }\n+      } else {\n+        LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n+      }\n+      success.add(dataDir);\n+    }\n+\n+    return success;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cStorageLocation\u003e loadDataStorage(DataNode datanode,\n      NamespaceInfo nsInfo, Collection\u003cStorageLocation\u003e dataDirs,\n      StartupOption startOpt) throws IOException {\n    final List\u003cStorageLocation\u003e success \u003d Lists.newArrayList();\n    for (StorageLocation dataDir : dataDirs) {\n      File root \u003d dataDir.getFile();\n      if (!containsStorageDir(root)) {\n        try {\n          // It first ensures the datanode level format is completed.\n          final StorageDirectory sd \u003d loadStorageDirectory(\n              datanode, nsInfo, root, startOpt);\n          addStorageDir(sd);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to add storage directory \" + dataDir, e);\n          continue;\n        }\n      } else {\n        LOG.info(\"Storage directory \" + dataDir + \" has already been used.\");\n      }\n      success.add(dataDir);\n    }\n\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
    }
  }
}