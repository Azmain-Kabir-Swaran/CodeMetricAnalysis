{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationService.java",
  "functionName": "calculateRollingMonitorInterval",
  "functionId": "calculateRollingMonitorInterval___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
  "functionStartLine": 108,
  "functionEndLine": 149,
  "numCommitsSeen": 36,
  "timeTaken": 2206,
  "changeHistory": [
    "a2a8be18cb5e912c8de0ea6beec1de4a99de656b"
  ],
  "changeHistoryShort": {
    "a2a8be18cb5e912c8de0ea6beec1de4a99de656b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a2a8be18cb5e912c8de0ea6beec1de4a99de656b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9629. Support configurable MIN_LOG_ROLLING_INTERVAL. Contributed by Adam Antal.\n",
      "commitDate": "03/07/19 4:45 AM",
      "commitName": "a2a8be18cb5e912c8de0ea6beec1de4a99de656b",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,42 @@\n+  private static long calculateRollingMonitorInterval(Configuration conf) {\n+    long interval \u003d conf.getLong(\n+        YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n+        YarnConfiguration.\n+            DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n+\n+    if (interval \u003c\u003d 0) {\n+      LOG.info(\"rollingMonitorInterval is set as \" + interval\n+          + \". The log rolling monitoring interval is disabled. \"\n+          + \"The logs will be aggregated after this application is finished.\");\n+    } else {\n+      boolean logAggregationDebugMode \u003d\n+          conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n+      long minRollingMonitorInterval \u003d conf.getLong(\n+          YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS,\n+          YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT);\n+\n+      boolean warnHardMinLimitLowerThanDefault \u003d minRollingMonitorInterval \u003c\n+          YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT \u0026\u0026\n+          !logAggregationDebugMode;\n+      if (warnHardMinLimitLowerThanDefault) {\n+        LOG.warn(\"{} has been set to {}, which is less than the default \"\n+            + \"minimum value {}. This may impact NodeManager\u0027s performance.\",\n+            YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS,\n+            minRollingMonitorInterval,\n+            YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT);\n+      }\n+      boolean lowerThanHardLimit \u003d interval \u003c minRollingMonitorInterval;\n+      if (lowerThanHardLimit) {\n+        if (logAggregationDebugMode) {\n+          LOG.info(\"Log aggregation debug mode enabled. \" +\n+              \"Skipped checking minimum limit.\");\n+        } else {\n+          LOG.warn(\"rollingMonitorInterval should be more than \" +\n+              \"or equal to {} seconds. Using {} seconds instead.\",\n+              minRollingMonitorInterval, minRollingMonitorInterval);\n+          interval \u003d minRollingMonitorInterval;\n+        }\n+      }\n+    }\n+    return interval;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static long calculateRollingMonitorInterval(Configuration conf) {\n    long interval \u003d conf.getLong(\n        YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n        YarnConfiguration.\n            DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n\n    if (interval \u003c\u003d 0) {\n      LOG.info(\"rollingMonitorInterval is set as \" + interval\n          + \". The log rolling monitoring interval is disabled. \"\n          + \"The logs will be aggregated after this application is finished.\");\n    } else {\n      boolean logAggregationDebugMode \u003d\n          conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n      long minRollingMonitorInterval \u003d conf.getLong(\n          YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS,\n          YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT);\n\n      boolean warnHardMinLimitLowerThanDefault \u003d minRollingMonitorInterval \u003c\n          YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT \u0026\u0026\n          !logAggregationDebugMode;\n      if (warnHardMinLimitLowerThanDefault) {\n        LOG.warn(\"{} has been set to {}, which is less than the default \"\n            + \"minimum value {}. This may impact NodeManager\u0027s performance.\",\n            YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS,\n            minRollingMonitorInterval,\n            YarnConfiguration.MIN_LOG_ROLLING_INTERVAL_SECONDS_DEFAULT);\n      }\n      boolean lowerThanHardLimit \u003d interval \u003c minRollingMonitorInterval;\n      if (lowerThanHardLimit) {\n        if (logAggregationDebugMode) {\n          LOG.info(\"Log aggregation debug mode enabled. \" +\n              \"Skipped checking minimum limit.\");\n        } else {\n          LOG.warn(\"rollingMonitorInterval should be more than \" +\n              \"or equal to {} seconds. Using {} seconds instead.\",\n              minRollingMonitorInterval, minRollingMonitorInterval);\n          interval \u003d minRollingMonitorInterval;\n        }\n      }\n    }\n    return interval;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
    }
  }
}