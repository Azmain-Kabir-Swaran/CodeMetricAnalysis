{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___f-Path",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 2641,
  "functionEndLine": 2645,
  "numCommitsSeen": 66,
  "timeTaken": 5820,
  "changeHistory": [
    "9fcc3a1fc8cab873034f5c308ceb2d5671a954e8",
    "9288206cb3c1a39044a8e106436987185ef43ddf",
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
    "686823529be09bea2a6cecb3503ef722017475bc",
    "52d7d5aa1a303cf70519a61487641211f4267c6f",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
    "5f6edb30c2bb648d5564c951edc25645e17e6636",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "9fcc3a1fc8cab873034f5c308ceb2d5671a954e8": "Ybodychange",
    "9288206cb3c1a39044a8e106436987185ef43ddf": "Ybodychange",
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8": "Ybodychange",
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4": "Ybodychange",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": "Ybodychange",
    "686823529be09bea2a6cecb3503ef722017475bc": "Ybodychange",
    "52d7d5aa1a303cf70519a61487641211f4267c6f": "Ybodychange",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": "Ybodychange",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": "Ybodychange",
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79": "Ymultichange(Yexceptionschange,Ybodychange)",
    "5f6edb30c2bb648d5564c951edc25645e17e6636": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fcc3a1fc8cab873034f5c308ceb2d5671a954e8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14935. Azure: POSIX permissions are taking effect in access() method even when authorization is enabled.\nContributed by Santhosh G Nayak\n",
      "commitDate": "16/10/17 8:01 AM",
      "commitName": "9fcc3a1fc8cab873034f5c308ceb2d5671a954e8",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/10/17 10:06 AM",
      "commitNameOld": "3de574413c4d5554213d02bd0ad343ba82cf82aa",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 4.91,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,5 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n-\n-    // Capture the absolute path and the path to key.\n-    Path absolutePath \u003d makeAbsolute(f);\n-\n-    if (!isRenamePendingFile(absolutePath)) {\n-      Path ancestor \u003d getAncestor(absolutePath);\n-      if (ancestor.equals(absolutePath) \u0026\u0026 !ancestor.equals(new Path(\"/\"))) {\n-        performAuthCheck(ancestor.getParent(), WasbAuthorizationOperations.READ,\n-            \"getFileStatus\", absolutePath);\n-      }\n-      else {\n-        performAuthCheck(ancestor, WasbAuthorizationOperations.READ,\n-            \"getFileStatus\", absolutePath);\n-      }\n-    }\n-\n     return getFileStatusInternal(f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n    return getFileStatusInternal(f);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "9288206cb3c1a39044a8e106436987185ef43ddf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14845. Azure wasb: getFileStatus not making any auth check.\nContributed by Sivaguru Sankaridurg\n",
      "commitDate": "05/10/17 7:05 AM",
      "commitName": "9288206cb3c1a39044a8e106436987185ef43ddf",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "28/09/17 11:52 AM",
      "commitNameOld": "a530e7ab3b3f5bd71143a91266b46787962ac532",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,21 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n-    String key \u003d pathToKey(absolutePath);\n-    if (key.length() \u003d\u003d 0) { // root always exists\n-      return newDirectory(null, absolutePath);\n-    }\n \n-    // The path is either a folder or a file. Retrieve metadata to\n-    // determine if it is a directory or file.\n-    FileMetadata meta \u003d null;\n-    try {\n-      meta \u003d store.retrieveMetadata(key);\n-    } catch(Exception ex) {\n-\n-      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n-\n-      if (innerException instanceof StorageException\n-          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n-\n-          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n-       }\n-\n-      throw ex;\n-    }\n-\n-    if (meta !\u003d null) {\n-      if (meta.isDir()) {\n-        // The path is a folder with files in it.\n-        //\n-\n-        LOG.debug(\"Path {} is a folder.\", f.toString());\n-\n-        // If a rename operation for the folder was pending, redo it.\n-        // Then the file does not exist, so signal that.\n-        if (conditionalRedoFolderRename(f)) {\n-          throw new FileNotFoundException(\n-              absolutePath + \": No such file or directory.\");\n-        }\n-\n-        // Return reference to the directory object.\n-        return newDirectory(meta, absolutePath);\n+    if (!isRenamePendingFile(absolutePath)) {\n+      Path ancestor \u003d getAncestor(absolutePath);\n+      if (ancestor.equals(absolutePath) \u0026\u0026 !ancestor.equals(new Path(\"/\"))) {\n+        performAuthCheck(ancestor.getParent(), WasbAuthorizationOperations.READ,\n+            \"getFileStatus\", absolutePath);\n       }\n-\n-      // The path is a file.\n-      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n-\n-      // Return with reference to a file object.\n-      return newFile(meta, absolutePath);\n+      else {\n+        performAuthCheck(ancestor, WasbAuthorizationOperations.READ,\n+            \"getFileStatus\", absolutePath);\n+      }\n     }\n \n-    // File not found. Throw exception no such file or directory.\n-    //\n-    throw new FileNotFoundException(\n-        absolutePath + \": No such file or directory.\");\n+    return getFileStatusInternal(f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n\n    if (!isRenamePendingFile(absolutePath)) {\n      Path ancestor \u003d getAncestor(absolutePath);\n      if (ancestor.equals(absolutePath) \u0026\u0026 !ancestor.equals(new Path(\"/\"))) {\n        performAuthCheck(ancestor.getParent(), WasbAuthorizationOperations.READ,\n            \"getFileStatus\", absolutePath);\n      }\n      else {\n        performAuthCheck(ancestor, WasbAuthorizationOperations.READ,\n            \"getFileStatus\", absolutePath);\n      }\n    }\n\n    return getFileStatusInternal(f);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14642. wasb: add support for caching Authorization and SASKeys. Contributed by Sivaguru Sankaridurg.\n",
      "commitDate": "19/07/17 12:13 AM",
      "commitName": "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "12/07/17 2:37 AM",
      "commitNameOld": "7d272ea124615c493c60ad454fbd6f144dd3cc24",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.9,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,59 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n-\n-    performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"getFileStatus\", absolutePath);\n-\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14416. Path starting with \u0027wasb:///\u0027 not resolved correctly while authorizing with WASB-Ranger. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "16/05/17 11:22 AM",
      "commitName": "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "10/05/17 3:05 PM",
      "commitNameOld": "eed731496f63537350206274af09d2118b116a17",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 5.85,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,62 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n \n-    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, \"getFileStatus\",\n-        absolutePath.toString());\n+    performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"getFileStatus\", absolutePath);\n \n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"getFileStatus\", absolutePath);\n\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14274. Azure: Simplify Ranger-WASB policy model. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "12/04/17 4:07 PM",
      "commitName": "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "04/04/17 11:10 AM",
      "commitNameOld": "56ab02eed9b61e1c80605104dfc4c87fc6abac96",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 8.21,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n \n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.EXECUTE.toString(), \"getFileStatus\");\n+    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, \"getFileStatus\",\n+        absolutePath.toString());\n \n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, \"getFileStatus\",\n        absolutePath.toString());\n\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "686823529be09bea2a6cecb3503ef722017475bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "06/03/17 5:16 PM",
      "commitName": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:10 PM",
      "commitNameOld": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.EXECUTE.toString(), \"getFileStatus\");\n+\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.EXECUTE.toString(), \"getFileStatus\");\n\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "52d7d5aa1a303cf70519a61487641211f4267c6f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\"\n\nThis reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.\n",
      "commitDate": "06/03/17 5:10 PM",
      "commitName": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:00 PM",
      "commitNameOld": "c571cda5c7d929477961dfff4176d7de4944d874",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,59 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n-\n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.EXECUTE.toString(), \"getFileStatus\");\n-\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "03/03/17 5:09 PM",
      "commitName": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/12/16 4:24 PM",
      "commitNameOld": "c6a5b689db573046819f0e9193cb042e6c7298f4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 64.03,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.EXECUTE.toString(), \"getFileStatus\");\n+\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.EXECUTE.toString(), \"getFileStatus\");\n\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12635. Adding Append API support for WASB. Contributed by Dushyanth.\n",
      "commitDate": "18/01/16 9:08 AM",
      "commitName": "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
      "commitAuthor": "cnauroth",
      "commitDateOld": "09/01/16 10:18 PM",
      "commitNameOld": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 8.45,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n-      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n-          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-12551. Introduce FileNotFoundException for WASB FileSystem API. Contributed by Dushyanth.\n",
      "commitDate": "09/01/16 10:18 PM",
      "commitName": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-12551. Introduce FileNotFoundException for WASB FileSystem API. Contributed by Dushyanth.\n",
          "commitDate": "09/01/16 10:18 PM",
          "commitName": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
          "commitAuthor": "cnauroth",
          "commitDateOld": "08/01/16 8:18 PM",
          "commitNameOld": "f0fa6d869b9abb5a900ea1c9eb4eb19ec9831dc4",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,59 @@\n-  public FileStatus getFileStatus(Path f) throws IOException {\n+  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n-    FileMetadata meta \u003d store.retrieveMetadata(key);\n+    FileMetadata meta \u003d null;\n+    try {\n+      meta \u003d store.retrieveMetadata(key);\n+    } catch(Exception ex) {\n+\n+      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+\n+          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+       }\n+\n+      throw ex;\n+    }\n+\n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[FileNotFoundException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12551. Introduce FileNotFoundException for WASB FileSystem API. Contributed by Dushyanth.\n",
          "commitDate": "09/01/16 10:18 PM",
          "commitName": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
          "commitAuthor": "cnauroth",
          "commitDateOld": "08/01/16 8:18 PM",
          "commitNameOld": "f0fa6d869b9abb5a900ea1c9eb4eb19ec9831dc4",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,59 @@\n-  public FileStatus getFileStatus(Path f) throws IOException {\n+  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n-    FileMetadata meta \u003d store.retrieveMetadata(key);\n+    FileMetadata meta \u003d null;\n+    try {\n+      meta \u003d store.retrieveMetadata(key);\n+    } catch(Exception ex) {\n+\n+      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+\n+          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+       }\n+\n+      throw ex;\n+    }\n+\n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "5f6edb30c2bb648d5564c951edc25645e17e6636": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12350. WASB Logging: Improve WASB Logging around deletes, reads and writes. Contributed by Dushyanth.\n",
      "commitDate": "05/10/15 8:11 PM",
      "commitName": "5f6edb30c2bb648d5564c951edc25645e17e6636",
      "commitAuthor": "cnauroth",
      "commitDateOld": "28/09/15 3:31 PM",
      "commitNameOld": "3abbdc929bde05f8819f5410cef1eaeb8940203f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 7.19,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,44 @@\n   public FileStatus getFileStatus(Path f) throws IOException {\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Getting the file status for \" + f.toString());\n-    }\n+    LOG.debug(\"Getting the file status for {}\", f.toString());\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d store.retrieveMetadata(key);\n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Path \" + f.toString() + \"is a folder.\");\n-        }\n+\n+        LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Found the path: \" + f.toString() + \" as a file.\");\n-      }\n+      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws IOException {\n\n    LOG.debug(\"Getting the file status for {}\", f.toString());\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d store.retrieveMetadata(key);\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "commitDateOld": "19/09/14 11:33 AM",
      "commitNameOld": "9f03a7c018bb2c497cd0ef758f1a3e08e8163d06",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 19.12,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,49 @@\n   public FileStatus getFileStatus(Path f) throws IOException {\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Getting the file status for \" + f.toString());\n     }\n \n     // Capture the absolute path and the path to key.\n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d store.retrieveMetadata(key);\n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Path \" + f.toString() + \"is a folder.\");\n         }\n \n+        // If a rename operation for the folder was pending, redo it.\n+        // Then the file does not exist, so signal that.\n+        if (conditionalRedoFolderRename(f)) {\n+          throw new FileNotFoundException(\n+              absolutePath + \": No such file or directory.\");\n+        }\n+\n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Found the path: \" + f.toString() + \" as a file.\");\n       }\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n-    // Note: Should never get to this point since the root always exists.\n-    throw new FileNotFoundException(absolutePath\n-        + \": No such file or directory.\");\n+    //\n+    throw new FileNotFoundException(\n+        absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws IOException {\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting the file status for \" + f.toString());\n    }\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d store.retrieveMetadata(key);\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Path \" + f.toString() + \"is a folder.\");\n        }\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Found the path: \" + f.toString() + \" as a file.\");\n      }\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,42 @@\n+  public FileStatus getFileStatus(Path f) throws IOException {\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Getting the file status for \" + f.toString());\n+    }\n+\n+    // Capture the absolute path and the path to key.\n+    Path absolutePath \u003d makeAbsolute(f);\n+    String key \u003d pathToKey(absolutePath);\n+    if (key.length() \u003d\u003d 0) { // root always exists\n+      return newDirectory(null, absolutePath);\n+    }\n+\n+    // The path is either a folder or a file. Retrieve metadata to\n+    // determine if it is a directory or file.\n+    FileMetadata meta \u003d store.retrieveMetadata(key);\n+    if (meta !\u003d null) {\n+      if (meta.isDir()) {\n+        // The path is a folder with files in it.\n+        //\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Path \" + f.toString() + \"is a folder.\");\n+        }\n+\n+        // Return reference to the directory object.\n+        return newDirectory(meta, absolutePath);\n+      }\n+\n+      // The path is a file.\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Found the path: \" + f.toString() + \" as a file.\");\n+      }\n+\n+      // Return with reference to a file object.\n+      return newFile(meta, absolutePath);\n+    }\n+\n+    // File not found. Throw exception no such file or directory.\n+    // Note: Should never get to this point since the root always exists.\n+    throw new FileNotFoundException(absolutePath\n+        + \": No such file or directory.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws IOException {\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting the file status for \" + f.toString());\n    }\n\n    // Capture the absolute path and the path to key.\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d store.retrieveMetadata(key);\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Path \" + f.toString() + \"is a folder.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Found the path: \" + f.toString() + \" as a file.\");\n      }\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    // Note: Should never get to this point since the root always exists.\n    throw new FileNotFoundException(absolutePath\n        + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}