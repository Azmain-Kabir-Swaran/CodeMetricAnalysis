{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RawErasureDecoder.java",
  "functionName": "decode",
  "functionId": "decode___inputs-ByteBuffer[]__erasedIndexes-int[]__outputs-ByteBuffer[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/RawErasureDecoder.java",
  "functionStartLine": 84,
  "functionEndLine": 115,
  "numCommitsSeen": 20,
  "timeTaken": 3684,
  "changeHistory": [
    "31ebccc96238136560f4210bdf6766fe18e0650c",
    "77202fa1035a54496d11d07472fbc399148ff630",
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e",
    "5eca6dece67620f990f3306b6caaf09f317b38f6",
    "4ad484883f773c702a1874fc12816ef1a4a54136",
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
    "09c3a375bafa481e88d1317388a73c46950164c9",
    "e50bcea83d5f6b02ab03b06a3fbf1ed6b8ff4871"
  ],
  "changeHistoryShort": {
    "31ebccc96238136560f4210bdf6766fe18e0650c": "Yexceptionschange",
    "77202fa1035a54496d11d07472fbc399148ff630": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e": "Ybodychange",
    "5eca6dece67620f990f3306b6caaf09f317b38f6": "Ybodychange",
    "4ad484883f773c702a1874fc12816ef1a4a54136": "Ybodychange",
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37": "Ybodychange",
    "09c3a375bafa481e88d1317388a73c46950164c9": "Ybodychange",
    "e50bcea83d5f6b02ab03b06a3fbf1ed6b8ff4871": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31ebccc96238136560f4210bdf6766fe18e0650c": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-12613. Native EC coder should implement release() as idempotent function. (Lei (Eddy) Xu)\n",
      "commitDate": "16/10/17 7:44 PM",
      "commitName": "31ebccc96238136560f4210bdf6766fe18e0650c",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "26/05/16 10:23 PM",
      "commitNameOld": "77202fa1035a54496d11d07472fbc399148ff630",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 507.89,
      "commitsBetweenForRepo": 3419,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void decode(ByteBuffer[] inputs, int[] erasedIndexes,\n-                     ByteBuffer[] outputs) {\n+                     ByteBuffer[] outputs) throws IOException {\n     ByteBufferDecodingState decodingState \u003d new ByteBufferDecodingState(this,\n         inputs, erasedIndexes, outputs);\n \n     boolean usingDirectBuffer \u003d decodingState.usingDirectBuffer;\n     int dataLen \u003d decodingState.decodeLength;\n     if (dataLen \u003d\u003d 0) {\n       return;\n     }\n \n     int[] inputPositions \u003d new int[inputs.length];\n     for (int i \u003d 0; i \u003c inputPositions.length; i++) {\n       if (inputs[i] !\u003d null) {\n         inputPositions[i] \u003d inputs[i].position();\n       }\n     }\n \n     if (usingDirectBuffer) {\n       doDecode(decodingState);\n     } else {\n       ByteArrayDecodingState badState \u003d decodingState.convertToByteArrayState();\n       doDecode(badState);\n     }\n \n     for (int i \u003d 0; i \u003c inputs.length; i++) {\n       if (inputs[i] !\u003d null) {\n         // dataLen bytes consumed\n         inputs[i].position(inputPositions[i] + dataLen);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void decode(ByteBuffer[] inputs, int[] erasedIndexes,\n                     ByteBuffer[] outputs) throws IOException {\n    ByteBufferDecodingState decodingState \u003d new ByteBufferDecodingState(this,\n        inputs, erasedIndexes, outputs);\n\n    boolean usingDirectBuffer \u003d decodingState.usingDirectBuffer;\n    int dataLen \u003d decodingState.decodeLength;\n    if (dataLen \u003d\u003d 0) {\n      return;\n    }\n\n    int[] inputPositions \u003d new int[inputs.length];\n    for (int i \u003d 0; i \u003c inputPositions.length; i++) {\n      if (inputs[i] !\u003d null) {\n        inputPositions[i] \u003d inputs[i].position();\n      }\n    }\n\n    if (usingDirectBuffer) {\n      doDecode(decodingState);\n    } else {\n      ByteArrayDecodingState badState \u003d decodingState.convertToByteArrayState();\n      doDecode(badState);\n    }\n\n    for (int i \u003d 0; i \u003c inputs.length; i++) {\n      if (inputs[i] !\u003d null) {\n        // dataLen bytes consumed\n        inputs[i].position(inputPositions[i] + dataLen);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/RawErasureDecoder.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IOException]"
      }
    },
    "77202fa1035a54496d11d07472fbc399148ff630": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
      "commitDate": "26/05/16 10:23 PM",
      "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,32 @@\n-  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n-    checkParameters(inputs, erasedIndexes, outputs);\n+  public void decode(ByteBuffer[] inputs, int[] erasedIndexes,\n+                     ByteBuffer[] outputs) {\n+    ByteBufferDecodingState decodingState \u003d new ByteBufferDecodingState(this,\n+        inputs, erasedIndexes, outputs);\n \n-    byte[] validInput \u003d CoderUtil.findFirstValidInput(inputs);\n-    int dataLen \u003d validInput.length;\n+    boolean usingDirectBuffer \u003d decodingState.usingDirectBuffer;\n+    int dataLen \u003d decodingState.decodeLength;\n     if (dataLen \u003d\u003d 0) {\n       return;\n     }\n-    checkParameterBuffers(inputs, true, dataLen, false);\n-    checkParameterBuffers(outputs, false, dataLen, true);\n \n-    int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n-    int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n+    int[] inputPositions \u003d new int[inputs.length];\n+    for (int i \u003d 0; i \u003c inputPositions.length; i++) {\n+      if (inputs[i] !\u003d null) {\n+        inputPositions[i] \u003d inputs[i].position();\n+      }\n+    }\n \n-    doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n-        outputOffsets);\n+    if (usingDirectBuffer) {\n+      doDecode(decodingState);\n+    } else {\n+      ByteArrayDecodingState badState \u003d decodingState.convertToByteArrayState();\n+      doDecode(badState);\n+    }\n+\n+    for (int i \u003d 0; i \u003c inputs.length; i++) {\n+      if (inputs[i] !\u003d null) {\n+        // dataLen bytes consumed\n+        inputs[i].position(inputPositions[i] + dataLen);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void decode(ByteBuffer[] inputs, int[] erasedIndexes,\n                     ByteBuffer[] outputs) {\n    ByteBufferDecodingState decodingState \u003d new ByteBufferDecodingState(this,\n        inputs, erasedIndexes, outputs);\n\n    boolean usingDirectBuffer \u003d decodingState.usingDirectBuffer;\n    int dataLen \u003d decodingState.decodeLength;\n    if (dataLen \u003d\u003d 0) {\n      return;\n    }\n\n    int[] inputPositions \u003d new int[inputs.length];\n    for (int i \u003d 0; i \u003c inputPositions.length; i++) {\n      if (inputs[i] !\u003d null) {\n        inputPositions[i] \u003d inputs[i].position();\n      }\n    }\n\n    if (usingDirectBuffer) {\n      doDecode(decodingState);\n    } else {\n      ByteArrayDecodingState badState \u003d decodingState.convertToByteArrayState();\n      doDecode(badState);\n    }\n\n    for (int i \u003d 0; i \u003c inputs.length; i++) {\n      if (inputs[i] !\u003d null) {\n        // dataLen bytes consumed\n        inputs[i].position(inputPositions[i] + dataLen);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/RawErasureDecoder.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/RawErasureDecoder.java",
            "oldMethodName": "decode",
            "newMethodName": "decode"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,32 @@\n-  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n-    checkParameters(inputs, erasedIndexes, outputs);\n+  public void decode(ByteBuffer[] inputs, int[] erasedIndexes,\n+                     ByteBuffer[] outputs) {\n+    ByteBufferDecodingState decodingState \u003d new ByteBufferDecodingState(this,\n+        inputs, erasedIndexes, outputs);\n \n-    byte[] validInput \u003d CoderUtil.findFirstValidInput(inputs);\n-    int dataLen \u003d validInput.length;\n+    boolean usingDirectBuffer \u003d decodingState.usingDirectBuffer;\n+    int dataLen \u003d decodingState.decodeLength;\n     if (dataLen \u003d\u003d 0) {\n       return;\n     }\n-    checkParameterBuffers(inputs, true, dataLen, false);\n-    checkParameterBuffers(outputs, false, dataLen, true);\n \n-    int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n-    int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n+    int[] inputPositions \u003d new int[inputs.length];\n+    for (int i \u003d 0; i \u003c inputPositions.length; i++) {\n+      if (inputs[i] !\u003d null) {\n+        inputPositions[i] \u003d inputs[i].position();\n+      }\n+    }\n \n-    doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n-        outputOffsets);\n+    if (usingDirectBuffer) {\n+      doDecode(decodingState);\n+    } else {\n+      ByteArrayDecodingState badState \u003d decodingState.convertToByteArrayState();\n+      doDecode(badState);\n+    }\n+\n+    for (int i \u003d 0; i \u003c inputs.length; i++) {\n+      if (inputs[i] !\u003d null) {\n+        // dataLen bytes consumed\n+        inputs[i].position(inputPositions[i] + dataLen);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void decode(ByteBuffer[] inputs, int[] erasedIndexes,\n                     ByteBuffer[] outputs) {\n    ByteBufferDecodingState decodingState \u003d new ByteBufferDecodingState(this,\n        inputs, erasedIndexes, outputs);\n\n    boolean usingDirectBuffer \u003d decodingState.usingDirectBuffer;\n    int dataLen \u003d decodingState.decodeLength;\n    if (dataLen \u003d\u003d 0) {\n      return;\n    }\n\n    int[] inputPositions \u003d new int[inputs.length];\n    for (int i \u003d 0; i \u003c inputPositions.length; i++) {\n      if (inputs[i] !\u003d null) {\n        inputPositions[i] \u003d inputs[i].position();\n      }\n    }\n\n    if (usingDirectBuffer) {\n      doDecode(decodingState);\n    } else {\n      ByteArrayDecodingState badState \u003d decodingState.convertToByteArrayState();\n      doDecode(badState);\n    }\n\n    for (int i \u003d 0; i \u003c inputs.length; i++) {\n      if (inputs[i] !\u003d null) {\n        // dataLen bytes consumed\n        inputs[i].position(inputPositions[i] + dataLen);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/RawErasureDecoder.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,32 @@\n-  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n-    checkParameters(inputs, erasedIndexes, outputs);\n+  public void decode(ByteBuffer[] inputs, int[] erasedIndexes,\n+                     ByteBuffer[] outputs) {\n+    ByteBufferDecodingState decodingState \u003d new ByteBufferDecodingState(this,\n+        inputs, erasedIndexes, outputs);\n \n-    byte[] validInput \u003d CoderUtil.findFirstValidInput(inputs);\n-    int dataLen \u003d validInput.length;\n+    boolean usingDirectBuffer \u003d decodingState.usingDirectBuffer;\n+    int dataLen \u003d decodingState.decodeLength;\n     if (dataLen \u003d\u003d 0) {\n       return;\n     }\n-    checkParameterBuffers(inputs, true, dataLen, false);\n-    checkParameterBuffers(outputs, false, dataLen, true);\n \n-    int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n-    int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n+    int[] inputPositions \u003d new int[inputs.length];\n+    for (int i \u003d 0; i \u003c inputPositions.length; i++) {\n+      if (inputs[i] !\u003d null) {\n+        inputPositions[i] \u003d inputs[i].position();\n+      }\n+    }\n \n-    doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n-        outputOffsets);\n+    if (usingDirectBuffer) {\n+      doDecode(decodingState);\n+    } else {\n+      ByteArrayDecodingState badState \u003d decodingState.convertToByteArrayState();\n+      doDecode(badState);\n+    }\n+\n+    for (int i \u003d 0; i \u003c inputs.length; i++) {\n+      if (inputs[i] !\u003d null) {\n+        // dataLen bytes consumed\n+        inputs[i].position(inputPositions[i] + dataLen);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void decode(ByteBuffer[] inputs, int[] erasedIndexes,\n                     ByteBuffer[] outputs) {\n    ByteBufferDecodingState decodingState \u003d new ByteBufferDecodingState(this,\n        inputs, erasedIndexes, outputs);\n\n    boolean usingDirectBuffer \u003d decodingState.usingDirectBuffer;\n    int dataLen \u003d decodingState.decodeLength;\n    if (dataLen \u003d\u003d 0) {\n      return;\n    }\n\n    int[] inputPositions \u003d new int[inputs.length];\n    for (int i \u003d 0; i \u003c inputPositions.length; i++) {\n      if (inputs[i] !\u003d null) {\n        inputPositions[i] \u003d inputs[i].position();\n      }\n    }\n\n    if (usingDirectBuffer) {\n      doDecode(decodingState);\n    } else {\n      ByteArrayDecodingState badState \u003d decodingState.convertToByteArrayState();\n      doDecode(badState);\n    }\n\n    for (int i \u003d 0; i \u003c inputs.length; i++) {\n      if (inputs[i] !\u003d null) {\n        // dataLen bytes consumed\n        inputs[i].position(inputPositions[i] + dataLen);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/RawErasureDecoder.java",
          "extendedDetails": {
            "oldValue": "[inputs-byte[][], erasedIndexes-int[], outputs-byte[][]]",
            "newValue": "[inputs-ByteBuffer[], erasedIndexes-int[], outputs-ByteBuffer[]]"
          }
        }
      ]
    },
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12041. Implement another Reed-Solomon coder in pure Java. Contributed by Kai Zheng.\n\nChange-Id: I35ff2e498d4f988c9a064f74374f7c7258b7a6b7\n",
      "commitDate": "03/02/16 3:05 PM",
      "commitName": "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e",
      "commitAuthor": "zhezhang",
      "commitDateOld": "05/01/16 4:32 PM",
      "commitNameOld": "c52b407cbffc8693738b31c6cc4e71751efd70e8",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 28.94,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n     checkParameters(inputs, erasedIndexes, outputs);\n \n-    byte[] validInput \u003d findFirstValidInput(inputs);\n+    byte[] validInput \u003d CoderUtil.findFirstValidInput(inputs);\n     int dataLen \u003d validInput.length;\n     if (dataLen \u003d\u003d 0) {\n       return;\n     }\n     checkParameterBuffers(inputs, true, dataLen, false);\n     checkParameterBuffers(outputs, false, dataLen, true);\n \n     int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n     int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n \n     doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n         outputOffsets);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n    checkParameters(inputs, erasedIndexes, outputs);\n\n    byte[] validInput \u003d CoderUtil.findFirstValidInput(inputs);\n    int dataLen \u003d validInput.length;\n    if (dataLen \u003d\u003d 0) {\n      return;\n    }\n    checkParameterBuffers(inputs, true, dataLen, false);\n    checkParameterBuffers(outputs, false, dataLen, true);\n\n    int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n    int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n\n    doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n        outputOffsets);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
      "extendedDetails": {}
    },
    "5eca6dece67620f990f3306b6caaf09f317b38f6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12327. Initialize output buffers with ZERO bytes in erasure coder. Contributed by Kai Zheng.\n",
      "commitDate": "29/10/15 12:04 AM",
      "commitName": "5eca6dece67620f990f3306b6caaf09f317b38f6",
      "commitAuthor": "Walter Su",
      "commitDateOld": "07/10/15 6:12 PM",
      "commitNameOld": "66e2cfa1a0285f2b4f62a4ffb4d5c1ee54f76156",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 21.24,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n     checkParameters(inputs, erasedIndexes, outputs);\n \n     byte[] validInput \u003d findFirstValidInput(inputs);\n     int dataLen \u003d validInput.length;\n     if (dataLen \u003d\u003d 0) {\n       return;\n     }\n-    ensureLength(inputs, true, dataLen);\n-    ensureLength(outputs, false, dataLen);\n+    checkParameterBuffers(inputs, true, dataLen, false);\n+    checkParameterBuffers(outputs, false, dataLen, true);\n \n     int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n     int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n \n     doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n         outputOffsets);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n    checkParameters(inputs, erasedIndexes, outputs);\n\n    byte[] validInput \u003d findFirstValidInput(inputs);\n    int dataLen \u003d validInput.length;\n    if (dataLen \u003d\u003d 0) {\n      return;\n    }\n    checkParameterBuffers(inputs, true, dataLen, false);\n    checkParameterBuffers(outputs, false, dataLen, true);\n\n    int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n    int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n\n    doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n        outputOffsets);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
      "extendedDetails": {}
    },
    "4ad484883f773c702a1874fc12816ef1a4a54136": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11847 Enhance raw coder allowing to read least required inputs in decoding. Contributed by Kai Zheng\n",
      "commitDate": "26/05/15 12:07 PM",
      "commitName": "4ad484883f773c702a1874fc12816ef1a4a54136",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "26/05/15 12:07 PM",
      "commitNameOld": "b30e96bfb4b8ce5537671c97f0c9c56cd195bfdc",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n   public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n     checkParameters(inputs, erasedIndexes, outputs);\n-    int dataLen \u003d inputs[0].length;\n+\n+    byte[] validInput \u003d findFirstValidInput(inputs);\n+    int dataLen \u003d validInput.length;\n     if (dataLen \u003d\u003d 0) {\n       return;\n     }\n-    ensureLength(inputs, dataLen);\n-    ensureLength(outputs, dataLen);\n+    ensureLength(inputs, true, dataLen);\n+    ensureLength(outputs, false, dataLen);\n \n     int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n     int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n \n     doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n         outputOffsets);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n    checkParameters(inputs, erasedIndexes, outputs);\n\n    byte[] validInput \u003d findFirstValidInput(inputs);\n    int dataLen \u003d validInput.length;\n    if (dataLen \u003d\u003d 0) {\n      return;\n    }\n    ensureLength(inputs, true, dataLen);\n    ensureLength(outputs, false, dataLen);\n\n    int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n    int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n\n    doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n        outputOffsets);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
      "extendedDetails": {}
    },
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "26/05/15 12:02 PM",
      "commitNameOld": "09c3a375bafa481e88d1317388a73c46950164c9",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,15 @@\n   public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n     checkParameters(inputs, erasedIndexes, outputs);\n+    int dataLen \u003d inputs[0].length;\n+    if (dataLen \u003d\u003d 0) {\n+      return;\n+    }\n+    ensureLength(inputs, dataLen);\n+    ensureLength(outputs, dataLen);\n \n-    doDecode(inputs, erasedIndexes, outputs);\n+    int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n+    int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n+\n+    doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n+        outputOffsets);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n    checkParameters(inputs, erasedIndexes, outputs);\n    int dataLen \u003d inputs[0].length;\n    if (dataLen \u003d\u003d 0) {\n      return;\n    }\n    ensureLength(inputs, dataLen);\n    ensureLength(outputs, dataLen);\n\n    int[] inputOffsets \u003d new int[inputs.length]; // ALL ZERO\n    int[] outputOffsets \u003d new int[outputs.length]; // ALL ZERO\n\n    doDecode(inputs, inputOffsets, dataLen, erasedIndexes, outputs,\n        outputOffsets);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
      "extendedDetails": {}
    },
    "09c3a375bafa481e88d1317388a73c46950164c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11920. Refactor some codes for erasure coders. Contributed by Kai Zheng.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "09c3a375bafa481e88d1317388a73c46950164c9",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "26/05/15 11:03 AM",
      "commitNameOld": "e50bcea83d5f6b02ab03b06a3fbf1ed6b8ff4871",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,5 @@\n   public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n-    if (erasedIndexes.length \u003d\u003d 0) {\n-      return;\n-    }\n+    checkParameters(inputs, erasedIndexes, outputs);\n \n     doDecode(inputs, erasedIndexes, outputs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n    checkParameters(inputs, erasedIndexes, outputs);\n\n    doDecode(inputs, erasedIndexes, outputs);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
      "extendedDetails": {}
    },
    "e50bcea83d5f6b02ab03b06a3fbf1ed6b8ff4871": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11514. Raw Erasure Coder API for concrete encoding and decoding (Kai Zheng via umamahesh)\n",
      "commitDate": "26/05/15 11:03 AM",
      "commitName": "e50bcea83d5f6b02ab03b06a3fbf1ed6b8ff4871",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,7 @@\n+  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n+    if (erasedIndexes.length \u003d\u003d 0) {\n+      return;\n+    }\n+\n+    doDecode(inputs, erasedIndexes, outputs);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void decode(byte[][] inputs, int[] erasedIndexes, byte[][] outputs) {\n    if (erasedIndexes.length \u003d\u003d 0) {\n      return;\n    }\n\n    doDecode(inputs, erasedIndexes, outputs);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java"
    }
  }
}