{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerExecutor.java",
  "functionName": "resolveSymLinks",
  "functionId": "resolveSymLinks___resources-Map__Path,List__String______user-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
  "functionStartLine": 894,
  "functionEndLine": 913,
  "numCommitsSeen": 62,
  "timeTaken": 1247,
  "changeHistory": [
    "d42806160eb95594f08f38bb753cf0306a191a38"
  ],
  "changeHistoryShort": {
    "d42806160eb95594f08f38bb753cf0306a191a38": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d42806160eb95594f08f38bb753cf0306a191a38": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8667. Cleanup symlinks when container restarted by NM.\n           Contributed by Chandni Singh\n",
      "commitDate": "16/08/18 3:41 PM",
      "commitName": "d42806160eb95594f08f38bb753cf0306a191a38",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,20 @@\n+  private Map\u003cPath, Path\u003e resolveSymLinks(Map\u003cPath,\n+      List\u003cString\u003e\u003e resources, String user) {\n+    Map\u003cPath, Path\u003e symLinks \u003d new HashMap\u003c\u003e();\n+    for (Map.Entry\u003cPath, List\u003cString\u003e\u003e resourceEntry :\n+        resources.entrySet()) {\n+      for (String linkName : resourceEntry.getValue()) {\n+        if (new Path(linkName).getName().equals(WILDCARD)) {\n+          // If this is a wildcarded path, link to everything in the\n+          // directory from the working directory\n+          for (File wildLink : readDirAsUser(user, resourceEntry.getKey())) {\n+            symLinks.put(new Path(wildLink.toString()),\n+                new Path(wildLink.getName()));\n+          }\n+        } else {\n+          symLinks.put(resourceEntry.getKey(), new Path(linkName));\n+        }\n+      }\n+    }\n+    return symLinks;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cPath, Path\u003e resolveSymLinks(Map\u003cPath,\n      List\u003cString\u003e\u003e resources, String user) {\n    Map\u003cPath, Path\u003e symLinks \u003d new HashMap\u003c\u003e();\n    for (Map.Entry\u003cPath, List\u003cString\u003e\u003e resourceEntry :\n        resources.entrySet()) {\n      for (String linkName : resourceEntry.getValue()) {\n        if (new Path(linkName).getName().equals(WILDCARD)) {\n          // If this is a wildcarded path, link to everything in the\n          // directory from the working directory\n          for (File wildLink : readDirAsUser(user, resourceEntry.getKey())) {\n            symLinks.put(new Path(wildLink.toString()),\n                new Path(wildLink.getName()));\n          }\n        } else {\n          symLinks.put(resourceEntry.getKey(), new Path(linkName));\n        }\n      }\n    }\n    return symLinks;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java"
    }
  }
}