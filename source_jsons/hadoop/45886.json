{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationUtils.java",
  "functionName": "getRemoteNodeFileDir",
  "functionId": "getRemoteNodeFileDir___conf-Configuration__appId-ApplicationId__appOwner-String__remoteRootLogDir-org.apache.hadoop.fs.Path__suffix-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogAggregationUtils.java",
  "functionStartLine": 263,
  "functionEndLine": 319,
  "numCommitsSeen": 11,
  "timeTaken": 2615,
  "changeHistory": [
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
    "accb811e5727f2a780a41cd5e50bab47a0cccb68",
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f"
  ],
  "changeHistoryShort": {
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671": "Ybodychange",
    "accb811e5727f2a780a41cd5e50bab47a0cccb68": "Ybodychange",
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9524.  Fixed TestAHSWebService and TestLogsCLI unit tests.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "06/05/19 4:48 PM",
      "commitName": "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/04/19 2:04 PM",
      "commitNameOld": "accb811e5727f2a780a41cd5e50bab47a0cccb68",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.11,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public static RemoteIterator\u003cFileStatus\u003e getRemoteNodeFileDir(\n       Configuration conf, ApplicationId appId, String appOwner,\n       org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n       throws IOException {\n     RemoteIterator\u003cFileStatus\u003e nodeFilesCur\u003d null;\n     RemoteIterator\u003cFileStatus\u003e nodeFilesPrev \u003d null;\n     StringBuilder diagnosticsMsg \u003d new StringBuilder();\n \n     // Get Node Files from new app log dir\n-    Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n-        remoteRootLogDir, suffix);\n     try {\n+      Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n+          remoteRootLogDir, suffix);\n       nodeFilesCur \u003d getNodeFiles(conf, remoteAppLogDir, appId, appOwner);\n     } catch (IOException ex) {\n       diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n     }\n \n     // Get Node Files from old app log dir\n     if (isOlderPathEnabled(conf)) {\n-      remoteAppLogDir \u003d getOlderRemoteAppLogDir(appId, appOwner,\n-              remoteRootLogDir, suffix);\n       try {\n+        Path remoteAppLogDir \u003d getOlderRemoteAppLogDir(conf, appId, appOwner,\n+            remoteRootLogDir, suffix);\n         nodeFilesPrev \u003d getNodeFiles(conf,\n                 remoteAppLogDir, appId, appOwner);\n       } catch (IOException ex) {\n         diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n       }\n \n       // Return older files if new app log dir does not exist\n       if (nodeFilesCur \u003d\u003d null) {\n         return nodeFilesPrev;\n       } else if (nodeFilesPrev !\u003d null) {\n         // Return both new and old node files combined\n         RemoteIterator\u003cFileStatus\u003e curDir \u003d nodeFilesCur;\n         RemoteIterator\u003cFileStatus\u003e prevDir \u003d nodeFilesPrev;\n         RemoteIterator\u003cFileStatus\u003e nodeFilesCombined \u003d new\n             RemoteIterator\u003cFileStatus\u003e() {\n             @Override\n             public boolean hasNext() throws IOException {\n               return prevDir.hasNext() || curDir.hasNext();\n             }\n \n             @Override\n             public FileStatus next() throws IOException {\n               return prevDir.hasNext() ? prevDir.next() : curDir.next();\n             }\n         };\n         return nodeFilesCombined;\n       }\n     }\n \n     // Error reading from or new app log dir does not exist\n     if (nodeFilesCur \u003d\u003d null) {\n       throw new IOException(diagnosticsMsg.toString());\n     }\n     return nodeFilesCur;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RemoteIterator\u003cFileStatus\u003e getRemoteNodeFileDir(\n      Configuration conf, ApplicationId appId, String appOwner,\n      org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n      throws IOException {\n    RemoteIterator\u003cFileStatus\u003e nodeFilesCur\u003d null;\n    RemoteIterator\u003cFileStatus\u003e nodeFilesPrev \u003d null;\n    StringBuilder diagnosticsMsg \u003d new StringBuilder();\n\n    // Get Node Files from new app log dir\n    try {\n      Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n          remoteRootLogDir, suffix);\n      nodeFilesCur \u003d getNodeFiles(conf, remoteAppLogDir, appId, appOwner);\n    } catch (IOException ex) {\n      diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n    }\n\n    // Get Node Files from old app log dir\n    if (isOlderPathEnabled(conf)) {\n      try {\n        Path remoteAppLogDir \u003d getOlderRemoteAppLogDir(conf, appId, appOwner,\n            remoteRootLogDir, suffix);\n        nodeFilesPrev \u003d getNodeFiles(conf,\n                remoteAppLogDir, appId, appOwner);\n      } catch (IOException ex) {\n        diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n      }\n\n      // Return older files if new app log dir does not exist\n      if (nodeFilesCur \u003d\u003d null) {\n        return nodeFilesPrev;\n      } else if (nodeFilesPrev !\u003d null) {\n        // Return both new and old node files combined\n        RemoteIterator\u003cFileStatus\u003e curDir \u003d nodeFilesCur;\n        RemoteIterator\u003cFileStatus\u003e prevDir \u003d nodeFilesPrev;\n        RemoteIterator\u003cFileStatus\u003e nodeFilesCombined \u003d new\n            RemoteIterator\u003cFileStatus\u003e() {\n            @Override\n            public boolean hasNext() throws IOException {\n              return prevDir.hasNext() || curDir.hasNext();\n            }\n\n            @Override\n            public FileStatus next() throws IOException {\n              return prevDir.hasNext() ? prevDir.next() : curDir.next();\n            }\n        };\n        return nodeFilesCombined;\n      }\n    }\n\n    // Error reading from or new app log dir does not exist\n    if (nodeFilesCur \u003d\u003d null) {\n      throw new IOException(diagnosticsMsg.toString());\n    }\n    return nodeFilesCur;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogAggregationUtils.java",
      "extendedDetails": {}
    },
    "accb811e5727f2a780a41cd5e50bab47a0cccb68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6929.  Improved partition algorithm for yarn remote-app-log-dir.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "30/04/19 2:04 PM",
      "commitName": "accb811e5727f2a780a41cd5e50bab47a0cccb68",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "08/09/17 3:16 PM",
      "commitNameOld": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 598.95,
      "commitsBetweenForRepo": 5067,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,57 @@\n   public static RemoteIterator\u003cFileStatus\u003e getRemoteNodeFileDir(\n       Configuration conf, ApplicationId appId, String appOwner,\n       org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n       throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e nodeFilesCur\u003d null;\n+    RemoteIterator\u003cFileStatus\u003e nodeFilesPrev \u003d null;\n+    StringBuilder diagnosticsMsg \u003d new StringBuilder();\n+\n+    // Get Node Files from new app log dir\n     Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n         remoteRootLogDir, suffix);\n-    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d null;\n-    Path qualifiedLogDir \u003d\n-        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n-    nodeFiles \u003d FileContext.getFileContext(qualifiedLogDir.toUri(),\n-        conf).listStatus(remoteAppLogDir);\n-    return nodeFiles;\n+    try {\n+      nodeFilesCur \u003d getNodeFiles(conf, remoteAppLogDir, appId, appOwner);\n+    } catch (IOException ex) {\n+      diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n+    }\n+\n+    // Get Node Files from old app log dir\n+    if (isOlderPathEnabled(conf)) {\n+      remoteAppLogDir \u003d getOlderRemoteAppLogDir(appId, appOwner,\n+              remoteRootLogDir, suffix);\n+      try {\n+        nodeFilesPrev \u003d getNodeFiles(conf,\n+                remoteAppLogDir, appId, appOwner);\n+      } catch (IOException ex) {\n+        diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n+      }\n+\n+      // Return older files if new app log dir does not exist\n+      if (nodeFilesCur \u003d\u003d null) {\n+        return nodeFilesPrev;\n+      } else if (nodeFilesPrev !\u003d null) {\n+        // Return both new and old node files combined\n+        RemoteIterator\u003cFileStatus\u003e curDir \u003d nodeFilesCur;\n+        RemoteIterator\u003cFileStatus\u003e prevDir \u003d nodeFilesPrev;\n+        RemoteIterator\u003cFileStatus\u003e nodeFilesCombined \u003d new\n+            RemoteIterator\u003cFileStatus\u003e() {\n+            @Override\n+            public boolean hasNext() throws IOException {\n+              return prevDir.hasNext() || curDir.hasNext();\n+            }\n+\n+            @Override\n+            public FileStatus next() throws IOException {\n+              return prevDir.hasNext() ? prevDir.next() : curDir.next();\n+            }\n+        };\n+        return nodeFilesCombined;\n+      }\n+    }\n+\n+    // Error reading from or new app log dir does not exist\n+    if (nodeFilesCur \u003d\u003d null) {\n+      throw new IOException(diagnosticsMsg.toString());\n+    }\n+    return nodeFilesCur;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RemoteIterator\u003cFileStatus\u003e getRemoteNodeFileDir(\n      Configuration conf, ApplicationId appId, String appOwner,\n      org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n      throws IOException {\n    RemoteIterator\u003cFileStatus\u003e nodeFilesCur\u003d null;\n    RemoteIterator\u003cFileStatus\u003e nodeFilesPrev \u003d null;\n    StringBuilder diagnosticsMsg \u003d new StringBuilder();\n\n    // Get Node Files from new app log dir\n    Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n        remoteRootLogDir, suffix);\n    try {\n      nodeFilesCur \u003d getNodeFiles(conf, remoteAppLogDir, appId, appOwner);\n    } catch (IOException ex) {\n      diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n    }\n\n    // Get Node Files from old app log dir\n    if (isOlderPathEnabled(conf)) {\n      remoteAppLogDir \u003d getOlderRemoteAppLogDir(appId, appOwner,\n              remoteRootLogDir, suffix);\n      try {\n        nodeFilesPrev \u003d getNodeFiles(conf,\n                remoteAppLogDir, appId, appOwner);\n      } catch (IOException ex) {\n        diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n      }\n\n      // Return older files if new app log dir does not exist\n      if (nodeFilesCur \u003d\u003d null) {\n        return nodeFilesPrev;\n      } else if (nodeFilesPrev !\u003d null) {\n        // Return both new and old node files combined\n        RemoteIterator\u003cFileStatus\u003e curDir \u003d nodeFilesCur;\n        RemoteIterator\u003cFileStatus\u003e prevDir \u003d nodeFilesPrev;\n        RemoteIterator\u003cFileStatus\u003e nodeFilesCombined \u003d new\n            RemoteIterator\u003cFileStatus\u003e() {\n            @Override\n            public boolean hasNext() throws IOException {\n              return prevDir.hasNext() || curDir.hasNext();\n            }\n\n            @Override\n            public FileStatus next() throws IOException {\n              return prevDir.hasNext() ? prevDir.next() : curDir.next();\n            }\n        };\n        return nodeFilesCombined;\n      }\n    }\n\n    // Error reading from or new app log dir does not exist\n    if (nodeFilesCur \u003d\u003d null) {\n      throw new IOException(diagnosticsMsg.toString());\n    }\n    return nodeFilesCur;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogAggregationUtils.java",
      "extendedDetails": {}
    },
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "24/08/17 1:36 PM",
      "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,13 @@\n+  public static RemoteIterator\u003cFileStatus\u003e getRemoteNodeFileDir(\n+      Configuration conf, ApplicationId appId, String appOwner,\n+      org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n+      throws IOException {\n+    Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n+        remoteRootLogDir, suffix);\n+    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d null;\n+    Path qualifiedLogDir \u003d\n+        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n+    nodeFiles \u003d FileContext.getFileContext(qualifiedLogDir.toUri(),\n+        conf).listStatus(remoteAppLogDir);\n+    return nodeFiles;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static RemoteIterator\u003cFileStatus\u003e getRemoteNodeFileDir(\n      Configuration conf, ApplicationId appId, String appOwner,\n      org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n      throws IOException {\n    Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n        remoteRootLogDir, suffix);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d null;\n    Path qualifiedLogDir \u003d\n        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n    nodeFiles \u003d FileContext.getFileContext(qualifiedLogDir.toUri(),\n        conf).listStatus(remoteAppLogDir);\n    return nodeFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogAggregationUtils.java"
    }
  }
}