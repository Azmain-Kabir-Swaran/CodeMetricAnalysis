{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationFileLoaderService.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
  "functionStartLine": 112,
  "functionEndLine": 159,
  "numCommitsSeen": 41,
  "timeTaken": 3283,
  "changeHistory": [
    "9a9e969570f23b627f9571819f388916d8fd7ec9",
    "676dcffff575fdf1c4b49aeae4e000bd60ca0a83",
    "86bc6425d425913899f1d951498bd040e453b3d0",
    "7a550448036c9d140d2c35c684cc8023ceb8880e",
    "969bef3c77c531237e5e0b1708c3e9265b43e153"
  ],
  "changeHistoryShort": {
    "9a9e969570f23b627f9571819f388916d8fd7ec9": "Ybodychange",
    "676dcffff575fdf1c4b49aeae4e000bd60ca0a83": "Ybodychange",
    "86bc6425d425913899f1d951498bd040e453b3d0": "Ybodychange",
    "7a550448036c9d140d2c35c684cc8023ceb8880e": "Ybodychange",
    "969bef3c77c531237e5e0b1708c3e9265b43e153": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a9e969570f23b627f9571819f388916d8fd7ec9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8391. Investigate AllocationFileLoaderService.reloadListener locking issue. Contributed by Szilard Nemeth.\n",
      "commitDate": "20/06/18 10:59 AM",
      "commitName": "9a9e969570f23b627f9571819f388916d8fd7ec9",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "11/06/18 11:19 AM",
      "commitNameOld": "180b3c960bb693a68431c677d8c8b18821fb4361",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.allocFile \u003d getAllocationFile(conf);\n     if (this.allocFile !\u003d null) {\n       this.fs \u003d allocFile.getFileSystem(conf);\n       reloadThread \u003d new Thread(() -\u003e {\n         while (running) {\n           try {\n-            reloadListener.onCheck();\n+            synchronized (this) {\n+              reloadListener.onCheck();\n+            }\n             long time \u003d clock.getTime();\n             long lastModified \u003d\n                 fs.getFileStatus(allocFile).getModificationTime();\n             if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                 time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n               try {\n                 reloadAllocations();\n               } catch (Exception ex) {\n                 if (!lastReloadAttemptFailed) {\n                   LOG.error(\"Failed to reload fair scheduler config file - \" +\n                       \"will use existing allocations.\", ex);\n                 }\n                 lastReloadAttemptFailed \u003d true;\n               }\n             } else if (lastModified \u003d\u003d 0l) {\n               if (!lastReloadAttemptFailed) {\n                 LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                     \" last modified returned 0. File exists: \"\n                     + fs.exists(allocFile));\n               }\n               lastReloadAttemptFailed \u003d true;\n             }\n           } catch (IOException e) {\n             LOG.error(\"Exception while loading allocation file: \" + e);\n           }\n           try {\n             Thread.sleep(reloadIntervalMs);\n           } catch (InterruptedException ex) {\n             LOG.info(\n                 \"Interrupted while waiting to reload alloc configuration\");\n           }\n         }\n       });\n       reloadThread.setName(\"AllocationFileReloader\");\n       reloadThread.setDaemon(true);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.allocFile \u003d getAllocationFile(conf);\n    if (this.allocFile !\u003d null) {\n      this.fs \u003d allocFile.getFileSystem(conf);\n      reloadThread \u003d new Thread(() -\u003e {\n        while (running) {\n          try {\n            synchronized (this) {\n              reloadListener.onCheck();\n            }\n            long time \u003d clock.getTime();\n            long lastModified \u003d\n                fs.getFileStatus(allocFile).getModificationTime();\n            if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n              try {\n                reloadAllocations();\n              } catch (Exception ex) {\n                if (!lastReloadAttemptFailed) {\n                  LOG.error(\"Failed to reload fair scheduler config file - \" +\n                      \"will use existing allocations.\", ex);\n                }\n                lastReloadAttemptFailed \u003d true;\n              }\n            } else if (lastModified \u003d\u003d 0l) {\n              if (!lastReloadAttemptFailed) {\n                LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                    \" last modified returned 0. File exists: \"\n                    + fs.exists(allocFile));\n              }\n              lastReloadAttemptFailed \u003d true;\n            }\n          } catch (IOException e) {\n            LOG.error(\"Exception while loading allocation file: \" + e);\n          }\n          try {\n            Thread.sleep(reloadIntervalMs);\n          } catch (InterruptedException ex) {\n            LOG.info(\n                \"Interrupted while waiting to reload alloc configuration\");\n          }\n        }\n      });\n      reloadThread.setName(\"AllocationFileReloader\");\n      reloadThread.setDaemon(true);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
      "extendedDetails": {}
    },
    "676dcffff575fdf1c4b49aeae4e000bd60ca0a83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8322. Change log level when there is an IOException when the allocation file is loaded. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "11/06/18 11:16 AM",
      "commitName": "676dcffff575fdf1c4b49aeae4e000bd60ca0a83",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "04/06/18 9:15 AM",
      "commitNameOld": "ba12f87dcb0e406da57cdd1ad17677ac2367f425",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 7.08,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.allocFile \u003d getAllocationFile(conf);\n-    if(this.allocFile !\u003d null) {\n+    if (this.allocFile !\u003d null) {\n       this.fs \u003d allocFile.getFileSystem(conf);\n       reloadThread \u003d new Thread(() -\u003e {\n         while (running) {\n           try {\n             reloadListener.onCheck();\n             long time \u003d clock.getTime();\n             long lastModified \u003d\n                 fs.getFileStatus(allocFile).getModificationTime();\n             if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                 time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n               try {\n                 reloadAllocations();\n               } catch (Exception ex) {\n                 if (!lastReloadAttemptFailed) {\n                   LOG.error(\"Failed to reload fair scheduler config file - \" +\n                       \"will use existing allocations.\", ex);\n                 }\n                 lastReloadAttemptFailed \u003d true;\n               }\n             } else if (lastModified \u003d\u003d 0l) {\n               if (!lastReloadAttemptFailed) {\n                 LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                     \" last modified returned 0. File exists: \"\n                     + fs.exists(allocFile));\n               }\n               lastReloadAttemptFailed \u003d true;\n             }\n           } catch (IOException e) {\n-            LOG.info(\"Exception while loading allocation file: \" + e);\n+            LOG.error(\"Exception while loading allocation file: \" + e);\n           }\n           try {\n             Thread.sleep(reloadIntervalMs);\n           } catch (InterruptedException ex) {\n             LOG.info(\n                 \"Interrupted while waiting to reload alloc configuration\");\n           }\n         }\n       });\n       reloadThread.setName(\"AllocationFileReloader\");\n       reloadThread.setDaemon(true);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.allocFile \u003d getAllocationFile(conf);\n    if (this.allocFile !\u003d null) {\n      this.fs \u003d allocFile.getFileSystem(conf);\n      reloadThread \u003d new Thread(() -\u003e {\n        while (running) {\n          try {\n            reloadListener.onCheck();\n            long time \u003d clock.getTime();\n            long lastModified \u003d\n                fs.getFileStatus(allocFile).getModificationTime();\n            if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n              try {\n                reloadAllocations();\n              } catch (Exception ex) {\n                if (!lastReloadAttemptFailed) {\n                  LOG.error(\"Failed to reload fair scheduler config file - \" +\n                      \"will use existing allocations.\", ex);\n                }\n                lastReloadAttemptFailed \u003d true;\n              }\n            } else if (lastModified \u003d\u003d 0l) {\n              if (!lastReloadAttemptFailed) {\n                LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                    \" last modified returned 0. File exists: \"\n                    + fs.exists(allocFile));\n              }\n              lastReloadAttemptFailed \u003d true;\n            }\n          } catch (IOException e) {\n            LOG.error(\"Exception while loading allocation file: \" + e);\n          }\n          try {\n            Thread.sleep(reloadIntervalMs);\n          } catch (InterruptedException ex) {\n            LOG.info(\n                \"Interrupted while waiting to reload alloc configuration\");\n          }\n        }\n      });\n      reloadThread.setName(\"AllocationFileReloader\");\n      reloadThread.setDaemon(true);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
      "extendedDetails": {}
    },
    "86bc6425d425913899f1d951498bd040e453b3d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8191. Fair scheduler: queue deletion without RM restart. (Gergo Repas via Haibo Chen)\n",
      "commitDate": "24/05/18 5:12 PM",
      "commitName": "86bc6425d425913899f1d951498bd040e453b3d0",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "06/02/18 2:36 PM",
      "commitNameOld": "814d701d46b4ff87f6ec94ba39667c80475c38d7",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 107.07,
      "commitsBetweenForRepo": 1379,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.allocFile \u003d getAllocationFile(conf);\n     if(this.allocFile !\u003d null) {\n       this.fs \u003d allocFile.getFileSystem(conf);\n       reloadThread \u003d new Thread(() -\u003e {\n         while (running) {\n           try {\n+            reloadListener.onCheck();\n             long time \u003d clock.getTime();\n             long lastModified \u003d\n                 fs.getFileStatus(allocFile).getModificationTime();\n             if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                 time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n               try {\n                 reloadAllocations();\n               } catch (Exception ex) {\n                 if (!lastReloadAttemptFailed) {\n                   LOG.error(\"Failed to reload fair scheduler config file - \" +\n                       \"will use existing allocations.\", ex);\n                 }\n                 lastReloadAttemptFailed \u003d true;\n               }\n             } else if (lastModified \u003d\u003d 0l) {\n               if (!lastReloadAttemptFailed) {\n                 LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                     \" last modified returned 0. File exists: \"\n                     + fs.exists(allocFile));\n               }\n               lastReloadAttemptFailed \u003d true;\n             }\n           } catch (IOException e) {\n             LOG.info(\"Exception while loading allocation file: \" + e);\n           }\n           try {\n             Thread.sleep(reloadIntervalMs);\n           } catch (InterruptedException ex) {\n             LOG.info(\n                 \"Interrupted while waiting to reload alloc configuration\");\n           }\n         }\n       });\n       reloadThread.setName(\"AllocationFileReloader\");\n       reloadThread.setDaemon(true);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.allocFile \u003d getAllocationFile(conf);\n    if(this.allocFile !\u003d null) {\n      this.fs \u003d allocFile.getFileSystem(conf);\n      reloadThread \u003d new Thread(() -\u003e {\n        while (running) {\n          try {\n            reloadListener.onCheck();\n            long time \u003d clock.getTime();\n            long lastModified \u003d\n                fs.getFileStatus(allocFile).getModificationTime();\n            if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n              try {\n                reloadAllocations();\n              } catch (Exception ex) {\n                if (!lastReloadAttemptFailed) {\n                  LOG.error(\"Failed to reload fair scheduler config file - \" +\n                      \"will use existing allocations.\", ex);\n                }\n                lastReloadAttemptFailed \u003d true;\n              }\n            } else if (lastModified \u003d\u003d 0l) {\n              if (!lastReloadAttemptFailed) {\n                LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                    \" last modified returned 0. File exists: \"\n                    + fs.exists(allocFile));\n              }\n              lastReloadAttemptFailed \u003d true;\n            }\n          } catch (IOException e) {\n            LOG.info(\"Exception while loading allocation file: \" + e);\n          }\n          try {\n            Thread.sleep(reloadIntervalMs);\n          } catch (InterruptedException ex) {\n            LOG.info(\n                \"Interrupted while waiting to reload alloc configuration\");\n          }\n        }\n      });\n      reloadThread.setName(\"AllocationFileReloader\");\n      reloadThread.setDaemon(true);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
      "extendedDetails": {}
    },
    "7a550448036c9d140d2c35c684cc8023ceb8880e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7622. Allow fair-scheduler configuration on HDFS (gphillips via rkanter)\n",
      "commitDate": "03/01/18 3:31 PM",
      "commitName": "7a550448036c9d140d2c35c684cc8023ceb8880e",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "05/10/17 11:51 PM",
      "commitNameOld": "99292adcefdc6b8f280b8e100605fb39f755c38a",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 89.69,
      "commitsBetweenForRepo": 643,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,45 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.allocFile \u003d getAllocationFile(conf);\n-    if (allocFile !\u003d null) {\n-      reloadThread \u003d new Thread() {\n-        @Override\n-        public void run() {\n-          while (running) {\n+    if(this.allocFile !\u003d null) {\n+      this.fs \u003d allocFile.getFileSystem(conf);\n+      reloadThread \u003d new Thread(() -\u003e {\n+        while (running) {\n+          try {\n             long time \u003d clock.getTime();\n-            long lastModified \u003d allocFile.lastModified();\n+            long lastModified \u003d\n+                fs.getFileStatus(allocFile).getModificationTime();\n             if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                 time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n               try {\n                 reloadAllocations();\n               } catch (Exception ex) {\n                 if (!lastReloadAttemptFailed) {\n                   LOG.error(\"Failed to reload fair scheduler config file - \" +\n                       \"will use existing allocations.\", ex);\n                 }\n                 lastReloadAttemptFailed \u003d true;\n               }\n             } else if (lastModified \u003d\u003d 0l) {\n               if (!lastReloadAttemptFailed) {\n                 LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                     \" last modified returned 0. File exists: \"\n-                    + allocFile.exists());\n+                    + fs.exists(allocFile));\n               }\n               lastReloadAttemptFailed \u003d true;\n             }\n-            try {\n-              Thread.sleep(reloadIntervalMs);\n-            } catch (InterruptedException ex) {\n-              LOG.info(\n-                  \"Interrupted while waiting to reload alloc configuration\");\n-            }\n+          } catch (IOException e) {\n+            LOG.info(\"Exception while loading allocation file: \" + e);\n+          }\n+          try {\n+            Thread.sleep(reloadIntervalMs);\n+          } catch (InterruptedException ex) {\n+            LOG.info(\n+                \"Interrupted while waiting to reload alloc configuration\");\n           }\n         }\n-      };\n+      });\n       reloadThread.setName(\"AllocationFileReloader\");\n       reloadThread.setDaemon(true);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.allocFile \u003d getAllocationFile(conf);\n    if(this.allocFile !\u003d null) {\n      this.fs \u003d allocFile.getFileSystem(conf);\n      reloadThread \u003d new Thread(() -\u003e {\n        while (running) {\n          try {\n            long time \u003d clock.getTime();\n            long lastModified \u003d\n                fs.getFileStatus(allocFile).getModificationTime();\n            if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n              try {\n                reloadAllocations();\n              } catch (Exception ex) {\n                if (!lastReloadAttemptFailed) {\n                  LOG.error(\"Failed to reload fair scheduler config file - \" +\n                      \"will use existing allocations.\", ex);\n                }\n                lastReloadAttemptFailed \u003d true;\n              }\n            } else if (lastModified \u003d\u003d 0l) {\n              if (!lastReloadAttemptFailed) {\n                LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                    \" last modified returned 0. File exists: \"\n                    + fs.exists(allocFile));\n              }\n              lastReloadAttemptFailed \u003d true;\n            }\n          } catch (IOException e) {\n            LOG.info(\"Exception while loading allocation file: \" + e);\n          }\n          try {\n            Thread.sleep(reloadIntervalMs);\n          } catch (InterruptedException ex) {\n            LOG.info(\n                \"Interrupted while waiting to reload alloc configuration\");\n          }\n        }\n      });\n      reloadThread.setName(\"AllocationFileReloader\");\n      reloadThread.setDaemon(true);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
      "extendedDetails": {}
    },
    "969bef3c77c531237e5e0b1708c3e9265b43e153": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2122. In AllocationFileLoaderService, the reloadThread should be created in init() and started in start(). (Robert Kanter via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 5:49 PM",
      "commitName": "969bef3c77c531237e5e0b1708c3e9265b43e153",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,42 @@\n+  public void serviceInit(Configuration conf) throws Exception {\n+    this.allocFile \u003d getAllocationFile(conf);\n+    if (allocFile !\u003d null) {\n+      reloadThread \u003d new Thread() {\n+        @Override\n+        public void run() {\n+          while (running) {\n+            long time \u003d clock.getTime();\n+            long lastModified \u003d allocFile.lastModified();\n+            if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n+                time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n+              try {\n+                reloadAllocations();\n+              } catch (Exception ex) {\n+                if (!lastReloadAttemptFailed) {\n+                  LOG.error(\"Failed to reload fair scheduler config file - \" +\n+                      \"will use existing allocations.\", ex);\n+                }\n+                lastReloadAttemptFailed \u003d true;\n+              }\n+            } else if (lastModified \u003d\u003d 0l) {\n+              if (!lastReloadAttemptFailed) {\n+                LOG.warn(\"Failed to reload fair scheduler config file because\" +\n+                    \" last modified returned 0. File exists: \"\n+                    + allocFile.exists());\n+              }\n+              lastReloadAttemptFailed \u003d true;\n+            }\n+            try {\n+              Thread.sleep(reloadIntervalMs);\n+            } catch (InterruptedException ex) {\n+              LOG.info(\n+                  \"Interrupted while waiting to reload alloc configuration\");\n+            }\n+          }\n+        }\n+      };\n+      reloadThread.setName(\"AllocationFileReloader\");\n+      reloadThread.setDaemon(true);\n+    }\n+    super.serviceInit(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.allocFile \u003d getAllocationFile(conf);\n    if (allocFile !\u003d null) {\n      reloadThread \u003d new Thread() {\n        @Override\n        public void run() {\n          while (running) {\n            long time \u003d clock.getTime();\n            long lastModified \u003d allocFile.lastModified();\n            if (lastModified \u003e lastSuccessfulReload \u0026\u0026\n                time \u003e lastModified + ALLOC_RELOAD_WAIT_MS) {\n              try {\n                reloadAllocations();\n              } catch (Exception ex) {\n                if (!lastReloadAttemptFailed) {\n                  LOG.error(\"Failed to reload fair scheduler config file - \" +\n                      \"will use existing allocations.\", ex);\n                }\n                lastReloadAttemptFailed \u003d true;\n              }\n            } else if (lastModified \u003d\u003d 0l) {\n              if (!lastReloadAttemptFailed) {\n                LOG.warn(\"Failed to reload fair scheduler config file because\" +\n                    \" last modified returned 0. File exists: \"\n                    + allocFile.exists());\n              }\n              lastReloadAttemptFailed \u003d true;\n            }\n            try {\n              Thread.sleep(reloadIntervalMs);\n            } catch (InterruptedException ex) {\n              LOG.info(\n                  \"Interrupted while waiting to reload alloc configuration\");\n            }\n          }\n        }\n      };\n      reloadThread.setName(\"AllocationFileReloader\");\n      reloadThread.setDaemon(true);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java"
    }
  }
}