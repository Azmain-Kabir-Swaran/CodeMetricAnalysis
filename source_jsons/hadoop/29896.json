{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "cleanAppLogDir",
  "functionId": "cleanAppLogDir___dirpath-Path__retainMillis-long__appLogDirPresent-MutableBoolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 485,
  "functionEndLine": 508,
  "numCommitsSeen": 28,
  "timeTaken": 5781,
  "changeHistory": [
    "7b03072fd466de5817fdcd65f9dd88fd59c0bb00",
    "06413da72efed9a50e49efaf7110c220c88a7f4a",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "7b03072fd466de5817fdcd65f9dd88fd59c0bb00": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "06413da72efed9a50e49efaf7110c220c88a7f4a": "Ybodychange",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ymultichange(Ymodifierchange,Ybodychange)",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b03072fd466de5817fdcd65f9dd88fd59c0bb00": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-9080.  Added clean up of bucket directories.\n            Contributed by Prabhu Joseph, Peter Bacsko, Szilard Nemeth\n",
      "commitDate": "23/05/19 9:08 AM",
      "commitName": "7b03072fd466de5817fdcd65f9dd88fd59c0bb00",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-9080.  Added clean up of bucket directories.\n            Contributed by Prabhu Joseph, Peter Bacsko, Szilard Nemeth\n",
          "commitDate": "23/05/19 9:08 AM",
          "commitName": "7b03072fd466de5817fdcd65f9dd88fd59c0bb00",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "04/08/17 4:03 PM",
          "commitNameOld": "f44b349b813508f0f6d99ca10bddba683dedf6c4",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 656.71,
          "commitsBetweenForRepo": 5462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,24 @@\n-  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n-      throws IOException {\n+  private void cleanAppLogDir(Path dirpath, long retainMillis,\n+      MutableBoolean appLogDirPresent) throws IOException {\n     long now \u003d Time.now();\n     // Depth first search from root directory for all application log dirs\n     RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n+      Path childPath \u003d stat.getPath();\n       if (stat.isDirectory()) {\n         // If current is an application log dir, decide if we need to remove it\n         // and remove if necessary.\n         // Otherwise, keep iterating into it.\n-        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n+        ApplicationId appId \u003d parseApplicationId(childPath.getName());\n         if (appId !\u003d null) { // Application log dir\n-          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n-            try {\n-              LOG.info(\"Deleting {}\", dirpath);\n-              if (!fs.delete(dirpath, true)) {\n-                LOG.error(\"Unable to remove \" + dirpath);\n-              }\n-              metrics.incrLogsDirsCleaned();\n-            } catch (IOException e) {\n-              LOG.error(\"Unable to remove \" + dirpath, e);\n-            }\n+          appLogDirPresent.setTrue();\n+          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\n+            deleteDir(childPath);\n           }\n         } else { // Keep cleaning inside\n-          cleanLogs(stat.getPath(), fs, retainMillis);\n+          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanAppLogDir(Path dirpath, long retainMillis,\n      MutableBoolean appLogDirPresent) throws IOException {\n    long now \u003d Time.now();\n    // Depth first search from root directory for all application log dirs\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      Path childPath \u003d stat.getPath();\n      if (stat.isDirectory()) {\n        // If current is an application log dir, decide if we need to remove it\n        // and remove if necessary.\n        // Otherwise, keep iterating into it.\n        ApplicationId appId \u003d parseApplicationId(childPath.getName());\n        if (appId !\u003d null) { // Application log dir\n          appLogDirPresent.setTrue();\n          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\n            deleteDir(childPath);\n          }\n        } else { // Keep cleaning inside\n          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {
            "oldValue": "cleanLogs",
            "newValue": "cleanAppLogDir"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9080.  Added clean up of bucket directories.\n            Contributed by Prabhu Joseph, Peter Bacsko, Szilard Nemeth\n",
          "commitDate": "23/05/19 9:08 AM",
          "commitName": "7b03072fd466de5817fdcd65f9dd88fd59c0bb00",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "04/08/17 4:03 PM",
          "commitNameOld": "f44b349b813508f0f6d99ca10bddba683dedf6c4",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 656.71,
          "commitsBetweenForRepo": 5462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,24 @@\n-  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n-      throws IOException {\n+  private void cleanAppLogDir(Path dirpath, long retainMillis,\n+      MutableBoolean appLogDirPresent) throws IOException {\n     long now \u003d Time.now();\n     // Depth first search from root directory for all application log dirs\n     RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n+      Path childPath \u003d stat.getPath();\n       if (stat.isDirectory()) {\n         // If current is an application log dir, decide if we need to remove it\n         // and remove if necessary.\n         // Otherwise, keep iterating into it.\n-        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n+        ApplicationId appId \u003d parseApplicationId(childPath.getName());\n         if (appId !\u003d null) { // Application log dir\n-          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n-            try {\n-              LOG.info(\"Deleting {}\", dirpath);\n-              if (!fs.delete(dirpath, true)) {\n-                LOG.error(\"Unable to remove \" + dirpath);\n-              }\n-              metrics.incrLogsDirsCleaned();\n-            } catch (IOException e) {\n-              LOG.error(\"Unable to remove \" + dirpath, e);\n-            }\n+          appLogDirPresent.setTrue();\n+          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\n+            deleteDir(childPath);\n           }\n         } else { // Keep cleaning inside\n-          cleanLogs(stat.getPath(), fs, retainMillis);\n+          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanAppLogDir(Path dirpath, long retainMillis,\n      MutableBoolean appLogDirPresent) throws IOException {\n    long now \u003d Time.now();\n    // Depth first search from root directory for all application log dirs\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      Path childPath \u003d stat.getPath();\n      if (stat.isDirectory()) {\n        // If current is an application log dir, decide if we need to remove it\n        // and remove if necessary.\n        // Otherwise, keep iterating into it.\n        ApplicationId appId \u003d parseApplicationId(childPath.getName());\n        if (appId !\u003d null) { // Application log dir\n          appLogDirPresent.setTrue();\n          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\n            deleteDir(childPath);\n          }\n        } else { // Keep cleaning inside\n          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[dirpath-Path, fs-FileSystem, retainMillis-long]",
            "newValue": "[dirpath-Path, retainMillis-long, appLogDirPresent-MutableBoolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9080.  Added clean up of bucket directories.\n            Contributed by Prabhu Joseph, Peter Bacsko, Szilard Nemeth\n",
          "commitDate": "23/05/19 9:08 AM",
          "commitName": "7b03072fd466de5817fdcd65f9dd88fd59c0bb00",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "04/08/17 4:03 PM",
          "commitNameOld": "f44b349b813508f0f6d99ca10bddba683dedf6c4",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 656.71,
          "commitsBetweenForRepo": 5462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,24 @@\n-  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n-      throws IOException {\n+  private void cleanAppLogDir(Path dirpath, long retainMillis,\n+      MutableBoolean appLogDirPresent) throws IOException {\n     long now \u003d Time.now();\n     // Depth first search from root directory for all application log dirs\n     RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n+      Path childPath \u003d stat.getPath();\n       if (stat.isDirectory()) {\n         // If current is an application log dir, decide if we need to remove it\n         // and remove if necessary.\n         // Otherwise, keep iterating into it.\n-        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n+        ApplicationId appId \u003d parseApplicationId(childPath.getName());\n         if (appId !\u003d null) { // Application log dir\n-          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n-            try {\n-              LOG.info(\"Deleting {}\", dirpath);\n-              if (!fs.delete(dirpath, true)) {\n-                LOG.error(\"Unable to remove \" + dirpath);\n-              }\n-              metrics.incrLogsDirsCleaned();\n-            } catch (IOException e) {\n-              LOG.error(\"Unable to remove \" + dirpath, e);\n-            }\n+          appLogDirPresent.setTrue();\n+          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\n+            deleteDir(childPath);\n           }\n         } else { // Keep cleaning inside\n-          cleanLogs(stat.getPath(), fs, retainMillis);\n+          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanAppLogDir(Path dirpath, long retainMillis,\n      MutableBoolean appLogDirPresent) throws IOException {\n    long now \u003d Time.now();\n    // Depth first search from root directory for all application log dirs\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      Path childPath \u003d stat.getPath();\n      if (stat.isDirectory()) {\n        // If current is an application log dir, decide if we need to remove it\n        // and remove if necessary.\n        // Otherwise, keep iterating into it.\n        ApplicationId appId \u003d parseApplicationId(childPath.getName());\n        if (appId !\u003d null) { // Application log dir\n          appLogDirPresent.setTrue();\n          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\n            deleteDir(childPath);\n          }\n        } else { // Keep cleaning inside\n          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9080.  Added clean up of bucket directories.\n            Contributed by Prabhu Joseph, Peter Bacsko, Szilard Nemeth\n",
          "commitDate": "23/05/19 9:08 AM",
          "commitName": "7b03072fd466de5817fdcd65f9dd88fd59c0bb00",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "04/08/17 4:03 PM",
          "commitNameOld": "f44b349b813508f0f6d99ca10bddba683dedf6c4",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 656.71,
          "commitsBetweenForRepo": 5462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,24 @@\n-  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n-      throws IOException {\n+  private void cleanAppLogDir(Path dirpath, long retainMillis,\n+      MutableBoolean appLogDirPresent) throws IOException {\n     long now \u003d Time.now();\n     // Depth first search from root directory for all application log dirs\n     RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n+      Path childPath \u003d stat.getPath();\n       if (stat.isDirectory()) {\n         // If current is an application log dir, decide if we need to remove it\n         // and remove if necessary.\n         // Otherwise, keep iterating into it.\n-        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n+        ApplicationId appId \u003d parseApplicationId(childPath.getName());\n         if (appId !\u003d null) { // Application log dir\n-          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n-            try {\n-              LOG.info(\"Deleting {}\", dirpath);\n-              if (!fs.delete(dirpath, true)) {\n-                LOG.error(\"Unable to remove \" + dirpath);\n-              }\n-              metrics.incrLogsDirsCleaned();\n-            } catch (IOException e) {\n-              LOG.error(\"Unable to remove \" + dirpath, e);\n-            }\n+          appLogDirPresent.setTrue();\n+          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\n+            deleteDir(childPath);\n           }\n         } else { // Keep cleaning inside\n-          cleanLogs(stat.getPath(), fs, retainMillis);\n+          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanAppLogDir(Path dirpath, long retainMillis,\n      MutableBoolean appLogDirPresent) throws IOException {\n    long now \u003d Time.now();\n    // Depth first search from root directory for all application log dirs\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      Path childPath \u003d stat.getPath();\n      if (stat.isDirectory()) {\n        // If current is an application log dir, decide if we need to remove it\n        // and remove if necessary.\n        // Otherwise, keep iterating into it.\n        ApplicationId appId \u003d parseApplicationId(childPath.getName());\n        if (appId !\u003d null) { // Application log dir\n          appLogDirPresent.setTrue();\n          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\n            deleteDir(childPath);\n          }\n        } else { // Keep cleaning inside\n          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "06413da72efed9a50e49efaf7110c220c88a7f4a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4851. Metric improvements for ATS v1.5 storage components. Li Lu via junping_du.\n",
      "commitDate": "03/05/16 4:16 AM",
      "commitName": "06413da72efed9a50e49efaf7110c220c88a7f4a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/04/16 10:38 AM",
      "commitNameOld": "e0cb426758b3d716ff143f723fc16ef2f1e4971b",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 19.73,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n       throws IOException {\n     long now \u003d Time.now();\n     // Depth first search from root directory for all application log dirs\n     RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n       if (stat.isDirectory()) {\n         // If current is an application log dir, decide if we need to remove it\n         // and remove if necessary.\n         // Otherwise, keep iterating into it.\n         ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n         if (appId !\u003d null) { // Application log dir\n           if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n             try {\n               LOG.info(\"Deleting {}\", dirpath);\n               if (!fs.delete(dirpath, true)) {\n                 LOG.error(\"Unable to remove \" + dirpath);\n               }\n+              metrics.incrLogsDirsCleaned();\n             } catch (IOException e) {\n               LOG.error(\"Unable to remove \" + dirpath, e);\n             }\n           }\n         } else { // Keep cleaning inside\n           cleanLogs(stat.getPath(), fs, retainMillis);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n      throws IOException {\n    long now \u003d Time.now();\n    // Depth first search from root directory for all application log dirs\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      if (stat.isDirectory()) {\n        // If current is an application log dir, decide if we need to remove it\n        // and remove if necessary.\n        // Otherwise, keep iterating into it.\n        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n        if (appId !\u003d null) { // Application log dir\n          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n            try {\n              LOG.info(\"Deleting {}\", dirpath);\n              if (!fs.delete(dirpath, true)) {\n                LOG.error(\"Unable to remove \" + dirpath);\n              }\n              metrics.incrLogsDirsCleaned();\n            } catch (IOException e) {\n              LOG.error(\"Unable to remove \" + dirpath, e);\n            }\n          }\n        } else { // Keep cleaning inside\n          cleanLogs(stat.getPath(), fs, retainMillis);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
          "commitDate": "10/03/16 10:51 AM",
          "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
          "commitAuthor": "Li Lu",
          "commitDateOld": "17/01/16 5:37 PM",
          "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 52.72,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  static void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n+  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n       throws IOException {\n     long now \u003d Time.now();\n     // Depth first search from root directory for all application log dirs\n-    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(dirpath);\n+    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n       if (stat.isDirectory()) {\n         // If current is an application log dir, decide if we need to remove it\n         // and remove if necessary.\n         // Otherwise, keep iterating into it.\n         ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n         if (appId !\u003d null) { // Application log dir\n           if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n             try {\n               LOG.info(\"Deleting {}\", dirpath);\n               if (!fs.delete(dirpath, true)) {\n                 LOG.error(\"Unable to remove \" + dirpath);\n               }\n             } catch (IOException e) {\n               LOG.error(\"Unable to remove \" + dirpath, e);\n             }\n           }\n         } else { // Keep cleaning inside\n           cleanLogs(stat.getPath(), fs, retainMillis);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n      throws IOException {\n    long now \u003d Time.now();\n    // Depth first search from root directory for all application log dirs\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      if (stat.isDirectory()) {\n        // If current is an application log dir, decide if we need to remove it\n        // and remove if necessary.\n        // Otherwise, keep iterating into it.\n        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n        if (appId !\u003d null) { // Application log dir\n          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n            try {\n              LOG.info(\"Deleting {}\", dirpath);\n              if (!fs.delete(dirpath, true)) {\n                LOG.error(\"Unable to remove \" + dirpath);\n              }\n            } catch (IOException e) {\n              LOG.error(\"Unable to remove \" + dirpath, e);\n            }\n          }\n        } else { // Keep cleaning inside\n          cleanLogs(stat.getPath(), fs, retainMillis);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
          "commitDate": "10/03/16 10:51 AM",
          "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
          "commitAuthor": "Li Lu",
          "commitDateOld": "17/01/16 5:37 PM",
          "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 52.72,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  static void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n+  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n       throws IOException {\n     long now \u003d Time.now();\n     // Depth first search from root directory for all application log dirs\n-    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(dirpath);\n+    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n       if (stat.isDirectory()) {\n         // If current is an application log dir, decide if we need to remove it\n         // and remove if necessary.\n         // Otherwise, keep iterating into it.\n         ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n         if (appId !\u003d null) { // Application log dir\n           if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n             try {\n               LOG.info(\"Deleting {}\", dirpath);\n               if (!fs.delete(dirpath, true)) {\n                 LOG.error(\"Unable to remove \" + dirpath);\n               }\n             } catch (IOException e) {\n               LOG.error(\"Unable to remove \" + dirpath, e);\n             }\n           }\n         } else { // Keep cleaning inside\n           cleanLogs(stat.getPath(), fs, retainMillis);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n      throws IOException {\n    long now \u003d Time.now();\n    // Depth first search from root directory for all application log dirs\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(dirpath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      if (stat.isDirectory()) {\n        // If current is an application log dir, decide if we need to remove it\n        // and remove if necessary.\n        // Otherwise, keep iterating into it.\n        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n        if (appId !\u003d null) { // Application log dir\n          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n            try {\n              LOG.info(\"Deleting {}\", dirpath);\n              if (!fs.delete(dirpath, true)) {\n                LOG.error(\"Unable to remove \" + dirpath);\n              }\n            } catch (IOException e) {\n              LOG.error(\"Unable to remove \" + dirpath, e);\n            }\n          }\n        } else { // Keep cleaning inside\n          cleanLogs(stat.getPath(), fs, retainMillis);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,29 @@\n+  static void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n+      throws IOException {\n+    long now \u003d Time.now();\n+    // Depth first search from root directory for all application log dirs\n+    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(dirpath);\n+    while (iter.hasNext()) {\n+      FileStatus stat \u003d iter.next();\n+      if (stat.isDirectory()) {\n+        // If current is an application log dir, decide if we need to remove it\n+        // and remove if necessary.\n+        // Otherwise, keep iterating into it.\n+        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n+        if (appId !\u003d null) { // Application log dir\n+          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n+            try {\n+              LOG.info(\"Deleting {}\", dirpath);\n+              if (!fs.delete(dirpath, true)) {\n+                LOG.error(\"Unable to remove \" + dirpath);\n+              }\n+            } catch (IOException e) {\n+              LOG.error(\"Unable to remove \" + dirpath, e);\n+            }\n+          }\n+        } else { // Keep cleaning inside\n+          cleanLogs(stat.getPath(), fs, retainMillis);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)\n      throws IOException {\n    long now \u003d Time.now();\n    // Depth first search from root directory for all application log dirs\n    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(dirpath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      if (stat.isDirectory()) {\n        // If current is an application log dir, decide if we need to remove it\n        // and remove if necessary.\n        // Otherwise, keep iterating into it.\n        ApplicationId appId \u003d parseApplicationId(dirpath.getName());\n        if (appId !\u003d null) { // Application log dir\n          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {\n            try {\n              LOG.info(\"Deleting {}\", dirpath);\n              if (!fs.delete(dirpath, true)) {\n                LOG.error(\"Unable to remove \" + dirpath);\n              }\n            } catch (IOException e) {\n              LOG.error(\"Unable to remove \" + dirpath, e);\n            }\n          }\n        } else { // Keep cleaning inside\n          cleanLogs(stat.getPath(), fs, retainMillis);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}