{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "deleteAsUser",
  "functionId": "deleteAsUser___ctx-DeletionAsUserContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 833,
  "functionEndLine": 878,
  "numCommitsSeen": 117,
  "timeTaken": 10835,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
    "f76f5c0919cdb0b032edb309d137093952e77268",
    "8d5929308998869933982bd425102c3a9488ee8f",
    "3e6fce91a471b4a5099de109582e7c6417e8a822",
    "53fafcf061616516c24e2e2007a66a93d23d3e25",
    "902c6ea7e4d3b49e49d9ce51ae9d12694ecfcf89",
    "752441434c99003595c67f22b3a526881e70156b",
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc",
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d": "Ybodychange",
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7": "Ybodychange",
    "f76f5c0919cdb0b032edb309d137093952e77268": "Ybodychange",
    "8d5929308998869933982bd425102c3a9488ee8f": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Ybodychange",
    "53fafcf061616516c24e2e2007a66a93d23d3e25": "Ymultichange(Yparameterchange,Ybodychange)",
    "902c6ea7e4d3b49e49d9ce51ae9d12694ecfcf89": "Ybodychange",
    "752441434c99003595c67f22b3a526881e70156b": "Ybodychange",
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc": "Ybodychange",
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void deleteAsUser(DeletionAsUserContext ctx) {\n     String user \u003d ctx.getUser();\n     Path dir \u003d ctx.getSubDir();\n     List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n \n     verifyUsernamePattern(user);\n \n     String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n \n     PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n \n     deleteAsUserOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(PrivilegedOperation.\n             RunAsUserCommand.DELETE_AS_USER.getValue()),\n         dirString);\n \n     List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n     if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n-      LOG.info(\"Deleting absolute path : \" + dir);\n+      LOG.info(\"Deleting absolute path : {}\", dir);\n       pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n-        LOG.info(\"Deleting path : \" + del);\n+        LOG.info(\"Deleting path : {}\", del);\n         pathsToDelete.add(del.toString());\n         deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n       }\n     }\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n           false);\n     }   catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n-      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n-          + \" returned with exit code: \" + exitCode, e);\n+      LOG.error(\"DeleteAsUser for {} returned with exit code: {}\",\n+          StringUtils.join(\" \", pathsToDelete), exitCode, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(DeletionAsUserContext ctx) {\n    String user \u003d ctx.getUser();\n    Path dir \u003d ctx.getSubDir();\n    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n\n    verifyUsernamePattern(user);\n\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n\n    deleteAsUserOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(PrivilegedOperation.\n            RunAsUserCommand.DELETE_AS_USER.getValue()),\n        dirString);\n\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : {}\", dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : {}\", del);\n        pathsToDelete.add(del.toString());\n        deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n      }\n    }\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n          false);\n    }   catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.error(\"DeleteAsUser for {} returned with exit code: {}\",\n          StringUtils.join(\" \", pathsToDelete), exitCode, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\n",
      "commitDate": "13/07/17 3:44 PM",
      "commitName": "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/17 3:42 PM",
      "commitNameOld": "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void deleteAsUser(DeletionAsUserContext ctx) {\n     String user \u003d ctx.getUser();\n     Path dir \u003d ctx.getSubDir();\n     List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n \n     verifyUsernamePattern(user);\n \n     String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n \n     PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n \n     deleteAsUserOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(PrivilegedOperation.\n             RunAsUserCommand.DELETE_AS_USER.getValue()),\n         dirString);\n \n     List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n     if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n       pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         pathsToDelete.add(del.toString());\n         deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n       }\n     }\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          PrivilegedOperationExecutor.getInstance(conf);\n+          getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n           false);\n     }   catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n           + \" returned with exit code: \" + exitCode, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(DeletionAsUserContext ctx) {\n    String user \u003d ctx.getUser();\n    Path dir \u003d ctx.getSubDir();\n    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n\n    verifyUsernamePattern(user);\n\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n\n    deleteAsUserOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(PrivilegedOperation.\n            RunAsUserCommand.DELETE_AS_USER.getValue()),\n        dirString);\n\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        pathsToDelete.add(del.toString());\n        deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n      }\n    }\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n          false);\n    }   catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n          + \" returned with exit code: \" + exitCode, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\"\n\nThis reverts commit f76f5c0919cdb0b032edb309d137093952e77268.\n",
      "commitDate": "13/07/17 3:42 PM",
      "commitName": "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/17 3:38 PM",
      "commitNameOld": "f76f5c0919cdb0b032edb309d137093952e77268",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void deleteAsUser(DeletionAsUserContext ctx) {\n     String user \u003d ctx.getUser();\n     Path dir \u003d ctx.getSubDir();\n     List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n \n     verifyUsernamePattern(user);\n \n     String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n \n     PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n \n     deleteAsUserOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(PrivilegedOperation.\n             RunAsUserCommand.DELETE_AS_USER.getValue()),\n         dirString);\n \n     List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n     if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n       pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         pathsToDelete.add(del.toString());\n         deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n       }\n     }\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          getPrivilegedOperationExecutor();\n+          PrivilegedOperationExecutor.getInstance(conf);\n \n       privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n           false);\n     }   catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n           + \" returned with exit code: \" + exitCode, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(DeletionAsUserContext ctx) {\n    String user \u003d ctx.getUser();\n    Path dir \u003d ctx.getSubDir();\n    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n\n    verifyUsernamePattern(user);\n\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n\n    deleteAsUserOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(PrivilegedOperation.\n            RunAsUserCommand.DELETE_AS_USER.getValue()),\n        dirString);\n\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        pathsToDelete.add(del.toString());\n        deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n      }\n    }\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n          false);\n    }   catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n          + \" returned with exit code: \" + exitCode, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "f76f5c0919cdb0b032edb309d137093952e77268": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\n",
      "commitDate": "13/07/17 3:38 PM",
      "commitName": "f76f5c0919cdb0b032edb309d137093952e77268",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/05/17 10:46 AM",
      "commitNameOld": "74a61438ca01e2191b54000af73b654a2d0b8253",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 64.2,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void deleteAsUser(DeletionAsUserContext ctx) {\n     String user \u003d ctx.getUser();\n     Path dir \u003d ctx.getSubDir();\n     List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n \n     verifyUsernamePattern(user);\n \n     String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n \n     PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n \n     deleteAsUserOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(PrivilegedOperation.\n             RunAsUserCommand.DELETE_AS_USER.getValue()),\n         dirString);\n \n     List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n     if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n       pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         pathsToDelete.add(del.toString());\n         deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n       }\n     }\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          PrivilegedOperationExecutor.getInstance(conf);\n+          getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n           false);\n     }   catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n           + \" returned with exit code: \" + exitCode, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(DeletionAsUserContext ctx) {\n    String user \u003d ctx.getUser();\n    Path dir \u003d ctx.getSubDir();\n    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n\n    verifyUsernamePattern(user);\n\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n\n    deleteAsUserOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(PrivilegedOperation.\n            RunAsUserCommand.DELETE_AS_USER.getValue()),\n        dirString);\n\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        pathsToDelete.add(del.toString());\n        deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n      }\n    }\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n          false);\n    }   catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n          + \" returned with exit code: \" + exitCode, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "8d5929308998869933982bd425102c3a9488ee8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4253. Standardize on using PrivilegedOperationExecutor for all invocations of container-executor in LinuxContainerExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "14/10/15 2:28 AM",
      "commitName": "8d5929308998869933982bd425102c3a9488ee8f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "11/09/15 2:07 AM",
      "commitNameOld": "486d5cb803efec7b4db445ee65a3df83392940a3",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 33.01,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n   public void deleteAsUser(DeletionAsUserContext ctx) {\n     String user \u003d ctx.getUser();\n     Path dir \u003d ctx.getSubDir();\n     List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n \n     verifyUsernamePattern(user);\n-    String runAsUser \u003d getRunAsUser(user);\n \n+    String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n \n-    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n-        Arrays.asList(containerExecutorExe,\n-                    runAsUser,\n-                    user,\n-                    Integer.toString(PrivilegedOperation.\n-                        RunAsUserCommand.DELETE_AS_USER.getValue()),\n-                    dirString));\n+    PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n+\n+    deleteAsUserOp.appendArgs(\n+        runAsUser,\n+        user,\n+        Integer.toString(PrivilegedOperation.\n+            RunAsUserCommand.DELETE_AS_USER.getValue()),\n+        dirString);\n+\n     List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n     if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n       pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         pathsToDelete.add(del.toString());\n-        command.add(baseDir.toUri().getPath());\n+        deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n       }\n     }\n-    String[] commandArray \u003d command.toArray(new String[command.size()]);\n-    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n-    }\n+\n     try {\n-      shExec.execute();\n-      if (LOG.isDebugEnabled()) {\n-        logOutput(shExec.getOutput());\n-      }\n-    } catch (IOException e) {\n-      int exitCode \u003d shExec.getExitCode();\n+      Configuration conf \u003d super.getConf();\n+      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n+          PrivilegedOperationExecutor.getInstance(conf);\n+\n+      privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n+          false);\n+    }   catch (PrivilegedOperationException e) {\n+      int exitCode \u003d e.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n           + \" returned with exit code: \" + exitCode, e);\n-      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n-      logOutput(shExec.getOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(DeletionAsUserContext ctx) {\n    String user \u003d ctx.getUser();\n    Path dir \u003d ctx.getSubDir();\n    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n\n    verifyUsernamePattern(user);\n\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    PrivilegedOperation deleteAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.DELETE_AS_USER, (String) null);\n\n    deleteAsUserOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(PrivilegedOperation.\n            RunAsUserCommand.DELETE_AS_USER.getValue()),\n        dirString);\n\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        pathsToDelete.add(del.toString());\n        deleteAsUserOp.appendArgs(baseDir.toUri().getPath());\n      }\n    }\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,\n          false);\n    }   catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n          + \" returned with exit code: \" + exitCode, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "07/07/15 4:29 AM",
      "commitNameOld": "c40bdb56a79fe1499c2284d493edc84620c0c078",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 20.31,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public void deleteAsUser(DeletionAsUserContext ctx) {\n     String user \u003d ctx.getUser();\n     Path dir \u003d ctx.getSubDir();\n     List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n     String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n \n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n                     runAsUser,\n                     user,\n-                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n+                    Integer.toString(PrivilegedOperation.\n+                        RunAsUserCommand.DELETE_AS_USER.getValue()),\n                     dirString));\n     List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n     if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n       pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         pathsToDelete.add(del.toString());\n         command.add(baseDir.toUri().getPath());\n       }\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (IOException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n           + \" returned with exit code: \" + exitCode, e);\n       LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n       logOutput(shExec.getOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(DeletionAsUserContext ctx) {\n    String user \u003d ctx.getUser();\n    Path dir \u003d ctx.getSubDir();\n    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user,\n                    Integer.toString(PrivilegedOperation.\n                        RunAsUserCommand.DELETE_AS_USER.getValue()),\n                    dirString));\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        pathsToDelete.add(del.toString());\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n          + \" returned with exit code: \" + exitCode, e);\n      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n      logOutput(shExec.getOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "53fafcf061616516c24e2e2007a66a93d23d3e25": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
      "commitDate": "21/05/15 3:50 PM",
      "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/05/15 8:01 PM",
          "commitNameOld": "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 12.83,
          "commitsBetweenForRepo": 119,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,46 @@\n-  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n+  public void deleteAsUser(DeletionAsUserContext ctx) {\n+    String user \u003d ctx.getUser();\n+    Path dir \u003d ctx.getSubDir();\n+    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n+\n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n     String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n \n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n                     runAsUser,\n                     user,\n                     Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                     dirString));\n     List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n-    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n+    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n       pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         pathsToDelete.add(del.toString());\n         command.add(baseDir.toUri().getPath());\n       }\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (IOException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n           + \" returned with exit code: \" + exitCode, e);\n       LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n       logOutput(shExec.getOutput());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void deleteAsUser(DeletionAsUserContext ctx) {\n    String user \u003d ctx.getUser();\n    Path dir \u003d ctx.getSubDir();\n    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dirString));\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        pathsToDelete.add(del.toString());\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n          + \" returned with exit code: \" + exitCode, e);\n      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n      logOutput(shExec.getOutput());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[user-String, dir-Path, baseDirs-Path]",
            "newValue": "[ctx-DeletionAsUserContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/05/15 8:01 PM",
          "commitNameOld": "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 12.83,
          "commitsBetweenForRepo": 119,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,46 @@\n-  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n+  public void deleteAsUser(DeletionAsUserContext ctx) {\n+    String user \u003d ctx.getUser();\n+    Path dir \u003d ctx.getSubDir();\n+    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n+\n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n     String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n \n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n                     runAsUser,\n                     user,\n                     Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                     dirString));\n     List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n-    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n+    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n       pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         pathsToDelete.add(del.toString());\n         command.add(baseDir.toUri().getPath());\n       }\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (IOException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n           + \" returned with exit code: \" + exitCode, e);\n       LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n       logOutput(shExec.getOutput());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void deleteAsUser(DeletionAsUserContext ctx) {\n    String user \u003d ctx.getUser();\n    Path dir \u003d ctx.getSubDir();\n    List\u003cPath\u003e baseDirs \u003d ctx.getBasedirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dirString));\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        pathsToDelete.add(del.toString());\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n          + \" returned with exit code: \" + exitCode, e);\n      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n      logOutput(shExec.getOutput());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "902c6ea7e4d3b49e49d9ce51ae9d12694ecfcf89": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3088. LinuxContainerExecutor.deleteAsUser can throw NPE if native executor returns an error. Contributed by Eric Payne\n",
      "commitDate": "26/01/15 7:40 AM",
      "commitName": "902c6ea7e4d3b49e49d9ce51ae9d12694ecfcf89",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/12/14 8:32 PM",
      "commitNameOld": "41a548a916d4248164cb9495320f123ec215d70e",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 33.46,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,42 @@\n   public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n+    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n+\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n                     runAsUser,\n                     user,\n                     Integer.toString(Commands.DELETE_AS_USER.getValue()),\n-                    dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n+                    dirString));\n+    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n     if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n+      pathsToDelete.add(dirString);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n+        pathsToDelete.add(del.toString());\n         command.add(baseDir.toUri().getPath());\n       }\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (IOException e) {\n       int exitCode \u003d shExec.getExitCode();\n-      LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n+      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n           + \" returned with exit code: \" + exitCode, e);\n       LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n       logOutput(shExec.getOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    String dirString \u003d dir \u003d\u003d null ? \"\" : dir.toUri().getPath();\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dirString));\n    List\u003cString\u003e pathsToDelete \u003d new ArrayList\u003cString\u003e();\n    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n      pathsToDelete.add(dirString);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        pathsToDelete.add(del.toString());\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + StringUtils.join(\" \", pathsToDelete)\n          + \" returned with exit code: \" + exitCode, e);\n      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n      logOutput(shExec.getOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "752441434c99003595c67f22b3a526881e70156b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1608. LinuxContainerExecutor has a few DEBUG messages at INFO level (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1558874 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/14 10:42 AM",
      "commitName": "752441434c99003595c67f22b3a526881e70156b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/10/13 2:59 PM",
      "commitNameOld": "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 103.86,
      "commitsBetweenForRepo": 600,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n   public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n                     runAsUser,\n                     user,\n                     Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                     dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n     if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         command.add(baseDir.toUri().getPath());\n       }\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n-    LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (IOException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n           + \" returned with exit code: \" + exitCode, e);\n       LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n       logOutput(shExec.getOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n          + \" returned with exit code: \" + exitCode, e);\n      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n      logOutput(shExec.getOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1253. Changes to LinuxContainerExecutor to run containers as a single dedicated user in non-secure mode. (rvs via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529325 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 2:59 PM",
      "commitName": "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/07/13 5:28 PM",
      "commitNameOld": "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 77.9,
      "commitsBetweenForRepo": 467,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n   public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n+    verifyUsernamePattern(user);\n+    String runAsUser \u003d getRunAsUser(user);\n+\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n+                    runAsUser,\n                     user,\n                     Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                     dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n     if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         command.add(baseDir.toUri().getPath());\n       }\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (IOException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n           + \" returned with exit code: \" + exitCode, e);\n       LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n       logOutput(shExec.getOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n          + \" returned with exit code: \" + exitCode, e);\n      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n      logOutput(shExec.getOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-814. Improving diagnostics when containers fail during launch due to various reasons like invalid env etc. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504732 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:28 PM",
      "commitName": "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/05/13 9:13 PM",
      "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 48.84,
      "commitsBetweenForRepo": 322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,34 @@\n   public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n                     user,\n                     Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                     dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n     if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n       LOG.info(\"Deleting absolute path : \" + dir);\n     } else {\n       for (Path baseDir : baseDirs) {\n         Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n         LOG.info(\"Deleting path : \" + del);\n         command.add(baseDir.toUri().getPath());\n       }\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (IOException e) {\n       int exitCode \u003d shExec.getExitCode();\n-      LOG.warn(\"Exit code from container is : \" + exitCode);\n-      if (exitCode !\u003d 0) {\n-        LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n-            + \" returned with non-zero exit code\" + exitCode);\n-        LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n-        logOutput(shExec.getOutput());\n-      }\n+      LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n+          + \" returned with exit code: \" + exitCode, e);\n+      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n+      logOutput(shExec.getOutput());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n          + \" returned with exit code: \" + exitCode, e);\n      LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n      logOutput(shExec.getOutput());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      if (exitCode !\u003d 0) {\n        LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n            + \" returned with non-zero exit code\" + exitCode);\n        LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n        logOutput(shExec.getOutput());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      if (exitCode !\u003d 0) {\n        LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n            + \" returned with non-zero exit code\" + exitCode);\n        LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n        logOutput(shExec.getOutput());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,37 @@\n+  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n+    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n+        Arrays.asList(containerExecutorExe,\n+                    user,\n+                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n+                    dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n+    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n+      LOG.info(\"Deleting absolute path : \" + dir);\n+    } else {\n+      for (Path baseDir : baseDirs) {\n+        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n+        LOG.info(\"Deleting path : \" + del);\n+        command.add(baseDir.toUri().getPath());\n+      }\n+    }\n+    String[] commandArray \u003d command.toArray(new String[command.size()]);\n+    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n+    LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n+    }\n+    try {\n+      shExec.execute();\n+      if (LOG.isDebugEnabled()) {\n+        logOutput(shExec.getOutput());\n+      }\n+    } catch (IOException e) {\n+      int exitCode \u003d shExec.getExitCode();\n+      LOG.warn(\"Exit code from container is : \" + exitCode);\n+      if (exitCode !\u003d 0) {\n+        LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n+            + \" returned with non-zero exit code\" + exitCode);\n+        LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n+        logOutput(shExec.getOutput());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteAsUser(String user, Path dir, Path... baseDirs) {\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n                    user,\n                    Integer.toString(Commands.DELETE_AS_USER.getValue()),\n                    dir \u003d\u003d null ? \"\" : dir.toUri().getPath()));\n    if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n      LOG.info(\"Deleting absolute path : \" + dir);\n    } else {\n      for (Path baseDir : baseDirs) {\n        Path del \u003d dir \u003d\u003d null ? baseDir : new Path(baseDir, dir);\n        LOG.info(\"Deleting path : \" + del);\n        command.add(baseDir.toUri().getPath());\n      }\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    LOG.info(\" -- DEBUG -- deleteAsUser: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"deleteAsUser: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (IOException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      if (exitCode !\u003d 0) {\n        LOG.error(\"DeleteAsUser for \" + dir.toUri().getPath()\n            + \" returned with non-zero exit code\" + exitCode);\n        LOG.error(\"Output from LinuxContainerExecutor\u0027s deleteAsUser follows:\");\n        logOutput(shExec.getOutput());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}