{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineClientImpl.java",
  "functionName": "putTimelineDataInJSONFile",
  "functionId": "putTimelineDataInJSONFile___path-String__type-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
  "functionStartLine": 326,
  "functionEndLine": 392,
  "numCommitsSeen": 59,
  "timeTaken": 3437,
  "changeHistory": [
    "9262797e86453fc04b7ca3710b73b21fcdf9e6b4",
    "221582c4ab0ff1d5936f754f23da140aac656654",
    "d78b452a4f413c6931a494c33df0666ce9b44973",
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2"
  ],
  "changeHistoryShort": {
    "9262797e86453fc04b7ca3710b73b21fcdf9e6b4": "Ybodychange",
    "221582c4ab0ff1d5936f754f23da140aac656654": "Ybodychange",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885": "Yfilerename",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9262797e86453fc04b7ca3710b73b21fcdf9e6b4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5257. Fix unreleased resources and null dereferences (yufeigu via rkanter)\n",
      "commitDate": "27/12/16 2:14 PM",
      "commitName": "9262797e86453fc04b7ca3710b73b21fcdf9e6b4",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "07/12/16 3:07 PM",
      "commitNameOld": "72fe54684198b7df5c5fb2114616dff6d17a4402",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 19.96,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n   private static void putTimelineDataInJSONFile(String path, String type) {\n     File jsonFile \u003d new File(path);\n     if (!jsonFile.exists()) {\n       LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n       return;\n     }\n     YarnJacksonJaxbJsonProvider.configObjectMapper(MAPPER);\n     TimelineEntities entities \u003d null;\n     TimelineDomains domains \u003d null;\n     try {\n       if (type.equals(ENTITY_DATA_TYPE)) {\n         entities \u003d MAPPER.readValue(jsonFile, TimelineEntities.class);\n       } else if (type.equals(DOMAIN_DATA_TYPE)){\n         domains \u003d MAPPER.readValue(jsonFile, TimelineDomains.class);\n       }\n     } catch (Exception e) {\n       LOG.error(\"Error when reading  \" + e.getMessage());\n       e.printStackTrace(System.err);\n       return;\n     }\n     Configuration conf \u003d new YarnConfiguration();\n     TimelineClient client \u003d TimelineClient.createTimelineClient();\n     client.init(conf);\n     client.start();\n     try {\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n         Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n             client.getDelegationToken(\n                 UserGroupInformation.getCurrentUser().getUserName());\n         UserGroupInformation.getCurrentUser().addToken(token);\n       }\n       if (type.equals(ENTITY_DATA_TYPE)) {\n         TimelinePutResponse response \u003d client.putEntities(\n             entities.getEntities().toArray(\n                 new TimelineEntity[entities.getEntities().size()]));\n         if (response.getErrors().size() \u003d\u003d 0) {\n           LOG.info(\"Timeline entities are successfully put\");\n         } else {\n           for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n             LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n                 error.getEntityId() + \"] is not successfully put. Error code: \" +\n                 error.getErrorCode());\n           }\n         }\n-      } else if (type.equals(DOMAIN_DATA_TYPE)) {\n+      } else if (type.equals(DOMAIN_DATA_TYPE) \u0026\u0026 domains !\u003d null) {\n         boolean hasError \u003d false;\n         for (TimelineDomain domain : domains.getDomains()) {\n           try {\n             client.putDomain(domain);\n           } catch (Exception e) {\n             LOG.error(\"Error when putting domain \" + domain.getId(), e);\n             hasError \u003d true;\n           }\n         }\n         if (!hasError) {\n           LOG.info(\"Timeline domains are successfully put\");\n         }\n       }\n     } catch(RuntimeException e) {\n       LOG.error(\"Error when putting the timeline data\", e);\n     } catch (Exception e) {\n       LOG.error(\"Error when putting the timeline data\", e);\n     } finally {\n       client.stop();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void putTimelineDataInJSONFile(String path, String type) {\n    File jsonFile \u003d new File(path);\n    if (!jsonFile.exists()) {\n      LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n      return;\n    }\n    YarnJacksonJaxbJsonProvider.configObjectMapper(MAPPER);\n    TimelineEntities entities \u003d null;\n    TimelineDomains domains \u003d null;\n    try {\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        entities \u003d MAPPER.readValue(jsonFile, TimelineEntities.class);\n      } else if (type.equals(DOMAIN_DATA_TYPE)){\n        domains \u003d MAPPER.readValue(jsonFile, TimelineDomains.class);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Error when reading  \" + e.getMessage());\n      e.printStackTrace(System.err);\n      return;\n    }\n    Configuration conf \u003d new YarnConfiguration();\n    TimelineClient client \u003d TimelineClient.createTimelineClient();\n    client.init(conf);\n    client.start();\n    try {\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n        Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n            client.getDelegationToken(\n                UserGroupInformation.getCurrentUser().getUserName());\n        UserGroupInformation.getCurrentUser().addToken(token);\n      }\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        TimelinePutResponse response \u003d client.putEntities(\n            entities.getEntities().toArray(\n                new TimelineEntity[entities.getEntities().size()]));\n        if (response.getErrors().size() \u003d\u003d 0) {\n          LOG.info(\"Timeline entities are successfully put\");\n        } else {\n          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n            LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n                error.getEntityId() + \"] is not successfully put. Error code: \" +\n                error.getErrorCode());\n          }\n        }\n      } else if (type.equals(DOMAIN_DATA_TYPE) \u0026\u0026 domains !\u003d null) {\n        boolean hasError \u003d false;\n        for (TimelineDomain domain : domains.getDomains()) {\n          try {\n            client.putDomain(domain);\n          } catch (Exception e) {\n            LOG.error(\"Error when putting domain \" + domain.getId(), e);\n            hasError \u003d true;\n          }\n        }\n        if (!hasError) {\n          LOG.info(\"Timeline domains are successfully put\");\n        }\n      }\n    } catch(RuntimeException e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } catch (Exception e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } finally {\n      client.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "221582c4ab0ff1d5936f754f23da140aac656654": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4668. Reuse objectMapper instance in Yarn. (Yiqun Lin via gtcarrera9)\n",
      "commitDate": "27/10/16 3:20 PM",
      "commitName": "221582c4ab0ff1d5936f754f23da140aac656654",
      "commitAuthor": "Li Lu",
      "commitDateOld": "23/09/16 12:57 AM",
      "commitNameOld": "b8a2d7b8fc96302ba1ef99d24392f463734f1b82",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 34.6,
      "commitsBetweenForRepo": 287,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,67 @@\n   private static void putTimelineDataInJSONFile(String path, String type) {\n     File jsonFile \u003d new File(path);\n     if (!jsonFile.exists()) {\n       LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n       return;\n     }\n-    ObjectMapper mapper \u003d new ObjectMapper();\n-    YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n+    YarnJacksonJaxbJsonProvider.configObjectMapper(MAPPER);\n     TimelineEntities entities \u003d null;\n     TimelineDomains domains \u003d null;\n     try {\n       if (type.equals(ENTITY_DATA_TYPE)) {\n-        entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n+        entities \u003d MAPPER.readValue(jsonFile, TimelineEntities.class);\n       } else if (type.equals(DOMAIN_DATA_TYPE)){\n-        domains \u003d mapper.readValue(jsonFile, TimelineDomains.class);\n+        domains \u003d MAPPER.readValue(jsonFile, TimelineDomains.class);\n       }\n     } catch (Exception e) {\n       LOG.error(\"Error when reading  \" + e.getMessage());\n       e.printStackTrace(System.err);\n       return;\n     }\n     Configuration conf \u003d new YarnConfiguration();\n     TimelineClient client \u003d TimelineClient.createTimelineClient();\n     client.init(conf);\n     client.start();\n     try {\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n         Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n             client.getDelegationToken(\n                 UserGroupInformation.getCurrentUser().getUserName());\n         UserGroupInformation.getCurrentUser().addToken(token);\n       }\n       if (type.equals(ENTITY_DATA_TYPE)) {\n         TimelinePutResponse response \u003d client.putEntities(\n             entities.getEntities().toArray(\n                 new TimelineEntity[entities.getEntities().size()]));\n         if (response.getErrors().size() \u003d\u003d 0) {\n           LOG.info(\"Timeline entities are successfully put\");\n         } else {\n           for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n             LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n                 error.getEntityId() + \"] is not successfully put. Error code: \" +\n                 error.getErrorCode());\n           }\n         }\n       } else if (type.equals(DOMAIN_DATA_TYPE)) {\n         boolean hasError \u003d false;\n         for (TimelineDomain domain : domains.getDomains()) {\n           try {\n             client.putDomain(domain);\n           } catch (Exception e) {\n             LOG.error(\"Error when putting domain \" + domain.getId(), e);\n             hasError \u003d true;\n           }\n         }\n         if (!hasError) {\n           LOG.info(\"Timeline domains are successfully put\");\n         }\n       }\n     } catch(RuntimeException e) {\n       LOG.error(\"Error when putting the timeline data\", e);\n     } catch (Exception e) {\n       LOG.error(\"Error when putting the timeline data\", e);\n     } finally {\n       client.stop();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void putTimelineDataInJSONFile(String path, String type) {\n    File jsonFile \u003d new File(path);\n    if (!jsonFile.exists()) {\n      LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n      return;\n    }\n    YarnJacksonJaxbJsonProvider.configObjectMapper(MAPPER);\n    TimelineEntities entities \u003d null;\n    TimelineDomains domains \u003d null;\n    try {\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        entities \u003d MAPPER.readValue(jsonFile, TimelineEntities.class);\n      } else if (type.equals(DOMAIN_DATA_TYPE)){\n        domains \u003d MAPPER.readValue(jsonFile, TimelineDomains.class);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Error when reading  \" + e.getMessage());\n      e.printStackTrace(System.err);\n      return;\n    }\n    Configuration conf \u003d new YarnConfiguration();\n    TimelineClient client \u003d TimelineClient.createTimelineClient();\n    client.init(conf);\n    client.start();\n    try {\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n        Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n            client.getDelegationToken(\n                UserGroupInformation.getCurrentUser().getUserName());\n        UserGroupInformation.getCurrentUser().addToken(token);\n      }\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        TimelinePutResponse response \u003d client.putEntities(\n            entities.getEntities().toArray(\n                new TimelineEntity[entities.getEntities().size()]));\n        if (response.getErrors().size() \u003d\u003d 0) {\n          LOG.info(\"Timeline entities are successfully put\");\n        } else {\n          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n            LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n                error.getEntityId() + \"] is not successfully put. Error code: \" +\n                error.getErrorCode());\n          }\n        }\n      } else if (type.equals(DOMAIN_DATA_TYPE)) {\n        boolean hasError \u003d false;\n        for (TimelineDomain domain : domains.getDomains()) {\n          try {\n            client.putDomain(domain);\n          } catch (Exception e) {\n            LOG.error(\"Error when putting domain \" + domain.getId(), e);\n            hasError \u003d true;\n          }\n        }\n        if (!hasError) {\n          LOG.info(\"Timeline domains are successfully put\");\n        }\n      }\n    } catch(RuntimeException e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } catch (Exception e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } finally {\n      client.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
          "commitDate": "24/09/14 11:27 AM",
          "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "20/08/14 10:05 AM",
          "commitNameOld": "e4539e88e388b7ff01a6acd0b1596a5a276d4478",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 330,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,68 @@\n-  private static void putTimelineEntitiesInJSONFile(String path) {\n+  private static void putTimelineDataInJSONFile(String path, String type) {\n     File jsonFile \u003d new File(path);\n     if (!jsonFile.exists()) {\n-      System.out.println(\"Error: File [\" + jsonFile.getAbsolutePath()\n-          + \"] doesn\u0027t exist\");\n+      LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n       return;\n     }\n     ObjectMapper mapper \u003d new ObjectMapper();\n     YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n     TimelineEntities entities \u003d null;\n+    TimelineDomains domains \u003d null;\n     try {\n-      entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n+      if (type.equals(ENTITY_DATA_TYPE)) {\n+        entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n+      } else if (type.equals(DOMAIN_DATA_TYPE)){\n+        domains \u003d mapper.readValue(jsonFile, TimelineDomains.class);\n+      }\n     } catch (Exception e) {\n-      System.err.println(\"Error: \" + e.getMessage());\n+      LOG.error(\"Error when reading  \" + e.getMessage());\n       e.printStackTrace(System.err);\n       return;\n     }\n     Configuration conf \u003d new YarnConfiguration();\n     TimelineClient client \u003d TimelineClient.createTimelineClient();\n     client.init(conf);\n     client.start();\n     try {\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n         Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n             client.getDelegationToken(\n                 UserGroupInformation.getCurrentUser().getUserName());\n         UserGroupInformation.getCurrentUser().addToken(token);\n       }\n-      TimelinePutResponse response \u003d client.putEntities(\n-          entities.getEntities().toArray(\n-              new TimelineEntity[entities.getEntities().size()]));\n-      if (response.getErrors().size() \u003d\u003d 0) {\n-        System.out.println(\"Timeline data is successfully put\");\n-      } else {\n-        for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n-          System.out.println(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n-              error.getEntityId() + \"] is not successfully put. Error code: \" +\n-              error.getErrorCode());\n+      if (type.equals(ENTITY_DATA_TYPE)) {\n+        TimelinePutResponse response \u003d client.putEntities(\n+            entities.getEntities().toArray(\n+                new TimelineEntity[entities.getEntities().size()]));\n+        if (response.getErrors().size() \u003d\u003d 0) {\n+          LOG.info(\"Timeline entities are successfully put\");\n+        } else {\n+          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n+            LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n+                error.getEntityId() + \"] is not successfully put. Error code: \" +\n+                error.getErrorCode());\n+          }\n+        }\n+      } else if (type.equals(DOMAIN_DATA_TYPE)) {\n+        boolean hasError \u003d false;\n+        for (TimelineDomain domain : domains.getDomains()) {\n+          try {\n+            client.putDomain(domain);\n+          } catch (Exception e) {\n+            LOG.error(\"Error when putting domain \" + domain.getId(), e);\n+            hasError \u003d true;\n+          }\n+        }\n+        if (!hasError) {\n+          LOG.info(\"Timeline domains are successfully put\");\n         }\n       }\n+    } catch(RuntimeException e) {\n+      LOG.error(\"Error when putting the timeline data\", e);\n     } catch (Exception e) {\n-      System.err.println(\"Error: \" + e.getMessage());\n-      e.printStackTrace(System.err);\n+      LOG.error(\"Error when putting the timeline data\", e);\n     } finally {\n       client.stop();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void putTimelineDataInJSONFile(String path, String type) {\n    File jsonFile \u003d new File(path);\n    if (!jsonFile.exists()) {\n      LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n      return;\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n    TimelineEntities entities \u003d null;\n    TimelineDomains domains \u003d null;\n    try {\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n      } else if (type.equals(DOMAIN_DATA_TYPE)){\n        domains \u003d mapper.readValue(jsonFile, TimelineDomains.class);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Error when reading  \" + e.getMessage());\n      e.printStackTrace(System.err);\n      return;\n    }\n    Configuration conf \u003d new YarnConfiguration();\n    TimelineClient client \u003d TimelineClient.createTimelineClient();\n    client.init(conf);\n    client.start();\n    try {\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n        Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n            client.getDelegationToken(\n                UserGroupInformation.getCurrentUser().getUserName());\n        UserGroupInformation.getCurrentUser().addToken(token);\n      }\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        TimelinePutResponse response \u003d client.putEntities(\n            entities.getEntities().toArray(\n                new TimelineEntity[entities.getEntities().size()]));\n        if (response.getErrors().size() \u003d\u003d 0) {\n          LOG.info(\"Timeline entities are successfully put\");\n        } else {\n          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n            LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n                error.getEntityId() + \"] is not successfully put. Error code: \" +\n                error.getErrorCode());\n          }\n        }\n      } else if (type.equals(DOMAIN_DATA_TYPE)) {\n        boolean hasError \u003d false;\n        for (TimelineDomain domain : domains.getDomains()) {\n          try {\n            client.putDomain(domain);\n          } catch (Exception e) {\n            LOG.error(\"Error when putting domain \" + domain.getId(), e);\n            hasError \u003d true;\n          }\n        }\n        if (!hasError) {\n          LOG.info(\"Timeline domains are successfully put\");\n        }\n      }\n    } catch(RuntimeException e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } catch (Exception e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } finally {\n      client.stop();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {
            "oldValue": "putTimelineEntitiesInJSONFile",
            "newValue": "putTimelineDataInJSONFile"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
          "commitDate": "24/09/14 11:27 AM",
          "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "20/08/14 10:05 AM",
          "commitNameOld": "e4539e88e388b7ff01a6acd0b1596a5a276d4478",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 330,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,68 @@\n-  private static void putTimelineEntitiesInJSONFile(String path) {\n+  private static void putTimelineDataInJSONFile(String path, String type) {\n     File jsonFile \u003d new File(path);\n     if (!jsonFile.exists()) {\n-      System.out.println(\"Error: File [\" + jsonFile.getAbsolutePath()\n-          + \"] doesn\u0027t exist\");\n+      LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n       return;\n     }\n     ObjectMapper mapper \u003d new ObjectMapper();\n     YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n     TimelineEntities entities \u003d null;\n+    TimelineDomains domains \u003d null;\n     try {\n-      entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n+      if (type.equals(ENTITY_DATA_TYPE)) {\n+        entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n+      } else if (type.equals(DOMAIN_DATA_TYPE)){\n+        domains \u003d mapper.readValue(jsonFile, TimelineDomains.class);\n+      }\n     } catch (Exception e) {\n-      System.err.println(\"Error: \" + e.getMessage());\n+      LOG.error(\"Error when reading  \" + e.getMessage());\n       e.printStackTrace(System.err);\n       return;\n     }\n     Configuration conf \u003d new YarnConfiguration();\n     TimelineClient client \u003d TimelineClient.createTimelineClient();\n     client.init(conf);\n     client.start();\n     try {\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n         Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n             client.getDelegationToken(\n                 UserGroupInformation.getCurrentUser().getUserName());\n         UserGroupInformation.getCurrentUser().addToken(token);\n       }\n-      TimelinePutResponse response \u003d client.putEntities(\n-          entities.getEntities().toArray(\n-              new TimelineEntity[entities.getEntities().size()]));\n-      if (response.getErrors().size() \u003d\u003d 0) {\n-        System.out.println(\"Timeline data is successfully put\");\n-      } else {\n-        for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n-          System.out.println(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n-              error.getEntityId() + \"] is not successfully put. Error code: \" +\n-              error.getErrorCode());\n+      if (type.equals(ENTITY_DATA_TYPE)) {\n+        TimelinePutResponse response \u003d client.putEntities(\n+            entities.getEntities().toArray(\n+                new TimelineEntity[entities.getEntities().size()]));\n+        if (response.getErrors().size() \u003d\u003d 0) {\n+          LOG.info(\"Timeline entities are successfully put\");\n+        } else {\n+          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n+            LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n+                error.getEntityId() + \"] is not successfully put. Error code: \" +\n+                error.getErrorCode());\n+          }\n+        }\n+      } else if (type.equals(DOMAIN_DATA_TYPE)) {\n+        boolean hasError \u003d false;\n+        for (TimelineDomain domain : domains.getDomains()) {\n+          try {\n+            client.putDomain(domain);\n+          } catch (Exception e) {\n+            LOG.error(\"Error when putting domain \" + domain.getId(), e);\n+            hasError \u003d true;\n+          }\n+        }\n+        if (!hasError) {\n+          LOG.info(\"Timeline domains are successfully put\");\n         }\n       }\n+    } catch(RuntimeException e) {\n+      LOG.error(\"Error when putting the timeline data\", e);\n     } catch (Exception e) {\n-      System.err.println(\"Error: \" + e.getMessage());\n-      e.printStackTrace(System.err);\n+      LOG.error(\"Error when putting the timeline data\", e);\n     } finally {\n       client.stop();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void putTimelineDataInJSONFile(String path, String type) {\n    File jsonFile \u003d new File(path);\n    if (!jsonFile.exists()) {\n      LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n      return;\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n    TimelineEntities entities \u003d null;\n    TimelineDomains domains \u003d null;\n    try {\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n      } else if (type.equals(DOMAIN_DATA_TYPE)){\n        domains \u003d mapper.readValue(jsonFile, TimelineDomains.class);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Error when reading  \" + e.getMessage());\n      e.printStackTrace(System.err);\n      return;\n    }\n    Configuration conf \u003d new YarnConfiguration();\n    TimelineClient client \u003d TimelineClient.createTimelineClient();\n    client.init(conf);\n    client.start();\n    try {\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n        Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n            client.getDelegationToken(\n                UserGroupInformation.getCurrentUser().getUserName());\n        UserGroupInformation.getCurrentUser().addToken(token);\n      }\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        TimelinePutResponse response \u003d client.putEntities(\n            entities.getEntities().toArray(\n                new TimelineEntity[entities.getEntities().size()]));\n        if (response.getErrors().size() \u003d\u003d 0) {\n          LOG.info(\"Timeline entities are successfully put\");\n        } else {\n          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n            LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n                error.getEntityId() + \"] is not successfully put. Error code: \" +\n                error.getErrorCode());\n          }\n        }\n      } else if (type.equals(DOMAIN_DATA_TYPE)) {\n        boolean hasError \u003d false;\n        for (TimelineDomain domain : domains.getDomains()) {\n          try {\n            client.putDomain(domain);\n          } catch (Exception e) {\n            LOG.error(\"Error when putting domain \" + domain.getId(), e);\n            hasError \u003d true;\n          }\n        }\n        if (!hasError) {\n          LOG.info(\"Timeline domains are successfully put\");\n        }\n      }\n    } catch(RuntimeException e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } catch (Exception e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } finally {\n      client.stop();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {
            "oldValue": "[path-String]",
            "newValue": "[path-String, type-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
          "commitDate": "24/09/14 11:27 AM",
          "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "20/08/14 10:05 AM",
          "commitNameOld": "e4539e88e388b7ff01a6acd0b1596a5a276d4478",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 330,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,68 @@\n-  private static void putTimelineEntitiesInJSONFile(String path) {\n+  private static void putTimelineDataInJSONFile(String path, String type) {\n     File jsonFile \u003d new File(path);\n     if (!jsonFile.exists()) {\n-      System.out.println(\"Error: File [\" + jsonFile.getAbsolutePath()\n-          + \"] doesn\u0027t exist\");\n+      LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n       return;\n     }\n     ObjectMapper mapper \u003d new ObjectMapper();\n     YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n     TimelineEntities entities \u003d null;\n+    TimelineDomains domains \u003d null;\n     try {\n-      entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n+      if (type.equals(ENTITY_DATA_TYPE)) {\n+        entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n+      } else if (type.equals(DOMAIN_DATA_TYPE)){\n+        domains \u003d mapper.readValue(jsonFile, TimelineDomains.class);\n+      }\n     } catch (Exception e) {\n-      System.err.println(\"Error: \" + e.getMessage());\n+      LOG.error(\"Error when reading  \" + e.getMessage());\n       e.printStackTrace(System.err);\n       return;\n     }\n     Configuration conf \u003d new YarnConfiguration();\n     TimelineClient client \u003d TimelineClient.createTimelineClient();\n     client.init(conf);\n     client.start();\n     try {\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n         Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n             client.getDelegationToken(\n                 UserGroupInformation.getCurrentUser().getUserName());\n         UserGroupInformation.getCurrentUser().addToken(token);\n       }\n-      TimelinePutResponse response \u003d client.putEntities(\n-          entities.getEntities().toArray(\n-              new TimelineEntity[entities.getEntities().size()]));\n-      if (response.getErrors().size() \u003d\u003d 0) {\n-        System.out.println(\"Timeline data is successfully put\");\n-      } else {\n-        for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n-          System.out.println(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n-              error.getEntityId() + \"] is not successfully put. Error code: \" +\n-              error.getErrorCode());\n+      if (type.equals(ENTITY_DATA_TYPE)) {\n+        TimelinePutResponse response \u003d client.putEntities(\n+            entities.getEntities().toArray(\n+                new TimelineEntity[entities.getEntities().size()]));\n+        if (response.getErrors().size() \u003d\u003d 0) {\n+          LOG.info(\"Timeline entities are successfully put\");\n+        } else {\n+          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n+            LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n+                error.getEntityId() + \"] is not successfully put. Error code: \" +\n+                error.getErrorCode());\n+          }\n+        }\n+      } else if (type.equals(DOMAIN_DATA_TYPE)) {\n+        boolean hasError \u003d false;\n+        for (TimelineDomain domain : domains.getDomains()) {\n+          try {\n+            client.putDomain(domain);\n+          } catch (Exception e) {\n+            LOG.error(\"Error when putting domain \" + domain.getId(), e);\n+            hasError \u003d true;\n+          }\n+        }\n+        if (!hasError) {\n+          LOG.info(\"Timeline domains are successfully put\");\n         }\n       }\n+    } catch(RuntimeException e) {\n+      LOG.error(\"Error when putting the timeline data\", e);\n     } catch (Exception e) {\n-      System.err.println(\"Error: \" + e.getMessage());\n-      e.printStackTrace(System.err);\n+      LOG.error(\"Error when putting the timeline data\", e);\n     } finally {\n       client.stop();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void putTimelineDataInJSONFile(String path, String type) {\n    File jsonFile \u003d new File(path);\n    if (!jsonFile.exists()) {\n      LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn\u0027t exist\");\n      return;\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n    TimelineEntities entities \u003d null;\n    TimelineDomains domains \u003d null;\n    try {\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n      } else if (type.equals(DOMAIN_DATA_TYPE)){\n        domains \u003d mapper.readValue(jsonFile, TimelineDomains.class);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Error when reading  \" + e.getMessage());\n      e.printStackTrace(System.err);\n      return;\n    }\n    Configuration conf \u003d new YarnConfiguration();\n    TimelineClient client \u003d TimelineClient.createTimelineClient();\n    client.init(conf);\n    client.start();\n    try {\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n        Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n            client.getDelegationToken(\n                UserGroupInformation.getCurrentUser().getUserName());\n        UserGroupInformation.getCurrentUser().addToken(token);\n      }\n      if (type.equals(ENTITY_DATA_TYPE)) {\n        TimelinePutResponse response \u003d client.putEntities(\n            entities.getEntities().toArray(\n                new TimelineEntity[entities.getEntities().size()]));\n        if (response.getErrors().size() \u003d\u003d 0) {\n          LOG.info(\"Timeline entities are successfully put\");\n        } else {\n          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n            LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n                error.getEntityId() + \"] is not successfully put. Error code: \" +\n                error.getErrorCode());\n          }\n        }\n      } else if (type.equals(DOMAIN_DATA_TYPE)) {\n        boolean hasError \u003d false;\n        for (TimelineDomain domain : domains.getDomains()) {\n          try {\n            client.putDomain(domain);\n          } catch (Exception e) {\n            LOG.error(\"Error when putting domain \" + domain.getId(), e);\n            hasError \u003d true;\n          }\n        }\n        if (!hasError) {\n          LOG.info(\"Timeline domains are successfully put\");\n        }\n      }\n    } catch(RuntimeException e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } catch (Exception e) {\n      LOG.error(\"Error when putting the timeline data\", e);\n    } finally {\n      client.stop();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "b47f65214c7a7b6ca8c77369ebc90dba67f9d885": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2298. Move TimelineClient to yarn-common project (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 10:48 PM",
      "commitName": "b47f65214c7a7b6ca8c77369ebc90dba67f9d885",
      "commitAuthor": "Junping Du",
      "commitDateOld": "05/08/14 5:50 PM",
      "commitNameOld": "812ac91add512c518394178c5162720d61957e1f",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void putTimelineEntitiesInJSONFile(String path) {\n    File jsonFile \u003d new File(path);\n    if (!jsonFile.exists()) {\n      System.out.println(\"Error: File [\" + jsonFile.getAbsolutePath()\n          + \"] doesn\u0027t exist\");\n      return;\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n    TimelineEntities entities \u003d null;\n    try {\n      entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n    } catch (Exception e) {\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace(System.err);\n      return;\n    }\n    Configuration conf \u003d new YarnConfiguration();\n    TimelineClient client \u003d TimelineClient.createTimelineClient();\n    client.init(conf);\n    client.start();\n    try {\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n        Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n            client.getDelegationToken(\n                UserGroupInformation.getCurrentUser().getUserName());\n        UserGroupInformation.getCurrentUser().addToken(token);\n      }\n      TimelinePutResponse response \u003d client.putEntities(\n          entities.getEntities().toArray(\n              new TimelineEntity[entities.getEntities().size()]));\n      if (response.getErrors().size() \u003d\u003d 0) {\n        System.out.println(\"Timeline data is successfully put\");\n      } else {\n        for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n          System.out.println(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n              error.getEntityId() + \"] is not successfully put. Error code: \" +\n              error.getErrorCode());\n        }\n      }\n    } catch (Exception e) {\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace(System.err);\n    } finally {\n      client.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
      }
    },
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1936. Added security support for the Timeline Client. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597153 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 11:47 AM",
      "commitName": "af8b09af75b252aa75b86ca42323c5b21eb41ee2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,48 @@\n+  private static void putTimelineEntitiesInJSONFile(String path) {\n+    File jsonFile \u003d new File(path);\n+    if (!jsonFile.exists()) {\n+      System.out.println(\"Error: File [\" + jsonFile.getAbsolutePath()\n+          + \"] doesn\u0027t exist\");\n+      return;\n+    }\n+    ObjectMapper mapper \u003d new ObjectMapper();\n+    YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n+    TimelineEntities entities \u003d null;\n+    try {\n+      entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n+    } catch (Exception e) {\n+      System.err.println(\"Error: \" + e.getMessage());\n+      e.printStackTrace(System.err);\n+      return;\n+    }\n+    Configuration conf \u003d new YarnConfiguration();\n+    TimelineClient client \u003d TimelineClient.createTimelineClient();\n+    client.init(conf);\n+    client.start();\n+    try {\n+      if (UserGroupInformation.isSecurityEnabled()\n+          \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n+        Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n+            client.getDelegationToken(\n+                UserGroupInformation.getCurrentUser().getUserName());\n+        UserGroupInformation.getCurrentUser().addToken(token);\n+      }\n+      TimelinePutResponse response \u003d client.putEntities(\n+          entities.getEntities().toArray(\n+              new TimelineEntity[entities.getEntities().size()]));\n+      if (response.getErrors().size() \u003d\u003d 0) {\n+        System.out.println(\"Timeline data is successfully put\");\n+      } else {\n+        for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n+          System.out.println(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n+              error.getEntityId() + \"] is not successfully put. Error code: \" +\n+              error.getErrorCode());\n+        }\n+      }\n+    } catch (Exception e) {\n+      System.err.println(\"Error: \" + e.getMessage());\n+      e.printStackTrace(System.err);\n+    } finally {\n+      client.stop();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void putTimelineEntitiesInJSONFile(String path) {\n    File jsonFile \u003d new File(path);\n    if (!jsonFile.exists()) {\n      System.out.println(\"Error: File [\" + jsonFile.getAbsolutePath()\n          + \"] doesn\u0027t exist\");\n      return;\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    YarnJacksonJaxbJsonProvider.configObjectMapper(mapper);\n    TimelineEntities entities \u003d null;\n    try {\n      entities \u003d mapper.readValue(jsonFile, TimelineEntities.class);\n    } catch (Exception e) {\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace(System.err);\n      return;\n    }\n    Configuration conf \u003d new YarnConfiguration();\n    TimelineClient client \u003d TimelineClient.createTimelineClient();\n    client.init(conf);\n    client.start();\n    try {\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false)) {\n        Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n            client.getDelegationToken(\n                UserGroupInformation.getCurrentUser().getUserName());\n        UserGroupInformation.getCurrentUser().addToken(token);\n      }\n      TimelinePutResponse response \u003d client.putEntities(\n          entities.getEntities().toArray(\n              new TimelineEntity[entities.getEntities().size()]));\n      if (response.getErrors().size() \u003d\u003d 0) {\n        System.out.println(\"Timeline data is successfully put\");\n      } else {\n        for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\n          System.out.println(\"TimelineEntity [\" + error.getEntityType() + \":\" +\n              error.getEntityId() + \"] is not successfully put. Error code: \" +\n              error.getErrorCode());\n        }\n      }\n    } catch (Exception e) {\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace(System.err);\n    } finally {\n      client.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
    }
  }
}