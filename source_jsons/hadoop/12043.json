{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetImpl.java",
  "functionName": "onCompleteLazyPersist",
  "functionId": "onCompleteLazyPersist___bpId-String__blockId-long__creationTime-long__savedFiles-File[]__targetVolume-FsVolumeImpl",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
  "functionStartLine": 3085,
  "functionEndLine": 3106,
  "numCommitsSeen": 197,
  "timeTaken": 6360,
  "changeHistory": [
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
    "342c9572bf6a623287f34c5cc0bc3be6038c191a",
    "1efd9c98258fbb973d2058dcf0850042e53bd02f"
  ],
  "changeHistoryShort": {
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": "Ybodychange",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": "Ybodychange",
    "342c9572bf6a623287f34c5cc0bc3be6038c191a": "Ybodychange",
    "1efd9c98258fbb973d2058dcf0850042e53bd02f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15150. Introduce read write lock to Datanode. Contributed Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "11/02/20 8:00 AM",
      "commitName": "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "28/01/20 10:10 AM",
      "commitNameOld": "1839c467f60cbb8592d446694ec3d7710cda5142",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 13.91,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public void onCompleteLazyPersist(String bpId, long blockId,\n       long creationTime, File[] savedFiles, FsVolumeImpl targetVolume) {\n-    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n       ramDiskReplicaTracker.recordEndLazyPersist(bpId, blockId, savedFiles);\n \n       targetVolume.incDfsUsedAndNumBlocks(bpId, savedFiles[0].length()\n           + savedFiles[1].length());\n \n       // Update metrics (ignore the metadata file size)\n       datanode.getMetrics().incrRamDiskBlocksLazyPersisted();\n       datanode.getMetrics().incrRamDiskBytesLazyPersisted(savedFiles[1].length());\n       datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(\n           Time.monotonicNow() - creationTime);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"LazyWriter: Finish persisting RamDisk block: \"\n             + \" block pool Id: \" + bpId + \" block id: \" + blockId\n             + \" to block file \" + savedFiles[1] + \" and meta file \" + savedFiles[0]\n             + \" on target volume \" + targetVolume);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void onCompleteLazyPersist(String bpId, long blockId,\n      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume) {\n    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n      ramDiskReplicaTracker.recordEndLazyPersist(bpId, blockId, savedFiles);\n\n      targetVolume.incDfsUsedAndNumBlocks(bpId, savedFiles[0].length()\n          + savedFiles[1].length());\n\n      // Update metrics (ignore the metadata file size)\n      datanode.getMetrics().incrRamDiskBlocksLazyPersisted();\n      datanode.getMetrics().incrRamDiskBytesLazyPersisted(savedFiles[1].length());\n      datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(\n          Time.monotonicNow() - creationTime);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"LazyWriter: Finish persisting RamDisk block: \"\n            + \" block pool Id: \" + bpId + \" block id: \" + blockId\n            + \" to block file \" + savedFiles[1] + \" and meta file \" + savedFiles[0]\n            + \" on target volume \" + targetVolume);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
      "commitDate": "08/08/16 12:02 PM",
      "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "08/07/16 7:40 PM",
      "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 30.68,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public void onCompleteLazyPersist(String bpId, long blockId,\n       long creationTime, File[] savedFiles, FsVolumeImpl targetVolume) {\n-    synchronized (FsDatasetImpl.this) {\n+    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n       ramDiskReplicaTracker.recordEndLazyPersist(bpId, blockId, savedFiles);\n \n       targetVolume.incDfsUsedAndNumBlocks(bpId, savedFiles[0].length()\n           + savedFiles[1].length());\n \n       // Update metrics (ignore the metadata file size)\n       datanode.getMetrics().incrRamDiskBlocksLazyPersisted();\n       datanode.getMetrics().incrRamDiskBytesLazyPersisted(savedFiles[1].length());\n       datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(\n           Time.monotonicNow() - creationTime);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"LazyWriter: Finish persisting RamDisk block: \"\n             + \" block pool Id: \" + bpId + \" block id: \" + blockId\n             + \" to block file \" + savedFiles[1] + \" and meta file \" + savedFiles[0]\n             + \" on target volume \" + targetVolume);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void onCompleteLazyPersist(String bpId, long blockId,\n      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume) {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      ramDiskReplicaTracker.recordEndLazyPersist(bpId, blockId, savedFiles);\n\n      targetVolume.incDfsUsedAndNumBlocks(bpId, savedFiles[0].length()\n          + savedFiles[1].length());\n\n      // Update metrics (ignore the metadata file size)\n      datanode.getMetrics().incrRamDiskBlocksLazyPersisted();\n      datanode.getMetrics().incrRamDiskBytesLazyPersisted(savedFiles[1].length());\n      datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(\n          Time.monotonicNow() - creationTime);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"LazyWriter: Finish persisting RamDisk block: \"\n            + \" block pool Id: \" + bpId + \" block id: \" + blockId\n            + \" to block file \" + savedFiles[1] + \" and meta file \" + savedFiles[0]\n            + \" on target volume \" + targetVolume);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "342c9572bf6a623287f34c5cc0bc3be6038c191a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9425. Expose number of blocks per volume as a metric (Contributed by Brahma Reddy Battula)\n",
      "commitDate": "21/02/16 7:59 PM",
      "commitName": "342c9572bf6a623287f34c5cc0bc3be6038c191a",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "02/02/16 6:05 PM",
      "commitNameOld": "04375756a5ed6e907ee7548469c2c508aebbafb7",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 19.08,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public void onCompleteLazyPersist(String bpId, long blockId,\n       long creationTime, File[] savedFiles, FsVolumeImpl targetVolume) {\n     synchronized (FsDatasetImpl.this) {\n       ramDiskReplicaTracker.recordEndLazyPersist(bpId, blockId, savedFiles);\n \n-      targetVolume.incDfsUsed(bpId,\n-          savedFiles[0].length() + savedFiles[1].length());\n+      targetVolume.incDfsUsedAndNumBlocks(bpId, savedFiles[0].length()\n+          + savedFiles[1].length());\n \n       // Update metrics (ignore the metadata file size)\n       datanode.getMetrics().incrRamDiskBlocksLazyPersisted();\n       datanode.getMetrics().incrRamDiskBytesLazyPersisted(savedFiles[1].length());\n       datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(\n           Time.monotonicNow() - creationTime);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"LazyWriter: Finish persisting RamDisk block: \"\n             + \" block pool Id: \" + bpId + \" block id: \" + blockId\n             + \" to block file \" + savedFiles[1] + \" and meta file \" + savedFiles[0]\n             + \" on target volume \" + targetVolume);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void onCompleteLazyPersist(String bpId, long blockId,\n      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume) {\n    synchronized (FsDatasetImpl.this) {\n      ramDiskReplicaTracker.recordEndLazyPersist(bpId, blockId, savedFiles);\n\n      targetVolume.incDfsUsedAndNumBlocks(bpId, savedFiles[0].length()\n          + savedFiles[1].length());\n\n      // Update metrics (ignore the metadata file size)\n      datanode.getMetrics().incrRamDiskBlocksLazyPersisted();\n      datanode.getMetrics().incrRamDiskBytesLazyPersisted(savedFiles[1].length());\n      datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(\n          Time.monotonicNow() - creationTime);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"LazyWriter: Finish persisting RamDisk block: \"\n            + \" block pool Id: \" + bpId + \" block id: \" + blockId\n            + \" to block file \" + savedFiles[1] + \" and meta file \" + savedFiles[0]\n            + \" on target volume \" + targetVolume);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "1efd9c98258fbb973d2058dcf0850042e53bd02f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7112. LazyWriter should use either async IO or one thread per physical disk. Contributed by Xiaoyu Yao.\n",
      "commitDate": "07/10/14 8:25 PM",
      "commitName": "1efd9c98258fbb973d2058dcf0850042e53bd02f",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,22 @@\n+  public void onCompleteLazyPersist(String bpId, long blockId,\n+      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume) {\n+    synchronized (FsDatasetImpl.this) {\n+      ramDiskReplicaTracker.recordEndLazyPersist(bpId, blockId, savedFiles);\n+\n+      targetVolume.incDfsUsed(bpId,\n+          savedFiles[0].length() + savedFiles[1].length());\n+\n+      // Update metrics (ignore the metadata file size)\n+      datanode.getMetrics().incrRamDiskBlocksLazyPersisted();\n+      datanode.getMetrics().incrRamDiskBytesLazyPersisted(savedFiles[1].length());\n+      datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(\n+          Time.monotonicNow() - creationTime);\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"LazyWriter: Finish persisting RamDisk block: \"\n+            + \" block pool Id: \" + bpId + \" block id: \" + blockId\n+            + \" to block file \" + savedFiles[1] + \" and meta file \" + savedFiles[0]\n+            + \" on target volume \" + targetVolume);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void onCompleteLazyPersist(String bpId, long blockId,\n      long creationTime, File[] savedFiles, FsVolumeImpl targetVolume) {\n    synchronized (FsDatasetImpl.this) {\n      ramDiskReplicaTracker.recordEndLazyPersist(bpId, blockId, savedFiles);\n\n      targetVolume.incDfsUsed(bpId,\n          savedFiles[0].length() + savedFiles[1].length());\n\n      // Update metrics (ignore the metadata file size)\n      datanode.getMetrics().incrRamDiskBlocksLazyPersisted();\n      datanode.getMetrics().incrRamDiskBytesLazyPersisted(savedFiles[1].length());\n      datanode.getMetrics().addRamDiskBlocksLazyPersistWindowMs(\n          Time.monotonicNow() - creationTime);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"LazyWriter: Finish persisting RamDisk block: \"\n            + \" block pool Id: \" + bpId + \" block id: \" + blockId\n            + \" to block file \" + savedFiles[1] + \" and meta file \" + savedFiles[0]\n            + \" on target volume \" + targetVolume);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java"
    }
  }
}