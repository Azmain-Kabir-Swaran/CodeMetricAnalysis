{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Listing.java",
  "functionName": "buildNextStatusBatch",
  "functionId": "buildNextStatusBatch___objects-S3ListResult",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java",
  "functionStartLine": 458,
  "functionEndLine": 508,
  "numCommitsSeen": 14,
  "timeTaken": 2619,
  "changeHistory": [
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "5bbca80428ffbe776650652de86a3bba885edb31",
    "621b43e254afaff708cd6fc4698b29628f6abc33",
    "3372e940303149d6258e0b72c54d72f080f0daa2",
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c"
  ],
  "changeHistoryShort": {
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c": "Ybodychange",
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "5bbca80428ffbe776650652de86a3bba885edb31": "Yparameterchange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Ybodychange",
    "3372e940303149d6258e0b72c54d72f080f0daa2": "Ybodychange",
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16279. S3Guard: Implement time-based (TTL) expiry for entries (and tombstones).\n\nContributed by Gabor Bota.\n\nChange-Id: I73a2d2861901dedfe7a0e783b310fbb95e7c1af9\n",
      "commitDate": "16/06/19 9:05 AM",
      "commitName": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "19/05/19 2:29 PM",
      "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 27.77,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     private boolean buildNextStatusBatch(S3ListResult objects) {\n       // counters for debug logs\n       int added \u003d 0, ignored \u003d 0;\n       // list to fill in with results. Initial size will be list maximum.\n       List\u003cS3AFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n           objects.getObjectSummaries().size() +\n               objects.getCommonPrefixes().size());\n       // objects\n       for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n         String key \u003d summary.getKey();\n         Path keyPath \u003d owner.keyToQualifiedPath(key);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n         }\n         // Skip over keys that are ourselves and old S3N _$folder$ files\n         if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n           S3AFileStatus status \u003d createFileStatus(keyPath, summary,\n               owner.getDefaultBlockSize(keyPath), owner.getUsername(),\n-              null, null);\n+              summary.getETag(), null);\n           LOG.debug(\"Adding: {}\", status);\n           stats.add(status);\n           added++;\n         } else {\n           LOG.debug(\"Ignoring: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // prefixes: always directories\n       for (String prefix : objects.getCommonPrefixes()) {\n         Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n         if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n           S3AFileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n               owner.getUsername());\n           LOG.debug(\"Adding directory: {}\", status);\n           added++;\n           stats.add(status);\n         } else {\n           LOG.debug(\"Ignoring directory: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // finish up\n       batchSize \u003d stats.size();\n       statusBatchIterator \u003d stats.listIterator();\n       boolean hasNext \u003d statusBatchIterator.hasNext();\n       LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n           added, ignored, hasNext, objects.isTruncated());\n       return hasNext;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean buildNextStatusBatch(S3ListResult objects) {\n      // counters for debug logs\n      int added \u003d 0, ignored \u003d 0;\n      // list to fill in with results. Initial size will be list maximum.\n      List\u003cS3AFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n          objects.getObjectSummaries().size() +\n              objects.getCommonPrefixes().size());\n      // objects\n      for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n        String key \u003d summary.getKey();\n        Path keyPath \u003d owner.keyToQualifiedPath(key);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n        }\n        // Skip over keys that are ourselves and old S3N _$folder$ files\n        if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n          S3AFileStatus status \u003d createFileStatus(keyPath, summary,\n              owner.getDefaultBlockSize(keyPath), owner.getUsername(),\n              summary.getETag(), null);\n          LOG.debug(\"Adding: {}\", status);\n          stats.add(status);\n          added++;\n        } else {\n          LOG.debug(\"Ignoring: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // prefixes: always directories\n      for (String prefix : objects.getCommonPrefixes()) {\n        Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n        if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n          S3AFileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n              owner.getUsername());\n          LOG.debug(\"Adding directory: {}\", status);\n          added++;\n          stats.add(status);\n        } else {\n          LOG.debug(\"Ignoring directory: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // finish up\n      batchSize \u003d stats.size();\n      statusBatchIterator \u003d stats.listIterator();\n      boolean hasNext \u003d statusBatchIterator.hasNext();\n      LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n          added, ignored, hasNext, objects.isTruncated());\n      return hasNext;\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java",
      "extendedDetails": {}
    },
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "18/02/18 5:19 AM",
      "commitNameOld": "4d4dde5112e9ee6b37cbdea17104c5a4c6870bd5",
      "commitAuthorOld": "fang zhenyi",
      "daysBetweenCommits": 455.34,
      "commitsBetweenForRepo": 3994,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n     private boolean buildNextStatusBatch(S3ListResult objects) {\n       // counters for debug logs\n       int added \u003d 0, ignored \u003d 0;\n       // list to fill in with results. Initial size will be list maximum.\n-      List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n+      List\u003cS3AFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n           objects.getObjectSummaries().size() +\n               objects.getCommonPrefixes().size());\n       // objects\n       for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n         String key \u003d summary.getKey();\n         Path keyPath \u003d owner.keyToQualifiedPath(key);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n         }\n         // Skip over keys that are ourselves and old S3N _$folder$ files\n         if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n-          FileStatus status \u003d createFileStatus(keyPath, summary,\n-              owner.getDefaultBlockSize(keyPath), owner.getUsername());\n+          S3AFileStatus status \u003d createFileStatus(keyPath, summary,\n+              owner.getDefaultBlockSize(keyPath), owner.getUsername(),\n+              null, null);\n           LOG.debug(\"Adding: {}\", status);\n           stats.add(status);\n           added++;\n         } else {\n           LOG.debug(\"Ignoring: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // prefixes: always directories\n       for (String prefix : objects.getCommonPrefixes()) {\n         Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n         if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n-          FileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n+          S3AFileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n               owner.getUsername());\n           LOG.debug(\"Adding directory: {}\", status);\n           added++;\n           stats.add(status);\n         } else {\n           LOG.debug(\"Ignoring directory: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // finish up\n       batchSize \u003d stats.size();\n       statusBatchIterator \u003d stats.listIterator();\n       boolean hasNext \u003d statusBatchIterator.hasNext();\n       LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n           added, ignored, hasNext, objects.isTruncated());\n       return hasNext;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean buildNextStatusBatch(S3ListResult objects) {\n      // counters for debug logs\n      int added \u003d 0, ignored \u003d 0;\n      // list to fill in with results. Initial size will be list maximum.\n      List\u003cS3AFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n          objects.getObjectSummaries().size() +\n              objects.getCommonPrefixes().size());\n      // objects\n      for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n        String key \u003d summary.getKey();\n        Path keyPath \u003d owner.keyToQualifiedPath(key);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n        }\n        // Skip over keys that are ourselves and old S3N _$folder$ files\n        if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n          S3AFileStatus status \u003d createFileStatus(keyPath, summary,\n              owner.getDefaultBlockSize(keyPath), owner.getUsername(),\n              null, null);\n          LOG.debug(\"Adding: {}\", status);\n          stats.add(status);\n          added++;\n        } else {\n          LOG.debug(\"Ignoring: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // prefixes: always directories\n      for (String prefix : objects.getCommonPrefixes()) {\n        Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n        if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n          S3AFileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n              owner.getUsername());\n          LOG.debug(\"Adding directory: {}\", status);\n          added++;\n          stats.add(status);\n        } else {\n          LOG.debug(\"Ignoring directory: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // finish up\n      batchSize \u003d stats.size();\n      statusBatchIterator \u003d stats.listIterator();\n      boolean hasNext \u003d statusBatchIterator.hasNext();\n      LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n          added, ignored, hasNext, objects.isTruncated());\n      return hasNext;\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java",
      "extendedDetails": {}
    },
    "5bbca80428ffbe776650652de86a3bba885edb31": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13421. Switch to v2 of the S3 List Objects API in S3A.\nContributed by Aaron Fabbri\n",
      "commitDate": "08/09/17 4:07 AM",
      "commitName": "5bbca80428ffbe776650652de86a3bba885edb31",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "01/09/17 6:13 AM",
      "commitNameOld": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.91,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n-    private boolean buildNextStatusBatch(ObjectListing objects) {\n+    private boolean buildNextStatusBatch(S3ListResult objects) {\n       // counters for debug logs\n       int added \u003d 0, ignored \u003d 0;\n       // list to fill in with results. Initial size will be list maximum.\n       List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n           objects.getObjectSummaries().size() +\n               objects.getCommonPrefixes().size());\n       // objects\n       for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n         String key \u003d summary.getKey();\n         Path keyPath \u003d owner.keyToQualifiedPath(key);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n         }\n         // Skip over keys that are ourselves and old S3N _$folder$ files\n         if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n           FileStatus status \u003d createFileStatus(keyPath, summary,\n               owner.getDefaultBlockSize(keyPath), owner.getUsername());\n           LOG.debug(\"Adding: {}\", status);\n           stats.add(status);\n           added++;\n         } else {\n           LOG.debug(\"Ignoring: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // prefixes: always directories\n       for (String prefix : objects.getCommonPrefixes()) {\n         Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n         if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n           FileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n               owner.getUsername());\n           LOG.debug(\"Adding directory: {}\", status);\n           added++;\n           stats.add(status);\n         } else {\n           LOG.debug(\"Ignoring directory: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // finish up\n       batchSize \u003d stats.size();\n       statusBatchIterator \u003d stats.listIterator();\n       boolean hasNext \u003d statusBatchIterator.hasNext();\n       LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n           added, ignored, hasNext, objects.isTruncated());\n       return hasNext;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean buildNextStatusBatch(S3ListResult objects) {\n      // counters for debug logs\n      int added \u003d 0, ignored \u003d 0;\n      // list to fill in with results. Initial size will be list maximum.\n      List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n          objects.getObjectSummaries().size() +\n              objects.getCommonPrefixes().size());\n      // objects\n      for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n        String key \u003d summary.getKey();\n        Path keyPath \u003d owner.keyToQualifiedPath(key);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n        }\n        // Skip over keys that are ourselves and old S3N _$folder$ files\n        if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n          FileStatus status \u003d createFileStatus(keyPath, summary,\n              owner.getDefaultBlockSize(keyPath), owner.getUsername());\n          LOG.debug(\"Adding: {}\", status);\n          stats.add(status);\n          added++;\n        } else {\n          LOG.debug(\"Ignoring: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // prefixes: always directories\n      for (String prefix : objects.getCommonPrefixes()) {\n        Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n        if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n          FileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n              owner.getUsername());\n          LOG.debug(\"Adding directory: {}\", status);\n          added++;\n          stats.add(status);\n        } else {\n          LOG.debug(\"Ignoring directory: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // finish up\n      batchSize \u003d stats.size();\n      statusBatchIterator \u003d stats.listIterator();\n      boolean hasNext \u003d statusBatchIterator.hasNext();\n      LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n          added, ignored, hasNext, objects.isTruncated());\n      return hasNext;\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java",
      "extendedDetails": {
        "oldValue": "[objects-ObjectListing]",
        "newValue": "[objects-S3ListResult]"
      }
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "24/10/16 9:54 PM",
      "commitNameOld": "3372e940303149d6258e0b72c54d72f080f0daa2",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 311.35,
      "commitsBetweenForRepo": 1905,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     private boolean buildNextStatusBatch(ObjectListing objects) {\n       // counters for debug logs\n       int added \u003d 0, ignored \u003d 0;\n       // list to fill in with results. Initial size will be list maximum.\n       List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n           objects.getObjectSummaries().size() +\n               objects.getCommonPrefixes().size());\n       // objects\n       for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n         String key \u003d summary.getKey();\n         Path keyPath \u003d owner.keyToQualifiedPath(key);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n         }\n         // Skip over keys that are ourselves and old S3N _$folder$ files\n         if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n           FileStatus status \u003d createFileStatus(keyPath, summary,\n               owner.getDefaultBlockSize(keyPath), owner.getUsername());\n           LOG.debug(\"Adding: {}\", status);\n           stats.add(status);\n           added++;\n         } else {\n           LOG.debug(\"Ignoring: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // prefixes: always directories\n       for (String prefix : objects.getCommonPrefixes()) {\n         Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n         if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n-          FileStatus status \u003d new S3AFileStatus(false, keyPath,\n+          FileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n               owner.getUsername());\n           LOG.debug(\"Adding directory: {}\", status);\n           added++;\n           stats.add(status);\n         } else {\n           LOG.debug(\"Ignoring directory: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // finish up\n       batchSize \u003d stats.size();\n       statusBatchIterator \u003d stats.listIterator();\n       boolean hasNext \u003d statusBatchIterator.hasNext();\n       LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n           added, ignored, hasNext, objects.isTruncated());\n       return hasNext;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean buildNextStatusBatch(ObjectListing objects) {\n      // counters for debug logs\n      int added \u003d 0, ignored \u003d 0;\n      // list to fill in with results. Initial size will be list maximum.\n      List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n          objects.getObjectSummaries().size() +\n              objects.getCommonPrefixes().size());\n      // objects\n      for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n        String key \u003d summary.getKey();\n        Path keyPath \u003d owner.keyToQualifiedPath(key);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n        }\n        // Skip over keys that are ourselves and old S3N _$folder$ files\n        if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n          FileStatus status \u003d createFileStatus(keyPath, summary,\n              owner.getDefaultBlockSize(keyPath), owner.getUsername());\n          LOG.debug(\"Adding: {}\", status);\n          stats.add(status);\n          added++;\n        } else {\n          LOG.debug(\"Ignoring: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // prefixes: always directories\n      for (String prefix : objects.getCommonPrefixes()) {\n        Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n        if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n          FileStatus status \u003d new S3AFileStatus(Tristate.FALSE, keyPath,\n              owner.getUsername());\n          LOG.debug(\"Adding directory: {}\", status);\n          added++;\n          stats.add(status);\n        } else {\n          LOG.debug(\"Ignoring directory: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // finish up\n      batchSize \u003d stats.size();\n      statusBatchIterator \u003d stats.listIterator();\n      boolean hasNext \u003d statusBatchIterator.hasNext();\n      LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n          added, ignored, hasNext, objects.isTruncated());\n      return hasNext;\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java",
      "extendedDetails": {}
    },
    "3372e940303149d6258e0b72c54d72f080f0daa2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12774. s3a should use UGI.getCurrentUser.getShortname() for username. Contributed by Steve Loughran.\n",
      "commitDate": "24/10/16 9:54 PM",
      "commitName": "3372e940303149d6258e0b72c54d72f080f0daa2",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "17/08/16 2:54 PM",
      "commitNameOld": "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 68.29,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n     private boolean buildNextStatusBatch(ObjectListing objects) {\n       // counters for debug logs\n       int added \u003d 0, ignored \u003d 0;\n       // list to fill in with results. Initial size will be list maximum.\n       List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n           objects.getObjectSummaries().size() +\n               objects.getCommonPrefixes().size());\n       // objects\n       for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n         String key \u003d summary.getKey();\n         Path keyPath \u003d owner.keyToQualifiedPath(key);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n         }\n         // Skip over keys that are ourselves and old S3N _$folder$ files\n         if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n           FileStatus status \u003d createFileStatus(keyPath, summary,\n-              owner.getDefaultBlockSize(keyPath));\n+              owner.getDefaultBlockSize(keyPath), owner.getUsername());\n           LOG.debug(\"Adding: {}\", status);\n           stats.add(status);\n           added++;\n         } else {\n           LOG.debug(\"Ignoring: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // prefixes: always directories\n       for (String prefix : objects.getCommonPrefixes()) {\n         Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n         if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n-          FileStatus status \u003d new S3AFileStatus(true, false, keyPath);\n+          FileStatus status \u003d new S3AFileStatus(false, keyPath,\n+              owner.getUsername());\n           LOG.debug(\"Adding directory: {}\", status);\n           added++;\n           stats.add(status);\n         } else {\n           LOG.debug(\"Ignoring directory: {}\", keyPath);\n           ignored++;\n         }\n       }\n \n       // finish up\n       batchSize \u003d stats.size();\n       statusBatchIterator \u003d stats.listIterator();\n       boolean hasNext \u003d statusBatchIterator.hasNext();\n       LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n           added, ignored, hasNext, objects.isTruncated());\n       return hasNext;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean buildNextStatusBatch(ObjectListing objects) {\n      // counters for debug logs\n      int added \u003d 0, ignored \u003d 0;\n      // list to fill in with results. Initial size will be list maximum.\n      List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n          objects.getObjectSummaries().size() +\n              objects.getCommonPrefixes().size());\n      // objects\n      for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n        String key \u003d summary.getKey();\n        Path keyPath \u003d owner.keyToQualifiedPath(key);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n        }\n        // Skip over keys that are ourselves and old S3N _$folder$ files\n        if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n          FileStatus status \u003d createFileStatus(keyPath, summary,\n              owner.getDefaultBlockSize(keyPath), owner.getUsername());\n          LOG.debug(\"Adding: {}\", status);\n          stats.add(status);\n          added++;\n        } else {\n          LOG.debug(\"Ignoring: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // prefixes: always directories\n      for (String prefix : objects.getCommonPrefixes()) {\n        Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n        if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n          FileStatus status \u003d new S3AFileStatus(false, keyPath,\n              owner.getUsername());\n          LOG.debug(\"Adding directory: {}\", status);\n          added++;\n          stats.add(status);\n        } else {\n          LOG.debug(\"Ignoring directory: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // finish up\n      batchSize \u003d stats.size();\n      statusBatchIterator \u003d stats.listIterator();\n      boolean hasNext \u003d statusBatchIterator.hasNext();\n      LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n          added, ignored, hasNext, objects.isTruncated());\n      return hasNext;\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java",
      "extendedDetails": {}
    },
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13208. S3A listFiles(recursive\u003dtrue) to do a bulk listObjects instead of walking the pseudo-tree of directories. Contributed by Steve Loughran.\n",
      "commitDate": "17/08/16 2:54 PM",
      "commitName": "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,49 @@\n+    private boolean buildNextStatusBatch(ObjectListing objects) {\n+      // counters for debug logs\n+      int added \u003d 0, ignored \u003d 0;\n+      // list to fill in with results. Initial size will be list maximum.\n+      List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n+          objects.getObjectSummaries().size() +\n+              objects.getCommonPrefixes().size());\n+      // objects\n+      for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n+        String key \u003d summary.getKey();\n+        Path keyPath \u003d owner.keyToQualifiedPath(key);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n+        }\n+        // Skip over keys that are ourselves and old S3N _$folder$ files\n+        if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n+          FileStatus status \u003d createFileStatus(keyPath, summary,\n+              owner.getDefaultBlockSize(keyPath));\n+          LOG.debug(\"Adding: {}\", status);\n+          stats.add(status);\n+          added++;\n+        } else {\n+          LOG.debug(\"Ignoring: {}\", keyPath);\n+          ignored++;\n+        }\n+      }\n+\n+      // prefixes: always directories\n+      for (String prefix : objects.getCommonPrefixes()) {\n+        Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n+        if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n+          FileStatus status \u003d new S3AFileStatus(true, false, keyPath);\n+          LOG.debug(\"Adding directory: {}\", status);\n+          added++;\n+          stats.add(status);\n+        } else {\n+          LOG.debug(\"Ignoring directory: {}\", keyPath);\n+          ignored++;\n+        }\n+      }\n+\n+      // finish up\n+      batchSize \u003d stats.size();\n+      statusBatchIterator \u003d stats.listIterator();\n+      boolean hasNext \u003d statusBatchIterator.hasNext();\n+      LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n+          added, ignored, hasNext, objects.isTruncated());\n+      return hasNext;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean buildNextStatusBatch(ObjectListing objects) {\n      // counters for debug logs\n      int added \u003d 0, ignored \u003d 0;\n      // list to fill in with results. Initial size will be list maximum.\n      List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n          objects.getObjectSummaries().size() +\n              objects.getCommonPrefixes().size());\n      // objects\n      for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n        String key \u003d summary.getKey();\n        Path keyPath \u003d owner.keyToQualifiedPath(key);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"{}: {}\", keyPath, stringify(summary));\n        }\n        // Skip over keys that are ourselves and old S3N _$folder$ files\n        if (acceptor.accept(keyPath, summary) \u0026\u0026 filter.accept(keyPath)) {\n          FileStatus status \u003d createFileStatus(keyPath, summary,\n              owner.getDefaultBlockSize(keyPath));\n          LOG.debug(\"Adding: {}\", status);\n          stats.add(status);\n          added++;\n        } else {\n          LOG.debug(\"Ignoring: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // prefixes: always directories\n      for (String prefix : objects.getCommonPrefixes()) {\n        Path keyPath \u003d owner.keyToQualifiedPath(prefix);\n        if (acceptor.accept(keyPath, prefix) \u0026\u0026 filter.accept(keyPath)) {\n          FileStatus status \u003d new S3AFileStatus(true, false, keyPath);\n          LOG.debug(\"Adding directory: {}\", status);\n          added++;\n          stats.add(status);\n        } else {\n          LOG.debug(\"Ignoring directory: {}\", keyPath);\n          ignored++;\n        }\n      }\n\n      // finish up\n      batchSize \u003d stats.size();\n      statusBatchIterator \u003d stats.listIterator();\n      boolean hasNext \u003d statusBatchIterator.hasNext();\n      LOG.debug(\"Added {} entries; ignored {}; hasNext\u003d{}; hasMoreObjects\u003d{}\",\n          added, ignored, hasNext, objects.isTruncated());\n      return hasNext;\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Listing.java"
    }
  }
}