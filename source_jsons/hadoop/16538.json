{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterSnapshot.java",
  "functionName": "createSnapshot",
  "functionId": "createSnapshot___snapshotRoot-String__snapshotName-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterSnapshot.java",
  "functionStartLine": 85,
  "functionEndLine": 111,
  "numCommitsSeen": 1,
  "timeTaken": 812,
  "changeHistory": [
    "b6fff8c81e3d2245c93aa2369b42eedab0252ab9"
  ],
  "changeHistoryShort": {
    "b6fff8c81e3d2245c93aa2369b42eedab0252ab9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6fff8c81e3d2245c93aa2369b42eedab0252ab9": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13787. RBF: Add Snapshot related ClientProtocol APIs. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "b6fff8c81e3d2245c93aa2369b42eedab0252ab9",
      "commitAuthor": "Ayush Saxena",
      "diff": "@@ -0,0 +1,27 @@\n+  public String createSnapshot(String snapshotRoot, String snapshotName)\n+      throws IOException {\n+    rpcServer.checkOperation(OperationCategory.WRITE);\n+\n+    final List\u003cRemoteLocation\u003e locations \u003d\n+        rpcServer.getLocationsForPath(snapshotRoot, true, false);\n+    RemoteMethod method \u003d new RemoteMethod(\"createSnapshot\",\n+        new Class\u003c?\u003e[] {String.class, String.class}, new RemoteParam(),\n+        snapshotName);\n+\n+    String result \u003d null;\n+    if (rpcServer.isInvokeConcurrent(snapshotRoot)) {\n+      Map\u003cRemoteLocation, String\u003e results \u003d rpcClient.invokeConcurrent(\n+          locations, method, String.class);\n+      Entry\u003cRemoteLocation, String\u003e firstelement \u003d\n+          results.entrySet().iterator().next();\n+      RemoteLocation loc \u003d firstelement.getKey();\n+      result \u003d firstelement.getValue();\n+      result \u003d result.replaceFirst(loc.getDest(), loc.getSrc());\n+    } else {\n+      result \u003d rpcClient.invokeSequential(\n+          locations, method, String.class, null);\n+      RemoteLocation loc \u003d locations.get(0);\n+      result \u003d result.replaceFirst(loc.getDest(), loc.getSrc());\n+    }\n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String createSnapshot(String snapshotRoot, String snapshotName)\n      throws IOException {\n    rpcServer.checkOperation(OperationCategory.WRITE);\n\n    final List\u003cRemoteLocation\u003e locations \u003d\n        rpcServer.getLocationsForPath(snapshotRoot, true, false);\n    RemoteMethod method \u003d new RemoteMethod(\"createSnapshot\",\n        new Class\u003c?\u003e[] {String.class, String.class}, new RemoteParam(),\n        snapshotName);\n\n    String result \u003d null;\n    if (rpcServer.isInvokeConcurrent(snapshotRoot)) {\n      Map\u003cRemoteLocation, String\u003e results \u003d rpcClient.invokeConcurrent(\n          locations, method, String.class);\n      Entry\u003cRemoteLocation, String\u003e firstelement \u003d\n          results.entrySet().iterator().next();\n      RemoteLocation loc \u003d firstelement.getKey();\n      result \u003d firstelement.getValue();\n      result \u003d result.replaceFirst(loc.getDest(), loc.getSrc());\n    } else {\n      result \u003d rpcClient.invokeSequential(\n          locations, method, String.class, null);\n      RemoteLocation loc \u003d locations.get(0);\n      result \u003d result.replaceFirst(loc.getDest(), loc.getSrc());\n    }\n    return result;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterSnapshot.java"
    }
  }
}