{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "createLocatedBlock",
  "functionId": "createLocatedBlock___locatedBlocks-LocatedBlockBuilder__blk-BlockInfo(modifiers-final)__pos-long(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 1385,
  "functionEndLine": 1469,
  "numCommitsSeen": 1308,
  "timeTaken": 30640,
  "changeHistory": [
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
    "a7f085d6bf499edf23e650a4f7211c53a442da0e",
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
    "886776225611ca3cfff32dd94ea24fe618f14464",
    "b10c936020e2616609dcb3b2126e8c34328c10ca",
    "57369a678c4c51627fe9a654e697a906a6bef123",
    "6243eabb48390fffada2418ade5adf9e0766afbe",
    "972782d9568e0849484c027f27c1638ba50ec56e",
    "3a9571308e99cc374681bbc451a517d41a150aa0",
    "8a91109d16394310f2568717f103e6fff7cbddb0",
    "70d6f201260086a3f12beaa317fede2a99639fef",
    "164cbe643988f878f0f4100a4de51783e5b6738e",
    "e535e0f05b5fbd087c93238deb888cc985254b4c",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
    "4fdd9abd7e43a0fb7b569982954a8f9660b9268b",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557",
    "4928f5473394981829e5ffd4b16ea0801baf5c45",
    "922631f04f4bc79f4ceb17958030f80beb4f0576",
    "f05c21285ef23b6a973d69f045b1cb46c5abc039",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b",
    "279958b772c25e0633bd967828b7d27d5c0a6a56",
    "5c97db07fb306842f49d73a67a90cecec19a7833",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "f36f0dde8866e2233dad26b38a8d432d2302a51a",
    "abf09f090f77a7e54e331b7a07354e7926b60dc9",
    "3f070e83b1f4e0211ece8c0ab508a61188ad352a",
    "71071b904d0c9aec7b3713d41740f24182e81c36",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "371f4a59059322000a40eb4bdf5386b96b626ece",
    "7fac946ac983e31613fd62836c8ac9c4a579210a",
    "0b12cc822ddd57e6ecf4f7047f6614419c34580b",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7": "Ybodychange",
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": "Ymultichange(Yparameterchange,Ybodychange)",
    "a7f085d6bf499edf23e650a4f7211c53a442da0e": "Ybodychange",
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": "Ybodychange",
    "886776225611ca3cfff32dd94ea24fe618f14464": "Ybodychange",
    "b10c936020e2616609dcb3b2126e8c34328c10ca": "Ybodychange",
    "57369a678c4c51627fe9a654e697a906a6bef123": "Ybodychange",
    "6243eabb48390fffada2418ade5adf9e0766afbe": "Ybodychange",
    "972782d9568e0849484c027f27c1638ba50ec56e": "Ybodychange",
    "3a9571308e99cc374681bbc451a517d41a150aa0": "Ybodychange",
    "8a91109d16394310f2568717f103e6fff7cbddb0": "Ybodychange",
    "70d6f201260086a3f12beaa317fede2a99639fef": "Ybodychange",
    "164cbe643988f878f0f4100a4de51783e5b6738e": "Ybodychange",
    "e535e0f05b5fbd087c93238deb888cc985254b4c": "Ybodychange",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": "Ybodychange",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": "Ybodychange",
    "4fdd9abd7e43a0fb7b569982954a8f9660b9268b": "Ybodychange",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": "Ybodychange",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": "Ybodychange",
    "4928f5473394981829e5ffd4b16ea0801baf5c45": "Yparameterchange",
    "922631f04f4bc79f4ceb17958030f80beb4f0576": "Ybodychange",
    "f05c21285ef23b6a973d69f045b1cb46c5abc039": "Ymultichange(Yexceptionschange,Ybodychange)",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": "Ymultichange(Yparameterchange,Ybodychange)",
    "279958b772c25e0633bd967828b7d27d5c0a6a56": "Ybodychange",
    "5c97db07fb306842f49d73a67a90cecec19a7833": "Ybodychange",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Ymultichange(Yparameterchange,Ybodychange)",
    "f36f0dde8866e2233dad26b38a8d432d2302a51a": "Ybodychange",
    "abf09f090f77a7e54e331b7a07354e7926b60dc9": "Ybodychange",
    "3f070e83b1f4e0211ece8c0ab508a61188ad352a": "Ybodychange",
    "71071b904d0c9aec7b3713d41740f24182e81c36": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "371f4a59059322000a40eb4bdf5386b96b626ece": "Ymultichange(Yrename,Ymodifierchange)",
    "7fac946ac983e31613fd62836c8ac9c4a579210a": "Ybodychange",
    "0b12cc822ddd57e6ecf4f7047f6614419c34580b": "Ybodychange",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange)",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange)",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12712. [9806] Code style cleanup\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "c89b29bd421152f0e7e16936f18d9e852895c37a",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,85 @@\n   private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n       final BlockInfo blk, final long pos) throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n-        //TODO use locatedBlocks builder??\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return null \u003d\u003d locatedBlocks\n             ? newLocatedBlock(eb, storages, pos, false)\n                 : locatedBlocks.newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     NumberReplicas numReplicas \u003d countNodes(blk);\n     final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for {}\"\n           + \" blockMap has {} but corrupt replicas map has {}\",\n           blk, numCorruptNodes, numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt;\n     if (blk.isStriped()) {\n       BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n           numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n     } else {\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n     }\n     int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n     numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n     DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         if (storage.getState() !\u003d State.FAILED) {\n           final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n           // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n           if (d.isInMaintenance()\n               || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n             continue;\n           }\n \n           if (noCorrupt) {\n             machines[j++] \u003d storage;\n             i \u003d setBlockIndices(blk, blockIndices, i, storage);\n           } else {\n             final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n             if (isCorrupt || !replicaCorrupt) {\n               machines[j++] \u003d storage;\n               i \u003d setBlockIndices(blk, blockIndices, i, storage);\n             }\n           }\n         }\n       }\n     }\n \n     if(j \u003c machines.length) {\n       machines \u003d Arrays.copyOf(machines, j);\n     }\n \n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt +\n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null\n         ? null \u003d\u003d locatedBlocks ? newLocatedBlock(eb, machines, pos, isCorrupt)\n             : locatedBlocks.newLocatedBlock(eb, machines, pos, isCorrupt)\n         : newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n      final BlockInfo blk, final long pos) throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return null \u003d\u003d locatedBlocks\n            ? newLocatedBlock(eb, storages, pos, false)\n                : locatedBlocks.newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    NumberReplicas numReplicas \u003d countNodes(blk);\n    final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for {}\"\n          + \" blockMap has {} but corrupt replicas map has {}\",\n          blk, numCorruptNodes, numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt;\n    if (blk.isStriped()) {\n      BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n          numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n    } else {\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n    }\n    int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        if (storage.getState() !\u003d State.FAILED) {\n          final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n          // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n          if (d.isInMaintenance()\n              || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n            continue;\n          }\n\n          if (noCorrupt) {\n            machines[j++] \u003d storage;\n            i \u003d setBlockIndices(blk, blockIndices, i, storage);\n          } else {\n            final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n            if (isCorrupt || !replicaCorrupt) {\n              machines[j++] \u003d storage;\n              i \u003d setBlockIndices(blk, blockIndices, i, storage);\n            }\n          }\n        }\n      }\n    }\n\n    if(j \u003c machines.length) {\n      machines \u003d Arrays.copyOf(machines, j);\n    }\n\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt +\n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null\n        ? null \u003d\u003d locatedBlocks ? newLocatedBlock(eb, machines, pos, isCorrupt)\n            : locatedBlocks.newLocatedBlock(eb, machines, pos, isCorrupt)\n        : newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
      "commitAuthor": "Virajith Jalaparti",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "05/12/17 8:48 PM",
          "commitNameOld": "56b1ff80dd9fbcde8d21a604eff0babb3a16418f",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 9.88,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,82 +1,86 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n-      throws IOException {\n+  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n+      final BlockInfo blk, final long pos) throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n+        //TODO use locatedBlocks builder??\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n-        return newLocatedBlock(eb, storages, pos, false);\n+        return null \u003d\u003d locatedBlocks\n+            ? newLocatedBlock(eb, storages, pos, false)\n+                : locatedBlocks.newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     NumberReplicas numReplicas \u003d countNodes(blk);\n     final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for {}\"\n           + \" blockMap has {} but corrupt replicas map has {}\",\n           blk, numCorruptNodes, numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt;\n     if (blk.isStriped()) {\n       BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n           numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n     } else {\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n     }\n     int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n     numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n     DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         if (storage.getState() !\u003d State.FAILED) {\n           final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n           // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n           if (d.isInMaintenance()\n               || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n             continue;\n           }\n \n           if (noCorrupt) {\n             machines[j++] \u003d storage;\n             i \u003d setBlockIndices(blk, blockIndices, i, storage);\n           } else {\n             final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n             if (isCorrupt || !replicaCorrupt) {\n               machines[j++] \u003d storage;\n               i \u003d setBlockIndices(blk, blockIndices, i, storage);\n             }\n           }\n         }\n       }\n     }\n \n     if(j \u003c machines.length) {\n       machines \u003d Arrays.copyOf(machines, j);\n     }\n \n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt +\n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n-    return blockIndices \u003d\u003d null ?\n-        newLocatedBlock(eb, machines, pos, isCorrupt) :\n-        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n+    return blockIndices \u003d\u003d null\n+        ? null \u003d\u003d locatedBlocks ? newLocatedBlock(eb, machines, pos, isCorrupt)\n+            : locatedBlocks.newLocatedBlock(eb, machines, pos, isCorrupt)\n+        : newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n      final BlockInfo blk, final long pos) throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        //TODO use locatedBlocks builder??\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return null \u003d\u003d locatedBlocks\n            ? newLocatedBlock(eb, storages, pos, false)\n                : locatedBlocks.newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    NumberReplicas numReplicas \u003d countNodes(blk);\n    final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for {}\"\n          + \" blockMap has {} but corrupt replicas map has {}\",\n          blk, numCorruptNodes, numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt;\n    if (blk.isStriped()) {\n      BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n          numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n    } else {\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n    }\n    int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        if (storage.getState() !\u003d State.FAILED) {\n          final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n          // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n          if (d.isInMaintenance()\n              || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n            continue;\n          }\n\n          if (noCorrupt) {\n            machines[j++] \u003d storage;\n            i \u003d setBlockIndices(blk, blockIndices, i, storage);\n          } else {\n            final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n            if (isCorrupt || !replicaCorrupt) {\n              machines[j++] \u003d storage;\n              i \u003d setBlockIndices(blk, blockIndices, i, storage);\n            }\n          }\n        }\n      }\n    }\n\n    if(j \u003c machines.length) {\n      machines \u003d Arrays.copyOf(machines, j);\n    }\n\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt +\n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null\n        ? null \u003d\u003d locatedBlocks ? newLocatedBlock(eb, machines, pos, isCorrupt)\n            : locatedBlocks.newLocatedBlock(eb, machines, pos, isCorrupt)\n        : newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[blk-BlockInfo(modifiers-final), pos-long(modifiers-final)]",
            "newValue": "[locatedBlocks-LocatedBlockBuilder, blk-BlockInfo(modifiers-final), pos-long(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "05/12/17 8:48 PM",
          "commitNameOld": "56b1ff80dd9fbcde8d21a604eff0babb3a16418f",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 9.88,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,82 +1,86 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n-      throws IOException {\n+  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n+      final BlockInfo blk, final long pos) throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n+        //TODO use locatedBlocks builder??\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n-        return newLocatedBlock(eb, storages, pos, false);\n+        return null \u003d\u003d locatedBlocks\n+            ? newLocatedBlock(eb, storages, pos, false)\n+                : locatedBlocks.newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     NumberReplicas numReplicas \u003d countNodes(blk);\n     final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for {}\"\n           + \" blockMap has {} but corrupt replicas map has {}\",\n           blk, numCorruptNodes, numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt;\n     if (blk.isStriped()) {\n       BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n           numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n     } else {\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n     }\n     int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n     numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n     DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         if (storage.getState() !\u003d State.FAILED) {\n           final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n           // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n           if (d.isInMaintenance()\n               || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n             continue;\n           }\n \n           if (noCorrupt) {\n             machines[j++] \u003d storage;\n             i \u003d setBlockIndices(blk, blockIndices, i, storage);\n           } else {\n             final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n             if (isCorrupt || !replicaCorrupt) {\n               machines[j++] \u003d storage;\n               i \u003d setBlockIndices(blk, blockIndices, i, storage);\n             }\n           }\n         }\n       }\n     }\n \n     if(j \u003c machines.length) {\n       machines \u003d Arrays.copyOf(machines, j);\n     }\n \n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt +\n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n-    return blockIndices \u003d\u003d null ?\n-        newLocatedBlock(eb, machines, pos, isCorrupt) :\n-        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n+    return blockIndices \u003d\u003d null\n+        ? null \u003d\u003d locatedBlocks ? newLocatedBlock(eb, machines, pos, isCorrupt)\n+            : locatedBlocks.newLocatedBlock(eb, machines, pos, isCorrupt)\n+        : newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n      final BlockInfo blk, final long pos) throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        //TODO use locatedBlocks builder??\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return null \u003d\u003d locatedBlocks\n            ? newLocatedBlock(eb, storages, pos, false)\n                : locatedBlocks.newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    NumberReplicas numReplicas \u003d countNodes(blk);\n    final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for {}\"\n          + \" blockMap has {} but corrupt replicas map has {}\",\n          blk, numCorruptNodes, numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt;\n    if (blk.isStriped()) {\n      BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n          numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n    } else {\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n    }\n    int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        if (storage.getState() !\u003d State.FAILED) {\n          final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n          // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n          if (d.isInMaintenance()\n              || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n            continue;\n          }\n\n          if (noCorrupt) {\n            machines[j++] \u003d storage;\n            i \u003d setBlockIndices(blk, blockIndices, i, storage);\n          } else {\n            final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n            if (isCorrupt || !replicaCorrupt) {\n              machines[j++] \u003d storage;\n              i \u003d setBlockIndices(blk, blockIndices, i, storage);\n            }\n          }\n        }\n      }\n    }\n\n    if(j \u003c machines.length) {\n      machines \u003d Arrays.copyOf(machines, j);\n    }\n\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt +\n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null\n        ? null \u003d\u003d locatedBlocks ? newLocatedBlock(eb, machines, pos, isCorrupt)\n            : locatedBlocks.newLocatedBlock(eb, machines, pos, isCorrupt)\n        : newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a7f085d6bf499edf23e650a4f7211c53a442da0e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11832. Switch leftover logs to slf4j format in BlockManager.java. Contributed by Hui Xu and Chen Liang.\n",
      "commitDate": "29/05/17 1:30 AM",
      "commitName": "a7f085d6bf499edf23e650a4f7211c53a442da0e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/05/17 7:35 AM",
      "commitNameOld": "2e41f8803dd46d1bab16c1b206c71be72ea260a1",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 3.75,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,82 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     NumberReplicas numReplicas \u003d countNodes(blk);\n     final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n-      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n-          + blk + \" blockMap has \" + numCorruptNodes\n-          + \" but corrupt replicas map has \" + numCorruptReplicas);\n+      LOG.warn(\"Inconsistent number of corrupt replicas for {}\"\n+          + \" blockMap has {} but corrupt replicas map has {}\",\n+          blk, numCorruptNodes, numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt;\n     if (blk.isStriped()) {\n       BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n           numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n     } else {\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n     }\n     int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n     numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n     DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         if (storage.getState() !\u003d State.FAILED) {\n           final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n           // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n           if (d.isInMaintenance()\n               || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n             continue;\n           }\n \n           if (noCorrupt) {\n             machines[j++] \u003d storage;\n             i \u003d setBlockIndices(blk, blockIndices, i, storage);\n           } else {\n             final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n             if (isCorrupt || !replicaCorrupt) {\n               machines[j++] \u003d storage;\n               i \u003d setBlockIndices(blk, blockIndices, i, storage);\n             }\n           }\n         }\n       }\n     }\n \n     if(j \u003c machines.length) {\n       machines \u003d Arrays.copyOf(machines, j);\n     }\n \n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt +\n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    NumberReplicas numReplicas \u003d countNodes(blk);\n    final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for {}\"\n          + \" blockMap has {} but corrupt replicas map has {}\",\n          blk, numCorruptNodes, numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt;\n    if (blk.isStriped()) {\n      BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n          numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n    } else {\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n    }\n    int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        if (storage.getState() !\u003d State.FAILED) {\n          final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n          // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n          if (d.isInMaintenance()\n              || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n            continue;\n          }\n\n          if (noCorrupt) {\n            machines[j++] \u003d storage;\n            i \u003d setBlockIndices(blk, blockIndices, i, storage);\n          } else {\n            final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n            if (isCorrupt || !replicaCorrupt) {\n              machines[j++] \u003d storage;\n              i \u003d setBlockIndices(blk, blockIndices, i, storage);\n            }\n          }\n        }\n      }\n    }\n\n    if(j \u003c machines.length) {\n      machines \u003d Arrays.copyOf(machines, j);\n    }\n\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt +\n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
      "commitDate": "17/10/16 5:45 PM",
      "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "14/10/16 6:13 PM",
      "commitNameOld": "391ce535a739dc92cb90017d759217265a4fd969",
      "commitAuthorOld": "Vinitha Reddy Gankidi",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,82 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     NumberReplicas numReplicas \u003d countNodes(blk);\n     final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt;\n     if (blk.isStriped()) {\n       BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n           numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n     } else {\n       isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n     }\n-    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n+    int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n+    numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n     DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         if (storage.getState() !\u003d State.FAILED) {\n+          final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n+          // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n+          if (d.isInMaintenance()\n+              || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n+            continue;\n+          }\n+\n           if (noCorrupt) {\n             machines[j++] \u003d storage;\n             i \u003d setBlockIndices(blk, blockIndices, i, storage);\n           } else {\n-            final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n             final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n             if (isCorrupt || !replicaCorrupt) {\n               machines[j++] \u003d storage;\n               i \u003d setBlockIndices(blk, blockIndices, i, storage);\n             }\n           }\n         }\n       }\n     }\n \n     if(j \u003c machines.length) {\n       machines \u003d Arrays.copyOf(machines, j);\n     }\n \n     assert j \u003d\u003d machines.length :\n-      \"isCorrupt: \" + isCorrupt + \n+      \"isCorrupt: \" + isCorrupt +\n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    NumberReplicas numReplicas \u003d countNodes(blk);\n    final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt;\n    if (blk.isStriped()) {\n      BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n          numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n    } else {\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n    }\n    int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    numMachines -\u003d numReplicas.maintenanceNotForReadReplicas();\n    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        if (storage.getState() !\u003d State.FAILED) {\n          final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n          // Don\u0027t pick IN_MAINTENANCE or dead ENTERING_MAINTENANCE states.\n          if (d.isInMaintenance()\n              || (d.isEnteringMaintenance() \u0026\u0026 !d.isAlive())) {\n            continue;\n          }\n\n          if (noCorrupt) {\n            machines[j++] \u003d storage;\n            i \u003d setBlockIndices(blk, blockIndices, i, storage);\n          } else {\n            final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n            if (isCorrupt || !replicaCorrupt) {\n              machines[j++] \u003d storage;\n              i \u003d setBlockIndices(blk, blockIndices, i, storage);\n            }\n          }\n        }\n      }\n    }\n\n    if(j \u003c machines.length) {\n      machines \u003d Arrays.copyOf(machines, j);\n    }\n\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt +\n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "886776225611ca3cfff32dd94ea24fe618f14464": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10826. Correctly report missing EC blocks in FSCK. Contributed by Takanobu Asanuma.\n",
      "commitDate": "05/10/16 10:52 AM",
      "commitName": "886776225611ca3cfff32dd94ea24fe618f14464",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "03/10/16 6:50 PM",
      "commitNameOld": "8078a5efd0fe26b82c3768e06ccd2faddc619a7f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 1.67,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,75 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n-    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n+    NumberReplicas numReplicas \u003d countNodes(blk);\n+    final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n-    final boolean isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n-        numCorruptReplicas \u003d\u003d numNodes;\n+    final boolean isCorrupt;\n+    if (blk.isStriped()) {\n+      BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n+      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n+          numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n+    } else {\n+      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n+    }\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n     DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         if (storage.getState() !\u003d State.FAILED) {\n           if (noCorrupt) {\n             machines[j++] \u003d storage;\n             i \u003d setBlockIndices(blk, blockIndices, i, storage);\n           } else {\n             final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n             final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n             if (isCorrupt || !replicaCorrupt) {\n               machines[j++] \u003d storage;\n               i \u003d setBlockIndices(blk, blockIndices, i, storage);\n             }\n           }\n         }\n       }\n     }\n \n     if(j \u003c machines.length) {\n       machines \u003d Arrays.copyOf(machines, j);\n     }\n \n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    NumberReplicas numReplicas \u003d countNodes(blk);\n    final int numCorruptNodes \u003d numReplicas.corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt;\n    if (blk.isStriped()) {\n      BlockInfoStriped sblk \u003d (BlockInfoStriped) blk;\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n          numReplicas.liveReplicas() \u003c sblk.getRealDataBlockNum();\n    } else {\n      isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026 numCorruptReplicas \u003d\u003d numNodes;\n    }\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        if (storage.getState() !\u003d State.FAILED) {\n          if (noCorrupt) {\n            machines[j++] \u003d storage;\n            i \u003d setBlockIndices(blk, blockIndices, i, storage);\n          } else {\n            final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n            final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n            if (isCorrupt || !replicaCorrupt) {\n              machines[j++] \u003d storage;\n              i \u003d setBlockIndices(blk, blockIndices, i, storage);\n            }\n          }\n        }\n      }\n    }\n\n    if(j \u003c machines.length) {\n      machines \u003d Arrays.copyOf(machines, j);\n    }\n\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "b10c936020e2616609dcb3b2126e8c34328c10ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10342. BlockManager#createLocatedBlocks should not check corrupt replicas if none are corrupt. Contributed by Kuhu Shukla.\n",
      "commitDate": "09/08/16 9:56 AM",
      "commitName": "b10c936020e2616609dcb3b2126e8c34328c10ca",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "04/08/16 12:55 PM",
      "commitNameOld": "57369a678c4c51627fe9a654e697a906a6bef123",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 4.88,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,68 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n         numCorruptReplicas \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n     DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n+      final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n-        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n-        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n-        if ((isCorrupt || (!replicaCorrupt)) \u0026\u0026\n-            storage.getState() !\u003d State.FAILED) {\n-          machines[j++] \u003d storage;\n-          // TODO this can be more efficient\n-          if (blockIndices !\u003d null) {\n-            byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n-            assert index \u003e\u003d 0;\n-            blockIndices[i++] \u003d index;\n+        if (storage.getState() !\u003d State.FAILED) {\n+          if (noCorrupt) {\n+            machines[j++] \u003d storage;\n+            i \u003d setBlockIndices(blk, blockIndices, i, storage);\n+          } else {\n+            final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n+            final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n+            if (isCorrupt || !replicaCorrupt) {\n+              machines[j++] \u003d storage;\n+              i \u003d setBlockIndices(blk, blockIndices, i, storage);\n+            }\n           }\n         }\n       }\n     }\n \n     if(j \u003c machines.length) {\n       machines \u003d Arrays.copyOf(machines, j);\n     }\n \n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n        numCorruptReplicas \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      final boolean noCorrupt \u003d (numCorruptReplicas \u003d\u003d 0);\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        if (storage.getState() !\u003d State.FAILED) {\n          if (noCorrupt) {\n            machines[j++] \u003d storage;\n            i \u003d setBlockIndices(blk, blockIndices, i, storage);\n          } else {\n            final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n            final boolean replicaCorrupt \u003d isReplicaCorrupt(blk, d);\n            if (isCorrupt || !replicaCorrupt) {\n              machines[j++] \u003d storage;\n              i \u003d setBlockIndices(blk, blockIndices, i, storage);\n            }\n          }\n        }\n      }\n    }\n\n    if(j \u003c machines.length) {\n      machines \u003d Arrays.copyOf(machines, j);\n    }\n\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "57369a678c4c51627fe9a654e697a906a6bef123": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10343. BlockManager#createLocatedBlocks may return blocks on failed storages. Contributed by Kuhu Shukla.\n",
      "commitDate": "04/08/16 12:55 PM",
      "commitName": "57369a678c4c51627fe9a654e697a906a6bef123",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/08/16 12:42 PM",
      "commitNameOld": "f4ba5ff1d70ef92d59851c09c4bd4b43d6c04971",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,66 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n         numCorruptReplicas \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n-    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n+    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n-        if (isCorrupt || (!replicaCorrupt)) {\n+        if ((isCorrupt || (!replicaCorrupt)) \u0026\u0026\n+            storage.getState() !\u003d State.FAILED) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n             byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n+\n+    if(j \u003c machines.length) {\n+      machines \u003d Arrays.copyOf(machines, j);\n+    }\n+\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n        numCorruptReplicas \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if ((isCorrupt || (!replicaCorrupt)) \u0026\u0026\n            storage.getState() !\u003d State.FAILED) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n\n    if(j \u003c machines.length) {\n      machines \u003d Arrays.copyOf(machines, j);\n    }\n\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "6243eabb48390fffada2418ade5adf9e0766afbe": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9958. BlockManager#createLocatedBlocks can throw NPE for corruptBlocks on failed storages. Contributed by Kuhu Shukla\n",
      "commitDate": "28/04/16 10:44 AM",
      "commitName": "6243eabb48390fffada2418ade5adf9e0766afbe",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/04/16 2:22 PM",
      "commitNameOld": "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n-    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n-        numCorruptNodes \u003d\u003d numNodes;\n-    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n+    final boolean isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n+        numCorruptReplicas \u003d\u003d numNodes;\n+    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n             byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptReplicas !\u003d 0 \u0026\u0026\n        numCorruptReplicas \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptReplicas;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "972782d9568e0849484c027f27c1638ba50ec56e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9754. Avoid unnecessary getBlockCollection calls in BlockManager. Contributed by Jing Zhao.\n",
      "commitDate": "12/02/16 11:07 AM",
      "commitName": "972782d9568e0849484c027f27c1638ba50ec56e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "10/02/16 9:24 PM",
      "commitNameOld": "19adb2bc641999b83e25ff0e107ba8c6edbad399",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.57,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n+        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n+        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n             byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n-    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n+    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "3a9571308e99cc374681bbc451a517d41a150aa0": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9677. Rename generationStampV1/generationStampV2 to legacyGenerationStamp/generationStamp. Contributed by Mingliang Liu.\"\n\nThis reverts commit 8a91109d16394310f2568717f103e6fff7cbddb0.\n",
      "commitDate": "27/01/16 4:31 PM",
      "commitName": "3a9571308e99cc374681bbc451a517d41a150aa0",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/01/16 3:48 PM",
      "commitNameOld": "8a91109d16394310f2568717f103e6fff7cbddb0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n+        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n+        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n             byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n-    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n+    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "8a91109d16394310f2568717f103e6fff7cbddb0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9677. Rename generationStampV1/generationStampV2 to legacyGenerationStamp/generationStamp. Contributed by Mingliang Liu.\n",
      "commitDate": "27/01/16 3:48 PM",
      "commitName": "8a91109d16394310f2568717f103e6fff7cbddb0",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "25/01/16 6:32 PM",
      "commitNameOld": "bd909ed9f2d853f614f04a50e2230a7932732776",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n+        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n+        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n             byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n-    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n+    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "70d6f201260086a3f12beaa317fede2a99639fef": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9575. Use byte array for internal block indices in a striped block.  Contributed by jing9\n",
      "commitDate": "21/12/15 10:47 PM",
      "commitName": "70d6f201260086a3f12beaa317fede2a99639fef",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "16/12/15 6:16 PM",
      "commitNameOld": "f741476146574550a1a208d58ef8be76639e5ddc",
      "commitAuthorOld": "Uma Mahesh",
      "daysBetweenCommits": 5.19,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n       final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n-    final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n+    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n-            int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n+            byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final byte[] blockIndices \u003d blk.isStriped() ? new byte[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            byte index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "164cbe643988f878f0f4100a4de51783e5b6738e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
      "commitDate": "27/08/15 1:02 AM",
      "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
      "commitAuthor": "Walter Su",
      "commitDateOld": "24/08/15 12:59 PM",
      "commitNameOld": "6b6a63bbbda920315d3d24b61ed3344a78a981b6",
      "commitAuthorOld": "",
      "daysBetweenCommits": 2.5,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,60 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n       throws IOException {\n     if (!blk.isComplete()) {\n+      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n       if (blk.isStriped()) {\n-        final BlockInfoStripedUnderConstruction uc \u003d\n-            (BlockInfoStripedUnderConstruction) blk;\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n-        assert blk instanceof BlockInfoContiguousUnderConstruction;\n-        final BlockInfoContiguousUnderConstruction uc \u003d\n-            (BlockInfoContiguousUnderConstruction) blk;\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n             int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (!blk.isComplete()) {\n      final BlockUnderConstructionFeature uc \u003d blk.getUnderConstructionFeature();\n      if (blk.isStriped()) {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "e535e0f05b5fbd087c93238deb888cc985254b4c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
      "commitDate": "17/08/15 11:28 AM",
      "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 11.05,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,41 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n-      if (blk.isComplete()) {\n-        throw new IOException(\n-            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n-            + \", blk\u003d\" + blk);\n-      }\n-      final BlockInfoContiguousUnderConstruction uc \u003d\n-          (BlockInfoContiguousUnderConstruction) blk;\n-      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n+    if (!blk.isComplete()) {\n+      final DatanodeStorageInfo[] storages \u003d blk.getUnderConstructionFeature()\n+          .getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (!blk.isComplete()) {\n      final DatanodeStorageInfo[] storages \u003d blk.getUnderConstructionFeature()\n          .getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\"\n\nThis reverts commit c17439c2ddd921b63b1635e6f1cba634b8da8557.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (blk instanceof BlockInfoUnderConstruction) {\n+    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n-      final BlockInfoUnderConstruction uc \u003d\n-          (BlockInfoUnderConstruction) blk;\n+      final BlockInfoContiguousUnderConstruction uc \u003d\n+          (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\"\n\nThis reverts commit de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "31/07/15 4:15 PM",
      "commitNameOld": "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,47 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n-      throws IOException {\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n+      ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d\n           (BlockInfoUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-      final ExtendedBlock eb \u003d\n-          new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n+      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n-      for(DatanodeStorageInfo storage : getStorages(blk)) {\n+      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n-        if (isCorrupt || (!replicaCorrupt)) {\n+        if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n-        }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d\n          (BlockInfoUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "4fdd9abd7e43a0fb7b569982954a8f9660b9268b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8787. Erasure coding: rename BlockInfoContiguousUC and BlockInfoStripedUC to be consistent with trunk.\n",
      "commitDate": "15/07/15 8:13 PM",
      "commitName": "4fdd9abd7e43a0fb7b569982954a8f9660b9268b",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "15/07/15 9:49 AM",
      "commitNameOld": "7e091de1366f4b57b5433bc19d738199dc05313d",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.43,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {\n     if (!blk.isComplete()) {\n       if (blk.isStriped()) {\n-        final BlockInfoStripedUnderConstruction uc \u003d\n-            (BlockInfoStripedUnderConstruction) blk;\n+        final BlockInfoUnderConstructionStriped uc \u003d\n+            (BlockInfoUnderConstructionStriped) blk;\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n         return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n-        assert blk instanceof BlockInfoContiguousUnderConstruction;\n-        final BlockInfoContiguousUnderConstruction uc \u003d\n-            (BlockInfoContiguousUnderConstruction) blk;\n+        assert blk instanceof BlockInfoUnderConstructionContiguous;\n+        final BlockInfoUnderConstructionContiguous uc \u003d\n+            (BlockInfoUnderConstructionContiguous) blk;\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n         return newLocatedBlock(eb, storages, pos, false);\n       }\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n             int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n         newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {\n    if (!blk.isComplete()) {\n      if (blk.isStriped()) {\n        final BlockInfoUnderConstructionStriped uc \u003d\n            (BlockInfoUnderConstructionStriped) blk;\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        assert blk instanceof BlockInfoUnderConstructionContiguous;\n        final BlockInfoUnderConstructionContiguous uc \u003d\n            (BlockInfoUnderConstructionContiguous) blk;\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\n",
      "commitDate": "26/06/15 10:49 AM",
      "commitName": "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/06/15 2:42 PM",
      "commitNameOld": "afe9ea3c12e1f5a71922400eadb642960bc87ca1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,49 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n-      ) throws IOException {\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n+      throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d\n           (BlockInfoUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n+      final ExtendedBlock eb \u003d\n+          new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n-      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n+      for(DatanodeStorageInfo storage : getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n-        if (isCorrupt || (!replicaCorrupt))\n+        if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n+        }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)\n      throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d\n          (BlockInfoUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d\n          new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\n",
      "commitDate": "12/06/15 11:38 AM",
      "commitName": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/06/15 11:17 AM",
      "commitNameOld": "12b5b06c063d93e6c683c9b6fac9a96912f59e59",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n+    if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n-      final BlockInfoContiguousUnderConstruction uc \u003d\n-          (BlockInfoContiguousUnderConstruction) blk;\n+      final BlockInfoUnderConstruction uc \u003d\n+          (BlockInfoUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d\n          (BlockInfoUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "4928f5473394981829e5ffd4b16ea0801baf5c45": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "27/05/15 3:42 PM",
      "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "19/05/15 11:05 AM",
      "commitNameOld": "8860e352c394372e4eb3ebdf82ea899567f34e4e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 8.19,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoContiguousUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoContiguousUnderConstruction uc \u003d\n           (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[blk-BlockInfoContiguous(modifiers-final), pos-long(modifiers-final)]",
        "newValue": "[blk-BlockInfo(modifiers-final), pos-long(modifiers-final)]"
      }
    },
    "922631f04f4bc79f4ceb17958030f80beb4f0576": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8188. Erasure coding: refactor client-related code to sync with HDFS-8082 and HDFS-8169. Contributed by Zhe Zhang.\n",
      "commitDate": "26/05/15 11:59 AM",
      "commitName": "922631f04f4bc79f4ceb17958030f80beb4f0576",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "26/05/15 11:59 AM",
      "commitNameOld": "cd458c38a0e85c8688be75f82e6f762c73777cf6",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,63 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {\n     if (!blk.isComplete()) {\n       if (blk.isStriped()) {\n         final BlockInfoStripedUnderConstruction uc \u003d\n             (BlockInfoStripedUnderConstruction) blk;\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n-        return new LocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n+        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n             false);\n       } else {\n         assert blk instanceof BlockInfoContiguousUnderConstruction;\n         final BlockInfoContiguousUnderConstruction uc \u003d\n             (BlockInfoContiguousUnderConstruction) blk;\n         final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n         final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n             blk);\n-        return new LocatedBlock(eb, storages, pos, false);\n+        return newLocatedBlock(eb, storages, pos, false);\n       }\n-      final BlockInfoContiguousUnderConstruction uc \u003d\n-          (BlockInfoContiguousUnderConstruction) blk;\n-      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n-      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n-      return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n     int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n           // TODO this can be more efficient\n           if (blockIndices !\u003d null) {\n             int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n             assert index \u003e\u003d 0;\n             blockIndices[i++] \u003d index;\n           }\n         }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return blockIndices \u003d\u003d null ?\n         newLocatedBlock(eb, machines, pos, isCorrupt) :\n-        new LocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n+        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {\n    if (!blk.isComplete()) {\n      if (blk.isStriped()) {\n        final BlockInfoStripedUnderConstruction uc \u003d\n            (BlockInfoStripedUnderConstruction) blk;\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        assert blk instanceof BlockInfoContiguousUnderConstruction;\n        final BlockInfoContiguousUnderConstruction uc \u003d\n            (BlockInfoContiguousUnderConstruction) blk;\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return newLocatedBlock(eb, storages, pos, false);\n      }\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "f05c21285ef23b6a973d69f045b1cb46c5abc039": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7853. Erasure coding: extend LocatedBlocks to support reading from striped files. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:32 AM",
      "commitName": "f05c21285ef23b6a973d69f045b1cb46c5abc039",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7853. Erasure coding: extend LocatedBlocks to support reading from striped files. Contributed by Jing Zhao.\n",
          "commitDate": "26/05/15 11:32 AM",
          "commitName": "f05c21285ef23b6a973d69f045b1cb46c5abc039",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/05/15 11:32 AM",
          "commitNameOld": "1e1e93040748231dc913190aec1e031c379d8271",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,68 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo blk,\n-      final long pos) throws IOException {\n-    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n-      if (blk.isComplete()) {\n-        throw new IOException(\n-            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n-            + \", blk\u003d\" + blk);\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {\n+    if (!blk.isComplete()) {\n+      if (blk.isStriped()) {\n+        final BlockInfoStripedUnderConstruction uc \u003d\n+            (BlockInfoStripedUnderConstruction) blk;\n+        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n+        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n+            blk);\n+        return new LocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n+            false);\n+      } else {\n+        assert blk instanceof BlockInfoContiguousUnderConstruction;\n+        final BlockInfoContiguousUnderConstruction uc \u003d\n+            (BlockInfoContiguousUnderConstruction) blk;\n+        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n+        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n+            blk);\n+        return new LocatedBlock(eb, storages, pos, false);\n       }\n       final BlockInfoContiguousUnderConstruction uc \u003d\n           (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n-    // TODO support BlockInfoStripedUC\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n-    int j \u003d 0;\n+    final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n+    int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n-        if (isCorrupt || (!replicaCorrupt))\n+        if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n+          // TODO this can be more efficient\n+          if (blockIndices !\u003d null) {\n+            int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n+            assert index \u003e\u003d 0;\n+            blockIndices[i++] \u003d index;\n+          }\n+        }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n-    return newLocatedBlock(eb, machines, pos, isCorrupt);\n+    return blockIndices \u003d\u003d null ?\n+        newLocatedBlock(eb, machines, pos, isCorrupt) :\n+        new LocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {\n    if (!blk.isComplete()) {\n      if (blk.isStriped()) {\n        final BlockInfoStripedUnderConstruction uc \u003d\n            (BlockInfoStripedUnderConstruction) blk;\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return new LocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        assert blk instanceof BlockInfoContiguousUnderConstruction;\n        final BlockInfoContiguousUnderConstruction uc \u003d\n            (BlockInfoContiguousUnderConstruction) blk;\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return new LocatedBlock(eb, storages, pos, false);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        new LocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7853. Erasure coding: extend LocatedBlocks to support reading from striped files. Contributed by Jing Zhao.\n",
          "commitDate": "26/05/15 11:32 AM",
          "commitName": "f05c21285ef23b6a973d69f045b1cb46c5abc039",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/05/15 11:32 AM",
          "commitNameOld": "1e1e93040748231dc913190aec1e031c379d8271",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,68 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo blk,\n-      final long pos) throws IOException {\n-    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n-      if (blk.isComplete()) {\n-        throw new IOException(\n-            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n-            + \", blk\u003d\" + blk);\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {\n+    if (!blk.isComplete()) {\n+      if (blk.isStriped()) {\n+        final BlockInfoStripedUnderConstruction uc \u003d\n+            (BlockInfoStripedUnderConstruction) blk;\n+        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n+        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n+            blk);\n+        return new LocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n+            false);\n+      } else {\n+        assert blk instanceof BlockInfoContiguousUnderConstruction;\n+        final BlockInfoContiguousUnderConstruction uc \u003d\n+            (BlockInfoContiguousUnderConstruction) blk;\n+        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n+        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n+            blk);\n+        return new LocatedBlock(eb, storages, pos, false);\n       }\n       final BlockInfoContiguousUnderConstruction uc \u003d\n           (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n-    // TODO support BlockInfoStripedUC\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n-    int j \u003d 0;\n+    final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n+    int j \u003d 0, i \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n-        if (isCorrupt || (!replicaCorrupt))\n+        if (isCorrupt || (!replicaCorrupt)) {\n           machines[j++] \u003d storage;\n+          // TODO this can be more efficient\n+          if (blockIndices !\u003d null) {\n+            int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n+            assert index \u003e\u003d 0;\n+            blockIndices[i++] \u003d index;\n+          }\n+        }\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n-    return newLocatedBlock(eb, machines, pos, isCorrupt);\n+    return blockIndices \u003d\u003d null ?\n+        newLocatedBlock(eb, machines, pos, isCorrupt) :\n+        new LocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {\n    if (!blk.isComplete()) {\n      if (blk.isStriped()) {\n        final BlockInfoStripedUnderConstruction uc \u003d\n            (BlockInfoStripedUnderConstruction) blk;\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return new LocatedStripedBlock(eb, storages, uc.getBlockIndices(), pos,\n            false);\n      } else {\n        assert blk instanceof BlockInfoContiguousUnderConstruction;\n        final BlockInfoContiguousUnderConstruction uc \u003d\n            (BlockInfoContiguousUnderConstruction) blk;\n        final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n        final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(),\n            blk);\n        return new LocatedBlock(eb, storages, pos, false);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    final int[] blockIndices \u003d blk.isStriped() ? new int[numMachines] : null;\n    int j \u003d 0, i \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt)) {\n          machines[j++] \u003d storage;\n          // TODO this can be more efficient\n          if (blockIndices !\u003d null) {\n            int index \u003d ((BlockInfoStriped) blk).getStorageBlockIndex(storage);\n            assert index \u003e\u003d 0;\n            blockIndices[i++] \u003d index;\n          }\n        }\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return blockIndices \u003d\u003d null ?\n        newLocatedBlock(eb, machines, pos, isCorrupt) :\n        new LocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
          "commitDate": "26/05/15 11:07 AM",
          "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/05/15 11:07 AM",
          "commitNameOld": "ba9371492036983a9899398907ab41fe548f29b3",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,48 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n-      ) throws IOException {\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk,\n+      final long pos) throws IOException {\n     if (blk instanceof BlockInfoContiguousUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoContiguousUnderConstruction uc \u003d\n           (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n+    // TODO support BlockInfoStripedUC\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk,\n      final long pos) throws IOException {\n    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n    // TODO support BlockInfoStripedUC\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[blk-BlockInfoContiguous(modifiers-final), pos-long(modifiers-final)]",
            "newValue": "[blk-BlockInfo(modifiers-final), pos-long(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
          "commitDate": "26/05/15 11:07 AM",
          "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/05/15 11:07 AM",
          "commitNameOld": "ba9371492036983a9899398907ab41fe548f29b3",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,48 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n-      ) throws IOException {\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk,\n+      final long pos) throws IOException {\n     if (blk instanceof BlockInfoContiguousUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoContiguousUnderConstruction uc \u003d\n           (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n+    // TODO support BlockInfoStripedUC\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n         numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk,\n      final long pos) throws IOException {\n    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n    // TODO support BlockInfoStripedUC\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "279958b772c25e0633bd967828b7d27d5c0a6a56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7281. Missing block is marked as corrupted block (Ming Ma via Yongjun Zhang)\n",
      "commitDate": "01/05/15 8:42 AM",
      "commitName": "279958b772c25e0633bd967828b7d27d5c0a6a56",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "21/04/15 11:43 AM",
      "commitNameOld": "997408eaaceef20b053ee7344468e28cb9a1379b",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 9.87,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoContiguousUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoContiguousUnderConstruction uc \u003d\n           (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n-    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n+    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n+        numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes !\u003d 0 \u0026\u0026\n        numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "5c97db07fb306842f49d73a67a90cecec19a7833": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8169. Move LocatedBlocks and related classes to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "20/04/15 12:36 AM",
      "commitName": "5c97db07fb306842f49d73a67a90cecec19a7833",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "14/04/15 9:59 AM",
      "commitNameOld": "d45aa7647b1fecf81860ec7b563085be2af99a0b",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 5.61,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoContiguousUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoContiguousUnderConstruction uc \u003d\n           (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n-      return new LocatedBlock(eb, storages, pos, false);\n+      return newLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n-    return new LocatedBlock(eb, machines, pos, isCorrupt);\n+    return newLocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return newLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return newLocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
          "commitDate": "08/02/15 11:51 AM",
          "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "04/02/15 11:31 AM",
          "commitNameOld": "9175105eeaecf0a1d60b57989b73ce45cee4689b",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 4.01,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,46 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n+  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n       ) throws IOException {\n-    if (blk instanceof BlockInfoUnderConstruction) {\n+    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n-      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n+      final BlockInfoContiguousUnderConstruction uc \u003d\n+          (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return new LocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[blk-BlockInfo(modifiers-final), pos-long(modifiers-final)]",
            "newValue": "[blk-BlockInfoContiguous(modifiers-final), pos-long(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
          "commitDate": "08/02/15 11:51 AM",
          "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "04/02/15 11:31 AM",
          "commitNameOld": "9175105eeaecf0a1d60b57989b73ce45cee4689b",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 4.01,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,46 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n+  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n       ) throws IOException {\n-    if (blk instanceof BlockInfoUnderConstruction) {\n+    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n-      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n+      final BlockInfoContiguousUnderConstruction uc \u003d\n+          (BlockInfoContiguousUnderConstruction) blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return new LocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfoContiguous blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoContiguousUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoContiguousUnderConstruction uc \u003d\n          (BlockInfoContiguousUnderConstruction) blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "f36f0dde8866e2233dad26b38a8d432d2302a51a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6276. Remove unnecessary conditions and null check. Contributed by Suresh Srinivas\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/14 10:05 PM",
      "commitName": "f36f0dde8866e2233dad26b38a8d432d2302a51a",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "23/04/14 1:13 PM",
      "commitNameOld": "876fd8ab7913a259ff9f69c16cc2d9af46ad3f9b",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return new LocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n-        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n+        if (isCorrupt || (!replicaCorrupt))\n           machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "abf09f090f77a7e54e331b7a07354e7926b60dc9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4990. Change BlockPlacementPolicy to choose storages instead of datanodes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1524444 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/13 8:12 AM",
      "commitName": "abf09f090f77a7e54e331b7a07354e7926b60dc9",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/09/13 7:59 PM",
      "commitNameOld": "0398943572e052bef2c21466871b833950625d82",
      "commitAuthorOld": "",
      "daysBetweenCommits": 1.51,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n-      return LocatedBlock.createLocatedBlock(eb, storages, pos, false);\n+      return new LocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n-    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n+    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n       for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n         final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n-          machines[j++] \u003d d;\n+          machines[j++] \u003d storage;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeStorageInfo[] machines \u003d new DatanodeStorageInfo[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d storage;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "3f070e83b1f4e0211ece8c0ab508a61188ad352a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5009. Include storage information in the LocatedBlock.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1519691 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/09/13 7:03 AM",
      "commitName": "3f070e83b1f4e0211ece8c0ab508a61188ad352a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/08/13 11:30 PM",
      "commitNameOld": "5d9d702607913685eab0d8ad077040ddc82bf085",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n-      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n+      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n-      return new LocatedBlock(eb, locations, pos, false);\n+      return LocatedBlock.createLocatedBlock(eb, storages, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     int j \u003d 0;\n     if (numMachines \u003e 0) {\n-      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n-          it.hasNext();) {\n-        final DatanodeDescriptor d \u003d it.next();\n+      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n+        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     assert j \u003d\u003d machines.length :\n       \"isCorrupt: \" + isCorrupt + \n       \" numMachines: \" + numMachines +\n       \" numNodes: \" + numNodes +\n       \" numCorrupt: \" + numCorruptNodes +\n       \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeStorageInfo[] storages \u003d uc.getExpectedStorageLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return LocatedBlock.createLocatedBlock(eb, storages, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(DatanodeStorageInfo storage : blocksMap.getStorages(blk)) {\n        final DatanodeDescriptor d \u003d storage.getDatanodeDescriptor();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "71071b904d0c9aec7b3713d41740f24182e81c36": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2602. NN should log newly-allocated blocks without losing BlockInfo. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1215036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/12/11 8:18 PM",
      "commitName": "71071b904d0c9aec7b3713d41740f24182e81c36",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "12/12/11 5:58 PM",
      "commitNameOld": "43100e9c0e14bae32ee0ca9e76b90e79561b568c",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 3.1,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,46 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return new LocatedBlock(eb, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n+    int j \u003d 0;\n     if (numMachines \u003e 0) {\n-      int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n+    assert j \u003d\u003d machines.length :\n+      \"isCorrupt: \" + isCorrupt + \n+      \" numMachines: \" + numMachines +\n+      \" numNodes: \" + numNodes +\n+      \" numCorrupt: \" + numCorruptNodes +\n+      \" numCorruptRepls: \" + numCorruptReplicas;\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    int j \u003d 0;\n    if (numMachines \u003e 0) {\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    assert j \u003d\u003d machines.length :\n      \"isCorrupt: \" + isCorrupt + \n      \" numMachines: \" + numMachines +\n      \" numNodes: \" + numNodes +\n      \" numCorrupt: \" + numCorruptNodes +\n      \" numCorruptRepls: \" + numCorruptReplicas;\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "371f4a59059322000a40eb4bdf5386b96b626ece": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "HDFS-2228. Move block and datanode code from FSNamesystem to BlockManager and DatanodeManager.  (szetszwo)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/11 3:06 AM",
      "commitName": "371f4a59059322000a40eb4bdf5386b96b626ece",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-2228. Move block and datanode code from FSNamesystem to BlockManager and DatanodeManager.  (szetszwo)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154899 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/11 3:06 AM",
          "commitName": "371f4a59059322000a40eb4bdf5386b96b626ece",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "04/08/11 3:55 PM",
          "commitNameOld": "7fac946ac983e31613fd62836c8ac9c4a579210a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.47,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return new LocatedBlock(eb, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "getBlockLocation",
            "newValue": "createLocatedBlock"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2228. Move block and datanode code from FSNamesystem to BlockManager and DatanodeManager.  (szetszwo)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154899 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/11 3:06 AM",
          "commitName": "371f4a59059322000a40eb4bdf5386b96b626ece",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "04/08/11 3:55 PM",
          "commitNameOld": "7fac946ac983e31613fd62836c8ac9c4a579210a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.47,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n       return new LocatedBlock(eb, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n     return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        }
      ]
    },
    "7fac946ac983e31613fd62836c8ac9c4a579210a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2108. Move datanode heartbeat handling from namenode package to blockmanagement package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/11 3:55 PM",
      "commitName": "7fac946ac983e31613fd62836c8ac9c4a579210a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/08/11 6:57 AM",
      "commitNameOld": "d68e38b78d9687987c4de2046ce9aa0016685e98",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.37,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n-      return namesystem.createLocatedBlock(uc, locations, pos, false);\n+      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n+      return new LocatedBlock(eb, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n-    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n+    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n+    return new LocatedBlock(eb, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n      return new LocatedBlock(eb, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    final ExtendedBlock eb \u003d new ExtendedBlock(namesystem.getBlockPoolId(), blk);\n    return new LocatedBlock(eb, machines, pos, isCorrupt);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "0b12cc822ddd57e6ecf4f7047f6614419c34580b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2200.  Change FSNamesystem.LOG to package private.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151344 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/11 10:59 PM",
      "commitName": "0b12cc822ddd57e6ecf4f7047f6614419c34580b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/07/11 10:46 PM",
      "commitNameOld": "969a263188f7015261719fe45fa1505121ebb80e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n     if (blk instanceof BlockInfoUnderConstruction) {\n       if (blk.isComplete()) {\n         throw new IOException(\n             \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n             + \", blk\u003d\" + blk);\n       }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n-      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n+      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 6:31 PM",
      "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (!blk.isComplete()) {\n+    if (blk instanceof BlockInfoUnderConstruction) {\n+      if (blk.isComplete()) {\n+        throw new IOException(\n+            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n+            + \", blk\u003d\" + blk);\n+      }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (!blk.isComplete()) {\n+    if (blk instanceof BlockInfoUnderConstruction) {\n+      if (blk.isComplete()) {\n+        throw new IOException(\n+            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n+            + \", blk\u003d\" + blk);\n+      }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (!blk.isComplete()) {\n+    if (blk instanceof BlockInfoUnderConstruction) {\n+      if (blk.isComplete()) {\n+        throw new IOException(\n+            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n+            + \", blk\u003d\" + blk);\n+      }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange)",
      "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 5:26 PM",
      "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n-  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (blk instanceof BlockInfoUnderConstruction) {\n-      if (blk.isComplete()) {\n-        throw new IOException(\n-            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n-            + \", blk\u003d\" + blk);\n-      }\n+    if (!blk.isComplete()) {\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (!blk.isComplete()) {\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n-  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (blk instanceof BlockInfoUnderConstruction) {\n-      if (blk.isComplete()) {\n-        throw new IOException(\n-            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n-            + \", blk\u003d\" + blk);\n-      }\n+    if (!blk.isComplete()) {\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (!blk.isComplete()) {\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n-  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (blk instanceof BlockInfoUnderConstruction) {\n-      if (blk.isComplete()) {\n-        throw new IOException(\n-            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n-            + \", blk\u003d\" + blk);\n-      }\n+    if (!blk.isComplete()) {\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (!blk.isComplete()) {\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 4:43 PM",
      "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (!blk.isComplete()) {\n+    if (blk instanceof BlockInfoUnderConstruction) {\n+      if (blk.isComplete()) {\n+        throw new IOException(\n+            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n+            + \", blk\u003d\" + blk);\n+      }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (!blk.isComplete()) {\n+    if (blk instanceof BlockInfoUnderConstruction) {\n+      if (blk.isComplete()) {\n+        throw new IOException(\n+            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n+            + \", blk\u003d\" + blk);\n+      }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n       ) throws IOException {\n-    if (!blk.isComplete()) {\n+    if (blk instanceof BlockInfoUnderConstruction) {\n+      if (blk.isComplete()) {\n+        throw new IOException(\n+            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n+            + \", blk\u003d\" + blk);\n+      }\n       final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n       final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n       return namesystem.createLocatedBlock(uc, locations, pos, false);\n     }\n \n     // get block locations\n     final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n     final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n     if (numCorruptNodes !\u003d numCorruptReplicas) {\n       FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n           + blk + \" blockMap has \" + numCorruptNodes\n           + \" but corrupt replicas map has \" + numCorruptReplicas);\n     }\n \n     final int numNodes \u003d blocksMap.numNodes(blk);\n     final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n     final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n     final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n     if (numMachines \u003e 0) {\n       int j \u003d 0;\n       for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n           it.hasNext();) {\n         final DatanodeDescriptor d \u003d it.next();\n         final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n         if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n           machines[j++] \u003d d;\n       }\n     }\n     return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (blk instanceof BlockInfoUnderConstruction) {\n      if (blk.isComplete()) {\n        throw new IOException(\n            \"blk instanceof BlockInfoUnderConstruction \u0026\u0026 blk.isComplete()\"\n            + \", blk\u003d\" + blk);\n      }\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,33 @@\n+  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n+      ) throws IOException {\n+    if (!blk.isComplete()) {\n+      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n+      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n+      return namesystem.createLocatedBlock(uc, locations, pos, false);\n+    }\n+\n+    // get block locations\n+    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n+    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n+    if (numCorruptNodes !\u003d numCorruptReplicas) {\n+      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n+          + blk + \" blockMap has \" + numCorruptNodes\n+          + \" but corrupt replicas map has \" + numCorruptReplicas);\n+    }\n+\n+    final int numNodes \u003d blocksMap.numNodes(blk);\n+    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n+    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n+    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n+    if (numMachines \u003e 0) {\n+      int j \u003d 0;\n+      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n+          it.hasNext();) {\n+        final DatanodeDescriptor d \u003d it.next();\n+        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n+        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n+          machines[j++] \u003d d;\n+      }\n+    }\n+    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  LocatedBlock getBlockLocation(final BlockInfo blk, final long pos\n      ) throws IOException {\n    if (!blk.isComplete()) {\n      final BlockInfoUnderConstruction uc \u003d (BlockInfoUnderConstruction)blk;\n      final DatanodeDescriptor[] locations \u003d uc.getExpectedLocations();\n      return namesystem.createLocatedBlock(uc, locations, pos, false);\n    }\n\n    // get block locations\n    final int numCorruptNodes \u003d countNodes(blk).corruptReplicas();\n    final int numCorruptReplicas \u003d corruptReplicas.numCorruptReplicas(blk);\n    if (numCorruptNodes !\u003d numCorruptReplicas) {\n      FSNamesystem.LOG.warn(\"Inconsistent number of corrupt replicas for \"\n          + blk + \" blockMap has \" + numCorruptNodes\n          + \" but corrupt replicas map has \" + numCorruptReplicas);\n    }\n\n    final int numNodes \u003d blocksMap.numNodes(blk);\n    final boolean isCorrupt \u003d numCorruptNodes \u003d\u003d numNodes;\n    final int numMachines \u003d isCorrupt ? numNodes: numNodes - numCorruptNodes;\n    final DatanodeDescriptor[] machines \u003d new DatanodeDescriptor[numMachines];\n    if (numMachines \u003e 0) {\n      int j \u003d 0;\n      for(Iterator\u003cDatanodeDescriptor\u003e it \u003d blocksMap.nodeIterator(blk);\n          it.hasNext();) {\n        final DatanodeDescriptor d \u003d it.next();\n        final boolean replicaCorrupt \u003d corruptReplicas.isReplicaCorrupt(blk, d);\n        if (isCorrupt || (!isCorrupt \u0026\u0026 !replicaCorrupt))\n          machines[j++] \u003d d;\n      }\n    }\n    return namesystem.createLocatedBlock(blk, machines, pos, isCorrupt);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java"
    }
  }
}