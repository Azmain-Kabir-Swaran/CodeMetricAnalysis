{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Merger.java",
  "functionName": "merge",
  "functionId": "merge___keyClass-Class__K____valueClass-Class__V____factor-int__inMem-int__tmpDir-Path__readsCounter-Counters.Counter__writesCounter-Counters.Counter__mergePhase-Progress",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
  "functionStartLine": 600,
  "functionEndLine": 774,
  "numCommitsSeen": 14,
  "timeTaken": 5518,
  "changeHistory": [
    "8c1adeaa26a7eaaca891dccdb71ff085e598a7de",
    "8f701ae07a0b1dc70b8e1eb8d4a5c35c0a1e76da",
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23",
    "0f430e53fde884f24b473043f0a7e2bffa98ebd3",
    "da4cab10990b3a352fc2c699f3b41c994ac55e95",
    "539153a6798a667d39f20972c5ae0936060e2cc1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8c1adeaa26a7eaaca891dccdb71ff085e598a7de": "Ybodychange",
    "8f701ae07a0b1dc70b8e1eb8d4a5c35c0a1e76da": "Ybodychange",
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23": "Ybodychange",
    "0f430e53fde884f24b473043f0a7e2bffa98ebd3": "Ybodychange",
    "da4cab10990b3a352fc2c699f3b41c994ac55e95": "Ybodychange",
    "539153a6798a667d39f20972c5ae0936060e2cc1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c1adeaa26a7eaaca891dccdb71ff085e598a7de": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6068. Illegal progress value warnings in map tasks. Contributed by Binglin Chang.\n",
      "commitDate": "11/01/16 6:12 AM",
      "commitName": "8c1adeaa26a7eaaca891dccdb71ff085e598a7de",
      "commitAuthor": "Junping Du",
      "commitDateOld": "20/11/14 3:36 PM",
      "commitNameOld": "90194ca1cbd695d48c3705121c2ac9a8554578a2",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 416.61,
      "commitsBetweenForRepo": 3243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,175 +1,175 @@\n     RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                      int factor, int inMem, Path tmpDir,\n                                      Counters.Counter readsCounter,\n                                      Counters.Counter writesCounter,\n                                      Progress mergePhase)\n         throws IOException {\n       LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n \n       /*\n        * If there are inMemory segments, then they come first in the segments\n        * list and then the sorted disk segments. Otherwise(if there are only\n        * disk segments), then they are sorted segments if there are more than\n        * factor segments in the segments list.\n        */\n       int numSegments \u003d segments.size();\n       int origFactor \u003d factor;\n       int passNo \u003d 1;\n       if (mergePhase !\u003d null) {\n         mergeProgress \u003d mergePhase;\n       }\n \n       long totalBytes \u003d computeBytesInMerges(factor, inMem);\n       if (totalBytes !\u003d 0) {\n         progPerByte \u003d 1.0f / (float)totalBytes;\n       }\n       \n       //create the MergeStreams from the sorted map created in the constructor\n       //and dump the final output to a file\n       do {\n         //get the factor for this pass of merge. We assume in-memory segments\n         //are the first entries in the segment list and that the pass factor\n         //doesn\u0027t apply to them\n         factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n         if (1 \u003d\u003d passNo) {\n           factor +\u003d inMem;\n         }\n         List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n           new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n         int segmentsConsidered \u003d 0;\n         int numSegmentsToConsider \u003d factor;\n         long startBytes \u003d 0; // starting bytes of segments of this merge\n         while (true) {\n           //extract the smallest \u0027factor\u0027 number of segments  \n           //Call cleanup on the empty segments (no key/value data)\n           List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n             getSegmentDescriptors(numSegmentsToConsider);\n           for (Segment\u003cK, V\u003e segment : mStream) {\n             // Initialize the segment at the last possible moment;\n             // this helps in ensuring we don\u0027t use buffers until we need them\n             segment.init(readsCounter);\n             long startPos \u003d segment.getReader().bytesRead;\n             boolean hasNext \u003d segment.nextRawKey();\n             long endPos \u003d segment.getReader().bytesRead;\n             \n             if (hasNext) {\n               startBytes +\u003d endPos - startPos;\n               segmentsToMerge.add(segment);\n               segmentsConsidered++;\n             }\n             else {\n               segment.close();\n               numSegments--; //we ignore this segment for the merge\n             }\n           }\n           //if we have the desired number of segments\n           //or looked at all available segments, we break\n           if (segmentsConsidered \u003d\u003d factor || \n               segments.size() \u003d\u003d 0) {\n             break;\n           }\n             \n           numSegmentsToConsider \u003d factor - segmentsConsidered;\n         }\n         \n         //feed the streams to the priority queue\n         initialize(segmentsToMerge.size());\n         clear();\n         for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n           put(segment);\n         }\n         \n         //if we have lesser number of segments remaining, then just return the\n         //iterator, else do another single level merge\n         if (numSegments \u003c\u003d factor) {\n           if (!includeFinalMerge) { // for reduce task\n \n             // Reset totalBytesProcessed and recalculate totalBytes from the\n             // remaining segments to track the progress of the final merge.\n             // Final merge is considered as the progress of the reducePhase,\n             // the 3rd phase of reduce task.\n             totalBytesProcessed \u003d 0;\n             totalBytes \u003d 0;\n             for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n               totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n             }\n           }\n           if (totalBytes !\u003d 0) //being paranoid\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           \n           totalBytesProcessed +\u003d startBytes;         \n           if (totalBytes !\u003d 0)\n-            mergeProgress.set(totalBytesProcessed * progPerByte);\n+            mergeProgress.set(Math.min(1.0f, totalBytesProcessed * progPerByte));\n           else\n             mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n           \n           LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                    \" segments left of total size: \" +\n                    (totalBytes - totalBytesProcessed) + \" bytes\");\n           return this;\n         } else {\n           LOG.info(\"Merging \" + segmentsToMerge.size() + \n                    \" intermediate segments out of a total of \" + \n                    (segments.size()+segmentsToMerge.size()));\n           \n           long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n           totalBytesProcessed +\u003d startBytes;\n \n           //we want to spread the creation of temp files on multiple disks if \n           //available under the space constraints\n           long approxOutputSize \u003d 0; \n           for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n             approxOutputSize +\u003d s.getLength() + \n                                 ChecksumFileSystem.getApproxChkSumLength(\n                                 s.getLength());\n           }\n           Path tmpFilename \u003d \n             new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n \n           Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                               tmpFilename.toString(),\n                                               approxOutputSize, conf);\n \n           FSDataOutputStream out \u003d fs.create(outputFile);\n           out \u003d CryptoUtils.wrapIfNecessary(conf, out);\n           Writer\u003cK, V\u003e writer \u003d new Writer\u003cK, V\u003e(conf, out, keyClass, valueClass,\n               codec, writesCounter, true);\n           writeFile(this, writer, reporter, conf);\n           writer.close();\n           \n           //we finished one single level merge; now clean up the priority \n           //queue\n           this.close();\n \n           // Add the newly create segment to the list of segments to be merged\n           Segment\u003cK, V\u003e tempSegment \u003d \n             new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n \n           // Insert new merged segment into the sorted list\n           int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                              segmentComparator);\n           if (pos \u003c 0) {\n             // binary search failed. So position to be inserted at is -pos-1\n             pos \u003d -pos-1;\n           }\n           segments.add(pos, tempSegment);\n           numSegments \u003d segments.size();\n           \n           // Subtract the difference between expected size of new segment and \n           // actual size of new segment(Expected size of new segment is\n           // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n           // size will match(almost) if combiner is not called in merge.\n           long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                        bytesProcessedInPrevMerges;\n           totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n           if (totalBytes !\u003d 0) {\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           }\n           \n           passNo++;\n         }\n         //we are worried about only the first pass merge factor. So reset the \n         //factor to what it originally was\n         factor \u003d origFactor;\n       } while(true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getReader().bytesRead;\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getReader().bytesRead;\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(Math.min(1.0f, totalBytesProcessed * progPerByte));\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          FSDataOutputStream out \u003d fs.create(outputFile);\n          out \u003d CryptoUtils.wrapIfNecessary(conf, out);\n          Writer\u003cK, V\u003e writer \u003d new Writer\u003cK, V\u003e(conf, out, keyClass, valueClass,\n              codec, writesCounter, true);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
      "extendedDetails": {}
    },
    "8f701ae07a0b1dc70b8e1eb8d4a5c35c0a1e76da": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5958. Wrong reduce task progress if map output is compressed. Contributed by Emilio Coppa and Jason Lowe.\n",
      "commitDate": "06/11/14 1:53 PM",
      "commitName": "8f701ae07a0b1dc70b8e1eb8d4a5c35c0a1e76da",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "10/07/14 5:43 PM",
      "commitNameOld": "95986dd2fb4527c43fa4c088c61fb7b4bd794d23",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 118.88,
      "commitsBetweenForRepo": 1169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,175 +1,175 @@\n     RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                      int factor, int inMem, Path tmpDir,\n                                      Counters.Counter readsCounter,\n                                      Counters.Counter writesCounter,\n                                      Progress mergePhase)\n         throws IOException {\n       LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n \n       /*\n        * If there are inMemory segments, then they come first in the segments\n        * list and then the sorted disk segments. Otherwise(if there are only\n        * disk segments), then they are sorted segments if there are more than\n        * factor segments in the segments list.\n        */\n       int numSegments \u003d segments.size();\n       int origFactor \u003d factor;\n       int passNo \u003d 1;\n       if (mergePhase !\u003d null) {\n         mergeProgress \u003d mergePhase;\n       }\n \n       long totalBytes \u003d computeBytesInMerges(factor, inMem);\n       if (totalBytes !\u003d 0) {\n         progPerByte \u003d 1.0f / (float)totalBytes;\n       }\n       \n       //create the MergeStreams from the sorted map created in the constructor\n       //and dump the final output to a file\n       do {\n         //get the factor for this pass of merge. We assume in-memory segments\n         //are the first entries in the segment list and that the pass factor\n         //doesn\u0027t apply to them\n         factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n         if (1 \u003d\u003d passNo) {\n           factor +\u003d inMem;\n         }\n         List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n           new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n         int segmentsConsidered \u003d 0;\n         int numSegmentsToConsider \u003d factor;\n         long startBytes \u003d 0; // starting bytes of segments of this merge\n         while (true) {\n           //extract the smallest \u0027factor\u0027 number of segments  \n           //Call cleanup on the empty segments (no key/value data)\n           List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n             getSegmentDescriptors(numSegmentsToConsider);\n           for (Segment\u003cK, V\u003e segment : mStream) {\n             // Initialize the segment at the last possible moment;\n             // this helps in ensuring we don\u0027t use buffers until we need them\n             segment.init(readsCounter);\n-            long startPos \u003d segment.getPosition();\n+            long startPos \u003d segment.getReader().bytesRead;\n             boolean hasNext \u003d segment.nextRawKey();\n-            long endPos \u003d segment.getPosition();\n+            long endPos \u003d segment.getReader().bytesRead;\n             \n             if (hasNext) {\n               startBytes +\u003d endPos - startPos;\n               segmentsToMerge.add(segment);\n               segmentsConsidered++;\n             }\n             else {\n               segment.close();\n               numSegments--; //we ignore this segment for the merge\n             }\n           }\n           //if we have the desired number of segments\n           //or looked at all available segments, we break\n           if (segmentsConsidered \u003d\u003d factor || \n               segments.size() \u003d\u003d 0) {\n             break;\n           }\n             \n           numSegmentsToConsider \u003d factor - segmentsConsidered;\n         }\n         \n         //feed the streams to the priority queue\n         initialize(segmentsToMerge.size());\n         clear();\n         for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n           put(segment);\n         }\n         \n         //if we have lesser number of segments remaining, then just return the\n         //iterator, else do another single level merge\n         if (numSegments \u003c\u003d factor) {\n           if (!includeFinalMerge) { // for reduce task\n \n             // Reset totalBytesProcessed and recalculate totalBytes from the\n             // remaining segments to track the progress of the final merge.\n             // Final merge is considered as the progress of the reducePhase,\n             // the 3rd phase of reduce task.\n             totalBytesProcessed \u003d 0;\n             totalBytes \u003d 0;\n             for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n               totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n             }\n           }\n           if (totalBytes !\u003d 0) //being paranoid\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           \n           totalBytesProcessed +\u003d startBytes;         \n           if (totalBytes !\u003d 0)\n             mergeProgress.set(totalBytesProcessed * progPerByte);\n           else\n             mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n           \n           LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                    \" segments left of total size: \" +\n                    (totalBytes - totalBytesProcessed) + \" bytes\");\n           return this;\n         } else {\n           LOG.info(\"Merging \" + segmentsToMerge.size() + \n                    \" intermediate segments out of a total of \" + \n                    (segments.size()+segmentsToMerge.size()));\n           \n           long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n           totalBytesProcessed +\u003d startBytes;\n \n           //we want to spread the creation of temp files on multiple disks if \n           //available under the space constraints\n           long approxOutputSize \u003d 0; \n           for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n             approxOutputSize +\u003d s.getLength() + \n                                 ChecksumFileSystem.getApproxChkSumLength(\n                                 s.getLength());\n           }\n           Path tmpFilename \u003d \n             new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n \n           Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                               tmpFilename.toString(),\n                                               approxOutputSize, conf);\n \n           FSDataOutputStream out \u003d fs.create(outputFile);\n           out \u003d CryptoUtils.wrapIfNecessary(conf, out);\n           Writer\u003cK, V\u003e writer \u003d new Writer\u003cK, V\u003e(conf, out, keyClass, valueClass,\n               codec, writesCounter, true);\n           writeFile(this, writer, reporter, conf);\n           writer.close();\n           \n           //we finished one single level merge; now clean up the priority \n           //queue\n           this.close();\n \n           // Add the newly create segment to the list of segments to be merged\n           Segment\u003cK, V\u003e tempSegment \u003d \n             new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n \n           // Insert new merged segment into the sorted list\n           int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                              segmentComparator);\n           if (pos \u003c 0) {\n             // binary search failed. So position to be inserted at is -pos-1\n             pos \u003d -pos-1;\n           }\n           segments.add(pos, tempSegment);\n           numSegments \u003d segments.size();\n           \n           // Subtract the difference between expected size of new segment and \n           // actual size of new segment(Expected size of new segment is\n           // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n           // size will match(almost) if combiner is not called in merge.\n           long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                        bytesProcessedInPrevMerges;\n           totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n           if (totalBytes !\u003d 0) {\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           }\n           \n           passNo++;\n         }\n         //we are worried about only the first pass merge factor. So reset the \n         //factor to what it originally was\n         factor \u003d origFactor;\n       } while(true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getReader().bytesRead;\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getReader().bytesRead;\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(totalBytesProcessed * progPerByte);\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          FSDataOutputStream out \u003d fs.create(outputFile);\n          out \u003d CryptoUtils.wrapIfNecessary(conf, out);\n          Writer\u003cK, V\u003e writer \u003d new Writer\u003cK, V\u003e(conf, out, keyClass, valueClass,\n              codec, writesCounter, true);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
      "extendedDetails": {}
    },
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5890. Support for encrypting Intermediate data and spills in local filesystem. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609597 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 5:43 PM",
      "commitName": "95986dd2fb4527c43fa4c088c61fb7b4bd794d23",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "14/05/14 10:51 AM",
      "commitNameOld": "5bf7ef839bbe4f7d5d673ae43e795ee4050fad88",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 57.29,
      "commitsBetweenForRepo": 350,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,174 +1,175 @@\n     RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                      int factor, int inMem, Path tmpDir,\n                                      Counters.Counter readsCounter,\n                                      Counters.Counter writesCounter,\n                                      Progress mergePhase)\n         throws IOException {\n       LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n \n       /*\n        * If there are inMemory segments, then they come first in the segments\n        * list and then the sorted disk segments. Otherwise(if there are only\n        * disk segments), then they are sorted segments if there are more than\n        * factor segments in the segments list.\n        */\n       int numSegments \u003d segments.size();\n       int origFactor \u003d factor;\n       int passNo \u003d 1;\n       if (mergePhase !\u003d null) {\n         mergeProgress \u003d mergePhase;\n       }\n \n       long totalBytes \u003d computeBytesInMerges(factor, inMem);\n       if (totalBytes !\u003d 0) {\n         progPerByte \u003d 1.0f / (float)totalBytes;\n       }\n       \n       //create the MergeStreams from the sorted map created in the constructor\n       //and dump the final output to a file\n       do {\n         //get the factor for this pass of merge. We assume in-memory segments\n         //are the first entries in the segment list and that the pass factor\n         //doesn\u0027t apply to them\n         factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n         if (1 \u003d\u003d passNo) {\n           factor +\u003d inMem;\n         }\n         List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n           new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n         int segmentsConsidered \u003d 0;\n         int numSegmentsToConsider \u003d factor;\n         long startBytes \u003d 0; // starting bytes of segments of this merge\n         while (true) {\n           //extract the smallest \u0027factor\u0027 number of segments  \n           //Call cleanup on the empty segments (no key/value data)\n           List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n             getSegmentDescriptors(numSegmentsToConsider);\n           for (Segment\u003cK, V\u003e segment : mStream) {\n             // Initialize the segment at the last possible moment;\n             // this helps in ensuring we don\u0027t use buffers until we need them\n             segment.init(readsCounter);\n             long startPos \u003d segment.getPosition();\n             boolean hasNext \u003d segment.nextRawKey();\n             long endPos \u003d segment.getPosition();\n             \n             if (hasNext) {\n               startBytes +\u003d endPos - startPos;\n               segmentsToMerge.add(segment);\n               segmentsConsidered++;\n             }\n             else {\n               segment.close();\n               numSegments--; //we ignore this segment for the merge\n             }\n           }\n           //if we have the desired number of segments\n           //or looked at all available segments, we break\n           if (segmentsConsidered \u003d\u003d factor || \n               segments.size() \u003d\u003d 0) {\n             break;\n           }\n             \n           numSegmentsToConsider \u003d factor - segmentsConsidered;\n         }\n         \n         //feed the streams to the priority queue\n         initialize(segmentsToMerge.size());\n         clear();\n         for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n           put(segment);\n         }\n         \n         //if we have lesser number of segments remaining, then just return the\n         //iterator, else do another single level merge\n         if (numSegments \u003c\u003d factor) {\n           if (!includeFinalMerge) { // for reduce task\n \n             // Reset totalBytesProcessed and recalculate totalBytes from the\n             // remaining segments to track the progress of the final merge.\n             // Final merge is considered as the progress of the reducePhase,\n             // the 3rd phase of reduce task.\n             totalBytesProcessed \u003d 0;\n             totalBytes \u003d 0;\n             for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n               totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n             }\n           }\n           if (totalBytes !\u003d 0) //being paranoid\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           \n           totalBytesProcessed +\u003d startBytes;         \n           if (totalBytes !\u003d 0)\n             mergeProgress.set(totalBytesProcessed * progPerByte);\n           else\n             mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n           \n           LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                    \" segments left of total size: \" +\n                    (totalBytes - totalBytesProcessed) + \" bytes\");\n           return this;\n         } else {\n           LOG.info(\"Merging \" + segmentsToMerge.size() + \n                    \" intermediate segments out of a total of \" + \n                    (segments.size()+segmentsToMerge.size()));\n           \n           long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n           totalBytesProcessed +\u003d startBytes;\n \n           //we want to spread the creation of temp files on multiple disks if \n           //available under the space constraints\n           long approxOutputSize \u003d 0; \n           for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n             approxOutputSize +\u003d s.getLength() + \n                                 ChecksumFileSystem.getApproxChkSumLength(\n                                 s.getLength());\n           }\n           Path tmpFilename \u003d \n             new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n \n           Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                               tmpFilename.toString(),\n                                               approxOutputSize, conf);\n \n-          Writer\u003cK, V\u003e writer \u003d \n-            new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n-                             writesCounter);\n+          FSDataOutputStream out \u003d fs.create(outputFile);\n+          out \u003d CryptoUtils.wrapIfNecessary(conf, out);\n+          Writer\u003cK, V\u003e writer \u003d new Writer\u003cK, V\u003e(conf, out, keyClass, valueClass,\n+              codec, writesCounter, true);\n           writeFile(this, writer, reporter, conf);\n           writer.close();\n           \n           //we finished one single level merge; now clean up the priority \n           //queue\n           this.close();\n \n           // Add the newly create segment to the list of segments to be merged\n           Segment\u003cK, V\u003e tempSegment \u003d \n             new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n \n           // Insert new merged segment into the sorted list\n           int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                              segmentComparator);\n           if (pos \u003c 0) {\n             // binary search failed. So position to be inserted at is -pos-1\n             pos \u003d -pos-1;\n           }\n           segments.add(pos, tempSegment);\n           numSegments \u003d segments.size();\n           \n           // Subtract the difference between expected size of new segment and \n           // actual size of new segment(Expected size of new segment is\n           // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n           // size will match(almost) if combiner is not called in merge.\n           long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                        bytesProcessedInPrevMerges;\n           totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n           if (totalBytes !\u003d 0) {\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           }\n           \n           passNo++;\n         }\n         //we are worried about only the first pass merge factor. So reset the \n         //factor to what it originally was\n         factor \u003d origFactor;\n       } while(true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getPosition();\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getPosition();\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(totalBytesProcessed * progPerByte);\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          FSDataOutputStream out \u003d fs.create(outputFile);\n          out \u003d CryptoUtils.wrapIfNecessary(conf, out);\n          Writer\u003cK, V\u003e writer \u003d new Writer\u003cK, V\u003e(conf, out, keyClass, valueClass,\n              codec, writesCounter, true);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
      "extendedDetails": {}
    },
    "0f430e53fde884f24b473043f0a7e2bffa98ebd3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2264. Job status exceeds 100% in some cases. (devaraj.k and sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440076 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/13 11:38 AM",
      "commitName": "0f430e53fde884f24b473043f0a7e2bffa98ebd3",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "28/01/13 10:58 AM",
      "commitNameOld": "da4cab10990b3a352fc2c699f3b41c994ac55e95",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,174 +1,174 @@\n     RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                      int factor, int inMem, Path tmpDir,\n                                      Counters.Counter readsCounter,\n                                      Counters.Counter writesCounter,\n                                      Progress mergePhase)\n         throws IOException {\n       LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n \n       /*\n        * If there are inMemory segments, then they come first in the segments\n        * list and then the sorted disk segments. Otherwise(if there are only\n        * disk segments), then they are sorted segments if there are more than\n        * factor segments in the segments list.\n        */\n       int numSegments \u003d segments.size();\n       int origFactor \u003d factor;\n       int passNo \u003d 1;\n       if (mergePhase !\u003d null) {\n         mergeProgress \u003d mergePhase;\n       }\n \n       long totalBytes \u003d computeBytesInMerges(factor, inMem);\n       if (totalBytes !\u003d 0) {\n         progPerByte \u003d 1.0f / (float)totalBytes;\n       }\n       \n       //create the MergeStreams from the sorted map created in the constructor\n       //and dump the final output to a file\n       do {\n         //get the factor for this pass of merge. We assume in-memory segments\n         //are the first entries in the segment list and that the pass factor\n         //doesn\u0027t apply to them\n         factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n         if (1 \u003d\u003d passNo) {\n           factor +\u003d inMem;\n         }\n         List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n           new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n         int segmentsConsidered \u003d 0;\n         int numSegmentsToConsider \u003d factor;\n         long startBytes \u003d 0; // starting bytes of segments of this merge\n         while (true) {\n           //extract the smallest \u0027factor\u0027 number of segments  \n           //Call cleanup on the empty segments (no key/value data)\n           List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n             getSegmentDescriptors(numSegmentsToConsider);\n           for (Segment\u003cK, V\u003e segment : mStream) {\n             // Initialize the segment at the last possible moment;\n             // this helps in ensuring we don\u0027t use buffers until we need them\n             segment.init(readsCounter);\n             long startPos \u003d segment.getPosition();\n             boolean hasNext \u003d segment.nextRawKey();\n             long endPos \u003d segment.getPosition();\n             \n             if (hasNext) {\n               startBytes +\u003d endPos - startPos;\n               segmentsToMerge.add(segment);\n               segmentsConsidered++;\n             }\n             else {\n               segment.close();\n               numSegments--; //we ignore this segment for the merge\n             }\n           }\n           //if we have the desired number of segments\n           //or looked at all available segments, we break\n           if (segmentsConsidered \u003d\u003d factor || \n               segments.size() \u003d\u003d 0) {\n             break;\n           }\n             \n           numSegmentsToConsider \u003d factor - segmentsConsidered;\n         }\n         \n         //feed the streams to the priority queue\n         initialize(segmentsToMerge.size());\n         clear();\n         for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n           put(segment);\n         }\n         \n         //if we have lesser number of segments remaining, then just return the\n         //iterator, else do another single level merge\n         if (numSegments \u003c\u003d factor) {\n           if (!includeFinalMerge) { // for reduce task\n \n             // Reset totalBytesProcessed and recalculate totalBytes from the\n             // remaining segments to track the progress of the final merge.\n             // Final merge is considered as the progress of the reducePhase,\n             // the 3rd phase of reduce task.\n             totalBytesProcessed \u003d 0;\n             totalBytes \u003d 0;\n             for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n-              totalBytes +\u003d segmentsToMerge.get(i).getLength();\n+              totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n             }\n           }\n           if (totalBytes !\u003d 0) //being paranoid\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           \n           totalBytesProcessed +\u003d startBytes;         \n           if (totalBytes !\u003d 0)\n             mergeProgress.set(totalBytesProcessed * progPerByte);\n           else\n             mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n           \n           LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                    \" segments left of total size: \" +\n                    (totalBytes - totalBytesProcessed) + \" bytes\");\n           return this;\n         } else {\n           LOG.info(\"Merging \" + segmentsToMerge.size() + \n                    \" intermediate segments out of a total of \" + \n                    (segments.size()+segmentsToMerge.size()));\n           \n           long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n           totalBytesProcessed +\u003d startBytes;\n \n           //we want to spread the creation of temp files on multiple disks if \n           //available under the space constraints\n           long approxOutputSize \u003d 0; \n           for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n             approxOutputSize +\u003d s.getLength() + \n                                 ChecksumFileSystem.getApproxChkSumLength(\n                                 s.getLength());\n           }\n           Path tmpFilename \u003d \n             new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n \n           Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                               tmpFilename.toString(),\n                                               approxOutputSize, conf);\n \n           Writer\u003cK, V\u003e writer \u003d \n             new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                              writesCounter);\n           writeFile(this, writer, reporter, conf);\n           writer.close();\n           \n           //we finished one single level merge; now clean up the priority \n           //queue\n           this.close();\n \n           // Add the newly create segment to the list of segments to be merged\n           Segment\u003cK, V\u003e tempSegment \u003d \n             new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n \n           // Insert new merged segment into the sorted list\n           int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                              segmentComparator);\n           if (pos \u003c 0) {\n             // binary search failed. So position to be inserted at is -pos-1\n             pos \u003d -pos-1;\n           }\n           segments.add(pos, tempSegment);\n           numSegments \u003d segments.size();\n           \n           // Subtract the difference between expected size of new segment and \n           // actual size of new segment(Expected size of new segment is\n           // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n           // size will match(almost) if combiner is not called in merge.\n           long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                        bytesProcessedInPrevMerges;\n-          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getLength();\n+          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n           if (totalBytes !\u003d 0) {\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           }\n           \n           passNo++;\n         }\n         //we are worried about only the first pass merge factor. So reset the \n         //factor to what it originally was\n         factor \u003d origFactor;\n       } while(true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getPosition();\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getPosition();\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(totalBytesProcessed * progPerByte);\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          Writer\u003cK, V\u003e writer \u003d \n            new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                             writesCounter);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
      "extendedDetails": {}
    },
    "da4cab10990b3a352fc2c699f3b41c994ac55e95": {
      "type": "Ybodychange",
      "commitMessage": "Revering MAPREDUCE-2264\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1439561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/01/13 10:58 AM",
      "commitName": "da4cab10990b3a352fc2c699f3b41c994ac55e95",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/01/13 4:25 PM",
      "commitNameOld": "539153a6798a667d39f20972c5ae0936060e2cc1",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 3.77,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,174 +1,174 @@\n     RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                      int factor, int inMem, Path tmpDir,\n                                      Counters.Counter readsCounter,\n                                      Counters.Counter writesCounter,\n                                      Progress mergePhase)\n         throws IOException {\n       LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n \n       /*\n        * If there are inMemory segments, then they come first in the segments\n        * list and then the sorted disk segments. Otherwise(if there are only\n        * disk segments), then they are sorted segments if there are more than\n        * factor segments in the segments list.\n        */\n       int numSegments \u003d segments.size();\n       int origFactor \u003d factor;\n       int passNo \u003d 1;\n       if (mergePhase !\u003d null) {\n         mergeProgress \u003d mergePhase;\n       }\n \n       long totalBytes \u003d computeBytesInMerges(factor, inMem);\n       if (totalBytes !\u003d 0) {\n         progPerByte \u003d 1.0f / (float)totalBytes;\n       }\n       \n       //create the MergeStreams from the sorted map created in the constructor\n       //and dump the final output to a file\n       do {\n         //get the factor for this pass of merge. We assume in-memory segments\n         //are the first entries in the segment list and that the pass factor\n         //doesn\u0027t apply to them\n         factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n         if (1 \u003d\u003d passNo) {\n           factor +\u003d inMem;\n         }\n         List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n           new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n         int segmentsConsidered \u003d 0;\n         int numSegmentsToConsider \u003d factor;\n         long startBytes \u003d 0; // starting bytes of segments of this merge\n         while (true) {\n           //extract the smallest \u0027factor\u0027 number of segments  \n           //Call cleanup on the empty segments (no key/value data)\n           List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n             getSegmentDescriptors(numSegmentsToConsider);\n           for (Segment\u003cK, V\u003e segment : mStream) {\n             // Initialize the segment at the last possible moment;\n             // this helps in ensuring we don\u0027t use buffers until we need them\n             segment.init(readsCounter);\n             long startPos \u003d segment.getPosition();\n             boolean hasNext \u003d segment.nextRawKey();\n             long endPos \u003d segment.getPosition();\n             \n             if (hasNext) {\n               startBytes +\u003d endPos - startPos;\n               segmentsToMerge.add(segment);\n               segmentsConsidered++;\n             }\n             else {\n               segment.close();\n               numSegments--; //we ignore this segment for the merge\n             }\n           }\n           //if we have the desired number of segments\n           //or looked at all available segments, we break\n           if (segmentsConsidered \u003d\u003d factor || \n               segments.size() \u003d\u003d 0) {\n             break;\n           }\n             \n           numSegmentsToConsider \u003d factor - segmentsConsidered;\n         }\n         \n         //feed the streams to the priority queue\n         initialize(segmentsToMerge.size());\n         clear();\n         for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n           put(segment);\n         }\n         \n         //if we have lesser number of segments remaining, then just return the\n         //iterator, else do another single level merge\n         if (numSegments \u003c\u003d factor) {\n           if (!includeFinalMerge) { // for reduce task\n \n             // Reset totalBytesProcessed and recalculate totalBytes from the\n             // remaining segments to track the progress of the final merge.\n             // Final merge is considered as the progress of the reducePhase,\n             // the 3rd phase of reduce task.\n             totalBytesProcessed \u003d 0;\n             totalBytes \u003d 0;\n             for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n-              totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n+              totalBytes +\u003d segmentsToMerge.get(i).getLength();\n             }\n           }\n           if (totalBytes !\u003d 0) //being paranoid\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           \n           totalBytesProcessed +\u003d startBytes;         \n           if (totalBytes !\u003d 0)\n             mergeProgress.set(totalBytesProcessed * progPerByte);\n           else\n             mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n           \n           LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                    \" segments left of total size: \" +\n                    (totalBytes - totalBytesProcessed) + \" bytes\");\n           return this;\n         } else {\n           LOG.info(\"Merging \" + segmentsToMerge.size() + \n                    \" intermediate segments out of a total of \" + \n                    (segments.size()+segmentsToMerge.size()));\n           \n           long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n           totalBytesProcessed +\u003d startBytes;\n \n           //we want to spread the creation of temp files on multiple disks if \n           //available under the space constraints\n           long approxOutputSize \u003d 0; \n           for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n             approxOutputSize +\u003d s.getLength() + \n                                 ChecksumFileSystem.getApproxChkSumLength(\n                                 s.getLength());\n           }\n           Path tmpFilename \u003d \n             new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n \n           Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                               tmpFilename.toString(),\n                                               approxOutputSize, conf);\n \n           Writer\u003cK, V\u003e writer \u003d \n             new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                              writesCounter);\n           writeFile(this, writer, reporter, conf);\n           writer.close();\n           \n           //we finished one single level merge; now clean up the priority \n           //queue\n           this.close();\n \n           // Add the newly create segment to the list of segments to be merged\n           Segment\u003cK, V\u003e tempSegment \u003d \n             new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n \n           // Insert new merged segment into the sorted list\n           int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                              segmentComparator);\n           if (pos \u003c 0) {\n             // binary search failed. So position to be inserted at is -pos-1\n             pos \u003d -pos-1;\n           }\n           segments.add(pos, tempSegment);\n           numSegments \u003d segments.size();\n           \n           // Subtract the difference between expected size of new segment and \n           // actual size of new segment(Expected size of new segment is\n           // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n           // size will match(almost) if combiner is not called in merge.\n           long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                        bytesProcessedInPrevMerges;\n-          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n+          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getLength();\n           if (totalBytes !\u003d 0) {\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           }\n           \n           passNo++;\n         }\n         //we are worried about only the first pass merge factor. So reset the \n         //factor to what it originally was\n         factor \u003d origFactor;\n       } while(true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getPosition();\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getPosition();\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(totalBytesProcessed * progPerByte);\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          Writer\u003cK, V\u003e writer \u003d \n            new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                             writesCounter);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
      "extendedDetails": {}
    },
    "539153a6798a667d39f20972c5ae0936060e2cc1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2264. Job status exceeds 100% in some cases. (devaraj.k and sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1438277 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/01/13 4:25 PM",
      "commitName": "539153a6798a667d39f20972c5ae0936060e2cc1",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 519.01,
      "commitsBetweenForRepo": 3240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,174 +1,174 @@\n     RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                      int factor, int inMem, Path tmpDir,\n                                      Counters.Counter readsCounter,\n                                      Counters.Counter writesCounter,\n                                      Progress mergePhase)\n         throws IOException {\n       LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n \n       /*\n        * If there are inMemory segments, then they come first in the segments\n        * list and then the sorted disk segments. Otherwise(if there are only\n        * disk segments), then they are sorted segments if there are more than\n        * factor segments in the segments list.\n        */\n       int numSegments \u003d segments.size();\n       int origFactor \u003d factor;\n       int passNo \u003d 1;\n       if (mergePhase !\u003d null) {\n         mergeProgress \u003d mergePhase;\n       }\n \n       long totalBytes \u003d computeBytesInMerges(factor, inMem);\n       if (totalBytes !\u003d 0) {\n         progPerByte \u003d 1.0f / (float)totalBytes;\n       }\n       \n       //create the MergeStreams from the sorted map created in the constructor\n       //and dump the final output to a file\n       do {\n         //get the factor for this pass of merge. We assume in-memory segments\n         //are the first entries in the segment list and that the pass factor\n         //doesn\u0027t apply to them\n         factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n         if (1 \u003d\u003d passNo) {\n           factor +\u003d inMem;\n         }\n         List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n           new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n         int segmentsConsidered \u003d 0;\n         int numSegmentsToConsider \u003d factor;\n         long startBytes \u003d 0; // starting bytes of segments of this merge\n         while (true) {\n           //extract the smallest \u0027factor\u0027 number of segments  \n           //Call cleanup on the empty segments (no key/value data)\n           List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n             getSegmentDescriptors(numSegmentsToConsider);\n           for (Segment\u003cK, V\u003e segment : mStream) {\n             // Initialize the segment at the last possible moment;\n             // this helps in ensuring we don\u0027t use buffers until we need them\n             segment.init(readsCounter);\n             long startPos \u003d segment.getPosition();\n             boolean hasNext \u003d segment.nextRawKey();\n             long endPos \u003d segment.getPosition();\n             \n             if (hasNext) {\n               startBytes +\u003d endPos - startPos;\n               segmentsToMerge.add(segment);\n               segmentsConsidered++;\n             }\n             else {\n               segment.close();\n               numSegments--; //we ignore this segment for the merge\n             }\n           }\n           //if we have the desired number of segments\n           //or looked at all available segments, we break\n           if (segmentsConsidered \u003d\u003d factor || \n               segments.size() \u003d\u003d 0) {\n             break;\n           }\n             \n           numSegmentsToConsider \u003d factor - segmentsConsidered;\n         }\n         \n         //feed the streams to the priority queue\n         initialize(segmentsToMerge.size());\n         clear();\n         for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n           put(segment);\n         }\n         \n         //if we have lesser number of segments remaining, then just return the\n         //iterator, else do another single level merge\n         if (numSegments \u003c\u003d factor) {\n           if (!includeFinalMerge) { // for reduce task\n \n             // Reset totalBytesProcessed and recalculate totalBytes from the\n             // remaining segments to track the progress of the final merge.\n             // Final merge is considered as the progress of the reducePhase,\n             // the 3rd phase of reduce task.\n             totalBytesProcessed \u003d 0;\n             totalBytes \u003d 0;\n             for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n-              totalBytes +\u003d segmentsToMerge.get(i).getLength();\n+              totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n             }\n           }\n           if (totalBytes !\u003d 0) //being paranoid\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           \n           totalBytesProcessed +\u003d startBytes;         \n           if (totalBytes !\u003d 0)\n             mergeProgress.set(totalBytesProcessed * progPerByte);\n           else\n             mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n           \n           LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                    \" segments left of total size: \" +\n                    (totalBytes - totalBytesProcessed) + \" bytes\");\n           return this;\n         } else {\n           LOG.info(\"Merging \" + segmentsToMerge.size() + \n                    \" intermediate segments out of a total of \" + \n                    (segments.size()+segmentsToMerge.size()));\n           \n           long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n           totalBytesProcessed +\u003d startBytes;\n \n           //we want to spread the creation of temp files on multiple disks if \n           //available under the space constraints\n           long approxOutputSize \u003d 0; \n           for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n             approxOutputSize +\u003d s.getLength() + \n                                 ChecksumFileSystem.getApproxChkSumLength(\n                                 s.getLength());\n           }\n           Path tmpFilename \u003d \n             new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n \n           Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                               tmpFilename.toString(),\n                                               approxOutputSize, conf);\n \n           Writer\u003cK, V\u003e writer \u003d \n             new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                              writesCounter);\n           writeFile(this, writer, reporter, conf);\n           writer.close();\n           \n           //we finished one single level merge; now clean up the priority \n           //queue\n           this.close();\n \n           // Add the newly create segment to the list of segments to be merged\n           Segment\u003cK, V\u003e tempSegment \u003d \n             new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n \n           // Insert new merged segment into the sorted list\n           int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                              segmentComparator);\n           if (pos \u003c 0) {\n             // binary search failed. So position to be inserted at is -pos-1\n             pos \u003d -pos-1;\n           }\n           segments.add(pos, tempSegment);\n           numSegments \u003d segments.size();\n           \n           // Subtract the difference between expected size of new segment and \n           // actual size of new segment(Expected size of new segment is\n           // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n           // size will match(almost) if combiner is not called in merge.\n           long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                        bytesProcessedInPrevMerges;\n-          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getLength();\n+          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n           if (totalBytes !\u003d 0) {\n             progPerByte \u003d 1.0f / (float)totalBytes;\n           }\n           \n           passNo++;\n         }\n         //we are worried about only the first pass merge factor. So reset the \n         //factor to what it originally was\n         factor \u003d origFactor;\n       } while(true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getPosition();\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getPosition();\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getRawDataLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(totalBytesProcessed * progPerByte);\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          Writer\u003cK, V\u003e writer \u003d \n            new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                             writesCounter);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getRawDataLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getPosition();\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getPosition();\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(totalBytesProcessed * progPerByte);\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          Writer\u003cK, V\u003e writer \u003d \n            new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                             writesCounter);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getPosition();\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getPosition();\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(totalBytesProcessed * progPerByte);\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          Writer\u003cK, V\u003e writer \u003d \n            new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                             writesCounter);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/Merger.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Merger.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,174 @@\n+    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n+                                     int factor, int inMem, Path tmpDir,\n+                                     Counters.Counter readsCounter,\n+                                     Counters.Counter writesCounter,\n+                                     Progress mergePhase)\n+        throws IOException {\n+      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n+\n+      /*\n+       * If there are inMemory segments, then they come first in the segments\n+       * list and then the sorted disk segments. Otherwise(if there are only\n+       * disk segments), then they are sorted segments if there are more than\n+       * factor segments in the segments list.\n+       */\n+      int numSegments \u003d segments.size();\n+      int origFactor \u003d factor;\n+      int passNo \u003d 1;\n+      if (mergePhase !\u003d null) {\n+        mergeProgress \u003d mergePhase;\n+      }\n+\n+      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n+      if (totalBytes !\u003d 0) {\n+        progPerByte \u003d 1.0f / (float)totalBytes;\n+      }\n+      \n+      //create the MergeStreams from the sorted map created in the constructor\n+      //and dump the final output to a file\n+      do {\n+        //get the factor for this pass of merge. We assume in-memory segments\n+        //are the first entries in the segment list and that the pass factor\n+        //doesn\u0027t apply to them\n+        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n+        if (1 \u003d\u003d passNo) {\n+          factor +\u003d inMem;\n+        }\n+        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n+          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n+        int segmentsConsidered \u003d 0;\n+        int numSegmentsToConsider \u003d factor;\n+        long startBytes \u003d 0; // starting bytes of segments of this merge\n+        while (true) {\n+          //extract the smallest \u0027factor\u0027 number of segments  \n+          //Call cleanup on the empty segments (no key/value data)\n+          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n+            getSegmentDescriptors(numSegmentsToConsider);\n+          for (Segment\u003cK, V\u003e segment : mStream) {\n+            // Initialize the segment at the last possible moment;\n+            // this helps in ensuring we don\u0027t use buffers until we need them\n+            segment.init(readsCounter);\n+            long startPos \u003d segment.getPosition();\n+            boolean hasNext \u003d segment.nextRawKey();\n+            long endPos \u003d segment.getPosition();\n+            \n+            if (hasNext) {\n+              startBytes +\u003d endPos - startPos;\n+              segmentsToMerge.add(segment);\n+              segmentsConsidered++;\n+            }\n+            else {\n+              segment.close();\n+              numSegments--; //we ignore this segment for the merge\n+            }\n+          }\n+          //if we have the desired number of segments\n+          //or looked at all available segments, we break\n+          if (segmentsConsidered \u003d\u003d factor || \n+              segments.size() \u003d\u003d 0) {\n+            break;\n+          }\n+            \n+          numSegmentsToConsider \u003d factor - segmentsConsidered;\n+        }\n+        \n+        //feed the streams to the priority queue\n+        initialize(segmentsToMerge.size());\n+        clear();\n+        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n+          put(segment);\n+        }\n+        \n+        //if we have lesser number of segments remaining, then just return the\n+        //iterator, else do another single level merge\n+        if (numSegments \u003c\u003d factor) {\n+          if (!includeFinalMerge) { // for reduce task\n+\n+            // Reset totalBytesProcessed and recalculate totalBytes from the\n+            // remaining segments to track the progress of the final merge.\n+            // Final merge is considered as the progress of the reducePhase,\n+            // the 3rd phase of reduce task.\n+            totalBytesProcessed \u003d 0;\n+            totalBytes \u003d 0;\n+            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n+              totalBytes +\u003d segmentsToMerge.get(i).getLength();\n+            }\n+          }\n+          if (totalBytes !\u003d 0) //being paranoid\n+            progPerByte \u003d 1.0f / (float)totalBytes;\n+          \n+          totalBytesProcessed +\u003d startBytes;         \n+          if (totalBytes !\u003d 0)\n+            mergeProgress.set(totalBytesProcessed * progPerByte);\n+          else\n+            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n+          \n+          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n+                   \" segments left of total size: \" +\n+                   (totalBytes - totalBytesProcessed) + \" bytes\");\n+          return this;\n+        } else {\n+          LOG.info(\"Merging \" + segmentsToMerge.size() + \n+                   \" intermediate segments out of a total of \" + \n+                   (segments.size()+segmentsToMerge.size()));\n+          \n+          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n+          totalBytesProcessed +\u003d startBytes;\n+\n+          //we want to spread the creation of temp files on multiple disks if \n+          //available under the space constraints\n+          long approxOutputSize \u003d 0; \n+          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n+            approxOutputSize +\u003d s.getLength() + \n+                                ChecksumFileSystem.getApproxChkSumLength(\n+                                s.getLength());\n+          }\n+          Path tmpFilename \u003d \n+            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n+\n+          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n+                                              tmpFilename.toString(),\n+                                              approxOutputSize, conf);\n+\n+          Writer\u003cK, V\u003e writer \u003d \n+            new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n+                             writesCounter);\n+          writeFile(this, writer, reporter, conf);\n+          writer.close();\n+          \n+          //we finished one single level merge; now clean up the priority \n+          //queue\n+          this.close();\n+\n+          // Add the newly create segment to the list of segments to be merged\n+          Segment\u003cK, V\u003e tempSegment \u003d \n+            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n+\n+          // Insert new merged segment into the sorted list\n+          int pos \u003d Collections.binarySearch(segments, tempSegment,\n+                                             segmentComparator);\n+          if (pos \u003c 0) {\n+            // binary search failed. So position to be inserted at is -pos-1\n+            pos \u003d -pos-1;\n+          }\n+          segments.add(pos, tempSegment);\n+          numSegments \u003d segments.size();\n+          \n+          // Subtract the difference between expected size of new segment and \n+          // actual size of new segment(Expected size of new segment is\n+          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n+          // size will match(almost) if combiner is not called in merge.\n+          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n+                                       bytesProcessedInPrevMerges;\n+          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getLength();\n+          if (totalBytes !\u003d 0) {\n+            progPerByte \u003d 1.0f / (float)totalBytes;\n+          }\n+          \n+          passNo++;\n+        }\n+        //we are worried about only the first pass merge factor. So reset the \n+        //factor to what it originally was\n+        factor \u003d origFactor;\n+      } while(true);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    RawKeyValueIterator merge(Class\u003cK\u003e keyClass, Class\u003cV\u003e valueClass,\n                                     int factor, int inMem, Path tmpDir,\n                                     Counters.Counter readsCounter,\n                                     Counters.Counter writesCounter,\n                                     Progress mergePhase)\n        throws IOException {\n      LOG.info(\"Merging \" + segments.size() + \" sorted segments\");\n\n      /*\n       * If there are inMemory segments, then they come first in the segments\n       * list and then the sorted disk segments. Otherwise(if there are only\n       * disk segments), then they are sorted segments if there are more than\n       * factor segments in the segments list.\n       */\n      int numSegments \u003d segments.size();\n      int origFactor \u003d factor;\n      int passNo \u003d 1;\n      if (mergePhase !\u003d null) {\n        mergeProgress \u003d mergePhase;\n      }\n\n      long totalBytes \u003d computeBytesInMerges(factor, inMem);\n      if (totalBytes !\u003d 0) {\n        progPerByte \u003d 1.0f / (float)totalBytes;\n      }\n      \n      //create the MergeStreams from the sorted map created in the constructor\n      //and dump the final output to a file\n      do {\n        //get the factor for this pass of merge. We assume in-memory segments\n        //are the first entries in the segment list and that the pass factor\n        //doesn\u0027t apply to them\n        factor \u003d getPassFactor(factor, passNo, numSegments - inMem);\n        if (1 \u003d\u003d passNo) {\n          factor +\u003d inMem;\n        }\n        List\u003cSegment\u003cK, V\u003e\u003e segmentsToMerge \u003d\n          new ArrayList\u003cSegment\u003cK, V\u003e\u003e();\n        int segmentsConsidered \u003d 0;\n        int numSegmentsToConsider \u003d factor;\n        long startBytes \u003d 0; // starting bytes of segments of this merge\n        while (true) {\n          //extract the smallest \u0027factor\u0027 number of segments  \n          //Call cleanup on the empty segments (no key/value data)\n          List\u003cSegment\u003cK, V\u003e\u003e mStream \u003d \n            getSegmentDescriptors(numSegmentsToConsider);\n          for (Segment\u003cK, V\u003e segment : mStream) {\n            // Initialize the segment at the last possible moment;\n            // this helps in ensuring we don\u0027t use buffers until we need them\n            segment.init(readsCounter);\n            long startPos \u003d segment.getPosition();\n            boolean hasNext \u003d segment.nextRawKey();\n            long endPos \u003d segment.getPosition();\n            \n            if (hasNext) {\n              startBytes +\u003d endPos - startPos;\n              segmentsToMerge.add(segment);\n              segmentsConsidered++;\n            }\n            else {\n              segment.close();\n              numSegments--; //we ignore this segment for the merge\n            }\n          }\n          //if we have the desired number of segments\n          //or looked at all available segments, we break\n          if (segmentsConsidered \u003d\u003d factor || \n              segments.size() \u003d\u003d 0) {\n            break;\n          }\n            \n          numSegmentsToConsider \u003d factor - segmentsConsidered;\n        }\n        \n        //feed the streams to the priority queue\n        initialize(segmentsToMerge.size());\n        clear();\n        for (Segment\u003cK, V\u003e segment : segmentsToMerge) {\n          put(segment);\n        }\n        \n        //if we have lesser number of segments remaining, then just return the\n        //iterator, else do another single level merge\n        if (numSegments \u003c\u003d factor) {\n          if (!includeFinalMerge) { // for reduce task\n\n            // Reset totalBytesProcessed and recalculate totalBytes from the\n            // remaining segments to track the progress of the final merge.\n            // Final merge is considered as the progress of the reducePhase,\n            // the 3rd phase of reduce task.\n            totalBytesProcessed \u003d 0;\n            totalBytes \u003d 0;\n            for (int i \u003d 0; i \u003c segmentsToMerge.size(); i++) {\n              totalBytes +\u003d segmentsToMerge.get(i).getLength();\n            }\n          }\n          if (totalBytes !\u003d 0) //being paranoid\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          \n          totalBytesProcessed +\u003d startBytes;         \n          if (totalBytes !\u003d 0)\n            mergeProgress.set(totalBytesProcessed * progPerByte);\n          else\n            mergeProgress.set(1.0f); // Last pass and no segments left - we\u0027re done\n          \n          LOG.info(\"Down to the last merge-pass, with \" + numSegments + \n                   \" segments left of total size: \" +\n                   (totalBytes - totalBytesProcessed) + \" bytes\");\n          return this;\n        } else {\n          LOG.info(\"Merging \" + segmentsToMerge.size() + \n                   \" intermediate segments out of a total of \" + \n                   (segments.size()+segmentsToMerge.size()));\n          \n          long bytesProcessedInPrevMerges \u003d totalBytesProcessed;\n          totalBytesProcessed +\u003d startBytes;\n\n          //we want to spread the creation of temp files on multiple disks if \n          //available under the space constraints\n          long approxOutputSize \u003d 0; \n          for (Segment\u003cK, V\u003e s : segmentsToMerge) {\n            approxOutputSize +\u003d s.getLength() + \n                                ChecksumFileSystem.getApproxChkSumLength(\n                                s.getLength());\n          }\n          Path tmpFilename \u003d \n            new Path(tmpDir, \"intermediate\").suffix(\".\" + passNo);\n\n          Path outputFile \u003d  lDirAlloc.getLocalPathForWrite(\n                                              tmpFilename.toString(),\n                                              approxOutputSize, conf);\n\n          Writer\u003cK, V\u003e writer \u003d \n            new Writer\u003cK, V\u003e(conf, fs, outputFile, keyClass, valueClass, codec,\n                             writesCounter);\n          writeFile(this, writer, reporter, conf);\n          writer.close();\n          \n          //we finished one single level merge; now clean up the priority \n          //queue\n          this.close();\n\n          // Add the newly create segment to the list of segments to be merged\n          Segment\u003cK, V\u003e tempSegment \u003d \n            new Segment\u003cK, V\u003e(conf, fs, outputFile, codec, false);\n\n          // Insert new merged segment into the sorted list\n          int pos \u003d Collections.binarySearch(segments, tempSegment,\n                                             segmentComparator);\n          if (pos \u003c 0) {\n            // binary search failed. So position to be inserted at is -pos-1\n            pos \u003d -pos-1;\n          }\n          segments.add(pos, tempSegment);\n          numSegments \u003d segments.size();\n          \n          // Subtract the difference between expected size of new segment and \n          // actual size of new segment(Expected size of new segment is\n          // inputBytesOfThisMerge) from totalBytes. Expected size and actual\n          // size will match(almost) if combiner is not called in merge.\n          long inputBytesOfThisMerge \u003d totalBytesProcessed -\n                                       bytesProcessedInPrevMerges;\n          totalBytes -\u003d inputBytesOfThisMerge - tempSegment.getLength();\n          if (totalBytes !\u003d 0) {\n            progPerByte \u003d 1.0f / (float)totalBytes;\n          }\n          \n          passNo++;\n        }\n        //we are worried about only the first pass merge factor. So reset the \n        //factor to what it originally was\n        factor \u003d origFactor;\n      } while(true);\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/Merger.java"
    }
  }
}