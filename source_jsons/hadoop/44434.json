{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "setAMResourceCapability",
  "functionId": "setAMResourceCapability___appContext-ApplicationSubmissionContext__profiles-Map__String,Resource____resourceTypes-List__ResourceTypeInfo__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
  "functionStartLine": 1263,
  "functionEndLine": 1314,
  "numCommitsSeen": 126,
  "timeTaken": 4377,
  "changeHistory": [
    "aae629913cee0157c945a2c7384c7bf398f10616",
    "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14",
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
    "7805deed4896e470ebd2f6bbd1ba9962947c63cd"
  ],
  "changeHistoryShort": {
    "aae629913cee0157c945a2c7384c7bf398f10616": "Ybodychange",
    "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d": "Ybodychange",
    "7805deed4896e470ebd2f6bbd1ba9962947c63cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aae629913cee0157c945a2c7384c7bf398f10616": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7292. Retrospect Resource Profile Behavior for overriding capability. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 11:07 PM",
      "commitName": "aae629913cee0157c945a2c7384c7bf398f10616",
      "commitAuthor": "Sunil G",
      "commitDateOld": "10/02/18 10:20 PM",
      "commitNameOld": "a08c048832d68c203fbdfce8d9f0e7dcccb02a55",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 5.03,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,52 @@\n   private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n       Map\u003cString, Resource\u003e profiles, List\u003cResourceTypeInfo\u003e resourceTypes)\n       throws IllegalArgumentException, IOException, YarnException {\n     if (amMemory \u003c -1 || amMemory \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid memory specified for\"\n           + \" application master, exiting. Specified memory\u003d\" + amMemory);\n     }\n     if (amVCores \u003c -1 || amVCores \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n           + \" application master, exiting. \" +\n           \"Specified virtual cores\u003d\" + amVCores);\n     }\n-    String tmp \u003d amResourceProfile;\n-    if (amResourceProfile.isEmpty()) {\n-      tmp \u003d \"default\";\n+    Resource capability \u003d Resource.newInstance(0, 0);\n+\n+    if (!amResourceProfile.isEmpty()) {\n+      if (!profiles.containsKey(amResourceProfile)) {\n+        throw new IllegalArgumentException(\n+            \"Failed to find specified resource profile for application master\u003d\"\n+                + amResourceProfile);\n+      }\n+      capability \u003d Resources.clone(profiles.get(amResourceProfile));\n     }\n+\n     if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n       List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n       amResourceRequests\n           .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),\n               \"*\", Resources.clone(Resources.none()), 1));\n       appContext.setAMContainerResourceRequests(amResourceRequests);\n     }\n \n-    if (appContext.getAMContainerResourceRequests().get(0)\n-        .getProfileCapability() \u003d\u003d null) {\n-      appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n-          ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n-    }\n-\n-    Resource capability \u003d Resource.newInstance(0, 0);\n-\n     validateResourceTypes(amResources.keySet(), resourceTypes);\n     for (Map.Entry\u003cString, Long\u003e entry : amResources.entrySet()) {\n       capability.setResourceValue(entry.getKey(), entry.getValue());\n     }\n     // set amMemory because it\u0027s used to set Xmx param\n     if (amMemory \u003d\u003d -1) {\n-      amMemory \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_MEMORY :\n-          profiles.get(tmp).getMemorySize();\n+      amMemory \u003d DEFAULT_AM_MEMORY;\n+      LOG.warn(\"AM Memory not specified, use \" + DEFAULT_AM_MEMORY\n+          + \" mb as AM memory\");\n     }\n     if (amVCores \u003d\u003d -1) {\n-      amVCores \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_VCORES :\n-          profiles.get(tmp).getVirtualCores();\n+      amVCores \u003d DEFAULT_AM_VCORES;\n+      LOG.warn(\"AM vcore not specified, use \" + DEFAULT_AM_VCORES\n+          + \" mb as AM vcores\");\n     }\n     capability.setMemorySize(amMemory);\n     capability.setVirtualCores(amVCores);\n-    appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n-        .setProfileCapabilityOverride(capability);\n+    appContext.getAMContainerResourceRequests().get(0).setCapability(\n+        capability);\n+    LOG.warn(\"AM Resource capability\u003d\" + capability);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n      Map\u003cString, Resource\u003e profiles, List\u003cResourceTypeInfo\u003e resourceTypes)\n      throws IllegalArgumentException, IOException, YarnException {\n    if (amMemory \u003c -1 || amMemory \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid memory specified for\"\n          + \" application master, exiting. Specified memory\u003d\" + amMemory);\n    }\n    if (amVCores \u003c -1 || amVCores \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n          + \" application master, exiting. \" +\n          \"Specified virtual cores\u003d\" + amVCores);\n    }\n    Resource capability \u003d Resource.newInstance(0, 0);\n\n    if (!amResourceProfile.isEmpty()) {\n      if (!profiles.containsKey(amResourceProfile)) {\n        throw new IllegalArgumentException(\n            \"Failed to find specified resource profile for application master\u003d\"\n                + amResourceProfile);\n      }\n      capability \u003d Resources.clone(profiles.get(amResourceProfile));\n    }\n\n    if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n      List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n      amResourceRequests\n          .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),\n              \"*\", Resources.clone(Resources.none()), 1));\n      appContext.setAMContainerResourceRequests(amResourceRequests);\n    }\n\n    validateResourceTypes(amResources.keySet(), resourceTypes);\n    for (Map.Entry\u003cString, Long\u003e entry : amResources.entrySet()) {\n      capability.setResourceValue(entry.getKey(), entry.getValue());\n    }\n    // set amMemory because it\u0027s used to set Xmx param\n    if (amMemory \u003d\u003d -1) {\n      amMemory \u003d DEFAULT_AM_MEMORY;\n      LOG.warn(\"AM Memory not specified, use \" + DEFAULT_AM_MEMORY\n          + \" mb as AM memory\");\n    }\n    if (amVCores \u003d\u003d -1) {\n      amVCores \u003d DEFAULT_AM_VCORES;\n      LOG.warn(\"AM vcore not specified, use \" + DEFAULT_AM_VCORES\n          + \" mb as AM vcores\");\n    }\n    capability.setMemorySize(amMemory);\n    capability.setVirtualCores(amVCores);\n    appContext.getAMContainerResourceRequests().get(0).setCapability(\n        capability);\n    LOG.warn(\"AM Resource capability\u003d\" + capability);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {}
    },
    "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7242. Support to specify values of different resource types in DistributedShell for easier testing. Contributed by Gergely Novák.\n",
      "commitDate": "07/01/18 10:29 PM",
      "commitName": "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7242. Support to specify values of different resource types in DistributedShell for easier testing. Contributed by Gergely Novák.\n",
          "commitDate": "07/01/18 10:29 PM",
          "commitName": "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14",
          "commitAuthor": "Sunil G",
          "commitDateOld": "17/12/17 6:07 PM",
          "commitNameOld": "928964102029e96406f5482e8900802f38164501",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 21.18,
          "commitsBetweenForRepo": 67,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,50 @@\n   private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n-      long memory, int vcores, String profile, int priority,\n-      Map\u003cString, Resource\u003e profiles) throws IllegalArgumentException {\n-    if (memory \u003c -1 || memory \u003d\u003d 0) {\n+      Map\u003cString, Resource\u003e profiles, List\u003cResourceTypeInfo\u003e resourceTypes)\n+      throws IllegalArgumentException, IOException, YarnException {\n+    if (amMemory \u003c -1 || amMemory \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid memory specified for\"\n-          + \" application master, exiting. Specified memory\u003d\" + memory);\n+          + \" application master, exiting. Specified memory\u003d\" + amMemory);\n     }\n-    if (vcores \u003c -1 || vcores \u003d\u003d 0) {\n+    if (amVCores \u003c -1 || amVCores \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n-          + \" application master, exiting. Specified virtual cores\u003d\" + vcores);\n+          + \" application master, exiting. \" +\n+          \"Specified virtual cores\u003d\" + amVCores);\n     }\n-    String tmp \u003d profile;\n-    if (profile.isEmpty()) {\n+    String tmp \u003d amResourceProfile;\n+    if (amResourceProfile.isEmpty()) {\n       tmp \u003d \"default\";\n     }\n     if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n       List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n       amResourceRequests\n-          .add(ResourceRequest.newInstance(Priority.newInstance(priority), \"*\",\n-              Resources.clone(Resources.none()), 1));\n+          .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),\n+              \"*\", Resources.clone(Resources.none()), 1));\n       appContext.setAMContainerResourceRequests(amResourceRequests);\n     }\n \n     if (appContext.getAMContainerResourceRequests().get(0)\n         .getProfileCapability() \u003d\u003d null) {\n       appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n           ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n     }\n+\n     Resource capability \u003d Resource.newInstance(0, 0);\n-    // set amMemory because it\u0027s used to set Xmx param\n-    if (profiles \u003d\u003d null) {\n-      amMemory \u003d memory \u003d\u003d -1 ? DEFAULT_AM_MEMORY : memory;\n-      amVCores \u003d vcores \u003d\u003d -1 ? DEFAULT_AM_VCORES : vcores;\n-      capability.setMemorySize(amMemory);\n-      capability.setVirtualCores(amVCores);\n-    } else {\n-      amMemory \u003d memory \u003d\u003d -1 ? profiles.get(tmp).getMemorySize() : memory;\n-      amVCores \u003d vcores \u003d\u003d -1 ? profiles.get(tmp).getVirtualCores() : vcores;\n-      capability.setMemorySize(memory);\n-      capability.setVirtualCores(vcores);\n+\n+    validateResourceTypes(amResources.keySet(), resourceTypes);\n+    for (Map.Entry\u003cString, Long\u003e entry : amResources.entrySet()) {\n+      capability.setResourceValue(entry.getKey(), entry.getValue());\n     }\n+    // set amMemory because it\u0027s used to set Xmx param\n+    if (amMemory \u003d\u003d -1) {\n+      amMemory \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_MEMORY :\n+          profiles.get(tmp).getMemorySize();\n+    }\n+    if (amVCores \u003d\u003d -1) {\n+      amVCores \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_VCORES :\n+          profiles.get(tmp).getVirtualCores();\n+    }\n+    capability.setMemorySize(amMemory);\n+    capability.setVirtualCores(amVCores);\n     appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n         .setProfileCapabilityOverride(capability);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n      Map\u003cString, Resource\u003e profiles, List\u003cResourceTypeInfo\u003e resourceTypes)\n      throws IllegalArgumentException, IOException, YarnException {\n    if (amMemory \u003c -1 || amMemory \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid memory specified for\"\n          + \" application master, exiting. Specified memory\u003d\" + amMemory);\n    }\n    if (amVCores \u003c -1 || amVCores \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n          + \" application master, exiting. \" +\n          \"Specified virtual cores\u003d\" + amVCores);\n    }\n    String tmp \u003d amResourceProfile;\n    if (amResourceProfile.isEmpty()) {\n      tmp \u003d \"default\";\n    }\n    if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n      List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n      amResourceRequests\n          .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),\n              \"*\", Resources.clone(Resources.none()), 1));\n      appContext.setAMContainerResourceRequests(amResourceRequests);\n    }\n\n    if (appContext.getAMContainerResourceRequests().get(0)\n        .getProfileCapability() \u003d\u003d null) {\n      appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n          ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n    }\n\n    Resource capability \u003d Resource.newInstance(0, 0);\n\n    validateResourceTypes(amResources.keySet(), resourceTypes);\n    for (Map.Entry\u003cString, Long\u003e entry : amResources.entrySet()) {\n      capability.setResourceValue(entry.getKey(), entry.getValue());\n    }\n    // set amMemory because it\u0027s used to set Xmx param\n    if (amMemory \u003d\u003d -1) {\n      amMemory \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_MEMORY :\n          profiles.get(tmp).getMemorySize();\n    }\n    if (amVCores \u003d\u003d -1) {\n      amVCores \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_VCORES :\n          profiles.get(tmp).getVirtualCores();\n    }\n    capability.setMemorySize(amMemory);\n    capability.setVirtualCores(amVCores);\n    appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n        .setProfileCapabilityOverride(capability);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
          "extendedDetails": {
            "oldValue": "[appContext-ApplicationSubmissionContext, memory-long, vcores-int, profile-String, priority-int, profiles-Map\u003cString,Resource\u003e]",
            "newValue": "[appContext-ApplicationSubmissionContext, profiles-Map\u003cString,Resource\u003e, resourceTypes-List\u003cResourceTypeInfo\u003e]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7242. Support to specify values of different resource types in DistributedShell for easier testing. Contributed by Gergely Novák.\n",
          "commitDate": "07/01/18 10:29 PM",
          "commitName": "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14",
          "commitAuthor": "Sunil G",
          "commitDateOld": "17/12/17 6:07 PM",
          "commitNameOld": "928964102029e96406f5482e8900802f38164501",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 21.18,
          "commitsBetweenForRepo": 67,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,50 @@\n   private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n-      long memory, int vcores, String profile, int priority,\n-      Map\u003cString, Resource\u003e profiles) throws IllegalArgumentException {\n-    if (memory \u003c -1 || memory \u003d\u003d 0) {\n+      Map\u003cString, Resource\u003e profiles, List\u003cResourceTypeInfo\u003e resourceTypes)\n+      throws IllegalArgumentException, IOException, YarnException {\n+    if (amMemory \u003c -1 || amMemory \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid memory specified for\"\n-          + \" application master, exiting. Specified memory\u003d\" + memory);\n+          + \" application master, exiting. Specified memory\u003d\" + amMemory);\n     }\n-    if (vcores \u003c -1 || vcores \u003d\u003d 0) {\n+    if (amVCores \u003c -1 || amVCores \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n-          + \" application master, exiting. Specified virtual cores\u003d\" + vcores);\n+          + \" application master, exiting. \" +\n+          \"Specified virtual cores\u003d\" + amVCores);\n     }\n-    String tmp \u003d profile;\n-    if (profile.isEmpty()) {\n+    String tmp \u003d amResourceProfile;\n+    if (amResourceProfile.isEmpty()) {\n       tmp \u003d \"default\";\n     }\n     if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n       List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n       amResourceRequests\n-          .add(ResourceRequest.newInstance(Priority.newInstance(priority), \"*\",\n-              Resources.clone(Resources.none()), 1));\n+          .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),\n+              \"*\", Resources.clone(Resources.none()), 1));\n       appContext.setAMContainerResourceRequests(amResourceRequests);\n     }\n \n     if (appContext.getAMContainerResourceRequests().get(0)\n         .getProfileCapability() \u003d\u003d null) {\n       appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n           ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n     }\n+\n     Resource capability \u003d Resource.newInstance(0, 0);\n-    // set amMemory because it\u0027s used to set Xmx param\n-    if (profiles \u003d\u003d null) {\n-      amMemory \u003d memory \u003d\u003d -1 ? DEFAULT_AM_MEMORY : memory;\n-      amVCores \u003d vcores \u003d\u003d -1 ? DEFAULT_AM_VCORES : vcores;\n-      capability.setMemorySize(amMemory);\n-      capability.setVirtualCores(amVCores);\n-    } else {\n-      amMemory \u003d memory \u003d\u003d -1 ? profiles.get(tmp).getMemorySize() : memory;\n-      amVCores \u003d vcores \u003d\u003d -1 ? profiles.get(tmp).getVirtualCores() : vcores;\n-      capability.setMemorySize(memory);\n-      capability.setVirtualCores(vcores);\n+\n+    validateResourceTypes(amResources.keySet(), resourceTypes);\n+    for (Map.Entry\u003cString, Long\u003e entry : amResources.entrySet()) {\n+      capability.setResourceValue(entry.getKey(), entry.getValue());\n     }\n+    // set amMemory because it\u0027s used to set Xmx param\n+    if (amMemory \u003d\u003d -1) {\n+      amMemory \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_MEMORY :\n+          profiles.get(tmp).getMemorySize();\n+    }\n+    if (amVCores \u003d\u003d -1) {\n+      amVCores \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_VCORES :\n+          profiles.get(tmp).getVirtualCores();\n+    }\n+    capability.setMemorySize(amMemory);\n+    capability.setVirtualCores(amVCores);\n     appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n         .setProfileCapabilityOverride(capability);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n      Map\u003cString, Resource\u003e profiles, List\u003cResourceTypeInfo\u003e resourceTypes)\n      throws IllegalArgumentException, IOException, YarnException {\n    if (amMemory \u003c -1 || amMemory \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid memory specified for\"\n          + \" application master, exiting. Specified memory\u003d\" + amMemory);\n    }\n    if (amVCores \u003c -1 || amVCores \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n          + \" application master, exiting. \" +\n          \"Specified virtual cores\u003d\" + amVCores);\n    }\n    String tmp \u003d amResourceProfile;\n    if (amResourceProfile.isEmpty()) {\n      tmp \u003d \"default\";\n    }\n    if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n      List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n      amResourceRequests\n          .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),\n              \"*\", Resources.clone(Resources.none()), 1));\n      appContext.setAMContainerResourceRequests(amResourceRequests);\n    }\n\n    if (appContext.getAMContainerResourceRequests().get(0)\n        .getProfileCapability() \u003d\u003d null) {\n      appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n          ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n    }\n\n    Resource capability \u003d Resource.newInstance(0, 0);\n\n    validateResourceTypes(amResources.keySet(), resourceTypes);\n    for (Map.Entry\u003cString, Long\u003e entry : amResources.entrySet()) {\n      capability.setResourceValue(entry.getKey(), entry.getValue());\n    }\n    // set amMemory because it\u0027s used to set Xmx param\n    if (amMemory \u003d\u003d -1) {\n      amMemory \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_MEMORY :\n          profiles.get(tmp).getMemorySize();\n    }\n    if (amVCores \u003d\u003d -1) {\n      amVCores \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_VCORES :\n          profiles.get(tmp).getVirtualCores();\n    }\n    capability.setMemorySize(amMemory);\n    capability.setVirtualCores(amVCores);\n    appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n        .setProfileCapabilityOverride(capability);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
          "extendedDetails": {
            "oldValue": "[IllegalArgumentException]",
            "newValue": "[IllegalArgumentException, IOException, YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7242. Support to specify values of different resource types in DistributedShell for easier testing. Contributed by Gergely Novák.\n",
          "commitDate": "07/01/18 10:29 PM",
          "commitName": "01f3f2167ec20b52a18bc2cf250fb4229cfd2c14",
          "commitAuthor": "Sunil G",
          "commitDateOld": "17/12/17 6:07 PM",
          "commitNameOld": "928964102029e96406f5482e8900802f38164501",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 21.18,
          "commitsBetweenForRepo": 67,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,50 @@\n   private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n-      long memory, int vcores, String profile, int priority,\n-      Map\u003cString, Resource\u003e profiles) throws IllegalArgumentException {\n-    if (memory \u003c -1 || memory \u003d\u003d 0) {\n+      Map\u003cString, Resource\u003e profiles, List\u003cResourceTypeInfo\u003e resourceTypes)\n+      throws IllegalArgumentException, IOException, YarnException {\n+    if (amMemory \u003c -1 || amMemory \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid memory specified for\"\n-          + \" application master, exiting. Specified memory\u003d\" + memory);\n+          + \" application master, exiting. Specified memory\u003d\" + amMemory);\n     }\n-    if (vcores \u003c -1 || vcores \u003d\u003d 0) {\n+    if (amVCores \u003c -1 || amVCores \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n-          + \" application master, exiting. Specified virtual cores\u003d\" + vcores);\n+          + \" application master, exiting. \" +\n+          \"Specified virtual cores\u003d\" + amVCores);\n     }\n-    String tmp \u003d profile;\n-    if (profile.isEmpty()) {\n+    String tmp \u003d amResourceProfile;\n+    if (amResourceProfile.isEmpty()) {\n       tmp \u003d \"default\";\n     }\n     if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n       List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n       amResourceRequests\n-          .add(ResourceRequest.newInstance(Priority.newInstance(priority), \"*\",\n-              Resources.clone(Resources.none()), 1));\n+          .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),\n+              \"*\", Resources.clone(Resources.none()), 1));\n       appContext.setAMContainerResourceRequests(amResourceRequests);\n     }\n \n     if (appContext.getAMContainerResourceRequests().get(0)\n         .getProfileCapability() \u003d\u003d null) {\n       appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n           ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n     }\n+\n     Resource capability \u003d Resource.newInstance(0, 0);\n-    // set amMemory because it\u0027s used to set Xmx param\n-    if (profiles \u003d\u003d null) {\n-      amMemory \u003d memory \u003d\u003d -1 ? DEFAULT_AM_MEMORY : memory;\n-      amVCores \u003d vcores \u003d\u003d -1 ? DEFAULT_AM_VCORES : vcores;\n-      capability.setMemorySize(amMemory);\n-      capability.setVirtualCores(amVCores);\n-    } else {\n-      amMemory \u003d memory \u003d\u003d -1 ? profiles.get(tmp).getMemorySize() : memory;\n-      amVCores \u003d vcores \u003d\u003d -1 ? profiles.get(tmp).getVirtualCores() : vcores;\n-      capability.setMemorySize(memory);\n-      capability.setVirtualCores(vcores);\n+\n+    validateResourceTypes(amResources.keySet(), resourceTypes);\n+    for (Map.Entry\u003cString, Long\u003e entry : amResources.entrySet()) {\n+      capability.setResourceValue(entry.getKey(), entry.getValue());\n     }\n+    // set amMemory because it\u0027s used to set Xmx param\n+    if (amMemory \u003d\u003d -1) {\n+      amMemory \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_MEMORY :\n+          profiles.get(tmp).getMemorySize();\n+    }\n+    if (amVCores \u003d\u003d -1) {\n+      amVCores \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_VCORES :\n+          profiles.get(tmp).getVirtualCores();\n+    }\n+    capability.setMemorySize(amMemory);\n+    capability.setVirtualCores(amVCores);\n     appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n         .setProfileCapabilityOverride(capability);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n      Map\u003cString, Resource\u003e profiles, List\u003cResourceTypeInfo\u003e resourceTypes)\n      throws IllegalArgumentException, IOException, YarnException {\n    if (amMemory \u003c -1 || amMemory \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid memory specified for\"\n          + \" application master, exiting. Specified memory\u003d\" + amMemory);\n    }\n    if (amVCores \u003c -1 || amVCores \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n          + \" application master, exiting. \" +\n          \"Specified virtual cores\u003d\" + amVCores);\n    }\n    String tmp \u003d amResourceProfile;\n    if (amResourceProfile.isEmpty()) {\n      tmp \u003d \"default\";\n    }\n    if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n      List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n      amResourceRequests\n          .add(ResourceRequest.newInstance(Priority.newInstance(amPriority),\n              \"*\", Resources.clone(Resources.none()), 1));\n      appContext.setAMContainerResourceRequests(amResourceRequests);\n    }\n\n    if (appContext.getAMContainerResourceRequests().get(0)\n        .getProfileCapability() \u003d\u003d null) {\n      appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n          ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n    }\n\n    Resource capability \u003d Resource.newInstance(0, 0);\n\n    validateResourceTypes(amResources.keySet(), resourceTypes);\n    for (Map.Entry\u003cString, Long\u003e entry : amResources.entrySet()) {\n      capability.setResourceValue(entry.getKey(), entry.getValue());\n    }\n    // set amMemory because it\u0027s used to set Xmx param\n    if (amMemory \u003d\u003d -1) {\n      amMemory \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_MEMORY :\n          profiles.get(tmp).getMemorySize();\n    }\n    if (amVCores \u003d\u003d -1) {\n      amVCores \u003d (profiles \u003d\u003d null) ? DEFAULT_AM_VCORES :\n          profiles.get(tmp).getVirtualCores();\n    }\n    capability.setMemorySize(amMemory);\n    capability.setVirtualCores(amVCores);\n    appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n        .setProfileCapabilityOverride(capability);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7039. Fix javac and javadoc errors in YARN-3926 branch. (Sunil G via wangda)\n\nChange-Id: I442bf6d838b3aba83f1f6779cf9dcf8596a2102d\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "7805deed4896e470ebd2f6bbd1ba9962947c63cd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n       long memory, int vcores, String profile, int priority,\n       Map\u003cString, Resource\u003e profiles) throws IllegalArgumentException {\n     if (memory \u003c -1 || memory \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid memory specified for\"\n           + \" application master, exiting. Specified memory\u003d\" + memory);\n     }\n     if (vcores \u003c -1 || vcores \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n           + \" application master, exiting. Specified virtual cores\u003d\" + vcores);\n     }\n     String tmp \u003d profile;\n     if (profile.isEmpty()) {\n       tmp \u003d \"default\";\n     }\n-    if (appContext.getAMContainerResourceRequest() \u003d\u003d null) {\n-      appContext.setAMContainerResourceRequest(ResourceRequest\n-          .newInstance(Priority.newInstance(priority), \"*\",\n+    if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n+      List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n+      amResourceRequests\n+          .add(ResourceRequest.newInstance(Priority.newInstance(priority), \"*\",\n               Resources.clone(Resources.none()), 1));\n+      appContext.setAMContainerResourceRequests(amResourceRequests);\n     }\n \n-    if (appContext.getAMContainerResourceRequest().getProfileCapability()\n-        \u003d\u003d null) {\n-      appContext.getAMContainerResourceRequest().setProfileCapability(\n+    if (appContext.getAMContainerResourceRequests().get(0)\n+        .getProfileCapability() \u003d\u003d null) {\n+      appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n           ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n     }\n     Resource capability \u003d Resource.newInstance(0, 0);\n     // set amMemory because it\u0027s used to set Xmx param\n     if (profiles \u003d\u003d null) {\n       amMemory \u003d memory \u003d\u003d -1 ? DEFAULT_AM_MEMORY : memory;\n       amVCores \u003d vcores \u003d\u003d -1 ? DEFAULT_AM_VCORES : vcores;\n       capability.setMemorySize(amMemory);\n       capability.setVirtualCores(amVCores);\n     } else {\n       amMemory \u003d memory \u003d\u003d -1 ? profiles.get(tmp).getMemorySize() : memory;\n       amVCores \u003d vcores \u003d\u003d -1 ? profiles.get(tmp).getVirtualCores() : vcores;\n       capability.setMemorySize(memory);\n       capability.setVirtualCores(vcores);\n     }\n-    appContext.getAMContainerResourceRequest().getProfileCapability()\n+    appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n         .setProfileCapabilityOverride(capability);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n      long memory, int vcores, String profile, int priority,\n      Map\u003cString, Resource\u003e profiles) throws IllegalArgumentException {\n    if (memory \u003c -1 || memory \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid memory specified for\"\n          + \" application master, exiting. Specified memory\u003d\" + memory);\n    }\n    if (vcores \u003c -1 || vcores \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n          + \" application master, exiting. Specified virtual cores\u003d\" + vcores);\n    }\n    String tmp \u003d profile;\n    if (profile.isEmpty()) {\n      tmp \u003d \"default\";\n    }\n    if (appContext.getAMContainerResourceRequests() \u003d\u003d null) {\n      List\u003cResourceRequest\u003e amResourceRequests \u003d new ArrayList\u003cResourceRequest\u003e();\n      amResourceRequests\n          .add(ResourceRequest.newInstance(Priority.newInstance(priority), \"*\",\n              Resources.clone(Resources.none()), 1));\n      appContext.setAMContainerResourceRequests(amResourceRequests);\n    }\n\n    if (appContext.getAMContainerResourceRequests().get(0)\n        .getProfileCapability() \u003d\u003d null) {\n      appContext.getAMContainerResourceRequests().get(0).setProfileCapability(\n          ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n    }\n    Resource capability \u003d Resource.newInstance(0, 0);\n    // set amMemory because it\u0027s used to set Xmx param\n    if (profiles \u003d\u003d null) {\n      amMemory \u003d memory \u003d\u003d -1 ? DEFAULT_AM_MEMORY : memory;\n      amVCores \u003d vcores \u003d\u003d -1 ? DEFAULT_AM_VCORES : vcores;\n      capability.setMemorySize(amMemory);\n      capability.setVirtualCores(amVCores);\n    } else {\n      amMemory \u003d memory \u003d\u003d -1 ? profiles.get(tmp).getMemorySize() : memory;\n      amVCores \u003d vcores \u003d\u003d -1 ? profiles.get(tmp).getVirtualCores() : vcores;\n      capability.setMemorySize(memory);\n      capability.setVirtualCores(vcores);\n    }\n    appContext.getAMContainerResourceRequests().get(0).getProfileCapability()\n        .setProfileCapabilityOverride(capability);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {}
    },
    "7805deed4896e470ebd2f6bbd1ba9962947c63cd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5588. [YARN-3926] Add support for resource profiles in distributed shell. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "7805deed4896e470ebd2f6bbd1ba9962947c63cd",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,42 @@\n+  private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n+      long memory, int vcores, String profile, int priority,\n+      Map\u003cString, Resource\u003e profiles) throws IllegalArgumentException {\n+    if (memory \u003c -1 || memory \u003d\u003d 0) {\n+      throw new IllegalArgumentException(\"Invalid memory specified for\"\n+          + \" application master, exiting. Specified memory\u003d\" + memory);\n+    }\n+    if (vcores \u003c -1 || vcores \u003d\u003d 0) {\n+      throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n+          + \" application master, exiting. Specified virtual cores\u003d\" + vcores);\n+    }\n+    String tmp \u003d profile;\n+    if (profile.isEmpty()) {\n+      tmp \u003d \"default\";\n+    }\n+    if (appContext.getAMContainerResourceRequest() \u003d\u003d null) {\n+      appContext.setAMContainerResourceRequest(ResourceRequest\n+          .newInstance(Priority.newInstance(priority), \"*\",\n+              Resources.clone(Resources.none()), 1));\n+    }\n+\n+    if (appContext.getAMContainerResourceRequest().getProfileCapability()\n+        \u003d\u003d null) {\n+      appContext.getAMContainerResourceRequest().setProfileCapability(\n+          ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n+    }\n+    Resource capability \u003d Resource.newInstance(0, 0);\n+    // set amMemory because it\u0027s used to set Xmx param\n+    if (profiles \u003d\u003d null) {\n+      amMemory \u003d memory \u003d\u003d -1 ? DEFAULT_AM_MEMORY : memory;\n+      amVCores \u003d vcores \u003d\u003d -1 ? DEFAULT_AM_VCORES : vcores;\n+      capability.setMemorySize(amMemory);\n+      capability.setVirtualCores(amVCores);\n+    } else {\n+      amMemory \u003d memory \u003d\u003d -1 ? profiles.get(tmp).getMemorySize() : memory;\n+      amVCores \u003d vcores \u003d\u003d -1 ? profiles.get(tmp).getVirtualCores() : vcores;\n+      capability.setMemorySize(memory);\n+      capability.setVirtualCores(vcores);\n+    }\n+    appContext.getAMContainerResourceRequest().getProfileCapability()\n+        .setProfileCapabilityOverride(capability);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setAMResourceCapability(ApplicationSubmissionContext appContext,\n      long memory, int vcores, String profile, int priority,\n      Map\u003cString, Resource\u003e profiles) throws IllegalArgumentException {\n    if (memory \u003c -1 || memory \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid memory specified for\"\n          + \" application master, exiting. Specified memory\u003d\" + memory);\n    }\n    if (vcores \u003c -1 || vcores \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"Invalid virtual cores specified for\"\n          + \" application master, exiting. Specified virtual cores\u003d\" + vcores);\n    }\n    String tmp \u003d profile;\n    if (profile.isEmpty()) {\n      tmp \u003d \"default\";\n    }\n    if (appContext.getAMContainerResourceRequest() \u003d\u003d null) {\n      appContext.setAMContainerResourceRequest(ResourceRequest\n          .newInstance(Priority.newInstance(priority), \"*\",\n              Resources.clone(Resources.none()), 1));\n    }\n\n    if (appContext.getAMContainerResourceRequest().getProfileCapability()\n        \u003d\u003d null) {\n      appContext.getAMContainerResourceRequest().setProfileCapability(\n          ProfileCapability.newInstance(tmp, Resource.newInstance(0, 0)));\n    }\n    Resource capability \u003d Resource.newInstance(0, 0);\n    // set amMemory because it\u0027s used to set Xmx param\n    if (profiles \u003d\u003d null) {\n      amMemory \u003d memory \u003d\u003d -1 ? DEFAULT_AM_MEMORY : memory;\n      amVCores \u003d vcores \u003d\u003d -1 ? DEFAULT_AM_VCORES : vcores;\n      capability.setMemorySize(amMemory);\n      capability.setVirtualCores(amVCores);\n    } else {\n      amMemory \u003d memory \u003d\u003d -1 ? profiles.get(tmp).getMemorySize() : memory;\n      amVCores \u003d vcores \u003d\u003d -1 ? profiles.get(tmp).getVirtualCores() : vcores;\n      capability.setMemorySize(memory);\n      capability.setVirtualCores(vcores);\n    }\n    appContext.getAMContainerResourceRequest().getProfileCapability()\n        .setProfileCapabilityOverride(capability);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java"
    }
  }
}