{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineServiceV2Publisher.java",
  "functionName": "appFinished",
  "functionId": "appFinished___app-RMApp__state-RMAppState__finishedTime-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
  "functionStartLine": 172,
  "functionEndLine": 203,
  "numCommitsSeen": 27,
  "timeTaken": 1496,
  "changeHistory": [
    "1a9439e299910032ce6a1919dece3107c1c9de5b",
    "b154d3edcee95254d41c237142870f39e826a519",
    "1f304b0c7f261369dd68839507bb609a949965ad",
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4"
  ],
  "changeHistoryShort": {
    "1a9439e299910032ce6a1919dece3107c1c9de5b": "Ybodychange",
    "b154d3edcee95254d41c237142870f39e826a519": "Ybodychange",
    "1f304b0c7f261369dd68839507bb609a949965ad": "Ybodychange",
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1a9439e299910032ce6a1919dece3107c1c9de5b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6424. TimelineCollector is not stopped when an app finishes in RM. Contributed by Varun Saxena.\n",
      "commitDate": "05/04/17 9:45 PM",
      "commitName": "1a9439e299910032ce6a1919dece3107c1c9de5b",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "22/11/16 1:19 AM",
      "commitNameOld": "a926f895c11cd69cf2117c3b970304f3f1f53d92",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 134.81,
      "commitsBetweenForRepo": 735,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   public void appFinished(RMApp app, RMAppState state, long finishedTime) {\n     ApplicationEntity entity \u003d createApplicationEntity(app.getApplicationId());\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n     tEvent.setTimestamp(finishedTime);\n     entity.addEvent(tEvent);\n \n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n     entityInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n         app.getDiagnostics().toString());\n     entityInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n         app.getFinalApplicationStatus().toString());\n     entityInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n         RMServerUtils.createApplicationState(state).toString());\n     ApplicationAttemptId appAttemptId \u003d app.getCurrentAppAttempt() \u003d\u003d null\n         ? null : app.getCurrentAppAttempt().getAppAttemptId();\n     if (appAttemptId !\u003d null) {\n       entityInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n           appAttemptId.toString());\n     }\n     entity.setInfo(entityInfo);\n \n     RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n     Set\u003cTimelineMetric\u003e entityMetrics \u003d\n         getTimelinelineAppMetrics(appMetrics, finishedTime);\n     entity.setMetrics(entityMetrics);\n \n-    getDispatcher().getEventHandler().handle(new TimelineV2PublishEvent(\n-        SystemMetricsEventType.PUBLISH_ENTITY, entity, app.getApplicationId()));\n+    getDispatcher().getEventHandler().handle(\n+        new ApplicationFinishPublishEvent(SystemMetricsEventType.\n+            PUBLISH_APPLICATION_FINISHED_ENTITY, entity, app));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void appFinished(RMApp app, RMAppState state, long finishedTime) {\n    ApplicationEntity entity \u003d createApplicationEntity(app.getApplicationId());\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n    tEvent.setTimestamp(finishedTime);\n    entity.addEvent(tEvent);\n\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n        app.getDiagnostics().toString());\n    entityInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n        app.getFinalApplicationStatus().toString());\n    entityInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n        RMServerUtils.createApplicationState(state).toString());\n    ApplicationAttemptId appAttemptId \u003d app.getCurrentAppAttempt() \u003d\u003d null\n        ? null : app.getCurrentAppAttempt().getAppAttemptId();\n    if (appAttemptId !\u003d null) {\n      entityInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n          appAttemptId.toString());\n    }\n    entity.setInfo(entityInfo);\n\n    RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n    Set\u003cTimelineMetric\u003e entityMetrics \u003d\n        getTimelinelineAppMetrics(appMetrics, finishedTime);\n    entity.setMetrics(entityMetrics);\n\n    getDispatcher().getEventHandler().handle(\n        new ApplicationFinishPublishEvent(SystemMetricsEventType.\n            PUBLISH_APPLICATION_FINISHED_ENTITY, entity, app));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
      "extendedDetails": {}
    },
    "b154d3edcee95254d41c237142870f39e826a519": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5743. [Atsv2] Publish queue name and RMAppMetrics to ATS (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "18/10/16 11:02 AM",
      "commitName": "b154d3edcee95254d41c237142870f39e826a519",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "15/10/16 1:54 PM",
      "commitNameOld": "1f304b0c7f261369dd68839507bb609a949965ad",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 2.88,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void appFinished(RMApp app, RMAppState state, long finishedTime) {\n     ApplicationEntity entity \u003d createApplicationEntity(app.getApplicationId());\n-    RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n-    entity.addInfo(ApplicationMetricsConstants.APP_CPU_METRICS,\n-        appMetrics.getVcoreSeconds());\n-    entity.addInfo(ApplicationMetricsConstants.APP_MEM_METRICS,\n-        appMetrics.getMemorySeconds());\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n     tEvent.setTimestamp(finishedTime);\n     entity.addEvent(tEvent);\n \n     Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n     entityInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n         app.getDiagnostics().toString());\n     entityInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n         app.getFinalApplicationStatus().toString());\n     entityInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n         RMServerUtils.createApplicationState(state).toString());\n     ApplicationAttemptId appAttemptId \u003d app.getCurrentAppAttempt() \u003d\u003d null\n         ? null : app.getCurrentAppAttempt().getAppAttemptId();\n     if (appAttemptId !\u003d null) {\n       entityInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n           appAttemptId.toString());\n     }\n     entity.setInfo(entityInfo);\n \n+    RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n+    Set\u003cTimelineMetric\u003e entityMetrics \u003d\n+        getTimelinelineAppMetrics(appMetrics, finishedTime);\n+    entity.setMetrics(entityMetrics);\n+\n     getDispatcher().getEventHandler().handle(new TimelineV2PublishEvent(\n         SystemMetricsEventType.PUBLISH_ENTITY, entity, app.getApplicationId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void appFinished(RMApp app, RMAppState state, long finishedTime) {\n    ApplicationEntity entity \u003d createApplicationEntity(app.getApplicationId());\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n    tEvent.setTimestamp(finishedTime);\n    entity.addEvent(tEvent);\n\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n        app.getDiagnostics().toString());\n    entityInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n        app.getFinalApplicationStatus().toString());\n    entityInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n        RMServerUtils.createApplicationState(state).toString());\n    ApplicationAttemptId appAttemptId \u003d app.getCurrentAppAttempt() \u003d\u003d null\n        ? null : app.getCurrentAppAttempt().getAppAttemptId();\n    if (appAttemptId !\u003d null) {\n      entityInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n          appAttemptId.toString());\n    }\n    entity.setInfo(entityInfo);\n\n    RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n    Set\u003cTimelineMetric\u003e entityMetrics \u003d\n        getTimelinelineAppMetrics(appMetrics, finishedTime);\n    entity.setMetrics(entityMetrics);\n\n    getDispatcher().getEventHandler().handle(new TimelineV2PublishEvent(\n        SystemMetricsEventType.PUBLISH_ENTITY, entity, app.getApplicationId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
      "extendedDetails": {}
    },
    "1f304b0c7f261369dd68839507bb609a949965ad": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5699. Retrospect yarn entity fields which are publishing in events info fields. Contributed by Rohith Sharma K S.\n",
      "commitDate": "15/10/16 1:54 PM",
      "commitName": "1f304b0c7f261369dd68839507bb609a949965ad",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "28/09/16 3:40 AM",
      "commitNameOld": "9b0fd01d2ee002ac4c30c2862e18ca8f1626fa8d",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 17.43,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void appFinished(RMApp app, RMAppState state, long finishedTime) {\n     ApplicationEntity entity \u003d createApplicationEntity(app.getApplicationId());\n     RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n     entity.addInfo(ApplicationMetricsConstants.APP_CPU_METRICS,\n         appMetrics.getVcoreSeconds());\n     entity.addInfo(ApplicationMetricsConstants.APP_MEM_METRICS,\n         appMetrics.getMemorySeconds());\n \n     TimelineEvent tEvent \u003d new TimelineEvent();\n     tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n     tEvent.setTimestamp(finishedTime);\n-    Map\u003cString, Object\u003e eventInfo \u003d new HashMap\u003cString, Object\u003e();\n-    eventInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n+    entity.addEvent(tEvent);\n+\n+    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n+    entityInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n         app.getDiagnostics().toString());\n-    eventInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n+    entityInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n         app.getFinalApplicationStatus().toString());\n-    eventInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n+    entityInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n         RMServerUtils.createApplicationState(state).toString());\n     ApplicationAttemptId appAttemptId \u003d app.getCurrentAppAttempt() \u003d\u003d null\n         ? null : app.getCurrentAppAttempt().getAppAttemptId();\n     if (appAttemptId !\u003d null) {\n-      eventInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n+      entityInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n           appAttemptId.toString());\n     }\n-    tEvent.setInfo(eventInfo);\n-\n-    entity.addEvent(tEvent);\n+    entity.setInfo(entityInfo);\n \n     getDispatcher().getEventHandler().handle(new TimelineV2PublishEvent(\n         SystemMetricsEventType.PUBLISH_ENTITY, entity, app.getApplicationId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void appFinished(RMApp app, RMAppState state, long finishedTime) {\n    ApplicationEntity entity \u003d createApplicationEntity(app.getApplicationId());\n    RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n    entity.addInfo(ApplicationMetricsConstants.APP_CPU_METRICS,\n        appMetrics.getVcoreSeconds());\n    entity.addInfo(ApplicationMetricsConstants.APP_MEM_METRICS,\n        appMetrics.getMemorySeconds());\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n    tEvent.setTimestamp(finishedTime);\n    entity.addEvent(tEvent);\n\n    Map\u003cString, Object\u003e entityInfo \u003d new HashMap\u003cString, Object\u003e();\n    entityInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n        app.getDiagnostics().toString());\n    entityInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n        app.getFinalApplicationStatus().toString());\n    entityInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n        RMServerUtils.createApplicationState(state).toString());\n    ApplicationAttemptId appAttemptId \u003d app.getCurrentAppAttempt() \u003d\u003d null\n        ? null : app.getCurrentAppAttempt().getAppAttemptId();\n    if (appAttemptId !\u003d null) {\n      entityInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n          appAttemptId.toString());\n    }\n    entity.setInfo(entityInfo);\n\n    getDispatcher().getEventHandler().handle(new TimelineV2PublishEvent(\n        SystemMetricsEventType.PUBLISH_ENTITY, entity, app.getApplicationId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
      "extendedDetails": {}
    },
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4129. Refactor the SystemMetricPublisher in RM to better support newer events (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,31 @@\n+  public void appFinished(RMApp app, RMAppState state, long finishedTime) {\n+    ApplicationEntity entity \u003d createApplicationEntity(app.getApplicationId());\n+    RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n+    entity.addInfo(ApplicationMetricsConstants.APP_CPU_METRICS,\n+        appMetrics.getVcoreSeconds());\n+    entity.addInfo(ApplicationMetricsConstants.APP_MEM_METRICS,\n+        appMetrics.getMemorySeconds());\n+\n+    TimelineEvent tEvent \u003d new TimelineEvent();\n+    tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n+    tEvent.setTimestamp(finishedTime);\n+    Map\u003cString, Object\u003e eventInfo \u003d new HashMap\u003cString, Object\u003e();\n+    eventInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n+        app.getDiagnostics().toString());\n+    eventInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n+        app.getFinalApplicationStatus().toString());\n+    eventInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n+        RMServerUtils.createApplicationState(state).toString());\n+    ApplicationAttemptId appAttemptId \u003d app.getCurrentAppAttempt() \u003d\u003d null\n+        ? null : app.getCurrentAppAttempt().getAppAttemptId();\n+    if (appAttemptId !\u003d null) {\n+      eventInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n+          appAttemptId.toString());\n+    }\n+    tEvent.setInfo(eventInfo);\n+\n+    entity.addEvent(tEvent);\n+\n+    getDispatcher().getEventHandler().handle(new TimelineV2PublishEvent(\n+        SystemMetricsEventType.PUBLISH_ENTITY, entity, app.getApplicationId()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void appFinished(RMApp app, RMAppState state, long finishedTime) {\n    ApplicationEntity entity \u003d createApplicationEntity(app.getApplicationId());\n    RMAppMetrics appMetrics \u003d app.getRMAppMetrics();\n    entity.addInfo(ApplicationMetricsConstants.APP_CPU_METRICS,\n        appMetrics.getVcoreSeconds());\n    entity.addInfo(ApplicationMetricsConstants.APP_MEM_METRICS,\n        appMetrics.getMemorySeconds());\n\n    TimelineEvent tEvent \u003d new TimelineEvent();\n    tEvent.setId(ApplicationMetricsConstants.FINISHED_EVENT_TYPE);\n    tEvent.setTimestamp(finishedTime);\n    Map\u003cString, Object\u003e eventInfo \u003d new HashMap\u003cString, Object\u003e();\n    eventInfo.put(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO,\n        app.getDiagnostics().toString());\n    eventInfo.put(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO,\n        app.getFinalApplicationStatus().toString());\n    eventInfo.put(ApplicationMetricsConstants.STATE_EVENT_INFO,\n        RMServerUtils.createApplicationState(state).toString());\n    ApplicationAttemptId appAttemptId \u003d app.getCurrentAppAttempt() \u003d\u003d null\n        ? null : app.getCurrentAppAttempt().getAppAttemptId();\n    if (appAttemptId !\u003d null) {\n      eventInfo.put(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO,\n          appAttemptId.toString());\n    }\n    tEvent.setInfo(eventInfo);\n\n    entity.addEvent(tEvent);\n\n    getDispatcher().getEventHandler().handle(new TimelineV2PublishEvent(\n        SystemMetricsEventType.PUBLISH_ENTITY, entity, app.getApplicationId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java"
    }
  }
}