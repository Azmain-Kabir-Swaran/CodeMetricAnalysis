{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNUtils.java",
  "functionName": "createCosCredentialsProviderSet",
  "functionId": "createCosCredentialsProviderSet___uri-URI__conf-Configuration",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java",
  "functionStartLine": 52,
  "functionEndLine": 74,
  "numCommitsSeen": 3,
  "timeTaken": 1931,
  "changeHistory": [
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
      "commitDate": "20/04/20 3:14 AM",
      "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
      "commitAuthor": "Sammi Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
          "commitDate": "20/04/20 3:14 AM",
          "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/09/19 1:53 AM",
          "commitNameOld": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 206.06,
          "commitsBetweenForRepo": 773,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  public static COSCredentialProviderList createCosCredentialsProviderSet(\n+  public static COSCredentialsProviderList createCosCredentialsProviderSet(\n+      URI uri,\n       Configuration conf) throws IOException {\n-    COSCredentialProviderList credentialProviderList \u003d\n-        new COSCredentialProviderList();\n+    COSCredentialsProviderList credentialProviderList \u003d\n+        new COSCredentialsProviderList();\n \n     Class\u003c?\u003e[] cosClasses \u003d CosNUtils.loadCosProviderClasses(\n         conf,\n         CosNConfigKeys.COSN_CREDENTIALS_PROVIDER);\n     if (0 \u003d\u003d cosClasses.length) {\n-      credentialProviderList.add(new SimpleCredentialProvider(conf));\n-      credentialProviderList.add(new EnvironmentVariableCredentialProvider());\n+      credentialProviderList.add(\n+          new SimpleCredentialsProvider(uri, conf));\n+      credentialProviderList.add(\n+          new EnvironmentVariableCredentialsProvider(uri, conf));\n     } else {\n       for (Class\u003c?\u003e credClass : cosClasses) {\n-        credentialProviderList.add(createCOSCredentialProvider(\n-            conf,\n+        credentialProviderList.add(createCOSCredentialProvider(uri, conf,\n             credClass));\n       }\n     }\n \n     return credentialProviderList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static COSCredentialsProviderList createCosCredentialsProviderSet(\n      URI uri,\n      Configuration conf) throws IOException {\n    COSCredentialsProviderList credentialProviderList \u003d\n        new COSCredentialsProviderList();\n\n    Class\u003c?\u003e[] cosClasses \u003d CosNUtils.loadCosProviderClasses(\n        conf,\n        CosNConfigKeys.COSN_CREDENTIALS_PROVIDER);\n    if (0 \u003d\u003d cosClasses.length) {\n      credentialProviderList.add(\n          new SimpleCredentialsProvider(uri, conf));\n      credentialProviderList.add(\n          new EnvironmentVariableCredentialsProvider(uri, conf));\n    } else {\n      for (Class\u003c?\u003e credClass : cosClasses) {\n        credentialProviderList.add(createCOSCredentialProvider(uri, conf,\n            credClass));\n      }\n    }\n\n    return credentialProviderList;\n  }",
          "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[uri-URI, conf-Configuration]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
          "commitDate": "20/04/20 3:14 AM",
          "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/09/19 1:53 AM",
          "commitNameOld": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 206.06,
          "commitsBetweenForRepo": 773,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  public static COSCredentialProviderList createCosCredentialsProviderSet(\n+  public static COSCredentialsProviderList createCosCredentialsProviderSet(\n+      URI uri,\n       Configuration conf) throws IOException {\n-    COSCredentialProviderList credentialProviderList \u003d\n-        new COSCredentialProviderList();\n+    COSCredentialsProviderList credentialProviderList \u003d\n+        new COSCredentialsProviderList();\n \n     Class\u003c?\u003e[] cosClasses \u003d CosNUtils.loadCosProviderClasses(\n         conf,\n         CosNConfigKeys.COSN_CREDENTIALS_PROVIDER);\n     if (0 \u003d\u003d cosClasses.length) {\n-      credentialProviderList.add(new SimpleCredentialProvider(conf));\n-      credentialProviderList.add(new EnvironmentVariableCredentialProvider());\n+      credentialProviderList.add(\n+          new SimpleCredentialsProvider(uri, conf));\n+      credentialProviderList.add(\n+          new EnvironmentVariableCredentialsProvider(uri, conf));\n     } else {\n       for (Class\u003c?\u003e credClass : cosClasses) {\n-        credentialProviderList.add(createCOSCredentialProvider(\n-            conf,\n+        credentialProviderList.add(createCOSCredentialProvider(uri, conf,\n             credClass));\n       }\n     }\n \n     return credentialProviderList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static COSCredentialsProviderList createCosCredentialsProviderSet(\n      URI uri,\n      Configuration conf) throws IOException {\n    COSCredentialsProviderList credentialProviderList \u003d\n        new COSCredentialsProviderList();\n\n    Class\u003c?\u003e[] cosClasses \u003d CosNUtils.loadCosProviderClasses(\n        conf,\n        CosNConfigKeys.COSN_CREDENTIALS_PROVIDER);\n    if (0 \u003d\u003d cosClasses.length) {\n      credentialProviderList.add(\n          new SimpleCredentialsProvider(uri, conf));\n      credentialProviderList.add(\n          new EnvironmentVariableCredentialsProvider(uri, conf));\n    } else {\n      for (Class\u003c?\u003e credClass : cosClasses) {\n        credentialProviderList.add(createCOSCredentialProvider(uri, conf,\n            credClass));\n      }\n    }\n\n    return credentialProviderList;\n  }",
          "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java",
          "extendedDetails": {
            "oldValue": "COSCredentialProviderList",
            "newValue": "COSCredentialsProviderList"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
          "commitDate": "20/04/20 3:14 AM",
          "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/09/19 1:53 AM",
          "commitNameOld": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 206.06,
          "commitsBetweenForRepo": 773,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  public static COSCredentialProviderList createCosCredentialsProviderSet(\n+  public static COSCredentialsProviderList createCosCredentialsProviderSet(\n+      URI uri,\n       Configuration conf) throws IOException {\n-    COSCredentialProviderList credentialProviderList \u003d\n-        new COSCredentialProviderList();\n+    COSCredentialsProviderList credentialProviderList \u003d\n+        new COSCredentialsProviderList();\n \n     Class\u003c?\u003e[] cosClasses \u003d CosNUtils.loadCosProviderClasses(\n         conf,\n         CosNConfigKeys.COSN_CREDENTIALS_PROVIDER);\n     if (0 \u003d\u003d cosClasses.length) {\n-      credentialProviderList.add(new SimpleCredentialProvider(conf));\n-      credentialProviderList.add(new EnvironmentVariableCredentialProvider());\n+      credentialProviderList.add(\n+          new SimpleCredentialsProvider(uri, conf));\n+      credentialProviderList.add(\n+          new EnvironmentVariableCredentialsProvider(uri, conf));\n     } else {\n       for (Class\u003c?\u003e credClass : cosClasses) {\n-        credentialProviderList.add(createCOSCredentialProvider(\n-            conf,\n+        credentialProviderList.add(createCOSCredentialProvider(uri, conf,\n             credClass));\n       }\n     }\n \n     return credentialProviderList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static COSCredentialsProviderList createCosCredentialsProviderSet(\n      URI uri,\n      Configuration conf) throws IOException {\n    COSCredentialsProviderList credentialProviderList \u003d\n        new COSCredentialsProviderList();\n\n    Class\u003c?\u003e[] cosClasses \u003d CosNUtils.loadCosProviderClasses(\n        conf,\n        CosNConfigKeys.COSN_CREDENTIALS_PROVIDER);\n    if (0 \u003d\u003d cosClasses.length) {\n      credentialProviderList.add(\n          new SimpleCredentialsProvider(uri, conf));\n      credentialProviderList.add(\n          new EnvironmentVariableCredentialsProvider(uri, conf));\n    } else {\n      for (Class\u003c?\u003e credClass : cosClasses) {\n        credentialProviderList.add(createCOSCredentialProvider(uri, conf,\n            credClass));\n      }\n    }\n\n    return credentialProviderList;\n  }",
          "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,21 @@\n+  public static COSCredentialProviderList createCosCredentialsProviderSet(\n+      Configuration conf) throws IOException {\n+    COSCredentialProviderList credentialProviderList \u003d\n+        new COSCredentialProviderList();\n+\n+    Class\u003c?\u003e[] cosClasses \u003d CosNUtils.loadCosProviderClasses(\n+        conf,\n+        CosNConfigKeys.COSN_CREDENTIALS_PROVIDER);\n+    if (0 \u003d\u003d cosClasses.length) {\n+      credentialProviderList.add(new SimpleCredentialProvider(conf));\n+      credentialProviderList.add(new EnvironmentVariableCredentialProvider());\n+    } else {\n+      for (Class\u003c?\u003e credClass : cosClasses) {\n+        credentialProviderList.add(createCOSCredentialProvider(\n+            conf,\n+            credClass));\n+      }\n+    }\n+\n+    return credentialProviderList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static COSCredentialProviderList createCosCredentialsProviderSet(\n      Configuration conf) throws IOException {\n    COSCredentialProviderList credentialProviderList \u003d\n        new COSCredentialProviderList();\n\n    Class\u003c?\u003e[] cosClasses \u003d CosNUtils.loadCosProviderClasses(\n        conf,\n        CosNConfigKeys.COSN_CREDENTIALS_PROVIDER);\n    if (0 \u003d\u003d cosClasses.length) {\n      credentialProviderList.add(new SimpleCredentialProvider(conf));\n      credentialProviderList.add(new EnvironmentVariableCredentialProvider());\n    } else {\n      for (Class\u003c?\u003e credClass : cosClasses) {\n        credentialProviderList.add(createCOSCredentialProvider(\n            conf,\n            credClass));\n      }\n    }\n\n    return credentialProviderList;\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNUtils.java"
    }
  }
}