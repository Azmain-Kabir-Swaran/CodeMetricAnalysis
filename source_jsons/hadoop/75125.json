{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UserGroupInformation.java",
  "functionName": "getLoginUser",
  "functionId": "getLoginUser",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
  "functionStartLine": 653,
  "functionEndLine": 676,
  "numCommitsSeen": 147,
  "timeTaken": 5582,
  "changeHistory": [
    "1415ad3800d117b4fff6ad0ef281acc7051a0bcf",
    "59cf7588779145ad5850ad63426743dfe03d8347",
    "c9d74139bc63a9144a5aab8909be5ebf47445269",
    "411bb0bd991344c0cd01bda1de27962f0470e944",
    "0d143ad72326d80ffc4a63777befb478b7e59af3",
    "db09dba7aed8ad2ad374fc72a16f7973744a06d1",
    "86ce5f6c917131e79174f8c7ac55d6cb1abad09d",
    "cb293a62a52bd780488176bd924fa11c8bb7839c",
    "6f6e170325d39f9f7b543a39791b2cb54692f83d",
    "cffee556e4d7897f65ef52020f5b10a278cb9068",
    "aeb364d8b57f4de79d3489bef2071cea9c0c840e",
    "96d77c17cc1f792de4ae026f236e091156d28b53",
    "fb4a6ac9e995c79475af99aea044e0fc0558e9b6",
    "d8930feeae116fc53cb0676dad8521992762528c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "c15ae29a906cd2ee8ee526cc67f1cc992c673534",
    "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f",
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a",
    "d2ade6aec54681270ac6f741a04414911c73f61d",
    "56b15e9e8f674205b08312c13cc61304f44f8a42",
    "a7aacdc2d66c6f80704d5ff11fc600acb61c8bf2",
    "8b4b190cbd4678b4b6a5d85b32ce831bd3b99da2",
    "ba8647f511e1cec60a181d7e103a5b2fd314e4cc",
    "0c5734e4aca873f405fbf994e5fe7061e31731c8"
  ],
  "changeHistoryShort": {
    "1415ad3800d117b4fff6ad0ef281acc7051a0bcf": "Ybodychange",
    "59cf7588779145ad5850ad63426743dfe03d8347": "Ymultichange(Ymodifierchange,Ybodychange)",
    "c9d74139bc63a9144a5aab8909be5ebf47445269": "Ybodychange",
    "411bb0bd991344c0cd01bda1de27962f0470e944": "Ybodychange",
    "0d143ad72326d80ffc4a63777befb478b7e59af3": "Ybodychange",
    "db09dba7aed8ad2ad374fc72a16f7973744a06d1": "Ybodychange",
    "86ce5f6c917131e79174f8c7ac55d6cb1abad09d": "Ybodychange",
    "cb293a62a52bd780488176bd924fa11c8bb7839c": "Ybodychange",
    "6f6e170325d39f9f7b543a39791b2cb54692f83d": "Ybodychange",
    "cffee556e4d7897f65ef52020f5b10a278cb9068": "Ybodychange",
    "aeb364d8b57f4de79d3489bef2071cea9c0c840e": "Ybodychange",
    "96d77c17cc1f792de4ae026f236e091156d28b53": "Ybodychange",
    "fb4a6ac9e995c79475af99aea044e0fc0558e9b6": "Ybodychange",
    "d8930feeae116fc53cb0676dad8521992762528c": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "c15ae29a906cd2ee8ee526cc67f1cc992c673534": "Ybodychange",
    "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f": "Ybodychange",
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a": "Ybodychange",
    "d2ade6aec54681270ac6f741a04414911c73f61d": "Ybodychange",
    "56b15e9e8f674205b08312c13cc61304f44f8a42": "Ybodychange",
    "a7aacdc2d66c6f80704d5ff11fc600acb61c8bf2": "Ybodychange",
    "8b4b190cbd4678b4b6a5d85b32ce831bd3b99da2": "Ybodychange",
    "ba8647f511e1cec60a181d7e103a5b2fd314e4cc": "Ybodychange",
    "0c5734e4aca873f405fbf994e5fe7061e31731c8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1415ad3800d117b4fff6ad0ef281acc7051a0bcf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16707. NPE in UGI.getCurrentUser in ITestAbfsIdentityTransformer setup.\n\nContributed by Steve Loughran.\r\n\r\nChange-Id: I38fdba2fa70e534d78b15e61de19368912588b0c",
      "commitDate": "20/11/19 6:32 AM",
      "commitName": "1415ad3800d117b4fff6ad0ef281acc7051a0bcf",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/11/19 10:28 AM",
      "commitNameOld": "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9",
      "commitAuthorOld": "belugabehr",
      "daysBetweenCommits": 5.84,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public static UserGroupInformation getLoginUser() throws IOException {\n+    ensureInitialized();\n     UserGroupInformation loginUser \u003d loginUserRef.get();\n     // a potential race condition exists only for the initial creation of\n     // the login user.  there\u0027s no need to penalize all subsequent calls\n     // with sychronization overhead so optimistically create a login user\n     // and discard if we lose the race.\n     if (loginUser \u003d\u003d null) {\n       UserGroupInformation newLoginUser \u003d createLoginUser(null);\n       do {\n         // it\u0027s extremely unlikely that the login user will be non-null\n         // (lost CAS race), but be nulled before the subsequent get, but loop\n         // for correctness.\n         if (loginUserRef.compareAndSet(null, newLoginUser)) {\n           loginUser \u003d newLoginUser;\n           // only spawn renewal if this login user is the winner.\n           loginUser.spawnAutoRenewalThreadForUserCreds(false);\n         } else {\n           loginUser \u003d loginUserRef.get();\n         }\n       } while (loginUser \u003d\u003d null);\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getLoginUser() throws IOException {\n    ensureInitialized();\n    UserGroupInformation loginUser \u003d loginUserRef.get();\n    // a potential race condition exists only for the initial creation of\n    // the login user.  there\u0027s no need to penalize all subsequent calls\n    // with sychronization overhead so optimistically create a login user\n    // and discard if we lose the race.\n    if (loginUser \u003d\u003d null) {\n      UserGroupInformation newLoginUser \u003d createLoginUser(null);\n      do {\n        // it\u0027s extremely unlikely that the login user will be non-null\n        // (lost CAS race), but be nulled before the subsequent get, but loop\n        // for correctness.\n        if (loginUserRef.compareAndSet(null, newLoginUser)) {\n          loginUser \u003d newLoginUser;\n          // only spawn renewal if this login user is the winner.\n          loginUser.spawnAutoRenewalThreadForUserCreds(false);\n        } else {\n          loginUser \u003d loginUserRef.get();\n        }\n      } while (loginUser \u003d\u003d null);\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "59cf7588779145ad5850ad63426743dfe03d8347": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
      "commitDate": "23/02/18 11:10 AM",
      "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
          "commitDate": "23/02/18 11:10 AM",
          "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "27/12/17 11:17 PM",
          "commitNameOld": "d31c9d8c495794a803fb20729b5ed6b374e23eb4",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 57.5,
          "commitsBetweenForRepo": 327,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,23 @@\n-  static UserGroupInformation getLoginUser() throws IOException {\n+  public static UserGroupInformation getLoginUser() throws IOException {\n+    UserGroupInformation loginUser \u003d loginUserRef.get();\n+    // a potential race condition exists only for the initial creation of\n+    // the login user.  there\u0027s no need to penalize all subsequent calls\n+    // with sychronization overhead so optimistically create a login user\n+    // and discard if we lose the race.\n     if (loginUser \u003d\u003d null) {\n-      loginUserFromSubject(null);\n+      UserGroupInformation newLoginUser \u003d createLoginUser(null);\n+      do {\n+        // it\u0027s extremely unlikely that the login user will be non-null\n+        // (lost CAS race), but be nulled before the subsequent get, but loop\n+        // for correctness.\n+        if (loginUserRef.compareAndSet(null, newLoginUser)) {\n+          loginUser \u003d newLoginUser;\n+          // only spawn renewal if this login user is the winner.\n+          loginUser.spawnAutoRenewalThreadForUserCreds(false);\n+        } else {\n+          loginUser \u003d loginUserRef.get();\n+        }\n+      } while (loginUser \u003d\u003d null);\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation getLoginUser() throws IOException {\n    UserGroupInformation loginUser \u003d loginUserRef.get();\n    // a potential race condition exists only for the initial creation of\n    // the login user.  there\u0027s no need to penalize all subsequent calls\n    // with sychronization overhead so optimistically create a login user\n    // and discard if we lose the race.\n    if (loginUser \u003d\u003d null) {\n      UserGroupInformation newLoginUser \u003d createLoginUser(null);\n      do {\n        // it\u0027s extremely unlikely that the login user will be non-null\n        // (lost CAS race), but be nulled before the subsequent get, but loop\n        // for correctness.\n        if (loginUserRef.compareAndSet(null, newLoginUser)) {\n          loginUser \u003d newLoginUser;\n          // only spawn renewal if this login user is the winner.\n          loginUser.spawnAutoRenewalThreadForUserCreds(false);\n        } else {\n          loginUser \u003d loginUserRef.get();\n        }\n      } while (loginUser \u003d\u003d null);\n    }\n    return loginUser;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
          "extendedDetails": {
            "oldValue": "[public, static, synchronized]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
          "commitDate": "23/02/18 11:10 AM",
          "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "27/12/17 11:17 PM",
          "commitNameOld": "d31c9d8c495794a803fb20729b5ed6b374e23eb4",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 57.5,
          "commitsBetweenForRepo": 327,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,23 @@\n-  static UserGroupInformation getLoginUser() throws IOException {\n+  public static UserGroupInformation getLoginUser() throws IOException {\n+    UserGroupInformation loginUser \u003d loginUserRef.get();\n+    // a potential race condition exists only for the initial creation of\n+    // the login user.  there\u0027s no need to penalize all subsequent calls\n+    // with sychronization overhead so optimistically create a login user\n+    // and discard if we lose the race.\n     if (loginUser \u003d\u003d null) {\n-      loginUserFromSubject(null);\n+      UserGroupInformation newLoginUser \u003d createLoginUser(null);\n+      do {\n+        // it\u0027s extremely unlikely that the login user will be non-null\n+        // (lost CAS race), but be nulled before the subsequent get, but loop\n+        // for correctness.\n+        if (loginUserRef.compareAndSet(null, newLoginUser)) {\n+          loginUser \u003d newLoginUser;\n+          // only spawn renewal if this login user is the winner.\n+          loginUser.spawnAutoRenewalThreadForUserCreds(false);\n+        } else {\n+          loginUser \u003d loginUserRef.get();\n+        }\n+      } while (loginUser \u003d\u003d null);\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation getLoginUser() throws IOException {\n    UserGroupInformation loginUser \u003d loginUserRef.get();\n    // a potential race condition exists only for the initial creation of\n    // the login user.  there\u0027s no need to penalize all subsequent calls\n    // with sychronization overhead so optimistically create a login user\n    // and discard if we lose the race.\n    if (loginUser \u003d\u003d null) {\n      UserGroupInformation newLoginUser \u003d createLoginUser(null);\n      do {\n        // it\u0027s extremely unlikely that the login user will be non-null\n        // (lost CAS race), but be nulled before the subsequent get, but loop\n        // for correctness.\n        if (loginUserRef.compareAndSet(null, newLoginUser)) {\n          loginUser \u003d newLoginUser;\n          // only spawn renewal if this login user is the winner.\n          loginUser.spawnAutoRenewalThreadForUserCreds(false);\n        } else {\n          loginUser \u003d loginUserRef.get();\n        }\n      } while (loginUser \u003d\u003d null);\n    }\n    return loginUser;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
          "extendedDetails": {}
        }
      ]
    },
    "c9d74139bc63a9144a5aab8909be5ebf47445269": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10164. Allow UGI to login with a known Subject (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552104 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 1:20 PM",
      "commitName": "c9d74139bc63a9144a5aab8909be5ebf47445269",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "16/10/13 10:32 PM",
      "commitNameOld": "da1f4419e3cd01f1274565c1db84ae500b018274",
      "commitAuthorOld": "",
      "daysBetweenCommits": 62.66,
      "commitsBetweenForRepo": 376,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,6 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n-      ensureInitialized();\n-      try {\n-        Subject subject \u003d new Subject();\n-        LoginContext login \u003d\n-            newLoginContext(authenticationMethod.getLoginAppName(), \n-                            subject, new HadoopConfiguration());\n-        login.login();\n-        UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n-        realUser.setLogin(login);\n-        realUser.setAuthenticationMethod(authenticationMethod);\n-        realUser \u003d new UserGroupInformation(login.getSubject());\n-        // If the HADOOP_PROXY_USER environment variable or property\n-        // is specified, create a proxy user as the logged in user.\n-        String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n-        if (proxyUser \u003d\u003d null) {\n-          proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n-        }\n-        loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n-\n-        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n-        if (fileLocation !\u003d null) {\n-          // Load the token storage file and put all of the tokens into the\n-          // user. Don\u0027t use the FileSystem API for reading since it has a lock\n-          // cycle (HADOOP-9212).\n-          Credentials cred \u003d Credentials.readTokenStorageFile(\n-              new File(fileLocation), conf);\n-          loginUser.addCredentials(cred);\n-        }\n-        loginUser.spawnAutoRenewalThreadForUserCreds();\n-      } catch (LoginException le) {\n-        LOG.debug(\"failure to login\", le);\n-        throw new IOException(\"failure to login\", le);\n-      }\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"UGI loginUser:\"+loginUser);\n-      }\n+      loginUserFromSubject(null);\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      loginUserFromSubject(null);\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "411bb0bd991344c0cd01bda1de27962f0470e944": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9283. Add support for running the Hadoop client on AIX. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1443303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/13 7:13 PM",
      "commitName": "411bb0bd991344c0cd01bda1de27962f0470e944",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "16/01/13 2:20 AM",
      "commitNameOld": "0d143ad72326d80ffc4a63777befb478b7e59af3",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 21.7,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       ensureInitialized();\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login \u003d\n             newLoginContext(authenticationMethod.getLoginAppName(), \n                             subject, new HadoopConfiguration());\n         login.login();\n         UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n         realUser.setLogin(login);\n         realUser.setAuthenticationMethod(authenticationMethod);\n         realUser \u003d new UserGroupInformation(login.getSubject());\n         // If the HADOOP_PROXY_USER environment variable or property\n         // is specified, create a proxy user as the logged in user.\n         String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n         if (proxyUser \u003d\u003d null) {\n           proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n         }\n         loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null) {\n           // Load the token storage file and put all of the tokens into the\n           // user. Don\u0027t use the FileSystem API for reading since it has a lock\n           // cycle (HADOOP-9212).\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new File(fileLocation), conf);\n           loginUser.addCredentials(cred);\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n+        LOG.debug(\"failure to login\", le);\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      ensureInitialized();\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login \u003d\n            newLoginContext(authenticationMethod.getLoginAppName(), \n                            subject, new HadoopConfiguration());\n        login.login();\n        UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n        realUser.setLogin(login);\n        realUser.setAuthenticationMethod(authenticationMethod);\n        realUser \u003d new UserGroupInformation(login.getSubject());\n        // If the HADOOP_PROXY_USER environment variable or property\n        // is specified, create a proxy user as the logged in user.\n        String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n        if (proxyUser \u003d\u003d null) {\n          proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n        }\n        loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null) {\n          // Load the token storage file and put all of the tokens into the\n          // user. Don\u0027t use the FileSystem API for reading since it has a lock\n          // cycle (HADOOP-9212).\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new File(fileLocation), conf);\n          loginUser.addCredentials(cred);\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        LOG.debug(\"failure to login\", le);\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "0d143ad72326d80ffc4a63777befb478b7e59af3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9212. Potential deadlock in FileSystem.Cache/IPC/UGI.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1433879 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/13 2:20 AM",
      "commitName": "0d143ad72326d80ffc4a63777befb478b7e59af3",
      "commitAuthor": "Thomas White",
      "commitDateOld": "15/12/12 4:38 PM",
      "commitNameOld": "db09dba7aed8ad2ad374fc72a16f7973744a06d1",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 31.4,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       ensureInitialized();\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login \u003d\n             newLoginContext(authenticationMethod.getLoginAppName(), \n                             subject, new HadoopConfiguration());\n         login.login();\n         UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n         realUser.setLogin(login);\n         realUser.setAuthenticationMethod(authenticationMethod);\n         realUser \u003d new UserGroupInformation(login.getSubject());\n         // If the HADOOP_PROXY_USER environment variable or property\n         // is specified, create a proxy user as the logged in user.\n         String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n         if (proxyUser \u003d\u003d null) {\n           proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n         }\n         loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n \n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null) {\n-          // load the token storage file and put all of the tokens into the\n-          // user.\n+          // Load the token storage file and put all of the tokens into the\n+          // user. Don\u0027t use the FileSystem API for reading since it has a lock\n+          // cycle (HADOOP-9212).\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n-              new Path(\"file:///\" + fileLocation), conf);\n+              new File(fileLocation), conf);\n           loginUser.addCredentials(cred);\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      ensureInitialized();\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login \u003d\n            newLoginContext(authenticationMethod.getLoginAppName(), \n                            subject, new HadoopConfiguration());\n        login.login();\n        UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n        realUser.setLogin(login);\n        realUser.setAuthenticationMethod(authenticationMethod);\n        realUser \u003d new UserGroupInformation(login.getSubject());\n        // If the HADOOP_PROXY_USER environment variable or property\n        // is specified, create a proxy user as the logged in user.\n        String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n        if (proxyUser \u003d\u003d null) {\n          proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n        }\n        loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null) {\n          // Load the token storage file and put all of the tokens into the\n          // user. Don\u0027t use the FileSystem API for reading since it has a lock\n          // cycle (HADOOP-9212).\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new File(fileLocation), conf);\n          loginUser.addCredentials(cred);\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "db09dba7aed8ad2ad374fc72a16f7973744a06d1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8561. Introduce HADOOP_PROXY_USER for secure impersonation in child hadoop client processes. (Yu Gao via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1422429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/12/12 4:38 PM",
      "commitName": "db09dba7aed8ad2ad374fc72a16f7973744a06d1",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "07/12/12 4:48 PM",
      "commitNameOld": "bcaba939417522ac95226f1fab2a82949f05a6e9",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 7.99,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,39 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       ensureInitialized();\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login \u003d\n             newLoginContext(authenticationMethod.getLoginAppName(), \n                             subject, new HadoopConfiguration());\n         login.login();\n-        loginUser \u003d new UserGroupInformation(subject);\n-        loginUser.setLogin(login);\n-        loginUser.setAuthenticationMethod(authenticationMethod);\n-        loginUser \u003d new UserGroupInformation(login.getSubject());\n+        UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n+        realUser.setLogin(login);\n+        realUser.setAuthenticationMethod(authenticationMethod);\n+        realUser \u003d new UserGroupInformation(login.getSubject());\n+        // If the HADOOP_PROXY_USER environment variable or property\n+        // is specified, create a proxy user as the logged in user.\n+        String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n+        if (proxyUser \u003d\u003d null) {\n+          proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n+        }\n+        loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n+\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n           loginUser.addCredentials(cred);\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      ensureInitialized();\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login \u003d\n            newLoginContext(authenticationMethod.getLoginAppName(), \n                            subject, new HadoopConfiguration());\n        login.login();\n        UserGroupInformation realUser \u003d new UserGroupInformation(subject);\n        realUser.setLogin(login);\n        realUser.setAuthenticationMethod(authenticationMethod);\n        realUser \u003d new UserGroupInformation(login.getSubject());\n        // If the HADOOP_PROXY_USER environment variable or property\n        // is specified, create a proxy user as the logged in user.\n        String proxyUser \u003d System.getenv(HADOOP_PROXY_USER);\n        if (proxyUser \u003d\u003d null) {\n          proxyUser \u003d System.getProperty(HADOOP_PROXY_USER);\n        }\n        loginUser \u003d proxyUser \u003d\u003d null ? realUser : createProxyUser(proxyUser, realUser);\n\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          loginUser.addCredentials(cred);\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "86ce5f6c917131e79174f8c7ac55d6cb1abad09d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9035. Generalize setup of LoginContext (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1410018 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/11/12 1:14 PM",
      "commitName": "86ce5f6c917131e79174f8c7ac55d6cb1abad09d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "12/11/12 2:13 PM",
      "commitNameOld": "4755ef989ac771ad3c2c40f9914455725c931447",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,31 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n+      ensureInitialized();\n       try {\n         Subject subject \u003d new Subject();\n-        LoginContext login;\n-        AuthenticationMethod authenticationMethod;\n-        if (isSecurityEnabled()) {\n-          authenticationMethod \u003d AuthenticationMethod.KERBEROS;\n-          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n-              subject, new HadoopConfiguration());\n-        } else {\n-          authenticationMethod \u003d AuthenticationMethod.SIMPLE;\n-          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n-              subject, new HadoopConfiguration());\n-        }\n+        LoginContext login \u003d\n+            newLoginContext(authenticationMethod.getLoginAppName(), \n+                            subject, new HadoopConfiguration());\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n         loginUser.setAuthenticationMethod(authenticationMethod);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n           loginUser.addCredentials(cred);\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      ensureInitialized();\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login \u003d\n            newLoginContext(authenticationMethod.getLoginAppName(), \n                            subject, new HadoopConfiguration());\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(authenticationMethod);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          loginUser.addCredentials(cred);\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "cb293a62a52bd780488176bd924fa11c8bb7839c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9013. UGI should not hardcode loginUser\u0027s authenticationType (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406684 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/12 7:56 AM",
      "commitName": "cb293a62a52bd780488176bd924fa11c8bb7839c",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "05/11/12 10:37 AM",
      "commitNameOld": "b1aa62a848646f78e019c74186d9696e9101afcf",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login;\n+        AuthenticationMethod authenticationMethod;\n         if (isSecurityEnabled()) {\n+          authenticationMethod \u003d AuthenticationMethod.KERBEROS;\n           login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject, new HadoopConfiguration());\n         } else {\n+          authenticationMethod \u003d AuthenticationMethod.SIMPLE;\n           login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject, new HadoopConfiguration());\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n-        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n-                                          AuthenticationMethod.KERBEROS :\n-                                          AuthenticationMethod.SIMPLE);\n+        loginUser.setAuthenticationMethod(authenticationMethod);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n           loginUser.addCredentials(cred);\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        AuthenticationMethod authenticationMethod;\n        if (isSecurityEnabled()) {\n          authenticationMethod \u003d AuthenticationMethod.KERBEROS;\n          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject, new HadoopConfiguration());\n        } else {\n          authenticationMethod \u003d AuthenticationMethod.SIMPLE;\n          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject, new HadoopConfiguration());\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(authenticationMethod);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          loginUser.addCredentials(cred);\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "6f6e170325d39f9f7b543a39791b2cb54692f83d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8726. The Secrets in Credentials are not available to MR tasks (daryn and Benoy Antony via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1379100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/08/12 12:58 PM",
      "commitName": "6f6e170325d39f9f7b543a39791b2cb54692f83d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 5.79,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject, new HadoopConfiguration());\n         } else {\n           login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject, new HadoopConfiguration());\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n         loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                           AuthenticationMethod.KERBEROS :\n                                           AuthenticationMethod.SIMPLE);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n-          cred.addTokensToUGI(loginUser);\n+          loginUser.addCredentials(cred);\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject, new HadoopConfiguration());\n        } else {\n          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject, new HadoopConfiguration());\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          loginUser.addCredentials(cred);\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "cffee556e4d7897f65ef52020f5b10a278cb9068": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8725. MR is broken when security is off (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1376929 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:16 AM",
      "commitName": "cffee556e4d7897f65ef52020f5b10a278cb9068",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "23/08/12 11:06 AM",
      "commitNameOld": "aeb364d8b57f4de79d3489bef2071cea9c0c840e",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject, new HadoopConfiguration());\n         } else {\n           login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject, new HadoopConfiguration());\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n         loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                           AuthenticationMethod.KERBEROS :\n                                           AuthenticationMethod.SIMPLE);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n-        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n+        if (fileLocation !\u003d null) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n           cred.addTokensToUGI(loginUser);\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject, new HadoopConfiguration());\n        } else {\n          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject, new HadoopConfiguration());\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          cred.addTokensToUGI(loginUser);\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "aeb364d8b57f4de79d3489bef2071cea9c0c840e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8225. DistCp fails when invoked by Oozie (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1376618 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/12 11:06 AM",
      "commitName": "aeb364d8b57f4de79d3489bef2071cea9c0c840e",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "12/07/12 12:01 PM",
      "commitNameOld": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 41.96,
      "commitsBetweenForRepo": 234,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,37 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject, new HadoopConfiguration());\n         } else {\n           login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject, new HadoopConfiguration());\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n         loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                           AuthenticationMethod.KERBEROS :\n                                           AuthenticationMethod.SIMPLE);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n-          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n-            loginUser.addToken(token);\n-          }\n+          cred.addTokensToUGI(loginUser);\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject, new HadoopConfiguration());\n        } else {\n          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject, new HadoopConfiguration());\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          cred.addTokensToUGI(loginUser);\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "96d77c17cc1f792de4ae026f236e091156d28b53": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8585. Fix initialization circularity between UserGroupInformation and HadoopConfiguration. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 6:22 PM",
      "commitName": "96d77c17cc1f792de4ae026f236e091156d28b53",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "10/07/12 11:28 AM",
      "commitNameOld": "fb4a6ac9e995c79475af99aea044e0fc0558e9b6",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 1.29,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n-              subject, HADOOP_LOGIN_CONFIG);\n+              subject, new HadoopConfiguration());\n         } else {\n           login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n-              subject, HADOOP_LOGIN_CONFIG);\n+              subject, new HadoopConfiguration());\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n         loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                           AuthenticationMethod.KERBEROS :\n                                           AuthenticationMethod.SIMPLE);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n           for (Token\u003c?\u003e token: cred.getAllTokens()) {\n             loginUser.addToken(token);\n           }\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject, new HadoopConfiguration());\n        } else {\n          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject, new HadoopConfiguration());\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "fb4a6ac9e995c79475af99aea044e0fc0558e9b6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3568. fuse_dfs: add support for security. Contributed by Colin McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359824 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 11:28 AM",
      "commitName": "fb4a6ac9e995c79475af99aea044e0fc0558e9b6",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "23/04/12 8:59 PM",
      "commitNameOld": "858887e28921393f64132cf88c3276643f3e5338",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 77.6,
      "commitsBetweenForRepo": 404,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n-              subject);\n+              subject, HADOOP_LOGIN_CONFIG);\n         } else {\n           login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n-              subject);\n+              subject, HADOOP_LOGIN_CONFIG);\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n         loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                           AuthenticationMethod.KERBEROS :\n                                           AuthenticationMethod.SIMPLE);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n           for (Token\u003c?\u003e token: cred.getAllTokens()) {\n             loginUser.addToken(token);\n           }\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"UGI loginUser:\"+loginUser);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject, HADOOP_LOGIN_CONFIG);\n        } else {\n          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject, HADOOP_LOGIN_CONFIG);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "d8930feeae116fc53cb0676dad8521992762528c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7853. multiple javax security configurations cause conflicts. (daryn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208751 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/11 12:26 PM",
      "commitName": "d8930feeae116fc53cb0676dad8521992762528c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/10/11 6:24 PM",
      "commitNameOld": "002dd6968b89ded6a77858ccb50c9b2df074c226",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 47.79,
      "commitsBetweenForRepo": 331,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,39 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login;\n         if (isSecurityEnabled()) {\n-          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n+          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject);\n         } else {\n-          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n+          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject);\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n         loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                           AuthenticationMethod.KERBEROS :\n                                           AuthenticationMethod.SIMPLE);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d Credentials.readTokenStorageFile(\n               new Path(\"file:///\" + fileLocation), conf);\n           for (Token\u003c?\u003e token: cred.getAllTokens()) {\n             loginUser.addToken(token);\n           }\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"UGI loginUser:\"+loginUser);\n+      }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d newLoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"UGI loginUser:\"+loginUser);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "c15ae29a906cd2ee8ee526cc67f1cc992c673534": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6873. using delegation token over hftp for long running clients\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980648 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/10 9:55 PM",
      "commitName": "c15ae29a906cd2ee8ee526cc67f1cc992c673534",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "29/07/10 10:29 AM",
      "commitNameOld": "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject);\n         } else {\n           login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject);\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n         loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                           AuthenticationMethod.KERBEROS :\n                                           AuthenticationMethod.SIMPLE);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n-          Credentials cred \u003d new Credentials();\n-          cred.readTokenStorageFile(new Path(\"file:///\" + fileLocation), conf);\n+          Credentials cred \u003d Credentials.readTokenStorageFile(\n+              new Path(\"file:///\" + fileLocation), conf);\n           for (Token\u003c?\u003e token: cred.getAllTokens()) {\n             loginUser.addToken(token);\n           }\n         }\n         loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d Credentials.readTokenStorageFile(\n              new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6656. Adds a thread in the UserGroupInformation to renew TGTs periodically. Contributed by Owen O\u0027Malley and Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980518 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/10 10:29 AM",
      "commitName": "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "27/07/10 5:56 PM",
      "commitNameOld": "5c5c163aa3315e063041cefc55a4b1a753494ada",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 1.69,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n-        loginUser \u003d new UserGroupInformation(subject);\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject);\n         } else {\n           login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject);\n         }\n         login.login();\n+        loginUser \u003d new UserGroupInformation(subject);\n         loginUser.setLogin(login);\n+        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n+                                          AuthenticationMethod.KERBEROS :\n+                                          AuthenticationMethod.SIMPLE);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           // load the token storage file and put all of the tokens into the\n           // user.\n           Credentials cred \u003d new Credentials();\n           cred.readTokenStorageFile(new Path(\"file:///\" + fileLocation), conf);\n           for (Token\u003c?\u003e token: cred.getAllTokens()) {\n             loginUser.addToken(token);\n           }\n         }\n+        loginUser.spawnAutoRenewalThreadForUserCreds();\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(subject);\n        loginUser.setLogin(login);\n        loginUser.setAuthenticationMethod(isSecurityEnabled() ?\n                                          AuthenticationMethod.KERBEROS :\n                                          AuthenticationMethod.SIMPLE);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d new Credentials();\n          cred.readTokenStorageFile(new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n        loginUser.spawnAutoRenewalThreadForUserCreds();\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6861. Adds new non-static methods in Credentials to read and write token storage file. Contributed by Jitendra Pandey \u0026 Owen O\u0027Malley.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@966911 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/10 5:05 PM",
      "commitName": "eb10b152fe69fb0c769e6dbbd08f435033c19c7a",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "19/07/10 5:46 PM",
      "commitNameOld": "fa3a3bf5d8f3167f9725a3f91a0f4ae0481f24ea",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,32 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         loginUser \u003d new UserGroupInformation(subject);\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject);\n         } else {\n           login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject);\n         }\n         login.login();\n         loginUser.setLogin(login);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n-        String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n-        if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n-          Credentials.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n+        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n+        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n+          // load the token storage file and put all of the tokens into the\n+          // user.\n+          Credentials cred \u003d new Credentials();\n+          cred.readTokenStorageFile(new Path(\"file:///\" + fileLocation), conf);\n+          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n+            loginUser.addToken(token);\n+          }\n         }\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        loginUser \u003d new UserGroupInformation(subject);\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser.setLogin(login);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String fileLocation \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (fileLocation !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          // load the token storage file and put all of the tokens into the\n          // user.\n          Credentials cred \u003d new Credentials();\n          cred.readTokenStorageFile(new Path(\"file:///\" + fileLocation), conf);\n          for (Token\u003c?\u003e token: cred.getAllTokens()) {\n            loginUser.addToken(token);\n          }\n        }\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "d2ade6aec54681270ac6f741a04414911c73f61d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6845. Renames the TokenStorage class to Credentials. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@962677 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/07/10 1:07 PM",
      "commitName": "d2ade6aec54681270ac6f741a04414911c73f61d",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "08/07/10 1:02 PM",
      "commitNameOld": "86e833858c543f2d5d9b6e39538937501fc1f368",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         loginUser \u003d new UserGroupInformation(subject);\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject);\n         } else {\n           login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject);\n         }\n         login.login();\n         loginUser.setLogin(login);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n-          TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n+          Credentials.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n         }\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        loginUser \u003d new UserGroupInformation(subject);\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser.setLogin(login);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          Credentials.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n        }\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "56b15e9e8f674205b08312c13cc61304f44f8a42": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6649.  login object in UGI should be inside the subject (jnp via boryas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951618 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/10 5:10 PM",
      "commitName": "56b15e9e8f674205b08312c13cc61304f44f8a42",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "26/05/10 1:31 PM",
      "commitNameOld": "24a2f1fafe2e13963c510cc04b3177c300af8aae",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 9.15,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         Subject subject \u003d new Subject();\n         loginUser \u003d new UserGroupInformation(subject);\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n               subject);\n         } else {\n           login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n               subject);\n         }\n         login.login();\n-        loginUser.login \u003d login;\n+        loginUser.setLogin(login);\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n         }\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        loginUser \u003d new UserGroupInformation(subject);\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser.setLogin(login);\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n        }\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "a7aacdc2d66c6f80704d5ff11fc600acb61c8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP6638. try to relogin in a case of failed RPC connection (expired tgt) only in case the subject is loginUser or proxyUgi.realUser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@948523 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/05/10 11:29 AM",
      "commitName": "a7aacdc2d66c6f80704d5ff11fc600acb61c8bf2",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "27/04/10 9:53 AM",
      "commitNameOld": "9ad633f011700997c2f571e990ed9a3745955ac4",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 29.07,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,26 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n+        Subject subject \u003d new Subject();\n+        loginUser \u003d new UserGroupInformation(subject);\n+        LoginContext login;\n         if (isSecurityEnabled()) {\n-          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME);\n+          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n+              subject);\n         } else {\n-          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME);\n+          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n+              subject);\n         }\n         login.login();\n+        loginUser.login \u003d login;\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n         }\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        Subject subject \u003d new Subject();\n        loginUser \u003d new UserGroupInformation(subject);\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME,\n              subject);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME, \n              subject);\n        }\n        login.login();\n        loginUser.login \u003d login;\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n        }\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "8b4b190cbd4678b4b6a5d85b32ce831bd3b99da2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6559. Makes the RPC client automatically re-login when the SASL connection setup fails. This is applicable only to keytab based logins. Contributed by Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/10 11:28 PM",
      "commitName": "8b4b190cbd4678b4b6a5d85b32ce831bd3b99da2",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "09/02/10 9:01 PM",
      "commitNameOld": "cfbdd1aff4df15b1d6c9ec3bab1aca2fc073c11d",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n-        LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME);\n         } else {\n           login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME);\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n         String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n         if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n           TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n         }\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n        }\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "ba8647f511e1cec60a181d7e103a5b2fd314e4cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6520. Adds APIs to read/write Token and secret keys. Also adds the automatic loading of tokens into UserGroupInformation upon login. The tokens are read from a file specified in the environment variable. Contributed by Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@904861 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/10 11:57 AM",
      "commitName": "ba8647f511e1cec60a181d7e103a5b2fd314e4cc",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "28/01/10 5:56 PM",
      "commitNameOld": "611340714b01bb4cc241129ffbb8d74fd9454611",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,21 @@\n   static UserGroupInformation getLoginUser() throws IOException {\n     if (loginUser \u003d\u003d null) {\n       try {\n         LoginContext login;\n         if (isSecurityEnabled()) {\n           login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME);\n         } else {\n           login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME);\n         }\n         login.login();\n         loginUser \u003d new UserGroupInformation(login.getSubject());\n+        String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n+        if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n+          TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n+        }\n       } catch (LoginException le) {\n         throw new IOException(\"failure to login\", le);\n       }\n     }\n     return loginUser;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n        String tokenFile \u003d System.getenv(HADOOP_TOKEN_FILE_LOCATION);\n        if (tokenFile !\u003d null \u0026\u0026 isSecurityEnabled()) {\n          TokenStorage.readTokensAndLoadInUGI(tokenFile, new Configuration(), loginUser);\n        }\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "0c5734e4aca873f405fbf994e5fe7061e31731c8": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6299. Reimplement the UserGroupInformation to use the OS\nspecific and Kerberos JAAS login. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/10 12:08 AM",
      "commitName": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,17 @@\n+  static UserGroupInformation getLoginUser() throws IOException {\n+    if (loginUser \u003d\u003d null) {\n+      try {\n+        LoginContext login;\n+        if (isSecurityEnabled()) {\n+          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME);\n+        } else {\n+          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME);\n+        }\n+        login.login();\n+        loginUser \u003d new UserGroupInformation(login.getSubject());\n+      } catch (LoginException le) {\n+        throw new IOException(\"failure to login\", le);\n+      }\n+    }\n+    return loginUser;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static UserGroupInformation getLoginUser() throws IOException {\n    if (loginUser \u003d\u003d null) {\n      try {\n        LoginContext login;\n        if (isSecurityEnabled()) {\n          login \u003d new LoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME);\n        } else {\n          login \u003d new LoginContext(HadoopConfiguration.SIMPLE_CONFIG_NAME);\n        }\n        login.login();\n        loginUser \u003d new UserGroupInformation(login.getSubject());\n      } catch (LoginException le) {\n        throw new IOException(\"failure to login\", le);\n      }\n    }\n    return loginUser;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java"
    }
  }
}