{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SQLFederationStateStore.java",
  "functionName": "getPolicyConfiguration",
  "functionId": "getPolicyConfiguration___request-GetSubClusterPolicyConfigurationRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
  "functionStartLine": 822,
  "functionEndLine": 872,
  "numCommitsSeen": 6,
  "timeTaken": 2006,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "75abc9a8e2cf1c7d2c574ede720df59421512be3",
    "825108d08a9b49d7c19915624f9167101528cb95",
    "5272af8c7eab76d779c621eb0208bf29ffa25613"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "75abc9a8e2cf1c7d2c574ede720df59421512be3": "Ybodychange",
    "825108d08a9b49d7c19915624f9167101528cb95": "Ybodychange",
    "5272af8c7eab76d779c621eb0208bf29ffa25613": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "27/07/18 3:23 PM",
      "commitNameOld": "79091cf76f6e966f64ac1d65e43e95782695e678",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 231.04,
      "commitsBetweenForRepo": 1874,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n   public GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(\n       GetSubClusterPolicyConfigurationRequest request) throws YarnException {\n \n     // Input validator\n     FederationPolicyStoreInputValidator.validate(request);\n \n     CallableStatement cstmt \u003d null;\n     Connection conn \u003d null;\n     SubClusterPolicyConfiguration subClusterPolicyConfiguration \u003d null;\n \n     try {\n       conn \u003d getConnection();\n       cstmt \u003d conn.prepareCall(CALL_SP_GET_POLICY_CONFIGURATION);\n \n       // Set the parameters for the stored procedure\n       cstmt.setString(1, request.getQueue());\n       cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\n \n       // Execute the query\n       long startTime \u003d clock.getTime();\n       cstmt.executeUpdate();\n       long stopTime \u003d clock.getTime();\n \n       // Check if the output it is a valid policy\n       if (cstmt.getString(2) !\u003d null \u0026\u0026 cstmt.getBytes(3) !\u003d null) {\n         subClusterPolicyConfiguration \u003d\n             SubClusterPolicyConfiguration.newInstance(request.getQueue(),\n                 cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Selected from StateStore the policy for the queue: \"\n-              + subClusterPolicyConfiguration.toString());\n-        }\n+        LOG.debug(\"Selected from StateStore the policy for the queue: {}\",\n+            subClusterPolicyConfiguration);\n       } else {\n         LOG.warn(\"Policy for queue: {} does not exist.\", request.getQueue());\n         return null;\n       }\n \n       FederationStateStoreClientMetrics\n           .succeededStateStoreCall(stopTime - startTime);\n \n     } catch (SQLException e) {\n       FederationStateStoreClientMetrics.failedStateStoreCall();\n       FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n           \"Unable to select the policy for the queue :\" + request.getQueue(),\n           e);\n     } finally {\n       // Return to the pool the CallableStatement and the Connection\n       FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n     }\n     return GetSubClusterPolicyConfigurationResponse\n         .newInstance(subClusterPolicyConfiguration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(\n      GetSubClusterPolicyConfigurationRequest request) throws YarnException {\n\n    // Input validator\n    FederationPolicyStoreInputValidator.validate(request);\n\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n    SubClusterPolicyConfiguration subClusterPolicyConfiguration \u003d null;\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_POLICY_CONFIGURATION);\n\n      // Set the parameters for the stored procedure\n      cstmt.setString(1, request.getQueue());\n      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\n\n      // Execute the query\n      long startTime \u003d clock.getTime();\n      cstmt.executeUpdate();\n      long stopTime \u003d clock.getTime();\n\n      // Check if the output it is a valid policy\n      if (cstmt.getString(2) !\u003d null \u0026\u0026 cstmt.getBytes(3) !\u003d null) {\n        subClusterPolicyConfiguration \u003d\n            SubClusterPolicyConfiguration.newInstance(request.getQueue(),\n                cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\n        LOG.debug(\"Selected from StateStore the policy for the queue: {}\",\n            subClusterPolicyConfiguration);\n      } else {\n        LOG.warn(\"Policy for queue: {} does not exist.\", request.getQueue());\n        return null;\n      }\n\n      FederationStateStoreClientMetrics\n          .succeededStateStoreCall(stopTime - startTime);\n\n    } catch (SQLException e) {\n      FederationStateStoreClientMetrics.failedStateStoreCall();\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to select the policy for the queue :\" + request.getQueue(),\n          e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n    }\n    return GetSubClusterPolicyConfigurationResponse\n        .newInstance(subClusterPolicyConfiguration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
      "extendedDetails": {}
    },
    "75abc9a8e2cf1c7d2c574ede720df59421512be3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5603. Metrics for Federation StateStore. (Ellen Hui via asuresh)\n",
      "commitDate": "21/08/17 10:43 PM",
      "commitName": "75abc9a8e2cf1c7d2c574ede720df59421512be3",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "825108d08a9b49d7c19915624f9167101528cb95",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 20.22,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,53 @@\n   public GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(\n       GetSubClusterPolicyConfigurationRequest request) throws YarnException {\n \n     // Input validator\n     FederationPolicyStoreInputValidator.validate(request);\n \n     CallableStatement cstmt \u003d null;\n     Connection conn \u003d null;\n     SubClusterPolicyConfiguration subClusterPolicyConfiguration \u003d null;\n \n     try {\n       conn \u003d getConnection();\n       cstmt \u003d conn.prepareCall(CALL_SP_GET_POLICY_CONFIGURATION);\n \n       // Set the parameters for the stored procedure\n       cstmt.setString(1, request.getQueue());\n       cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\n \n       // Execute the query\n+      long startTime \u003d clock.getTime();\n       cstmt.executeUpdate();\n+      long stopTime \u003d clock.getTime();\n \n       // Check if the output it is a valid policy\n       if (cstmt.getString(2) !\u003d null \u0026\u0026 cstmt.getBytes(3) !\u003d null) {\n         subClusterPolicyConfiguration \u003d\n             SubClusterPolicyConfiguration.newInstance(request.getQueue(),\n                 cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Selected from StateStore the policy for the queue: \"\n               + subClusterPolicyConfiguration.toString());\n         }\n       } else {\n         LOG.warn(\"Policy for queue: {} does not exist.\", request.getQueue());\n         return null;\n       }\n \n+      FederationStateStoreClientMetrics\n+          .succeededStateStoreCall(stopTime - startTime);\n+\n     } catch (SQLException e) {\n+      FederationStateStoreClientMetrics.failedStateStoreCall();\n       FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n           \"Unable to select the policy for the queue :\" + request.getQueue(),\n           e);\n     } finally {\n       // Return to the pool the CallableStatement and the Connection\n       FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n     }\n     return GetSubClusterPolicyConfigurationResponse\n         .newInstance(subClusterPolicyConfiguration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(\n      GetSubClusterPolicyConfigurationRequest request) throws YarnException {\n\n    // Input validator\n    FederationPolicyStoreInputValidator.validate(request);\n\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n    SubClusterPolicyConfiguration subClusterPolicyConfiguration \u003d null;\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_POLICY_CONFIGURATION);\n\n      // Set the parameters for the stored procedure\n      cstmt.setString(1, request.getQueue());\n      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\n\n      // Execute the query\n      long startTime \u003d clock.getTime();\n      cstmt.executeUpdate();\n      long stopTime \u003d clock.getTime();\n\n      // Check if the output it is a valid policy\n      if (cstmt.getString(2) !\u003d null \u0026\u0026 cstmt.getBytes(3) !\u003d null) {\n        subClusterPolicyConfiguration \u003d\n            SubClusterPolicyConfiguration.newInstance(request.getQueue(),\n                cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Selected from StateStore the policy for the queue: \"\n              + subClusterPolicyConfiguration.toString());\n        }\n      } else {\n        LOG.warn(\"Policy for queue: {} does not exist.\", request.getQueue());\n        return null;\n      }\n\n      FederationStateStoreClientMetrics\n          .succeededStateStoreCall(stopTime - startTime);\n\n    } catch (SQLException e) {\n      FederationStateStoreClientMetrics.failedStateStoreCall();\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to select the policy for the queue :\" + request.getQueue(),\n          e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n    }\n    return GetSubClusterPolicyConfigurationResponse\n        .newInstance(subClusterPolicyConfiguration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
      "extendedDetails": {}
    },
    "825108d08a9b49d7c19915624f9167101528cb95": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6815. FederationStateStoreFacade return behavior should be consistent irrespective of whether caching is enabled or not.\n\n(cherry picked from commit 8820693cd769065eed83193b673ec5d919d69500)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "825108d08a9b49d7c19915624f9167101528cb95",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "5272af8c7eab76d779c621eb0208bf29ffa25613",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n   public GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(\n       GetSubClusterPolicyConfigurationRequest request) throws YarnException {\n \n     // Input validator\n     FederationPolicyStoreInputValidator.validate(request);\n \n     CallableStatement cstmt \u003d null;\n     Connection conn \u003d null;\n     SubClusterPolicyConfiguration subClusterPolicyConfiguration \u003d null;\n \n     try {\n       conn \u003d getConnection();\n       cstmt \u003d conn.prepareCall(CALL_SP_GET_POLICY_CONFIGURATION);\n \n       // Set the parameters for the stored procedure\n       cstmt.setString(1, request.getQueue());\n       cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\n \n       // Execute the query\n       cstmt.executeUpdate();\n \n       // Check if the output it is a valid policy\n       if (cstmt.getString(2) !\u003d null \u0026\u0026 cstmt.getBytes(3) !\u003d null) {\n         subClusterPolicyConfiguration \u003d\n             SubClusterPolicyConfiguration.newInstance(request.getQueue(),\n                 cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Selected from StateStore the policy for the queue: \"\n               + subClusterPolicyConfiguration.toString());\n         }\n       } else {\n-        String errMsg \u003d\n-            \"Policy for queue \" + request.getQueue() + \" does not exist\";\n-        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n+        LOG.warn(\"Policy for queue: {} does not exist.\", request.getQueue());\n+        return null;\n       }\n \n     } catch (SQLException e) {\n       FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n           \"Unable to select the policy for the queue :\" + request.getQueue(),\n           e);\n     } finally {\n       // Return to the pool the CallableStatement and the Connection\n       FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n     }\n     return GetSubClusterPolicyConfigurationResponse\n         .newInstance(subClusterPolicyConfiguration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(\n      GetSubClusterPolicyConfigurationRequest request) throws YarnException {\n\n    // Input validator\n    FederationPolicyStoreInputValidator.validate(request);\n\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n    SubClusterPolicyConfiguration subClusterPolicyConfiguration \u003d null;\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_POLICY_CONFIGURATION);\n\n      // Set the parameters for the stored procedure\n      cstmt.setString(1, request.getQueue());\n      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\n\n      // Execute the query\n      cstmt.executeUpdate();\n\n      // Check if the output it is a valid policy\n      if (cstmt.getString(2) !\u003d null \u0026\u0026 cstmt.getBytes(3) !\u003d null) {\n        subClusterPolicyConfiguration \u003d\n            SubClusterPolicyConfiguration.newInstance(request.getQueue(),\n                cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Selected from StateStore the policy for the queue: \"\n              + subClusterPolicyConfiguration.toString());\n        }\n      } else {\n        LOG.warn(\"Policy for queue: {} does not exist.\", request.getQueue());\n        return null;\n      }\n\n    } catch (SQLException e) {\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to select the policy for the queue :\" + request.getQueue(),\n          e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n    }\n    return GetSubClusterPolicyConfigurationResponse\n        .newInstance(subClusterPolicyConfiguration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
      "extendedDetails": {}
    },
    "5272af8c7eab76d779c621eb0208bf29ffa25613": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3663. Federation State and Policy Store (DBMS implementation). (Giovanni Matteo Fumarola via curino).\n\n(cherry picked from commit be99c1fe2eb150fabd69902118d65941f82971f6)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "5272af8c7eab76d779c621eb0208bf29ffa25613",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,48 @@\n+  public GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(\n+      GetSubClusterPolicyConfigurationRequest request) throws YarnException {\n+\n+    // Input validator\n+    FederationPolicyStoreInputValidator.validate(request);\n+\n+    CallableStatement cstmt \u003d null;\n+    Connection conn \u003d null;\n+    SubClusterPolicyConfiguration subClusterPolicyConfiguration \u003d null;\n+\n+    try {\n+      conn \u003d getConnection();\n+      cstmt \u003d conn.prepareCall(CALL_SP_GET_POLICY_CONFIGURATION);\n+\n+      // Set the parameters for the stored procedure\n+      cstmt.setString(1, request.getQueue());\n+      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n+      cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\n+\n+      // Execute the query\n+      cstmt.executeUpdate();\n+\n+      // Check if the output it is a valid policy\n+      if (cstmt.getString(2) !\u003d null \u0026\u0026 cstmt.getBytes(3) !\u003d null) {\n+        subClusterPolicyConfiguration \u003d\n+            SubClusterPolicyConfiguration.newInstance(request.getQueue(),\n+                cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Selected from StateStore the policy for the queue: \"\n+              + subClusterPolicyConfiguration.toString());\n+        }\n+      } else {\n+        String errMsg \u003d\n+            \"Policy for queue \" + request.getQueue() + \" does not exist\";\n+        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n+      }\n+\n+    } catch (SQLException e) {\n+      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n+          \"Unable to select the policy for the queue :\" + request.getQueue(),\n+          e);\n+    } finally {\n+      // Return to the pool the CallableStatement and the Connection\n+      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n+    }\n+    return GetSubClusterPolicyConfigurationResponse\n+        .newInstance(subClusterPolicyConfiguration);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(\n      GetSubClusterPolicyConfigurationRequest request) throws YarnException {\n\n    // Input validator\n    FederationPolicyStoreInputValidator.validate(request);\n\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n    SubClusterPolicyConfiguration subClusterPolicyConfiguration \u003d null;\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_POLICY_CONFIGURATION);\n\n      // Set the parameters for the stored procedure\n      cstmt.setString(1, request.getQueue());\n      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\n\n      // Execute the query\n      cstmt.executeUpdate();\n\n      // Check if the output it is a valid policy\n      if (cstmt.getString(2) !\u003d null \u0026\u0026 cstmt.getBytes(3) !\u003d null) {\n        subClusterPolicyConfiguration \u003d\n            SubClusterPolicyConfiguration.newInstance(request.getQueue(),\n                cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Selected from StateStore the policy for the queue: \"\n              + subClusterPolicyConfiguration.toString());\n        }\n      } else {\n        String errMsg \u003d\n            \"Policy for queue \" + request.getQueue() + \" does not exist\";\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n      }\n\n    } catch (SQLException e) {\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to select the policy for the queue :\" + request.getQueue(),\n          e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n    }\n    return GetSubClusterPolicyConfigurationResponse\n        .newInstance(subClusterPolicyConfiguration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java"
    }
  }
}