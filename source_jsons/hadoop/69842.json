{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsRestOperation.java",
  "functionName": "executeHttpOperation",
  "functionId": "executeHttpOperation___retryCount-int(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
  "functionStartLine": 203,
  "functionEndLine": 278,
  "numCommitsSeen": 16,
  "timeTaken": 4214,
  "changeHistory": [
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
    "d1f5976c004292f35b0fc5efbc86273becc4a304",
    "65f60e56b082faf92e1cd3daee2569d8fc669c67",
    "30863c5ae3a7ad69b6b4853bad2e8f22c7c67639",
    "72112691421bedb66d887ba4e18d1b7d65a42f2c",
    "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0",
    "d0b4624c88fc48932a7c2800185ed48bb1c5e0fe",
    "97f06b3fc70ad509e601076c015bc244daa1243f",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": "Ybodychange",
    "d1f5976c004292f35b0fc5efbc86273becc4a304": "Ybodychange",
    "65f60e56b082faf92e1cd3daee2569d8fc669c67": "Ybodychange",
    "30863c5ae3a7ad69b6b4853bad2e8f22c7c67639": "Ybodychange",
    "72112691421bedb66d887ba4e18d1b7d65a42f2c": "Ybodychange",
    "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0": "Ybodychange",
    "d0b4624c88fc48932a7c2800185ed48bb1c5e0fe": "Ybodychange",
    "97f06b3fc70ad509e601076c015bc244daa1243f": "Ybodychange",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": "Ybodychange",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Ybodychange",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.\n",
      "commitDate": "27/02/20 10:27 AM",
      "commitName": "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "07/01/20 10:05 AM",
      "commitNameOld": "d1f5976c004292f35b0fc5efbc86273becc4a304",
      "commitAuthorOld": "Sneha Vijayarajan",
      "daysBetweenCommits": 51.01,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,76 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n-      // sign the HTTP request\n-      if (client.getAccessToken() \u003d\u003d null) {\n-        LOG.debug(\"Signing request with shared key\");\n-        // sign the HTTP request\n-        client.getSharedKeyCredentials().signRequest(\n-                httpOperation.getConnection(),\n-                hasRequestBody ? bufferLength : 0);\n-      } else {\n-        LOG.debug(\"Authenticating request with OAuth2 access token\");\n-        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n-                client.getAccessToken());\n+      switch(client.getAuthType()) {\n+        case Custom:\n+        case OAuth:\n+          LOG.debug(\"Authenticating request with OAuth2 access token\");\n+          httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n+              client.getAccessToken());\n+          break;\n+        case SAS:\n+          // do nothing; the SAS token should already be appended to the query string\n+          break;\n+        case SharedKey:\n+          // sign the HTTP request\n+          LOG.debug(\"Signing request with shared key\");\n+          // sign the HTTP request\n+          client.getSharedKeyCredentials().signRequest(\n+              httpOperation.getConnection(),\n+              hasRequestBody ? bufferLength : 0);\n+          break;\n       }\n+\n       // dump the headers\n       AbfsIoUtils.dumpHeadersToDebugLog(\"Request Headers\",\n           httpOperation.getConnection().getRequestProperties());\n       AbfsClientThrottlingIntercept.sendingRequest(operationType);\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n       if (ex instanceof UnknownHostException) {\n         LOG.warn(String.format(\"Unknown host name: %s. Retrying to resolve the host name...\", httpOperation.getUrl().getHost()));\n       }\n \n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n \n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n \n       // once HttpException is thrown by AzureADAuthenticator,\n       // it indicates the policy in AzureADAuthenticator determined\n       // retry is not needed\n       if (ex instanceof HttpException) {\n         throw new AbfsRestOperationException((HttpException) ex);\n       }\n \n       return false;\n     } finally {\n       AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n     }\n \n     LOG.debug(\"HttpRequest: {}\", httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      switch(client.getAuthType()) {\n        case Custom:\n        case OAuth:\n          LOG.debug(\"Authenticating request with OAuth2 access token\");\n          httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n              client.getAccessToken());\n          break;\n        case SAS:\n          // do nothing; the SAS token should already be appended to the query string\n          break;\n        case SharedKey:\n          // sign the HTTP request\n          LOG.debug(\"Signing request with shared key\");\n          // sign the HTTP request\n          client.getSharedKeyCredentials().signRequest(\n              httpOperation.getConnection(),\n              hasRequestBody ? bufferLength : 0);\n          break;\n      }\n\n      // dump the headers\n      AbfsIoUtils.dumpHeadersToDebugLog(\"Request Headers\",\n          httpOperation.getConnection().getRequestProperties());\n      AbfsClientThrottlingIntercept.sendingRequest(operationType);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (ex instanceof UnknownHostException) {\n        LOG.warn(String.format(\"Unknown host name: %s. Retrying to resolve the host name...\", httpOperation.getUrl().getHost()));\n      }\n\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n\n      // once HttpException is thrown by AzureADAuthenticator,\n      // it indicates the policy in AzureADAuthenticator determined\n      // retry is not needed\n      if (ex instanceof HttpException) {\n        throw new AbfsRestOperationException((HttpException) ex);\n      }\n\n      return false;\n    } finally {\n      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n    }\n\n    LOG.debug(\"HttpRequest: {}\", httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "d1f5976c004292f35b0fc5efbc86273becc4a304": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16699. Add verbose TRACE logging to ABFS.\n\nContributed by Sneha Vijayarajan,\n\nChange-Id: Ic616a10406e6e9f11616c9cc05d8630ebbedaf65\n",
      "commitDate": "07/01/20 10:05 AM",
      "commitName": "d1f5976c004292f35b0fc5efbc86273becc4a304",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "27/11/19 3:10 PM",
      "commitNameOld": "82ad9b549f9ae0867699042e0f5856577919a749",
      "commitAuthorOld": "Sneha Vijayarajan",
      "daysBetweenCommits": 40.79,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n       if (client.getAccessToken() \u003d\u003d null) {\n         LOG.debug(\"Signing request with shared key\");\n         // sign the HTTP request\n         client.getSharedKeyCredentials().signRequest(\n                 httpOperation.getConnection(),\n                 hasRequestBody ? bufferLength : 0);\n       } else {\n         LOG.debug(\"Authenticating request with OAuth2 access token\");\n         httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                 client.getAccessToken());\n       }\n       // dump the headers\n       AbfsIoUtils.dumpHeadersToDebugLog(\"Request Headers\",\n           httpOperation.getConnection().getRequestProperties());\n       AbfsClientThrottlingIntercept.sendingRequest(operationType);\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n       if (ex instanceof UnknownHostException) {\n         LOG.warn(String.format(\"Unknown host name: %s. Retrying to resolve the host name...\", httpOperation.getUrl().getHost()));\n       }\n \n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n \n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n \n       // once HttpException is thrown by AzureADAuthenticator,\n       // it indicates the policy in AzureADAuthenticator determined\n       // retry is not needed\n       if (ex instanceof HttpException) {\n         throw new AbfsRestOperationException((HttpException) ex);\n       }\n \n       return false;\n     } finally {\n       AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n     }\n \n-    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n+    LOG.debug(\"HttpRequest: {}\", httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      if (client.getAccessToken() \u003d\u003d null) {\n        LOG.debug(\"Signing request with shared key\");\n        // sign the HTTP request\n        client.getSharedKeyCredentials().signRequest(\n                httpOperation.getConnection(),\n                hasRequestBody ? bufferLength : 0);\n      } else {\n        LOG.debug(\"Authenticating request with OAuth2 access token\");\n        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                client.getAccessToken());\n      }\n      // dump the headers\n      AbfsIoUtils.dumpHeadersToDebugLog(\"Request Headers\",\n          httpOperation.getConnection().getRequestProperties());\n      AbfsClientThrottlingIntercept.sendingRequest(operationType);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (ex instanceof UnknownHostException) {\n        LOG.warn(String.format(\"Unknown host name: %s. Retrying to resolve the host name...\", httpOperation.getUrl().getHost()));\n      }\n\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n\n      // once HttpException is thrown by AzureADAuthenticator,\n      // it indicates the policy in AzureADAuthenticator determined\n      // retry is not needed\n      if (ex instanceof HttpException) {\n        throw new AbfsRestOperationException((HttpException) ex);\n      }\n\n      return false;\n    } finally {\n      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n    }\n\n    LOG.debug(\"HttpRequest: {}\", httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "65f60e56b082faf92e1cd3daee2569d8fc669c67": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16068. ABFS Authentication and Delegation Token plugins to optionally be bound to specific URI of the store.\n\nContributed by Steve Loughran.\n",
      "commitDate": "28/02/19 6:22 AM",
      "commitName": "65f60e56b082faf92e1cd3daee2569d8fc669c67",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/01/19 11:32 AM",
      "commitNameOld": "30863c5ae3a7ad69b6b4853bad2e8f22c7c67639",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 44.78,
      "commitsBetweenForRepo": 373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,68 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n       if (client.getAccessToken() \u003d\u003d null) {\n+        LOG.debug(\"Signing request with shared key\");\n         // sign the HTTP request\n         client.getSharedKeyCredentials().signRequest(\n                 httpOperation.getConnection(),\n                 hasRequestBody ? bufferLength : 0);\n       } else {\n+        LOG.debug(\"Authenticating request with OAuth2 access token\");\n         httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                 client.getAccessToken());\n       }\n-\n+      // dump the headers\n+      AbfsIoUtils.dumpHeadersToDebugLog(\"Request Headers\",\n+          httpOperation.getConnection().getRequestProperties());\n       AbfsClientThrottlingIntercept.sendingRequest(operationType);\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n       if (ex instanceof UnknownHostException) {\n         LOG.warn(String.format(\"Unknown host name: %s. Retrying to resolve the host name...\", httpOperation.getUrl().getHost()));\n       }\n \n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n \n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n \n       // once HttpException is thrown by AzureADAuthenticator,\n       // it indicates the policy in AzureADAuthenticator determined\n       // retry is not needed\n       if (ex instanceof HttpException) {\n         throw new AbfsRestOperationException((HttpException) ex);\n       }\n \n       return false;\n     } finally {\n       AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n     }\n \n     LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      if (client.getAccessToken() \u003d\u003d null) {\n        LOG.debug(\"Signing request with shared key\");\n        // sign the HTTP request\n        client.getSharedKeyCredentials().signRequest(\n                httpOperation.getConnection(),\n                hasRequestBody ? bufferLength : 0);\n      } else {\n        LOG.debug(\"Authenticating request with OAuth2 access token\");\n        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                client.getAccessToken());\n      }\n      // dump the headers\n      AbfsIoUtils.dumpHeadersToDebugLog(\"Request Headers\",\n          httpOperation.getConnection().getRequestProperties());\n      AbfsClientThrottlingIntercept.sendingRequest(operationType);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (ex instanceof UnknownHostException) {\n        LOG.warn(String.format(\"Unknown host name: %s. Retrying to resolve the host name...\", httpOperation.getUrl().getHost()));\n      }\n\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n\n      // once HttpException is thrown by AzureADAuthenticator,\n      // it indicates the policy in AzureADAuthenticator determined\n      // retry is not needed\n      if (ex instanceof HttpException) {\n        throw new AbfsRestOperationException((HttpException) ex);\n      }\n\n      return false;\n    } finally {\n      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n    }\n\n    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "30863c5ae3a7ad69b6b4853bad2e8f22c7c67639": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16044. ABFS: Better exception handling of DNS errors followup\n\nContributed by Da Zhou.\n",
      "commitDate": "14/01/19 11:32 AM",
      "commitName": "30863c5ae3a7ad69b6b4853bad2e8f22c7c67639",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "10/01/19 4:02 AM",
      "commitNameOld": "72112691421bedb66d887ba4e18d1b7d65a42f2c",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 4.31,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,64 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n       if (client.getAccessToken() \u003d\u003d null) {\n         // sign the HTTP request\n         client.getSharedKeyCredentials().signRequest(\n                 httpOperation.getConnection(),\n                 hasRequestBody ? bufferLength : 0);\n       } else {\n         httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                 client.getAccessToken());\n       }\n \n       AbfsClientThrottlingIntercept.sendingRequest(operationType);\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n+      if (ex instanceof UnknownHostException) {\n+        LOG.warn(String.format(\"Unknown host name: %s. Retrying to resolve the host name...\", httpOperation.getUrl().getHost()));\n+      }\n+\n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n \n-      if (ex instanceof UnknownHostException) {\n-        throw new AbfsRestOperationException(\n-                UNKNOWN.getStatusCode(),\n-                UNKNOWN.getErrorCode(),\n-                String.format(\"Can not reach endpoint: %s, please check the account setting in configuration file\", ex.getMessage()),\n-                ex);\n-      }\n-\n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n \n       // once HttpException is thrown by AzureADAuthenticator,\n       // it indicates the policy in AzureADAuthenticator determined\n       // retry is not needed\n       if (ex instanceof HttpException) {\n         throw new AbfsRestOperationException((HttpException) ex);\n       }\n \n       return false;\n     } finally {\n       AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n     }\n \n     LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      if (client.getAccessToken() \u003d\u003d null) {\n        // sign the HTTP request\n        client.getSharedKeyCredentials().signRequest(\n                httpOperation.getConnection(),\n                hasRequestBody ? bufferLength : 0);\n      } else {\n        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                client.getAccessToken());\n      }\n\n      AbfsClientThrottlingIntercept.sendingRequest(operationType);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (ex instanceof UnknownHostException) {\n        LOG.warn(String.format(\"Unknown host name: %s. Retrying to resolve the host name...\", httpOperation.getUrl().getHost()));\n      }\n\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n\n      // once HttpException is thrown by AzureADAuthenticator,\n      // it indicates the policy in AzureADAuthenticator determined\n      // retry is not needed\n      if (ex instanceof HttpException) {\n        throw new AbfsRestOperationException((HttpException) ex);\n      }\n\n      return false;\n    } finally {\n      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n    }\n\n    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "72112691421bedb66d887ba4e18d1b7d65a42f2c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15662. Better exception handling of DNS errors.\n\nContributed by Da Zhou.\n",
      "commitDate": "10/01/19 4:02 AM",
      "commitName": "72112691421bedb66d887ba4e18d1b7d65a42f2c",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "05/10/18 3:29 AM",
      "commitNameOld": "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 97.07,
      "commitsBetweenForRepo": 730,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,68 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n       if (client.getAccessToken() \u003d\u003d null) {\n         // sign the HTTP request\n         client.getSharedKeyCredentials().signRequest(\n                 httpOperation.getConnection(),\n                 hasRequestBody ? bufferLength : 0);\n       } else {\n         httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                 client.getAccessToken());\n       }\n \n       AbfsClientThrottlingIntercept.sendingRequest(operationType);\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n+\n+      if (ex instanceof UnknownHostException) {\n+        throw new AbfsRestOperationException(\n+                UNKNOWN.getStatusCode(),\n+                UNKNOWN.getErrorCode(),\n+                String.format(\"Can not reach endpoint: %s, please check the account setting in configuration file\", ex.getMessage()),\n+                ex);\n+      }\n+\n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n \n       // once HttpException is thrown by AzureADAuthenticator,\n       // it indicates the policy in AzureADAuthenticator determined\n       // retry is not needed\n       if (ex instanceof HttpException) {\n         throw new AbfsRestOperationException((HttpException) ex);\n       }\n \n       return false;\n     } finally {\n       AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n     }\n \n     LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      if (client.getAccessToken() \u003d\u003d null) {\n        // sign the HTTP request\n        client.getSharedKeyCredentials().signRequest(\n                httpOperation.getConnection(),\n                hasRequestBody ? bufferLength : 0);\n      } else {\n        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                client.getAccessToken());\n      }\n\n      AbfsClientThrottlingIntercept.sendingRequest(operationType);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n\n      if (ex instanceof UnknownHostException) {\n        throw new AbfsRestOperationException(\n                UNKNOWN.getStatusCode(),\n                UNKNOWN.getErrorCode(),\n                String.format(\"Can not reach endpoint: %s, please check the account setting in configuration file\", ex.getMessage()),\n                ex);\n      }\n\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n\n      // once HttpException is thrown by AzureADAuthenticator,\n      // it indicates the policy in AzureADAuthenticator determined\n      // retry is not needed\n      if (ex instanceof HttpException) {\n        throw new AbfsRestOperationException((HttpException) ex);\n      }\n\n      return false;\n    } finally {\n      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n    }\n\n    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15809. ABFS: better exception handling when making getAccessToken call.\nContributed by Da Zhou\n",
      "commitDate": "05/10/18 3:29 AM",
      "commitName": "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "21/09/18 3:06 AM",
      "commitNameOld": "d0b4624c88fc48932a7c2800185ed48bb1c5e0fe",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 14.02,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,59 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n       if (client.getAccessToken() \u003d\u003d null) {\n         // sign the HTTP request\n         client.getSharedKeyCredentials().signRequest(\n                 httpOperation.getConnection(),\n                 hasRequestBody ? bufferLength : 0);\n       } else {\n         httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                 client.getAccessToken());\n       }\n \n       AbfsClientThrottlingIntercept.sendingRequest(operationType);\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n+\n+      // once HttpException is thrown by AzureADAuthenticator,\n+      // it indicates the policy in AzureADAuthenticator determined\n+      // retry is not needed\n+      if (ex instanceof HttpException) {\n+        throw new AbfsRestOperationException((HttpException) ex);\n+      }\n+\n       return false;\n     } finally {\n       AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n     }\n \n     LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      if (client.getAccessToken() \u003d\u003d null) {\n        // sign the HTTP request\n        client.getSharedKeyCredentials().signRequest(\n                httpOperation.getConnection(),\n                hasRequestBody ? bufferLength : 0);\n      } else {\n        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                client.getAccessToken());\n      }\n\n      AbfsClientThrottlingIntercept.sendingRequest(operationType);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n\n      // once HttpException is thrown by AzureADAuthenticator,\n      // it indicates the policy in AzureADAuthenticator determined\n      // retry is not needed\n      if (ex instanceof HttpException) {\n        throw new AbfsRestOperationException((HttpException) ex);\n      }\n\n      return false;\n    } finally {\n      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n    }\n\n    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "d0b4624c88fc48932a7c2800185ed48bb1c5e0fe": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15778. ABFS: Fix client side throttling for read.\nContributed by Sneha Varma.\n",
      "commitDate": "21/09/18 3:06 AM",
      "commitName": "d0b4624c88fc48932a7c2800185ed48bb1c5e0fe",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "97f06b3fc70ad509e601076c015bc244daa1243f",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 3.59,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n       if (client.getAccessToken() \u003d\u003d null) {\n         // sign the HTTP request\n         client.getSharedKeyCredentials().signRequest(\n                 httpOperation.getConnection(),\n                 hasRequestBody ? bufferLength : 0);\n       } else {\n         httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                 client.getAccessToken());\n       }\n \n+      AbfsClientThrottlingIntercept.sendingRequest(operationType);\n+\n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n-        AbfsClientThrottlingIntercept.sendingRequest(operationType);\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n       return false;\n     } finally {\n       AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n     }\n \n     LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      if (client.getAccessToken() \u003d\u003d null) {\n        // sign the HTTP request\n        client.getSharedKeyCredentials().signRequest(\n                httpOperation.getConnection(),\n                hasRequestBody ? bufferLength : 0);\n      } else {\n        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                client.getAccessToken());\n      }\n\n      AbfsClientThrottlingIntercept.sendingRequest(operationType);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n      return false;\n    } finally {\n      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n    }\n\n    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "97f06b3fc70ad509e601076c015bc244daa1243f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15703. ABFS - Implement client-side throttling.\nContributed by Sneha Varma and Thomas Marquardt.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "97f06b3fc70ad509e601076c015bc244daa1243f",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,50 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n       if (client.getAccessToken() \u003d\u003d null) {\n         // sign the HTTP request\n         client.getSharedKeyCredentials().signRequest(\n                 httpOperation.getConnection(),\n                 hasRequestBody ? bufferLength : 0);\n       } else {\n         httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                 client.getAccessToken());\n       }\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n+        AbfsClientThrottlingIntercept.sendingRequest(operationType);\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n       return false;\n+    } finally {\n+      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n     }\n \n     LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      if (client.getAccessToken() \u003d\u003d null) {\n        // sign the HTTP request\n        client.getSharedKeyCredentials().signRequest(\n                httpOperation.getConnection(),\n                hasRequestBody ? bufferLength : 0);\n      } else {\n        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                client.getAccessToken());\n      }\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        AbfsClientThrottlingIntercept.sendingRequest(operationType);\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n      return false;\n    } finally {\n      AbfsClientThrottlingIntercept.updateMetrics(operationType, httpOperation);\n    }\n\n    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15660. ABFS: Add support for OAuth\nContributed by Da Zhou, Rajeev Bansal, and Junhua Gu.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,47 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n-      client.getSharedKeyCredentials().signRequest(\n-          httpOperation.getConnection(),\n-          hasRequestBody ? bufferLength : 0);\n+      if (client.getAccessToken() \u003d\u003d null) {\n+        // sign the HTTP request\n+        client.getSharedKeyCredentials().signRequest(\n+                httpOperation.getConnection(),\n+                hasRequestBody ? bufferLength : 0);\n+      } else {\n+        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n+                client.getAccessToken());\n+      }\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n       if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n           LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n           LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n       return false;\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n-    }\n+    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      if (client.getAccessToken() \u003d\u003d null) {\n        // sign the HTTP request\n        client.getSharedKeyCredentials().signRequest(\n                httpOperation.getConnection(),\n                hasRequestBody ? bufferLength : 0);\n      } else {\n        httpOperation.getConnection().setRequestProperty(HttpHeaderConfigurations.AUTHORIZATION,\n                client.getAccessToken());\n      }\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n      return false;\n    }\n\n    LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n     AbfsHttpOperation httpOperation \u003d null;\n     try {\n       // initialize the HTTP request and open the connection\n       httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n \n       // sign the HTTP request\n       client.getSharedKeyCredentials().signRequest(\n           httpOperation.getConnection(),\n           hasRequestBody ? bufferLength : 0);\n \n       if (hasRequestBody) {\n         // HttpUrlConnection requires\n         httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n       }\n \n       httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n     } catch (IOException ex) {\n-      if (logger.isDebugEnabled()) {\n+      if (LOG.isDebugEnabled()) {\n         if (httpOperation !\u003d null) {\n-          logger.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n+          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n         } else {\n-          logger.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n+          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n         }\n       }\n       if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n         throw new InvalidAbfsRestOperationException(ex);\n       }\n       return false;\n     }\n \n-    if (logger.isDebugEnabled()) {\n-      logger.debug(\"HttpRequest: \" + httpOperation.toString());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n     }\n \n     if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n       return false;\n     }\n \n     result \u003d httpOperation;\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      client.getSharedKeyCredentials().signRequest(\n          httpOperation.getConnection(),\n          hasRequestBody ? bufferLength : 0);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (LOG.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          LOG.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          LOG.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"HttpRequest: \" + httpOperation.toString());\n    }\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java",
      "extendedDetails": {}
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,43 @@\n+  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n+    AbfsHttpOperation httpOperation \u003d null;\n+    try {\n+      // initialize the HTTP request and open the connection\n+      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n+\n+      // sign the HTTP request\n+      client.getSharedKeyCredentials().signRequest(\n+          httpOperation.getConnection(),\n+          hasRequestBody ? bufferLength : 0);\n+\n+      if (hasRequestBody) {\n+        // HttpUrlConnection requires\n+        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n+      }\n+\n+      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n+    } catch (IOException ex) {\n+      if (logger.isDebugEnabled()) {\n+        if (httpOperation !\u003d null) {\n+          logger.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n+        } else {\n+          logger.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n+        }\n+      }\n+      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n+        throw new InvalidAbfsRestOperationException(ex);\n+      }\n+      return false;\n+    }\n+\n+    if (logger.isDebugEnabled()) {\n+      logger.debug(\"HttpRequest: \" + httpOperation.toString());\n+    }\n+\n+    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n+      return false;\n+    }\n+\n+    result \u003d httpOperation;\n+\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean executeHttpOperation(final int retryCount) throws AzureBlobFileSystemException {\n    AbfsHttpOperation httpOperation \u003d null;\n    try {\n      // initialize the HTTP request and open the connection\n      httpOperation \u003d new AbfsHttpOperation(url, method, requestHeaders);\n\n      // sign the HTTP request\n      client.getSharedKeyCredentials().signRequest(\n          httpOperation.getConnection(),\n          hasRequestBody ? bufferLength : 0);\n\n      if (hasRequestBody) {\n        // HttpUrlConnection requires\n        httpOperation.sendRequest(buffer, bufferOffset, bufferLength);\n      }\n\n      httpOperation.processResponse(buffer, bufferOffset, bufferLength);\n    } catch (IOException ex) {\n      if (logger.isDebugEnabled()) {\n        if (httpOperation !\u003d null) {\n          logger.debug(\"HttpRequestFailure: \" + httpOperation.toString(), ex);\n        } else {\n          logger.debug(\"HttpRequestFailure: \" + method + \",\" + url, ex);\n        }\n      }\n      if (!client.getRetryPolicy().shouldRetry(retryCount, -1)) {\n        throw new InvalidAbfsRestOperationException(ex);\n      }\n      return false;\n    }\n\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"HttpRequest: \" + httpOperation.toString());\n    }\n\n    if (client.getRetryPolicy().shouldRetry(retryCount, httpOperation.getStatusCode())) {\n      return false;\n    }\n\n    result \u003d httpOperation;\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsRestOperation.java"
    }
  }
}