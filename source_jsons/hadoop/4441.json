{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeLifelineProtocolServerSideTranslatorPB.java",
  "functionName": "sendLifeline",
  "functionId": "sendLifeline___controller-RpcController__request-HeartbeatRequestProto",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/DatanodeLifelineProtocolServerSideTranslatorPB.java",
  "functionStartLine": 53,
  "functionEndLine": 70,
  "numCommitsSeen": 2,
  "timeTaken": 1335,
  "changeHistory": [
    "2759689d7d23001f007cb0dbe2521de90734dd5c"
  ],
  "changeHistoryShort": {
    "2759689d7d23001f007cb0dbe2521de90734dd5c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2759689d7d23001f007cb0dbe2521de90734dd5c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9239. DataNode Lifeline Protocol: an alternative protocol for reporting DataNode liveness. Contributed by Chris Nauroth.\n",
      "commitDate": "04/03/16 3:29 PM",
      "commitName": "2759689d7d23001f007cb0dbe2521de90734dd5c",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,18 @@\n+  public LifelineResponseProto sendLifeline(RpcController controller,\n+      HeartbeatRequestProto request) throws ServiceException {\n+    try {\n+      final StorageReport[] report \u003d PBHelperClient.convertStorageReports(\n+          request.getReportsList());\n+      VolumeFailureSummary volumeFailureSummary \u003d\n+          request.hasVolumeFailureSummary() ?\n+              PBHelper.convertVolumeFailureSummary(\n+                  request.getVolumeFailureSummary()) : null;\n+      impl.sendLifeline(PBHelper.convert(request.getRegistration()), report,\n+          request.getCacheCapacity(), request.getCacheUsed(),\n+          request.getXmitsInProgress(), request.getXceiverCount(),\n+          request.getFailedVolumes(), volumeFailureSummary);\n+      return VOID_LIFELINE_RESPONSE_PROTO;\n+    } catch (IOException e) {\n+      throw new ServiceException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public LifelineResponseProto sendLifeline(RpcController controller,\n      HeartbeatRequestProto request) throws ServiceException {\n    try {\n      final StorageReport[] report \u003d PBHelperClient.convertStorageReports(\n          request.getReportsList());\n      VolumeFailureSummary volumeFailureSummary \u003d\n          request.hasVolumeFailureSummary() ?\n              PBHelper.convertVolumeFailureSummary(\n                  request.getVolumeFailureSummary()) : null;\n      impl.sendLifeline(PBHelper.convert(request.getRegistration()), report,\n          request.getCacheCapacity(), request.getCacheUsed(),\n          request.getXmitsInProgress(), request.getXceiverCount(),\n          request.getFailedVolumes(), volumeFailureSummary);\n      return VOID_LIFELINE_RESPONSE_PROTO;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/DatanodeLifelineProtocolServerSideTranslatorPB.java"
    }
  }
}