{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleHandler.java",
  "functionName": "sendMap",
  "functionId": "sendMap___reduceContext-ReduceContext",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
  "functionStartLine": 1047,
  "functionEndLine": 1085,
  "numCommitsSeen": 59,
  "timeTaken": 1996,
  "changeHistory": [
    "595d478408104bdfe1f08efd79930e18862fafbb",
    "d8107fcd1c93c202925f2946d0cd4072fe0aef1e",
    "8e615588d5216394d0251a9c97bd706537856c6d"
  ],
  "changeHistoryShort": {
    "595d478408104bdfe1f08efd79930e18862fafbb": "Ybodychange",
    "d8107fcd1c93c202925f2946d0cd4072fe0aef1e": "Ybodychange",
    "8e615588d5216394d0251a9c97bd706537856c6d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "595d478408104bdfe1f08efd79930e18862fafbb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6960. Shuffle Handler prints disk error stack traces for every read failure.\n",
      "commitDate": "19/09/17 8:35 AM",
      "commitName": "595d478408104bdfe1f08efd79930e18862fafbb",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "19/09/17 7:13 AM",
      "commitNameOld": "3a20debddeac69596ceb5b36f8413529ea8570e6",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,39 @@\n     public ChannelFuture sendMap(ReduceContext reduceContext)\n         throws Exception {\n \n       ChannelFuture nextMap \u003d null;\n       if (reduceContext.getMapsToSend().get() \u003c\n           reduceContext.getMapIds().size()) {\n         int nextIndex \u003d reduceContext.getMapsToSend().getAndIncrement();\n         String mapId \u003d reduceContext.getMapIds().get(nextIndex);\n \n         try {\n           MapOutputInfo info \u003d reduceContext.getInfoMap().get(mapId);\n           if (info \u003d\u003d null) {\n             info \u003d getMapOutputInfo(mapId, reduceContext.getReduceId(),\n                 reduceContext.getJobId(), reduceContext.getUser());\n           }\n           nextMap \u003d sendMapOutput(\n               reduceContext.getCtx(),\n               reduceContext.getCtx().getChannel(),\n               reduceContext.getUser(), mapId,\n               reduceContext.getReduceId(), info);\n           if (null \u003d\u003d nextMap) {\n             sendError(reduceContext.getCtx(), NOT_FOUND);\n             return null;\n           }\n           nextMap.addListener(new ReduceMapFileCount(reduceContext));\n         } catch (IOException e) {\n-          LOG.error(\"Shuffle error :\", e);\n+          if (e instanceof DiskChecker.DiskErrorException) {\n+            LOG.error(\"Shuffle error :\" + e);\n+          } else {\n+            LOG.error(\"Shuffle error :\", e);\n+          }\n           String errorMessage \u003d getErrorMessage(e);\n           sendError(reduceContext.getCtx(), errorMessage,\n               INTERNAL_SERVER_ERROR);\n           return null;\n         }\n       }\n       return nextMap;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ChannelFuture sendMap(ReduceContext reduceContext)\n        throws Exception {\n\n      ChannelFuture nextMap \u003d null;\n      if (reduceContext.getMapsToSend().get() \u003c\n          reduceContext.getMapIds().size()) {\n        int nextIndex \u003d reduceContext.getMapsToSend().getAndIncrement();\n        String mapId \u003d reduceContext.getMapIds().get(nextIndex);\n\n        try {\n          MapOutputInfo info \u003d reduceContext.getInfoMap().get(mapId);\n          if (info \u003d\u003d null) {\n            info \u003d getMapOutputInfo(mapId, reduceContext.getReduceId(),\n                reduceContext.getJobId(), reduceContext.getUser());\n          }\n          nextMap \u003d sendMapOutput(\n              reduceContext.getCtx(),\n              reduceContext.getCtx().getChannel(),\n              reduceContext.getUser(), mapId,\n              reduceContext.getReduceId(), info);\n          if (null \u003d\u003d nextMap) {\n            sendError(reduceContext.getCtx(), NOT_FOUND);\n            return null;\n          }\n          nextMap.addListener(new ReduceMapFileCount(reduceContext));\n        } catch (IOException e) {\n          if (e instanceof DiskChecker.DiskErrorException) {\n            LOG.error(\"Shuffle error :\" + e);\n          } else {\n            LOG.error(\"Shuffle error :\", e);\n          }\n          String errorMessage \u003d getErrorMessage(e);\n          sendError(reduceContext.getCtx(), errorMessage,\n              INTERNAL_SERVER_ERROR);\n          return null;\n        }\n      }\n      return nextMap;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "d8107fcd1c93c202925f2946d0cd4072fe0aef1e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6197. Cache MapOutputLocations in ShuffleHandler. Contributed by Junping Du\n",
      "commitDate": "21/06/16 2:25 PM",
      "commitName": "d8107fcd1c93c202925f2946d0cd4072fe0aef1e",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.97,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n     public ChannelFuture sendMap(ReduceContext reduceContext)\n         throws Exception {\n \n       ChannelFuture nextMap \u003d null;\n       if (reduceContext.getMapsToSend().get() \u003c\n           reduceContext.getMapIds().size()) {\n         int nextIndex \u003d reduceContext.getMapsToSend().getAndIncrement();\n         String mapId \u003d reduceContext.getMapIds().get(nextIndex);\n \n         try {\n           MapOutputInfo info \u003d reduceContext.getInfoMap().get(mapId);\n           if (info \u003d\u003d null) {\n-            info \u003d getMapOutputInfo(reduceContext.getOutputBasePathStr() +\n-                       mapId, mapId, reduceContext.getReduceId(),\n-                       reduceContext.getUser());\n+            info \u003d getMapOutputInfo(mapId, reduceContext.getReduceId(),\n+                reduceContext.getJobId(), reduceContext.getUser());\n           }\n           nextMap \u003d sendMapOutput(\n               reduceContext.getCtx(),\n               reduceContext.getCtx().getChannel(),\n               reduceContext.getUser(), mapId,\n               reduceContext.getReduceId(), info);\n           if (null \u003d\u003d nextMap) {\n             sendError(reduceContext.getCtx(), NOT_FOUND);\n             return null;\n           }\n           nextMap.addListener(new ReduceMapFileCount(reduceContext));\n         } catch (IOException e) {\n           LOG.error(\"Shuffle error :\", e);\n           String errorMessage \u003d getErrorMessage(e);\n           sendError(reduceContext.getCtx(), errorMessage,\n               INTERNAL_SERVER_ERROR);\n           return null;\n         }\n       }\n       return nextMap;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ChannelFuture sendMap(ReduceContext reduceContext)\n        throws Exception {\n\n      ChannelFuture nextMap \u003d null;\n      if (reduceContext.getMapsToSend().get() \u003c\n          reduceContext.getMapIds().size()) {\n        int nextIndex \u003d reduceContext.getMapsToSend().getAndIncrement();\n        String mapId \u003d reduceContext.getMapIds().get(nextIndex);\n\n        try {\n          MapOutputInfo info \u003d reduceContext.getInfoMap().get(mapId);\n          if (info \u003d\u003d null) {\n            info \u003d getMapOutputInfo(mapId, reduceContext.getReduceId(),\n                reduceContext.getJobId(), reduceContext.getUser());\n          }\n          nextMap \u003d sendMapOutput(\n              reduceContext.getCtx(),\n              reduceContext.getCtx().getChannel(),\n              reduceContext.getUser(), mapId,\n              reduceContext.getReduceId(), info);\n          if (null \u003d\u003d nextMap) {\n            sendError(reduceContext.getCtx(), NOT_FOUND);\n            return null;\n          }\n          nextMap.addListener(new ReduceMapFileCount(reduceContext));\n        } catch (IOException e) {\n          LOG.error(\"Shuffle error :\", e);\n          String errorMessage \u003d getErrorMessage(e);\n          sendError(reduceContext.getCtx(), errorMessage,\n              INTERNAL_SERVER_ERROR);\n          return null;\n        }\n      }\n      return nextMap;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "8e615588d5216394d0251a9c97bd706537856c6d": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6474. ShuffleHandler can possibly exhaust nodemanager file descriptors. Contributed by Kuhu Shukla\n",
      "commitDate": "10/09/15 9:00 AM",
      "commitName": "8e615588d5216394d0251a9c97bd706537856c6d",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,36 @@\n+    public ChannelFuture sendMap(ReduceContext reduceContext)\n+        throws Exception {\n+\n+      ChannelFuture nextMap \u003d null;\n+      if (reduceContext.getMapsToSend().get() \u003c\n+          reduceContext.getMapIds().size()) {\n+        int nextIndex \u003d reduceContext.getMapsToSend().getAndIncrement();\n+        String mapId \u003d reduceContext.getMapIds().get(nextIndex);\n+\n+        try {\n+          MapOutputInfo info \u003d reduceContext.getInfoMap().get(mapId);\n+          if (info \u003d\u003d null) {\n+            info \u003d getMapOutputInfo(reduceContext.getOutputBasePathStr() +\n+                       mapId, mapId, reduceContext.getReduceId(),\n+                       reduceContext.getUser());\n+          }\n+          nextMap \u003d sendMapOutput(\n+              reduceContext.getCtx(),\n+              reduceContext.getCtx().getChannel(),\n+              reduceContext.getUser(), mapId,\n+              reduceContext.getReduceId(), info);\n+          if (null \u003d\u003d nextMap) {\n+            sendError(reduceContext.getCtx(), NOT_FOUND);\n+            return null;\n+          }\n+          nextMap.addListener(new ReduceMapFileCount(reduceContext));\n+        } catch (IOException e) {\n+          LOG.error(\"Shuffle error :\", e);\n+          String errorMessage \u003d getErrorMessage(e);\n+          sendError(reduceContext.getCtx(), errorMessage,\n+              INTERNAL_SERVER_ERROR);\n+          return null;\n+        }\n+      }\n+      return nextMap;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public ChannelFuture sendMap(ReduceContext reduceContext)\n        throws Exception {\n\n      ChannelFuture nextMap \u003d null;\n      if (reduceContext.getMapsToSend().get() \u003c\n          reduceContext.getMapIds().size()) {\n        int nextIndex \u003d reduceContext.getMapsToSend().getAndIncrement();\n        String mapId \u003d reduceContext.getMapIds().get(nextIndex);\n\n        try {\n          MapOutputInfo info \u003d reduceContext.getInfoMap().get(mapId);\n          if (info \u003d\u003d null) {\n            info \u003d getMapOutputInfo(reduceContext.getOutputBasePathStr() +\n                       mapId, mapId, reduceContext.getReduceId(),\n                       reduceContext.getUser());\n          }\n          nextMap \u003d sendMapOutput(\n              reduceContext.getCtx(),\n              reduceContext.getCtx().getChannel(),\n              reduceContext.getUser(), mapId,\n              reduceContext.getReduceId(), info);\n          if (null \u003d\u003d nextMap) {\n            sendError(reduceContext.getCtx(), NOT_FOUND);\n            return null;\n          }\n          nextMap.addListener(new ReduceMapFileCount(reduceContext));\n        } catch (IOException e) {\n          LOG.error(\"Shuffle error :\", e);\n          String errorMessage \u003d getErrorMessage(e);\n          sendError(reduceContext.getCtx(), errorMessage,\n              INTERNAL_SERVER_ERROR);\n          return null;\n        }\n      }\n      return nextMap;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java"
    }
  }
}