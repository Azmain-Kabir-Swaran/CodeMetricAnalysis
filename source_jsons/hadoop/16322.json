{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterClientProtocol.java",
  "functionName": "concat",
  "functionId": "concat___trg-String__src-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
  "functionStartLine": 641,
  "functionEndLine": 683,
  "numCommitsSeen": 40,
  "timeTaken": 2167,
  "changeHistory": [
    "48cb58390655b87506fb8b620e4aafd11e38bb34",
    "6425ed27ea638da75f656204d6df4adad1d91fe1"
  ],
  "changeHistoryShort": {
    "48cb58390655b87506fb8b620e4aafd11e38bb34": "Ybodychange",
    "6425ed27ea638da75f656204d6df4adad1d91fe1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "48cb58390655b87506fb8b620e4aafd11e38bb34": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14710. RBF: Improve some RPC performance by using previous block. Contributed by xuzq.\n",
      "commitDate": "28/08/19 10:48 AM",
      "commitName": "48cb58390655b87506fb8b620e4aafd11e38bb34",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "23/08/19 8:17 PM",
      "commitNameOld": "d2225c8ca8f9bdc5cef7266697518394d8763c88",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 4.6,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public void concat(String trg, String[] src) throws IOException {\n     rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n \n     // See if the src and target files are all in the same namespace\n     LocatedBlocks targetBlocks \u003d getBlockLocations(trg, 0, 1);\n     if (targetBlocks \u003d\u003d null) {\n       throw new IOException(\"Cannot locate blocks for target file - \" + trg);\n     }\n     LocatedBlock lastLocatedBlock \u003d targetBlocks.getLastLocatedBlock();\n     String targetBlockPoolId \u003d lastLocatedBlock.getBlock().getBlockPoolId();\n     for (String source : src) {\n       LocatedBlocks sourceBlocks \u003d getBlockLocations(source, 0, 1);\n       if (sourceBlocks \u003d\u003d null) {\n         throw new IOException(\n             \"Cannot located blocks for source file \" + source);\n       }\n       String sourceBlockPoolId \u003d\n           sourceBlocks.getLastLocatedBlock().getBlock().getBlockPoolId();\n       if (!sourceBlockPoolId.equals(targetBlockPoolId)) {\n         throw new IOException(\"Cannot concatenate source file \" + source\n             + \" because it is located in a different namespace\"\n             + \" with block pool id \" + sourceBlockPoolId\n             + \" from the target file with block pool id \"\n             + targetBlockPoolId);\n       }\n     }\n \n     // Find locations in the matching namespace.\n     final RemoteLocation targetDestination \u003d\n         rpcServer.getLocationForPath(trg, true, targetBlockPoolId);\n     String[] sourceDestinations \u003d new String[src.length];\n     for (int i \u003d 0; i \u003c src.length; i++) {\n       String sourceFile \u003d src[i];\n       RemoteLocation location \u003d\n           rpcServer.getLocationForPath(sourceFile, true, targetBlockPoolId);\n       sourceDestinations[i] \u003d location.getDest();\n     }\n     // Invoke\n     RemoteMethod method \u003d new RemoteMethod(\"concat\",\n         new Class\u003c?\u003e[] {String.class, String[].class},\n         targetDestination.getDest(), sourceDestinations);\n-    rpcClient.invokeSingle(targetDestination, method);\n+    rpcClient.invokeSingle(targetDestination, method, Void.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void concat(String trg, String[] src) throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n\n    // See if the src and target files are all in the same namespace\n    LocatedBlocks targetBlocks \u003d getBlockLocations(trg, 0, 1);\n    if (targetBlocks \u003d\u003d null) {\n      throw new IOException(\"Cannot locate blocks for target file - \" + trg);\n    }\n    LocatedBlock lastLocatedBlock \u003d targetBlocks.getLastLocatedBlock();\n    String targetBlockPoolId \u003d lastLocatedBlock.getBlock().getBlockPoolId();\n    for (String source : src) {\n      LocatedBlocks sourceBlocks \u003d getBlockLocations(source, 0, 1);\n      if (sourceBlocks \u003d\u003d null) {\n        throw new IOException(\n            \"Cannot located blocks for source file \" + source);\n      }\n      String sourceBlockPoolId \u003d\n          sourceBlocks.getLastLocatedBlock().getBlock().getBlockPoolId();\n      if (!sourceBlockPoolId.equals(targetBlockPoolId)) {\n        throw new IOException(\"Cannot concatenate source file \" + source\n            + \" because it is located in a different namespace\"\n            + \" with block pool id \" + sourceBlockPoolId\n            + \" from the target file with block pool id \"\n            + targetBlockPoolId);\n      }\n    }\n\n    // Find locations in the matching namespace.\n    final RemoteLocation targetDestination \u003d\n        rpcServer.getLocationForPath(trg, true, targetBlockPoolId);\n    String[] sourceDestinations \u003d new String[src.length];\n    for (int i \u003d 0; i \u003c src.length; i++) {\n      String sourceFile \u003d src[i];\n      RemoteLocation location \u003d\n          rpcServer.getLocationForPath(sourceFile, true, targetBlockPoolId);\n      sourceDestinations[i] \u003d location.getDest();\n    }\n    // Invoke\n    RemoteMethod method \u003d new RemoteMethod(\"concat\",\n        new Class\u003c?\u003e[] {String.class, String[].class},\n        targetDestination.getDest(), sourceDestinations);\n    rpcClient.invokeSingle(targetDestination, method, Void.class);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
      "extendedDetails": {}
    },
    "6425ed27ea638da75f656204d6df4adad1d91fe1": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13790. RBF: Move ClientProtocol APIs to its own module. Contributed by Chao Sun.\n",
      "commitDate": "19/08/18 11:50 PM",
      "commitName": "6425ed27ea638da75f656204d6df4adad1d91fe1",
      "commitAuthor": "Brahma Reddy Battula",
      "diff": "@@ -0,0 +1,43 @@\n+  public void concat(String trg, String[] src) throws IOException {\n+    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n+\n+    // See if the src and target files are all in the same namespace\n+    LocatedBlocks targetBlocks \u003d getBlockLocations(trg, 0, 1);\n+    if (targetBlocks \u003d\u003d null) {\n+      throw new IOException(\"Cannot locate blocks for target file - \" + trg);\n+    }\n+    LocatedBlock lastLocatedBlock \u003d targetBlocks.getLastLocatedBlock();\n+    String targetBlockPoolId \u003d lastLocatedBlock.getBlock().getBlockPoolId();\n+    for (String source : src) {\n+      LocatedBlocks sourceBlocks \u003d getBlockLocations(source, 0, 1);\n+      if (sourceBlocks \u003d\u003d null) {\n+        throw new IOException(\n+            \"Cannot located blocks for source file \" + source);\n+      }\n+      String sourceBlockPoolId \u003d\n+          sourceBlocks.getLastLocatedBlock().getBlock().getBlockPoolId();\n+      if (!sourceBlockPoolId.equals(targetBlockPoolId)) {\n+        throw new IOException(\"Cannot concatenate source file \" + source\n+            + \" because it is located in a different namespace\"\n+            + \" with block pool id \" + sourceBlockPoolId\n+            + \" from the target file with block pool id \"\n+            + targetBlockPoolId);\n+      }\n+    }\n+\n+    // Find locations in the matching namespace.\n+    final RemoteLocation targetDestination \u003d\n+        rpcServer.getLocationForPath(trg, true, targetBlockPoolId);\n+    String[] sourceDestinations \u003d new String[src.length];\n+    for (int i \u003d 0; i \u003c src.length; i++) {\n+      String sourceFile \u003d src[i];\n+      RemoteLocation location \u003d\n+          rpcServer.getLocationForPath(sourceFile, true, targetBlockPoolId);\n+      sourceDestinations[i] \u003d location.getDest();\n+    }\n+    // Invoke\n+    RemoteMethod method \u003d new RemoteMethod(\"concat\",\n+        new Class\u003c?\u003e[] {String.class, String[].class},\n+        targetDestination.getDest(), sourceDestinations);\n+    rpcClient.invokeSingle(targetDestination, method);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void concat(String trg, String[] src) throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n\n    // See if the src and target files are all in the same namespace\n    LocatedBlocks targetBlocks \u003d getBlockLocations(trg, 0, 1);\n    if (targetBlocks \u003d\u003d null) {\n      throw new IOException(\"Cannot locate blocks for target file - \" + trg);\n    }\n    LocatedBlock lastLocatedBlock \u003d targetBlocks.getLastLocatedBlock();\n    String targetBlockPoolId \u003d lastLocatedBlock.getBlock().getBlockPoolId();\n    for (String source : src) {\n      LocatedBlocks sourceBlocks \u003d getBlockLocations(source, 0, 1);\n      if (sourceBlocks \u003d\u003d null) {\n        throw new IOException(\n            \"Cannot located blocks for source file \" + source);\n      }\n      String sourceBlockPoolId \u003d\n          sourceBlocks.getLastLocatedBlock().getBlock().getBlockPoolId();\n      if (!sourceBlockPoolId.equals(targetBlockPoolId)) {\n        throw new IOException(\"Cannot concatenate source file \" + source\n            + \" because it is located in a different namespace\"\n            + \" with block pool id \" + sourceBlockPoolId\n            + \" from the target file with block pool id \"\n            + targetBlockPoolId);\n      }\n    }\n\n    // Find locations in the matching namespace.\n    final RemoteLocation targetDestination \u003d\n        rpcServer.getLocationForPath(trg, true, targetBlockPoolId);\n    String[] sourceDestinations \u003d new String[src.length];\n    for (int i \u003d 0; i \u003c src.length; i++) {\n      String sourceFile \u003d src[i];\n      RemoteLocation location \u003d\n          rpcServer.getLocationForPath(sourceFile, true, targetBlockPoolId);\n      sourceDestinations[i] \u003d location.getDest();\n    }\n    // Invoke\n    RemoteMethod method \u003d new RemoteMethod(\"concat\",\n        new Class\u003c?\u003e[] {String.class, String[].class},\n        targetDestination.getDest(), sourceDestinations);\n    rpcClient.invokeSingle(targetDestination, method);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java"
    }
  }
}