{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "setFieldsFromProperties",
  "functionId": "setFieldsFromProperties___props-Properties__sd-StorageDirectory__overrideLayoutVersion-boolean__toLayoutVersion-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 618,
  "functionEndLine": 669,
  "numCommitsSeen": 75,
  "timeTaken": 2650,
  "changeHistory": [
    "b668eb91556b8c85c2b4925808ccb1f769031c20",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6"
  ],
  "changeHistoryShort": {
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/08/17 1:48 AM",
      "commitNameOld": "2e43c28e01fe006210e71aab179527669f6412ed",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 122.71,
      "commitsBetweenForRepo": 1011,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,52 @@\n   private void setFieldsFromProperties(Properties props, StorageDirectory sd,\n       boolean overrideLayoutVersion, int toLayoutVersion) throws IOException {\n+    if (props \u003d\u003d null) {\n+      return;\n+    }\n     if (overrideLayoutVersion) {\n       this.layoutVersion \u003d toLayoutVersion;\n     } else {\n       setLayoutVersion(props, sd);\n     }\n     setcTime(props, sd);\n     checkStorageType(props, sd);\n     setClusterId(props, layoutVersion, sd);\n     \n     // Read NamespaceID in version before federation\n     if (!DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       setNamespaceID(props, sd);\n     }\n     \n \n     // valid storage id, storage id may be empty\n     String ssid \u003d props.getProperty(\"storageID\");\n     if (ssid \u003d\u003d null) {\n       throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n           + STORAGE_FILE_VERSION + \" is invalid.\");\n     }\n     String sid \u003d sd.getStorageUuid();\n     if (!(sid \u003d\u003d null || sid.equals(\"\") ||\n           ssid.equals(\"\") || sid.equals(ssid))) {\n       throw new InconsistentFSStateException(sd.getRoot(),\n           \"has incompatible storage Id.\");\n     }\n \n     if (sid \u003d\u003d null) { // update id only if it was null\n       sd.setStorageUuid(ssid);\n     }\n \n     // Update the datanode UUID if present.\n     if (props.getProperty(\"datanodeUuid\") !\u003d null) {\n       String dnUuid \u003d props.getProperty(\"datanodeUuid\");\n \n       if (getDatanodeUuid() \u003d\u003d null) {\n         setDatanodeUuid(dnUuid);\n       } else if (getDatanodeUuid().compareTo(dnUuid) !\u003d 0) {\n         throw new InconsistentFSStateException(sd.getRoot(),\n             \"Root \" + sd.getRoot() + \": DatanodeUuid\u003d\" + dnUuid +\n             \", does not match \" + getDatanodeUuid() + \" from other\" +\n             \" StorageDirectory.\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setFieldsFromProperties(Properties props, StorageDirectory sd,\n      boolean overrideLayoutVersion, int toLayoutVersion) throws IOException {\n    if (props \u003d\u003d null) {\n      return;\n    }\n    if (overrideLayoutVersion) {\n      this.layoutVersion \u003d toLayoutVersion;\n    } else {\n      setLayoutVersion(props, sd);\n    }\n    setcTime(props, sd);\n    checkStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n\n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d sd.getStorageUuid();\n    if (!(sid \u003d\u003d null || sid.equals(\"\") ||\n          ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n\n    if (sid \u003d\u003d null) { // update id only if it was null\n      sd.setStorageUuid(ssid);\n    }\n\n    // Update the datanode UUID if present.\n    if (props.getProperty(\"datanodeUuid\") !\u003d null) {\n      String dnUuid \u003d props.getProperty(\"datanodeUuid\");\n\n      if (getDatanodeUuid() \u003d\u003d null) {\n        setDatanodeUuid(dnUuid);\n      } else if (getDatanodeUuid().compareTo(dnUuid) !\u003d 0) {\n        throw new InconsistentFSStateException(sd.getRoot(),\n            \"Root \" + sd.getRoot() + \": DatanodeUuid\u003d\" + dnUuid +\n            \", does not match \" + getDatanodeUuid() + \" from other\" +\n            \" StorageDirectory.\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/12/13 9:41 AM",
      "commitNameOld": "18159be495f96bde4bd4fa2cacb14aafb87e87bc",
      "commitAuthorOld": "",
      "daysBetweenCommits": 59.4,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   private void setFieldsFromProperties(Properties props, StorageDirectory sd,\n       boolean overrideLayoutVersion, int toLayoutVersion) throws IOException {\n     if (overrideLayoutVersion) {\n       this.layoutVersion \u003d toLayoutVersion;\n     } else {\n       setLayoutVersion(props, sd);\n     }\n     setcTime(props, sd);\n-    setStorageType(props, sd);\n+    checkStorageType(props, sd);\n     setClusterId(props, layoutVersion, sd);\n     \n     // Read NamespaceID in version before federation\n-    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+    if (!DataNodeLayoutVersion.supports(\n+        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       setNamespaceID(props, sd);\n     }\n     \n \n     // valid storage id, storage id may be empty\n     String ssid \u003d props.getProperty(\"storageID\");\n     if (ssid \u003d\u003d null) {\n       throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n           + STORAGE_FILE_VERSION + \" is invalid.\");\n     }\n     String sid \u003d sd.getStorageUuid();\n     if (!(sid \u003d\u003d null || sid.equals(\"\") ||\n           ssid.equals(\"\") || sid.equals(ssid))) {\n       throw new InconsistentFSStateException(sd.getRoot(),\n           \"has incompatible storage Id.\");\n     }\n \n     if (sid \u003d\u003d null) { // update id only if it was null\n       sd.setStorageUuid(ssid);\n     }\n \n     // Update the datanode UUID if present.\n     if (props.getProperty(\"datanodeUuid\") !\u003d null) {\n       String dnUuid \u003d props.getProperty(\"datanodeUuid\");\n \n       if (getDatanodeUuid() \u003d\u003d null) {\n         setDatanodeUuid(dnUuid);\n       } else if (getDatanodeUuid().compareTo(dnUuid) !\u003d 0) {\n         throw new InconsistentFSStateException(sd.getRoot(),\n             \"Root \" + sd.getRoot() + \": DatanodeUuid\u003d\" + dnUuid +\n             \", does not match \" + getDatanodeUuid() + \" from other\" +\n             \" StorageDirectory.\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setFieldsFromProperties(Properties props, StorageDirectory sd,\n      boolean overrideLayoutVersion, int toLayoutVersion) throws IOException {\n    if (overrideLayoutVersion) {\n      this.layoutVersion \u003d toLayoutVersion;\n    } else {\n      setLayoutVersion(props, sd);\n    }\n    setcTime(props, sd);\n    checkStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n\n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d sd.getStorageUuid();\n    if (!(sid \u003d\u003d null || sid.equals(\"\") ||\n          ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n\n    if (sid \u003d\u003d null) { // update id only if it was null\n      sd.setStorageUuid(ssid);\n    }\n\n    // Update the datanode UUID if present.\n    if (props.getProperty(\"datanodeUuid\") !\u003d null) {\n      String dnUuid \u003d props.getProperty(\"datanodeUuid\");\n\n      if (getDatanodeUuid() \u003d\u003d null) {\n        setDatanodeUuid(dnUuid);\n      } else if (getDatanodeUuid().compareTo(dnUuid) !\u003d 0) {\n        throw new InconsistentFSStateException(sd.getRoot(),\n            \"Root \" + sd.getRoot() + \": DatanodeUuid\u003d\" + dnUuid +\n            \", does not match \" + getDatanodeUuid() + \" from other\" +\n            \" StorageDirectory.\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5526. Datanode cannot roll back to previous layout version. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 7:33 AM",
      "commitName": "65ee88b0de5218a07c0f9dbb7416db551584f0a6",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,32 @@\n+  private void setFieldsFromProperties(Properties props, StorageDirectory sd,\n+      boolean overrideLayoutVersion, int toLayoutVersion) throws IOException {\n+    if (overrideLayoutVersion) {\n+      this.layoutVersion \u003d toLayoutVersion;\n+    } else {\n+      setLayoutVersion(props, sd);\n+    }\n+    setcTime(props, sd);\n+    setStorageType(props, sd);\n+    setClusterId(props, layoutVersion, sd);\n+    \n+    // Read NamespaceID in version before federation\n+    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+      setNamespaceID(props, sd);\n+    }\n+    \n+    // valid storage id, storage id may be empty\n+    String ssid \u003d props.getProperty(\"storageID\");\n+    if (ssid \u003d\u003d null) {\n+      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n+          + STORAGE_FILE_VERSION + \" is invalid.\");\n+    }\n+    String sid \u003d getStorageID();\n+    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n+      throw new InconsistentFSStateException(sd.getRoot(),\n+          \"has incompatible storage Id.\");\n+    }\n+    \n+    if (sid.equals(\"\")) { // update id only if it was empty\n+      setStorageID(ssid);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setFieldsFromProperties(Properties props, StorageDirectory sd,\n      boolean overrideLayoutVersion, int toLayoutVersion) throws IOException {\n    if (overrideLayoutVersion) {\n      this.layoutVersion \u003d toLayoutVersion;\n    } else {\n      setLayoutVersion(props, sd);\n    }\n    setcTime(props, sd);\n    setStorageType(props, sd);\n    setClusterId(props, layoutVersion, sd);\n    \n    // Read NamespaceID in version before federation\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      setNamespaceID(props, sd);\n    }\n    \n    // valid storage id, storage id may be empty\n    String ssid \u003d props.getProperty(\"storageID\");\n    if (ssid \u003d\u003d null) {\n      throw new InconsistentFSStateException(sd.getRoot(), \"file \"\n          + STORAGE_FILE_VERSION + \" is invalid.\");\n    }\n    String sid \u003d getStorageID();\n    if (!(sid.equals(\"\") || ssid.equals(\"\") || sid.equals(ssid))) {\n      throw new InconsistentFSStateException(sd.getRoot(),\n          \"has incompatible storage Id.\");\n    }\n    \n    if (sid.equals(\"\")) { // update id only if it was empty\n      setStorageID(ssid);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
    }
  }
}