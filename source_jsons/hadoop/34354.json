{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLocalizer.java",
  "functionName": "initDirs",
  "functionId": "initDirs___conf-Configuration__user-String__appId-String__lfs-FileContext__localDirs-List__Path__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
  "functionStartLine": 493,
  "functionEndLine": 517,
  "numCommitsSeen": 41,
  "timeTaken": 8281,
  "changeHistory": [
    "7576a688ea84aed7206321b1f03594e43a5f216e",
    "656e859f5c8a89dbc891ca6179b0ba84bd38fd95",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "0e7204c9e740bfbe13b0128f7612e616e30c1970",
    "2659fded836223f1b85f6daf20f76253793a4a54",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "7576a688ea84aed7206321b1f03594e43a5f216e": "Ybodychange",
    "656e859f5c8a89dbc891ca6179b0ba84bd38fd95": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "0e7204c9e740bfbe13b0128f7612e616e30c1970": "Ybodychange",
    "2659fded836223f1b85f6daf20f76253793a4a54": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7576a688ea84aed7206321b1f03594e43a5f216e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6708. Nodemanager container crash after ext3 folder limit. Contributed by Bibin A Chundatt\n",
      "commitDate": "06/07/17 7:40 AM",
      "commitName": "7576a688ea84aed7206321b1f03594e43a5f216e",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/04/17 2:56 PM",
      "commitNameOld": "e9ac61cc0e55d1a0b132c795047e959c761dc3be",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 86.7,
      "commitsBetweenForRepo": 436,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private static void initDirs(Configuration conf, String user, String appId,\n       FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n     if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n       throw new IOException(\"Cannot initialize without local dirs\");\n     }\n     String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n     String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n     for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n       // $x/usercache/$user\n       Path base \u003d lfs.makeQualified(\n           new Path(new Path(localDirs.get(i), USERCACHE), user));\n       // $x/usercache/$user/filecache\n       Path userFileCacheDir \u003d new Path(base, FILECACHE);\n       usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n-      createDir(lfs, userFileCacheDir, FILECACHE_PERMS, false);\n+      createDir(lfs, userFileCacheDir, FILECACHE_PERMS);\n       // $x/usercache/$user/appcache/$appId\n       Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n       // $x/usercache/$user/appcache/$appId/filecache\n       Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n       appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n-      createDir(lfs, appFileCacheDir, FILECACHE_PERMS, false);\n+      createDir(lfs, appFileCacheDir, FILECACHE_PERMS);\n     }\n     conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n     conf.setStrings(String.format(USERCACHE_CTXT_FMT, user), usersFileCacheDirs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void initDirs(Configuration conf, String user, String appId,\n      FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n    if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n      throw new IOException(\"Cannot initialize without local dirs\");\n    }\n    String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n    String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n    for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n      // $x/usercache/$user\n      Path base \u003d lfs.makeQualified(\n          new Path(new Path(localDirs.get(i), USERCACHE), user));\n      // $x/usercache/$user/filecache\n      Path userFileCacheDir \u003d new Path(base, FILECACHE);\n      usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n      createDir(lfs, userFileCacheDir, FILECACHE_PERMS);\n      // $x/usercache/$user/appcache/$appId\n      Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n      // $x/usercache/$user/appcache/$appId/filecache\n      Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n      appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n      createDir(lfs, appFileCacheDir, FILECACHE_PERMS);\n    }\n    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n    conf.setStrings(String.format(USERCACHE_CTXT_FMT, user), usersFileCacheDirs);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "656e859f5c8a89dbc891ca6179b0ba84bd38fd95": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1386. NodeManager mistakenly loses resources and relocalizes them (Jason Lowe via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541375 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/13 7:17 PM",
      "commitName": "656e859f5c8a89dbc891ca6179b0ba84bd38fd95",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "04/10/13 9:25 PM",
      "commitNameOld": "0a887a091023073b91b1a789a52e3a26e9b24bae",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 38.95,
      "commitsBetweenForRepo": 223,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private static void initDirs(Configuration conf, String user, String appId,\n       FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n     if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n       throw new IOException(\"Cannot initialize without local dirs\");\n     }\n     String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n     String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n     for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n       // $x/usercache/$user\n       Path base \u003d lfs.makeQualified(\n           new Path(new Path(localDirs.get(i), USERCACHE), user));\n       // $x/usercache/$user/filecache\n       Path userFileCacheDir \u003d new Path(base, FILECACHE);\n       usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n-      lfs.mkdir(userFileCacheDir, null, false);\n+      createDir(lfs, userFileCacheDir, FILECACHE_PERMS, false);\n       // $x/usercache/$user/appcache/$appId\n       Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n       // $x/usercache/$user/appcache/$appId/filecache\n       Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n       appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n-      lfs.mkdir(appFileCacheDir, null, false);\n+      createDir(lfs, appFileCacheDir, FILECACHE_PERMS, false);\n     }\n     conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n     conf.setStrings(String.format(USERCACHE_CTXT_FMT, user), usersFileCacheDirs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void initDirs(Configuration conf, String user, String appId,\n      FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n    if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n      throw new IOException(\"Cannot initialize without local dirs\");\n    }\n    String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n    String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n    for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n      // $x/usercache/$user\n      Path base \u003d lfs.makeQualified(\n          new Path(new Path(localDirs.get(i), USERCACHE), user));\n      // $x/usercache/$user/filecache\n      Path userFileCacheDir \u003d new Path(base, FILECACHE);\n      usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n      createDir(lfs, userFileCacheDir, FILECACHE_PERMS, false);\n      // $x/usercache/$user/appcache/$appId\n      Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n      // $x/usercache/$user/appcache/$appId/filecache\n      Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n      appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n      createDir(lfs, appFileCacheDir, FILECACHE_PERMS, false);\n    }\n    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n    conf.setStrings(String.format(USERCACHE_CTXT_FMT, user), usersFileCacheDirs);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void initDirs(Configuration conf, String user, String appId,\n      FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n    if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n      throw new IOException(\"Cannot initialize without local dirs\");\n    }\n    String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n    String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n    for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n      // $x/usercache/$user\n      Path base \u003d lfs.makeQualified(\n          new Path(new Path(localDirs.get(i), USERCACHE), user));\n      // $x/usercache/$user/filecache\n      Path userFileCacheDir \u003d new Path(base, FILECACHE);\n      usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n      lfs.mkdir(userFileCacheDir, null, false);\n      // $x/usercache/$user/appcache/$appId\n      Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n      // $x/usercache/$user/appcache/$appId/filecache\n      Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n      appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n      lfs.mkdir(appFileCacheDir, null, false);\n    }\n    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n    conf.setStrings(String.format(USERCACHE_CTXT_FMT, user), usersFileCacheDirs);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "0e7204c9e740bfbe13b0128f7612e616e30c1970": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4379. Node Manager throws java.lang.OutOfMemoryError: Java heap space due to org.apache.hadoop.fs.LocalDirAllocator.contexts (Devaraj K via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358305 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/07/12 10:19 AM",
      "commitName": "0e7204c9e740bfbe13b0128f7612e616e30c1970",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "29/02/12 12:05 PM",
      "commitNameOld": "2659fded836223f1b85f6daf20f76253793a4a54",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 127.88,
      "commitsBetweenForRepo": 784,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private static void initDirs(Configuration conf, String user, String appId,\n       FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n     if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n       throw new IOException(\"Cannot initialize without local dirs\");\n     }\n     String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n     String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n     for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n       // $x/usercache/$user\n       Path base \u003d lfs.makeQualified(\n           new Path(new Path(localDirs.get(i), USERCACHE), user));\n       // $x/usercache/$user/filecache\n       Path userFileCacheDir \u003d new Path(base, FILECACHE);\n       usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n       lfs.mkdir(userFileCacheDir, null, false);\n       // $x/usercache/$user/appcache/$appId\n       Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n       // $x/usercache/$user/appcache/$appId/filecache\n       Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n       appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n       lfs.mkdir(appFileCacheDir, null, false);\n     }\n     conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n-    conf.setStrings(String.format(USERCACHE_CTXT_FMT, appId), usersFileCacheDirs);\n+    conf.setStrings(String.format(USERCACHE_CTXT_FMT, user), usersFileCacheDirs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void initDirs(Configuration conf, String user, String appId,\n      FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n    if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n      throw new IOException(\"Cannot initialize without local dirs\");\n    }\n    String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n    String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n    for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n      // $x/usercache/$user\n      Path base \u003d lfs.makeQualified(\n          new Path(new Path(localDirs.get(i), USERCACHE), user));\n      // $x/usercache/$user/filecache\n      Path userFileCacheDir \u003d new Path(base, FILECACHE);\n      usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n      lfs.mkdir(userFileCacheDir, null, false);\n      // $x/usercache/$user/appcache/$appId\n      Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n      // $x/usercache/$user/appcache/$appId/filecache\n      Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n      appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n      lfs.mkdir(appFileCacheDir, null, false);\n    }\n    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n    conf.setStrings(String.format(USERCACHE_CTXT_FMT, user), usersFileCacheDirs);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "2659fded836223f1b85f6daf20f76253793a4a54": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3728. ShuffleHandler can\u0027t access results when configured in a secure mode (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295245 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/02/12 12:05 PM",
      "commitName": "2659fded836223f1b85f6daf20f76253793a4a54",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "27/12/11 10:26 AM",
      "commitNameOld": "cd90b822278bf98a166e34e31aa2503ee4e48083",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 64.07,
      "commitsBetweenForRepo": 382,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,25 @@\n   private static void initDirs(Configuration conf, String user, String appId,\n       FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n     if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n       throw new IOException(\"Cannot initialize without local dirs\");\n     }\n     String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n     String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n     for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n       // $x/usercache/$user\n       Path base \u003d lfs.makeQualified(\n           new Path(new Path(localDirs.get(i), USERCACHE), user));\n       // $x/usercache/$user/filecache\n       Path userFileCacheDir \u003d new Path(base, FILECACHE);\n       usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n       lfs.mkdir(userFileCacheDir, null, false);\n       // $x/usercache/$user/appcache/$appId\n       Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n       // $x/usercache/$user/appcache/$appId/filecache\n       Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n       appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n       lfs.mkdir(appFileCacheDir, null, false);\n-      // $x/usercache/$user/appcache/$appId/output\n-      lfs.mkdir(new Path(appBase, OUTPUTDIR), null, false);\n     }\n     conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n     conf.setStrings(String.format(USERCACHE_CTXT_FMT, appId), usersFileCacheDirs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void initDirs(Configuration conf, String user, String appId,\n      FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n    if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n      throw new IOException(\"Cannot initialize without local dirs\");\n    }\n    String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n    String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n    for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n      // $x/usercache/$user\n      Path base \u003d lfs.makeQualified(\n          new Path(new Path(localDirs.get(i), USERCACHE), user));\n      // $x/usercache/$user/filecache\n      Path userFileCacheDir \u003d new Path(base, FILECACHE);\n      usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n      lfs.mkdir(userFileCacheDir, null, false);\n      // $x/usercache/$user/appcache/$appId\n      Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n      // $x/usercache/$user/appcache/$appId/filecache\n      Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n      appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n      lfs.mkdir(appFileCacheDir, null, false);\n    }\n    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n    conf.setStrings(String.format(USERCACHE_CTXT_FMT, appId), usersFileCacheDirs);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void initDirs(Configuration conf, String user, String appId,\n      FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n    if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n      throw new IOException(\"Cannot initialize without local dirs\");\n    }\n    String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n    String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n    for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n      // $x/usercache/$user\n      Path base \u003d lfs.makeQualified(\n          new Path(new Path(localDirs.get(i), USERCACHE), user));\n      // $x/usercache/$user/filecache\n      Path userFileCacheDir \u003d new Path(base, FILECACHE);\n      usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n      lfs.mkdir(userFileCacheDir, null, false);\n      // $x/usercache/$user/appcache/$appId\n      Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n      // $x/usercache/$user/appcache/$appId/filecache\n      Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n      appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n      lfs.mkdir(appFileCacheDir, null, false);\n      // $x/usercache/$user/appcache/$appId/output\n      lfs.mkdir(new Path(appBase, OUTPUTDIR), null, false);\n    }\n    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n    conf.setStrings(String.format(USERCACHE_CTXT_FMT, appId), usersFileCacheDirs);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,27 @@\n+  private static void initDirs(Configuration conf, String user, String appId,\n+      FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n+    if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n+      throw new IOException(\"Cannot initialize without local dirs\");\n+    }\n+    String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n+    String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n+    for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n+      // $x/usercache/$user\n+      Path base \u003d lfs.makeQualified(\n+          new Path(new Path(localDirs.get(i), USERCACHE), user));\n+      // $x/usercache/$user/filecache\n+      Path userFileCacheDir \u003d new Path(base, FILECACHE);\n+      usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n+      lfs.mkdir(userFileCacheDir, null, false);\n+      // $x/usercache/$user/appcache/$appId\n+      Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n+      // $x/usercache/$user/appcache/$appId/filecache\n+      Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n+      appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n+      lfs.mkdir(appFileCacheDir, null, false);\n+      // $x/usercache/$user/appcache/$appId/output\n+      lfs.mkdir(new Path(appBase, OUTPUTDIR), null, false);\n+    }\n+    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n+    conf.setStrings(String.format(USERCACHE_CTXT_FMT, appId), usersFileCacheDirs);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void initDirs(Configuration conf, String user, String appId,\n      FileContext lfs, List\u003cPath\u003e localDirs) throws IOException {\n    if (null \u003d\u003d localDirs || 0 \u003d\u003d localDirs.size()) {\n      throw new IOException(\"Cannot initialize without local dirs\");\n    }\n    String[] appsFileCacheDirs \u003d new String[localDirs.size()];\n    String[] usersFileCacheDirs \u003d new String[localDirs.size()];\n    for (int i \u003d 0, n \u003d localDirs.size(); i \u003c n; ++i) {\n      // $x/usercache/$user\n      Path base \u003d lfs.makeQualified(\n          new Path(new Path(localDirs.get(i), USERCACHE), user));\n      // $x/usercache/$user/filecache\n      Path userFileCacheDir \u003d new Path(base, FILECACHE);\n      usersFileCacheDirs[i] \u003d userFileCacheDir.toString();\n      lfs.mkdir(userFileCacheDir, null, false);\n      // $x/usercache/$user/appcache/$appId\n      Path appBase \u003d new Path(base, new Path(APPCACHE, appId));\n      // $x/usercache/$user/appcache/$appId/filecache\n      Path appFileCacheDir \u003d new Path(appBase, FILECACHE);\n      appsFileCacheDirs[i] \u003d appFileCacheDir.toString();\n      lfs.mkdir(appFileCacheDir, null, false);\n      // $x/usercache/$user/appcache/$appId/output\n      lfs.mkdir(new Path(appBase, OUTPUTDIR), null, false);\n    }\n    conf.setStrings(String.format(APPCACHE_CTXT_FMT, appId), appsFileCacheDirs);\n    conf.setStrings(String.format(USERCACHE_CTXT_FMT, appId), usersFileCacheDirs);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
    }
  }
}