{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ChecksumFileSystem.java",
  "functionName": "create",
  "functionId": "create___f-Path__permission-FsPermission__overwrite-boolean__createParent-boolean__bufferSize-int__replication-short__blockSize-long__progress-Progressable",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ChecksumFileSystem.java",
  "functionStartLine": 462,
  "functionEndLine": 492,
  "numCommitsSeen": 29,
  "timeTaken": 1724,
  "changeHistory": [
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
    "fa08b92f46365980ac9405c544c69b8d4fafa0ef",
    "7f7b05226e3ae1fdf3c440f8d26814f4d955f734",
    "2deaca4415863fb20cee539878fd9acc3fc2fa82"
  ],
  "changeHistoryShort": {
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf": "Ybodychange",
    "fa08b92f46365980ac9405c544c69b8d4fafa0ef": "Ybodychange",
    "7f7b05226e3ae1fdf3c440f8d26814f4d955f734": "Ybodychange",
    "2deaca4415863fb20cee539878fd9acc3fc2fa82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11321. copyToLocal cannot save a file to an SMB share unless the user has Full Control permissions. Contributed by Chris Nauroth.\n",
      "commitDate": "16/12/14 3:29 PM",
      "commitName": "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
      "commitAuthor": "cnauroth",
      "commitDateOld": "13/10/14 8:43 PM",
      "commitNameOld": "5faaba0bd09db4ddcf5c1824ad7abb18b1489bbb",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 63.82,
      "commitsBetweenForRepo": 522,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,31 @@\n   private FSDataOutputStream create(Path f, FsPermission permission,\n       boolean overwrite, boolean createParent, int bufferSize,\n       short replication, long blockSize,\n       Progressable progress) throws IOException {\n     Path parent \u003d f.getParent();\n     if (parent !\u003d null) {\n       if (!createParent \u0026\u0026 !exists(parent)) {\n         throw new FileNotFoundException(\"Parent directory doesn\u0027t exist: \"\n             + parent);\n       } else if (!mkdirs(parent)) {\n         throw new IOException(\"Mkdirs failed to create \" + parent\n             + \" (exists\u003d\" + exists(parent) + \", cwd\u003d\" + getWorkingDirectory()\n             + \")\");\n       }\n     }\n     final FSDataOutputStream out;\n     if (writeChecksum) {\n       out \u003d new FSDataOutputStream(\n           new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n-              blockSize, progress), null);\n+              blockSize, progress, permission), null);\n     } else {\n       out \u003d fs.create(f, permission, overwrite, bufferSize, replication,\n           blockSize, progress);\n       // remove the checksum file since we aren\u0027t writing one\n       Path checkFile \u003d getChecksumFile(f);\n       if (fs.exists(checkFile)) {\n         fs.delete(checkFile, true);\n       }\n     }\n-    if (permission !\u003d null) {\n-      setPermission(f, permission);\n-    }\n     return out;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataOutputStream create(Path f, FsPermission permission,\n      boolean overwrite, boolean createParent, int bufferSize,\n      short replication, long blockSize,\n      Progressable progress) throws IOException {\n    Path parent \u003d f.getParent();\n    if (parent !\u003d null) {\n      if (!createParent \u0026\u0026 !exists(parent)) {\n        throw new FileNotFoundException(\"Parent directory doesn\u0027t exist: \"\n            + parent);\n      } else if (!mkdirs(parent)) {\n        throw new IOException(\"Mkdirs failed to create \" + parent\n            + \" (exists\u003d\" + exists(parent) + \", cwd\u003d\" + getWorkingDirectory()\n            + \")\");\n      }\n    }\n    final FSDataOutputStream out;\n    if (writeChecksum) {\n      out \u003d new FSDataOutputStream(\n          new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n              blockSize, progress, permission), null);\n    } else {\n      out \u003d fs.create(f, permission, overwrite, bufferSize, replication,\n          blockSize, progress);\n      // remove the checksum file since we aren\u0027t writing one\n      Path checkFile \u003d getChecksumFile(f);\n      if (fs.exists(checkFile)) {\n        fs.delete(checkFile, true);\n      }\n    }\n    return out;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ChecksumFileSystem.java",
      "extendedDetails": {}
    },
    "fa08b92f46365980ac9405c544c69b8d4fafa0ef": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10872. TestPathData fails intermittently with \u0027Mkdirs failed to create d1\u0027. (Contributed by Yongjun Zhang\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612895 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/14 10:49 AM",
      "commitName": "fa08b92f46365980ac9405c544c69b8d4fafa0ef",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "03/07/14 5:04 AM",
      "commitNameOld": "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 20.24,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   private FSDataOutputStream create(Path f, FsPermission permission,\n       boolean overwrite, boolean createParent, int bufferSize,\n       short replication, long blockSize,\n       Progressable progress) throws IOException {\n     Path parent \u003d f.getParent();\n     if (parent !\u003d null) {\n       if (!createParent \u0026\u0026 !exists(parent)) {\n         throw new FileNotFoundException(\"Parent directory doesn\u0027t exist: \"\n             + parent);\n       } else if (!mkdirs(parent)) {\n-        throw new IOException(\"Mkdirs failed to create \" + parent);\n+        throw new IOException(\"Mkdirs failed to create \" + parent\n+            + \" (exists\u003d\" + exists(parent) + \", cwd\u003d\" + getWorkingDirectory()\n+            + \")\");\n       }\n     }\n     final FSDataOutputStream out;\n     if (writeChecksum) {\n       out \u003d new FSDataOutputStream(\n           new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n               blockSize, progress), null);\n     } else {\n       out \u003d fs.create(f, permission, overwrite, bufferSize, replication,\n           blockSize, progress);\n       // remove the checksum file since we aren\u0027t writing one\n       Path checkFile \u003d getChecksumFile(f);\n       if (fs.exists(checkFile)) {\n         fs.delete(checkFile, true);\n       }\n     }\n     if (permission !\u003d null) {\n       setPermission(f, permission);\n     }\n     return out;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataOutputStream create(Path f, FsPermission permission,\n      boolean overwrite, boolean createParent, int bufferSize,\n      short replication, long blockSize,\n      Progressable progress) throws IOException {\n    Path parent \u003d f.getParent();\n    if (parent !\u003d null) {\n      if (!createParent \u0026\u0026 !exists(parent)) {\n        throw new FileNotFoundException(\"Parent directory doesn\u0027t exist: \"\n            + parent);\n      } else if (!mkdirs(parent)) {\n        throw new IOException(\"Mkdirs failed to create \" + parent\n            + \" (exists\u003d\" + exists(parent) + \", cwd\u003d\" + getWorkingDirectory()\n            + \")\");\n      }\n    }\n    final FSDataOutputStream out;\n    if (writeChecksum) {\n      out \u003d new FSDataOutputStream(\n          new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n              blockSize, progress), null);\n    } else {\n      out \u003d fs.create(f, permission, overwrite, bufferSize, replication,\n          blockSize, progress);\n      // remove the checksum file since we aren\u0027t writing one\n      Path checkFile \u003d getChecksumFile(f);\n      if (fs.exists(checkFile)) {\n        fs.delete(checkFile, true);\n      }\n    }\n    if (permission !\u003d null) {\n      setPermission(f, permission);\n    }\n    return out;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ChecksumFileSystem.java",
      "extendedDetails": {}
    },
    "7f7b05226e3ae1fdf3c440f8d26814f4d955f734": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8042.  When copying a file out of HDFS, modifying it, and uploading it back into HDFS, the put fails due to a CRC mismatch (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1242389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/12 8:41 AM",
      "commitName": "7f7b05226e3ae1fdf3c440f8d26814f4d955f734",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "02/02/12 9:12 AM",
      "commitNameOld": "58ba16e85f56bc1899d862c9f56d7809d0ab67f5",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 6.98,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,32 @@\n   private FSDataOutputStream create(Path f, FsPermission permission,\n       boolean overwrite, boolean createParent, int bufferSize,\n       short replication, long blockSize,\n       Progressable progress) throws IOException {\n     Path parent \u003d f.getParent();\n     if (parent !\u003d null) {\n       if (!createParent \u0026\u0026 !exists(parent)) {\n         throw new FileNotFoundException(\"Parent directory doesn\u0027t exist: \"\n             + parent);\n       } else if (!mkdirs(parent)) {\n         throw new IOException(\"Mkdirs failed to create \" + parent);\n       }\n     }\n-    final FSDataOutputStream out \u003d new FSDataOutputStream(\n-        new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n-            blockSize, progress), null);\n+    final FSDataOutputStream out;\n+    if (writeChecksum) {\n+      out \u003d new FSDataOutputStream(\n+          new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n+              blockSize, progress), null);\n+    } else {\n+      out \u003d fs.create(f, permission, overwrite, bufferSize, replication,\n+          blockSize, progress);\n+      // remove the checksum file since we aren\u0027t writing one\n+      Path checkFile \u003d getChecksumFile(f);\n+      if (fs.exists(checkFile)) {\n+        fs.delete(checkFile, true);\n+      }\n+    }\n     if (permission !\u003d null) {\n       setPermission(f, permission);\n     }\n     return out;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataOutputStream create(Path f, FsPermission permission,\n      boolean overwrite, boolean createParent, int bufferSize,\n      short replication, long blockSize,\n      Progressable progress) throws IOException {\n    Path parent \u003d f.getParent();\n    if (parent !\u003d null) {\n      if (!createParent \u0026\u0026 !exists(parent)) {\n        throw new FileNotFoundException(\"Parent directory doesn\u0027t exist: \"\n            + parent);\n      } else if (!mkdirs(parent)) {\n        throw new IOException(\"Mkdirs failed to create \" + parent);\n      }\n    }\n    final FSDataOutputStream out;\n    if (writeChecksum) {\n      out \u003d new FSDataOutputStream(\n          new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n              blockSize, progress), null);\n    } else {\n      out \u003d fs.create(f, permission, overwrite, bufferSize, replication,\n          blockSize, progress);\n      // remove the checksum file since we aren\u0027t writing one\n      Path checkFile \u003d getChecksumFile(f);\n      if (fs.exists(checkFile)) {\n        fs.delete(checkFile, true);\n      }\n    }\n    if (permission !\u003d null) {\n      setPermission(f, permission);\n    }\n    return out;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ChecksumFileSystem.java",
      "extendedDetails": {}
    },
    "2deaca4415863fb20cee539878fd9acc3fc2fa82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6886. LocalFileSystem Needs createNonRecursive API. Contributed by Nicolas Spiegelberg and Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212073 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:57 AM",
      "commitName": "2deaca4415863fb20cee539878fd9acc3fc2fa82",
      "commitAuthor": "Eli Collins",
      "diff": "@@ -0,0 +1,21 @@\n+  private FSDataOutputStream create(Path f, FsPermission permission,\n+      boolean overwrite, boolean createParent, int bufferSize,\n+      short replication, long blockSize,\n+      Progressable progress) throws IOException {\n+    Path parent \u003d f.getParent();\n+    if (parent !\u003d null) {\n+      if (!createParent \u0026\u0026 !exists(parent)) {\n+        throw new FileNotFoundException(\"Parent directory doesn\u0027t exist: \"\n+            + parent);\n+      } else if (!mkdirs(parent)) {\n+        throw new IOException(\"Mkdirs failed to create \" + parent);\n+      }\n+    }\n+    final FSDataOutputStream out \u003d new FSDataOutputStream(\n+        new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n+            blockSize, progress), null);\n+    if (permission !\u003d null) {\n+      setPermission(f, permission);\n+    }\n+    return out;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataOutputStream create(Path f, FsPermission permission,\n      boolean overwrite, boolean createParent, int bufferSize,\n      short replication, long blockSize,\n      Progressable progress) throws IOException {\n    Path parent \u003d f.getParent();\n    if (parent !\u003d null) {\n      if (!createParent \u0026\u0026 !exists(parent)) {\n        throw new FileNotFoundException(\"Parent directory doesn\u0027t exist: \"\n            + parent);\n      } else if (!mkdirs(parent)) {\n        throw new IOException(\"Mkdirs failed to create \" + parent);\n      }\n    }\n    final FSDataOutputStream out \u003d new FSDataOutputStream(\n        new ChecksumFSOutputSummer(this, f, overwrite, bufferSize, replication,\n            blockSize, progress), null);\n    if (permission !\u003d null) {\n      setPermission(f, permission);\n    }\n    return out;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ChecksumFileSystem.java"
    }
  }
}