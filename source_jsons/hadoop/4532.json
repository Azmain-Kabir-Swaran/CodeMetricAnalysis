{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PBHelper.java",
  "functionName": "convert",
  "functionId": "convert___datanodeCommand-DatanodeCommand",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
  "functionStartLine": 560,
  "functionEndLine": 611,
  "numCommitsSeen": 195,
  "timeTaken": 8466,
  "changeHistory": [
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
    "e34331c31d68cb22891db48011db5b36ad178af1",
    "e2a15d18bbbb86c20003c4e34d85244996a4cc3b",
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
    "014d8675c59d44ad68dec36db6afe3f3666a3f15",
    "15d08c4778350a86d7bae0174aeb48f8d8f61cce",
    "40eb94ade3161d93e7a762a839004748f6d0ae89",
    "380870d54453c1113d46d0f070f4e19b6cea7b8c",
    "8134b1c8702d7d6b3994c73b34afc7f8ee33ac6e",
    "3cffe34177c72ea67194c3b0aaf0ddbf67ff3a0c",
    "48da033901d3471ef176a94104158546152353e9",
    "38a19bc293dec6221ae96e304fc6ab660d94e706"
  ],
  "changeHistoryShort": {
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": "Ybodychange",
    "e34331c31d68cb22891db48011db5b36ad178af1": "Ybodychange",
    "e2a15d18bbbb86c20003c4e34d85244996a4cc3b": "Ybodychange",
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17": "Ybodychange",
    "014d8675c59d44ad68dec36db6afe3f3666a3f15": "Ybodychange",
    "15d08c4778350a86d7bae0174aeb48f8d8f61cce": "Ybodychange",
    "40eb94ade3161d93e7a762a839004748f6d0ae89": "Ybodychange",
    "380870d54453c1113d46d0f070f4e19b6cea7b8c": "Ybodychange",
    "8134b1c8702d7d6b3994c73b34afc7f8ee33ac6e": "Ybodychange",
    "3cffe34177c72ea67194c3b0aaf0ddbf67ff3a0c": "Ybodychange",
    "48da033901d3471ef176a94104158546152353e9": "Ybodychange",
    "38a19bc293dec6221ae96e304fc6ab660d94e706": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13076: [SPS]: Cleanup work for HDFS-10285 merge. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,52 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     if (datanodeCommand \u003d\u003d null) {\n       return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n           .build();\n     }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n     case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n         setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_CACHE:\n     case DatanodeProtocol.DNA_UNCACHE:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n         setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ERASURE_CODING_RECONSTRUCTION:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockECReconstructionCommand)\n           .setBlkECReconstructionCmd(\n               convert((BlockECReconstructionCommand) datanodeCommand));\n       break;\n-    case DatanodeProtocol.DNA_BLOCK_STORAGE_MOVEMENT:\n-      builder.setCmdType(DatanodeCommandProto.Type.BlockStorageMovementCommand)\n-          .setBlkStorageMovementCmd(\n-              convert((BlockStorageMovementCommand) datanodeCommand));\n-      break;\n-    case DatanodeProtocol.DNA_DROP_SPS_WORK_COMMAND:\n-      builder.setCmdType(DatanodeCommandProto.Type.DropSPSWorkCommand)\n-          .setDropSPSWorkCmd(DROP_SPS_WORK_CMD_PROTO);\n-      break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     default:\n       builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n        setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_CACHE:\n    case DatanodeProtocol.DNA_UNCACHE:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n        setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ERASURE_CODING_RECONSTRUCTION:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockECReconstructionCommand)\n          .setBlkECReconstructionCmd(\n              convert((BlockECReconstructionCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "e34331c31d68cb22891db48011db5b36ad178af1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11243. [SPS]: Add a protocol command from NN to DN for dropping the SPS work and queues. Contributed by Uma Maheswara Rao G\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "e34331c31d68cb22891db48011db5b36ad178af1",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:05 AM",
      "commitNameOld": "0f2d1ddc2c41c8db800c58cabb150e71804fe23a",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,61 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     if (datanodeCommand \u003d\u003d null) {\n       return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n           .build();\n     }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n     case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n         setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_CACHE:\n     case DatanodeProtocol.DNA_UNCACHE:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n         setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ERASURE_CODING_RECONSTRUCTION:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockECReconstructionCommand)\n           .setBlkECReconstructionCmd(\n               convert((BlockECReconstructionCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_BLOCK_STORAGE_MOVEMENT:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockStorageMovementCommand)\n           .setBlkStorageMovementCmd(\n               convert((BlockStorageMovementCommand) datanodeCommand));\n       break;\n+    case DatanodeProtocol.DNA_DROP_SPS_WORK_COMMAND:\n+      builder.setCmdType(DatanodeCommandProto.Type.DropSPSWorkCommand)\n+          .setDropSPSWorkCmd(DROP_SPS_WORK_CMD_PROTO);\n+      break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     default:\n       builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n        setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_CACHE:\n    case DatanodeProtocol.DNA_UNCACHE:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n        setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ERASURE_CODING_RECONSTRUCTION:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockECReconstructionCommand)\n          .setBlkECReconstructionCmd(\n              convert((BlockECReconstructionCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_BLOCK_STORAGE_MOVEMENT:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockStorageMovementCommand)\n          .setBlkStorageMovementCmd(\n              convert((BlockStorageMovementCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_DROP_SPS_WORK_COMMAND:\n      builder.setCmdType(DatanodeCommandProto.Type.DropSPSWorkCommand)\n          .setDropSPSWorkCmd(DROP_SPS_WORK_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "e2a15d18bbbb86c20003c4e34d85244996a4cc3b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10801. [SPS]: Protocol buffer changes for sending storage movement commands from NN to DN. Contributed by Rakesh R\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "e2a15d18bbbb86c20003c4e34d85244996a4cc3b",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "9c35be86e17021202823bfd3c2067ff3b312ce5c",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 239.34,
      "commitsBetweenForRepo": 2178,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,57 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     if (datanodeCommand \u003d\u003d null) {\n       return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n           .build();\n     }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n     case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n         setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_CACHE:\n     case DatanodeProtocol.DNA_UNCACHE:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n         setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ERASURE_CODING_RECONSTRUCTION:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockECReconstructionCommand)\n           .setBlkECReconstructionCmd(\n               convert((BlockECReconstructionCommand) datanodeCommand));\n       break;\n+    case DatanodeProtocol.DNA_BLOCK_STORAGE_MOVEMENT:\n+      builder.setCmdType(DatanodeCommandProto.Type.BlockStorageMovementCommand)\n+          .setBlkStorageMovementCmd(\n+              convert((BlockStorageMovementCommand) datanodeCommand));\n+      break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     default:\n       builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n        setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_CACHE:\n    case DatanodeProtocol.DNA_UNCACHE:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n        setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ERASURE_CODING_RECONSTRUCTION:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockECReconstructionCommand)\n          .setBlkECReconstructionCmd(\n              convert((BlockECReconstructionCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_BLOCK_STORAGE_MOVEMENT:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockStorageMovementCommand)\n          .setBlkStorageMovementCmd(\n              convert((BlockStorageMovementCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9731. Erasure Coding: Rename BlockECRecoveryCommand to BlockECReconstructionCommand. Contributed by Rakesh R.\n\nChange-Id: I405365a8395770e494b92bfe9651f4f0366d8f28\n",
      "commitDate": "02/02/16 12:32 PM",
      "commitName": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
      "commitAuthor": "zhezhang",
      "commitDateOld": "02/02/16 11:23 AM",
      "commitNameOld": "dd9ebf6eedfd4ff8b3486eae2a446de6b0c7fa8a",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     if (datanodeCommand \u003d\u003d null) {\n       return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n           .build();\n     }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n     case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n         setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_CACHE:\n     case DatanodeProtocol.DNA_UNCACHE:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n         setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n       break;\n-    case DatanodeProtocol.DNA_ERASURE_CODING_RECOVERY:\n-      builder.setCmdType(DatanodeCommandProto.Type.BlockECRecoveryCommand)\n-          .setBlkECRecoveryCmd(\n-              convert((BlockECRecoveryCommand) datanodeCommand));\n+    case DatanodeProtocol.DNA_ERASURE_CODING_RECONSTRUCTION:\n+      builder.setCmdType(DatanodeCommandProto.Type.BlockECReconstructionCommand)\n+          .setBlkECReconstructionCmd(\n+              convert((BlockECReconstructionCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     default:\n       builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n        setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_CACHE:\n    case DatanodeProtocol.DNA_UNCACHE:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n        setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ERASURE_CODING_RECONSTRUCTION:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockECReconstructionCommand)\n          .setBlkECReconstructionCmd(\n              convert((BlockECReconstructionCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "014d8675c59d44ad68dec36db6afe3f3666a3f15": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8024. Erasure Coding: ECworker frame, basics, bootstraping and configuration. (Contributed by Uma Maheswara Rao G)\n",
      "commitDate": "26/05/15 11:59 AM",
      "commitName": "014d8675c59d44ad68dec36db6afe3f3666a3f15",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "26/05/15 11:59 AM",
      "commitNameOld": "a1c9425265d2c94bfc6afb39ab2c16b4ef9e874e",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,52 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     if (datanodeCommand \u003d\u003d null) {\n       return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n           .build();\n     }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n     case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n         setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_CACHE:\n     case DatanodeProtocol.DNA_UNCACHE:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n         setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n       break;\n+    case DatanodeProtocol.DNA_ERASURE_CODING_RECOVERY:\n+      builder.setCmdType(DatanodeCommandProto.Type.BlockECRecoveryCommand)\n+          .setBlkECRecoveryCmd(\n+              convert((BlockECRecoveryCommand) datanodeCommand));\n+      break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     default:\n       builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n        setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_CACHE:\n    case DatanodeProtocol.DNA_UNCACHE:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n        setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ERASURE_CODING_RECOVERY:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockECRecoveryCommand)\n          .setBlkECRecoveryCmd(\n              convert((BlockECRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "15d08c4778350a86d7bae0174aeb48f8d8f61cce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5349. DNA_CACHE and DNA_UNCACHE should be by blockId only (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532116 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/10/13 3:19 PM",
      "commitName": "15d08c4778350a86d7bae0174aeb48f8d8f61cce",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "09/10/13 2:30 PM",
      "commitNameOld": "3fc8792b5c75fca9fc4f6cf4b95fb2927c62e624",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 5.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     if (datanodeCommand \u003d\u003d null) {\n       return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n           .build();\n     }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n+    case DatanodeProtocol.DNA_SHUTDOWN:\n+      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n+        setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n+      break;\n     case DatanodeProtocol.DNA_CACHE:\n     case DatanodeProtocol.DNA_UNCACHE:\n-    case DatanodeProtocol.DNA_SHUTDOWN:\n-      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n-          PBHelper.convert((BlockCommand) datanodeCommand));\n+      builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n+        setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     default:\n       builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).\n        setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_CACHE:\n    case DatanodeProtocol.DNA_UNCACHE:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).\n        setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "40eb94ade3161d93e7a762a839004748f6d0ae89": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5053. NameNode should invoke DataNode APIs to coordinate caching. (Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1523145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/13 4:27 PM",
      "commitName": "40eb94ade3161d93e7a762a839004748f6d0ae89",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "06/09/13 11:52 AM",
      "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 7.19,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     if (datanodeCommand \u003d\u003d null) {\n       return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n           .build();\n     }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n+    case DatanodeProtocol.DNA_CACHE:\n+    case DatanodeProtocol.DNA_UNCACHE:\n     case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n           PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     default:\n       builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_CACHE:\n    case DatanodeProtocol.DNA_UNCACHE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n          PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "380870d54453c1113d46d0f070f4e19b6cea7b8c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3832. Remove protocol methods related to DistributedUpgrade. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1376139 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/12 9:59 AM",
      "commitName": "380870d54453c1113d46d0f070f4e19b6cea7b8c",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "21/08/12 2:18 PM",
      "commitNameOld": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,42 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     if (datanodeCommand \u003d\u003d null) {\n       return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n           .build();\n     }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n     case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n           PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n-    case DatanodeProtocol.DNA_UC_ACTION_REPORT_STATUS:\n-    case DatanodeProtocol.DNA_UC_ACTION_START_UPGRADE:\n-      builder.setCmdType(DatanodeCommandProto.Type.UpgradeCommand)\n-          .setUpgradeCmd(PBHelper.convert((UpgradeCommand) datanodeCommand));\n-      break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     default:\n       builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n          PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "8134b1c8702d7d6b3994c73b34afc7f8ee33ac6e": {
      "type": "Ybodychange",
      "commitMessage": "Merge trunk into HA branch.\n\nSeveral conflicts around introduction of protobuf translator for DatanodeProtocol - mostly trivial resolutions.\n\nNB: this does not successfully pass any tests since the HAStatus field needs\nto be integrated into the HeartbeatResponse Protobuf implementation.\nThat will be a separate commit for clearer history.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1214518 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/11 2:47 PM",
      "commitName": "8134b1c8702d7d6b3994c73b34afc7f8ee33ac6e",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "13/12/11 11:02 AM",
      "commitNameOld": "a0fe4f476ae907c9c070af48a250739a4fb33362",
      "commitAuthorOld": "",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,47 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n+    if (datanodeCommand \u003d\u003d null) {\n+      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n+          .build();\n+    }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n+    case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n           PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n-    case DatanodeProtocol.DNA_SHUTDOWN: //Not expected\n+    case DatanodeProtocol.DNA_UC_ACTION_REPORT_STATUS:\n+    case DatanodeProtocol.DNA_UC_ACTION_START_UPGRADE:\n+      builder.setCmdType(DatanodeCommandProto.Type.UpgradeCommand)\n+          .setUpgradeCmd(PBHelper.convert((UpgradeCommand) datanodeCommand));\n+      break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n+    default:\n+      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n          PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UC_ACTION_REPORT_STATUS:\n    case DatanodeProtocol.DNA_UC_ACTION_START_UPGRADE:\n      builder.setCmdType(DatanodeCommandProto.Type.UpgradeCommand)\n          .setUpgradeCmd(PBHelper.convert((UpgradeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "3cffe34177c72ea67194c3b0aaf0ddbf67ff3a0c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2661. Enable protobuf RPC for DatanodeProtocol.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1214033 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 6:15 PM",
      "commitName": "3cffe34177c72ea67194c3b0aaf0ddbf67ff3a0c",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "13/12/11 3:31 PM",
      "commitNameOld": "3954a2fb1cbc7a8a0d1ad5859e7f5c9415530f4c",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,47 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n+    if (datanodeCommand \u003d\u003d null) {\n+      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n+          .build();\n+    }\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n           .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n+    case DatanodeProtocol.DNA_SHUTDOWN:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n           PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n-    case DatanodeProtocol.DNA_SHUTDOWN: //Not expected\n+    case DatanodeProtocol.DNA_UC_ACTION_REPORT_STATUS:\n+    case DatanodeProtocol.DNA_UC_ACTION_START_UPGRADE:\n+      builder.setCmdType(DatanodeCommandProto.Type.UpgradeCommand)\n+          .setUpgradeCmd(PBHelper.convert((UpgradeCommand) datanodeCommand));\n+      break;\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n+    default:\n+      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    if (datanodeCommand \u003d\u003d null) {\n      return builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand)\n          .build();\n    }\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n    case DatanodeProtocol.DNA_SHUTDOWN:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n          PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UC_ACTION_REPORT_STATUS:\n    case DatanodeProtocol.DNA_UC_ACTION_START_UPGRADE:\n      builder.setCmdType(DatanodeCommandProto.Type.UpgradeCommand)\n          .setUpgradeCmd(PBHelper.convert((UpgradeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    default:\n      builder.setCmdType(DatanodeCommandProto.Type.NullDatanodeCommand);\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "48da033901d3471ef176a94104158546152353e9": {
      "type": "Ybodychange",
      "commitMessage": "    HDFS-2651 ClientNameNodeProtocol Translators for Protocol Buffers (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/12/11 9:36 PM",
      "commitName": "48da033901d3471ef176a94104158546152353e9",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "11/12/11 10:53 AM",
      "commitNameOld": "2740112bb64e1cc8132a1dc450d9e461c2e4729e",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n     DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n     switch (datanodeCommand.getAction()) {\n     case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n           .setBalancerCmd(\n               PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n       builder\n           .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n           .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_RECOVERBLOCK:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n           .setRecoveryCmd(\n               PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_FINALIZE:\n       builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n           .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_REGISTER:\n       builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n-          .setRegisterCmd(PBHelper.convert((RegisterCommand) datanodeCommand));\n+          .setRegisterCmd(REG_CMD_PROTO);\n       break;\n     case DatanodeProtocol.DNA_TRANSFER:\n     case DatanodeProtocol.DNA_INVALIDATE:\n       builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n           PBHelper.convert((BlockCommand) datanodeCommand));\n       break;\n     case DatanodeProtocol.DNA_SHUTDOWN: //Not expected\n     case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n     }\n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(REG_CMD_PROTO);\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n          PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_SHUTDOWN: //Not expected\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java",
      "extendedDetails": {}
    },
    "38a19bc293dec6221ae96e304fc6ab660d94e706": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2642. Protobuf translators for DatanodeProtocol.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212606 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/12/11 12:02 PM",
      "commitName": "38a19bc293dec6221ae96e304fc6ab660d94e706",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,36 @@\n+  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n+    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n+    switch (datanodeCommand.getAction()) {\n+    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n+      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n+          .setBalancerCmd(\n+              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n+      break;\n+    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n+      builder\n+          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n+          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n+      break;\n+    case DatanodeProtocol.DNA_RECOVERBLOCK:\n+      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n+          .setRecoveryCmd(\n+              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n+      break;\n+    case DatanodeProtocol.DNA_FINALIZE:\n+      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n+          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n+      break;\n+    case DatanodeProtocol.DNA_REGISTER:\n+      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n+          .setRegisterCmd(PBHelper.convert((RegisterCommand) datanodeCommand));\n+      break;\n+    case DatanodeProtocol.DNA_TRANSFER:\n+    case DatanodeProtocol.DNA_INVALIDATE:\n+      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n+          PBHelper.convert((BlockCommand) datanodeCommand));\n+      break;\n+    case DatanodeProtocol.DNA_SHUTDOWN: //Not expected\n+    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n+    }\n+    return builder.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static DatanodeCommandProto convert(DatanodeCommand datanodeCommand) {\n    DatanodeCommandProto.Builder builder \u003d DatanodeCommandProto.newBuilder();\n    switch (datanodeCommand.getAction()) {\n    case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BalancerBandwidthCommand)\n          .setBalancerCmd(\n              PBHelper.convert((BalancerBandwidthCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_ACCESSKEYUPDATE:\n      builder\n          .setCmdType(DatanodeCommandProto.Type.KeyUpdateCommand)\n          .setKeyUpdateCmd(PBHelper.convert((KeyUpdateCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_RECOVERBLOCK:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockRecoveryCommand)\n          .setRecoveryCmd(\n              PBHelper.convert((BlockRecoveryCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_FINALIZE:\n      builder.setCmdType(DatanodeCommandProto.Type.FinalizeCommand)\n          .setFinalizeCmd(PBHelper.convert((FinalizeCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_REGISTER:\n      builder.setCmdType(DatanodeCommandProto.Type.RegisterCommand)\n          .setRegisterCmd(PBHelper.convert((RegisterCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_TRANSFER:\n    case DatanodeProtocol.DNA_INVALIDATE:\n      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(\n          PBHelper.convert((BlockCommand) datanodeCommand));\n      break;\n    case DatanodeProtocol.DNA_SHUTDOWN: //Not expected\n    case DatanodeProtocol.DNA_UNKNOWN: //Not expected\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java"
    }
  }
}