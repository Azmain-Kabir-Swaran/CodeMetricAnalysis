{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCounters.java",
  "functionName": "readFields",
  "functionId": "readFields___in-DataInput",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java",
  "functionStartLine": 285,
  "functionEndLine": 318,
  "numCommitsSeen": 17,
  "timeTaken": 1993,
  "changeHistory": [
    "713349a9af4654dad4d4c372454552bfd063ca5f",
    "390a7c12f543b2c94a74f08d6d2a28410472043a",
    "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "24676e8c2ef48e67265d33c053badb31aecad616"
  ],
  "changeHistoryShort": {
    "713349a9af4654dad4d4c372454552bfd063ca5f": "Ybodychange",
    "390a7c12f543b2c94a74f08d6d2a28410472043a": "Ybodychange",
    "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "24676e8c2ef48e67265d33c053badb31aecad616": "Yintroduced"
  },
  "changeHistoryDetails": {
    "713349a9af4654dad4d4c372454552bfd063ca5f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"MAPREDUCE-6199. AbstractCounters are not reset completely on deserialization (adhoot via rkanter)\"\n\nThis reverts commit 390a7c12f543b2c94a74f08d6d2a28410472043a.\n",
      "commitDate": "28/07/17 2:21 PM",
      "commitName": "713349a9af4654dad4d4c372454552bfd063ca5f",
      "commitAuthor": "Junping Du",
      "commitDateOld": "03/04/15 10:28 AM",
      "commitNameOld": "a0795c1e81685b812288cf2f4df6f8d23da30ab8",
      "commitAuthorOld": "Gera Shegalov",
      "daysBetweenCommits": 847.16,
      "commitsBetweenForRepo": 5809,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,34 @@\n   public synchronized void readFields(DataInput in) throws IOException {\n     int version \u003d WritableUtils.readVInt(in);\n     if (version !\u003d groupFactory.version()) {\n       throw new IOException(\"Counters version mismatch, expected \"+\n           groupFactory.version() +\" got \"+ version);\n     }\n     int numFGroups \u003d WritableUtils.readVInt(in);\n     fgroups.clear();\n     GroupType[] groupTypes \u003d GroupType.values();\n     while (numFGroups-- \u003e 0) {\n       GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n       G group;\n       switch (groupType) {\n         case FILESYSTEM: // with nothing\n           group \u003d groupFactory.newFileSystemGroup();\n           break;\n         case FRAMEWORK:  // with group id\n           group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n           break;\n         default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n           throw new IOException(\"Unexpected counter group type: \"+ groupType);\n       }\n       group.readFields(in);\n       fgroups.put(group.getName(), group);\n     }\n     int numGroups \u003d WritableUtils.readVInt(in);\n-    if (!groups.isEmpty()) {\n-      groups.clear();\n-      limits.reset();\n-    }\n     while (numGroups-- \u003e 0) {\n       limits.checkGroups(groups.size() + 1);\n       G group \u003d groupFactory.newGenericGroup(\n           StringInterner.weakIntern(Text.readString(in)), null, limits);\n       group.readFields(in);\n       groups.put(group.getName(), group);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void readFields(DataInput in) throws IOException {\n    int version \u003d WritableUtils.readVInt(in);\n    if (version !\u003d groupFactory.version()) {\n      throw new IOException(\"Counters version mismatch, expected \"+\n          groupFactory.version() +\" got \"+ version);\n    }\n    int numFGroups \u003d WritableUtils.readVInt(in);\n    fgroups.clear();\n    GroupType[] groupTypes \u003d GroupType.values();\n    while (numFGroups-- \u003e 0) {\n      GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n      G group;\n      switch (groupType) {\n        case FILESYSTEM: // with nothing\n          group \u003d groupFactory.newFileSystemGroup();\n          break;\n        case FRAMEWORK:  // with group id\n          group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n          break;\n        default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n          throw new IOException(\"Unexpected counter group type: \"+ groupType);\n      }\n      group.readFields(in);\n      fgroups.put(group.getName(), group);\n    }\n    int numGroups \u003d WritableUtils.readVInt(in);\n    while (numGroups-- \u003e 0) {\n      limits.checkGroups(groups.size() + 1);\n      G group \u003d groupFactory.newGenericGroup(\n          StringInterner.weakIntern(Text.readString(in)), null, limits);\n      group.readFields(in);\n      groups.put(group.getName(), group);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java",
      "extendedDetails": {}
    },
    "390a7c12f543b2c94a74f08d6d2a28410472043a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6199. AbstractCounters are not reset completely on deserialization (adhoot via rkanter)\n",
      "commitDate": "19/12/14 3:43 PM",
      "commitName": "390a7c12f543b2c94a74f08d6d2a28410472043a",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "31/10/12 7:57 AM",
      "commitNameOld": "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 779.37,
      "commitsBetweenForRepo": 5359,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n   public synchronized void readFields(DataInput in) throws IOException {\n     int version \u003d WritableUtils.readVInt(in);\n     if (version !\u003d groupFactory.version()) {\n       throw new IOException(\"Counters version mismatch, expected \"+\n           groupFactory.version() +\" got \"+ version);\n     }\n     int numFGroups \u003d WritableUtils.readVInt(in);\n     fgroups.clear();\n     GroupType[] groupTypes \u003d GroupType.values();\n     while (numFGroups-- \u003e 0) {\n       GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n       G group;\n       switch (groupType) {\n         case FILESYSTEM: // with nothing\n           group \u003d groupFactory.newFileSystemGroup();\n           break;\n         case FRAMEWORK:  // with group id\n           group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n           break;\n         default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n           throw new IOException(\"Unexpected counter group type: \"+ groupType);\n       }\n       group.readFields(in);\n       fgroups.put(group.getName(), group);\n     }\n     int numGroups \u003d WritableUtils.readVInt(in);\n+    if (!groups.isEmpty()) {\n+      groups.clear();\n+      limits.reset();\n+    }\n     while (numGroups-- \u003e 0) {\n       limits.checkGroups(groups.size() + 1);\n       G group \u003d groupFactory.newGenericGroup(\n           StringInterner.weakIntern(Text.readString(in)), null, limits);\n       group.readFields(in);\n       groups.put(group.getName(), group);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void readFields(DataInput in) throws IOException {\n    int version \u003d WritableUtils.readVInt(in);\n    if (version !\u003d groupFactory.version()) {\n      throw new IOException(\"Counters version mismatch, expected \"+\n          groupFactory.version() +\" got \"+ version);\n    }\n    int numFGroups \u003d WritableUtils.readVInt(in);\n    fgroups.clear();\n    GroupType[] groupTypes \u003d GroupType.values();\n    while (numFGroups-- \u003e 0) {\n      GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n      G group;\n      switch (groupType) {\n        case FILESYSTEM: // with nothing\n          group \u003d groupFactory.newFileSystemGroup();\n          break;\n        case FRAMEWORK:  // with group id\n          group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n          break;\n        default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n          throw new IOException(\"Unexpected counter group type: \"+ groupType);\n      }\n      group.readFields(in);\n      fgroups.put(group.getName(), group);\n    }\n    int numGroups \u003d WritableUtils.readVInt(in);\n    if (!groups.isEmpty()) {\n      groups.clear();\n      limits.reset();\n    }\n    while (numGroups-- \u003e 0) {\n      limits.checkGroups(groups.size() + 1);\n      G group \u003d groupFactory.newGenericGroup(\n          StringInterner.weakIntern(Text.readString(in)), null, limits);\n      group.readFields(in);\n      groups.put(group.getName(), group);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java",
      "extendedDetails": {}
    },
    "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4752. Reduce MR AM memory usage through String Interning (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1404177 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/12 7:57 AM",
      "commitName": "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "16/08/12 6:26 AM",
      "commitNameOld": "3204b1f450a9f51f7ef3b75030bc18937b61913b",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 76.06,
      "commitsBetweenForRepo": 466,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public synchronized void readFields(DataInput in) throws IOException {\n     int version \u003d WritableUtils.readVInt(in);\n     if (version !\u003d groupFactory.version()) {\n       throw new IOException(\"Counters version mismatch, expected \"+\n           groupFactory.version() +\" got \"+ version);\n     }\n     int numFGroups \u003d WritableUtils.readVInt(in);\n     fgroups.clear();\n     GroupType[] groupTypes \u003d GroupType.values();\n     while (numFGroups-- \u003e 0) {\n       GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n       G group;\n       switch (groupType) {\n         case FILESYSTEM: // with nothing\n           group \u003d groupFactory.newFileSystemGroup();\n           break;\n         case FRAMEWORK:  // with group id\n           group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n           break;\n         default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n           throw new IOException(\"Unexpected counter group type: \"+ groupType);\n       }\n       group.readFields(in);\n       fgroups.put(group.getName(), group);\n     }\n     int numGroups \u003d WritableUtils.readVInt(in);\n     while (numGroups-- \u003e 0) {\n       limits.checkGroups(groups.size() + 1);\n-      G group \u003d groupFactory.newGenericGroup(Text.readString(in), null, limits);\n+      G group \u003d groupFactory.newGenericGroup(\n+          StringInterner.weakIntern(Text.readString(in)), null, limits);\n       group.readFields(in);\n       groups.put(group.getName(), group);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void readFields(DataInput in) throws IOException {\n    int version \u003d WritableUtils.readVInt(in);\n    if (version !\u003d groupFactory.version()) {\n      throw new IOException(\"Counters version mismatch, expected \"+\n          groupFactory.version() +\" got \"+ version);\n    }\n    int numFGroups \u003d WritableUtils.readVInt(in);\n    fgroups.clear();\n    GroupType[] groupTypes \u003d GroupType.values();\n    while (numFGroups-- \u003e 0) {\n      GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n      G group;\n      switch (groupType) {\n        case FILESYSTEM: // with nothing\n          group \u003d groupFactory.newFileSystemGroup();\n          break;\n        case FRAMEWORK:  // with group id\n          group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n          break;\n        default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n          throw new IOException(\"Unexpected counter group type: \"+ groupType);\n      }\n      group.readFields(in);\n      fgroups.put(group.getName(), group);\n    }\n    int numGroups \u003d WritableUtils.readVInt(in);\n    while (numGroups-- \u003e 0) {\n      limits.checkGroups(groups.size() + 1);\n      G group \u003d groupFactory.newGenericGroup(\n          StringInterner.weakIntern(Text.readString(in)), null, limits);\n      group.readFields(in);\n      groups.put(group.getName(), group);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void readFields(DataInput in) throws IOException {\n    int version \u003d WritableUtils.readVInt(in);\n    if (version !\u003d groupFactory.version()) {\n      throw new IOException(\"Counters version mismatch, expected \"+\n          groupFactory.version() +\" got \"+ version);\n    }\n    int numFGroups \u003d WritableUtils.readVInt(in);\n    fgroups.clear();\n    GroupType[] groupTypes \u003d GroupType.values();\n    while (numFGroups-- \u003e 0) {\n      GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n      G group;\n      switch (groupType) {\n        case FILESYSTEM: // with nothing\n          group \u003d groupFactory.newFileSystemGroup();\n          break;\n        case FRAMEWORK:  // with group id\n          group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n          break;\n        default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n          throw new IOException(\"Unexpected counter group type: \"+ groupType);\n      }\n      group.readFields(in);\n      fgroups.put(group.getName(), group);\n    }\n    int numGroups \u003d WritableUtils.readVInt(in);\n    while (numGroups-- \u003e 0) {\n      limits.checkGroups(groups.size() + 1);\n      G group \u003d groupFactory.newGenericGroup(Text.readString(in), null, limits);\n      group.readFields(in);\n      groups.put(group.getName(), group);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void readFields(DataInput in) throws IOException {\n    int version \u003d WritableUtils.readVInt(in);\n    if (version !\u003d groupFactory.version()) {\n      throw new IOException(\"Counters version mismatch, expected \"+\n          groupFactory.version() +\" got \"+ version);\n    }\n    int numFGroups \u003d WritableUtils.readVInt(in);\n    fgroups.clear();\n    GroupType[] groupTypes \u003d GroupType.values();\n    while (numFGroups-- \u003e 0) {\n      GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n      G group;\n      switch (groupType) {\n        case FILESYSTEM: // with nothing\n          group \u003d groupFactory.newFileSystemGroup();\n          break;\n        case FRAMEWORK:  // with group id\n          group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n          break;\n        default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n          throw new IOException(\"Unexpected counter group type: \"+ groupType);\n      }\n      group.readFields(in);\n      fgroups.put(group.getName(), group);\n    }\n    int numGroups \u003d WritableUtils.readVInt(in);\n    while (numGroups-- \u003e 0) {\n      limits.checkGroups(groups.size() + 1);\n      G group \u003d groupFactory.newGenericGroup(Text.readString(in), null, limits);\n      group.readFields(in);\n      groups.put(group.getName(), group);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java"
      }
    },
    "24676e8c2ef48e67265d33c053badb31aecad616": {
      "type": "Yintroduced",
      "commitMessage": " MAPREDUCE-901. Efficient framework counters. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1157290 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/11 4:25 PM",
      "commitName": "24676e8c2ef48e67265d33c053badb31aecad616",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,33 @@\n+  public synchronized void readFields(DataInput in) throws IOException {\n+    int version \u003d WritableUtils.readVInt(in);\n+    if (version !\u003d groupFactory.version()) {\n+      throw new IOException(\"Counters version mismatch, expected \"+\n+          groupFactory.version() +\" got \"+ version);\n+    }\n+    int numFGroups \u003d WritableUtils.readVInt(in);\n+    fgroups.clear();\n+    GroupType[] groupTypes \u003d GroupType.values();\n+    while (numFGroups-- \u003e 0) {\n+      GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n+      G group;\n+      switch (groupType) {\n+        case FILESYSTEM: // with nothing\n+          group \u003d groupFactory.newFileSystemGroup();\n+          break;\n+        case FRAMEWORK:  // with group id\n+          group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n+          break;\n+        default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n+          throw new IOException(\"Unexpected counter group type: \"+ groupType);\n+      }\n+      group.readFields(in);\n+      fgroups.put(group.getName(), group);\n+    }\n+    int numGroups \u003d WritableUtils.readVInt(in);\n+    while (numGroups-- \u003e 0) {\n+      limits.checkGroups(groups.size() + 1);\n+      G group \u003d groupFactory.newGenericGroup(Text.readString(in), null, limits);\n+      group.readFields(in);\n+      groups.put(group.getName(), group);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void readFields(DataInput in) throws IOException {\n    int version \u003d WritableUtils.readVInt(in);\n    if (version !\u003d groupFactory.version()) {\n      throw new IOException(\"Counters version mismatch, expected \"+\n          groupFactory.version() +\" got \"+ version);\n    }\n    int numFGroups \u003d WritableUtils.readVInt(in);\n    fgroups.clear();\n    GroupType[] groupTypes \u003d GroupType.values();\n    while (numFGroups-- \u003e 0) {\n      GroupType groupType \u003d groupTypes[WritableUtils.readVInt(in)];\n      G group;\n      switch (groupType) {\n        case FILESYSTEM: // with nothing\n          group \u003d groupFactory.newFileSystemGroup();\n          break;\n        case FRAMEWORK:  // with group id\n          group \u003d groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));\n          break;\n        default: // Silence dumb compiler, as it would\u0027ve thrown earlier\n          throw new IOException(\"Unexpected counter group type: \"+ groupType);\n      }\n      group.readFields(in);\n      fgroups.put(group.getName(), group);\n    }\n    int numGroups \u003d WritableUtils.readVInt(in);\n    while (numGroups-- \u003e 0) {\n      limits.checkGroups(groups.size() + 1);\n      G group \u003d groupFactory.newGenericGroup(Text.readString(in), null, limits);\n      group.readFields(in);\n      groups.put(group.getName(), group);\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/counters/AbstractCounters.java"
    }
  }
}