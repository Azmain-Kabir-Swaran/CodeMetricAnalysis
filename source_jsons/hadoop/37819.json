{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMServerUtils.java",
  "functionName": "validateISO8601AndConvertToLocalTimeEpoch",
  "functionId": "validateISO8601AndConvertToLocalTimeEpoch___timeoutsInISO8601-Map__ApplicationTimeoutType,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
  "functionStartLine": 540,
  "functionEndLine": 571,
  "numCommitsSeen": 48,
  "timeTaken": 2442,
  "changeHistory": [
    "74d0066d3392169bec872f438a0818e2f5323010",
    "1f12867a69544a1642aa986d4f9a8249be495434",
    "bcc15c6290b3912a054323695a6a931b0de163bd"
  ],
  "changeHistoryShort": {
    "74d0066d3392169bec872f438a0818e2f5323010": "Ybodychange",
    "1f12867a69544a1642aa986d4f9a8249be495434": "Ybodychange",
    "bcc15c6290b3912a054323695a6a931b0de163bd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "74d0066d3392169bec872f438a0818e2f5323010": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5970. Validate application update timeout request parameters. Contributed by Rohith Sharma K S.\n",
      "commitDate": "08/12/16 2:23 AM",
      "commitName": "74d0066d3392169bec872f438a0818e2f5323010",
      "commitAuthor": "Sunil G",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 8.7,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   public static Map\u003cApplicationTimeoutType, Long\u003e validateISO8601AndConvertToLocalTimeEpoch(\n       Map\u003cApplicationTimeoutType, String\u003e timeoutsInISO8601)\n       throws YarnException {\n     long currentTimeMillis \u003d clock.getTime();\n     Map\u003cApplicationTimeoutType, Long\u003e newApplicationTimeout \u003d\n         new HashMap\u003cApplicationTimeoutType, Long\u003e();\n     if (timeoutsInISO8601 !\u003d null) {\n       for (Map.Entry\u003cApplicationTimeoutType, String\u003e timeout : timeoutsInISO8601\n           .entrySet()) {\n         long expireTime \u003d 0L;\n         try {\n           expireTime \u003d\n               Times.parseISO8601ToLocalTimeInMillis(timeout.getValue());\n         } catch (ParseException ex) {\n           String message \u003d\n               \"Expire time is not in ISO8601 format. ISO8601 supported \"\n-                  + \"format is yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ\";\n+                  + \"format is yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ. Configured \"\n+                  + \"timeout value is \" + timeout.getValue();\n           throw new YarnException(message, ex);\n         }\n         if (expireTime \u003c currentTimeMillis) {\n           String message \u003d\n               \"Expire time is less than current time, current-time\u003d\"\n                   + Times.formatISO8601(currentTimeMillis) + \" expire-time\u003d\"\n                   + Times.formatISO8601(expireTime);\n           throw new YarnException(message);\n         }\n         newApplicationTimeout.put(timeout.getKey(), expireTime);\n       }\n     }\n     return newApplicationTimeout;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cApplicationTimeoutType, Long\u003e validateISO8601AndConvertToLocalTimeEpoch(\n      Map\u003cApplicationTimeoutType, String\u003e timeoutsInISO8601)\n      throws YarnException {\n    long currentTimeMillis \u003d clock.getTime();\n    Map\u003cApplicationTimeoutType, Long\u003e newApplicationTimeout \u003d\n        new HashMap\u003cApplicationTimeoutType, Long\u003e();\n    if (timeoutsInISO8601 !\u003d null) {\n      for (Map.Entry\u003cApplicationTimeoutType, String\u003e timeout : timeoutsInISO8601\n          .entrySet()) {\n        long expireTime \u003d 0L;\n        try {\n          expireTime \u003d\n              Times.parseISO8601ToLocalTimeInMillis(timeout.getValue());\n        } catch (ParseException ex) {\n          String message \u003d\n              \"Expire time is not in ISO8601 format. ISO8601 supported \"\n                  + \"format is yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ. Configured \"\n                  + \"timeout value is \" + timeout.getValue();\n          throw new YarnException(message, ex);\n        }\n        if (expireTime \u003c currentTimeMillis) {\n          String message \u003d\n              \"Expire time is less than current time, current-time\u003d\"\n                  + Times.formatISO8601(currentTimeMillis) + \" expire-time\u003d\"\n                  + Times.formatISO8601(expireTime);\n          throw new YarnException(message);\n        }\n        newApplicationTimeout.put(timeout.getKey(), expireTime);\n      }\n    }\n    return newApplicationTimeout;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "1f12867a69544a1642aa986d4f9a8249be495434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5649. Add REST endpoints for updating application timeouts. Contributed by Rohith Sharma K S\n",
      "commitDate": "23/11/16 4:25 PM",
      "commitName": "1f12867a69544a1642aa986d4f9a8249be495434",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/11/16 2:35 PM",
      "commitNameOld": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 13.08,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public static Map\u003cApplicationTimeoutType, Long\u003e validateISO8601AndConvertToLocalTimeEpoch(\n       Map\u003cApplicationTimeoutType, String\u003e timeoutsInISO8601)\n       throws YarnException {\n     long currentTimeMillis \u003d clock.getTime();\n     Map\u003cApplicationTimeoutType, Long\u003e newApplicationTimeout \u003d\n         new HashMap\u003cApplicationTimeoutType, Long\u003e();\n     if (timeoutsInISO8601 !\u003d null) {\n       for (Map.Entry\u003cApplicationTimeoutType, String\u003e timeout : timeoutsInISO8601\n           .entrySet()) {\n         long expireTime \u003d 0L;\n         try {\n           expireTime \u003d\n               Times.parseISO8601ToLocalTimeInMillis(timeout.getValue());\n         } catch (ParseException ex) {\n           String message \u003d\n               \"Expire time is not in ISO8601 format. ISO8601 supported \"\n                   + \"format is yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ\";\n-          throw new YarnException(message);\n+          throw new YarnException(message, ex);\n         }\n         if (expireTime \u003c currentTimeMillis) {\n           String message \u003d\n               \"Expire time is less than current time, current-time\u003d\"\n                   + Times.formatISO8601(currentTimeMillis) + \" expire-time\u003d\"\n                   + Times.formatISO8601(expireTime);\n           throw new YarnException(message);\n         }\n         newApplicationTimeout.put(timeout.getKey(), expireTime);\n       }\n     }\n     return newApplicationTimeout;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cApplicationTimeoutType, Long\u003e validateISO8601AndConvertToLocalTimeEpoch(\n      Map\u003cApplicationTimeoutType, String\u003e timeoutsInISO8601)\n      throws YarnException {\n    long currentTimeMillis \u003d clock.getTime();\n    Map\u003cApplicationTimeoutType, Long\u003e newApplicationTimeout \u003d\n        new HashMap\u003cApplicationTimeoutType, Long\u003e();\n    if (timeoutsInISO8601 !\u003d null) {\n      for (Map.Entry\u003cApplicationTimeoutType, String\u003e timeout : timeoutsInISO8601\n          .entrySet()) {\n        long expireTime \u003d 0L;\n        try {\n          expireTime \u003d\n              Times.parseISO8601ToLocalTimeInMillis(timeout.getValue());\n        } catch (ParseException ex) {\n          String message \u003d\n              \"Expire time is not in ISO8601 format. ISO8601 supported \"\n                  + \"format is yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ\";\n          throw new YarnException(message, ex);\n        }\n        if (expireTime \u003c currentTimeMillis) {\n          String message \u003d\n              \"Expire time is less than current time, current-time\u003d\"\n                  + Times.formatISO8601(currentTimeMillis) + \" expire-time\u003d\"\n                  + Times.formatISO8601(expireTime);\n          throw new YarnException(message);\n        }\n        newApplicationTimeout.put(timeout.getKey(), expireTime);\n      }\n    }\n    return newApplicationTimeout;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "bcc15c6290b3912a054323695a6a931b0de163bd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5611. Provide an API to update lifetime of an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "09/11/16 4:08 PM",
      "commitName": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,31 @@\n+  public static Map\u003cApplicationTimeoutType, Long\u003e validateISO8601AndConvertToLocalTimeEpoch(\n+      Map\u003cApplicationTimeoutType, String\u003e timeoutsInISO8601)\n+      throws YarnException {\n+    long currentTimeMillis \u003d clock.getTime();\n+    Map\u003cApplicationTimeoutType, Long\u003e newApplicationTimeout \u003d\n+        new HashMap\u003cApplicationTimeoutType, Long\u003e();\n+    if (timeoutsInISO8601 !\u003d null) {\n+      for (Map.Entry\u003cApplicationTimeoutType, String\u003e timeout : timeoutsInISO8601\n+          .entrySet()) {\n+        long expireTime \u003d 0L;\n+        try {\n+          expireTime \u003d\n+              Times.parseISO8601ToLocalTimeInMillis(timeout.getValue());\n+        } catch (ParseException ex) {\n+          String message \u003d\n+              \"Expire time is not in ISO8601 format. ISO8601 supported \"\n+                  + \"format is yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ\";\n+          throw new YarnException(message);\n+        }\n+        if (expireTime \u003c currentTimeMillis) {\n+          String message \u003d\n+              \"Expire time is less than current time, current-time\u003d\"\n+                  + Times.formatISO8601(currentTimeMillis) + \" expire-time\u003d\"\n+                  + Times.formatISO8601(expireTime);\n+          throw new YarnException(message);\n+        }\n+        newApplicationTimeout.put(timeout.getKey(), expireTime);\n+      }\n+    }\n+    return newApplicationTimeout;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cApplicationTimeoutType, Long\u003e validateISO8601AndConvertToLocalTimeEpoch(\n      Map\u003cApplicationTimeoutType, String\u003e timeoutsInISO8601)\n      throws YarnException {\n    long currentTimeMillis \u003d clock.getTime();\n    Map\u003cApplicationTimeoutType, Long\u003e newApplicationTimeout \u003d\n        new HashMap\u003cApplicationTimeoutType, Long\u003e();\n    if (timeoutsInISO8601 !\u003d null) {\n      for (Map.Entry\u003cApplicationTimeoutType, String\u003e timeout : timeoutsInISO8601\n          .entrySet()) {\n        long expireTime \u003d 0L;\n        try {\n          expireTime \u003d\n              Times.parseISO8601ToLocalTimeInMillis(timeout.getValue());\n        } catch (ParseException ex) {\n          String message \u003d\n              \"Expire time is not in ISO8601 format. ISO8601 supported \"\n                  + \"format is yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSZ\";\n          throw new YarnException(message);\n        }\n        if (expireTime \u003c currentTimeMillis) {\n          String message \u003d\n              \"Expire time is less than current time, current-time\u003d\"\n                  + Times.formatISO8601(currentTimeMillis) + \" expire-time\u003d\"\n                  + Times.formatISO8601(expireTime);\n          throw new YarnException(message);\n        }\n        newApplicationTimeout.put(timeout.getKey(), expireTime);\n      }\n    }\n    return newApplicationTimeout;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java"
    }
  }
}