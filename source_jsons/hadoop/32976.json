{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationService.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
  "functionStartLine": 151,
  "functionEndLine": 164,
  "numCommitsSeen": 59,
  "timeTaken": 9362,
  "changeHistory": [
    "a2a8be18cb5e912c8de0ea6beec1de4a99de656b",
    "2b39ad26984d641bad57db2cfcc0b7515ef95f46",
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
    "6161d9ba5230f553db5f5490dce67e2afd1e29ca",
    "954dd57043d2de4f962876c1b89753bfc7e4ce55",
    "0928502029ef141759008997335ea2cd836a7154",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "a75c4cf4e4400a2dcb3edc88df7f35a763f93c4e",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "a2a8be18cb5e912c8de0ea6beec1de4a99de656b": "Ybodychange",
    "2b39ad26984d641bad57db2cfcc0b7515ef95f46": "Ybodychange",
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": "Ybodychange",
    "6161d9ba5230f553db5f5490dce67e2afd1e29ca": "Ybodychange",
    "954dd57043d2de4f962876c1b89753bfc7e4ce55": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Ybodychange",
    "a75c4cf4e4400a2dcb3edc88df7f35a763f93c4e": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a2a8be18cb5e912c8de0ea6beec1de4a99de656b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9629. Support configurable MIN_LOG_ROLLING_INTERVAL. Contributed by Adam Antal.\n",
      "commitDate": "03/07/19 4:45 AM",
      "commitName": "a2a8be18cb5e912c8de0ea6beec1de4a99de656b",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "31/07/18 12:08 PM",
      "commitNameOld": "4b540bbfcf02d828052999215c6135603d98f5db",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 336.69,
      "commitsBetweenForRepo": 2618,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,14 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n     this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n         new ThreadFactoryBuilder()\n             .setNameFormat(\"LogAggregationService #%d\")\n             .build());\n \n-    rollingMonitorInterval \u003d conf.getLong(\n-        YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n-        YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n-\n-    boolean logAggregationDebugMode \u003d\n-        conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n-\n-    if (rollingMonitorInterval \u003e 0\n-        \u0026\u0026 rollingMonitorInterval \u003c MIN_LOG_ROLLING_INTERVAL) {\n-      if (logAggregationDebugMode) {\n-        LOG.info(\"Log aggregation debug mode enabled. rollingMonitorInterval \u003d \"\n-            + rollingMonitorInterval);\n-      } else {\n-        LOG.warn(\"rollingMonitorInterval should be more than or equal to {} \" +\n-                \"seconds. Using {} seconds instead.\",\n-                MIN_LOG_ROLLING_INTERVAL, MIN_LOG_ROLLING_INTERVAL);\n-        this.rollingMonitorInterval \u003d MIN_LOG_ROLLING_INTERVAL;\n-      }\n-    } else if (rollingMonitorInterval \u003c\u003d 0) {\n-      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n-          + \". The log rolling monitoring interval is disabled. \"\n-          + \"The logs will be aggregated after this application is finished.\");\n-    } else {\n-      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n-          + \". The logs will be aggregated every \" + rollingMonitorInterval\n-          + \" seconds\");\n-    }\n+    rollingMonitorInterval \u003d calculateRollingMonitorInterval(conf);\n+    LOG.info(\"rollingMonitorInterval is set as {}. The logs will be \" +\n+        \"aggregated every {} seconds\", rollingMonitorInterval,\n+        rollingMonitorInterval);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n    this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n        new ThreadFactoryBuilder()\n            .setNameFormat(\"LogAggregationService #%d\")\n            .build());\n\n    rollingMonitorInterval \u003d calculateRollingMonitorInterval(conf);\n    LOG.info(\"rollingMonitorInterval is set as {}. The logs will be \" +\n        \"aggregated every {} seconds\", rollingMonitorInterval,\n        rollingMonitorInterval);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "2b39ad26984d641bad57db2cfcc0b7515ef95f46": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8584. Several typos in Log Aggregation related classes. Contributed by Szilard Nemeth.\n",
      "commitDate": "30/07/18 10:55 AM",
      "commitName": "2b39ad26984d641bad57db2cfcc0b7515ef95f46",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "25/08/17 1:37 PM",
      "commitNameOld": "e864f81471407a384395fefe1ceb3b66fc7f87f2",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 338.89,
      "commitsBetweenForRepo": 3077,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n     this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n         new ThreadFactoryBuilder()\n             .setNameFormat(\"LogAggregationService #%d\")\n             .build());\n \n     rollingMonitorInterval \u003d conf.getLong(\n         YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n         YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n \n     boolean logAggregationDebugMode \u003d\n         conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n \n     if (rollingMonitorInterval \u003e 0\n         \u0026\u0026 rollingMonitorInterval \u003c MIN_LOG_ROLLING_INTERVAL) {\n       if (logAggregationDebugMode) {\n         LOG.info(\"Log aggregation debug mode enabled. rollingMonitorInterval \u003d \"\n             + rollingMonitorInterval);\n       } else {\n-        LOG.warn(\"rollingMonitorIntervall should be more than or equal to \"\n-            + MIN_LOG_ROLLING_INTERVAL + \" seconds. Using \"\n-            + MIN_LOG_ROLLING_INTERVAL + \" seconds instead.\");\n+        LOG.warn(\"rollingMonitorInterval should be more than or equal to {} \" +\n+                \"seconds. Using {} seconds instead.\",\n+                MIN_LOG_ROLLING_INTERVAL, MIN_LOG_ROLLING_INTERVAL);\n         this.rollingMonitorInterval \u003d MIN_LOG_ROLLING_INTERVAL;\n       }\n     } else if (rollingMonitorInterval \u003c\u003d 0) {\n       LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n           + \". The log rolling monitoring interval is disabled. \"\n           + \"The logs will be aggregated after this application is finished.\");\n     } else {\n       LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n           + \". The logs will be aggregated every \" + rollingMonitorInterval\n           + \" seconds\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n    this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n        new ThreadFactoryBuilder()\n            .setNameFormat(\"LogAggregationService #%d\")\n            .build());\n\n    rollingMonitorInterval \u003d conf.getLong(\n        YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n        YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n\n    boolean logAggregationDebugMode \u003d\n        conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n\n    if (rollingMonitorInterval \u003e 0\n        \u0026\u0026 rollingMonitorInterval \u003c MIN_LOG_ROLLING_INTERVAL) {\n      if (logAggregationDebugMode) {\n        LOG.info(\"Log aggregation debug mode enabled. rollingMonitorInterval \u003d \"\n            + rollingMonitorInterval);\n      } else {\n        LOG.warn(\"rollingMonitorInterval should be more than or equal to {} \" +\n                \"seconds. Using {} seconds instead.\",\n                MIN_LOG_ROLLING_INTERVAL, MIN_LOG_ROLLING_INTERVAL);\n        this.rollingMonitorInterval \u003d MIN_LOG_ROLLING_INTERVAL;\n      }\n    } else if (rollingMonitorInterval \u003c\u003d 0) {\n      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n          + \". The log rolling monitoring interval is disabled. \"\n          + \"The logs will be aggregated after this application is finished.\");\n    } else {\n      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n          + \". The logs will be aggregated every \" + rollingMonitorInterval\n          + \" seconds\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "24/08/17 1:36 PM",
      "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
      "commitAuthor": "Junping Du",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 2.52,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,37 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    this.remoteRootLogDir \u003d\n-        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n-            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n-    this.remoteRootLogDirSuffix \u003d\n-        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n-            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n     int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n     this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n         new ThreadFactoryBuilder()\n             .setNameFormat(\"LogAggregationService #%d\")\n             .build());\n \n     rollingMonitorInterval \u003d conf.getLong(\n         YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n         YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n \n     boolean logAggregationDebugMode \u003d\n         conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n \n     if (rollingMonitorInterval \u003e 0\n         \u0026\u0026 rollingMonitorInterval \u003c MIN_LOG_ROLLING_INTERVAL) {\n       if (logAggregationDebugMode) {\n         LOG.info(\"Log aggregation debug mode enabled. rollingMonitorInterval \u003d \"\n             + rollingMonitorInterval);\n       } else {\n         LOG.warn(\"rollingMonitorIntervall should be more than or equal to \"\n             + MIN_LOG_ROLLING_INTERVAL + \" seconds. Using \"\n             + MIN_LOG_ROLLING_INTERVAL + \" seconds instead.\");\n         this.rollingMonitorInterval \u003d MIN_LOG_ROLLING_INTERVAL;\n       }\n     } else if (rollingMonitorInterval \u003c\u003d 0) {\n       LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n           + \". The log rolling monitoring interval is disabled. \"\n           + \"The logs will be aggregated after this application is finished.\");\n     } else {\n       LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n           + \". The logs will be aggregated every \" + rollingMonitorInterval\n           + \" seconds\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n    this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n        new ThreadFactoryBuilder()\n            .setNameFormat(\"LogAggregationService #%d\")\n            .build());\n\n    rollingMonitorInterval \u003d conf.getLong(\n        YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n        YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n\n    boolean logAggregationDebugMode \u003d\n        conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n\n    if (rollingMonitorInterval \u003e 0\n        \u0026\u0026 rollingMonitorInterval \u003c MIN_LOG_ROLLING_INTERVAL) {\n      if (logAggregationDebugMode) {\n        LOG.info(\"Log aggregation debug mode enabled. rollingMonitorInterval \u003d \"\n            + rollingMonitorInterval);\n      } else {\n        LOG.warn(\"rollingMonitorIntervall should be more than or equal to \"\n            + MIN_LOG_ROLLING_INTERVAL + \" seconds. Using \"\n            + MIN_LOG_ROLLING_INTERVAL + \" seconds instead.\");\n        this.rollingMonitorInterval \u003d MIN_LOG_ROLLING_INTERVAL;\n      }\n    } else if (rollingMonitorInterval \u003c\u003d 0) {\n      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n          + \". The log rolling monitoring interval is disabled. \"\n          + \"The logs will be aggregated after this application is finished.\");\n    } else {\n      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n          + \". The logs will be aggregated every \" + rollingMonitorInterval\n          + \" seconds\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "6161d9ba5230f553db5f5490dce67e2afd1e29ca": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5112. Excessive log warnings for directory permission issue on NM recovery. Contributed by Jian He.\n(cherry picked from commit 867cd2f5a2e5966d6a7c5f5accb2fce78f9e7778)\n",
      "commitDate": "22/05/16 4:04 PM",
      "commitName": "6161d9ba5230f553db5f5490dce67e2afd1e29ca",
      "commitAuthor": "Junping Du",
      "commitDateOld": "16/05/16 8:40 AM",
      "commitNameOld": "81effb7dcde2b31423438d6f1b8b8204d4ca05b3",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,43 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     this.remoteRootLogDirSuffix \u003d\n         conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n     int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n     this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n         new ThreadFactoryBuilder()\n             .setNameFormat(\"LogAggregationService #%d\")\n             .build());\n+\n+    rollingMonitorInterval \u003d conf.getLong(\n+        YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n+        YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n+\n+    boolean logAggregationDebugMode \u003d\n+        conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n+\n+    if (rollingMonitorInterval \u003e 0\n+        \u0026\u0026 rollingMonitorInterval \u003c MIN_LOG_ROLLING_INTERVAL) {\n+      if (logAggregationDebugMode) {\n+        LOG.info(\"Log aggregation debug mode enabled. rollingMonitorInterval \u003d \"\n+            + rollingMonitorInterval);\n+      } else {\n+        LOG.warn(\"rollingMonitorIntervall should be more than or equal to \"\n+            + MIN_LOG_ROLLING_INTERVAL + \" seconds. Using \"\n+            + MIN_LOG_ROLLING_INTERVAL + \" seconds instead.\");\n+        this.rollingMonitorInterval \u003d MIN_LOG_ROLLING_INTERVAL;\n+      }\n+    } else if (rollingMonitorInterval \u003c\u003d 0) {\n+      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n+          + \". The log rolling monitoring interval is disabled. \"\n+          + \"The logs will be aggregated after this application is finished.\");\n+    } else {\n+      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n+          + \". The logs will be aggregated every \" + rollingMonitorInterval\n+          + \" seconds\");\n+    }\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n    int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n    this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n        new ThreadFactoryBuilder()\n            .setNameFormat(\"LogAggregationService #%d\")\n            .build());\n\n    rollingMonitorInterval \u003d conf.getLong(\n        YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,\n        YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);\n\n    boolean logAggregationDebugMode \u003d\n        conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED, false);\n\n    if (rollingMonitorInterval \u003e 0\n        \u0026\u0026 rollingMonitorInterval \u003c MIN_LOG_ROLLING_INTERVAL) {\n      if (logAggregationDebugMode) {\n        LOG.info(\"Log aggregation debug mode enabled. rollingMonitorInterval \u003d \"\n            + rollingMonitorInterval);\n      } else {\n        LOG.warn(\"rollingMonitorIntervall should be more than or equal to \"\n            + MIN_LOG_ROLLING_INTERVAL + \" seconds. Using \"\n            + MIN_LOG_ROLLING_INTERVAL + \" seconds instead.\");\n        this.rollingMonitorInterval \u003d MIN_LOG_ROLLING_INTERVAL;\n      }\n    } else if (rollingMonitorInterval \u003c\u003d 0) {\n      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n          + \". The log rolling monitoring interval is disabled. \"\n          + \"The logs will be aggregated after this application is finished.\");\n    } else {\n      LOG.info(\"rollingMonitorInterval is set as \" + rollingMonitorInterval\n          + \". The logs will be aggregated every \" + rollingMonitorInterval\n          + \" seconds\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "954dd57043d2de4f962876c1b89753bfc7e4ce55": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4697. NM aggregation thread pool is not bound by limits (haibochen via rkanter)\n",
      "commitDate": "24/02/16 3:00 PM",
      "commitName": "954dd57043d2de4f962876c1b89753bfc7e4ce55",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "10/02/16 10:36 PM",
      "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 13.68,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,14 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     this.remoteRootLogDirSuffix \u003d\n         conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n-\n+    int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n+    this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n+        new ThreadFactoryBuilder()\n+            .setNameFormat(\"LogAggregationService #%d\")\n+            .build());\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n    int threadPoolSize \u003d getAggregatorThreadPoolSize(conf);\n    this.threadPool \u003d HadoopExecutors.newFixedThreadPool(threadPoolSize,\n        new ThreadFactoryBuilder()\n            .setNameFormat(\"LogAggregationService #%d\")\n            .build());\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/06/13 1:49 PM",
          "commitNameOld": "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     this.remoteRootLogDirSuffix \u003d\n         conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/06/13 1:49 PM",
          "commitNameOld": "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     this.remoteRootLogDirSuffix \u003d\n         conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/06/13 1:49 PM",
          "commitNameOld": "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     this.remoteRootLogDirSuffix \u003d\n         conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/06/13 1:49 PM",
          "commitNameOld": "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 8.8,
          "commitsBetweenForRepo": 57,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     this.remoteRootLogDirSuffix \u003d\n         conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
      }
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "03/11/11 1:02 AM",
      "commitNameOld": "c27601fefebd0af887a12d684bfc6f90d9fc0321",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.64,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,10 @@\n   public synchronized void init(Configuration conf) {\n-    this.localRootLogDirs \u003d\n-        conf.getStrings(YarnConfiguration.NM_LOG_DIRS,\n-            YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     this.remoteRootLogDirSuffix \u003d\n         conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "a75c4cf4e4400a2dcb3edc88df7f35a763f93c4e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2696. Fixed NodeManager to cleanup logs in a thread when logs\u0027 aggregation is not enabled. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195383 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 2:55 AM",
      "commitName": "a75c4cf4e4400a2dcb3edc88df7f35a763f93c4e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/10/11 11:42 PM",
      "commitNameOld": "47a381e306877750b5a3ce5d76e0a5ff652ec188",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,13 @@\n   public synchronized void init(Configuration conf) {\n     this.localRootLogDirs \u003d\n         conf.getStrings(YarnConfiguration.NM_LOG_DIRS,\n             YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     this.remoteRootLogDirSuffix \u003d\n         conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n-    this.isLogAggregationEnabled \u003d\n-        conf.getBoolean(YarnConfiguration.NM_LOG_AGGREGATION_ENABLED, false);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.localRootLogDirs \u003d\n        conf.getStrings(YarnConfiguration.NM_LOG_DIRS,\n            YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/10/11 12:27 PM",
      "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 11.47,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,15 @@\n   public synchronized void init(Configuration conf) {\n     this.localRootLogDirs \u003d\n-        conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n+        conf.getStrings(YarnConfiguration.NM_LOG_DIRS,\n+            YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n     this.remoteRootLogDir \u003d\n         new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n+    this.remoteRootLogDirSuffix \u003d\n+        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n+            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n+    this.isLogAggregationEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.NM_LOG_AGGREGATION_ENABLED, false);\n+\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.localRootLogDirs \u003d\n        conf.getStrings(YarnConfiguration.NM_LOG_DIRS,\n            YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    this.remoteRootLogDirSuffix \u003d\n        conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX);\n    this.isLogAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_LOG_AGGREGATION_ENABLED, false);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   public synchronized void init(Configuration conf) {\n     this.localRootLogDirs \u003d\n-        conf.getStrings(NMConfig.NM_LOG_DIR, NMConfig.DEFAULT_NM_LOG_DIR);\n+        conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n     this.remoteRootLogDir \u003d\n-        new Path(conf.get(NMConfig.REMOTE_USER_LOG_DIR,\n-            NMConfig.DEFAULT_REMOTE_APP_LOG_DIR));\n+        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n+            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.localRootLogDirs \u003d\n        conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.localRootLogDirs \u003d\n        conf.getStrings(NMConfig.NM_LOG_DIR, NMConfig.DEFAULT_NM_LOG_DIR);\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(NMConfig.REMOTE_USER_LOG_DIR,\n            NMConfig.DEFAULT_REMOTE_APP_LOG_DIR));\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,8 @@\n+  public synchronized void init(Configuration conf) {\n+    this.localRootLogDirs \u003d\n+        conf.getStrings(NMConfig.NM_LOG_DIR, NMConfig.DEFAULT_NM_LOG_DIR);\n+    this.remoteRootLogDir \u003d\n+        new Path(conf.get(NMConfig.REMOTE_USER_LOG_DIR,\n+            NMConfig.DEFAULT_REMOTE_APP_LOG_DIR));\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.localRootLogDirs \u003d\n        conf.getStrings(NMConfig.NM_LOG_DIR, NMConfig.DEFAULT_NM_LOG_DIR);\n    this.remoteRootLogDir \u003d\n        new Path(conf.get(NMConfig.REMOTE_USER_LOG_DIR,\n            NMConfig.DEFAULT_REMOTE_APP_LOG_DIR));\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
    }
  }
}