{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMSimulator.java",
  "functionName": "init",
  "functionId": "init___nodeIdStr-String__nodeResource-Resource__dispatchTime-int__heartBeatInterval-int__pRm-ResourceManager__pResourceUtilizationRatio-float__labels-Set__NodeLabel__",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
  "functionStartLine": 81,
  "functionEndLine": 113,
  "numCommitsSeen": 9,
  "timeTaken": 1428,
  "changeHistory": [
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53"
  ],
  "changeHistoryShort": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
      "commitDate": "31/07/18 9:36 AM",
      "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,33 @@\n+  public void init(String nodeIdStr, Resource nodeResource, int dispatchTime,\n+      int heartBeatInterval, ResourceManager pRm,\n+      float pResourceUtilizationRatio, Set\u003cNodeLabel\u003e labels)\n+      throws IOException, YarnException {\n+    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n+        heartBeatInterval);\n+    // create resource\n+    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n+    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n+        Resources.clone(nodeResource));\n+    this.rm \u003d pRm;\n+    // init data structures\n+    completedContainerList \u003d\n+            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n+    releasedContainerList \u003d\n+            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n+    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n+    amContainerList \u003d\n+            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n+    runningContainers \u003d\n+            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n+    // register NM with RM\n+    RegisterNodeManagerRequest req \u003d\n+            Records.newRecord(RegisterNodeManagerRequest.class);\n+    req.setNodeId(node.getNodeID());\n+    req.setResource(node.getTotalCapability());\n+    req.setNodeLabels(labels);\n+    req.setHttpPort(80);\n+    RegisterNodeManagerResponse response \u003d this.rm.getResourceTrackerService()\n+            .registerNodeManager(req);\n+    masterKey \u003d response.getNMTokenMasterKey();\n+    this.resourceUtilizationRatio \u003d pResourceUtilizationRatio;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(String nodeIdStr, Resource nodeResource, int dispatchTime,\n      int heartBeatInterval, ResourceManager pRm,\n      float pResourceUtilizationRatio, Set\u003cNodeLabel\u003e labels)\n      throws IOException, YarnException {\n    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n        heartBeatInterval);\n    // create resource\n    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n        Resources.clone(nodeResource));\n    this.rm \u003d pRm;\n    // init data structures\n    completedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    releasedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n    amContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    runningContainers \u003d\n            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n    // register NM with RM\n    RegisterNodeManagerRequest req \u003d\n            Records.newRecord(RegisterNodeManagerRequest.class);\n    req.setNodeId(node.getNodeID());\n    req.setResource(node.getTotalCapability());\n    req.setNodeLabels(labels);\n    req.setHttpPort(80);\n    RegisterNodeManagerResponse response \u003d this.rm.getResourceTrackerService()\n            .registerNodeManager(req);\n    masterKey \u003d response.getNMTokenMasterKey();\n    this.resourceUtilizationRatio \u003d pResourceUtilizationRatio;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java"
    }
  }
}