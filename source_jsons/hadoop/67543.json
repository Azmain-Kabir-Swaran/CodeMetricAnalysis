{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LpSolver.java",
  "functionName": "getJobLen",
  "functionId": "getJobLen___resourceSkylines-List__ResourceSkyline__(modifiers-final)__numJobs-int(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java",
  "functionStartLine": 195,
  "functionEndLine": 209,
  "numCommitsSeen": 1,
  "timeTaken": 422,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,15 @@\n+  private int getJobLen(final List\u003cResourceSkyline\u003e resourceSkylines,\n+      final int numJobs) {\n+    int curLen \u003d 0;\n+    int jobLen \u003d 0;\n+    for (int indexJobI \u003d 0; indexJobI \u003c numJobs; indexJobI++) {\n+      curLen \u003d (int) (resourceSkylines.get(indexJobI).getSkylineList()\n+          .getLatestNonNullTime() - resourceSkylines.get(indexJobI)\n+          .getSkylineList().getEarliestStartTime() + timeInterval - 1)\n+          / timeInterval; // for round up\n+      if (jobLen \u003c curLen) {\n+        jobLen \u003d curLen;\n+      }\n+    }\n+    return jobLen;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int getJobLen(final List\u003cResourceSkyline\u003e resourceSkylines,\n      final int numJobs) {\n    int curLen \u003d 0;\n    int jobLen \u003d 0;\n    for (int indexJobI \u003d 0; indexJobI \u003c numJobs; indexJobI++) {\n      curLen \u003d (int) (resourceSkylines.get(indexJobI).getSkylineList()\n          .getLatestNonNullTime() - resourceSkylines.get(indexJobI)\n          .getSkylineList().getEarliestStartTime() + timeInterval - 1)\n          / timeInterval; // for round up\n      if (jobLen \u003c curLen) {\n        jobLen \u003d curLen;\n      }\n    }\n    return jobLen;\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java"
    }
  }
}