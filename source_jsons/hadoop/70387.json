{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "open",
  "functionId": "open___f-Path__bufferSize-int",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 3047,
  "functionEndLine": 3097,
  "numCommitsSeen": 66,
  "timeTaken": 5429,
  "changeHistory": [
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
    "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0",
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
    "686823529be09bea2a6cecb3503ef722017475bc",
    "52d7d5aa1a303cf70519a61487641211f4267c6f",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
    "5f6edb30c2bb648d5564c951edc25645e17e6636",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": "Ybodychange",
    "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0": "Ybodychange",
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4": "Ybodychange",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": "Ybodychange",
    "686823529be09bea2a6cecb3503ef722017475bc": "Ybodychange",
    "52d7d5aa1a303cf70519a61487641211f4267c6f": "Ybodychange",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": "Ybodychange",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": "Ybodychange",
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79": "Ymultichange(Yexceptionschange,Ybodychange)",
    "5f6edb30c2bb648d5564c951edc25645e17e6636": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15547/ WASB: improve listStatus performance.\nContributed by Thomas Marquardt.\n\n(cherry picked from commit 749fff577ed9afb4ef8a54b8948f74be083cc620)\n",
      "commitDate": "19/07/18 12:31 PM",
      "commitName": "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n \n     performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"read\", absolutePath);\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n-    if (meta.isDir()) {\n+    if (meta.isDirectory()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     InputStream inputStream;\n     try {\n       inputStream \u003d store.retrieve(key);\n     } catch(Exception ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n-        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n+        new NativeAzureFsInputStream(inputStream, key, meta.getLen()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"read\", absolutePath);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDirectory()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    InputStream inputStream;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLen()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14535 wasb: implement high-performance random access and seek of block blobs.\nContributed by Thomas Marquardt\n",
      "commitDate": "11/07/17 1:34 PM",
      "commitName": "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "30/06/17 4:53 PM",
      "commitNameOld": "38996fdcf0987d1da00ce46f8284d8fcdce57329",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 10.86,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n \n     performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"read\", absolutePath);\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n-    DataInputStream inputStream \u003d null;\n+    InputStream inputStream;\n     try {\n       inputStream \u003d store.retrieve(key);\n     } catch(Exception ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n         new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"read\", absolutePath);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    InputStream inputStream;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14416. Path starting with \u0027wasb:///\u0027 not resolved correctly while authorizing with WASB-Ranger. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "16/05/17 11:22 AM",
      "commitName": "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "10/05/17 3:05 PM",
      "commitNameOld": "eed731496f63537350206274af09d2118b116a17",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 5.85,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n \n-    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, \"read\", absolutePath.toString());\n+    performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"read\", absolutePath);\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     DataInputStream inputStream \u003d null;\n     try {\n       inputStream \u003d store.retrieve(key);\n     } catch(Exception ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n         new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath, WasbAuthorizationOperations.READ, \"read\", absolutePath);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    DataInputStream inputStream \u003d null;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14274. Azure: Simplify Ranger-WASB policy model. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "12/04/17 4:07 PM",
      "commitName": "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "04/04/17 11:10 AM",
      "commitNameOld": "56ab02eed9b61e1c80605104dfc4c87fc6abac96",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 8.21,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,51 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n \n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.READ.toString(), \"read\");\n+    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, \"read\", absolutePath.toString());\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     DataInputStream inputStream \u003d null;\n     try {\n       inputStream \u003d store.retrieve(key);\n     } catch(Exception ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n         new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, \"read\", absolutePath.toString());\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    DataInputStream inputStream \u003d null;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "686823529be09bea2a6cecb3503ef722017475bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "06/03/17 5:16 PM",
      "commitName": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:10 PM",
      "commitNameOld": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,52 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.READ.toString(), \"read\");\n+\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     DataInputStream inputStream \u003d null;\n     try {\n       inputStream \u003d store.retrieve(key);\n     } catch(Exception ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n         new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.READ.toString(), \"read\");\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    DataInputStream inputStream \u003d null;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "52d7d5aa1a303cf70519a61487641211f4267c6f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\"\n\nThis reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.\n",
      "commitDate": "06/03/17 5:10 PM",
      "commitName": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:00 PM",
      "commitNameOld": "c571cda5c7d929477961dfff4176d7de4944d874",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,48 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n-\n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.READ.toString(), \"read\");\n-\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     DataInputStream inputStream \u003d null;\n     try {\n       inputStream \u003d store.retrieve(key);\n     } catch(Exception ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n         new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    DataInputStream inputStream \u003d null;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "03/03/17 5:09 PM",
      "commitName": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/12/16 4:24 PM",
      "commitNameOld": "c6a5b689db573046819f0e9193cb042e6c7298f4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 64.03,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,52 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.READ.toString(), \"read\");\n+\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     DataInputStream inputStream \u003d null;\n     try {\n       inputStream \u003d store.retrieve(key);\n     } catch(Exception ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n         new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.READ.toString(), \"read\");\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    DataInputStream inputStream \u003d null;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12635. Adding Append API support for WASB. Contributed by Dushyanth.\n",
      "commitDate": "18/01/16 9:08 AM",
      "commitName": "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
      "commitAuthor": "cnauroth",
      "commitDateOld": "09/01/16 10:18 PM",
      "commitNameOld": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 8.45,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n-      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n-          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     DataInputStream inputStream \u003d null;\n     try {\n       inputStream \u003d store.retrieve(key);\n     } catch(Exception ex) {\n-      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n-          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n \n       throw ex;\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n         new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    DataInputStream inputStream \u003d null;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-12551. Introduce FileNotFoundException for WASB FileSystem API. Contributed by Dushyanth.\n",
      "commitDate": "09/01/16 10:18 PM",
      "commitName": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-12551. Introduce FileNotFoundException for WASB FileSystem API. Contributed by Dushyanth.\n",
          "commitDate": "09/01/16 10:18 PM",
          "commitName": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
          "commitAuthor": "cnauroth",
          "commitDateOld": "08/01/16 8:18 PM",
          "commitNameOld": "f0fa6d869b9abb5a900ea1c9eb4eb19ec9831dc4",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,48 @@\n-  public FSDataInputStream open(Path f, int bufferSize) throws IOException {\n+  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n-    FileMetadata meta \u003d store.retrieveMetadata(key);\n+    FileMetadata meta \u003d null;\n+    try {\n+      meta \u003d store.retrieveMetadata(key);\n+    } catch(Exception ex) {\n+\n+      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+\n+        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+      }\n+\n+      throw ex;\n+    }\n+\n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n+    DataInputStream inputStream \u003d null;\n+    try {\n+      inputStream \u003d store.retrieve(key);\n+    } catch(Exception ex) {\n+      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+\n+        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+      }\n+\n+      throw ex;\n+    }\n+\n     return new FSDataInputStream(new BufferedFSInputStream(\n-        new NativeAzureFsInputStream(store.retrieve(key), key, meta.getLength()), bufferSize));\n+        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    DataInputStream inputStream \u003d null;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[FileNotFoundException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12551. Introduce FileNotFoundException for WASB FileSystem API. Contributed by Dushyanth.\n",
          "commitDate": "09/01/16 10:18 PM",
          "commitName": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
          "commitAuthor": "cnauroth",
          "commitDateOld": "08/01/16 8:18 PM",
          "commitNameOld": "f0fa6d869b9abb5a900ea1c9eb4eb19ec9831dc4",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,48 @@\n-  public FSDataInputStream open(Path f, int bufferSize) throws IOException {\n+  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n \n     LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n-    FileMetadata meta \u003d store.retrieveMetadata(key);\n+    FileMetadata meta \u003d null;\n+    try {\n+      meta \u003d store.retrieveMetadata(key);\n+    } catch(Exception ex) {\n+\n+      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+\n+        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+      }\n+\n+      throw ex;\n+    }\n+\n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n+    DataInputStream inputStream \u003d null;\n+    try {\n+      inputStream \u003d store.retrieve(key);\n+    } catch(Exception ex) {\n+      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+\n+        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+      }\n+\n+      throw ex;\n+    }\n+\n     return new FSDataInputStream(new BufferedFSInputStream(\n-        new NativeAzureFsInputStream(store.retrieve(key), key, meta.getLength()), bufferSize));\n+        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    DataInputStream inputStream \u003d null;\n    try {\n      inputStream \u003d store.retrieve(key);\n    } catch(Exception ex) {\n      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      }\n\n      throw ex;\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "5f6edb30c2bb648d5564c951edc25645e17e6636": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12350. WASB Logging: Improve WASB Logging around deletes, reads and writes. Contributed by Dushyanth.\n",
      "commitDate": "05/10/15 8:11 PM",
      "commitName": "5f6edb30c2bb648d5564c951edc25645e17e6636",
      "commitAuthor": "cnauroth",
      "commitDateOld": "28/09/15 3:31 PM",
      "commitNameOld": "3abbdc929bde05f8819f5410cef1eaeb8940203f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 7.19,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,18 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws IOException {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Opening file: \" + f.toString());\n-    }\n+\n+    LOG.debug(\"Opening file: {}\", f.toString());\n \n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d store.retrieveMetadata(key);\n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n         new NativeAzureFsInputStream(store.retrieve(key), key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws IOException {\n\n    LOG.debug(\"Opening file: {}\", f.toString());\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d store.retrieveMetadata(key);\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(store.retrieve(key), key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "commitDateOld": "19/09/14 11:33 AM",
      "commitNameOld": "9f03a7c018bb2c497cd0ef758f1a3e08e8163d06",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 19.12,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public FSDataInputStream open(Path f, int bufferSize) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Opening file: \" + f.toString());\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d store.retrieveMetadata(key);\n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     return new FSDataInputStream(new BufferedFSInputStream(\n-        new NativeAzureFsInputStream(store.retrieve(key), key), bufferSize));\n+        new NativeAzureFsInputStream(store.retrieve(key), key, meta.getLength()), bufferSize));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Opening file: \" + f.toString());\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d store.retrieveMetadata(key);\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(store.retrieve(key), key, meta.getLength()), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,19 @@\n+  public FSDataInputStream open(Path f, int bufferSize) throws IOException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Opening file: \" + f.toString());\n+    }\n+\n+    Path absolutePath \u003d makeAbsolute(f);\n+    String key \u003d pathToKey(absolutePath);\n+    FileMetadata meta \u003d store.retrieveMetadata(key);\n+    if (meta \u003d\u003d null) {\n+      throw new FileNotFoundException(f.toString());\n+    }\n+    if (meta.isDir()) {\n+      throw new FileNotFoundException(f.toString()\n+          + \" is a directory not a file.\");\n+    }\n+\n+    return new FSDataInputStream(new BufferedFSInputStream(\n+        new NativeAzureFsInputStream(store.retrieve(key), key), bufferSize));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Opening file: \" + f.toString());\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d store.retrieveMetadata(key);\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    return new FSDataInputStream(new BufferedFSInputStream(\n        new NativeAzureFsInputStream(store.retrieve(key), key), bufferSize));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}