{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GlobPattern.java",
  "functionName": "set",
  "functionId": "set___glob-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/GlobPattern.java",
  "functionStartLine": 74,
  "functionEndLine": 157,
  "numCommitsSeen": 8,
  "timeTaken": 1306,
  "changeHistory": [
    "706d630eb9db9658083d57d1d99b6a0f11cc5657",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "c6bc36580ac93f54ab4063b37fd771d2efa36bc4"
  ],
  "changeHistoryShort": {
    "706d630eb9db9658083d57d1d99b6a0f11cc5657": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "c6bc36580ac93f54ab4063b37fd771d2efa36bc4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "706d630eb9db9658083d57d1d99b6a0f11cc5657": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13976. Path globbing does not match newlines. Contributed by Eric Badger.\n",
      "commitDate": "17/01/17 1:10 PM",
      "commitName": "706d630eb9db9658083d57d1d99b6a0f11cc5657",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "22/10/15 8:19 AM",
      "commitNameOld": "4c0bae240bea9a475e8ee9a0b081bfce6d1cd1e5",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 453.24,
      "commitsBetweenForRepo": 3101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n   public void set(String glob) {\n     StringBuilder regex \u003d new StringBuilder();\n     int setOpen \u003d 0;\n     int curlyOpen \u003d 0;\n     int len \u003d glob.length();\n     hasWildcard \u003d false;\n \n     for (int i \u003d 0; i \u003c len; i++) {\n       char c \u003d glob.charAt(i);\n \n       switch (c) {\n         case BACKSLASH:\n           if (++i \u003e\u003d len) {\n             error(\"Missing escaped character\", glob, i);\n           }\n           regex.append(c).append(glob.charAt(i));\n           continue;\n         case \u0027.\u0027:\n         case \u0027$\u0027:\n         case \u0027(\u0027:\n         case \u0027)\u0027:\n         case \u0027|\u0027:\n         case \u0027+\u0027:\n           // escape regex special chars that are not glob special chars\n           regex.append(BACKSLASH);\n           break;\n         case \u0027*\u0027:\n           regex.append(\u0027.\u0027);\n           hasWildcard \u003d true;\n           break;\n         case \u0027?\u0027:\n           regex.append(\u0027.\u0027);\n           hasWildcard \u003d true;\n           continue;\n         case \u0027{\u0027: // start of a group\n           regex.append(\"(?:\"); // non-capturing\n           curlyOpen++;\n           hasWildcard \u003d true;\n           continue;\n         case \u0027,\u0027:\n           regex.append(curlyOpen \u003e 0 ? \u0027|\u0027 : c);\n           continue;\n         case \u0027}\u0027:\n           if (curlyOpen \u003e 0) {\n             // end of a group\n             curlyOpen--;\n             regex.append(\")\");\n             continue;\n           }\n           break;\n         case \u0027[\u0027:\n           if (setOpen \u003e 0) {\n             error(\"Unclosed character class\", glob, i);\n           }\n           setOpen++;\n           hasWildcard \u003d true;\n           break;\n         case \u0027^\u0027: // ^ inside [...] can be unescaped\n           if (setOpen \u003d\u003d 0) {\n             regex.append(BACKSLASH);\n           }\n           break;\n         case \u0027!\u0027: // [! needs to be translated to [^\n           regex.append(setOpen \u003e 0 \u0026\u0026 \u0027[\u0027 \u003d\u003d glob.charAt(i - 1) ? \u0027^\u0027 : \u0027!\u0027);\n           continue;\n         case \u0027]\u0027:\n           // Many set errors like [][] could not be easily detected here,\n           // as []], []-] and [-] are all valid POSIX glob and java regex.\n           // We\u0027ll just let the regex compiler do the real work.\n           setOpen \u003d 0;\n           break;\n         default:\n       }\n       regex.append(c);\n     }\n \n     if (setOpen \u003e 0) {\n       error(\"Unclosed character class\", glob, len);\n     }\n     if (curlyOpen \u003e 0) {\n       error(\"Unclosed group\", glob, len);\n     }\n-    compiled \u003d Pattern.compile(regex.toString());\n+    compiled \u003d Pattern.compile(regex.toString(), Pattern.DOTALL);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String glob) {\n    StringBuilder regex \u003d new StringBuilder();\n    int setOpen \u003d 0;\n    int curlyOpen \u003d 0;\n    int len \u003d glob.length();\n    hasWildcard \u003d false;\n\n    for (int i \u003d 0; i \u003c len; i++) {\n      char c \u003d glob.charAt(i);\n\n      switch (c) {\n        case BACKSLASH:\n          if (++i \u003e\u003d len) {\n            error(\"Missing escaped character\", glob, i);\n          }\n          regex.append(c).append(glob.charAt(i));\n          continue;\n        case \u0027.\u0027:\n        case \u0027$\u0027:\n        case \u0027(\u0027:\n        case \u0027)\u0027:\n        case \u0027|\u0027:\n        case \u0027+\u0027:\n          // escape regex special chars that are not glob special chars\n          regex.append(BACKSLASH);\n          break;\n        case \u0027*\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          break;\n        case \u0027?\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          continue;\n        case \u0027{\u0027: // start of a group\n          regex.append(\"(?:\"); // non-capturing\n          curlyOpen++;\n          hasWildcard \u003d true;\n          continue;\n        case \u0027,\u0027:\n          regex.append(curlyOpen \u003e 0 ? \u0027|\u0027 : c);\n          continue;\n        case \u0027}\u0027:\n          if (curlyOpen \u003e 0) {\n            // end of a group\n            curlyOpen--;\n            regex.append(\")\");\n            continue;\n          }\n          break;\n        case \u0027[\u0027:\n          if (setOpen \u003e 0) {\n            error(\"Unclosed character class\", glob, i);\n          }\n          setOpen++;\n          hasWildcard \u003d true;\n          break;\n        case \u0027^\u0027: // ^ inside [...] can be unescaped\n          if (setOpen \u003d\u003d 0) {\n            regex.append(BACKSLASH);\n          }\n          break;\n        case \u0027!\u0027: // [! needs to be translated to [^\n          regex.append(setOpen \u003e 0 \u0026\u0026 \u0027[\u0027 \u003d\u003d glob.charAt(i - 1) ? \u0027^\u0027 : \u0027!\u0027);\n          continue;\n        case \u0027]\u0027:\n          // Many set errors like [][] could not be easily detected here,\n          // as []], []-] and [-] are all valid POSIX glob and java regex.\n          // We\u0027ll just let the regex compiler do the real work.\n          setOpen \u003d 0;\n          break;\n        default:\n      }\n      regex.append(c);\n    }\n\n    if (setOpen \u003e 0) {\n      error(\"Unclosed character class\", glob, len);\n    }\n    if (curlyOpen \u003e 0) {\n      error(\"Unclosed group\", glob, len);\n    }\n    compiled \u003d Pattern.compile(regex.toString(), Pattern.DOTALL);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/GlobPattern.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void set(String glob) {\n    StringBuilder regex \u003d new StringBuilder();\n    int setOpen \u003d 0;\n    int curlyOpen \u003d 0;\n    int len \u003d glob.length();\n    hasWildcard \u003d false;\n\n    for (int i \u003d 0; i \u003c len; i++) {\n      char c \u003d glob.charAt(i);\n\n      switch (c) {\n        case BACKSLASH:\n          if (++i \u003e\u003d len) {\n            error(\"Missing escaped character\", glob, i);\n          }\n          regex.append(c).append(glob.charAt(i));\n          continue;\n        case \u0027.\u0027:\n        case \u0027$\u0027:\n        case \u0027(\u0027:\n        case \u0027)\u0027:\n        case \u0027|\u0027:\n        case \u0027+\u0027:\n          // escape regex special chars that are not glob special chars\n          regex.append(BACKSLASH);\n          break;\n        case \u0027*\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          break;\n        case \u0027?\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          continue;\n        case \u0027{\u0027: // start of a group\n          regex.append(\"(?:\"); // non-capturing\n          curlyOpen++;\n          hasWildcard \u003d true;\n          continue;\n        case \u0027,\u0027:\n          regex.append(curlyOpen \u003e 0 ? \u0027|\u0027 : c);\n          continue;\n        case \u0027}\u0027:\n          if (curlyOpen \u003e 0) {\n            // end of a group\n            curlyOpen--;\n            regex.append(\")\");\n            continue;\n          }\n          break;\n        case \u0027[\u0027:\n          if (setOpen \u003e 0) {\n            error(\"Unclosed character class\", glob, i);\n          }\n          setOpen++;\n          hasWildcard \u003d true;\n          break;\n        case \u0027^\u0027: // ^ inside [...] can be unescaped\n          if (setOpen \u003d\u003d 0) {\n            regex.append(BACKSLASH);\n          }\n          break;\n        case \u0027!\u0027: // [! needs to be translated to [^\n          regex.append(setOpen \u003e 0 \u0026\u0026 \u0027[\u0027 \u003d\u003d glob.charAt(i - 1) ? \u0027^\u0027 : \u0027!\u0027);\n          continue;\n        case \u0027]\u0027:\n          // Many set errors like [][] could not be easily detected here,\n          // as []], []-] and [-] are all valid POSIX glob and java regex.\n          // We\u0027ll just let the regex compiler do the real work.\n          setOpen \u003d 0;\n          break;\n        default:\n      }\n      regex.append(c);\n    }\n\n    if (setOpen \u003e 0) {\n      error(\"Unclosed character class\", glob, len);\n    }\n    if (curlyOpen \u003e 0) {\n      error(\"Unclosed group\", glob, len);\n    }\n    compiled \u003d Pattern.compile(regex.toString());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/GlobPattern.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/GlobPattern.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/GlobPattern.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void set(String glob) {\n    StringBuilder regex \u003d new StringBuilder();\n    int setOpen \u003d 0;\n    int curlyOpen \u003d 0;\n    int len \u003d glob.length();\n    hasWildcard \u003d false;\n\n    for (int i \u003d 0; i \u003c len; i++) {\n      char c \u003d glob.charAt(i);\n\n      switch (c) {\n        case BACKSLASH:\n          if (++i \u003e\u003d len) {\n            error(\"Missing escaped character\", glob, i);\n          }\n          regex.append(c).append(glob.charAt(i));\n          continue;\n        case \u0027.\u0027:\n        case \u0027$\u0027:\n        case \u0027(\u0027:\n        case \u0027)\u0027:\n        case \u0027|\u0027:\n        case \u0027+\u0027:\n          // escape regex special chars that are not glob special chars\n          regex.append(BACKSLASH);\n          break;\n        case \u0027*\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          break;\n        case \u0027?\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          continue;\n        case \u0027{\u0027: // start of a group\n          regex.append(\"(?:\"); // non-capturing\n          curlyOpen++;\n          hasWildcard \u003d true;\n          continue;\n        case \u0027,\u0027:\n          regex.append(curlyOpen \u003e 0 ? \u0027|\u0027 : c);\n          continue;\n        case \u0027}\u0027:\n          if (curlyOpen \u003e 0) {\n            // end of a group\n            curlyOpen--;\n            regex.append(\")\");\n            continue;\n          }\n          break;\n        case \u0027[\u0027:\n          if (setOpen \u003e 0) {\n            error(\"Unclosed character class\", glob, i);\n          }\n          setOpen++;\n          hasWildcard \u003d true;\n          break;\n        case \u0027^\u0027: // ^ inside [...] can be unescaped\n          if (setOpen \u003d\u003d 0) {\n            regex.append(BACKSLASH);\n          }\n          break;\n        case \u0027!\u0027: // [! needs to be translated to [^\n          regex.append(setOpen \u003e 0 \u0026\u0026 \u0027[\u0027 \u003d\u003d glob.charAt(i - 1) ? \u0027^\u0027 : \u0027!\u0027);\n          continue;\n        case \u0027]\u0027:\n          // Many set errors like [][] could not be easily detected here,\n          // as []], []-] and [-] are all valid POSIX glob and java regex.\n          // We\u0027ll just let the regex compiler do the real work.\n          setOpen \u003d 0;\n          break;\n        default:\n      }\n      regex.append(c);\n    }\n\n    if (setOpen \u003e 0) {\n      error(\"Unclosed character class\", glob, len);\n    }\n    if (curlyOpen \u003e 0) {\n      error(\"Unclosed group\", glob, len);\n    }\n    compiled \u003d Pattern.compile(regex.toString());\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/GlobPattern.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/GlobPattern.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/GlobPattern.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void set(String glob) {\n    StringBuilder regex \u003d new StringBuilder();\n    int setOpen \u003d 0;\n    int curlyOpen \u003d 0;\n    int len \u003d glob.length();\n    hasWildcard \u003d false;\n\n    for (int i \u003d 0; i \u003c len; i++) {\n      char c \u003d glob.charAt(i);\n\n      switch (c) {\n        case BACKSLASH:\n          if (++i \u003e\u003d len) {\n            error(\"Missing escaped character\", glob, i);\n          }\n          regex.append(c).append(glob.charAt(i));\n          continue;\n        case \u0027.\u0027:\n        case \u0027$\u0027:\n        case \u0027(\u0027:\n        case \u0027)\u0027:\n        case \u0027|\u0027:\n        case \u0027+\u0027:\n          // escape regex special chars that are not glob special chars\n          regex.append(BACKSLASH);\n          break;\n        case \u0027*\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          break;\n        case \u0027?\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          continue;\n        case \u0027{\u0027: // start of a group\n          regex.append(\"(?:\"); // non-capturing\n          curlyOpen++;\n          hasWildcard \u003d true;\n          continue;\n        case \u0027,\u0027:\n          regex.append(curlyOpen \u003e 0 ? \u0027|\u0027 : c);\n          continue;\n        case \u0027}\u0027:\n          if (curlyOpen \u003e 0) {\n            // end of a group\n            curlyOpen--;\n            regex.append(\")\");\n            continue;\n          }\n          break;\n        case \u0027[\u0027:\n          if (setOpen \u003e 0) {\n            error(\"Unclosed character class\", glob, i);\n          }\n          setOpen++;\n          hasWildcard \u003d true;\n          break;\n        case \u0027^\u0027: // ^ inside [...] can be unescaped\n          if (setOpen \u003d\u003d 0) {\n            regex.append(BACKSLASH);\n          }\n          break;\n        case \u0027!\u0027: // [! needs to be translated to [^\n          regex.append(setOpen \u003e 0 \u0026\u0026 \u0027[\u0027 \u003d\u003d glob.charAt(i - 1) ? \u0027^\u0027 : \u0027!\u0027);\n          continue;\n        case \u0027]\u0027:\n          // Many set errors like [][] could not be easily detected here,\n          // as []], []-] and [-] are all valid POSIX glob and java regex.\n          // We\u0027ll just let the regex compiler do the real work.\n          setOpen \u003d 0;\n          break;\n        default:\n      }\n      regex.append(c);\n    }\n\n    if (setOpen \u003e 0) {\n      error(\"Unclosed character class\", glob, len);\n    }\n    if (curlyOpen \u003e 0) {\n      error(\"Unclosed group\", glob, len);\n    }\n    compiled \u003d Pattern.compile(regex.toString());\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/GlobPattern.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/GlobPattern.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/GlobPattern.java"
      }
    },
    "c6bc36580ac93f54ab4063b37fd771d2efa36bc4": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6787. Factor out glob pattern code from FileContext and FileSystem. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951207 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/10 4:39 PM",
      "commitName": "c6bc36580ac93f54ab4063b37fd771d2efa36bc4",
      "commitAuthor": "Eli Collins",
      "diff": "@@ -0,0 +1,84 @@\n+  public void set(String glob) {\n+    StringBuilder regex \u003d new StringBuilder();\n+    int setOpen \u003d 0;\n+    int curlyOpen \u003d 0;\n+    int len \u003d glob.length();\n+    hasWildcard \u003d false;\n+\n+    for (int i \u003d 0; i \u003c len; i++) {\n+      char c \u003d glob.charAt(i);\n+\n+      switch (c) {\n+        case BACKSLASH:\n+          if (++i \u003e\u003d len) {\n+            error(\"Missing escaped character\", glob, i);\n+          }\n+          regex.append(c).append(glob.charAt(i));\n+          continue;\n+        case \u0027.\u0027:\n+        case \u0027$\u0027:\n+        case \u0027(\u0027:\n+        case \u0027)\u0027:\n+        case \u0027|\u0027:\n+        case \u0027+\u0027:\n+          // escape regex special chars that are not glob special chars\n+          regex.append(BACKSLASH);\n+          break;\n+        case \u0027*\u0027:\n+          regex.append(\u0027.\u0027);\n+          hasWildcard \u003d true;\n+          break;\n+        case \u0027?\u0027:\n+          regex.append(\u0027.\u0027);\n+          hasWildcard \u003d true;\n+          continue;\n+        case \u0027{\u0027: // start of a group\n+          regex.append(\"(?:\"); // non-capturing\n+          curlyOpen++;\n+          hasWildcard \u003d true;\n+          continue;\n+        case \u0027,\u0027:\n+          regex.append(curlyOpen \u003e 0 ? \u0027|\u0027 : c);\n+          continue;\n+        case \u0027}\u0027:\n+          if (curlyOpen \u003e 0) {\n+            // end of a group\n+            curlyOpen--;\n+            regex.append(\")\");\n+            continue;\n+          }\n+          break;\n+        case \u0027[\u0027:\n+          if (setOpen \u003e 0) {\n+            error(\"Unclosed character class\", glob, i);\n+          }\n+          setOpen++;\n+          hasWildcard \u003d true;\n+          break;\n+        case \u0027^\u0027: // ^ inside [...] can be unescaped\n+          if (setOpen \u003d\u003d 0) {\n+            regex.append(BACKSLASH);\n+          }\n+          break;\n+        case \u0027!\u0027: // [! needs to be translated to [^\n+          regex.append(setOpen \u003e 0 \u0026\u0026 \u0027[\u0027 \u003d\u003d glob.charAt(i - 1) ? \u0027^\u0027 : \u0027!\u0027);\n+          continue;\n+        case \u0027]\u0027:\n+          // Many set errors like [][] could not be easily detected here,\n+          // as []], []-] and [-] are all valid POSIX glob and java regex.\n+          // We\u0027ll just let the regex compiler do the real work.\n+          setOpen \u003d 0;\n+          break;\n+        default:\n+      }\n+      regex.append(c);\n+    }\n+\n+    if (setOpen \u003e 0) {\n+      error(\"Unclosed character class\", glob, len);\n+    }\n+    if (curlyOpen \u003e 0) {\n+      error(\"Unclosed group\", glob, len);\n+    }\n+    compiled \u003d Pattern.compile(regex.toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String glob) {\n    StringBuilder regex \u003d new StringBuilder();\n    int setOpen \u003d 0;\n    int curlyOpen \u003d 0;\n    int len \u003d glob.length();\n    hasWildcard \u003d false;\n\n    for (int i \u003d 0; i \u003c len; i++) {\n      char c \u003d glob.charAt(i);\n\n      switch (c) {\n        case BACKSLASH:\n          if (++i \u003e\u003d len) {\n            error(\"Missing escaped character\", glob, i);\n          }\n          regex.append(c).append(glob.charAt(i));\n          continue;\n        case \u0027.\u0027:\n        case \u0027$\u0027:\n        case \u0027(\u0027:\n        case \u0027)\u0027:\n        case \u0027|\u0027:\n        case \u0027+\u0027:\n          // escape regex special chars that are not glob special chars\n          regex.append(BACKSLASH);\n          break;\n        case \u0027*\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          break;\n        case \u0027?\u0027:\n          regex.append(\u0027.\u0027);\n          hasWildcard \u003d true;\n          continue;\n        case \u0027{\u0027: // start of a group\n          regex.append(\"(?:\"); // non-capturing\n          curlyOpen++;\n          hasWildcard \u003d true;\n          continue;\n        case \u0027,\u0027:\n          regex.append(curlyOpen \u003e 0 ? \u0027|\u0027 : c);\n          continue;\n        case \u0027}\u0027:\n          if (curlyOpen \u003e 0) {\n            // end of a group\n            curlyOpen--;\n            regex.append(\")\");\n            continue;\n          }\n          break;\n        case \u0027[\u0027:\n          if (setOpen \u003e 0) {\n            error(\"Unclosed character class\", glob, i);\n          }\n          setOpen++;\n          hasWildcard \u003d true;\n          break;\n        case \u0027^\u0027: // ^ inside [...] can be unescaped\n          if (setOpen \u003d\u003d 0) {\n            regex.append(BACKSLASH);\n          }\n          break;\n        case \u0027!\u0027: // [! needs to be translated to [^\n          regex.append(setOpen \u003e 0 \u0026\u0026 \u0027[\u0027 \u003d\u003d glob.charAt(i - 1) ? \u0027^\u0027 : \u0027!\u0027);\n          continue;\n        case \u0027]\u0027:\n          // Many set errors like [][] could not be easily detected here,\n          // as []], []-] and [-] are all valid POSIX glob and java regex.\n          // We\u0027ll just let the regex compiler do the real work.\n          setOpen \u003d 0;\n          break;\n        default:\n      }\n      regex.append(c);\n    }\n\n    if (setOpen \u003e 0) {\n      error(\"Unclosed character class\", glob, len);\n    }\n    if (curlyOpen \u003e 0) {\n      error(\"Unclosed group\", glob, len);\n    }\n    compiled \u003d Pattern.compile(regex.toString());\n  }",
      "path": "src/java/org/apache/hadoop/fs/GlobPattern.java"
    }
  }
}