{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "listLocatedStatus",
  "functionId": "listLocatedStatus___f-Path(modifiers-final)__filter-PathFilter(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 4282,
  "functionEndLine": 4314,
  "numCommitsSeen": 141,
  "timeTaken": 7230,
  "changeHistory": [
    "7b2d84d19ce26a030da3a5dd674f763c95b310d9",
    "ea25f4de236611d388e14a710ebe5d6872c421b6",
    "511df1e837b19ccb9271520589452d82d50ac69d",
    "34747c373f40a33d36a2e21ecb33fa791ccd939f",
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3",
    "a0c71dcc33ca7c5539d0ab61c4a276c4f39e5744",
    "ef450df443f1dea1c52082cf281f25db7141972f",
    "621b43e254afaff708cd6fc4698b29628f6abc33",
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c"
  ],
  "changeHistoryShort": {
    "7b2d84d19ce26a030da3a5dd674f763c95b310d9": "Ybodychange",
    "ea25f4de236611d388e14a710ebe5d6872c421b6": "Ybodychange",
    "511df1e837b19ccb9271520589452d82d50ac69d": "Ybodychange",
    "34747c373f40a33d36a2e21ecb33fa791ccd939f": "Ybodychange",
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3": "Ybodychange",
    "a0c71dcc33ca7c5539d0ab61c4a276c4f39e5744": "Ybodychange",
    "ef450df443f1dea1c52082cf281f25db7141972f": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Ybodychange",
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b2d84d19ce26a030da3a5dd674f763c95b310d9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16465 listLocatedStatus() optimisation (#1943)\n\n\r\nContributed by Mukund Thakur\r\n\r\nOptimize S3AFileSystem.listLocatedStatus() to perform list\r\noperations directly and then fallback to head checks for files",
      "commitDate": "14/04/20 9:19 AM",
      "commitName": "7b2d84d19ce26a030da3a5dd674f763c95b310d9",
      "commitAuthor": "Mukund Thakur",
      "commitDateOld": "26/03/20 11:59 AM",
      "commitNameOld": "eaaaba12b142cfb8b392fb7a02dada0f5bcdedcc",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 18.89,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,33 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n     entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n     RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n         once(\"listLocatedStatus\", path.toString(),\n           () -\u003e {\n-            // lookup dir triggers existence check\n-            final S3AFileStatus fileStatus \u003d\n-                (S3AFileStatus) getFileStatus(path);\n-            if (fileStatus.isFile()) {\n-              // simple case: File\n-              LOG.debug(\"Path is a file\");\n-              return new Listing.SingleStatusRemoteIterator(\n-                  filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n-            } else {\n-              // directory: trigger a lookup\n-              final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n-              final Listing.FileStatusAcceptor acceptor \u003d\n-                  new Listing.AcceptAllButSelfAndS3nDirs(path);\n-              boolean allowAuthoritative \u003d allowAuthoritative(f);\n-              DirListingMetadata meta \u003d\n-                  S3Guard.listChildrenWithTtl(metadataStore, path,\n-                      ttlTimeProvider, allowAuthoritative);\n-              final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n-                  listing.createProvidedFileStatusIterator(\n-                      S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n-              return (allowAuthoritative \u0026\u0026 meta !\u003d null\n-                  \u0026\u0026 meta.isAuthoritative())\n-                  ? listing.createLocatedFileStatusIterator(\n-                  cachedFileStatusIterator)\n-                  : listing.createLocatedFileStatusIterator(\n-                      listing.createFileStatusListingIterator(path,\n-                          createListObjectsRequest(key, \"/\"),\n-                          filter,\n-                          acceptor,\n-                          cachedFileStatusIterator));\n+            // Assuming the path to be a directory,\n+            // trigger a list call directly.\n+            final RemoteIterator\u003cS3ALocatedFileStatus\u003e\n+                    locatedFileStatusIteratorForDir \u003d\n+                    getLocatedFileStatusIteratorForDir(path, filter);\n+\n+            // If no listing is present then path might be a file.\n+            if (!locatedFileStatusIteratorForDir.hasNext()) {\n+              final S3AFileStatus fileStatus \u003d\n+                      (S3AFileStatus) getFileStatus(path);\n+              if (fileStatus.isFile()) {\n+                // simple case: File\n+                LOG.debug(\"Path is a file\");\n+                return new Listing.SingleStatusRemoteIterator(\n+                        filter.accept(path)\n+                                ? toLocatedFileStatus(fileStatus)\n+                                : null);\n+              }\n             }\n+            // Either empty or non-empty directory.\n+            return locatedFileStatusIteratorForDir;\n           });\n     return toLocatedFileStatusIterator(iterator);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n        once(\"listLocatedStatus\", path.toString(),\n          () -\u003e {\n            // Assuming the path to be a directory,\n            // trigger a list call directly.\n            final RemoteIterator\u003cS3ALocatedFileStatus\u003e\n                    locatedFileStatusIteratorForDir \u003d\n                    getLocatedFileStatusIteratorForDir(path, filter);\n\n            // If no listing is present then path might be a file.\n            if (!locatedFileStatusIteratorForDir.hasNext()) {\n              final S3AFileStatus fileStatus \u003d\n                      (S3AFileStatus) getFileStatus(path);\n              if (fileStatus.isFile()) {\n                // simple case: File\n                LOG.debug(\"Path is a file\");\n                return new Listing.SingleStatusRemoteIterator(\n                        filter.accept(path)\n                                ? toLocatedFileStatus(fileStatus)\n                                : null);\n              }\n            }\n            // Either empty or non-empty directory.\n            return locatedFileStatusIteratorForDir;\n          });\n    return toLocatedFileStatusIterator(iterator);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "ea25f4de236611d388e14a710ebe5d6872c421b6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16709. S3Guard: Make authoritative mode exclusive for metadata - don\u0027t check for expiry for authoritative paths (#1721). Contributed by Gabor Bota.\n\n",
      "commitDate": "26/11/19 7:36 AM",
      "commitName": "ea25f4de236611d388e14a710ebe5d6872c421b6",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "12/11/19 10:17 AM",
      "commitNameOld": "990063d2af0a37e9474949f33128805e34c3f016",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 13.89,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n     entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n     RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n         once(\"listLocatedStatus\", path.toString(),\n           () -\u003e {\n             // lookup dir triggers existence check\n             final S3AFileStatus fileStatus \u003d\n                 (S3AFileStatus) getFileStatus(path);\n             if (fileStatus.isFile()) {\n               // simple case: File\n               LOG.debug(\"Path is a file\");\n               return new Listing.SingleStatusRemoteIterator(\n                   filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n             } else {\n               // directory: trigger a lookup\n               final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n               final Listing.FileStatusAcceptor acceptor \u003d\n                   new Listing.AcceptAllButSelfAndS3nDirs(path);\n+              boolean allowAuthoritative \u003d allowAuthoritative(f);\n               DirListingMetadata meta \u003d\n                   S3Guard.listChildrenWithTtl(metadataStore, path,\n-                      ttlTimeProvider);\n+                      ttlTimeProvider, allowAuthoritative);\n               final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n                   listing.createProvidedFileStatusIterator(\n                       S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n-              boolean allowAuthoritative \u003d allowAuthoritative(f);\n               return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                   \u0026\u0026 meta.isAuthoritative())\n                   ? listing.createLocatedFileStatusIterator(\n                   cachedFileStatusIterator)\n                   : listing.createLocatedFileStatusIterator(\n                       listing.createFileStatusListingIterator(path,\n                           createListObjectsRequest(key, \"/\"),\n                           filter,\n                           acceptor,\n                           cachedFileStatusIterator));\n             }\n           });\n     return toLocatedFileStatusIterator(iterator);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n        once(\"listLocatedStatus\", path.toString(),\n          () -\u003e {\n            // lookup dir triggers existence check\n            final S3AFileStatus fileStatus \u003d\n                (S3AFileStatus) getFileStatus(path);\n            if (fileStatus.isFile()) {\n              // simple case: File\n              LOG.debug(\"Path is a file\");\n              return new Listing.SingleStatusRemoteIterator(\n                  filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n            } else {\n              // directory: trigger a lookup\n              final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n              final Listing.FileStatusAcceptor acceptor \u003d\n                  new Listing.AcceptAllButSelfAndS3nDirs(path);\n              boolean allowAuthoritative \u003d allowAuthoritative(f);\n              DirListingMetadata meta \u003d\n                  S3Guard.listChildrenWithTtl(metadataStore, path,\n                      ttlTimeProvider, allowAuthoritative);\n              final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n                  listing.createProvidedFileStatusIterator(\n                      S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n              return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                  \u0026\u0026 meta.isAuthoritative())\n                  ? listing.createLocatedFileStatusIterator(\n                  cachedFileStatusIterator)\n                  : listing.createLocatedFileStatusIterator(\n                      listing.createFileStatusListingIterator(path,\n                          createListObjectsRequest(key, \"/\"),\n                          filter,\n                          acceptor,\n                          cachedFileStatusIterator));\n            }\n          });\n    return toLocatedFileStatusIterator(iterator);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "511df1e837b19ccb9271520589452d82d50ac69d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions\n\nContributed by Steve Loughran.\n\nThis overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.\nIt also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.\n\nFor path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.\n\nChange-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e\n",
      "commitDate": "05/09/19 6:25 AM",
      "commitName": "511df1e837b19ccb9271520589452d82d50ac69d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "23/07/19 6:52 AM",
      "commitNameOld": "4317d332321778269a583e2223d433107fab82eb",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 43.98,
      "commitsBetweenForRepo": 415,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n     entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n     RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n         once(\"listLocatedStatus\", path.toString(),\n           () -\u003e {\n             // lookup dir triggers existence check\n             final S3AFileStatus fileStatus \u003d\n                 (S3AFileStatus) getFileStatus(path);\n             if (fileStatus.isFile()) {\n               // simple case: File\n               LOG.debug(\"Path is a file\");\n               return new Listing.SingleStatusRemoteIterator(\n                   filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n             } else {\n               // directory: trigger a lookup\n               final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n               final Listing.FileStatusAcceptor acceptor \u003d\n                   new Listing.AcceptAllButSelfAndS3nDirs(path);\n               DirListingMetadata meta \u003d\n                   S3Guard.listChildrenWithTtl(metadataStore, path,\n                       ttlTimeProvider);\n               final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n                   listing.createProvidedFileStatusIterator(\n                       S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n-              boolean allowAuthoritative \u003d S3Guard.allowAuthoritative(f, this,\n-                  allowAuthoritativeMetadataStore, allowAuthoritativePaths);\n+              boolean allowAuthoritative \u003d allowAuthoritative(f);\n               return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                   \u0026\u0026 meta.isAuthoritative())\n                   ? listing.createLocatedFileStatusIterator(\n                   cachedFileStatusIterator)\n                   : listing.createLocatedFileStatusIterator(\n                       listing.createFileStatusListingIterator(path,\n                           createListObjectsRequest(key, \"/\"),\n                           filter,\n                           acceptor,\n                           cachedFileStatusIterator));\n             }\n           });\n     return toLocatedFileStatusIterator(iterator);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n        once(\"listLocatedStatus\", path.toString(),\n          () -\u003e {\n            // lookup dir triggers existence check\n            final S3AFileStatus fileStatus \u003d\n                (S3AFileStatus) getFileStatus(path);\n            if (fileStatus.isFile()) {\n              // simple case: File\n              LOG.debug(\"Path is a file\");\n              return new Listing.SingleStatusRemoteIterator(\n                  filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n            } else {\n              // directory: trigger a lookup\n              final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n              final Listing.FileStatusAcceptor acceptor \u003d\n                  new Listing.AcceptAllButSelfAndS3nDirs(path);\n              DirListingMetadata meta \u003d\n                  S3Guard.listChildrenWithTtl(metadataStore, path,\n                      ttlTimeProvider);\n              final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n                  listing.createProvidedFileStatusIterator(\n                      S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n              boolean allowAuthoritative \u003d allowAuthoritative(f);\n              return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                  \u0026\u0026 meta.isAuthoritative())\n                  ? listing.createLocatedFileStatusIterator(\n                  cachedFileStatusIterator)\n                  : listing.createLocatedFileStatusIterator(\n                      listing.createFileStatusListingIterator(path,\n                          createListObjectsRequest(key, \"/\"),\n                          filter,\n                          acceptor,\n                          cachedFileStatusIterator));\n            }\n          });\n    return toLocatedFileStatusIterator(iterator);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "34747c373f40a33d36a2e21ecb33fa791ccd939f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16396. Allow authoritative mode on a subdirectory. (#1043)\n\n",
      "commitDate": "03/07/19 11:04 AM",
      "commitName": "34747c373f40a33d36a2e21ecb33fa791ccd939f",
      "commitAuthor": "Sean Mackrory",
      "commitDateOld": "20/06/19 1:56 AM",
      "commitNameOld": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 13.38,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n     entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n     RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n         once(\"listLocatedStatus\", path.toString(),\n           () -\u003e {\n             // lookup dir triggers existence check\n             final S3AFileStatus fileStatus \u003d\n                 (S3AFileStatus) getFileStatus(path);\n             if (fileStatus.isFile()) {\n               // simple case: File\n               LOG.debug(\"Path is a file\");\n               return new Listing.SingleStatusRemoteIterator(\n                   filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n             } else {\n               // directory: trigger a lookup\n               final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n               final Listing.FileStatusAcceptor acceptor \u003d\n                   new Listing.AcceptAllButSelfAndS3nDirs(path);\n               DirListingMetadata meta \u003d\n                   S3Guard.listChildrenWithTtl(metadataStore, path,\n                       ttlTimeProvider);\n               final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n                   listing.createProvidedFileStatusIterator(\n                       S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n+              boolean allowAuthoritative \u003d S3Guard.allowAuthoritative(f, this,\n+                  allowAuthoritativeMetadataStore, allowAuthoritativePaths);\n               return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                   \u0026\u0026 meta.isAuthoritative())\n                   ? listing.createLocatedFileStatusIterator(\n                   cachedFileStatusIterator)\n                   : listing.createLocatedFileStatusIterator(\n                       listing.createFileStatusListingIterator(path,\n                           createListObjectsRequest(key, \"/\"),\n                           filter,\n                           acceptor,\n                           cachedFileStatusIterator));\n             }\n           });\n     return toLocatedFileStatusIterator(iterator);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n        once(\"listLocatedStatus\", path.toString(),\n          () -\u003e {\n            // lookup dir triggers existence check\n            final S3AFileStatus fileStatus \u003d\n                (S3AFileStatus) getFileStatus(path);\n            if (fileStatus.isFile()) {\n              // simple case: File\n              LOG.debug(\"Path is a file\");\n              return new Listing.SingleStatusRemoteIterator(\n                  filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n            } else {\n              // directory: trigger a lookup\n              final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n              final Listing.FileStatusAcceptor acceptor \u003d\n                  new Listing.AcceptAllButSelfAndS3nDirs(path);\n              DirListingMetadata meta \u003d\n                  S3Guard.listChildrenWithTtl(metadataStore, path,\n                      ttlTimeProvider);\n              final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n                  listing.createProvidedFileStatusIterator(\n                      S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n              boolean allowAuthoritative \u003d S3Guard.allowAuthoritative(f, this,\n                  allowAuthoritativeMetadataStore, allowAuthoritativePaths);\n              return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                  \u0026\u0026 meta.isAuthoritative())\n                  ? listing.createLocatedFileStatusIterator(\n                  cachedFileStatusIterator)\n                  : listing.createLocatedFileStatusIterator(\n                      listing.createFileStatusListingIterator(path,\n                          createListObjectsRequest(key, \"/\"),\n                          filter,\n                          acceptor,\n                          cachedFileStatusIterator));\n            }\n          });\n    return toLocatedFileStatusIterator(iterator);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "30/04/19 3:53 AM",
      "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 19.44,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n     entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n-    return once(\"listLocatedStatus\", path.toString(),\n-        () -\u003e {\n-          // lookup dir triggers existence check\n-          final FileStatus fileStatus \u003d getFileStatus(path);\n-          if (fileStatus.isFile()) {\n-            // simple case: File\n-            LOG.debug(\"Path is a file\");\n-            return new Listing.SingleStatusRemoteIterator(\n-                filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n-          } else {\n-            // directory: trigger a lookup\n-            final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n-            final Listing.FileStatusAcceptor acceptor \u003d\n-                new Listing.AcceptAllButSelfAndS3nDirs(path);\n-            DirListingMetadata meta \u003d\n-                S3Guard.listChildrenWithTtl(metadataStore, path,\n-                    ttlTimeProvider);\n-            final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n-                listing.createProvidedFileStatusIterator(\n-                    S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n-            return (allowAuthoritative \u0026\u0026 meta !\u003d null\n-                \u0026\u0026 meta.isAuthoritative())\n-                ? listing.createLocatedFileStatusIterator(\n-                cachedFileStatusIterator)\n-                : listing.createLocatedFileStatusIterator(\n-                    listing.createFileStatusListingIterator(path,\n-                        createListObjectsRequest(key, \"/\"),\n-                        filter,\n-                        acceptor,\n-                        cachedFileStatusIterator));\n-          }\n-        });\n+    RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n+        once(\"listLocatedStatus\", path.toString(),\n+          () -\u003e {\n+            // lookup dir triggers existence check\n+            final S3AFileStatus fileStatus \u003d\n+                (S3AFileStatus) getFileStatus(path);\n+            if (fileStatus.isFile()) {\n+              // simple case: File\n+              LOG.debug(\"Path is a file\");\n+              return new Listing.SingleStatusRemoteIterator(\n+                  filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n+            } else {\n+              // directory: trigger a lookup\n+              final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n+              final Listing.FileStatusAcceptor acceptor \u003d\n+                  new Listing.AcceptAllButSelfAndS3nDirs(path);\n+              DirListingMetadata meta \u003d\n+                  S3Guard.listChildrenWithTtl(metadataStore, path,\n+                      ttlTimeProvider);\n+              final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n+                  listing.createProvidedFileStatusIterator(\n+                      S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n+              return (allowAuthoritative \u0026\u0026 meta !\u003d null\n+                  \u0026\u0026 meta.isAuthoritative())\n+                  ? listing.createLocatedFileStatusIterator(\n+                  cachedFileStatusIterator)\n+                  : listing.createLocatedFileStatusIterator(\n+                      listing.createFileStatusListingIterator(path,\n+                          createListObjectsRequest(key, \"/\"),\n+                          filter,\n+                          acceptor,\n+                          cachedFileStatusIterator));\n+            }\n+          });\n+    return toLocatedFileStatusIterator(iterator);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator \u003d\n        once(\"listLocatedStatus\", path.toString(),\n          () -\u003e {\n            // lookup dir triggers existence check\n            final S3AFileStatus fileStatus \u003d\n                (S3AFileStatus) getFileStatus(path);\n            if (fileStatus.isFile()) {\n              // simple case: File\n              LOG.debug(\"Path is a file\");\n              return new Listing.SingleStatusRemoteIterator(\n                  filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n            } else {\n              // directory: trigger a lookup\n              final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n              final Listing.FileStatusAcceptor acceptor \u003d\n                  new Listing.AcceptAllButSelfAndS3nDirs(path);\n              DirListingMetadata meta \u003d\n                  S3Guard.listChildrenWithTtl(metadataStore, path,\n                      ttlTimeProvider);\n              final RemoteIterator\u003cS3AFileStatus\u003e cachedFileStatusIterator \u003d\n                  listing.createProvidedFileStatusIterator(\n                      S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n              return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                  \u0026\u0026 meta.isAuthoritative())\n                  ? listing.createLocatedFileStatusIterator(\n                  cachedFileStatusIterator)\n                  : listing.createLocatedFileStatusIterator(\n                      listing.createFileStatusListingIterator(path,\n                          createListObjectsRequest(key, \"/\"),\n                          filter,\n                          acceptor,\n                          cachedFileStatusIterator));\n            }\n          });\n    return toLocatedFileStatusIterator(iterator);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15621 S3Guard: Implement time-based (TTL) expiry for Authoritative Directory Listing. Contributed by Gabor Bota\n",
      "commitDate": "02/10/18 9:22 PM",
      "commitName": "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "12/09/18 9:04 PM",
      "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 20.01,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n     entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n     return once(\"listLocatedStatus\", path.toString(),\n         () -\u003e {\n           // lookup dir triggers existence check\n           final FileStatus fileStatus \u003d getFileStatus(path);\n           if (fileStatus.isFile()) {\n             // simple case: File\n             LOG.debug(\"Path is a file\");\n             return new Listing.SingleStatusRemoteIterator(\n                 filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n           } else {\n             // directory: trigger a lookup\n             final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n             final Listing.FileStatusAcceptor acceptor \u003d\n                 new Listing.AcceptAllButSelfAndS3nDirs(path);\n-            DirListingMetadata meta \u003d metadataStore.listChildren(path);\n+            DirListingMetadata meta \u003d\n+                S3Guard.listChildrenWithTtl(metadataStore, path,\n+                    ttlTimeProvider);\n             final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n                 listing.createProvidedFileStatusIterator(\n                     S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n             return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                 \u0026\u0026 meta.isAuthoritative())\n                 ? listing.createLocatedFileStatusIterator(\n                 cachedFileStatusIterator)\n                 : listing.createLocatedFileStatusIterator(\n                     listing.createFileStatusListingIterator(path,\n                         createListObjectsRequest(key, \"/\"),\n                         filter,\n                         acceptor,\n                         cachedFileStatusIterator));\n           }\n         });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    return once(\"listLocatedStatus\", path.toString(),\n        () -\u003e {\n          // lookup dir triggers existence check\n          final FileStatus fileStatus \u003d getFileStatus(path);\n          if (fileStatus.isFile()) {\n            // simple case: File\n            LOG.debug(\"Path is a file\");\n            return new Listing.SingleStatusRemoteIterator(\n                filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n          } else {\n            // directory: trigger a lookup\n            final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n            final Listing.FileStatusAcceptor acceptor \u003d\n                new Listing.AcceptAllButSelfAndS3nDirs(path);\n            DirListingMetadata meta \u003d\n                S3Guard.listChildrenWithTtl(metadataStore, path,\n                    ttlTimeProvider);\n            final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n                listing.createProvidedFileStatusIterator(\n                    S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n            return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                \u0026\u0026 meta.isAuthoritative())\n                ? listing.createLocatedFileStatusIterator(\n                cachedFileStatusIterator)\n                : listing.createLocatedFileStatusIterator(\n                    listing.createFileStatusListingIterator(path,\n                        createListObjectsRequest(key, \"/\"),\n                        filter,\n                        acceptor,\n                        cachedFileStatusIterator));\n          }\n        });\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "a0c71dcc33ca7c5539d0ab61c4a276c4f39e5744": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15079. ITestS3AFileOperationCost#testFakeDirectoryDeletion failing\nafter OutputCommitter patch.\nContributed by Steve Loughran\n",
      "commitDate": "15/01/18 3:33 AM",
      "commitName": "a0c71dcc33ca7c5539d0ab61c4a276c4f39e5744",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "09/01/18 10:46 AM",
      "commitNameOld": "b62a5ece95a6b5bbb17f273debd55bcbf0c5f28c",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n     entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n-    try {\n-      // lookup dir triggers existence check\n-      final FileStatus fileStatus \u003d getFileStatus(path);\n-      if (fileStatus.isFile()) {\n-        // simple case: File\n-        LOG.debug(\"Path is a file\");\n-        return new Listing.SingleStatusRemoteIterator(\n-            filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n-      } else {\n-        // directory: trigger a lookup\n-        final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n-        final Listing.FileStatusAcceptor acceptor \u003d\n-            new Listing.AcceptAllButSelfAndS3nDirs(path);\n-        DirListingMetadata meta \u003d metadataStore.listChildren(path);\n-        final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n-            listing.createProvidedFileStatusIterator(\n-                S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n-        return (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative())\n-            ? listing.createLocatedFileStatusIterator(cachedFileStatusIterator)\n-            : listing.createLocatedFileStatusIterator(\n-                listing.createFileStatusListingIterator(path,\n-                    createListObjectsRequest(key, \"/\"),\n-                    filter,\n-                    acceptor,\n-                    cachedFileStatusIterator));\n-      }\n-    } catch (AmazonClientException e) {\n-      throw translateException(\"listLocatedStatus\", path, e);\n-    }\n+    return once(\"listLocatedStatus\", path.toString(),\n+        () -\u003e {\n+          // lookup dir triggers existence check\n+          final FileStatus fileStatus \u003d getFileStatus(path);\n+          if (fileStatus.isFile()) {\n+            // simple case: File\n+            LOG.debug(\"Path is a file\");\n+            return new Listing.SingleStatusRemoteIterator(\n+                filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n+          } else {\n+            // directory: trigger a lookup\n+            final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n+            final Listing.FileStatusAcceptor acceptor \u003d\n+                new Listing.AcceptAllButSelfAndS3nDirs(path);\n+            DirListingMetadata meta \u003d metadataStore.listChildren(path);\n+            final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n+                listing.createProvidedFileStatusIterator(\n+                    S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n+            return (allowAuthoritative \u0026\u0026 meta !\u003d null\n+                \u0026\u0026 meta.isAuthoritative())\n+                ? listing.createLocatedFileStatusIterator(\n+                cachedFileStatusIterator)\n+                : listing.createLocatedFileStatusIterator(\n+                    listing.createFileStatusListingIterator(path,\n+                        createListObjectsRequest(key, \"/\"),\n+                        filter,\n+                        acceptor,\n+                        cachedFileStatusIterator));\n+          }\n+        });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    return once(\"listLocatedStatus\", path.toString(),\n        () -\u003e {\n          // lookup dir triggers existence check\n          final FileStatus fileStatus \u003d getFileStatus(path);\n          if (fileStatus.isFile()) {\n            // simple case: File\n            LOG.debug(\"Path is a file\");\n            return new Listing.SingleStatusRemoteIterator(\n                filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n          } else {\n            // directory: trigger a lookup\n            final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n            final Listing.FileStatusAcceptor acceptor \u003d\n                new Listing.AcceptAllButSelfAndS3nDirs(path);\n            DirListingMetadata meta \u003d metadataStore.listChildren(path);\n            final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n                listing.createProvidedFileStatusIterator(\n                    S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n            return (allowAuthoritative \u0026\u0026 meta !\u003d null\n                \u0026\u0026 meta.isAuthoritative())\n                ? listing.createLocatedFileStatusIterator(\n                cachedFileStatusIterator)\n                : listing.createLocatedFileStatusIterator(\n                    listing.createFileStatusListingIterator(path,\n                        createListObjectsRequest(key, \"/\"),\n                        filter,\n                        acceptor,\n                        cachedFileStatusIterator));\n          }\n        });\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "ef450df443f1dea1c52082cf281f25db7141972f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15113. NPE in S3A getFileStatus: null instrumentation on using closed instance.\nContributed by Steve Loughran.\n",
      "commitDate": "21/12/17 6:15 AM",
      "commitName": "ef450df443f1dea1c52082cf281f25db7141972f",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/12/17 1:19 PM",
      "commitNameOld": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 2.71,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n-    incrementStatistic(INVOCATION_LIST_LOCATED_STATUS);\n+    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n     try {\n       // lookup dir triggers existence check\n       final FileStatus fileStatus \u003d getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n       } else {\n         // directory: trigger a lookup\n         final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         final Listing.FileStatusAcceptor acceptor \u003d\n             new Listing.AcceptAllButSelfAndS3nDirs(path);\n         DirListingMetadata meta \u003d metadataStore.listChildren(path);\n         final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n             listing.createProvidedFileStatusIterator(\n                 S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n         return (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative())\n             ? listing.createLocatedFileStatusIterator(cachedFileStatusIterator)\n             : listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, \"/\"),\n                     filter,\n                     acceptor,\n                     cachedFileStatusIterator));\n       }\n     } catch (AmazonClientException e) {\n       throw translateException(\"listLocatedStatus\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    entryPoint(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    try {\n      // lookup dir triggers existence check\n      final FileStatus fileStatus \u003d getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n      } else {\n        // directory: trigger a lookup\n        final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        final Listing.FileStatusAcceptor acceptor \u003d\n            new Listing.AcceptAllButSelfAndS3nDirs(path);\n        DirListingMetadata meta \u003d metadataStore.listChildren(path);\n        final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n            listing.createProvidedFileStatusIterator(\n                S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n        return (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative())\n            ? listing.createLocatedFileStatusIterator(cachedFileStatusIterator)\n            : listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, \"/\"),\n                    filter,\n                    acceptor,\n                    cachedFileStatusIterator));\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"listLocatedStatus\", path, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/06/17 11:26 AM",
      "commitNameOld": "6aeda55bb8f741d9dafd41f6dfbf1a88acdd4003",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 87.78,
      "commitsBetweenForRepo": 591,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,36 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n       final PathFilter filter)\n       throws FileNotFoundException, IOException {\n     incrementStatistic(INVOCATION_LIST_LOCATED_STATUS);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n     try {\n       // lookup dir triggers existence check\n       final FileStatus fileStatus \u003d getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n       } else {\n         // directory: trigger a lookup\n-        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n-        return listing.createLocatedFileStatusIterator(\n-            listing.createFileStatusListingIterator(path,\n-                createListObjectsRequest(key, \"/\"),\n-                filter,\n-                new Listing.AcceptAllButSelfAndS3nDirs(path)));\n+        final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n+        final Listing.FileStatusAcceptor acceptor \u003d\n+            new Listing.AcceptAllButSelfAndS3nDirs(path);\n+        DirListingMetadata meta \u003d metadataStore.listChildren(path);\n+        final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n+            listing.createProvidedFileStatusIterator(\n+                S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n+        return (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative())\n+            ? listing.createLocatedFileStatusIterator(cachedFileStatusIterator)\n+            : listing.createLocatedFileStatusIterator(\n+                listing.createFileStatusListingIterator(path,\n+                    createListObjectsRequest(key, \"/\"),\n+                    filter,\n+                    acceptor,\n+                    cachedFileStatusIterator));\n       }\n     } catch (AmazonClientException e) {\n       throw translateException(\"listLocatedStatus\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    incrementStatistic(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    try {\n      // lookup dir triggers existence check\n      final FileStatus fileStatus \u003d getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n      } else {\n        // directory: trigger a lookup\n        final String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        final Listing.FileStatusAcceptor acceptor \u003d\n            new Listing.AcceptAllButSelfAndS3nDirs(path);\n        DirListingMetadata meta \u003d metadataStore.listChildren(path);\n        final RemoteIterator\u003cFileStatus\u003e cachedFileStatusIterator \u003d\n            listing.createProvidedFileStatusIterator(\n                S3Guard.dirMetaToStatuses(meta), filter, acceptor);\n        return (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative())\n            ? listing.createLocatedFileStatusIterator(cachedFileStatusIterator)\n            : listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, \"/\"),\n                    filter,\n                    acceptor,\n                    cachedFileStatusIterator));\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"listLocatedStatus\", path, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13208. S3A listFiles(recursive\u003dtrue) to do a bulk listObjects instead of walking the pseudo-tree of directories. Contributed by Steve Loughran.\n",
      "commitDate": "17/08/16 2:54 PM",
      "commitName": "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,27 @@\n+  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n+      final PathFilter filter)\n+      throws FileNotFoundException, IOException {\n+    incrementStatistic(INVOCATION_LIST_LOCATED_STATUS);\n+    Path path \u003d qualify(f);\n+    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n+    try {\n+      // lookup dir triggers existence check\n+      final FileStatus fileStatus \u003d getFileStatus(path);\n+      if (fileStatus.isFile()) {\n+        // simple case: File\n+        LOG.debug(\"Path is a file\");\n+        return new Listing.SingleStatusRemoteIterator(\n+            filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n+      } else {\n+        // directory: trigger a lookup\n+        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n+        return listing.createLocatedFileStatusIterator(\n+            listing.createFileStatusListingIterator(path,\n+                createListObjectsRequest(key, \"/\"),\n+                filter,\n+                new Listing.AcceptAllButSelfAndS3nDirs(path)));\n+      }\n+    } catch (AmazonClientException e) {\n+      throw translateException(\"listLocatedStatus\", path, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listLocatedStatus(final Path f,\n      final PathFilter filter)\n      throws FileNotFoundException, IOException {\n    incrementStatistic(INVOCATION_LIST_LOCATED_STATUS);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listLocatedStatus({}, {}\", path, filter);\n    try {\n      // lookup dir triggers existence check\n      final FileStatus fileStatus \u003d getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            filter.accept(path) ? toLocatedFileStatus(fileStatus) : null);\n      } else {\n        // directory: trigger a lookup\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        return listing.createLocatedFileStatusIterator(\n            listing.createFileStatusListingIterator(path,\n                createListObjectsRequest(key, \"/\"),\n                filter,\n                new Listing.AcceptAllButSelfAndS3nDirs(path)));\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"listLocatedStatus\", path, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}