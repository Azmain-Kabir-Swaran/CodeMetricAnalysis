{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineStorageUtils.java",
  "functionName": "matchFilters",
  "functionId": "matchFilters___entity-TimelineEntity__filters-TimelineFilterList__entityFiltersType-TimelineEntityFiltersType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
  "functionStartLine": 313,
  "functionEndLine": 361,
  "numCommitsSeen": 17,
  "timeTaken": 1995,
  "changeHistory": [
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
    "b51d0fef56a59b15489f5b932025718b4e9613d2"
  ],
  "changeHistoryShort": {
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "b51d0fef56a59b15489f5b932025718b4e9613d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,49 @@\n-  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n-      Map\u003cString, ? extends Object\u003e filters) {\n-    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n-      Object value \u003d map.get(filter.getKey());\n-      if (value \u003d\u003d null) {\n-        return false;\n+  private static boolean matchFilters(TimelineEntity entity,\n+      TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)\n+      throws IOException {\n+    if (filters \u003d\u003d null || filters.getFilterList().isEmpty()) {\n+      return false;\n+    }\n+    TimelineFilterList.Operator operator \u003d filters.getOperator();\n+    for (TimelineFilter filter : filters.getFilterList()) {\n+      TimelineFilterType filterType \u003d filter.getFilterType();\n+      if (!entityFiltersType.isValidFilter(filterType)) {\n+        throw new IOException(\"Unsupported filter \" + filterType);\n       }\n-      if (!value.equals(filter.getValue())) {\n-        return false;\n+      boolean matched \u003d false;\n+      switch (filterType) {\n+      case LIST:\n+        matched \u003d matchFilters(entity, (TimelineFilterList)filter,\n+            entityFiltersType);\n+        break;\n+      case COMPARE:\n+        matched \u003d matchCompareFilter(entity, (TimelineCompareFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case EXISTS:\n+        matched \u003d matchExistsFilter(entity, (TimelineExistsFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case KEY_VALUE:\n+        matched \u003d matchKeyValueFilter(entity, (TimelineKeyValueFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case KEY_VALUES:\n+        matched \u003d matchKeyValuesFilter(entity, (TimelineKeyValuesFilter)filter,\n+            entityFiltersType);\n+        break;\n+      default:\n+        throw new IOException(\"Unsupported filter \" + filterType);\n+      }\n+      if (!matched) {\n+        if(operator \u003d\u003d TimelineFilterList.Operator.AND) {\n+          return false;\n+        }\n+      } else {\n+        if(operator \u003d\u003d TimelineFilterList.Operator.OR) {\n+          return true;\n+        }\n       }\n     }\n-    return true;\n+    return operator \u003d\u003d TimelineFilterList.Operator.AND;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean matchFilters(TimelineEntity entity,\n      TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)\n      throws IOException {\n    if (filters \u003d\u003d null || filters.getFilterList().isEmpty()) {\n      return false;\n    }\n    TimelineFilterList.Operator operator \u003d filters.getOperator();\n    for (TimelineFilter filter : filters.getFilterList()) {\n      TimelineFilterType filterType \u003d filter.getFilterType();\n      if (!entityFiltersType.isValidFilter(filterType)) {\n        throw new IOException(\"Unsupported filter \" + filterType);\n      }\n      boolean matched \u003d false;\n      switch (filterType) {\n      case LIST:\n        matched \u003d matchFilters(entity, (TimelineFilterList)filter,\n            entityFiltersType);\n        break;\n      case COMPARE:\n        matched \u003d matchCompareFilter(entity, (TimelineCompareFilter)filter,\n            entityFiltersType);\n        break;\n      case EXISTS:\n        matched \u003d matchExistsFilter(entity, (TimelineExistsFilter)filter,\n            entityFiltersType);\n        break;\n      case KEY_VALUE:\n        matched \u003d matchKeyValueFilter(entity, (TimelineKeyValueFilter)filter,\n            entityFiltersType);\n        break;\n      case KEY_VALUES:\n        matched \u003d matchKeyValuesFilter(entity, (TimelineKeyValuesFilter)filter,\n            entityFiltersType);\n        break;\n      default:\n        throw new IOException(\"Unsupported filter \" + filterType);\n      }\n      if (!matched) {\n        if(operator \u003d\u003d TimelineFilterList.Operator.AND) {\n          return false;\n        }\n      } else {\n        if(operator \u003d\u003d TimelineFilterList.Operator.OR) {\n          return true;\n        }\n      }\n    }\n    return operator \u003d\u003d TimelineFilterList.Operator.AND;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[map-Map\u003cString,? extends Object\u003e, filters-Map\u003cString,? extends Object\u003e]",
            "newValue": "[entity-TimelineEntity, filters-TimelineFilterList, entityFiltersType-TimelineEntityFiltersType]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,49 @@\n-  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n-      Map\u003cString, ? extends Object\u003e filters) {\n-    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n-      Object value \u003d map.get(filter.getKey());\n-      if (value \u003d\u003d null) {\n-        return false;\n+  private static boolean matchFilters(TimelineEntity entity,\n+      TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)\n+      throws IOException {\n+    if (filters \u003d\u003d null || filters.getFilterList().isEmpty()) {\n+      return false;\n+    }\n+    TimelineFilterList.Operator operator \u003d filters.getOperator();\n+    for (TimelineFilter filter : filters.getFilterList()) {\n+      TimelineFilterType filterType \u003d filter.getFilterType();\n+      if (!entityFiltersType.isValidFilter(filterType)) {\n+        throw new IOException(\"Unsupported filter \" + filterType);\n       }\n-      if (!value.equals(filter.getValue())) {\n-        return false;\n+      boolean matched \u003d false;\n+      switch (filterType) {\n+      case LIST:\n+        matched \u003d matchFilters(entity, (TimelineFilterList)filter,\n+            entityFiltersType);\n+        break;\n+      case COMPARE:\n+        matched \u003d matchCompareFilter(entity, (TimelineCompareFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case EXISTS:\n+        matched \u003d matchExistsFilter(entity, (TimelineExistsFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case KEY_VALUE:\n+        matched \u003d matchKeyValueFilter(entity, (TimelineKeyValueFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case KEY_VALUES:\n+        matched \u003d matchKeyValuesFilter(entity, (TimelineKeyValuesFilter)filter,\n+            entityFiltersType);\n+        break;\n+      default:\n+        throw new IOException(\"Unsupported filter \" + filterType);\n+      }\n+      if (!matched) {\n+        if(operator \u003d\u003d TimelineFilterList.Operator.AND) {\n+          return false;\n+        }\n+      } else {\n+        if(operator \u003d\u003d TimelineFilterList.Operator.OR) {\n+          return true;\n+        }\n       }\n     }\n-    return true;\n+    return operator \u003d\u003d TimelineFilterList.Operator.AND;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean matchFilters(TimelineEntity entity,\n      TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)\n      throws IOException {\n    if (filters \u003d\u003d null || filters.getFilterList().isEmpty()) {\n      return false;\n    }\n    TimelineFilterList.Operator operator \u003d filters.getOperator();\n    for (TimelineFilter filter : filters.getFilterList()) {\n      TimelineFilterType filterType \u003d filter.getFilterType();\n      if (!entityFiltersType.isValidFilter(filterType)) {\n        throw new IOException(\"Unsupported filter \" + filterType);\n      }\n      boolean matched \u003d false;\n      switch (filterType) {\n      case LIST:\n        matched \u003d matchFilters(entity, (TimelineFilterList)filter,\n            entityFiltersType);\n        break;\n      case COMPARE:\n        matched \u003d matchCompareFilter(entity, (TimelineCompareFilter)filter,\n            entityFiltersType);\n        break;\n      case EXISTS:\n        matched \u003d matchExistsFilter(entity, (TimelineExistsFilter)filter,\n            entityFiltersType);\n        break;\n      case KEY_VALUE:\n        matched \u003d matchKeyValueFilter(entity, (TimelineKeyValueFilter)filter,\n            entityFiltersType);\n        break;\n      case KEY_VALUES:\n        matched \u003d matchKeyValuesFilter(entity, (TimelineKeyValuesFilter)filter,\n            entityFiltersType);\n        break;\n      default:\n        throw new IOException(\"Unsupported filter \" + filterType);\n      }\n      if (!matched) {\n        if(operator \u003d\u003d TimelineFilterList.Operator.AND) {\n          return false;\n        }\n      } else {\n        if(operator \u003d\u003d TimelineFilterList.Operator.OR) {\n          return true;\n        }\n      }\n    }\n    return operator \u003d\u003d TimelineFilterList.Operator.AND;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,49 @@\n-  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n-      Map\u003cString, ? extends Object\u003e filters) {\n-    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n-      Object value \u003d map.get(filter.getKey());\n-      if (value \u003d\u003d null) {\n-        return false;\n+  private static boolean matchFilters(TimelineEntity entity,\n+      TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)\n+      throws IOException {\n+    if (filters \u003d\u003d null || filters.getFilterList().isEmpty()) {\n+      return false;\n+    }\n+    TimelineFilterList.Operator operator \u003d filters.getOperator();\n+    for (TimelineFilter filter : filters.getFilterList()) {\n+      TimelineFilterType filterType \u003d filter.getFilterType();\n+      if (!entityFiltersType.isValidFilter(filterType)) {\n+        throw new IOException(\"Unsupported filter \" + filterType);\n       }\n-      if (!value.equals(filter.getValue())) {\n-        return false;\n+      boolean matched \u003d false;\n+      switch (filterType) {\n+      case LIST:\n+        matched \u003d matchFilters(entity, (TimelineFilterList)filter,\n+            entityFiltersType);\n+        break;\n+      case COMPARE:\n+        matched \u003d matchCompareFilter(entity, (TimelineCompareFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case EXISTS:\n+        matched \u003d matchExistsFilter(entity, (TimelineExistsFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case KEY_VALUE:\n+        matched \u003d matchKeyValueFilter(entity, (TimelineKeyValueFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case KEY_VALUES:\n+        matched \u003d matchKeyValuesFilter(entity, (TimelineKeyValuesFilter)filter,\n+            entityFiltersType);\n+        break;\n+      default:\n+        throw new IOException(\"Unsupported filter \" + filterType);\n+      }\n+      if (!matched) {\n+        if(operator \u003d\u003d TimelineFilterList.Operator.AND) {\n+          return false;\n+        }\n+      } else {\n+        if(operator \u003d\u003d TimelineFilterList.Operator.OR) {\n+          return true;\n+        }\n       }\n     }\n-    return true;\n+    return operator \u003d\u003d TimelineFilterList.Operator.AND;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean matchFilters(TimelineEntity entity,\n      TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)\n      throws IOException {\n    if (filters \u003d\u003d null || filters.getFilterList().isEmpty()) {\n      return false;\n    }\n    TimelineFilterList.Operator operator \u003d filters.getOperator();\n    for (TimelineFilter filter : filters.getFilterList()) {\n      TimelineFilterType filterType \u003d filter.getFilterType();\n      if (!entityFiltersType.isValidFilter(filterType)) {\n        throw new IOException(\"Unsupported filter \" + filterType);\n      }\n      boolean matched \u003d false;\n      switch (filterType) {\n      case LIST:\n        matched \u003d matchFilters(entity, (TimelineFilterList)filter,\n            entityFiltersType);\n        break;\n      case COMPARE:\n        matched \u003d matchCompareFilter(entity, (TimelineCompareFilter)filter,\n            entityFiltersType);\n        break;\n      case EXISTS:\n        matched \u003d matchExistsFilter(entity, (TimelineExistsFilter)filter,\n            entityFiltersType);\n        break;\n      case KEY_VALUE:\n        matched \u003d matchKeyValueFilter(entity, (TimelineKeyValueFilter)filter,\n            entityFiltersType);\n        break;\n      case KEY_VALUES:\n        matched \u003d matchKeyValuesFilter(entity, (TimelineKeyValuesFilter)filter,\n            entityFiltersType);\n        break;\n      default:\n        throw new IOException(\"Unsupported filter \" + filterType);\n      }\n      if (!matched) {\n        if(operator \u003d\u003d TimelineFilterList.Operator.AND) {\n          return false;\n        }\n      } else {\n        if(operator \u003d\u003d TimelineFilterList.Operator.OR) {\n          return true;\n        }\n      }\n    }\n    return operator \u003d\u003d TimelineFilterList.Operator.AND;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,49 @@\n-  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n-      Map\u003cString, ? extends Object\u003e filters) {\n-    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n-      Object value \u003d map.get(filter.getKey());\n-      if (value \u003d\u003d null) {\n-        return false;\n+  private static boolean matchFilters(TimelineEntity entity,\n+      TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)\n+      throws IOException {\n+    if (filters \u003d\u003d null || filters.getFilterList().isEmpty()) {\n+      return false;\n+    }\n+    TimelineFilterList.Operator operator \u003d filters.getOperator();\n+    for (TimelineFilter filter : filters.getFilterList()) {\n+      TimelineFilterType filterType \u003d filter.getFilterType();\n+      if (!entityFiltersType.isValidFilter(filterType)) {\n+        throw new IOException(\"Unsupported filter \" + filterType);\n       }\n-      if (!value.equals(filter.getValue())) {\n-        return false;\n+      boolean matched \u003d false;\n+      switch (filterType) {\n+      case LIST:\n+        matched \u003d matchFilters(entity, (TimelineFilterList)filter,\n+            entityFiltersType);\n+        break;\n+      case COMPARE:\n+        matched \u003d matchCompareFilter(entity, (TimelineCompareFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case EXISTS:\n+        matched \u003d matchExistsFilter(entity, (TimelineExistsFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case KEY_VALUE:\n+        matched \u003d matchKeyValueFilter(entity, (TimelineKeyValueFilter)filter,\n+            entityFiltersType);\n+        break;\n+      case KEY_VALUES:\n+        matched \u003d matchKeyValuesFilter(entity, (TimelineKeyValuesFilter)filter,\n+            entityFiltersType);\n+        break;\n+      default:\n+        throw new IOException(\"Unsupported filter \" + filterType);\n+      }\n+      if (!matched) {\n+        if(operator \u003d\u003d TimelineFilterList.Operator.AND) {\n+          return false;\n+        }\n+      } else {\n+        if(operator \u003d\u003d TimelineFilterList.Operator.OR) {\n+          return true;\n+        }\n       }\n     }\n-    return true;\n+    return operator \u003d\u003d TimelineFilterList.Operator.AND;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean matchFilters(TimelineEntity entity,\n      TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)\n      throws IOException {\n    if (filters \u003d\u003d null || filters.getFilterList().isEmpty()) {\n      return false;\n    }\n    TimelineFilterList.Operator operator \u003d filters.getOperator();\n    for (TimelineFilter filter : filters.getFilterList()) {\n      TimelineFilterType filterType \u003d filter.getFilterType();\n      if (!entityFiltersType.isValidFilter(filterType)) {\n        throw new IOException(\"Unsupported filter \" + filterType);\n      }\n      boolean matched \u003d false;\n      switch (filterType) {\n      case LIST:\n        matched \u003d matchFilters(entity, (TimelineFilterList)filter,\n            entityFiltersType);\n        break;\n      case COMPARE:\n        matched \u003d matchCompareFilter(entity, (TimelineCompareFilter)filter,\n            entityFiltersType);\n        break;\n      case EXISTS:\n        matched \u003d matchExistsFilter(entity, (TimelineExistsFilter)filter,\n            entityFiltersType);\n        break;\n      case KEY_VALUE:\n        matched \u003d matchKeyValueFilter(entity, (TimelineKeyValueFilter)filter,\n            entityFiltersType);\n        break;\n      case KEY_VALUES:\n        matched \u003d matchKeyValuesFilter(entity, (TimelineKeyValuesFilter)filter,\n            entityFiltersType);\n        break;\n      default:\n        throw new IOException(\"Unsupported filter \" + filterType);\n      }\n      if (!matched) {\n        if(operator \u003d\u003d TimelineFilterList.Operator.AND) {\n          return false;\n        }\n      } else {\n        if(operator \u003d\u003d TimelineFilterList.Operator.OR) {\n          return true;\n        }\n      }\n    }\n    return operator \u003d\u003d TimelineFilterList.Operator.AND;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "b51d0fef56a59b15489f5b932025718b4e9613d2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4178. [storage implementation] app id as string in row keys can cause incorrect ordering (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "b51d0fef56a59b15489f5b932025718b4e9613d2",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,13 @@\n+  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n+      Map\u003cString, ? extends Object\u003e filters) {\n+    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n+      Object value \u003d map.get(filter.getKey());\n+      if (value \u003d\u003d null) {\n+        return false;\n+      }\n+      if (!value.equals(filter.getValue())) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n      Map\u003cString, ? extends Object\u003e filters) {\n    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n      Object value \u003d map.get(filter.getKey());\n      if (value \u003d\u003d null) {\n        return false;\n      }\n      if (!value.equals(filter.getValue())) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java"
    }
  }
}