{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsMemoryResourceHandlerImpl.java",
  "functionName": "updateContainer",
  "functionId": "updateContainer___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
  "functionStartLine": 108,
  "functionEndLine": 147,
  "numCommitsSeen": 11,
  "timeTaken": 1503,
  "changeHistory": [
    "6341c3a437489737a9c4bf0911b218b0023d8dd9"
  ],
  "changeHistoryShort": {
    "6341c3a437489737a9c4bf0911b218b0023d8dd9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6341c3a437489737a9c4bf0911b218b0023d8dd9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7715. Support NM promotion/demotion of running containers. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "10/05/18 11:01 AM",
      "commitName": "6341c3a437489737a9c4bf0911b218b0023d8dd9",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,40 @@\n+  public List\u003cPrivilegedOperation\u003e updateContainer(Container container)\n+      throws ResourceHandlerException {\n+    String cgroupId \u003d container.getContainerId().toString();\n+    File cgroup \u003d new File(cGroupsHandler.getPathForCGroup(MEMORY, cgroupId));\n+    if (cgroup.exists()) {\n+      //memory is in MB\n+      long containerSoftLimit \u003d\n+          (long) (container.getResource().getMemorySize() * this.softLimit);\n+      long containerHardLimit \u003d container.getResource().getMemorySize();\n+      if (enforce) {\n+        try {\n+          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+              CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n+              String.valueOf(containerHardLimit) + \"M\");\n+          ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n+          if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n+              ExecutionType.OPPORTUNISTIC) {\n+            cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+                CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n+                String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\n+            cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+                CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n+                String.valueOf(OPPORTUNISTIC_SWAPPINESS));\n+          } else {\n+            cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+                CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n+                String.valueOf(containerSoftLimit) + \"M\");\n+            cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n+                CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n+                String.valueOf(swappiness));\n+          }\n+        } catch (ResourceHandlerException re) {\n+          cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n+          LOG.warn(\"Could not update cgroup for container\", re);\n+          throw re;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e updateContainer(Container container)\n      throws ResourceHandlerException {\n    String cgroupId \u003d container.getContainerId().toString();\n    File cgroup \u003d new File(cGroupsHandler.getPathForCGroup(MEMORY, cgroupId));\n    if (cgroup.exists()) {\n      //memory is in MB\n      long containerSoftLimit \u003d\n          (long) (container.getResource().getMemorySize() * this.softLimit);\n      long containerHardLimit \u003d container.getResource().getMemorySize();\n      if (enforce) {\n        try {\n          cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n              CGroupsHandler.CGROUP_PARAM_MEMORY_HARD_LIMIT_BYTES,\n              String.valueOf(containerHardLimit) + \"M\");\n          ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n          if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n              ExecutionType.OPPORTUNISTIC) {\n            cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n                CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n                String.valueOf(OPPORTUNISTIC_SOFT_LIMIT) + \"M\");\n            cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n                CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n                String.valueOf(OPPORTUNISTIC_SWAPPINESS));\n          } else {\n            cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n                CGroupsHandler.CGROUP_PARAM_MEMORY_SOFT_LIMIT_BYTES,\n                String.valueOf(containerSoftLimit) + \"M\");\n            cGroupsHandler.updateCGroupParam(MEMORY, cgroupId,\n                CGroupsHandler.CGROUP_PARAM_MEMORY_SWAPPINESS,\n                String.valueOf(swappiness));\n          }\n        } catch (ResourceHandlerException re) {\n          cGroupsHandler.deleteCGroup(MEMORY, cgroupId);\n          LOG.warn(\"Could not update cgroup for container\", re);\n          throw re;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java"
    }
  }
}