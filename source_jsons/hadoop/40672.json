{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationTagsManager.java",
  "functionName": "aggregateAllocationTags",
  "functionId": "aggregateAllocationTags___allocationTags-AllocationTags__mapping-Map__ApplicationId,TypeToCountedTags__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
  "functionStartLine": 306,
  "functionEndLine": 333,
  "numCommitsSeen": 21,
  "timeTaken": 3051,
  "changeHistory": [
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
    "a08921ca6cb1dad98935808c8f474b654f861263"
  ],
  "changeHistoryShort": {
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "a08921ca6cb1dad98935808c8f474b654f861263": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
      "commitDate": "04/04/18 10:51 AM",
      "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
      "commitAuthor": "Konstantinos Karanasos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
          "commitDate": "04/04/18 10:51 AM",
          "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "19/03/18 11:04 AM",
          "commitNameOld": "a08921ca6cb1dad98935808c8f474b654f861263",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.99,
          "commitsBetweenForRepo": 226,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,28 @@\n-  private TypeToCountedTags aggregateAllocationTags(Set\u003cApplicationId\u003e appIds,\n-      Map\u003cApplicationId, TypeToCountedTags\u003e mapping) {\n+  private TypeToCountedTags aggregateAllocationTags(\n+      AllocationTags allocationTags,\n+      Map\u003cApplicationId, TypeToCountedTags\u003e mapping)\n+      throws InvalidAllocationTagsQueryException {\n+    // Based on the namespace type of the given allocation tags\n+    TargetApplicationsNamespace namespace \u003d allocationTags.getNamespace();\n+    TargetApplications ta \u003d new TargetApplications(\n+        allocationTags.getCurrentApplicationId(), getApplicationIdToTags());\n+    namespace.evaluate(ta);\n+    Set\u003cApplicationId\u003e appIds \u003d namespace.getNamespaceScope();\n     TypeToCountedTags result \u003d new TypeToCountedTags();\n     if (appIds !\u003d null) {\n       if (appIds.size() \u003d\u003d 1) {\n         // If there is only one app, we simply return the mapping\n         // without any extra computation.\n         return mapping.get(appIds.iterator().next());\n       }\n \n       for (ApplicationId applicationId : appIds) {\n         TypeToCountedTags appIdTags \u003d mapping.get(applicationId);\n         if (appIdTags !\u003d null) {\n           // Make sure ATM state won\u0027t be changed.\n           result.absorb(appIdTags.immutableCopy());\n         }\n       }\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private TypeToCountedTags aggregateAllocationTags(\n      AllocationTags allocationTags,\n      Map\u003cApplicationId, TypeToCountedTags\u003e mapping)\n      throws InvalidAllocationTagsQueryException {\n    // Based on the namespace type of the given allocation tags\n    TargetApplicationsNamespace namespace \u003d allocationTags.getNamespace();\n    TargetApplications ta \u003d new TargetApplications(\n        allocationTags.getCurrentApplicationId(), getApplicationIdToTags());\n    namespace.evaluate(ta);\n    Set\u003cApplicationId\u003e appIds \u003d namespace.getNamespaceScope();\n    TypeToCountedTags result \u003d new TypeToCountedTags();\n    if (appIds !\u003d null) {\n      if (appIds.size() \u003d\u003d 1) {\n        // If there is only one app, we simply return the mapping\n        // without any extra computation.\n        return mapping.get(appIds.iterator().next());\n      }\n\n      for (ApplicationId applicationId : appIds) {\n        TypeToCountedTags appIdTags \u003d mapping.get(applicationId);\n        if (appIdTags !\u003d null) {\n          // Make sure ATM state won\u0027t be changed.\n          result.absorb(appIdTags.immutableCopy());\n        }\n      }\n    }\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
          "extendedDetails": {
            "oldValue": "[appIds-Set\u003cApplicationId\u003e, mapping-Map\u003cApplicationId,TypeToCountedTags\u003e]",
            "newValue": "[allocationTags-AllocationTags, mapping-Map\u003cApplicationId,TypeToCountedTags\u003e]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
          "commitDate": "04/04/18 10:51 AM",
          "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "19/03/18 11:04 AM",
          "commitNameOld": "a08921ca6cb1dad98935808c8f474b654f861263",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.99,
          "commitsBetweenForRepo": 226,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,28 @@\n-  private TypeToCountedTags aggregateAllocationTags(Set\u003cApplicationId\u003e appIds,\n-      Map\u003cApplicationId, TypeToCountedTags\u003e mapping) {\n+  private TypeToCountedTags aggregateAllocationTags(\n+      AllocationTags allocationTags,\n+      Map\u003cApplicationId, TypeToCountedTags\u003e mapping)\n+      throws InvalidAllocationTagsQueryException {\n+    // Based on the namespace type of the given allocation tags\n+    TargetApplicationsNamespace namespace \u003d allocationTags.getNamespace();\n+    TargetApplications ta \u003d new TargetApplications(\n+        allocationTags.getCurrentApplicationId(), getApplicationIdToTags());\n+    namespace.evaluate(ta);\n+    Set\u003cApplicationId\u003e appIds \u003d namespace.getNamespaceScope();\n     TypeToCountedTags result \u003d new TypeToCountedTags();\n     if (appIds !\u003d null) {\n       if (appIds.size() \u003d\u003d 1) {\n         // If there is only one app, we simply return the mapping\n         // without any extra computation.\n         return mapping.get(appIds.iterator().next());\n       }\n \n       for (ApplicationId applicationId : appIds) {\n         TypeToCountedTags appIdTags \u003d mapping.get(applicationId);\n         if (appIdTags !\u003d null) {\n           // Make sure ATM state won\u0027t be changed.\n           result.absorb(appIdTags.immutableCopy());\n         }\n       }\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private TypeToCountedTags aggregateAllocationTags(\n      AllocationTags allocationTags,\n      Map\u003cApplicationId, TypeToCountedTags\u003e mapping)\n      throws InvalidAllocationTagsQueryException {\n    // Based on the namespace type of the given allocation tags\n    TargetApplicationsNamespace namespace \u003d allocationTags.getNamespace();\n    TargetApplications ta \u003d new TargetApplications(\n        allocationTags.getCurrentApplicationId(), getApplicationIdToTags());\n    namespace.evaluate(ta);\n    Set\u003cApplicationId\u003e appIds \u003d namespace.getNamespaceScope();\n    TypeToCountedTags result \u003d new TypeToCountedTags();\n    if (appIds !\u003d null) {\n      if (appIds.size() \u003d\u003d 1) {\n        // If there is only one app, we simply return the mapping\n        // without any extra computation.\n        return mapping.get(appIds.iterator().next());\n      }\n\n      for (ApplicationId applicationId : appIds) {\n        TypeToCountedTags appIdTags \u003d mapping.get(applicationId);\n        if (appIdTags !\u003d null) {\n          // Make sure ATM state won\u0027t be changed.\n          result.absorb(appIdTags.immutableCopy());\n        }\n      }\n    }\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[InvalidAllocationTagsQueryException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
          "commitDate": "04/04/18 10:51 AM",
          "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "19/03/18 11:04 AM",
          "commitNameOld": "a08921ca6cb1dad98935808c8f474b654f861263",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.99,
          "commitsBetweenForRepo": 226,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,28 @@\n-  private TypeToCountedTags aggregateAllocationTags(Set\u003cApplicationId\u003e appIds,\n-      Map\u003cApplicationId, TypeToCountedTags\u003e mapping) {\n+  private TypeToCountedTags aggregateAllocationTags(\n+      AllocationTags allocationTags,\n+      Map\u003cApplicationId, TypeToCountedTags\u003e mapping)\n+      throws InvalidAllocationTagsQueryException {\n+    // Based on the namespace type of the given allocation tags\n+    TargetApplicationsNamespace namespace \u003d allocationTags.getNamespace();\n+    TargetApplications ta \u003d new TargetApplications(\n+        allocationTags.getCurrentApplicationId(), getApplicationIdToTags());\n+    namespace.evaluate(ta);\n+    Set\u003cApplicationId\u003e appIds \u003d namespace.getNamespaceScope();\n     TypeToCountedTags result \u003d new TypeToCountedTags();\n     if (appIds !\u003d null) {\n       if (appIds.size() \u003d\u003d 1) {\n         // If there is only one app, we simply return the mapping\n         // without any extra computation.\n         return mapping.get(appIds.iterator().next());\n       }\n \n       for (ApplicationId applicationId : appIds) {\n         TypeToCountedTags appIdTags \u003d mapping.get(applicationId);\n         if (appIdTags !\u003d null) {\n           // Make sure ATM state won\u0027t be changed.\n           result.absorb(appIdTags.immutableCopy());\n         }\n       }\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private TypeToCountedTags aggregateAllocationTags(\n      AllocationTags allocationTags,\n      Map\u003cApplicationId, TypeToCountedTags\u003e mapping)\n      throws InvalidAllocationTagsQueryException {\n    // Based on the namespace type of the given allocation tags\n    TargetApplicationsNamespace namespace \u003d allocationTags.getNamespace();\n    TargetApplications ta \u003d new TargetApplications(\n        allocationTags.getCurrentApplicationId(), getApplicationIdToTags());\n    namespace.evaluate(ta);\n    Set\u003cApplicationId\u003e appIds \u003d namespace.getNamespaceScope();\n    TypeToCountedTags result \u003d new TypeToCountedTags();\n    if (appIds !\u003d null) {\n      if (appIds.size() \u003d\u003d 1) {\n        // If there is only one app, we simply return the mapping\n        // without any extra computation.\n        return mapping.get(appIds.iterator().next());\n      }\n\n      for (ApplicationId applicationId : appIds) {\n        TypeToCountedTags appIdTags \u003d mapping.get(applicationId);\n        if (appIdTags !\u003d null) {\n          // Make sure ATM state won\u0027t be changed.\n          result.absorb(appIdTags.immutableCopy());\n        }\n      }\n    }\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a08921ca6cb1dad98935808c8f474b654f861263": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
      "commitDate": "19/03/18 11:04 AM",
      "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,20 @@\n+  private TypeToCountedTags aggregateAllocationTags(Set\u003cApplicationId\u003e appIds,\n+      Map\u003cApplicationId, TypeToCountedTags\u003e mapping) {\n+    TypeToCountedTags result \u003d new TypeToCountedTags();\n+    if (appIds !\u003d null) {\n+      if (appIds.size() \u003d\u003d 1) {\n+        // If there is only one app, we simply return the mapping\n+        // without any extra computation.\n+        return mapping.get(appIds.iterator().next());\n+      }\n+\n+      for (ApplicationId applicationId : appIds) {\n+        TypeToCountedTags appIdTags \u003d mapping.get(applicationId);\n+        if (appIdTags !\u003d null) {\n+          // Make sure ATM state won\u0027t be changed.\n+          result.absorb(appIdTags.immutableCopy());\n+        }\n+      }\n+    }\n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private TypeToCountedTags aggregateAllocationTags(Set\u003cApplicationId\u003e appIds,\n      Map\u003cApplicationId, TypeToCountedTags\u003e mapping) {\n    TypeToCountedTags result \u003d new TypeToCountedTags();\n    if (appIds !\u003d null) {\n      if (appIds.size() \u003d\u003d 1) {\n        // If there is only one app, we simply return the mapping\n        // without any extra computation.\n        return mapping.get(appIds.iterator().next());\n      }\n\n      for (ApplicationId applicationId : appIds) {\n        TypeToCountedTags appIdTags \u003d mapping.get(applicationId);\n        if (appIdTags !\u003d null) {\n          // Make sure ATM state won\u0027t be changed.\n          result.absorb(appIdTags.immutableCopy());\n        }\n      }\n    }\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java"
    }
  }
}