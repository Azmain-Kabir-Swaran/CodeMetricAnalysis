{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "containerLaunchedOnNode",
  "functionId": "containerLaunchedOnNode___containerId-ContainerId__node-SchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 371,
  "functionEndLine": 392,
  "numCommitsSeen": 207,
  "timeTaken": 11729,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "e13a484a2be64fb781c5eca5ae7056cbe194ac5e",
    "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "78ff0b720e0418785d53802a1b4e72085c1a3556",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "e13a484a2be64fb781c5eca5ae7056cbe194ac5e": "Ymodifierchange",
    "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ymultichange(Yparameterchange,Ybodychange)",
    "78ff0b720e0418785d53802a1b4e72085c1a3556": "Ybodychange",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   protected void containerLaunchedOnNode(\n       ContainerId containerId, SchedulerNode node) {\n+    readLock.lock();\n     try {\n-      readLock.lock();\n       // Get the application for the finished container\n       SchedulerApplicationAttempt application \u003d\n           getCurrentAttemptForContainer(containerId);\n       if (application \u003d\u003d null) {\n         LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n             .getApplicationId() + \" launched container \" + containerId\n             + \" on node: \" + node);\n         this.rmContext.getDispatcher().getEventHandler().handle(\n             new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n         return;\n       }\n \n       application.containerLaunchedOnNode(containerId, node.getNodeID());\n       node.containerStarted(containerId);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void containerLaunchedOnNode(\n      ContainerId containerId, SchedulerNode node) {\n    readLock.lock();\n    try {\n      // Get the application for the finished container\n      SchedulerApplicationAttempt application \u003d\n          getCurrentAttemptForContainer(containerId);\n      if (application \u003d\u003d null) {\n        LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n            .getApplicationId() + \" launched container \" + containerId\n            + \" on node: \" + node);\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n        return;\n      }\n\n      application.containerLaunchedOnNode(containerId, node.getNodeID());\n      node.containerStarted(containerId);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4148. When killing app, RM releases app\u0027s resource before they are released by NM. Contributed by Jason Lowe.\n",
      "commitDate": "09/01/17 6:14 PM",
      "commitName": "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "09/01/17 8:40 AM",
      "commitNameOld": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.4,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   protected void containerLaunchedOnNode(\n       ContainerId containerId, SchedulerNode node) {\n     try {\n       readLock.lock();\n       // Get the application for the finished container\n       SchedulerApplicationAttempt application \u003d\n           getCurrentAttemptForContainer(containerId);\n       if (application \u003d\u003d null) {\n         LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n             .getApplicationId() + \" launched container \" + containerId\n             + \" on node: \" + node);\n         this.rmContext.getDispatcher().getEventHandler().handle(\n             new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n         return;\n       }\n \n       application.containerLaunchedOnNode(containerId, node.getNodeID());\n+      node.containerStarted(containerId);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void containerLaunchedOnNode(\n      ContainerId containerId, SchedulerNode node) {\n    try {\n      readLock.lock();\n      // Get the application for the finished container\n      SchedulerApplicationAttempt application \u003d\n          getCurrentAttemptForContainer(containerId);\n      if (application \u003d\u003d null) {\n        LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n            .getApplicationId() + \" launched container \" + containerId\n            + \" on node: \" + node);\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n        return;\n      }\n\n      application.containerLaunchedOnNode(containerId, node.getNodeID());\n      node.containerStarted(containerId);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,21 @@\n-  protected synchronized void containerLaunchedOnNode(\n+  protected void containerLaunchedOnNode(\n       ContainerId containerId, SchedulerNode node) {\n-    // Get the application for the finished container\n-    SchedulerApplicationAttempt application \u003d\n-        getCurrentAttemptForContainer(containerId);\n-    if (application \u003d\u003d null) {\n-      LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n-          .getApplicationId() + \" launched container \" + containerId\n-          + \" on node: \" + node);\n-      this.rmContext.getDispatcher().getEventHandler()\n-        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n-      return;\n-    }\n+    try {\n+      readLock.lock();\n+      // Get the application for the finished container\n+      SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer(\n+          containerId);\n+      if (application \u003d\u003d null) {\n+        LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n+            .getApplicationId() + \" launched container \" + containerId\n+            + \" on node: \" + node);\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n+        return;\n+      }\n \n-    application.containerLaunchedOnNode(containerId, node.getNodeID());\n+      application.containerLaunchedOnNode(containerId, node.getNodeID());\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void containerLaunchedOnNode(\n      ContainerId containerId, SchedulerNode node) {\n    try {\n      readLock.lock();\n      // Get the application for the finished container\n      SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer(\n          containerId);\n      if (application \u003d\u003d null) {\n        LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n            .getApplicationId() + \" launched container \" + containerId\n            + \" on node: \" + node);\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n        return;\n      }\n\n      application.containerLaunchedOnNode(containerId, node.getNodeID());\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[protected, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,21 @@\n-  protected synchronized void containerLaunchedOnNode(\n+  protected void containerLaunchedOnNode(\n       ContainerId containerId, SchedulerNode node) {\n-    // Get the application for the finished container\n-    SchedulerApplicationAttempt application \u003d\n-        getCurrentAttemptForContainer(containerId);\n-    if (application \u003d\u003d null) {\n-      LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n-          .getApplicationId() + \" launched container \" + containerId\n-          + \" on node: \" + node);\n-      this.rmContext.getDispatcher().getEventHandler()\n-        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n-      return;\n-    }\n+    try {\n+      readLock.lock();\n+      // Get the application for the finished container\n+      SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer(\n+          containerId);\n+      if (application \u003d\u003d null) {\n+        LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n+            .getApplicationId() + \" launched container \" + containerId\n+            + \" on node: \" + node);\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n+        return;\n+      }\n \n-    application.containerLaunchedOnNode(containerId, node.getNodeID());\n+      application.containerLaunchedOnNode(containerId, node.getNodeID());\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void containerLaunchedOnNode(\n      ContainerId containerId, SchedulerNode node) {\n    try {\n      readLock.lock();\n      // Get the application for the finished container\n      SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer(\n          containerId);\n      if (application \u003d\u003d null) {\n        LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n            .getApplicationId() + \" launched container \" + containerId\n            + \" on node: \" + node);\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n        return;\n      }\n\n      application.containerLaunchedOnNode(containerId, node.getNodeID());\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e13a484a2be64fb781c5eca5ae7056cbe194ac5e": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3010. Fixed findbugs warning in AbstractYarnScheduler. Contributed by Yi Liu\n",
      "commitDate": "07/01/15 2:12 PM",
      "commitName": "e13a484a2be64fb781c5eca5ae7056cbe194ac5e",
      "commitAuthor": "Jian He",
      "commitDateOld": "21/11/14 10:32 AM",
      "commitNameOld": "3114d4731dcca7cb6c16aaa7c7a6550b7dd7dccb",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 47.15,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n-  protected void containerLaunchedOnNode(ContainerId containerId,\n-                                         SchedulerNode node) {\n+  protected synchronized void containerLaunchedOnNode(\n+      ContainerId containerId, SchedulerNode node) {\n     // Get the application for the finished container\n     SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n         (containerId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application \"\n           + containerId.getApplicationAttemptId().getApplicationId()\n           + \" launched container \" + containerId + \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n \n     application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void containerLaunchedOnNode(\n      ContainerId containerId, SchedulerNode node) {\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n        (containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" launched container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n\n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[protected, synchronized]"
      }
    },
    "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-2244. FairScheduler missing handling of containers for unknown application attempts. (Anubhav Dhoot via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611840 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 5:12 PM",
      "commitName": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-2244. FairScheduler missing handling of containers for unknown application attempts. (Anubhav Dhoot via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611840 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 5:12 PM",
          "commitName": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "18/07/14 3:01 PM",
          "commitNameOld": "0a3ea6c486b43a798d487f9a20668d418f539b8b",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,16 @@\n-  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n+  protected void containerLaunchedOnNode(ContainerId containerId,\n+                                         SchedulerNode node) {\n     // Get the application for the finished container\n-    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(containerId);\n+    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n+        (containerId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application \"\n           + containerId.getApplicationAttemptId().getApplicationId()\n           + \" launched container \" + containerId + \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n-    \n+\n     application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void containerLaunchedOnNode(ContainerId containerId,\n                                         SchedulerNode node) {\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n        (containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" launched container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n\n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
            "oldMethodName": "containerLaunchedOnNode",
            "newMethodName": "containerLaunchedOnNode"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2244. FairScheduler missing handling of containers for unknown application attempts. (Anubhav Dhoot via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611840 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 5:12 PM",
          "commitName": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "18/07/14 3:01 PM",
          "commitNameOld": "0a3ea6c486b43a798d487f9a20668d418f539b8b",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,16 @@\n-  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n+  protected void containerLaunchedOnNode(ContainerId containerId,\n+                                         SchedulerNode node) {\n     // Get the application for the finished container\n-    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(containerId);\n+    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n+        (containerId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application \"\n           + containerId.getApplicationAttemptId().getApplicationId()\n           + \" launched container \" + containerId + \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n-    \n+\n     application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void containerLaunchedOnNode(ContainerId containerId,\n                                         SchedulerNode node) {\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n        (containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" launched container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n\n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2244. FairScheduler missing handling of containers for unknown application attempts. (Anubhav Dhoot via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611840 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 5:12 PM",
          "commitName": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "18/07/14 3:01 PM",
          "commitNameOld": "0a3ea6c486b43a798d487f9a20668d418f539b8b",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,16 @@\n-  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n+  protected void containerLaunchedOnNode(ContainerId containerId,\n+                                         SchedulerNode node) {\n     // Get the application for the finished container\n-    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(containerId);\n+    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n+        (containerId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application \"\n           + containerId.getApplicationAttemptId().getApplicationId()\n           + \" launched container \" + containerId + \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n-    \n+\n     application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void containerLaunchedOnNode(ContainerId containerId,\n                                         SchedulerNode node) {\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n        (containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" launched container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n\n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2244. FairScheduler missing handling of containers for unknown application attempts. (Anubhav Dhoot via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611840 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 5:12 PM",
          "commitName": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "18/07/14 3:01 PM",
          "commitNameOld": "0a3ea6c486b43a798d487f9a20668d418f539b8b",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,16 @@\n-  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n+  protected void containerLaunchedOnNode(ContainerId containerId,\n+                                         SchedulerNode node) {\n     // Get the application for the finished container\n-    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(containerId);\n+    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n+        (containerId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application \"\n           + containerId.getApplicationAttemptId().getApplicationId()\n           + \" launched container \" + containerId + \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n-    \n+\n     application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void containerLaunchedOnNode(ContainerId containerId,\n                                         SchedulerNode node) {\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer\n        (containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" launched container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n\n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, node-FiCaSchedulerNode]",
            "newValue": "[containerId-ContainerId, node-SchedulerNode]"
          }
        }
      ]
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,14 @@\n   private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n     // Get the application for the finished container\n-    ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n-    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(containerId);\n     if (application \u003d\u003d null) {\n-      LOG.info(\"Unknown application: \" + applicationAttemptId + \n-          \" launched container \" + containerId +\n-          \" on node: \" + node);\n+      LOG.info(\"Unknown application \"\n+          + containerId.getApplicationAttemptId().getApplicationId()\n+          + \" launched container \" + containerId + \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n     \n     application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" launched container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n    \n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + containerId +\n          \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n    \n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "09/03/12 3:34 PM",
          "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 129.09,
          "commitsBetweenForRepo": 802,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n+  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n     // Get the application for the finished container\n     ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n-    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" launched container \" + containerId +\n           \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n     \n     application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + containerId +\n          \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n    \n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, node-SchedulerNode]",
            "newValue": "[containerId-ContainerId, node-FiCaSchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "09/03/12 3:34 PM",
          "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 129.09,
          "commitsBetweenForRepo": 802,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n+  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n     // Get the application for the finished container\n     ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n-    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" launched container \" + containerId +\n           \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n     \n     application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void containerLaunchedOnNode(ContainerId containerId, FiCaSchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + containerId +\n          \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n    \n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "78ff0b720e0418785d53802a1b4e72085c1a3556": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3596. Fix scheduler to handle cleaned up containers, which NMs may subsequently report as running. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1231297 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/01/12 1:15 PM",
      "commitName": "78ff0b720e0418785d53802a1b4e72085c1a3556",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "29/12/11 11:06 AM",
      "commitNameOld": "743a5b78e3bce26482c6bcd71208e422fa178cf9",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,15 @@\n   private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n     // Get the application for the finished container\n     ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" launched container \" + containerId +\n           \" on node: \" + node);\n+      this.rmContext.getDispatcher().getEventHandler()\n+        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n     \n-    application.containerLaunchedOnNode(containerId);\n+    application.containerLaunchedOnNode(containerId, node.getNodeID());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + containerId +\n          \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n    \n    application.containerLaunchedOnNode(containerId, node.getNodeID());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/09/11 10:26 AM",
      "commitNameOld": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.28,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n     // Get the application for the finished container\n-    ApplicationAttemptId applicationAttemptId \u003d containerId.getAppAttemptId();\n+    ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" launched container \" + containerId +\n           \" on node: \" + node);\n       return;\n     }\n     \n     application.containerLaunchedOnNode(containerId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d containerId.getApplicationAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + containerId +\n          \" on node: \" + node);\n      return;\n    }\n    \n    application.containerLaunchedOnNode(containerId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  private void containerLaunchedOnNode(Container container, SchedulerNode node) {\n+  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n     // Get the application for the finished container\n-    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n+    ApplicationAttemptId applicationAttemptId \u003d containerId.getAppAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n-          \" launched container \" + container.getId() +\n+          \" launched container \" + containerId +\n           \" on node: \" + node);\n       return;\n     }\n     \n-    application.containerLaunchedOnNode(container.getId());\n+    application.containerLaunchedOnNode(containerId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d containerId.getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + containerId +\n          \" on node: \" + node);\n      return;\n    }\n    \n    application.containerLaunchedOnNode(containerId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[container-Container, node-SchedulerNode]",
            "newValue": "[containerId-ContainerId, node-SchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  private void containerLaunchedOnNode(Container container, SchedulerNode node) {\n+  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n     // Get the application for the finished container\n-    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n+    ApplicationAttemptId applicationAttemptId \u003d containerId.getAppAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n-          \" launched container \" + container.getId() +\n+          \" launched container \" + containerId +\n           \" on node: \" + node);\n       return;\n     }\n     \n-    application.containerLaunchedOnNode(container.getId());\n+    application.containerLaunchedOnNode(containerId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void containerLaunchedOnNode(ContainerId containerId, SchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d containerId.getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + containerId +\n          \" on node: \" + node);\n      return;\n    }\n    \n    application.containerLaunchedOnNode(containerId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void containerLaunchedOnNode(Container container, SchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + container.getId() +\n          \" on node: \" + node);\n      return;\n    }\n    \n    application.containerLaunchedOnNode(container.getId());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,13 @@\n+  private void containerLaunchedOnNode(Container container, SchedulerNode node) {\n+    // Get the application for the finished container\n+    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n+    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    if (application \u003d\u003d null) {\n+      LOG.info(\"Unknown application: \" + applicationAttemptId + \n+          \" launched container \" + container.getId() +\n+          \" on node: \" + node);\n+      return;\n+    }\n+    \n+    application.containerLaunchedOnNode(container.getId());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void containerLaunchedOnNode(Container container, SchedulerNode node) {\n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" launched container \" + container.getId() +\n          \" on node: \" + node);\n      return;\n    }\n    \n    application.containerLaunchedOnNode(container.getId());\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}