{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRAppMaster.java",
  "functionName": "shutDownJob",
  "functionId": "shutDownJob",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
  "functionStartLine": 644,
  "functionEndLine": 692,
  "numCommitsSeen": 124,
  "timeTaken": 3843,
  "changeHistory": [
    "6ed54f3439ea9c7af6bf129ebe1938380febb5e2",
    "10107243be66bae2212a2cd8575f9f5ade13fe9e",
    "f30065c8b6099372f57015b505434120fe83c2b0",
    "7250b0bf914a55d0fa4802834de7f1909f1b0d6b",
    "39abe6682275a96554f23e39685a75dfe2ec93d6",
    "f0799c55360e1e77224955f331892390e4361729",
    "aa12a7914fc6d70d0ae16e99dc13a739f931b173",
    "524dad1109946e760deb7e447306c50c99a9c9ef",
    "1c1ebc1553650ac8e4486faf21f0d95150f607ad",
    "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e",
    "614a743fea5ab5181b2b7989bba84146e81039de"
  ],
  "changeHistoryShort": {
    "6ed54f3439ea9c7af6bf129ebe1938380febb5e2": "Ybodychange",
    "10107243be66bae2212a2cd8575f9f5ade13fe9e": "Ybodychange",
    "f30065c8b6099372f57015b505434120fe83c2b0": "Ybodychange",
    "7250b0bf914a55d0fa4802834de7f1909f1b0d6b": "Ybodychange",
    "39abe6682275a96554f23e39685a75dfe2ec93d6": "Ybodychange",
    "f0799c55360e1e77224955f331892390e4361729": "Ybodychange",
    "aa12a7914fc6d70d0ae16e99dc13a739f931b173": "Ybodychange",
    "524dad1109946e760deb7e447306c50c99a9c9ef": "Ybodychange",
    "1c1ebc1553650ac8e4486faf21f0d95150f607ad": "Ybodychange",
    "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e": "Ybodychange",
    "614a743fea5ab5181b2b7989bba84146e81039de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ed54f3439ea9c7af6bf129ebe1938380febb5e2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6895. Job end notification not send due to YarnRuntimeException. Contributed by yunjiong zhao.\n",
      "commitDate": "13/06/17 3:21 PM",
      "commitName": "6ed54f3439ea9c7af6bf129ebe1938380febb5e2",
      "commitAuthor": "Junping Du",
      "commitDateOld": "26/04/17 11:45 PM",
      "commitNameOld": "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 47.65,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,49 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n \n+    JobEndNotifier notifier \u003d null;\n+    if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n+      notifier \u003d new JobEndNotifier();\n+      notifier.setConf(getConfig());\n+    }\n+\n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n           LOG.info(\"Job finished cleanly, recording last MRAppMaster retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n-      if (isLastAMRetry) {\n+      if (isLastAMRetry \u0026\u0026 notifier !\u003d null) {\n         // Send job-end notification when it is safe to report termination to\n         // users and it is the last AM retry\n-        if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n-          try {\n-            LOG.info(\"Job end notification started for jobID : \"\n-                + job.getReport().getJobId());\n-            JobEndNotifier notifier \u003d new JobEndNotifier();\n-            notifier.setConf(getConfig());\n-            JobReport report \u003d job.getReport();\n-            // If unregistration fails, the final state is unavailable. However,\n-            // at the last AM Retry, the client will finally be notified FAILED\n-            // from RM, so we should let users know FAILED via notifier as well\n-            if (!context.hasSuccessfullyUnregistered()) {\n-              report.setJobState(JobState.FAILED);\n-            }\n-            notifier.notify(report);\n-          } catch (InterruptedException ie) {\n-            LOG.warn(\"Job end notification interrupted for jobID : \"\n-                + job.getReport().getJobId(), ie);\n-          }\n-        }\n+        sendJobEndNotify(notifier);\n+        notifier \u003d null;\n       }\n \n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       clientService.stop();\n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed. Exiting.. \", t);\n       exitMRAppMaster(1, t);\n+    } finally {\n+      if (isLastAMRetry \u0026\u0026 notifier !\u003d null) {\n+        sendJobEndNotify(notifier);\n+      }\n     }\n     exitMRAppMaster(0, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n\n    JobEndNotifier notifier \u003d null;\n    if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n      notifier \u003d new JobEndNotifier();\n      notifier.setConf(getConfig());\n    }\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"Job finished cleanly, recording last MRAppMaster retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      if (isLastAMRetry \u0026\u0026 notifier !\u003d null) {\n        // Send job-end notification when it is safe to report termination to\n        // users and it is the last AM retry\n        sendJobEndNotify(notifier);\n        notifier \u003d null;\n      }\n\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed. Exiting.. \", t);\n      exitMRAppMaster(1, t);\n    } finally {\n      if (isLastAMRetry \u0026\u0026 notifier !\u003d null) {\n        sendJobEndNotify(notifier);\n      }\n    }\n    exitMRAppMaster(0, null);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "10107243be66bae2212a2cd8575f9f5ade13fe9e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6395. Improve the commit failure messages in MRAppMaster recovery. (Brahma Reddy Battula via gera)\n",
      "commitDate": "19/06/15 2:22 AM",
      "commitName": "10107243be66bae2212a2cd8575f9f5ade13fe9e",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "14/05/15 4:07 PM",
      "commitNameOld": "6b710a42e00acca405e085724c89cda016cf7442",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 35.43,
      "commitsBetweenForRepo": 254,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n \n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n-          LOG.info(\"We are finishing cleanly so this is the last retry\");\n+          LOG.info(\"Job finished cleanly, recording last MRAppMaster retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n       if (isLastAMRetry) {\n         // Send job-end notification when it is safe to report termination to\n         // users and it is the last AM retry\n         if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n           try {\n             LOG.info(\"Job end notification started for jobID : \"\n                 + job.getReport().getJobId());\n             JobEndNotifier notifier \u003d new JobEndNotifier();\n             notifier.setConf(getConfig());\n             JobReport report \u003d job.getReport();\n             // If unregistration fails, the final state is unavailable. However,\n             // at the last AM Retry, the client will finally be notified FAILED\n             // from RM, so we should let users know FAILED via notifier as well\n             if (!context.hasSuccessfullyUnregistered()) {\n               report.setJobState(JobState.FAILED);\n             }\n             notifier.notify(report);\n           } catch (InterruptedException ie) {\n             LOG.warn(\"Job end notification interrupted for jobID : \"\n                 + job.getReport().getJobId(), ie);\n           }\n         }\n       }\n \n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       clientService.stop();\n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed. Exiting.. \", t);\n       exitMRAppMaster(1, t);\n     }\n     exitMRAppMaster(0, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"Job finished cleanly, recording last MRAppMaster retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      if (isLastAMRetry) {\n        // Send job-end notification when it is safe to report termination to\n        // users and it is the last AM retry\n        if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n          try {\n            LOG.info(\"Job end notification started for jobID : \"\n                + job.getReport().getJobId());\n            JobEndNotifier notifier \u003d new JobEndNotifier();\n            notifier.setConf(getConfig());\n            JobReport report \u003d job.getReport();\n            // If unregistration fails, the final state is unavailable. However,\n            // at the last AM Retry, the client will finally be notified FAILED\n            // from RM, so we should let users know FAILED via notifier as well\n            if (!context.hasSuccessfullyUnregistered()) {\n              report.setJobState(JobState.FAILED);\n            }\n            notifier.notify(report);\n          } catch (InterruptedException ie) {\n            LOG.warn(\"Job end notification interrupted for jobID : \"\n                + job.getReport().getJobId(), ie);\n          }\n        }\n      }\n\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed. Exiting.. \", t);\n      exitMRAppMaster(1, t);\n    }\n    exitMRAppMaster(0, null);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "f30065c8b6099372f57015b505434120fe83c2b0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6279. AM should explicity exit JVM after all services have stopped. Contributed by Eric Payne\n",
      "commitDate": "07/05/15 3:05 PM",
      "commitName": "f30065c8b6099372f57015b505434120fe83c2b0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "04/05/15 1:39 PM",
      "commitNameOld": "bf70c5ae2824a9139c1aa9d7c14020018881cec2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n \n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n           LOG.info(\"We are finishing cleanly so this is the last retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n       if (isLastAMRetry) {\n         // Send job-end notification when it is safe to report termination to\n         // users and it is the last AM retry\n         if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n           try {\n             LOG.info(\"Job end notification started for jobID : \"\n                 + job.getReport().getJobId());\n             JobEndNotifier notifier \u003d new JobEndNotifier();\n             notifier.setConf(getConfig());\n             JobReport report \u003d job.getReport();\n             // If unregistration fails, the final state is unavailable. However,\n             // at the last AM Retry, the client will finally be notified FAILED\n             // from RM, so we should let users know FAILED via notifier as well\n             if (!context.hasSuccessfullyUnregistered()) {\n               report.setJobState(JobState.FAILED);\n             }\n             notifier.notify(report);\n           } catch (InterruptedException ie) {\n             LOG.warn(\"Job end notification interrupted for jobID : \"\n                 + job.getReport().getJobId(), ie);\n           }\n         }\n       }\n \n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       clientService.stop();\n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed. Exiting.. \", t);\n-      ExitUtil.terminate(1, t);\n+      exitMRAppMaster(1, t);\n     }\n-\n+    exitMRAppMaster(0, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"We are finishing cleanly so this is the last retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      if (isLastAMRetry) {\n        // Send job-end notification when it is safe to report termination to\n        // users and it is the last AM retry\n        if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n          try {\n            LOG.info(\"Job end notification started for jobID : \"\n                + job.getReport().getJobId());\n            JobEndNotifier notifier \u003d new JobEndNotifier();\n            notifier.setConf(getConfig());\n            JobReport report \u003d job.getReport();\n            // If unregistration fails, the final state is unavailable. However,\n            // at the last AM Retry, the client will finally be notified FAILED\n            // from RM, so we should let users know FAILED via notifier as well\n            if (!context.hasSuccessfullyUnregistered()) {\n              report.setJobState(JobState.FAILED);\n            }\n            notifier.notify(report);\n          } catch (InterruptedException ie) {\n            LOG.warn(\"Job end notification interrupted for jobID : \"\n                + job.getReport().getJobId(), ie);\n          }\n        }\n      }\n\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed. Exiting.. \", t);\n      exitMRAppMaster(1, t);\n    }\n    exitMRAppMaster(0, null);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "7250b0bf914a55d0fa4802834de7f1909f1b0d6b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6049. AM JVM does not exit if MRClientService graceful shutdown\nfails. Contributed by Rohith.\n",
      "commitDate": "18/11/14 8:35 AM",
      "commitName": "7250b0bf914a55d0fa4802834de7f1909f1b0d6b",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "11/10/14 10:49 PM",
      "commitNameOld": "e8a31f2e1c34514fba2f480e8db652f6e2ed65d8",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 37.45,
      "commitsBetweenForRepo": 348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n \n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n           LOG.info(\"We are finishing cleanly so this is the last retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n       if (isLastAMRetry) {\n         // Send job-end notification when it is safe to report termination to\n         // users and it is the last AM retry\n         if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n           try {\n             LOG.info(\"Job end notification started for jobID : \"\n                 + job.getReport().getJobId());\n             JobEndNotifier notifier \u003d new JobEndNotifier();\n             notifier.setConf(getConfig());\n             JobReport report \u003d job.getReport();\n             // If unregistration fails, the final state is unavailable. However,\n             // at the last AM Retry, the client will finally be notified FAILED\n             // from RM, so we should let users know FAILED via notifier as well\n             if (!context.hasSuccessfullyUnregistered()) {\n               report.setJobState(JobState.FAILED);\n             }\n             notifier.notify(report);\n           } catch (InterruptedException ie) {\n             LOG.warn(\"Job end notification interrupted for jobID : \"\n                 + job.getReport().getJobId(), ie);\n           }\n         }\n       }\n \n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       clientService.stop();\n     } catch (Throwable t) {\n-      LOG.warn(\"Graceful stop failed \", t);\n+      LOG.warn(\"Graceful stop failed. Exiting.. \", t);\n+      ExitUtil.terminate(1, t);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"We are finishing cleanly so this is the last retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      if (isLastAMRetry) {\n        // Send job-end notification when it is safe to report termination to\n        // users and it is the last AM retry\n        if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n          try {\n            LOG.info(\"Job end notification started for jobID : \"\n                + job.getReport().getJobId());\n            JobEndNotifier notifier \u003d new JobEndNotifier();\n            notifier.setConf(getConfig());\n            JobReport report \u003d job.getReport();\n            // If unregistration fails, the final state is unavailable. However,\n            // at the last AM Retry, the client will finally be notified FAILED\n            // from RM, so we should let users know FAILED via notifier as well\n            if (!context.hasSuccessfullyUnregistered()) {\n              report.setJobState(JobState.FAILED);\n            }\n            notifier.notify(report);\n          } catch (InterruptedException ie) {\n            LOG.warn(\"Job end notification interrupted for jobID : \"\n                + job.getReport().getJobId(), ie);\n          }\n        }\n      }\n\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed. Exiting.. \", t);\n      ExitUtil.terminate(1, t);\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "39abe6682275a96554f23e39685a75dfe2ec93d6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5714. Removed forceful JVM exit in shutDownJob.  \n                (Jinghui Wang via Eric Yang)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1590263 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/14 10:59 AM",
      "commitName": "39abe6682275a96554f23e39685a75dfe2ec93d6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/04/14 1:33 PM",
      "commitNameOld": "8d569c2220236551d5c95e2ebdaaea52eebe37e6",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 7.89,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,55 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n \n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n           LOG.info(\"We are finishing cleanly so this is the last retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n       if (isLastAMRetry) {\n         // Send job-end notification when it is safe to report termination to\n         // users and it is the last AM retry\n         if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n           try {\n             LOG.info(\"Job end notification started for jobID : \"\n                 + job.getReport().getJobId());\n             JobEndNotifier notifier \u003d new JobEndNotifier();\n             notifier.setConf(getConfig());\n             JobReport report \u003d job.getReport();\n             // If unregistration fails, the final state is unavailable. However,\n             // at the last AM Retry, the client will finally be notified FAILED\n             // from RM, so we should let users know FAILED via notifier as well\n             if (!context.hasSuccessfullyUnregistered()) {\n               report.setJobState(JobState.FAILED);\n             }\n             notifier.notify(report);\n           } catch (InterruptedException ie) {\n             LOG.warn(\"Job end notification interrupted for jobID : \"\n                 + job.getReport().getJobId(), ie);\n           }\n         }\n       }\n \n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       clientService.stop();\n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed \", t);\n     }\n \n-    //Bring the process down by force.\n-    //Not needed after HADOOP-7140\n-    LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n-    sysexit();   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"We are finishing cleanly so this is the last retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      if (isLastAMRetry) {\n        // Send job-end notification when it is safe to report termination to\n        // users and it is the last AM retry\n        if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n          try {\n            LOG.info(\"Job end notification started for jobID : \"\n                + job.getReport().getJobId());\n            JobEndNotifier notifier \u003d new JobEndNotifier();\n            notifier.setConf(getConfig());\n            JobReport report \u003d job.getReport();\n            // If unregistration fails, the final state is unavailable. However,\n            // at the last AM Retry, the client will finally be notified FAILED\n            // from RM, so we should let users know FAILED via notifier as well\n            if (!context.hasSuccessfullyUnregistered()) {\n              report.setJobState(JobState.FAILED);\n            }\n            notifier.notify(report);\n          } catch (InterruptedException ie) {\n            LOG.warn(\"Job end notification interrupted for jobID : \"\n                + job.getReport().getJobId(), ie);\n          }\n        }\n      }\n\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed \", t);\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "f0799c55360e1e77224955f331892390e4361729": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5562. Fixed MR App Master to perform pending tasks like staging-dir cleanup, sending job-end notification correctly when unregister with RM fails. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 1:53 PM",
      "commitName": "f0799c55360e1e77224955f331892390e4361729",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/10/13 11:43 AM",
      "commitNameOld": "21181b65531449e5fda321c11f0672c3067641aa",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n \n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n           LOG.info(\"We are finishing cleanly so this is the last retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n       if (isLastAMRetry) {\n-        // Except ClientService, other services are already stopped, it is safe to\n-        // let clients know the final states. ClientService should wait for some\n-        // time so clients have enough time to know the final states.\n-        safeToReportTerminationToUser.set(true);\n-\n         // Send job-end notification when it is safe to report termination to\n         // users and it is the last AM retry\n         if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n           try {\n             LOG.info(\"Job end notification started for jobID : \"\n                 + job.getReport().getJobId());\n             JobEndNotifier notifier \u003d new JobEndNotifier();\n             notifier.setConf(getConfig());\n-            notifier.notify(job.getReport());\n+            JobReport report \u003d job.getReport();\n+            // If unregistration fails, the final state is unavailable. However,\n+            // at the last AM Retry, the client will finally be notified FAILED\n+            // from RM, so we should let users know FAILED via notifier as well\n+            if (!context.hasSuccessfullyUnregistered()) {\n+              report.setJobState(JobState.FAILED);\n+            }\n+            notifier.notify(report);\n           } catch (InterruptedException ie) {\n             LOG.warn(\"Job end notification interrupted for jobID : \"\n                 + job.getReport().getJobId(), ie);\n           }\n         }\n       }\n \n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       clientService.stop();\n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed \", t);\n     }\n \n     //Bring the process down by force.\n     //Not needed after HADOOP-7140\n     LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n     sysexit();   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"We are finishing cleanly so this is the last retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      if (isLastAMRetry) {\n        // Send job-end notification when it is safe to report termination to\n        // users and it is the last AM retry\n        if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n          try {\n            LOG.info(\"Job end notification started for jobID : \"\n                + job.getReport().getJobId());\n            JobEndNotifier notifier \u003d new JobEndNotifier();\n            notifier.setConf(getConfig());\n            JobReport report \u003d job.getReport();\n            // If unregistration fails, the final state is unavailable. However,\n            // at the last AM Retry, the client will finally be notified FAILED\n            // from RM, so we should let users know FAILED via notifier as well\n            if (!context.hasSuccessfullyUnregistered()) {\n              report.setJobState(JobState.FAILED);\n            }\n            notifier.notify(report);\n          } catch (InterruptedException ie) {\n            LOG.warn(\"Job end notification interrupted for jobID : \"\n                + job.getReport().getJobId(), ie);\n          }\n        }\n      }\n\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed \", t);\n    }\n\n    //Bring the process down by force.\n    //Not needed after HADOOP-7140\n    LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n    sysexit();   \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "aa12a7914fc6d70d0ae16e99dc13a739f931b173": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5538. Fixed MR AppMaster to send job-notification URL only after the job is really done - a bug caused by MAPREDUCE-5505. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527219 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/13 12:14 PM",
      "commitName": "aa12a7914fc6d70d0ae16e99dc13a739f931b173",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/09/13 5:46 PM",
      "commitNameOld": "524dad1109946e760deb7e447306c50c99a9c9ef",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 3.77,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,57 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n-    // Send job-end notification\n-    if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n-      try {\n-        LOG.info(\"Job end notification started for jobID : \"\n-            + job.getReport().getJobId());\n-        JobEndNotifier notifier \u003d new JobEndNotifier();\n-        notifier.setConf(getConfig());\n-        notifier.notify(job.getReport());\n-      } catch (InterruptedException ie) {\n-        LOG.warn(\"Job end notification interrupted for jobID : \"\n-            + job.getReport().getJobId(), ie);\n-      }\n-    }\n \n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n           LOG.info(\"We are finishing cleanly so this is the last retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n-      // Except ClientService, other services are already stopped, it is safe to\n-      // let clients know the final states. ClientService should wait for some\n-      // time so clients have enough time to know the final states.\n-      safeToReportTerminationToUser.set(true);\n+      if (isLastAMRetry) {\n+        // Except ClientService, other services are already stopped, it is safe to\n+        // let clients know the final states. ClientService should wait for some\n+        // time so clients have enough time to know the final states.\n+        safeToReportTerminationToUser.set(true);\n+\n+        // Send job-end notification when it is safe to report termination to\n+        // users and it is the last AM retry\n+        if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n+          try {\n+            LOG.info(\"Job end notification started for jobID : \"\n+                + job.getReport().getJobId());\n+            JobEndNotifier notifier \u003d new JobEndNotifier();\n+            notifier.setConf(getConfig());\n+            notifier.notify(job.getReport());\n+          } catch (InterruptedException ie) {\n+            LOG.warn(\"Job end notification interrupted for jobID : \"\n+                + job.getReport().getJobId(), ie);\n+          }\n+        }\n+      }\n+\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       clientService.stop();\n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed \", t);\n     }\n \n     //Bring the process down by force.\n     //Not needed after HADOOP-7140\n     LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n     sysexit();   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"We are finishing cleanly so this is the last retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      if (isLastAMRetry) {\n        // Except ClientService, other services are already stopped, it is safe to\n        // let clients know the final states. ClientService should wait for some\n        // time so clients have enough time to know the final states.\n        safeToReportTerminationToUser.set(true);\n\n        // Send job-end notification when it is safe to report termination to\n        // users and it is the last AM retry\n        if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n          try {\n            LOG.info(\"Job end notification started for jobID : \"\n                + job.getReport().getJobId());\n            JobEndNotifier notifier \u003d new JobEndNotifier();\n            notifier.setConf(getConfig());\n            notifier.notify(job.getReport());\n          } catch (InterruptedException ie) {\n            LOG.warn(\"Job end notification interrupted for jobID : \"\n                + job.getReport().getJobId(), ie);\n          }\n        }\n      }\n\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed \", t);\n    }\n\n    //Bring the process down by force.\n    //Not needed after HADOOP-7140\n    LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n    sysexit();   \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "524dad1109946e760deb7e447306c50c99a9c9ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5505. Clients should be notified job finished only after job successfully unregistered (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526071 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/09/13 5:46 PM",
      "commitName": "524dad1109946e760deb7e447306c50c99a9c9ef",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "19/09/13 4:35 PM",
      "commitNameOld": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.05,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,52 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n     // Send job-end notification\n     if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n       try {\n         LOG.info(\"Job end notification started for jobID : \"\n             + job.getReport().getJobId());\n         JobEndNotifier notifier \u003d new JobEndNotifier();\n         notifier.setConf(getConfig());\n         notifier.notify(job.getReport());\n       } catch (InterruptedException ie) {\n         LOG.warn(\"Job end notification interrupted for jobID : \"\n             + job.getReport().getJobId(), ie);\n       }\n     }\n \n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n           LOG.info(\"We are finishing cleanly so this is the last retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n-      // TODO: Stop ClientService last, since only ClientService should wait for\n-      // some time so clients can know the final states. Will be removed once RM come on.\n+      // Except ClientService, other services are already stopped, it is safe to\n+      // let clients know the final states. ClientService should wait for some\n+      // time so clients have enough time to know the final states.\n+      safeToReportTerminationToUser.set(true);\n       try {\n         Thread.sleep(5000);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n       clientService.stop();\n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed \", t);\n     }\n \n     //Bring the process down by force.\n     //Not needed after HADOOP-7140\n     LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n     sysexit();   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n    // Send job-end notification\n    if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n      try {\n        LOG.info(\"Job end notification started for jobID : \"\n            + job.getReport().getJobId());\n        JobEndNotifier notifier \u003d new JobEndNotifier();\n        notifier.setConf(getConfig());\n        notifier.notify(job.getReport());\n      } catch (InterruptedException ie) {\n        LOG.warn(\"Job end notification interrupted for jobID : \"\n            + job.getReport().getJobId(), ie);\n      }\n    }\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"We are finishing cleanly so this is the last retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      // Except ClientService, other services are already stopped, it is safe to\n      // let clients know the final states. ClientService should wait for some\n      // time so clients have enough time to know the final states.\n      safeToReportTerminationToUser.set(true);\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed \", t);\n    }\n\n    //Bring the process down by force.\n    //Not needed after HADOOP-7140\n    LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n    sysexit();   \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "1c1ebc1553650ac8e4486faf21f0d95150f607ad": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5497. Changed MRAppMaster to sleep only after doing everything else but just before ClientService to avoid race conditions during RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521699 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 5:38 PM",
      "commitName": "1c1ebc1553650ac8e4486faf21f0d95150f607ad",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/08/13 7:09 PM",
      "commitNameOld": "236b8530bd05015d3b8a8131b111454c54c9e55d",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 10.94,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n     // Send job-end notification\n     if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n       try {\n         LOG.info(\"Job end notification started for jobID : \"\n             + job.getReport().getJobId());\n         JobEndNotifier notifier \u003d new JobEndNotifier();\n         notifier.setConf(getConfig());\n         notifier.notify(job.getReport());\n       } catch (InterruptedException ie) {\n         LOG.warn(\"Job end notification interrupted for jobID : \"\n             + job.getReport().getJobId(), ie);\n       }\n     }\n \n-    // TODO:currently just wait for some time so clients can know the\n-    // final states. Will be removed once RM come on.\n-    try {\n-      Thread.sleep(5000);\n-    } catch (InterruptedException e) {\n-      e.printStackTrace();\n-    }\n-\n     try {\n       //if isLastAMRetry comes as true, should never set it to false\n       if ( !isLastAMRetry){\n         if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n           LOG.info(\"We are finishing cleanly so this is the last retry\");\n           isLastAMRetry \u003d true;\n         }\n       }\n       notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n+      // TODO: Stop ClientService last, since only ClientService should wait for\n+      // some time so clients can know the final states. Will be removed once RM come on.\n+      try {\n+        Thread.sleep(5000);\n+      } catch (InterruptedException e) {\n+        e.printStackTrace();\n+      }\n+      clientService.stop();\n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed \", t);\n     }\n \n     //Bring the process down by force.\n     //Not needed after HADOOP-7140\n     LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n     sysexit();   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n    // Send job-end notification\n    if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n      try {\n        LOG.info(\"Job end notification started for jobID : \"\n            + job.getReport().getJobId());\n        JobEndNotifier notifier \u003d new JobEndNotifier();\n        notifier.setConf(getConfig());\n        notifier.notify(job.getReport());\n      } catch (InterruptedException ie) {\n        LOG.warn(\"Job end notification interrupted for jobID : \"\n            + job.getReport().getJobId(), ie);\n      }\n    }\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"We are finishing cleanly so this is the last retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n      // TODO: Stop ClientService last, since only ClientService should wait for\n      // some time so clients can know the final states. Will be removed once RM come on.\n      try {\n        Thread.sleep(5000);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n      clientService.stop();\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed \", t);\n    }\n\n    //Bring the process down by force.\n    //Not needed after HADOOP-7140\n    LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n    sysexit();   \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5086. MR app master deletes staging dir when sent a reboot command from the RM. Contributed by Jian He\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1464255 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/13 6:56 PM",
      "commitName": "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "25/03/13 3:33 PM",
      "commitNameOld": "46315a2d914058969c7234272420c063ce268bf5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.14,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,50 @@\n   public void shutDownJob() {\n     // job has finished\n     // this is the only job, so shut down the Appmaster\n     // note in a workflow scenario, this may lead to creation of a new\n     // job (FIXME?)\n     // Send job-end notification\n     if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n       try {\n         LOG.info(\"Job end notification started for jobID : \"\n             + job.getReport().getJobId());\n         JobEndNotifier notifier \u003d new JobEndNotifier();\n         notifier.setConf(getConfig());\n         notifier.notify(job.getReport());\n       } catch (InterruptedException ie) {\n         LOG.warn(\"Job end notification interrupted for jobID : \"\n             + job.getReport().getJobId(), ie);\n       }\n     }\n \n     // TODO:currently just wait for some time so clients can know the\n     // final states. Will be removed once RM come on.\n     try {\n       Thread.sleep(5000);\n     } catch (InterruptedException e) {\n       e.printStackTrace();\n     }\n \n     try {\n-      //We are finishing cleanly so this is the last retry\n-      isLastAMRetry \u003d true;\n+      //if isLastAMRetry comes as true, should never set it to false\n+      if ( !isLastAMRetry){\n+        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n+          LOG.info(\"We are finishing cleanly so this is the last retry\");\n+          isLastAMRetry \u003d true;\n+        }\n+      }\n+      notifyIsLastAMRetry(isLastAMRetry);\n       // Stop all services\n       // This will also send the final report to the ResourceManager\n       LOG.info(\"Calling stop for all the services\");\n       MRAppMaster.this.stop();\n \n     } catch (Throwable t) {\n       LOG.warn(\"Graceful stop failed \", t);\n     }\n \n     //Bring the process down by force.\n     //Not needed after HADOOP-7140\n     LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n     sysexit();   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n    // Send job-end notification\n    if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n      try {\n        LOG.info(\"Job end notification started for jobID : \"\n            + job.getReport().getJobId());\n        JobEndNotifier notifier \u003d new JobEndNotifier();\n        notifier.setConf(getConfig());\n        notifier.notify(job.getReport());\n      } catch (InterruptedException ie) {\n        LOG.warn(\"Job end notification interrupted for jobID : \"\n            + job.getReport().getJobId(), ie);\n      }\n    }\n\n    // TODO:currently just wait for some time so clients can know the\n    // final states. Will be removed once RM come on.\n    try {\n      Thread.sleep(5000);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n\n    try {\n      //if isLastAMRetry comes as true, should never set it to false\n      if ( !isLastAMRetry){\n        if (((JobImpl)job).getInternalState() !\u003d JobStateInternal.REBOOT) {\n          LOG.info(\"We are finishing cleanly so this is the last retry\");\n          isLastAMRetry \u003d true;\n        }\n      }\n      notifyIsLastAMRetry(isLastAMRetry);\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed \", t);\n    }\n\n    //Bring the process down by force.\n    //Not needed after HADOOP-7140\n    LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n    sysexit();   \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "614a743fea5ab5181b2b7989bba84146e81039de": {
      "type": "Yintroduced",
      "commitMessage": "YARN-139. Interrupted Exception within AsyncDispatcher leads to user confusion. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401726 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 8:20 AM",
      "commitName": "614a743fea5ab5181b2b7989bba84146e81039de",
      "commitAuthor": "Jason Darrell Lowe",
      "diff": "@@ -0,0 +1,44 @@\n+  public void shutDownJob() {\n+    // job has finished\n+    // this is the only job, so shut down the Appmaster\n+    // note in a workflow scenario, this may lead to creation of a new\n+    // job (FIXME?)\n+    // Send job-end notification\n+    if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n+      try {\n+        LOG.info(\"Job end notification started for jobID : \"\n+            + job.getReport().getJobId());\n+        JobEndNotifier notifier \u003d new JobEndNotifier();\n+        notifier.setConf(getConfig());\n+        notifier.notify(job.getReport());\n+      } catch (InterruptedException ie) {\n+        LOG.warn(\"Job end notification interrupted for jobID : \"\n+            + job.getReport().getJobId(), ie);\n+      }\n+    }\n+\n+    // TODO:currently just wait for some time so clients can know the\n+    // final states. Will be removed once RM come on.\n+    try {\n+      Thread.sleep(5000);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+\n+    try {\n+      //We are finishing cleanly so this is the last retry\n+      isLastAMRetry \u003d true;\n+      // Stop all services\n+      // This will also send the final report to the ResourceManager\n+      LOG.info(\"Calling stop for all the services\");\n+      MRAppMaster.this.stop();\n+\n+    } catch (Throwable t) {\n+      LOG.warn(\"Graceful stop failed \", t);\n+    }\n+\n+    //Bring the process down by force.\n+    //Not needed after HADOOP-7140\n+    LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n+    sysexit();   \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutDownJob() {\n    // job has finished\n    // this is the only job, so shut down the Appmaster\n    // note in a workflow scenario, this may lead to creation of a new\n    // job (FIXME?)\n    // Send job-end notification\n    if (getConfig().get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL) !\u003d null) {\n      try {\n        LOG.info(\"Job end notification started for jobID : \"\n            + job.getReport().getJobId());\n        JobEndNotifier notifier \u003d new JobEndNotifier();\n        notifier.setConf(getConfig());\n        notifier.notify(job.getReport());\n      } catch (InterruptedException ie) {\n        LOG.warn(\"Job end notification interrupted for jobID : \"\n            + job.getReport().getJobId(), ie);\n      }\n    }\n\n    // TODO:currently just wait for some time so clients can know the\n    // final states. Will be removed once RM come on.\n    try {\n      Thread.sleep(5000);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n\n    try {\n      //We are finishing cleanly so this is the last retry\n      isLastAMRetry \u003d true;\n      // Stop all services\n      // This will also send the final report to the ResourceManager\n      LOG.info(\"Calling stop for all the services\");\n      MRAppMaster.this.stop();\n\n    } catch (Throwable t) {\n      LOG.warn(\"Graceful stop failed \", t);\n    }\n\n    //Bring the process down by force.\n    //Not needed after HADOOP-7140\n    LOG.info(\"Exiting MR AppMaster..GoodBye!\");\n    sysexit();   \n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java"
    }
  }
}