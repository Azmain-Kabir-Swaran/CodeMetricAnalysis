{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProtoUtil.java",
  "functionName": "makeIpcConnectionContext",
  "functionId": "makeIpcConnectionContext___protocol-String(modifiers-final)__ugi-UserGroupInformation(modifiers-final)__authMethod-AuthMethod(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ProtoUtil.java",
  "functionStartLine": 86,
  "functionEndLine": 117,
  "numCommitsSeen": 16,
  "timeTaken": 1369,
  "changeHistory": [
    "5f9b4c14a175873b4f82654513e289c657c694eb",
    "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9"
  ],
  "changeHistoryShort": {
    "5f9b4c14a175873b4f82654513e289c657c694eb": "Ybodychange",
    "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f9b4c14a175873b4f82654513e289c657c694eb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 1:09 PM",
      "commitName": "5f9b4c14a175873b4f82654513e289c657c694eb",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "17/12/12 2:16 PM",
      "commitNameOld": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 185.91,
      "commitsBetweenForRepo": 1111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public static IpcConnectionContextProto makeIpcConnectionContext(\n       final String protocol,\n       final UserGroupInformation ugi, final AuthMethod authMethod) {\n     IpcConnectionContextProto.Builder result \u003d IpcConnectionContextProto.newBuilder();\n     if (protocol !\u003d null) {\n       result.setProtocol(protocol);\n     }\n     UserInformationProto.Builder ugiProto \u003d  UserInformationProto.newBuilder();\n     if (ugi !\u003d null) {\n       /*\n        * In the connection context we send only additional user info that\n        * is not derived from the authentication done during connection setup.\n        */\n       if (authMethod \u003d\u003d AuthMethod.KERBEROS) {\n         // Real user was established as part of the connection.\n         // Send effective user only.\n         ugiProto.setEffectiveUser(ugi.getUserName());\n-      } else if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n+      } else if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n         // With token, the connection itself establishes \n         // both real and effective user. Hence send none in header.\n       } else {  // Simple authentication\n         // No user info is established as part of the connection.\n         // Send both effective user and real user\n         ugiProto.setEffectiveUser(ugi.getUserName());\n         if (ugi.getRealUser() !\u003d null) {\n           ugiProto.setRealUser(ugi.getRealUser().getUserName());\n         }\n       }\n     }   \n     result.setUserInfo(ugiProto);\n     return result.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IpcConnectionContextProto makeIpcConnectionContext(\n      final String protocol,\n      final UserGroupInformation ugi, final AuthMethod authMethod) {\n    IpcConnectionContextProto.Builder result \u003d IpcConnectionContextProto.newBuilder();\n    if (protocol !\u003d null) {\n      result.setProtocol(protocol);\n    }\n    UserInformationProto.Builder ugiProto \u003d  UserInformationProto.newBuilder();\n    if (ugi !\u003d null) {\n      /*\n       * In the connection context we send only additional user info that\n       * is not derived from the authentication done during connection setup.\n       */\n      if (authMethod \u003d\u003d AuthMethod.KERBEROS) {\n        // Real user was established as part of the connection.\n        // Send effective user only.\n        ugiProto.setEffectiveUser(ugi.getUserName());\n      } else if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n        // With token, the connection itself establishes \n        // both real and effective user. Hence send none in header.\n      } else {  // Simple authentication\n        // No user info is established as part of the connection.\n        // Send both effective user and real user\n        ugiProto.setEffectiveUser(ugi.getUserName());\n        if (ugi.getRealUser() !\u003d null) {\n          ugiProto.setRealUser(ugi.getRealUser().getUserName());\n        }\n      }\n    }   \n    result.setUserInfo(ugiProto);\n    return result.build();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ProtoUtil.java",
      "extendedDetails": {}
    },
    "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9": {
      "type": "Yintroduced",
      "commitMessage": "    HADOOP-7557 Make IPC header be extensible (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295261 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/02/12 12:43 PM",
      "commitName": "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,32 @@\n+  public static IpcConnectionContextProto makeIpcConnectionContext(\n+      final String protocol,\n+      final UserGroupInformation ugi, final AuthMethod authMethod) {\n+    IpcConnectionContextProto.Builder result \u003d IpcConnectionContextProto.newBuilder();\n+    if (protocol !\u003d null) {\n+      result.setProtocol(protocol);\n+    }\n+    UserInformationProto.Builder ugiProto \u003d  UserInformationProto.newBuilder();\n+    if (ugi !\u003d null) {\n+      /*\n+       * In the connection context we send only additional user info that\n+       * is not derived from the authentication done during connection setup.\n+       */\n+      if (authMethod \u003d\u003d AuthMethod.KERBEROS) {\n+        // Real user was established as part of the connection.\n+        // Send effective user only.\n+        ugiProto.setEffectiveUser(ugi.getUserName());\n+      } else if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n+        // With token, the connection itself establishes \n+        // both real and effective user. Hence send none in header.\n+      } else {  // Simple authentication\n+        // No user info is established as part of the connection.\n+        // Send both effective user and real user\n+        ugiProto.setEffectiveUser(ugi.getUserName());\n+        if (ugi.getRealUser() !\u003d null) {\n+          ugiProto.setRealUser(ugi.getRealUser().getUserName());\n+        }\n+      }\n+    }   \n+    result.setUserInfo(ugiProto);\n+    return result.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static IpcConnectionContextProto makeIpcConnectionContext(\n      final String protocol,\n      final UserGroupInformation ugi, final AuthMethod authMethod) {\n    IpcConnectionContextProto.Builder result \u003d IpcConnectionContextProto.newBuilder();\n    if (protocol !\u003d null) {\n      result.setProtocol(protocol);\n    }\n    UserInformationProto.Builder ugiProto \u003d  UserInformationProto.newBuilder();\n    if (ugi !\u003d null) {\n      /*\n       * In the connection context we send only additional user info that\n       * is not derived from the authentication done during connection setup.\n       */\n      if (authMethod \u003d\u003d AuthMethod.KERBEROS) {\n        // Real user was established as part of the connection.\n        // Send effective user only.\n        ugiProto.setEffectiveUser(ugi.getUserName());\n      } else if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n        // With token, the connection itself establishes \n        // both real and effective user. Hence send none in header.\n      } else {  // Simple authentication\n        // No user info is established as part of the connection.\n        // Send both effective user and real user\n        ugiProto.setEffectiveUser(ugi.getUserName());\n        if (ugi.getRealUser() !\u003d null) {\n          ugiProto.setRealUser(ugi.getRealUser().getUserName());\n        }\n      }\n    }   \n    result.setUserInfo(ugiProto);\n    return result.build();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ProtoUtil.java"
    }
  }
}