{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLocalizer.java",
  "functionName": "createStatus",
  "functionId": "createStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
  "functionStartLine": 356,
  "functionEndLine": 394,
  "numCommitsSeen": 41,
  "timeTaken": 8460,
  "changeHistory": [
    "1a18d5e514d13aa3a88e9b6089394a27296d6bc3",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "3ca3137179ef093e42cde06587c9ea785b10f32c",
    "2638bc67a48f923404d57ed2026c4997df6bd06e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "8fb67650b146573c20ae010e28b1eca6e16433b3",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "1a18d5e514d13aa3a88e9b6089394a27296d6bc3": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "3ca3137179ef093e42cde06587c9ea785b10f32c": "Ybodychange",
    "2638bc67a48f923404d57ed2026c4997df6bd06e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "8fb67650b146573c20ae010e28b1eca6e16433b3": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1a18d5e514d13aa3a88e9b6089394a27296d6bc3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6515. Fix warnings from Spotbugs in hadoop-yarn-server-nodemanager. Contributed by Naganarasimha G R.\n",
      "commitDate": "09/08/17 5:56 AM",
      "commitName": "1a18d5e514d13aa3a88e9b6089394a27296d6bc3",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "06/07/17 7:40 AM",
      "commitNameOld": "7576a688ea84aed7206321b1f03594e43a5f216e",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 33.93,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private LocalizerStatus createStatus() throws InterruptedException {\n     final List\u003cLocalResourceStatus\u003e currentResources \u003d\n       new ArrayList\u003cLocalResourceStatus\u003e();\n     // TODO: Synchronization??\n-    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n-         i.hasNext();) {\n-      LocalResource rsrc \u003d i.next();\n+    for (Iterator\u003cEntry\u003cLocalResource, Future\u003cPath\u003e\u003e\u003e i \u003d\n+        pendingResources.entrySet().iterator(); i.hasNext();) {\n+      Entry\u003cLocalResource, Future\u003cPath\u003e\u003e mapEntry \u003d i.next();\n       LocalResourceStatus stat \u003d\n         recordFactory.newRecordInstance(LocalResourceStatus.class);\n-      stat.setResource(rsrc);\n-      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n+      stat.setResource(mapEntry.getKey());\n+      Future\u003cPath\u003e fPath \u003d mapEntry.getValue();\n       if (fPath.isDone()) {\n         try {\n           Path localPath \u003d fPath.get();\n           stat.setLocalPath(\n               URL.fromPath(localPath));\n           stat.setLocalSize(\n               FileUtil.getDU(new File(localPath.getParent().toUri())));\n           stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n         } catch (ExecutionException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n           stat.setException(SerializedException.newInstance(e.getCause()));\n         } catch (CancellationException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n           stat.setException(SerializedException.newInstance(e));\n         }\n         // TODO shouldn\u0027t remove until ACK\n         i.remove();\n       } else {\n         stat.setStatus(ResourceStatusType.FETCH_PENDING);\n       }\n       currentResources.add(stat);\n     }\n     LocalizerStatus status \u003d\n       recordFactory.newRecordInstance(LocalizerStatus.class);\n     status.setLocalizerId(localizerId);\n     status.addAllResources(currentResources);\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalizerStatus createStatus() throws InterruptedException {\n    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n      new ArrayList\u003cLocalResourceStatus\u003e();\n    // TODO: Synchronization??\n    for (Iterator\u003cEntry\u003cLocalResource, Future\u003cPath\u003e\u003e\u003e i \u003d\n        pendingResources.entrySet().iterator(); i.hasNext();) {\n      Entry\u003cLocalResource, Future\u003cPath\u003e\u003e mapEntry \u003d i.next();\n      LocalResourceStatus stat \u003d\n        recordFactory.newRecordInstance(LocalResourceStatus.class);\n      stat.setResource(mapEntry.getKey());\n      Future\u003cPath\u003e fPath \u003d mapEntry.getValue();\n      if (fPath.isDone()) {\n        try {\n          Path localPath \u003d fPath.get();\n          stat.setLocalPath(\n              URL.fromPath(localPath));\n          stat.setLocalSize(\n              FileUtil.getDU(new File(localPath.getParent().toUri())));\n          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n        } catch (ExecutionException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(SerializedException.newInstance(e.getCause()));\n        } catch (CancellationException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(SerializedException.newInstance(e));\n        }\n        // TODO shouldn\u0027t remove until ACK\n        i.remove();\n      } else {\n        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n      }\n      currentResources.add(stat);\n    }\n    LocalizerStatus status \u003d\n      recordFactory.newRecordInstance(LocalizerStatus.class);\n    status.setLocalizerId(localizerId);\n    status.addAllResources(currentResources);\n    return status;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "25/05/16 6:31 AM",
      "commitNameOld": "c380a22031a62e2d2fe533079e3780f06b069943",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 20.36,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private LocalizerStatus createStatus() throws InterruptedException {\n     final List\u003cLocalResourceStatus\u003e currentResources \u003d\n       new ArrayList\u003cLocalResourceStatus\u003e();\n     // TODO: Synchronization??\n     for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n          i.hasNext();) {\n       LocalResource rsrc \u003d i.next();\n       LocalResourceStatus stat \u003d\n         recordFactory.newRecordInstance(LocalResourceStatus.class);\n       stat.setResource(rsrc);\n       Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n       if (fPath.isDone()) {\n         try {\n           Path localPath \u003d fPath.get();\n           stat.setLocalPath(\n-              ConverterUtils.getYarnUrlFromPath(localPath));\n+              URL.fromPath(localPath));\n           stat.setLocalSize(\n               FileUtil.getDU(new File(localPath.getParent().toUri())));\n           stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n         } catch (ExecutionException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n           stat.setException(SerializedException.newInstance(e.getCause()));\n         } catch (CancellationException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n           stat.setException(SerializedException.newInstance(e));\n         }\n         // TODO shouldn\u0027t remove until ACK\n         i.remove();\n       } else {\n         stat.setStatus(ResourceStatusType.FETCH_PENDING);\n       }\n       currentResources.add(stat);\n     }\n     LocalizerStatus status \u003d\n       recordFactory.newRecordInstance(LocalizerStatus.class);\n     status.setLocalizerId(localizerId);\n     status.addAllResources(currentResources);\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalizerStatus createStatus() throws InterruptedException {\n    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n      new ArrayList\u003cLocalResourceStatus\u003e();\n    // TODO: Synchronization??\n    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n         i.hasNext();) {\n      LocalResource rsrc \u003d i.next();\n      LocalResourceStatus stat \u003d\n        recordFactory.newRecordInstance(LocalResourceStatus.class);\n      stat.setResource(rsrc);\n      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n      if (fPath.isDone()) {\n        try {\n          Path localPath \u003d fPath.get();\n          stat.setLocalPath(\n              URL.fromPath(localPath));\n          stat.setLocalSize(\n              FileUtil.getDU(new File(localPath.getParent().toUri())));\n          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n        } catch (ExecutionException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(SerializedException.newInstance(e.getCause()));\n        } catch (CancellationException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(SerializedException.newInstance(e));\n        }\n        // TODO shouldn\u0027t remove until ACK\n        i.remove();\n      } else {\n        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n      }\n      currentResources.add(stat);\n    }\n    LocalizerStatus status \u003d\n      recordFactory.newRecordInstance(LocalizerStatus.class);\n    status.setLocalizerId(localizerId);\n    status.addAllResources(currentResources);\n    return status;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "3ca3137179ef093e42cde06587c9ea785b10f32c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/13 8:41 PM",
      "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/06/13 8:41 PM",
      "commitNameOld": "3f809667bc397ea372efe4b8f1aae7e2729b8ca0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 34.0,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   private LocalizerStatus createStatus() throws InterruptedException {\n     final List\u003cLocalResourceStatus\u003e currentResources \u003d\n       new ArrayList\u003cLocalResourceStatus\u003e();\n     // TODO: Synchronization??\n     for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n          i.hasNext();) {\n       LocalResource rsrc \u003d i.next();\n       LocalResourceStatus stat \u003d\n         recordFactory.newRecordInstance(LocalResourceStatus.class);\n       stat.setResource(rsrc);\n       Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n       if (fPath.isDone()) {\n         try {\n           Path localPath \u003d fPath.get();\n           stat.setLocalPath(\n               ConverterUtils.getYarnUrlFromPath(localPath));\n           stat.setLocalSize(\n               FileUtil.getDU(new File(localPath.getParent().toUri())));\n           stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n         } catch (ExecutionException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n-          stat.setException(\n-              YarnServerBuilderUtils.newSerializedException(e.getCause()));\n+          stat.setException(SerializedException.newInstance(e.getCause()));\n         } catch (CancellationException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n-          stat.setException(YarnServerBuilderUtils.newSerializedException(e));\n+          stat.setException(SerializedException.newInstance(e));\n         }\n         // TODO shouldn\u0027t remove until ACK\n         i.remove();\n       } else {\n         stat.setStatus(ResourceStatusType.FETCH_PENDING);\n       }\n       currentResources.add(stat);\n     }\n     LocalizerStatus status \u003d\n       recordFactory.newRecordInstance(LocalizerStatus.class);\n     status.setLocalizerId(localizerId);\n     status.addAllResources(currentResources);\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalizerStatus createStatus() throws InterruptedException {\n    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n      new ArrayList\u003cLocalResourceStatus\u003e();\n    // TODO: Synchronization??\n    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n         i.hasNext();) {\n      LocalResource rsrc \u003d i.next();\n      LocalResourceStatus stat \u003d\n        recordFactory.newRecordInstance(LocalResourceStatus.class);\n      stat.setResource(rsrc);\n      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n      if (fPath.isDone()) {\n        try {\n          Path localPath \u003d fPath.get();\n          stat.setLocalPath(\n              ConverterUtils.getYarnUrlFromPath(localPath));\n          stat.setLocalSize(\n              FileUtil.getDU(new File(localPath.getParent().toUri())));\n          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n        } catch (ExecutionException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(SerializedException.newInstance(e.getCause()));\n        } catch (CancellationException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(SerializedException.newInstance(e));\n        }\n        // TODO shouldn\u0027t remove until ACK\n        i.remove();\n      } else {\n        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n      }\n      currentResources.add(stat);\n    }\n    LocalizerStatus status \u003d\n      recordFactory.newRecordInstance(LocalizerStatus.class);\n    status.setLocalizerId(localizerId);\n    status.addAllResources(currentResources);\n    return status;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "2638bc67a48f923404d57ed2026c4997df6bd06e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-634. Modified YarnRemoteException to be not backed by PB and introduced a separate SerializedException record. Contributed by Siddharth Seth.\nMAPREDUCE-5239. Updated MR App to reflect YarnRemoteException changes after YARN-634. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/13 2:49 PM",
      "commitName": "2638bc67a48f923404d57ed2026c4997df6bd06e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/04/13 12:56 PM",
      "commitNameOld": "3a54a5653bf1ea0b5b98e223c7500a9606abf04d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 31.08,
      "commitsBetweenForRepo": 222,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   private LocalizerStatus createStatus() throws InterruptedException {\n     final List\u003cLocalResourceStatus\u003e currentResources \u003d\n       new ArrayList\u003cLocalResourceStatus\u003e();\n     // TODO: Synchronization??\n     for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n          i.hasNext();) {\n       LocalResource rsrc \u003d i.next();\n       LocalResourceStatus stat \u003d\n         recordFactory.newRecordInstance(LocalResourceStatus.class);\n       stat.setResource(rsrc);\n       Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n       if (fPath.isDone()) {\n         try {\n           Path localPath \u003d fPath.get();\n           stat.setLocalPath(\n               ConverterUtils.getYarnUrlFromPath(localPath));\n           stat.setLocalSize(\n               FileUtil.getDU(new File(localPath.getParent().toUri())));\n           stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n         } catch (ExecutionException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n-          stat.setException(RPCUtil.getRemoteException(e.getCause()));\n+          stat.setException(\n+              YarnServerBuilderUtils.newSerializedException(e.getCause()));\n         } catch (CancellationException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n-          stat.setException(RPCUtil.getRemoteException(e));\n+          stat.setException(YarnServerBuilderUtils.newSerializedException(e));\n         }\n         // TODO shouldn\u0027t remove until ACK\n         i.remove();\n       } else {\n         stat.setStatus(ResourceStatusType.FETCH_PENDING);\n       }\n       currentResources.add(stat);\n     }\n     LocalizerStatus status \u003d\n       recordFactory.newRecordInstance(LocalizerStatus.class);\n     status.setLocalizerId(localizerId);\n     status.addAllResources(currentResources);\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalizerStatus createStatus() throws InterruptedException {\n    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n      new ArrayList\u003cLocalResourceStatus\u003e();\n    // TODO: Synchronization??\n    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n         i.hasNext();) {\n      LocalResource rsrc \u003d i.next();\n      LocalResourceStatus stat \u003d\n        recordFactory.newRecordInstance(LocalResourceStatus.class);\n      stat.setResource(rsrc);\n      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n      if (fPath.isDone()) {\n        try {\n          Path localPath \u003d fPath.get();\n          stat.setLocalPath(\n              ConverterUtils.getYarnUrlFromPath(localPath));\n          stat.setLocalSize(\n              FileUtil.getDU(new File(localPath.getParent().toUri())));\n          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n        } catch (ExecutionException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(\n              YarnServerBuilderUtils.newSerializedException(e.getCause()));\n        } catch (CancellationException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(YarnServerBuilderUtils.newSerializedException(e));\n        }\n        // TODO shouldn\u0027t remove until ACK\n        i.remove();\n      } else {\n        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n      }\n      currentResources.add(stat);\n    }\n    LocalizerStatus status \u003d\n      recordFactory.newRecordInstance(LocalizerStatus.class);\n    status.setLocalizerId(localizerId);\n    status.addAllResources(currentResources);\n    return status;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private LocalizerStatus createStatus() throws InterruptedException {\n    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n      new ArrayList\u003cLocalResourceStatus\u003e();\n    // TODO: Synchronization??\n    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n         i.hasNext();) {\n      LocalResource rsrc \u003d i.next();\n      LocalResourceStatus stat \u003d\n        recordFactory.newRecordInstance(LocalResourceStatus.class);\n      stat.setResource(rsrc);\n      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n      if (fPath.isDone()) {\n        try {\n          Path localPath \u003d fPath.get();\n          stat.setLocalPath(\n              ConverterUtils.getYarnUrlFromPath(localPath));\n          stat.setLocalSize(\n              FileUtil.getDU(new File(localPath.getParent().toUri())));\n          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n        } catch (ExecutionException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(RPCUtil.getRemoteException(e.getCause()));\n        } catch (CancellationException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(RPCUtil.getRemoteException(e));\n        }\n        // TODO shouldn\u0027t remove until ACK\n        i.remove();\n      } else {\n        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n      }\n      currentResources.add(stat);\n    }\n    LocalizerStatus status \u003d\n      recordFactory.newRecordInstance(LocalizerStatus.class);\n    status.setLocalizerId(localizerId);\n    status.addAllResources(currentResources);\n    return status;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "8fb67650b146573c20ae010e28b1eca6e16433b3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2691. Finish up the cleanup of distributed cache file resources and related tests. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1167676 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/11 11:21 PM",
      "commitName": "8fb67650b146573c20ae010e28b1eca6e16433b3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 17.26,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private LocalizerStatus createStatus() throws InterruptedException {\n     final List\u003cLocalResourceStatus\u003e currentResources \u003d\n       new ArrayList\u003cLocalResourceStatus\u003e();\n     // TODO: Synchronization??\n     for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n          i.hasNext();) {\n       LocalResource rsrc \u003d i.next();\n       LocalResourceStatus stat \u003d\n         recordFactory.newRecordInstance(LocalResourceStatus.class);\n       stat.setResource(rsrc);\n       Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n       if (fPath.isDone()) {\n         try {\n           Path localPath \u003d fPath.get();\n           stat.setLocalPath(\n               ConverterUtils.getYarnUrlFromPath(localPath));\n           stat.setLocalSize(\n-              FileUtil.getDU(new File(localPath.getParent().toString())));\n+              FileUtil.getDU(new File(localPath.getParent().toUri())));\n           stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n         } catch (ExecutionException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n           stat.setException(RPCUtil.getRemoteException(e.getCause()));\n         } catch (CancellationException e) {\n           stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n           stat.setException(RPCUtil.getRemoteException(e));\n         }\n         // TODO shouldn\u0027t remove until ACK\n         i.remove();\n       } else {\n         stat.setStatus(ResourceStatusType.FETCH_PENDING);\n       }\n       currentResources.add(stat);\n     }\n     LocalizerStatus status \u003d\n       recordFactory.newRecordInstance(LocalizerStatus.class);\n     status.setLocalizerId(localizerId);\n     status.addAllResources(currentResources);\n     return status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalizerStatus createStatus() throws InterruptedException {\n    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n      new ArrayList\u003cLocalResourceStatus\u003e();\n    // TODO: Synchronization??\n    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n         i.hasNext();) {\n      LocalResource rsrc \u003d i.next();\n      LocalResourceStatus stat \u003d\n        recordFactory.newRecordInstance(LocalResourceStatus.class);\n      stat.setResource(rsrc);\n      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n      if (fPath.isDone()) {\n        try {\n          Path localPath \u003d fPath.get();\n          stat.setLocalPath(\n              ConverterUtils.getYarnUrlFromPath(localPath));\n          stat.setLocalSize(\n              FileUtil.getDU(new File(localPath.getParent().toUri())));\n          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n        } catch (ExecutionException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(RPCUtil.getRemoteException(e.getCause()));\n        } catch (CancellationException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(RPCUtil.getRemoteException(e));\n        }\n        // TODO shouldn\u0027t remove until ACK\n        i.remove();\n      } else {\n        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n      }\n      currentResources.add(stat);\n    }\n    LocalizerStatus status \u003d\n      recordFactory.newRecordInstance(LocalizerStatus.class);\n    status.setLocalizerId(localizerId);\n    status.addAllResources(currentResources);\n    return status;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private LocalizerStatus createStatus() throws InterruptedException {\n    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n      new ArrayList\u003cLocalResourceStatus\u003e();\n    // TODO: Synchronization??\n    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n         i.hasNext();) {\n      LocalResource rsrc \u003d i.next();\n      LocalResourceStatus stat \u003d\n        recordFactory.newRecordInstance(LocalResourceStatus.class);\n      stat.setResource(rsrc);\n      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n      if (fPath.isDone()) {\n        try {\n          Path localPath \u003d fPath.get();\n          stat.setLocalPath(\n              ConverterUtils.getYarnUrlFromPath(localPath));\n          stat.setLocalSize(\n              FileUtil.getDU(new File(localPath.getParent().toString())));\n          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n        } catch (ExecutionException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(RPCUtil.getRemoteException(e.getCause()));\n        } catch (CancellationException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(RPCUtil.getRemoteException(e));\n        }\n        // TODO shouldn\u0027t remove until ACK\n        i.remove();\n      } else {\n        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n      }\n      currentResources.add(stat);\n    }\n    LocalizerStatus status \u003d\n      recordFactory.newRecordInstance(LocalizerStatus.class);\n    status.setLocalizerId(localizerId);\n    status.addAllResources(currentResources);\n    return status;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,39 @@\n+  private LocalizerStatus createStatus() throws InterruptedException {\n+    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n+      new ArrayList\u003cLocalResourceStatus\u003e();\n+    // TODO: Synchronization??\n+    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n+         i.hasNext();) {\n+      LocalResource rsrc \u003d i.next();\n+      LocalResourceStatus stat \u003d\n+        recordFactory.newRecordInstance(LocalResourceStatus.class);\n+      stat.setResource(rsrc);\n+      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n+      if (fPath.isDone()) {\n+        try {\n+          Path localPath \u003d fPath.get();\n+          stat.setLocalPath(\n+              ConverterUtils.getYarnUrlFromPath(localPath));\n+          stat.setLocalSize(\n+              FileUtil.getDU(new File(localPath.getParent().toString())));\n+          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n+        } catch (ExecutionException e) {\n+          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n+          stat.setException(RPCUtil.getRemoteException(e.getCause()));\n+        } catch (CancellationException e) {\n+          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n+          stat.setException(RPCUtil.getRemoteException(e));\n+        }\n+        // TODO shouldn\u0027t remove until ACK\n+        i.remove();\n+      } else {\n+        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n+      }\n+      currentResources.add(stat);\n+    }\n+    LocalizerStatus status \u003d\n+      recordFactory.newRecordInstance(LocalizerStatus.class);\n+    status.setLocalizerId(localizerId);\n+    status.addAllResources(currentResources);\n+    return status;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private LocalizerStatus createStatus() throws InterruptedException {\n    final List\u003cLocalResourceStatus\u003e currentResources \u003d\n      new ArrayList\u003cLocalResourceStatus\u003e();\n    // TODO: Synchronization??\n    for (Iterator\u003cLocalResource\u003e i \u003d pendingResources.keySet().iterator();\n         i.hasNext();) {\n      LocalResource rsrc \u003d i.next();\n      LocalResourceStatus stat \u003d\n        recordFactory.newRecordInstance(LocalResourceStatus.class);\n      stat.setResource(rsrc);\n      Future\u003cPath\u003e fPath \u003d pendingResources.get(rsrc);\n      if (fPath.isDone()) {\n        try {\n          Path localPath \u003d fPath.get();\n          stat.setLocalPath(\n              ConverterUtils.getYarnUrlFromPath(localPath));\n          stat.setLocalSize(\n              FileUtil.getDU(new File(localPath.getParent().toString())));\n          stat.setStatus(ResourceStatusType.FETCH_SUCCESS);\n        } catch (ExecutionException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(RPCUtil.getRemoteException(e.getCause()));\n        } catch (CancellationException e) {\n          stat.setStatus(ResourceStatusType.FETCH_FAILURE);\n          stat.setException(RPCUtil.getRemoteException(e));\n        }\n        // TODO shouldn\u0027t remove until ACK\n        i.remove();\n      } else {\n        stat.setStatus(ResourceStatusType.FETCH_PENDING);\n      }\n      currentResources.add(stat);\n    }\n    LocalizerStatus status \u003d\n      recordFactory.newRecordInstance(LocalizerStatus.class);\n    status.setLocalizerId(localizerId);\n    status.addAllResources(currentResources);\n    return status;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
    }
  }
}