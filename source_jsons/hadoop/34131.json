{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupElasticMemoryController.java",
  "functionName": "resolveOOM",
  "functionId": "resolveOOM___executor-ExecutorService",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupElasticMemoryController.java",
  "functionStartLine": 336,
  "functionEndLine": 355,
  "numCommitsSeen": 2,
  "timeTaken": 910,
  "changeHistory": [
    "d9964799544eefcf424fcc178d987525f5356cdf"
  ],
  "changeHistoryShort": {
    "d9964799544eefcf424fcc178d987525f5356cdf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d9964799544eefcf424fcc178d987525f5356cdf": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4599. Set OOM control for memory cgroups. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "23/05/18 4:35 PM",
      "commitName": "d9964799544eefcf424fcc178d987525f5356cdf",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,20 @@\n+  private void resolveOOM(ExecutorService executor)\n+      throws InterruptedException, java.util.concurrent.ExecutionException {\n+    // Just log, when we are still in OOM after a couple of seconds\n+    final long start \u003d clock.getTime();\n+    Future\u003cBoolean\u003e watchdog \u003d\n+        executor.submit(() -\u003e watchAndLogOOMState(start));\n+    // Kill something to resolve the issue\n+    try {\n+      oomHandler.run();\n+    } catch (RuntimeException ex) {\n+      watchdog.cancel(true);\n+      throw new OOMNotResolvedException(\"OOM handler failed\", ex);\n+    }\n+    if (!watchdog.get()) {\n+      // If we are still in OOM,\n+      // the watchdog will trigger stop\n+      // listening to exit this loop\n+      throw new OOMNotResolvedException(\"OOM handler timed out\", null);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void resolveOOM(ExecutorService executor)\n      throws InterruptedException, java.util.concurrent.ExecutionException {\n    // Just log, when we are still in OOM after a couple of seconds\n    final long start \u003d clock.getTime();\n    Future\u003cBoolean\u003e watchdog \u003d\n        executor.submit(() -\u003e watchAndLogOOMState(start));\n    // Kill something to resolve the issue\n    try {\n      oomHandler.run();\n    } catch (RuntimeException ex) {\n      watchdog.cancel(true);\n      throw new OOMNotResolvedException(\"OOM handler failed\", ex);\n    }\n    if (!watchdog.get()) {\n      // If we are still in OOM,\n      // the watchdog will trigger stop\n      // listening to exit this loop\n      throw new OOMNotResolvedException(\"OOM handler timed out\", null);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupElasticMemoryController.java"
    }
  }
}