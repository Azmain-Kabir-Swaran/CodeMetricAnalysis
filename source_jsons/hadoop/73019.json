{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JceAesCtrCryptoCodec.java",
  "functionName": "setConf",
  "functionId": "setConf___conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/JceAesCtrCryptoCodec.java",
  "functionStartLine": 61,
  "functionEndLine": 75,
  "numCommitsSeen": 4,
  "timeTaken": 829,
  "changeHistory": [
    "b52b80d7bdcad00b95619544fa869af56746ebf0",
    "905c90b066503c966ff78e3d1add57f4aff6e9c6",
    "03c858dad46e440028c58a716630160338db4b14"
  ],
  "changeHistoryShort": {
    "b52b80d7bdcad00b95619544fa869af56746ebf0": "Ybodychange",
    "905c90b066503c966ff78e3d1add57f4aff6e9c6": "Ybodychange",
    "03c858dad46e440028c58a716630160338db4b14": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b52b80d7bdcad00b95619544fa869af56746ebf0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10853. Refactor get instance of CryptoCodec and support create via algorithm/mode/padding. (yliu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612513 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/14 1:38 AM",
      "commitName": "b52b80d7bdcad00b95619544fa869af56746ebf0",
      "commitAuthor": "Yi Liu",
      "commitDateOld": "11/07/14 6:29 PM",
      "commitNameOld": "905c90b066503c966ff78e3d1add57f4aff6e9c6",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 10.3,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n   public void setConf(Configuration conf) {\n     this.conf \u003d conf;\n     provider \u003d conf.get(HADOOP_SECURITY_CRYPTO_JCE_PROVIDER_KEY);\n     final String secureRandomAlg \u003d conf.get(\n         HADOOP_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY, \n         HADOOP_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT);\n     try {\n       random \u003d (provider !\u003d null) ? \n           SecureRandom.getInstance(secureRandomAlg, provider) : \n             SecureRandom.getInstance(secureRandomAlg);\n     } catch (GeneralSecurityException e) {\n-      throw new IllegalArgumentException(e);\n+      LOG.warn(e.getMessage());\n+      random \u003d new SecureRandom();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    this.conf \u003d conf;\n    provider \u003d conf.get(HADOOP_SECURITY_CRYPTO_JCE_PROVIDER_KEY);\n    final String secureRandomAlg \u003d conf.get(\n        HADOOP_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY, \n        HADOOP_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT);\n    try {\n      random \u003d (provider !\u003d null) ? \n          SecureRandom.getInstance(secureRandomAlg, provider) : \n            SecureRandom.getInstance(secureRandomAlg);\n    } catch (GeneralSecurityException e) {\n      LOG.warn(e.getMessage());\n      random \u003d new SecureRandom();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/JceAesCtrCryptoCodec.java",
      "extendedDetails": {}
    },
    "905c90b066503c966ff78e3d1add57f4aff6e9c6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10734. Implement high-performance secure random number sources. (Yi Liu via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609874 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/14 6:29 PM",
      "commitName": "905c90b066503c966ff78e3d1add57f4aff6e9c6",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/07/14 4:51 PM",
      "commitNameOld": "03c858dad46e440028c58a716630160338db4b14",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 8.07,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public void setConf(Configuration conf) {\n     this.conf \u003d conf;\n     provider \u003d conf.get(HADOOP_SECURITY_CRYPTO_JCE_PROVIDER_KEY);\n     final String secureRandomAlg \u003d conf.get(\n-        HADOOP_SECURITY_SECURE_RANDOM_ALGORITHM_KEY, \n-        HADOOP_SECURITY_SECURE_RANDOM_ALGORITHM_DEFAULT);\n+        HADOOP_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY, \n+        HADOOP_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT);\n     try {\n       random \u003d (provider !\u003d null) ? \n           SecureRandom.getInstance(secureRandomAlg, provider) : \n             SecureRandom.getInstance(secureRandomAlg);\n     } catch (GeneralSecurityException e) {\n       throw new IllegalArgumentException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    this.conf \u003d conf;\n    provider \u003d conf.get(HADOOP_SECURITY_CRYPTO_JCE_PROVIDER_KEY);\n    final String secureRandomAlg \u003d conf.get(\n        HADOOP_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_KEY, \n        HADOOP_SECURITY_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT);\n    try {\n      random \u003d (provider !\u003d null) ? \n          SecureRandom.getInstance(secureRandomAlg, provider) : \n            SecureRandom.getInstance(secureRandomAlg);\n    } catch (GeneralSecurityException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/JceAesCtrCryptoCodec.java",
      "extendedDetails": {}
    },
    "03c858dad46e440028c58a716630160338db4b14": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10693: add files left out of previous checkin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607769 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 4:51 PM",
      "commitName": "03c858dad46e440028c58a716630160338db4b14",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,14 @@\n+  public void setConf(Configuration conf) {\n+    this.conf \u003d conf;\n+    provider \u003d conf.get(HADOOP_SECURITY_CRYPTO_JCE_PROVIDER_KEY);\n+    final String secureRandomAlg \u003d conf.get(\n+        HADOOP_SECURITY_SECURE_RANDOM_ALGORITHM_KEY, \n+        HADOOP_SECURITY_SECURE_RANDOM_ALGORITHM_DEFAULT);\n+    try {\n+      random \u003d (provider !\u003d null) ? \n+          SecureRandom.getInstance(secureRandomAlg, provider) : \n+            SecureRandom.getInstance(secureRandomAlg);\n+    } catch (GeneralSecurityException e) {\n+      throw new IllegalArgumentException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    this.conf \u003d conf;\n    provider \u003d conf.get(HADOOP_SECURITY_CRYPTO_JCE_PROVIDER_KEY);\n    final String secureRandomAlg \u003d conf.get(\n        HADOOP_SECURITY_SECURE_RANDOM_ALGORITHM_KEY, \n        HADOOP_SECURITY_SECURE_RANDOM_ALGORITHM_DEFAULT);\n    try {\n      random \u003d (provider !\u003d null) ? \n          SecureRandom.getInstance(secureRandomAlg, provider) : \n            SecureRandom.getInstance(secureRandomAlg);\n    } catch (GeneralSecurityException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/JceAesCtrCryptoCodec.java"
    }
  }
}