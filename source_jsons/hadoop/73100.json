{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CryptoInputStream.java",
  "functionName": "read",
  "functionId": "read___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
  "functionStartLine": 159,
  "functionEndLine": 216,
  "numCommitsSeen": 19,
  "timeTaken": 1359,
  "changeHistory": [
    "58c0bb9ed9f4a2491395b63c68046562a73526c9",
    "d86db3f76f03a63c56e6dd9f5531d3b8a78980f6",
    "9c2848e076a5c72bda3ec928de1790137c70fbbc",
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d"
  ],
  "changeHistoryShort": {
    "58c0bb9ed9f4a2491395b63c68046562a73526c9": "Ybodychange",
    "d86db3f76f03a63c56e6dd9f5531d3b8a78980f6": "Ybodychange",
    "9c2848e076a5c72bda3ec928de1790137c70fbbc": "Ybodychange",
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": "Ybodychange",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "58c0bb9ed9f4a2491395b63c68046562a73526c9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6606. Optimize HDFS Encrypted Transport performance. (yliu)\n",
      "commitDate": "28/10/14 6:11 AM",
      "commitName": "58c0bb9ed9f4a2491395b63c68046562a73526c9",
      "commitAuthor": "yliu",
      "commitDateOld": "17/09/14 5:58 PM",
      "commitNameOld": "47e5e19831a363aa4d675fd23ab0d06e86809094",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 40.51,
      "commitsBetweenForRepo": 395,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,58 @@\n   public int read(byte[] b, int off, int len) throws IOException {\n     checkStream();\n     if (b \u003d\u003d null) {\n       throw new NullPointerException();\n     } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n       throw new IndexOutOfBoundsException();\n     } else if (len \u003d\u003d 0) {\n       return 0;\n     }\n     \n     final int remaining \u003d outBuffer.remaining();\n     if (remaining \u003e 0) {\n       int n \u003d Math.min(len, remaining);\n       outBuffer.get(b, off, n);\n       return n;\n     } else {\n       int n \u003d 0;\n       \n       /*\n        * Check whether the underlying stream is {@link ByteBufferReadable},\n        * it can avoid bytes copy.\n        */\n       if (usingByteBufferRead \u003d\u003d null) {\n-        if (in instanceof ByteBufferReadable) {\n+        if (isByteBufferReadable || isReadableByteChannel) {\n           try {\n-            n \u003d ((ByteBufferReadable) in).read(inBuffer);\n+            n \u003d isByteBufferReadable ? \n+                ((ByteBufferReadable) in).read(inBuffer) : \n+                  ((ReadableByteChannel) in).read(inBuffer);\n             usingByteBufferRead \u003d Boolean.TRUE;\n           } catch (UnsupportedOperationException e) {\n             usingByteBufferRead \u003d Boolean.FALSE;\n           }\n         } else {\n           usingByteBufferRead \u003d Boolean.FALSE;\n         }\n         if (!usingByteBufferRead) {\n           n \u003d readFromUnderlyingStream(inBuffer);\n         }\n       } else {\n         if (usingByteBufferRead) {\n-          n \u003d ((ByteBufferReadable) in).read(inBuffer);\n+          n \u003d isByteBufferReadable ? ((ByteBufferReadable) in).read(inBuffer) : \n+                ((ReadableByteChannel) in).read(inBuffer);\n         } else {\n           n \u003d readFromUnderlyingStream(inBuffer);\n         }\n       }\n       if (n \u003c\u003d 0) {\n         return n;\n       }\n       \n       streamOffset +\u003d n; // Read n bytes\n       decrypt(decryptor, inBuffer, outBuffer, padding);\n       padding \u003d afterDecryption(decryptor, inBuffer, streamOffset, iv);\n       n \u003d Math.min(len, outBuffer.remaining());\n       outBuffer.get(b, off, n);\n       return n;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(byte[] b, int off, int len) throws IOException {\n    checkStream();\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return 0;\n    }\n    \n    final int remaining \u003d outBuffer.remaining();\n    if (remaining \u003e 0) {\n      int n \u003d Math.min(len, remaining);\n      outBuffer.get(b, off, n);\n      return n;\n    } else {\n      int n \u003d 0;\n      \n      /*\n       * Check whether the underlying stream is {@link ByteBufferReadable},\n       * it can avoid bytes copy.\n       */\n      if (usingByteBufferRead \u003d\u003d null) {\n        if (isByteBufferReadable || isReadableByteChannel) {\n          try {\n            n \u003d isByteBufferReadable ? \n                ((ByteBufferReadable) in).read(inBuffer) : \n                  ((ReadableByteChannel) in).read(inBuffer);\n            usingByteBufferRead \u003d Boolean.TRUE;\n          } catch (UnsupportedOperationException e) {\n            usingByteBufferRead \u003d Boolean.FALSE;\n          }\n        } else {\n          usingByteBufferRead \u003d Boolean.FALSE;\n        }\n        if (!usingByteBufferRead) {\n          n \u003d readFromUnderlyingStream(inBuffer);\n        }\n      } else {\n        if (usingByteBufferRead) {\n          n \u003d isByteBufferReadable ? ((ByteBufferReadable) in).read(inBuffer) : \n                ((ReadableByteChannel) in).read(inBuffer);\n        } else {\n          n \u003d readFromUnderlyingStream(inBuffer);\n        }\n      }\n      if (n \u003c\u003d 0) {\n        return n;\n      }\n      \n      streamOffset +\u003d n; // Read n bytes\n      decrypt(decryptor, inBuffer, outBuffer, padding);\n      padding \u003d afterDecryption(decryptor, inBuffer, streamOffset, iv);\n      n \u003d Math.min(len, outBuffer.remaining());\n      outBuffer.get(b, off, n);\n      return n;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "d86db3f76f03a63c56e6dd9f5531d3b8a78980f6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10662. NullPointerException in CryptoInputStream while wrapped stream is not ByteBufferReadable. Add tests using normal stream. Contributed by Yi Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1600553 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/14 6:30 PM",
      "commitName": "d86db3f76f03a63c56e6dd9f5531d3b8a78980f6",
      "commitAuthor": "Yi Liu",
      "commitDateOld": "02/06/14 7:35 AM",
      "commitNameOld": "75ec5792dfc5472b2aa9da7030d4e2ae7421d87c",
      "commitAuthorOld": "Yi Liu",
      "daysBetweenCommits": 2.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,55 @@\n   public int read(byte[] b, int off, int len) throws IOException {\n     checkStream();\n     if (b \u003d\u003d null) {\n       throw new NullPointerException();\n     } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n       throw new IndexOutOfBoundsException();\n     } else if (len \u003d\u003d 0) {\n       return 0;\n     }\n     \n     final int remaining \u003d outBuffer.remaining();\n     if (remaining \u003e 0) {\n       int n \u003d Math.min(len, remaining);\n       outBuffer.get(b, off, n);\n       return n;\n     } else {\n       int n \u003d 0;\n       \n       /*\n        * Check whether the underlying stream is {@link ByteBufferReadable},\n        * it can avoid bytes copy.\n        */\n       if (usingByteBufferRead \u003d\u003d null) {\n         if (in instanceof ByteBufferReadable) {\n           try {\n             n \u003d ((ByteBufferReadable) in).read(inBuffer);\n             usingByteBufferRead \u003d Boolean.TRUE;\n           } catch (UnsupportedOperationException e) {\n             usingByteBufferRead \u003d Boolean.FALSE;\n           }\n+        } else {\n+          usingByteBufferRead \u003d Boolean.FALSE;\n         }\n         if (!usingByteBufferRead) {\n           n \u003d readFromUnderlyingStream(inBuffer);\n         }\n       } else {\n         if (usingByteBufferRead) {\n           n \u003d ((ByteBufferReadable) in).read(inBuffer);\n         } else {\n           n \u003d readFromUnderlyingStream(inBuffer);\n         }\n       }\n       if (n \u003c\u003d 0) {\n         return n;\n       }\n       \n       streamOffset +\u003d n; // Read n bytes\n       decrypt(decryptor, inBuffer, outBuffer, padding);\n       padding \u003d afterDecryption(decryptor, inBuffer, streamOffset, iv);\n       n \u003d Math.min(len, outBuffer.remaining());\n       outBuffer.get(b, off, n);\n       return n;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(byte[] b, int off, int len) throws IOException {\n    checkStream();\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return 0;\n    }\n    \n    final int remaining \u003d outBuffer.remaining();\n    if (remaining \u003e 0) {\n      int n \u003d Math.min(len, remaining);\n      outBuffer.get(b, off, n);\n      return n;\n    } else {\n      int n \u003d 0;\n      \n      /*\n       * Check whether the underlying stream is {@link ByteBufferReadable},\n       * it can avoid bytes copy.\n       */\n      if (usingByteBufferRead \u003d\u003d null) {\n        if (in instanceof ByteBufferReadable) {\n          try {\n            n \u003d ((ByteBufferReadable) in).read(inBuffer);\n            usingByteBufferRead \u003d Boolean.TRUE;\n          } catch (UnsupportedOperationException e) {\n            usingByteBufferRead \u003d Boolean.FALSE;\n          }\n        } else {\n          usingByteBufferRead \u003d Boolean.FALSE;\n        }\n        if (!usingByteBufferRead) {\n          n \u003d readFromUnderlyingStream(inBuffer);\n        }\n      } else {\n        if (usingByteBufferRead) {\n          n \u003d ((ByteBufferReadable) in).read(inBuffer);\n        } else {\n          n \u003d readFromUnderlyingStream(inBuffer);\n        }\n      }\n      if (n \u003c\u003d 0) {\n        return n;\n      }\n      \n      streamOffset +\u003d n; // Read n bytes\n      decrypt(decryptor, inBuffer, outBuffer, padding);\n      padding \u003d afterDecryption(decryptor, inBuffer, streamOffset, iv);\n      n \u003d Math.min(len, outBuffer.remaining());\n      outBuffer.get(b, off, n);\n      return n;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "9c2848e076a5c72bda3ec928de1790137c70fbbc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10632. Minor improvements to Crypto input and output streams. Contributed by Yi Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598485 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 1:08 AM",
      "commitName": "9c2848e076a5c72bda3ec928de1790137c70fbbc",
      "commitAuthor": "Yi Liu",
      "commitDateOld": "29/05/14 3:09 PM",
      "commitNameOld": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
      "commitAuthorOld": "Charles Lamb",
      "daysBetweenCommits": 0.42,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public int read(byte[] b, int off, int len) throws IOException {\n     checkStream();\n     if (b \u003d\u003d null) {\n       throw new NullPointerException();\n     } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n       throw new IndexOutOfBoundsException();\n     } else if (len \u003d\u003d 0) {\n       return 0;\n     }\n     \n     final int remaining \u003d outBuffer.remaining();\n     if (remaining \u003e 0) {\n       int n \u003d Math.min(len, remaining);\n       outBuffer.get(b, off, n);\n       return n;\n     } else {\n       int n \u003d 0;\n       \n       /*\n        * Check whether the underlying stream is {@link ByteBufferReadable},\n        * it can avoid bytes copy.\n        */\n       if (usingByteBufferRead \u003d\u003d null) {\n         if (in instanceof ByteBufferReadable) {\n           try {\n             n \u003d ((ByteBufferReadable) in).read(inBuffer);\n             usingByteBufferRead \u003d Boolean.TRUE;\n           } catch (UnsupportedOperationException e) {\n             usingByteBufferRead \u003d Boolean.FALSE;\n           }\n         }\n-        if (!usingByteBufferRead.booleanValue()) {\n-          n \u003d readFromUnderlyingStream();\n+        if (!usingByteBufferRead) {\n+          n \u003d readFromUnderlyingStream(inBuffer);\n         }\n       } else {\n-        if (usingByteBufferRead.booleanValue()) {\n+        if (usingByteBufferRead) {\n           n \u003d ((ByteBufferReadable) in).read(inBuffer);\n         } else {\n-          n \u003d readFromUnderlyingStream();\n+          n \u003d readFromUnderlyingStream(inBuffer);\n         }\n       }\n       if (n \u003c\u003d 0) {\n         return n;\n       }\n       \n       streamOffset +\u003d n; // Read n bytes\n-      decrypt();\n+      decrypt(decryptor, inBuffer, outBuffer, padding);\n+      padding \u003d afterDecryption(decryptor, inBuffer, streamOffset, iv);\n       n \u003d Math.min(len, outBuffer.remaining());\n       outBuffer.get(b, off, n);\n       return n;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(byte[] b, int off, int len) throws IOException {\n    checkStream();\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return 0;\n    }\n    \n    final int remaining \u003d outBuffer.remaining();\n    if (remaining \u003e 0) {\n      int n \u003d Math.min(len, remaining);\n      outBuffer.get(b, off, n);\n      return n;\n    } else {\n      int n \u003d 0;\n      \n      /*\n       * Check whether the underlying stream is {@link ByteBufferReadable},\n       * it can avoid bytes copy.\n       */\n      if (usingByteBufferRead \u003d\u003d null) {\n        if (in instanceof ByteBufferReadable) {\n          try {\n            n \u003d ((ByteBufferReadable) in).read(inBuffer);\n            usingByteBufferRead \u003d Boolean.TRUE;\n          } catch (UnsupportedOperationException e) {\n            usingByteBufferRead \u003d Boolean.FALSE;\n          }\n        }\n        if (!usingByteBufferRead) {\n          n \u003d readFromUnderlyingStream(inBuffer);\n        }\n      } else {\n        if (usingByteBufferRead) {\n          n \u003d ((ByteBufferReadable) in).read(inBuffer);\n        } else {\n          n \u003d readFromUnderlyingStream(inBuffer);\n        }\n      }\n      if (n \u003c\u003d 0) {\n        return n;\n      }\n      \n      streamOffset +\u003d n; // Read n bytes\n      decrypt(decryptor, inBuffer, outBuffer, padding);\n      padding \u003d afterDecryption(decryptor, inBuffer, streamOffset, iv);\n      n \u003d Math.min(len, outBuffer.remaining());\n      outBuffer.get(b, off, n);\n      return n;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10628. Javadoc and few code style improvement for Crypto input and output streams. (yliu via clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 3:09 PM",
      "commitName": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "23/05/14 6:19 PM",
      "commitNameOld": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthorOld": "Yi Liu",
      "daysBetweenCommits": 5.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n   public int read(byte[] b, int off, int len) throws IOException {\n     checkStream();\n     if (b \u003d\u003d null) {\n       throw new NullPointerException();\n     } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n       throw new IndexOutOfBoundsException();\n     } else if (len \u003d\u003d 0) {\n       return 0;\n     }\n     \n-    int remaining \u003d outBuffer.remaining();\n+    final int remaining \u003d outBuffer.remaining();\n     if (remaining \u003e 0) {\n       int n \u003d Math.min(len, remaining);\n       outBuffer.get(b, off, n);\n       return n;\n     } else {\n       int n \u003d 0;\n-      /**\n+      \n+      /*\n        * Check whether the underlying stream is {@link ByteBufferReadable},\n        * it can avoid bytes copy.\n        */\n       if (usingByteBufferRead \u003d\u003d null) {\n         if (in instanceof ByteBufferReadable) {\n           try {\n             n \u003d ((ByteBufferReadable) in).read(inBuffer);\n             usingByteBufferRead \u003d Boolean.TRUE;\n           } catch (UnsupportedOperationException e) {\n             usingByteBufferRead \u003d Boolean.FALSE;\n           }\n         }\n         if (!usingByteBufferRead.booleanValue()) {\n           n \u003d readFromUnderlyingStream();\n         }\n       } else {\n         if (usingByteBufferRead.booleanValue()) {\n           n \u003d ((ByteBufferReadable) in).read(inBuffer);\n         } else {\n           n \u003d readFromUnderlyingStream();\n         }\n       }\n       if (n \u003c\u003d 0) {\n         return n;\n       }\n       \n       streamOffset +\u003d n; // Read n bytes\n       decrypt();\n       n \u003d Math.min(len, outBuffer.remaining());\n       outBuffer.get(b, off, n);\n       return n;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(byte[] b, int off, int len) throws IOException {\n    checkStream();\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return 0;\n    }\n    \n    final int remaining \u003d outBuffer.remaining();\n    if (remaining \u003e 0) {\n      int n \u003d Math.min(len, remaining);\n      outBuffer.get(b, off, n);\n      return n;\n    } else {\n      int n \u003d 0;\n      \n      /*\n       * Check whether the underlying stream is {@link ByteBufferReadable},\n       * it can avoid bytes copy.\n       */\n      if (usingByteBufferRead \u003d\u003d null) {\n        if (in instanceof ByteBufferReadable) {\n          try {\n            n \u003d ((ByteBufferReadable) in).read(inBuffer);\n            usingByteBufferRead \u003d Boolean.TRUE;\n          } catch (UnsupportedOperationException e) {\n            usingByteBufferRead \u003d Boolean.FALSE;\n          }\n        }\n        if (!usingByteBufferRead.booleanValue()) {\n          n \u003d readFromUnderlyingStream();\n        }\n      } else {\n        if (usingByteBufferRead.booleanValue()) {\n          n \u003d ((ByteBufferReadable) in).read(inBuffer);\n        } else {\n          n \u003d readFromUnderlyingStream();\n        }\n      }\n      if (n \u003c\u003d 0) {\n        return n;\n      }\n      \n      streamOffset +\u003d n; // Read n bytes\n      decrypt();\n      n \u003d Math.min(len, outBuffer.remaining());\n      outBuffer.get(b, off, n);\n      return n;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10603. Crypto input and output streams implementing Hadoop stream interfaces. Contributed by Yi Liu and Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1597230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 6:19 PM",
      "commitName": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthor": "Yi Liu",
      "diff": "@@ -0,0 +1,51 @@\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    checkStream();\n+    if (b \u003d\u003d null) {\n+      throw new NullPointerException();\n+    } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n+      throw new IndexOutOfBoundsException();\n+    } else if (len \u003d\u003d 0) {\n+      return 0;\n+    }\n+    \n+    int remaining \u003d outBuffer.remaining();\n+    if (remaining \u003e 0) {\n+      int n \u003d Math.min(len, remaining);\n+      outBuffer.get(b, off, n);\n+      return n;\n+    } else {\n+      int n \u003d 0;\n+      /**\n+       * Check whether the underlying stream is {@link ByteBufferReadable},\n+       * it can avoid bytes copy.\n+       */\n+      if (usingByteBufferRead \u003d\u003d null) {\n+        if (in instanceof ByteBufferReadable) {\n+          try {\n+            n \u003d ((ByteBufferReadable) in).read(inBuffer);\n+            usingByteBufferRead \u003d Boolean.TRUE;\n+          } catch (UnsupportedOperationException e) {\n+            usingByteBufferRead \u003d Boolean.FALSE;\n+          }\n+        }\n+        if (!usingByteBufferRead.booleanValue()) {\n+          n \u003d readFromUnderlyingStream();\n+        }\n+      } else {\n+        if (usingByteBufferRead.booleanValue()) {\n+          n \u003d ((ByteBufferReadable) in).read(inBuffer);\n+        } else {\n+          n \u003d readFromUnderlyingStream();\n+        }\n+      }\n+      if (n \u003c\u003d 0) {\n+        return n;\n+      }\n+      \n+      streamOffset +\u003d n; // Read n bytes\n+      decrypt();\n+      n \u003d Math.min(len, outBuffer.remaining());\n+      outBuffer.get(b, off, n);\n+      return n;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(byte[] b, int off, int len) throws IOException {\n    checkStream();\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    } else if (off \u003c 0 || len \u003c 0 || len \u003e b.length - off) {\n      throw new IndexOutOfBoundsException();\n    } else if (len \u003d\u003d 0) {\n      return 0;\n    }\n    \n    int remaining \u003d outBuffer.remaining();\n    if (remaining \u003e 0) {\n      int n \u003d Math.min(len, remaining);\n      outBuffer.get(b, off, n);\n      return n;\n    } else {\n      int n \u003d 0;\n      /**\n       * Check whether the underlying stream is {@link ByteBufferReadable},\n       * it can avoid bytes copy.\n       */\n      if (usingByteBufferRead \u003d\u003d null) {\n        if (in instanceof ByteBufferReadable) {\n          try {\n            n \u003d ((ByteBufferReadable) in).read(inBuffer);\n            usingByteBufferRead \u003d Boolean.TRUE;\n          } catch (UnsupportedOperationException e) {\n            usingByteBufferRead \u003d Boolean.FALSE;\n          }\n        }\n        if (!usingByteBufferRead.booleanValue()) {\n          n \u003d readFromUnderlyingStream();\n        }\n      } else {\n        if (usingByteBufferRead.booleanValue()) {\n          n \u003d ((ByteBufferReadable) in).read(inBuffer);\n        } else {\n          n \u003d readFromUnderlyingStream();\n        }\n      }\n      if (n \u003c\u003d 0) {\n        return n;\n      }\n      \n      streamOffset +\u003d n; // Read n bytes\n      decrypt();\n      n \u003d Math.min(len, outBuffer.remaining());\n      outBuffer.get(b, off, n);\n      return n;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java"
    }
  }
}