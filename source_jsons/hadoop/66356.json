{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairSchedulerMetrics.java",
  "functionName": "trackApp",
  "functionId": "trackApp___appId-ApplicationId__oldAppId-String",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/FairSchedulerMetrics.java",
  "functionStartLine": 140,
  "functionEndLine": 146,
  "numCommitsSeen": 11,
  "timeTaken": 2273,
  "changeHistory": [
    "cc938e99ec0904824c8072184eff75619fcaf040",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "486e718fc1f5befd231494e2ec06bb360484f191",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "cc938e99ec0904824c8072184eff75619fcaf040": "Ymultichange(Yparameterchange,Ybodychange)",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cc938e99ec0904824c8072184eff75619fcaf040": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6326. Shouldn\u0027t use AppAttemptIds to fetch applications while AM Simulator tracks app in SLS (yufeigu via rkanter)\n",
      "commitDate": "21/03/17 3:21 PM",
      "commitName": "cc938e99ec0904824c8072184eff75619fcaf040",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6326. Shouldn\u0027t use AppAttemptIds to fetch applications while AM Simulator tracks app in SLS (yufeigu via rkanter)\n",
          "commitDate": "21/03/17 3:21 PM",
          "commitName": "cc938e99ec0904824c8072184eff75619fcaf040",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/05/16 8:54 AM",
          "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 296.27,
          "commitsBetweenForRepo": 2005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,7 @@\n-  public void trackApp(ApplicationAttemptId appAttemptId, String oldAppId) {\n-    super.trackApp(appAttemptId, oldAppId);\n-    FairScheduler fair \u003d (FairScheduler) scheduler;\n-    final FSAppAttempt app \u003d fair.getSchedulerApp(appAttemptId);\n-    metrics.register(\"variable.app.\" + oldAppId + \".demand.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return app.getDemand().getMemorySize();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".demand.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return app.getDemand().getVirtualCores();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".usage.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return app.getResourceUsage().getMemorySize();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".usage.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return app.getResourceUsage().getVirtualCores();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".minshare.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return app.getMinShare().getMemorySize();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".minshare.vcores\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return app.getMinShare().getMemorySize();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return Math.min(app.getMaxShare().getMemorySize(), totalMemoryMB);\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return Math.min(app.getMaxShare().getVirtualCores(), totalVCores);\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.memory\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return app.getFairShare().getVirtualCores();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return app.getFairShare().getVirtualCores();\n-        }\n-      }\n-    );\n+  public void trackApp(ApplicationId appId, String oldAppId) {\n+    super.trackApp(appId, oldAppId);\n+\n+    for (Metric metric: Metric.values()) {\n+      registerAppMetrics(appId, oldAppId, metric);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void trackApp(ApplicationId appId, String oldAppId) {\n    super.trackApp(appId, oldAppId);\n\n    for (Metric metric: Metric.values()) {\n      registerAppMetrics(appId, oldAppId, metric);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/FairSchedulerMetrics.java",
          "extendedDetails": {
            "oldValue": "[appAttemptId-ApplicationAttemptId, oldAppId-String]",
            "newValue": "[appId-ApplicationId, oldAppId-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6326. Shouldn\u0027t use AppAttemptIds to fetch applications while AM Simulator tracks app in SLS (yufeigu via rkanter)\n",
          "commitDate": "21/03/17 3:21 PM",
          "commitName": "cc938e99ec0904824c8072184eff75619fcaf040",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/05/16 8:54 AM",
          "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 296.27,
          "commitsBetweenForRepo": 2005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,7 @@\n-  public void trackApp(ApplicationAttemptId appAttemptId, String oldAppId) {\n-    super.trackApp(appAttemptId, oldAppId);\n-    FairScheduler fair \u003d (FairScheduler) scheduler;\n-    final FSAppAttempt app \u003d fair.getSchedulerApp(appAttemptId);\n-    metrics.register(\"variable.app.\" + oldAppId + \".demand.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return app.getDemand().getMemorySize();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".demand.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return app.getDemand().getVirtualCores();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".usage.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return app.getResourceUsage().getMemorySize();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".usage.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return app.getResourceUsage().getVirtualCores();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".minshare.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return app.getMinShare().getMemorySize();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".minshare.vcores\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return app.getMinShare().getMemorySize();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          return Math.min(app.getMaxShare().getMemorySize(), totalMemoryMB);\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return Math.min(app.getMaxShare().getVirtualCores(), totalVCores);\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.memory\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return app.getFairShare().getVirtualCores();\n-        }\n-      }\n-    );\n-    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          return app.getFairShare().getVirtualCores();\n-        }\n-      }\n-    );\n+  public void trackApp(ApplicationId appId, String oldAppId) {\n+    super.trackApp(appId, oldAppId);\n+\n+    for (Metric metric: Metric.values()) {\n+      registerAppMetrics(appId, oldAppId, metric);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void trackApp(ApplicationId appId, String oldAppId) {\n    super.trackApp(appId, oldAppId);\n\n    for (Metric metric: Metric.values()) {\n      registerAppMetrics(appId, oldAppId, metric);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/FairSchedulerMetrics.java",
          "extendedDetails": {}
        }
      ]
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "12/08/14 2:43 PM",
      "commitNameOld": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 655.76,
      "commitsBetweenForRepo": 5168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   public void trackApp(ApplicationAttemptId appAttemptId, String oldAppId) {\n     super.trackApp(appAttemptId, oldAppId);\n     FairScheduler fair \u003d (FairScheduler) scheduler;\n     final FSAppAttempt app \u003d fair.getSchedulerApp(appAttemptId);\n     metrics.register(\"variable.app.\" + oldAppId + \".demand.memory\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n-          return app.getDemand().getMemory();\n+        public Long getValue() {\n+          return app.getDemand().getMemorySize();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".demand.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getDemand().getVirtualCores();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".usage.memory\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n-          return app.getResourceUsage().getMemory();\n+        public Long getValue() {\n+          return app.getResourceUsage().getMemorySize();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".usage.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getResourceUsage().getVirtualCores();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".minshare.memory\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n-          return app.getMinShare().getMemory();\n+        public Long getValue() {\n+          return app.getMinShare().getMemorySize();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".minshare.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n-          return app.getMinShare().getMemory();\n+        public Long getValue() {\n+          return app.getMinShare().getMemorySize();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".maxshare.memory\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n-          return Math.min(app.getMaxShare().getMemory(), totalMemoryMB);\n+        public Long getValue() {\n+          return Math.min(app.getMaxShare().getMemorySize(), totalMemoryMB);\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".maxshare.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return Math.min(app.getMaxShare().getVirtualCores(), totalVCores);\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".fairshare.memory\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getFairShare().getVirtualCores();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".fairshare.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getFairShare().getVirtualCores();\n         }\n       }\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void trackApp(ApplicationAttemptId appAttemptId, String oldAppId) {\n    super.trackApp(appAttemptId, oldAppId);\n    FairScheduler fair \u003d (FairScheduler) scheduler;\n    final FSAppAttempt app \u003d fair.getSchedulerApp(appAttemptId);\n    metrics.register(\"variable.app.\" + oldAppId + \".demand.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          return app.getDemand().getMemorySize();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".demand.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getDemand().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".usage.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          return app.getResourceUsage().getMemorySize();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".usage.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getResourceUsage().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".minshare.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          return app.getMinShare().getMemorySize();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".minshare.vcores\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          return app.getMinShare().getMemorySize();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          return Math.min(app.getMaxShare().getMemorySize(), totalMemoryMB);\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return Math.min(app.getMaxShare().getVirtualCores(), totalVCores);\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getFairShare().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getFairShare().getVirtualCores();\n        }\n      }\n    );\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/FairSchedulerMetrics.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "25/07/14 10:12 AM",
      "commitNameOld": "77363b9d839e47bef2325b8682eabe00d4c83354",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 18.19,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,85 @@\n   public void trackApp(ApplicationAttemptId appAttemptId, String oldAppId) {\n     super.trackApp(appAttemptId, oldAppId);\n     FairScheduler fair \u003d (FairScheduler) scheduler;\n-    final AppSchedulable app \u003d fair.getSchedulerApp(appAttemptId)\n-            .getAppSchedulable();\n+    final FSAppAttempt app \u003d fair.getSchedulerApp(appAttemptId);\n     metrics.register(\"variable.app.\" + oldAppId + \".demand.memory\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getDemand().getMemory();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".demand.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getDemand().getVirtualCores();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".usage.memory\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getResourceUsage().getMemory();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".usage.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getResourceUsage().getVirtualCores();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".minshare.memory\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getMinShare().getMemory();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".minshare.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getMinShare().getMemory();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".maxshare.memory\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return Math.min(app.getMaxShare().getMemory(), totalMemoryMB);\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".maxshare.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return Math.min(app.getMaxShare().getVirtualCores(), totalVCores);\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".fairshare.memory\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getFairShare().getVirtualCores();\n         }\n       }\n     );\n     metrics.register(\"variable.app.\" + oldAppId + \".fairshare.vcores\",\n       new Gauge\u003cInteger\u003e() {\n         @Override\n         public Integer getValue() {\n           return app.getFairShare().getVirtualCores();\n         }\n       }\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void trackApp(ApplicationAttemptId appAttemptId, String oldAppId) {\n    super.trackApp(appAttemptId, oldAppId);\n    FairScheduler fair \u003d (FairScheduler) scheduler;\n    final FSAppAttempt app \u003d fair.getSchedulerApp(appAttemptId);\n    metrics.register(\"variable.app.\" + oldAppId + \".demand.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getDemand().getMemory();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".demand.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getDemand().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".usage.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getResourceUsage().getMemory();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".usage.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getResourceUsage().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".minshare.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getMinShare().getMemory();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".minshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getMinShare().getMemory();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return Math.min(app.getMaxShare().getMemory(), totalMemoryMB);\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return Math.min(app.getMaxShare().getVirtualCores(), totalVCores);\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getFairShare().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getFairShare().getVirtualCores();\n        }\n      }\n    );\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/FairSchedulerMetrics.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,86 @@\n+  public void trackApp(ApplicationAttemptId appAttemptId, String oldAppId) {\n+    super.trackApp(appAttemptId, oldAppId);\n+    FairScheduler fair \u003d (FairScheduler) scheduler;\n+    final AppSchedulable app \u003d fair.getSchedulerApp(appAttemptId)\n+            .getAppSchedulable();\n+    metrics.register(\"variable.app.\" + oldAppId + \".demand.memory\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return app.getDemand().getMemory();\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".demand.vcores\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return app.getDemand().getVirtualCores();\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".usage.memory\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return app.getResourceUsage().getMemory();\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".usage.vcores\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return app.getResourceUsage().getVirtualCores();\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".minshare.memory\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return app.getMinShare().getMemory();\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".minshare.vcores\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return app.getMinShare().getMemory();\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.memory\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return Math.min(app.getMaxShare().getMemory(), totalMemoryMB);\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.vcores\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return Math.min(app.getMaxShare().getVirtualCores(), totalVCores);\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.memory\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return app.getFairShare().getVirtualCores();\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.vcores\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          return app.getFairShare().getVirtualCores();\n+        }\n+      }\n+    );\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void trackApp(ApplicationAttemptId appAttemptId, String oldAppId) {\n    super.trackApp(appAttemptId, oldAppId);\n    FairScheduler fair \u003d (FairScheduler) scheduler;\n    final AppSchedulable app \u003d fair.getSchedulerApp(appAttemptId)\n            .getAppSchedulable();\n    metrics.register(\"variable.app.\" + oldAppId + \".demand.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getDemand().getMemory();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".demand.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getDemand().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".usage.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getResourceUsage().getMemory();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".usage.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getResourceUsage().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".minshare.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getMinShare().getMemory();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".minshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getMinShare().getMemory();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return Math.min(app.getMaxShare().getMemory(), totalMemoryMB);\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".maxshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return Math.min(app.getMaxShare().getVirtualCores(), totalVCores);\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getFairShare().getVirtualCores();\n        }\n      }\n    );\n    metrics.register(\"variable.app.\" + oldAppId + \".fairshare.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          return app.getFairShare().getVirtualCores();\n        }\n      }\n    );\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/FairSchedulerMetrics.java"
    }
  }
}