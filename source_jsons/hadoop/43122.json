{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "stopService",
  "functionId": "stopService___appName-String__destroy-boolean__ugi-UserGroupInformation(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 247,
  "functionEndLine": 310,
  "numCommitsSeen": 40,
  "timeTaken": 3477,
  "changeHistory": [
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "d553799030a5a64df328319aceb35734d0b2de20",
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "b57144a1726e0b02abbdc3e8f37769d3f7c039c8",
    "40ab068eabe50875449d601471619a4e82fff86d"
  ],
  "changeHistoryShort": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": "Ybodychange",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "d553799030a5a64df328319aceb35734d0b2de20": "Ymultichange(Yexceptionschange,Ybodychange)",
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa": "Ybodychange",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "b57144a1726e0b02abbdc3e8f37769d3f7c039c8": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9067. YARN Resource Manager is running OOM because of leak of Configuration Object. Contributed by Eric Yang.\n",
      "commitDate": "28/11/18 5:34 PM",
      "commitName": "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/11/18 4:53 PM",
      "commitNameOld": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,64 @@\n   private Response stopService(String appName, boolean destroy,\n       final UserGroupInformation ugi) throws Exception {\n     int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n       @Override\n       public Integer run() throws Exception {\n         int result \u003d 0;\n         ServiceClient sc \u003d getServiceClient();\n-        sc.init(YARN_CONFIG);\n-        sc.start();\n-        Exception stopException \u003d null;\n         try {\n-          result \u003d sc.actionStop(appName, destroy);\n-          if (result \u003d\u003d EXIT_SUCCESS) {\n-            LOG.info(\"Successfully stopped service {}\", appName);\n+          sc.init(YARN_CONFIG);\n+          sc.start();\n+          Exception stopException \u003d null;\n+          try {\n+            result \u003d sc.actionStop(appName, destroy);\n+            if (result \u003d\u003d EXIT_SUCCESS) {\n+              LOG.info(\"Successfully stopped service {}\", appName);\n+            }\n+          } catch (Exception e) {\n+            LOG.info(\"Got exception stopping service\", e);\n+            stopException \u003d e;\n           }\n-        } catch (Exception e) {\n-          LOG.info(\"Got exception stopping service\", e);\n-          stopException \u003d e;\n+          if (destroy) {\n+            result \u003d sc.actionDestroy(appName);\n+            if (result \u003d\u003d EXIT_SUCCESS) {\n+              LOG.info(\"Successfully deleted service {}\", appName);\n+            }\n+          } else {\n+            if (stopException !\u003d null) {\n+              throw stopException;\n+            }\n+          }\n+        } finally {\n+          sc.close();\n         }\n-        if (destroy) {\n-          result \u003d sc.actionDestroy(appName);\n-          if (result \u003d\u003d EXIT_SUCCESS) {\n-            LOG.info(\"Successfully deleted service {}\", appName);\n-          }\n-        } else {\n-          if (stopException !\u003d null) {\n-            throw stopException;\n-          }\n-        }\n-        sc.close();\n         return result;\n       }\n     });\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     if (destroy) {\n       if (result \u003d\u003d EXIT_SUCCESS) {\n         serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n             appName);\n       } else {\n         if (result \u003d\u003d EXIT_NOT_FOUND) {\n           serviceStatus\n               .setDiagnostics(\"Service \" + appName + \" doesn\u0027t exist\");\n           return formatResponse(Status.BAD_REQUEST, serviceStatus);\n         } else {\n           serviceStatus\n               .setDiagnostics(\"Service \" + appName + \" error cleaning up \" +\n                   \"registry\");\n           return formatResponse(Status.INTERNAL_SERVER_ERROR, serviceStatus);\n         }\n       }\n     } else {\n       if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n         serviceStatus\n             .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n         return formatResponse(Status.BAD_REQUEST, serviceStatus);\n       } else {\n         serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n       }\n     }\n     return formatResponse(Status.OK, serviceStatus);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response stopService(String appName, boolean destroy,\n      final UserGroupInformation ugi) throws Exception {\n    int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n      @Override\n      public Integer run() throws Exception {\n        int result \u003d 0;\n        ServiceClient sc \u003d getServiceClient();\n        try {\n          sc.init(YARN_CONFIG);\n          sc.start();\n          Exception stopException \u003d null;\n          try {\n            result \u003d sc.actionStop(appName, destroy);\n            if (result \u003d\u003d EXIT_SUCCESS) {\n              LOG.info(\"Successfully stopped service {}\", appName);\n            }\n          } catch (Exception e) {\n            LOG.info(\"Got exception stopping service\", e);\n            stopException \u003d e;\n          }\n          if (destroy) {\n            result \u003d sc.actionDestroy(appName);\n            if (result \u003d\u003d EXIT_SUCCESS) {\n              LOG.info(\"Successfully deleted service {}\", appName);\n            }\n          } else {\n            if (stopException !\u003d null) {\n              throw stopException;\n            }\n          }\n        } finally {\n          sc.close();\n        }\n        return result;\n      }\n    });\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    if (destroy) {\n      if (result \u003d\u003d EXIT_SUCCESS) {\n        serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n            appName);\n      } else {\n        if (result \u003d\u003d EXIT_NOT_FOUND) {\n          serviceStatus\n              .setDiagnostics(\"Service \" + appName + \" doesn\u0027t exist\");\n          return formatResponse(Status.BAD_REQUEST, serviceStatus);\n        } else {\n          serviceStatus\n              .setDiagnostics(\"Service \" + appName + \" error cleaning up \" +\n                  \"registry\");\n          return formatResponse(Status.INTERNAL_SERVER_ERROR, serviceStatus);\n        }\n      }\n    } else {\n      if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n        serviceStatus\n            .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n        return formatResponse(Status.BAD_REQUEST, serviceStatus);\n      } else {\n        serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n      }\n    }\n    return formatResponse(Status.OK, serviceStatus);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Response stopService(String appName, boolean destroy,\n      final UserGroupInformation ugi) throws Exception {\n    int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n      @Override\n      public Integer run() throws Exception {\n        int result \u003d 0;\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        Exception stopException \u003d null;\n        try {\n          result \u003d sc.actionStop(appName, destroy);\n          if (result \u003d\u003d EXIT_SUCCESS) {\n            LOG.info(\"Successfully stopped service {}\", appName);\n          }\n        } catch (Exception e) {\n          LOG.info(\"Got exception stopping service\", e);\n          stopException \u003d e;\n        }\n        if (destroy) {\n          result \u003d sc.actionDestroy(appName);\n          if (result \u003d\u003d EXIT_SUCCESS) {\n            LOG.info(\"Successfully deleted service {}\", appName);\n          }\n        } else {\n          if (stopException !\u003d null) {\n            throw stopException;\n          }\n        }\n        sc.close();\n        return result;\n      }\n    });\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    if (destroy) {\n      if (result \u003d\u003d EXIT_SUCCESS) {\n        serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n            appName);\n      } else {\n        if (result \u003d\u003d EXIT_NOT_FOUND) {\n          serviceStatus\n              .setDiagnostics(\"Service \" + appName + \" doesn\u0027t exist\");\n          return formatResponse(Status.BAD_REQUEST, serviceStatus);\n        } else {\n          serviceStatus\n              .setDiagnostics(\"Service \" + appName + \" error cleaning up \" +\n                  \"registry\");\n          return formatResponse(Status.INTERNAL_SERVER_ERROR, serviceStatus);\n        }\n      }\n    } else {\n      if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n        serviceStatus\n            .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n        return formatResponse(Status.BAD_REQUEST, serviceStatus);\n      } else {\n        serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n      }\n    }\n    return formatResponse(Status.OK, serviceStatus);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "d553799030a5a64df328319aceb35734d0b2de20": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7984. Improved YARN service stop/destroy and clean up.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "10/04/18 2:40 PM",
      "commitName": "d553799030a5a64df328319aceb35734d0b2de20",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7984. Improved YARN service stop/destroy and clean up.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "10/04/18 2:40 PM",
          "commitName": "d553799030a5a64df328319aceb35734d0b2de20",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "26/03/18 3:46 PM",
          "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 14.95,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,61 @@\n   private Response stopService(String appName, boolean destroy,\n-      final UserGroupInformation ugi) throws IOException,\n-      InterruptedException, YarnException, FileNotFoundException {\n+      final UserGroupInformation ugi) throws Exception {\n     int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n       @Override\n-      public Integer run() throws IOException, YarnException,\n-          FileNotFoundException {\n+      public Integer run() throws Exception {\n         int result \u003d 0;\n         ServiceClient sc \u003d getServiceClient();\n         sc.init(YARN_CONFIG);\n         sc.start();\n-        result \u003d sc.actionStop(appName, destroy);\n-        if (result \u003d\u003d EXIT_SUCCESS) {\n-          LOG.info(\"Successfully stopped service {}\", appName);\n+        Exception stopException \u003d null;\n+        try {\n+          result \u003d sc.actionStop(appName, destroy);\n+          if (result \u003d\u003d EXIT_SUCCESS) {\n+            LOG.info(\"Successfully stopped service {}\", appName);\n+          }\n+        } catch (Exception e) {\n+          LOG.info(\"Got exception stopping service\", e);\n+          stopException \u003d e;\n         }\n         if (destroy) {\n           result \u003d sc.actionDestroy(appName);\n-          LOG.info(\"Successfully deleted service {}\", appName);\n+          if (result \u003d\u003d EXIT_SUCCESS) {\n+            LOG.info(\"Successfully deleted service {}\", appName);\n+          }\n+        } else {\n+          if (stopException !\u003d null) {\n+            throw stopException;\n+          }\n         }\n         sc.close();\n         return result;\n       }\n     });\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     if (destroy) {\n-      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n-          appName);\n+      if (result \u003d\u003d EXIT_SUCCESS) {\n+        serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n+            appName);\n+      } else {\n+        if (result \u003d\u003d EXIT_NOT_FOUND) {\n+          serviceStatus\n+              .setDiagnostics(\"Service \" + appName + \" doesn\u0027t exist\");\n+          return formatResponse(Status.BAD_REQUEST, serviceStatus);\n+        } else {\n+          serviceStatus\n+              .setDiagnostics(\"Service \" + appName + \" error cleaning up \" +\n+                  \"registry\");\n+          return formatResponse(Status.INTERNAL_SERVER_ERROR, serviceStatus);\n+        }\n+      }\n     } else {\n       if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n         serviceStatus\n             .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n         return formatResponse(Status.BAD_REQUEST, serviceStatus);\n       } else {\n         serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n       }\n     }\n     return formatResponse(Status.OK, serviceStatus);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response stopService(String appName, boolean destroy,\n      final UserGroupInformation ugi) throws Exception {\n    int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n      @Override\n      public Integer run() throws Exception {\n        int result \u003d 0;\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        Exception stopException \u003d null;\n        try {\n          result \u003d sc.actionStop(appName, destroy);\n          if (result \u003d\u003d EXIT_SUCCESS) {\n            LOG.info(\"Successfully stopped service {}\", appName);\n          }\n        } catch (Exception e) {\n          LOG.info(\"Got exception stopping service\", e);\n          stopException \u003d e;\n        }\n        if (destroy) {\n          result \u003d sc.actionDestroy(appName);\n          if (result \u003d\u003d EXIT_SUCCESS) {\n            LOG.info(\"Successfully deleted service {}\", appName);\n          }\n        } else {\n          if (stopException !\u003d null) {\n            throw stopException;\n          }\n        }\n        sc.close();\n        return result;\n      }\n    });\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    if (destroy) {\n      if (result \u003d\u003d EXIT_SUCCESS) {\n        serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n            appName);\n      } else {\n        if (result \u003d\u003d EXIT_NOT_FOUND) {\n          serviceStatus\n              .setDiagnostics(\"Service \" + appName + \" doesn\u0027t exist\");\n          return formatResponse(Status.BAD_REQUEST, serviceStatus);\n        } else {\n          serviceStatus\n              .setDiagnostics(\"Service \" + appName + \" error cleaning up \" +\n                  \"registry\");\n          return formatResponse(Status.INTERNAL_SERVER_ERROR, serviceStatus);\n        }\n      }\n    } else {\n      if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n        serviceStatus\n            .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n        return formatResponse(Status.BAD_REQUEST, serviceStatus);\n      } else {\n        serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n      }\n    }\n    return formatResponse(Status.OK, serviceStatus);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[IOException, InterruptedException, YarnException, FileNotFoundException]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7984. Improved YARN service stop/destroy and clean up.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "10/04/18 2:40 PM",
          "commitName": "d553799030a5a64df328319aceb35734d0b2de20",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "26/03/18 3:46 PM",
          "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 14.95,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,61 @@\n   private Response stopService(String appName, boolean destroy,\n-      final UserGroupInformation ugi) throws IOException,\n-      InterruptedException, YarnException, FileNotFoundException {\n+      final UserGroupInformation ugi) throws Exception {\n     int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n       @Override\n-      public Integer run() throws IOException, YarnException,\n-          FileNotFoundException {\n+      public Integer run() throws Exception {\n         int result \u003d 0;\n         ServiceClient sc \u003d getServiceClient();\n         sc.init(YARN_CONFIG);\n         sc.start();\n-        result \u003d sc.actionStop(appName, destroy);\n-        if (result \u003d\u003d EXIT_SUCCESS) {\n-          LOG.info(\"Successfully stopped service {}\", appName);\n+        Exception stopException \u003d null;\n+        try {\n+          result \u003d sc.actionStop(appName, destroy);\n+          if (result \u003d\u003d EXIT_SUCCESS) {\n+            LOG.info(\"Successfully stopped service {}\", appName);\n+          }\n+        } catch (Exception e) {\n+          LOG.info(\"Got exception stopping service\", e);\n+          stopException \u003d e;\n         }\n         if (destroy) {\n           result \u003d sc.actionDestroy(appName);\n-          LOG.info(\"Successfully deleted service {}\", appName);\n+          if (result \u003d\u003d EXIT_SUCCESS) {\n+            LOG.info(\"Successfully deleted service {}\", appName);\n+          }\n+        } else {\n+          if (stopException !\u003d null) {\n+            throw stopException;\n+          }\n         }\n         sc.close();\n         return result;\n       }\n     });\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     if (destroy) {\n-      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n-          appName);\n+      if (result \u003d\u003d EXIT_SUCCESS) {\n+        serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n+            appName);\n+      } else {\n+        if (result \u003d\u003d EXIT_NOT_FOUND) {\n+          serviceStatus\n+              .setDiagnostics(\"Service \" + appName + \" doesn\u0027t exist\");\n+          return formatResponse(Status.BAD_REQUEST, serviceStatus);\n+        } else {\n+          serviceStatus\n+              .setDiagnostics(\"Service \" + appName + \" error cleaning up \" +\n+                  \"registry\");\n+          return formatResponse(Status.INTERNAL_SERVER_ERROR, serviceStatus);\n+        }\n+      }\n     } else {\n       if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n         serviceStatus\n             .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n         return formatResponse(Status.BAD_REQUEST, serviceStatus);\n       } else {\n         serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n       }\n     }\n     return formatResponse(Status.OK, serviceStatus);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response stopService(String appName, boolean destroy,\n      final UserGroupInformation ugi) throws Exception {\n    int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n      @Override\n      public Integer run() throws Exception {\n        int result \u003d 0;\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        Exception stopException \u003d null;\n        try {\n          result \u003d sc.actionStop(appName, destroy);\n          if (result \u003d\u003d EXIT_SUCCESS) {\n            LOG.info(\"Successfully stopped service {}\", appName);\n          }\n        } catch (Exception e) {\n          LOG.info(\"Got exception stopping service\", e);\n          stopException \u003d e;\n        }\n        if (destroy) {\n          result \u003d sc.actionDestroy(appName);\n          if (result \u003d\u003d EXIT_SUCCESS) {\n            LOG.info(\"Successfully deleted service {}\", appName);\n          }\n        } else {\n          if (stopException !\u003d null) {\n            throw stopException;\n          }\n        }\n        sc.close();\n        return result;\n      }\n    });\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    if (destroy) {\n      if (result \u003d\u003d EXIT_SUCCESS) {\n        serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n            appName);\n      } else {\n        if (result \u003d\u003d EXIT_NOT_FOUND) {\n          serviceStatus\n              .setDiagnostics(\"Service \" + appName + \" doesn\u0027t exist\");\n          return formatResponse(Status.BAD_REQUEST, serviceStatus);\n        } else {\n          serviceStatus\n              .setDiagnostics(\"Service \" + appName + \" error cleaning up \" +\n                  \"registry\");\n          return formatResponse(Status.INTERNAL_SERVER_ERROR, serviceStatus);\n        }\n      }\n    } else {\n      if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n        serviceStatus\n            .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n        return formatResponse(Status.BAD_REQUEST, serviceStatus);\n      } else {\n        serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n      }\n    }\n    return formatResponse(Status.OK, serviceStatus);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7955. Improve result of calling stop on an already stopped service. Contributed by Gour Saha\n",
      "commitDate": "28/02/18 3:01 PM",
      "commitName": "315f48e791790ce56d4f9ed220180aaa00bbc5fa",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "22/02/18 1:08 PM",
      "commitNameOld": "190969006d4a7f9ef86d67bba472f7dc5642668a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.08,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,38 @@\n   private Response stopService(String appName, boolean destroy,\n       final UserGroupInformation ugi) throws IOException,\n       InterruptedException, YarnException, FileNotFoundException {\n-    ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n+    int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n       @Override\n       public Integer run() throws IOException, YarnException,\n           FileNotFoundException {\n         int result \u003d 0;\n         ServiceClient sc \u003d getServiceClient();\n         sc.init(YARN_CONFIG);\n         sc.start();\n         result \u003d sc.actionStop(appName, destroy);\n+        if (result \u003d\u003d EXIT_SUCCESS) {\n+          LOG.info(\"Successfully stopped service {}\", appName);\n+        }\n         if (destroy) {\n           result \u003d sc.actionDestroy(appName);\n           LOG.info(\"Successfully deleted service {}\", appName);\n-        } else {\n-          LOG.info(\"Successfully stopped service {}\", appName);\n         }\n         sc.close();\n         return result;\n       }\n     });\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     if (destroy) {\n       serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n           appName);\n     } else {\n-      serviceStatus.setDiagnostics(\"Successfully stopped service \" +\n-          appName);\n+      if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n+        serviceStatus\n+            .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n+        return formatResponse(Status.BAD_REQUEST, serviceStatus);\n+      } else {\n+        serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n+      }\n     }\n     return formatResponse(Status.OK, serviceStatus);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response stopService(String appName, boolean destroy,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException, YarnException, FileNotFoundException {\n    int result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n      @Override\n      public Integer run() throws IOException, YarnException,\n          FileNotFoundException {\n        int result \u003d 0;\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        result \u003d sc.actionStop(appName, destroy);\n        if (result \u003d\u003d EXIT_SUCCESS) {\n          LOG.info(\"Successfully stopped service {}\", appName);\n        }\n        if (destroy) {\n          result \u003d sc.actionDestroy(appName);\n          LOG.info(\"Successfully deleted service {}\", appName);\n        }\n        sc.close();\n        return result;\n      }\n    });\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    if (destroy) {\n      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n          appName);\n    } else {\n      if (result \u003d\u003d EXIT_COMMAND_ARGUMENT_ERROR) {\n        serviceStatus\n            .setDiagnostics(\"Service \" + appName + \" is already stopped\");\n        return formatResponse(Status.BAD_REQUEST, serviceStatus);\n      } else {\n        serviceStatus.setDiagnostics(\"Successfully stopped service \" + appName);\n      }\n    }\n    return formatResponse(Status.OK, serviceStatus);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,32 @@\n-  private Response stopService(String appName, boolean destroy) {\n-    try {\n-      SERVICE_CLIENT.actionStop(appName, destroy);\n-      if (destroy) {\n-        SERVICE_CLIENT.actionDestroy(appName);\n-        LOG.info(\"Successfully deleted service {}\", appName);\n-      } else {\n-        LOG.info(\"Successfully stopped service {}\", appName);\n+  private Response stopService(String appName, boolean destroy,\n+      final UserGroupInformation ugi) throws IOException,\n+      InterruptedException, YarnException, FileNotFoundException {\n+    ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n+      @Override\n+      public Integer run() throws IOException, YarnException,\n+          FileNotFoundException {\n+        int result \u003d 0;\n+        ServiceClient sc \u003d getServiceClient();\n+        sc.init(YARN_CONFIG);\n+        sc.start();\n+        result \u003d sc.actionStop(appName, destroy);\n+        if (destroy) {\n+          result \u003d sc.actionDestroy(appName);\n+          LOG.info(\"Successfully deleted service {}\", appName);\n+        } else {\n+          LOG.info(\"Successfully stopped service {}\", appName);\n+        }\n+        sc.close();\n+        return result;\n       }\n-      return Response.status(Status.OK).build();\n-    } catch (ApplicationNotFoundException e) {\n-      ServiceStatus serviceStatus \u003d new ServiceStatus();\n-      serviceStatus.setDiagnostics(\n-          \"Service \" + appName + \" is not found in YARN: \" + e.getMessage());\n-      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n-          .build();\n-    } catch (Exception e) {\n-      LOG.error(\"Fail to stop service:\", e);\n-      ServiceStatus serviceStatus \u003d new ServiceStatus();\n-      serviceStatus.setDiagnostics(e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(serviceStatus).build();\n+    });\n+    ServiceStatus serviceStatus \u003d new ServiceStatus();\n+    if (destroy) {\n+      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n+          appName);\n+    } else {\n+      serviceStatus.setDiagnostics(\"Successfully stopped service \" +\n+          appName);\n     }\n+    return formatResponse(Status.OK, serviceStatus);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response stopService(String appName, boolean destroy,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException, YarnException, FileNotFoundException {\n    ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n      @Override\n      public Integer run() throws IOException, YarnException,\n          FileNotFoundException {\n        int result \u003d 0;\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        result \u003d sc.actionStop(appName, destroy);\n        if (destroy) {\n          result \u003d sc.actionDestroy(appName);\n          LOG.info(\"Successfully deleted service {}\", appName);\n        } else {\n          LOG.info(\"Successfully stopped service {}\", appName);\n        }\n        sc.close();\n        return result;\n      }\n    });\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    if (destroy) {\n      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n          appName);\n    } else {\n      serviceStatus.setDiagnostics(\"Successfully stopped service \" +\n          appName);\n    }\n    return formatResponse(Status.OK, serviceStatus);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[appName-String, destroy-boolean]",
            "newValue": "[appName-String, destroy-boolean, ugi-UserGroupInformation(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,32 @@\n-  private Response stopService(String appName, boolean destroy) {\n-    try {\n-      SERVICE_CLIENT.actionStop(appName, destroy);\n-      if (destroy) {\n-        SERVICE_CLIENT.actionDestroy(appName);\n-        LOG.info(\"Successfully deleted service {}\", appName);\n-      } else {\n-        LOG.info(\"Successfully stopped service {}\", appName);\n+  private Response stopService(String appName, boolean destroy,\n+      final UserGroupInformation ugi) throws IOException,\n+      InterruptedException, YarnException, FileNotFoundException {\n+    ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n+      @Override\n+      public Integer run() throws IOException, YarnException,\n+          FileNotFoundException {\n+        int result \u003d 0;\n+        ServiceClient sc \u003d getServiceClient();\n+        sc.init(YARN_CONFIG);\n+        sc.start();\n+        result \u003d sc.actionStop(appName, destroy);\n+        if (destroy) {\n+          result \u003d sc.actionDestroy(appName);\n+          LOG.info(\"Successfully deleted service {}\", appName);\n+        } else {\n+          LOG.info(\"Successfully stopped service {}\", appName);\n+        }\n+        sc.close();\n+        return result;\n       }\n-      return Response.status(Status.OK).build();\n-    } catch (ApplicationNotFoundException e) {\n-      ServiceStatus serviceStatus \u003d new ServiceStatus();\n-      serviceStatus.setDiagnostics(\n-          \"Service \" + appName + \" is not found in YARN: \" + e.getMessage());\n-      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n-          .build();\n-    } catch (Exception e) {\n-      LOG.error(\"Fail to stop service:\", e);\n-      ServiceStatus serviceStatus \u003d new ServiceStatus();\n-      serviceStatus.setDiagnostics(e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(serviceStatus).build();\n+    });\n+    ServiceStatus serviceStatus \u003d new ServiceStatus();\n+    if (destroy) {\n+      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n+          appName);\n+    } else {\n+      serviceStatus.setDiagnostics(\"Successfully stopped service \" +\n+          appName);\n     }\n+    return formatResponse(Status.OK, serviceStatus);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response stopService(String appName, boolean destroy,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException, YarnException, FileNotFoundException {\n    ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n      @Override\n      public Integer run() throws IOException, YarnException,\n          FileNotFoundException {\n        int result \u003d 0;\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        result \u003d sc.actionStop(appName, destroy);\n        if (destroy) {\n          result \u003d sc.actionDestroy(appName);\n          LOG.info(\"Successfully deleted service {}\", appName);\n        } else {\n          LOG.info(\"Successfully stopped service {}\", appName);\n        }\n        sc.close();\n        return result;\n      }\n    });\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    if (destroy) {\n      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n          appName);\n    } else {\n      serviceStatus.setDiagnostics(\"Successfully stopped service \" +\n          appName);\n    }\n    return formatResponse(Status.OK, serviceStatus);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException, InterruptedException, YarnException, FileNotFoundException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,32 @@\n-  private Response stopService(String appName, boolean destroy) {\n-    try {\n-      SERVICE_CLIENT.actionStop(appName, destroy);\n-      if (destroy) {\n-        SERVICE_CLIENT.actionDestroy(appName);\n-        LOG.info(\"Successfully deleted service {}\", appName);\n-      } else {\n-        LOG.info(\"Successfully stopped service {}\", appName);\n+  private Response stopService(String appName, boolean destroy,\n+      final UserGroupInformation ugi) throws IOException,\n+      InterruptedException, YarnException, FileNotFoundException {\n+    ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n+      @Override\n+      public Integer run() throws IOException, YarnException,\n+          FileNotFoundException {\n+        int result \u003d 0;\n+        ServiceClient sc \u003d getServiceClient();\n+        sc.init(YARN_CONFIG);\n+        sc.start();\n+        result \u003d sc.actionStop(appName, destroy);\n+        if (destroy) {\n+          result \u003d sc.actionDestroy(appName);\n+          LOG.info(\"Successfully deleted service {}\", appName);\n+        } else {\n+          LOG.info(\"Successfully stopped service {}\", appName);\n+        }\n+        sc.close();\n+        return result;\n       }\n-      return Response.status(Status.OK).build();\n-    } catch (ApplicationNotFoundException e) {\n-      ServiceStatus serviceStatus \u003d new ServiceStatus();\n-      serviceStatus.setDiagnostics(\n-          \"Service \" + appName + \" is not found in YARN: \" + e.getMessage());\n-      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n-          .build();\n-    } catch (Exception e) {\n-      LOG.error(\"Fail to stop service:\", e);\n-      ServiceStatus serviceStatus \u003d new ServiceStatus();\n-      serviceStatus.setDiagnostics(e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(serviceStatus).build();\n+    });\n+    ServiceStatus serviceStatus \u003d new ServiceStatus();\n+    if (destroy) {\n+      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n+          appName);\n+    } else {\n+      serviceStatus.setDiagnostics(\"Successfully stopped service \" +\n+          appName);\n     }\n+    return formatResponse(Status.OK, serviceStatus);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response stopService(String appName, boolean destroy,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException, YarnException, FileNotFoundException {\n    ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n      @Override\n      public Integer run() throws IOException, YarnException,\n          FileNotFoundException {\n        int result \u003d 0;\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        result \u003d sc.actionStop(appName, destroy);\n        if (destroy) {\n          result \u003d sc.actionDestroy(appName);\n          LOG.info(\"Successfully deleted service {}\", appName);\n        } else {\n          LOG.info(\"Successfully stopped service {}\", appName);\n        }\n        sc.close();\n        return result;\n      }\n    });\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    if (destroy) {\n      serviceStatus.setDiagnostics(\"Successfully destroyed service \" +\n          appName);\n    } else {\n      serviceStatus.setDiagnostics(\"Successfully stopped service \" +\n          appName);\n    }\n    return formatResponse(Status.OK, serviceStatus);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 27.94,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   private Response stopService(String appName, boolean destroy) {\n     try {\n       SERVICE_CLIENT.actionStop(appName, destroy);\n       if (destroy) {\n         SERVICE_CLIENT.actionDestroy(appName);\n         LOG.info(\"Successfully deleted service {}\", appName);\n       } else {\n         LOG.info(\"Successfully stopped service {}\", appName);\n       }\n       return Response.status(Status.OK).build();\n     } catch (ApplicationNotFoundException e) {\n       ServiceStatus serviceStatus \u003d new ServiceStatus();\n       serviceStatus.setDiagnostics(\n           \"Service \" + appName + \" is not found in YARN: \" + e.getMessage());\n       return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n           .build();\n     } catch (Exception e) {\n+      LOG.error(\"Fail to stop service:\", e);\n       ServiceStatus serviceStatus \u003d new ServiceStatus();\n       serviceStatus.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR)\n           .entity(serviceStatus).build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response stopService(String appName, boolean destroy) {\n    try {\n      SERVICE_CLIENT.actionStop(appName, destroy);\n      if (destroy) {\n        SERVICE_CLIENT.actionDestroy(appName);\n        LOG.info(\"Successfully deleted service {}\", appName);\n      } else {\n        LOG.info(\"Successfully stopped service {}\", appName);\n      }\n      return Response.status(Status.OK).build();\n    } catch (ApplicationNotFoundException e) {\n      ServiceStatus serviceStatus \u003d new ServiceStatus();\n      serviceStatus.setDiagnostics(\n          \"Service \" + appName + \" is not found in YARN: \" + e.getMessage());\n      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n          .build();\n    } catch (Exception e) {\n      LOG.error(\"Fail to stop service:\", e);\n      ServiceStatus serviceStatus \u003d new ServiceStatus();\n      serviceStatus.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(serviceStatus).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "b57144a1726e0b02abbdc3e8f37769d3f7c039c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7202. Add UT for api-server. Contributed by Eric Yang\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b57144a1726e0b02abbdc3e8f37769d3f7c039c8",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "c72302157907b44b71bc15008aabd9cf3d806f12",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private Response stopService(String appName, boolean destroy) {\n     try {\n       SERVICE_CLIENT.actionStop(appName, destroy);\n       if (destroy) {\n         SERVICE_CLIENT.actionDestroy(appName);\n         LOG.info(\"Successfully deleted service {}\", appName);\n       } else {\n         LOG.info(\"Successfully stopped service {}\", appName);\n       }\n-      return Response.status(Status.NO_CONTENT).build();\n+      return Response.status(Status.OK).build();\n     } catch (ApplicationNotFoundException e) {\n       ServiceStatus serviceStatus \u003d new ServiceStatus();\n       serviceStatus.setDiagnostics(\n-          \"Service \" + appName + \" not found \" + e.getMessage());\n-      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n+          \"Service \" + appName + \" is not found in YARN: \" + e.getMessage());\n+      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n           .build();\n     } catch (Exception e) {\n       ServiceStatus serviceStatus \u003d new ServiceStatus();\n       serviceStatus.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR)\n           .entity(serviceStatus).build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response stopService(String appName, boolean destroy) {\n    try {\n      SERVICE_CLIENT.actionStop(appName, destroy);\n      if (destroy) {\n        SERVICE_CLIENT.actionDestroy(appName);\n        LOG.info(\"Successfully deleted service {}\", appName);\n      } else {\n        LOG.info(\"Successfully stopped service {}\", appName);\n      }\n      return Response.status(Status.OK).build();\n    } catch (ApplicationNotFoundException e) {\n      ServiceStatus serviceStatus \u003d new ServiceStatus();\n      serviceStatus.setDiagnostics(\n          \"Service \" + appName + \" is not found in YARN: \" + e.getMessage());\n      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n          .build();\n    } catch (Exception e) {\n      ServiceStatus serviceStatus \u003d new ServiceStatus();\n      serviceStatus.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(serviceStatus).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,23 @@\n+  private Response stopService(String appName, boolean destroy) {\n+    try {\n+      SERVICE_CLIENT.actionStop(appName, destroy);\n+      if (destroy) {\n+        SERVICE_CLIENT.actionDestroy(appName);\n+        LOG.info(\"Successfully deleted service {}\", appName);\n+      } else {\n+        LOG.info(\"Successfully stopped service {}\", appName);\n+      }\n+      return Response.status(Status.NO_CONTENT).build();\n+    } catch (ApplicationNotFoundException e) {\n+      ServiceStatus serviceStatus \u003d new ServiceStatus();\n+      serviceStatus.setDiagnostics(\n+          \"Service \" + appName + \" not found \" + e.getMessage());\n+      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n+          .build();\n+    } catch (Exception e) {\n+      ServiceStatus serviceStatus \u003d new ServiceStatus();\n+      serviceStatus.setDiagnostics(e.getMessage());\n+      return Response.status(Status.INTERNAL_SERVER_ERROR)\n+          .entity(serviceStatus).build();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Response stopService(String appName, boolean destroy) {\n    try {\n      SERVICE_CLIENT.actionStop(appName, destroy);\n      if (destroy) {\n        SERVICE_CLIENT.actionDestroy(appName);\n        LOG.info(\"Successfully deleted service {}\", appName);\n      } else {\n        LOG.info(\"Successfully stopped service {}\", appName);\n      }\n      return Response.status(Status.NO_CONTENT).build();\n    } catch (ApplicationNotFoundException e) {\n      ServiceStatus serviceStatus \u003d new ServiceStatus();\n      serviceStatus.setDiagnostics(\n          \"Service \" + appName + \" not found \" + e.getMessage());\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (Exception e) {\n      ServiceStatus serviceStatus \u003d new ServiceStatus();\n      serviceStatus.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(serviceStatus).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}