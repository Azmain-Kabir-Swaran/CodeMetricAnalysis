{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StageAllocatorLowCostAligned.java",
  "functionName": "calcCostOfInterval",
  "functionId": "calcCostOfInterval___startTime-long__endTime-long__planLoads-RLESparseResourceAllocation__planModifications-RLESparseResourceAllocation__capacity-Resource__resCalc-ResourceCalculator__step-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
  "functionStartLine": 352,
  "functionEndLine": 367,
  "numCommitsSeen": 11,
  "timeTaken": 2733,
  "changeHistory": [
    "a3a615eeab8c14ccdc548311097e62a916963dc5",
    "156f24ead00436faad5d4aeef327a546392cd265"
  ],
  "changeHistoryShort": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Yparameterchange",
    "156f24ead00436faad5d4aeef327a546392cd265": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "05/12/15 9:26 PM",
      "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 512.73,
      "commitsBetweenForRepo": 3348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   protected double calcCostOfInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n+      RLESparseResourceAllocation planLoads,\n       RLESparseResourceAllocation planModifications, Resource capacity,\n       ResourceCalculator resCalc, long step) {\n \n     // Sum costs in the interval [startTime,endTime)\n     double totalCost \u003d 0.0;\n     for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n       totalCost +\u003d calcCostOfTimeSlot(t, planLoads, planModifications, capacity,\n           resCalc);\n     }\n \n     // Return sum\n     return totalCost;\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected double calcCostOfInterval(long startTime, long endTime,\n      RLESparseResourceAllocation planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) {\n\n    // Sum costs in the interval [startTime,endTime)\n    double totalCost \u003d 0.0;\n    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n      totalCost +\u003d calcCostOfTimeSlot(t, planLoads, planModifications, capacity,\n          resCalc);\n    }\n\n    // Return sum\n    return totalCost;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
      "extendedDetails": {
        "oldValue": "[startTime-long, endTime-long, planLoads-Map\u003cLong,Resource\u003e, planModifications-RLESparseResourceAllocation, capacity-Resource, resCalc-ResourceCalculator, step-long]",
        "newValue": "[startTime-long, endTime-long, planLoads-RLESparseResourceAllocation, planModifications-RLESparseResourceAllocation, capacity-Resource, resCalc-ResourceCalculator, step-long]"
      }
    },
    "156f24ead00436faad5d4aeef327a546392cd265": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
      "commitDate": "25/07/15 7:39 AM",
      "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthor": "ccurino",
      "diff": "@@ -0,0 +1,16 @@\n+  protected double calcCostOfInterval(long startTime, long endTime,\n+      Map\u003cLong, Resource\u003e planLoads,\n+      RLESparseResourceAllocation planModifications, Resource capacity,\n+      ResourceCalculator resCalc, long step) {\n+\n+    // Sum costs in the interval [startTime,endTime)\n+    double totalCost \u003d 0.0;\n+    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+      totalCost +\u003d calcCostOfTimeSlot(t, planLoads, planModifications, capacity,\n+          resCalc);\n+    }\n+\n+    // Return sum\n+    return totalCost;\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected double calcCostOfInterval(long startTime, long endTime,\n      Map\u003cLong, Resource\u003e planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) {\n\n    // Sum costs in the interval [startTime,endTime)\n    double totalCost \u003d 0.0;\n    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n      totalCost +\u003d calcCostOfTimeSlot(t, planLoads, planModifications, capacity,\n          resCalc);\n    }\n\n    // Return sum\n    return totalCost;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java"
    }
  }
}