{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataChecksum.java",
  "functionName": "verifyChunkedSums",
  "functionId": "verifyChunkedSums___data-ByteBuffer__checksums-ByteBuffer__fileName-String__basePos-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
  "functionStartLine": 360,
  "functionEndLine": 386,
  "numCommitsSeen": 28,
  "timeTaken": 2078,
  "changeHistory": [
    "06ffeb8d4d705d14e8755364099286ac4ed3bb83",
    "401db4fc65140979fe7665983e36905e886df971",
    "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
    "3cab01ba6e0349126a23063e135cd5c814a4ae18",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "e639c3357bcc6aa086916ebf1f9533f59d15a4b7",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "22fa0e43e37478707963a86f66e95d2a6dddf812"
  ],
  "changeHistoryShort": {
    "06ffeb8d4d705d14e8755364099286ac4ed3bb83": "Ybodychange",
    "401db4fc65140979fe7665983e36905e886df971": "Ybodychange",
    "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692": "Ybodychange",
    "3cab01ba6e0349126a23063e135cd5c814a4ae18": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "e639c3357bcc6aa086916ebf1f9533f59d15a4b7": "Ybodychange",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "22fa0e43e37478707963a86f66e95d2a6dddf812": "Yintroduced"
  },
  "changeHistoryDetails": {
    "06ffeb8d4d705d14e8755364099286ac4ed3bb83": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14405. Fix performance regression due to incorrect use of DataChecksum. Contributed by LiXin Ge.\n",
      "commitDate": "09/05/17 10:16 PM",
      "commitName": "06ffeb8d4d705d14e8755364099286ac4ed3bb83",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "08/09/16 11:54 AM",
      "commitNameOld": "401db4fc65140979fe7665983e36905e886df971",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 243.43,
      "commitsBetweenForRepo": 1492,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,27 @@\n   public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n       String fileName, long basePos) throws ChecksumException {\n     if (type.size \u003d\u003d 0) return;\n-    \n+\n     if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n       final int dataOffset \u003d data.arrayOffset() + data.position();\n       final int crcsOffset \u003d checksums.arrayOffset() + checksums.position();\n-      verifyChunked(type, summer, data.array(), dataOffset, data.remaining(),\n-          bytesPerChecksum, checksums.array(), crcsOffset, fileName, basePos);\n+\n+      if (NativeCrc32.isAvailable()) {\n+        NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n+                checksums.array(), crcsOffset, data.array(), dataOffset,\n+                data.remaining(), fileName, basePos);\n+      } else {\n+        verifyChunked(type, summer, data.array(), dataOffset, data.remaining(),\n+                bytesPerChecksum, checksums.array(), crcsOffset, fileName,\n+                basePos);\n+      }\n       return;\n     }\n     if (NativeCrc32.isAvailable() \u0026\u0026 data.isDirect()) {\n       NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,\n           fileName, basePos);\n     } else {\n       verifyChunked(type, summer, data, bytesPerChecksum, checksums, fileName,\n           basePos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n      String fileName, long basePos) throws ChecksumException {\n    if (type.size \u003d\u003d 0) return;\n\n    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n      final int dataOffset \u003d data.arrayOffset() + data.position();\n      final int crcsOffset \u003d checksums.arrayOffset() + checksums.position();\n\n      if (NativeCrc32.isAvailable()) {\n        NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n                checksums.array(), crcsOffset, data.array(), dataOffset,\n                data.remaining(), fileName, basePos);\n      } else {\n        verifyChunked(type, summer, data.array(), dataOffset, data.remaining(),\n                bytesPerChecksum, checksums.array(), crcsOffset, fileName,\n                basePos);\n      }\n      return;\n    }\n    if (NativeCrc32.isAvailable() \u0026\u0026 data.isDirect()) {\n      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,\n          fileName, basePos);\n    } else {\n      verifyChunked(type, summer, data, bytesPerChecksum, checksums, fileName,\n          basePos);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {}
    },
    "401db4fc65140979fe7665983e36905e886df971": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
      "commitDate": "08/09/16 11:54 AM",
      "commitName": "401db4fc65140979fe7665983e36905e886df971",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "09/08/16 6:11 PM",
      "commitNameOld": "d00d3add9e3c7ac7e79bb99b615bcfaeed892b96",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 29.74,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n       String fileName, long basePos) throws ChecksumException {\n     if (type.size \u003d\u003d 0) return;\n     \n     if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n       final int dataOffset \u003d data.arrayOffset() + data.position();\n       final int crcsOffset \u003d checksums.arrayOffset() + checksums.position();\n       verifyChunked(type, summer, data.array(), dataOffset, data.remaining(),\n           bytesPerChecksum, checksums.array(), crcsOffset, fileName, basePos);\n       return;\n     }\n-    if (NativeCrc32.isAvailable()) {\n+    if (NativeCrc32.isAvailable() \u0026\u0026 data.isDirect()) {\n       NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,\n           fileName, basePos);\n     } else {\n       verifyChunked(type, summer, data, bytesPerChecksum, checksums, fileName,\n           basePos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n      String fileName, long basePos) throws ChecksumException {\n    if (type.size \u003d\u003d 0) return;\n    \n    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n      final int dataOffset \u003d data.arrayOffset() + data.position();\n      final int crcsOffset \u003d checksums.arrayOffset() + checksums.position();\n      verifyChunked(type, summer, data.array(), dataOffset, data.remaining(),\n          bytesPerChecksum, checksums.array(), crcsOffset, fileName, basePos);\n      return;\n    }\n    if (NativeCrc32.isAvailable() \u0026\u0026 data.isDirect()) {\n      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,\n          fileName, basePos);\n    } else {\n      verifyChunked(type, summer, data, bytesPerChecksum, checksums, fileName,\n          basePos);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {}
    },
    "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10865. Add a Crc32 chunked verification benchmark for both directly and non-directly buffer cases.\n",
      "commitDate": "18/02/16 11:47 AM",
      "commitName": "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "13/10/15 1:49 PM",
      "commitNameOld": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 127.96,
      "commitsBetweenForRepo": 878,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,19 @@\n   public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n-      String fileName, long basePos)\n-  throws ChecksumException {\n+      String fileName, long basePos) throws ChecksumException {\n     if (type.size \u003d\u003d 0) return;\n     \n     if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n-      verifyChunkedSums(\n-          data.array(), data.arrayOffset() + data.position(), data.remaining(),\n-          checksums.array(), checksums.arrayOffset() + checksums.position(),\n-          fileName, basePos);\n+      final int dataOffset \u003d data.arrayOffset() + data.position();\n+      final int crcsOffset \u003d checksums.arrayOffset() + checksums.position();\n+      verifyChunked(type, summer, data.array(), dataOffset, data.remaining(),\n+          bytesPerChecksum, checksums.array(), crcsOffset, fileName, basePos);\n       return;\n     }\n     if (NativeCrc32.isAvailable()) {\n       NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,\n           fileName, basePos);\n-      return;\n-    }\n-    \n-    int startDataPos \u003d data.position();\n-    data.mark();\n-    checksums.mark();\n-    try {\n-      byte[] buf \u003d new byte[bytesPerChecksum];\n-      byte[] sum \u003d new byte[type.size];\n-      while (data.remaining() \u003e 0) {\n-        int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n-        checksums.get(sum);\n-        data.get(buf, 0, n);\n-        summer.reset();\n-        summer.update(buf, 0, n);\n-        int calculated \u003d (int)summer.getValue();\n-        int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n-          (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n-          (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n-          sum[3] \u0026 0xff;\n-        if (calculated !\u003d stored) {\n-          long errPos \u003d basePos + data.position() - startDataPos - n;\n-          throw new ChecksumException(\n-              \"Checksum error: \"+ fileName + \" at \"+ errPos +\n-              \" exp: \" + stored + \" got: \" + calculated, errPos);\n-        }\n-      }\n-    } finally {\n-      data.reset();\n-      checksums.reset();\n+    } else {\n+      verifyChunked(type, summer, data, bytesPerChecksum, checksums, fileName,\n+          basePos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n      String fileName, long basePos) throws ChecksumException {\n    if (type.size \u003d\u003d 0) return;\n    \n    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n      final int dataOffset \u003d data.arrayOffset() + data.position();\n      final int crcsOffset \u003d checksums.arrayOffset() + checksums.position();\n      verifyChunked(type, summer, data.array(), dataOffset, data.remaining(),\n          bytesPerChecksum, checksums.array(), crcsOffset, fileName, basePos);\n      return;\n    }\n    if (NativeCrc32.isAvailable()) {\n      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,\n          fileName, basePos);\n    } else {\n      verifyChunked(type, summer, data, bytesPerChecksum, checksums, fileName,\n          basePos);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {}
    },
    "3cab01ba6e0349126a23063e135cd5c814a4ae18": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8700.  Use enum to define the checksum constants in DataChecksum.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373683 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/08/12 6:32 PM",
      "commitName": "3cab01ba6e0349126a23063e135cd5c814a4ae18",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "31/10/11 10:25 PM",
      "commitNameOld": "a6c110ebd05155fa5bdae4e2d195493d2d04dd4f",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 288.84,
      "commitsBetweenForRepo": 1832,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n       String fileName, long basePos)\n   throws ChecksumException {\n-    if (size \u003d\u003d 0) return;\n+    if (type.size \u003d\u003d 0) return;\n     \n     if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n       verifyChunkedSums(\n           data.array(), data.arrayOffset() + data.position(), data.remaining(),\n           checksums.array(), checksums.arrayOffset() + checksums.position(),\n           fileName, basePos);\n       return;\n     }\n     if (NativeCrc32.isAvailable()) {\n-      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type, checksums, data,\n+      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,\n           fileName, basePos);\n       return;\n     }\n     \n     int startDataPos \u003d data.position();\n     data.mark();\n     checksums.mark();\n     try {\n       byte[] buf \u003d new byte[bytesPerChecksum];\n-      byte[] sum \u003d new byte[size];\n+      byte[] sum \u003d new byte[type.size];\n       while (data.remaining() \u003e 0) {\n         int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n         checksums.get(sum);\n         data.get(buf, 0, n);\n         summer.reset();\n         summer.update(buf, 0, n);\n         int calculated \u003d (int)summer.getValue();\n         int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n           (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n           (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n           sum[3] \u0026 0xff;\n         if (calculated !\u003d stored) {\n           long errPos \u003d basePos + data.position() - startDataPos - n;\n           throw new ChecksumException(\n               \"Checksum error: \"+ fileName + \" at \"+ errPos +\n               \" exp: \" + stored + \" got: \" + calculated, errPos);\n         }\n       }\n     } finally {\n       data.reset();\n       checksums.reset();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n      String fileName, long basePos)\n  throws ChecksumException {\n    if (type.size \u003d\u003d 0) return;\n    \n    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n      verifyChunkedSums(\n          data.array(), data.arrayOffset() + data.position(), data.remaining(),\n          checksums.array(), checksums.arrayOffset() + checksums.position(),\n          fileName, basePos);\n      return;\n    }\n    if (NativeCrc32.isAvailable()) {\n      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data,\n          fileName, basePos);\n      return;\n    }\n    \n    int startDataPos \u003d data.position();\n    data.mark();\n    checksums.mark();\n    try {\n      byte[] buf \u003d new byte[bytesPerChecksum];\n      byte[] sum \u003d new byte[type.size];\n      while (data.remaining() \u003e 0) {\n        int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n        checksums.get(sum);\n        data.get(buf, 0, n);\n        summer.reset();\n        summer.update(buf, 0, n);\n        int calculated \u003d (int)summer.getValue();\n        int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n          (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n          (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n          sum[3] \u0026 0xff;\n        if (calculated !\u003d stored) {\n          long errPos \u003d basePos + data.position() - startDataPos - n;\n          throw new ChecksumException(\n              \"Checksum error: \"+ fileName + \" at \"+ errPos +\n              \" exp: \" + stored + \" got: \" + calculated, errPos);\n        }\n      }\n    } finally {\n      data.reset();\n      checksums.reset();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n      String fileName, long basePos)\n  throws ChecksumException {\n    if (size \u003d\u003d 0) return;\n    \n    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n      verifyChunkedSums(\n          data.array(), data.arrayOffset() + data.position(), data.remaining(),\n          checksums.array(), checksums.arrayOffset() + checksums.position(),\n          fileName, basePos);\n      return;\n    }\n    if (NativeCrc32.isAvailable()) {\n      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type, checksums, data,\n          fileName, basePos);\n      return;\n    }\n    \n    int startDataPos \u003d data.position();\n    data.mark();\n    checksums.mark();\n    try {\n      byte[] buf \u003d new byte[bytesPerChecksum];\n      byte[] sum \u003d new byte[size];\n      while (data.remaining() \u003e 0) {\n        int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n        checksums.get(sum);\n        data.get(buf, 0, n);\n        summer.reset();\n        summer.update(buf, 0, n);\n        int calculated \u003d (int)summer.getValue();\n        int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n          (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n          (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n          sum[3] \u0026 0xff;\n        if (calculated !\u003d stored) {\n          long errPos \u003d basePos + data.position() - startDataPos - n;\n          throw new ChecksumException(\n              \"Checksum error: \"+ fileName + \" at \"+ errPos +\n              \" exp: \" + stored + \" got: \" + calculated, errPos);\n        }\n      }\n    } finally {\n      data.reset();\n      checksums.reset();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java"
      }
    },
    "e639c3357bcc6aa086916ebf1f9533f59d15a4b7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7445. Implement bulk checksum verification using efficient native code. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/11 3:57 PM",
      "commitName": "e639c3357bcc6aa086916ebf1f9533f59d15a4b7",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "02/08/11 9:37 AM",
      "commitNameOld": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 2.26,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,47 @@\n   public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n       String fileName, long basePos)\n   throws ChecksumException {\n     if (size \u003d\u003d 0) return;\n     \n     if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n       verifyChunkedSums(\n           data.array(), data.arrayOffset() + data.position(), data.remaining(),\n           checksums.array(), checksums.arrayOffset() + checksums.position(),\n           fileName, basePos);\n       return;\n     }\n+    if (NativeCrc32.isAvailable()) {\n+      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type, checksums, data,\n+          fileName, basePos);\n+      return;\n+    }\n     \n     int startDataPos \u003d data.position();\n     data.mark();\n     checksums.mark();\n     try {\n       byte[] buf \u003d new byte[bytesPerChecksum];\n       byte[] sum \u003d new byte[size];\n       while (data.remaining() \u003e 0) {\n         int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n         checksums.get(sum);\n         data.get(buf, 0, n);\n         summer.reset();\n         summer.update(buf, 0, n);\n         int calculated \u003d (int)summer.getValue();\n         int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n           (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n           (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n           sum[3] \u0026 0xff;\n         if (calculated !\u003d stored) {\n           long errPos \u003d basePos + data.position() - startDataPos - n;\n           throw new ChecksumException(\n               \"Checksum error: \"+ fileName + \" at \"+ errPos +\n               \" exp: \" + stored + \" got: \" + calculated, errPos);\n         }\n       }\n     } finally {\n       data.reset();\n       checksums.reset();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n      String fileName, long basePos)\n  throws ChecksumException {\n    if (size \u003d\u003d 0) return;\n    \n    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n      verifyChunkedSums(\n          data.array(), data.arrayOffset() + data.position(), data.remaining(),\n          checksums.array(), checksums.arrayOffset() + checksums.position(),\n          fileName, basePos);\n      return;\n    }\n    if (NativeCrc32.isAvailable()) {\n      NativeCrc32.verifyChunkedSums(bytesPerChecksum, type, checksums, data,\n          fileName, basePos);\n      return;\n    }\n    \n    int startDataPos \u003d data.position();\n    data.mark();\n    checksums.mark();\n    try {\n      byte[] buf \u003d new byte[bytesPerChecksum];\n      byte[] sum \u003d new byte[size];\n      while (data.remaining() \u003e 0) {\n        int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n        checksums.get(sum);\n        data.get(buf, 0, n);\n        summer.reset();\n        summer.update(buf, 0, n);\n        int calculated \u003d (int)summer.getValue();\n        int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n          (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n          (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n          sum[3] \u0026 0xff;\n        if (calculated !\u003d stored) {\n          long errPos \u003d basePos + data.position() - startDataPos - n;\n          throw new ChecksumException(\n              \"Checksum error: \"+ fileName + \" at \"+ errPos +\n              \" exp: \" + stored + \" got: \" + calculated, errPos);\n        }\n      }\n    } finally {\n      data.reset();\n      checksums.reset();\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {}
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n      String fileName, long basePos)\n  throws ChecksumException {\n    if (size \u003d\u003d 0) return;\n    \n    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n      verifyChunkedSums(\n          data.array(), data.arrayOffset() + data.position(), data.remaining(),\n          checksums.array(), checksums.arrayOffset() + checksums.position(),\n          fileName, basePos);\n      return;\n    }\n    \n    int startDataPos \u003d data.position();\n    data.mark();\n    checksums.mark();\n    try {\n      byte[] buf \u003d new byte[bytesPerChecksum];\n      byte[] sum \u003d new byte[size];\n      while (data.remaining() \u003e 0) {\n        int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n        checksums.get(sum);\n        data.get(buf, 0, n);\n        summer.reset();\n        summer.update(buf, 0, n);\n        int calculated \u003d (int)summer.getValue();\n        int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n          (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n          (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n          sum[3] \u0026 0xff;\n        if (calculated !\u003d stored) {\n          long errPos \u003d basePos + data.position() - startDataPos - n;\n          throw new ChecksumException(\n              \"Checksum error: \"+ fileName + \" at \"+ errPos +\n              \" exp: \" + stored + \" got: \" + calculated, errPos);\n        }\n      }\n    } finally {\n      data.reset();\n      checksums.reset();\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/DataChecksum.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java"
      }
    },
    "22fa0e43e37478707963a86f66e95d2a6dddf812": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7444. Add Checksum API to verify and calculate checksums \"in bulk\". Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1146111 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/07/11 9:12 AM",
      "commitName": "22fa0e43e37478707963a86f66e95d2a6dddf812",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,42 @@\n+  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n+      String fileName, long basePos)\n+  throws ChecksumException {\n+    if (size \u003d\u003d 0) return;\n+    \n+    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n+      verifyChunkedSums(\n+          data.array(), data.arrayOffset() + data.position(), data.remaining(),\n+          checksums.array(), checksums.arrayOffset() + checksums.position(),\n+          fileName, basePos);\n+      return;\n+    }\n+    \n+    int startDataPos \u003d data.position();\n+    data.mark();\n+    checksums.mark();\n+    try {\n+      byte[] buf \u003d new byte[bytesPerChecksum];\n+      byte[] sum \u003d new byte[size];\n+      while (data.remaining() \u003e 0) {\n+        int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n+        checksums.get(sum);\n+        data.get(buf, 0, n);\n+        summer.reset();\n+        summer.update(buf, 0, n);\n+        int calculated \u003d (int)summer.getValue();\n+        int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n+          (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n+          (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n+          sum[3] \u0026 0xff;\n+        if (calculated !\u003d stored) {\n+          long errPos \u003d basePos + data.position() - startDataPos - n;\n+          throw new ChecksumException(\n+              \"Checksum error: \"+ fileName + \" at \"+ errPos +\n+              \" exp: \" + stored + \" got: \" + calculated, errPos);\n+        }\n+      }\n+    } finally {\n+      data.reset();\n+      checksums.reset();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums,\n      String fileName, long basePos)\n  throws ChecksumException {\n    if (size \u003d\u003d 0) return;\n    \n    if (data.hasArray() \u0026\u0026 checksums.hasArray()) {\n      verifyChunkedSums(\n          data.array(), data.arrayOffset() + data.position(), data.remaining(),\n          checksums.array(), checksums.arrayOffset() + checksums.position(),\n          fileName, basePos);\n      return;\n    }\n    \n    int startDataPos \u003d data.position();\n    data.mark();\n    checksums.mark();\n    try {\n      byte[] buf \u003d new byte[bytesPerChecksum];\n      byte[] sum \u003d new byte[size];\n      while (data.remaining() \u003e 0) {\n        int n \u003d Math.min(data.remaining(), bytesPerChecksum);\n        checksums.get(sum);\n        data.get(buf, 0, n);\n        summer.reset();\n        summer.update(buf, 0, n);\n        int calculated \u003d (int)summer.getValue();\n        int stored \u003d (sum[0] \u003c\u003c 24 \u0026 0xff000000) |\n          (sum[1] \u003c\u003c 16 \u0026 0xff0000) |\n          (sum[2] \u003c\u003c 8 \u0026 0xff00) |\n          sum[3] \u0026 0xff;\n        if (calculated !\u003d stored) {\n          long errPos \u003d basePos + data.position() - startDataPos - n;\n          throw new ChecksumException(\n              \"Checksum error: \"+ fileName + \" at \"+ errPos +\n              \" exp: \" + stored + \" got: \" + calculated, errPos);\n        }\n      }\n    } finally {\n      data.reset();\n      checksums.reset();\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/util/DataChecksum.java"
    }
  }
}