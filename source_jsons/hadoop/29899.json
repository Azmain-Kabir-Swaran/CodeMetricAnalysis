{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "shouldCleanAppLogDir",
  "functionId": "shouldCleanAppLogDir___appLogPath-Path__now-long__fs-FileSystem__logRetainMillis-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 529,
  "functionEndLine": 548,
  "numCommitsSeen": 17,
  "timeTaken": 963,
  "changeHistory": [
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,20 @@\n+  private static boolean shouldCleanAppLogDir(Path appLogPath, long now,\n+      FileSystem fs, long logRetainMillis) throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(appLogPath);\n+    while (iter.hasNext()) {\n+      FileStatus stat \u003d iter.next();\n+      if (now - stat.getModificationTime() \u003c\u003d logRetainMillis) {\n+        // found a dir entry that is fresh enough to prevent\n+        // cleaning this directory.\n+        LOG.debug(\"{} not being cleaned due to {}\", appLogPath, stat.getPath());\n+        return false;\n+      }\n+      // Otherwise, keep searching files inside for directories.\n+      if (stat.isDirectory()) {\n+        if (!shouldCleanAppLogDir(stat.getPath(), now, fs, logRetainMillis)) {\n+          return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean shouldCleanAppLogDir(Path appLogPath, long now,\n      FileSystem fs, long logRetainMillis) throws IOException {\n    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(appLogPath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      if (now - stat.getModificationTime() \u003c\u003d logRetainMillis) {\n        // found a dir entry that is fresh enough to prevent\n        // cleaning this directory.\n        LOG.debug(\"{} not being cleaned due to {}\", appLogPath, stat.getPath());\n        return false;\n      }\n      // Otherwise, keep searching files inside for directories.\n      if (stat.isDirectory()) {\n        if (!shouldCleanAppLogDir(stat.getPath(), now, fs, logRetainMillis)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}