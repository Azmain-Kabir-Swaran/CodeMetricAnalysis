{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "actionStop",
  "functionId": "actionStop___serviceName-String__waitForAppStopped-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 714,
  "functionEndLine": 792,
  "numCommitsSeen": 58,
  "timeTaken": 5332,
  "changeHistory": [
    "d553799030a5a64df328319aceb35734d0b2de20",
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "d553799030a5a64df328319aceb35734d0b2de20": "Ybodychange",
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymultichange(Yparameterchange,Ybodychange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d553799030a5a64df328319aceb35734d0b2de20": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7984. Improved YARN service stop/destroy and clean up.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "10/04/18 2:40 PM",
      "commitName": "d553799030a5a64df328319aceb35734d0b2de20",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.95,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,79 @@\n   public int actionStop(String serviceName, boolean waitForAppStopped)\n       throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n+    if (currentAppId \u003d\u003d null) {\n+      LOG.info(\"Application ID doesn\u0027t exist for service {}\", serviceName);\n+      cleanUpRegistry(serviceName);\n+      return EXIT_COMMAND_ARGUMENT_ERROR;\n+    }\n     ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n     if (terminatedStates.contains(report.getYarnApplicationState())) {\n       LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n           report.getYarnApplicationState());\n+      cleanUpRegistry(serviceName);\n       return EXIT_COMMAND_ARGUMENT_ERROR;\n     }\n     if (preRunningStates.contains(report.getYarnApplicationState())) {\n       String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n           + \", forcefully killed by user!\";\n       yarnClient.killApplication(currentAppId, msg);\n       LOG.info(msg);\n+      cleanUpRegistry(serviceName);\n       return EXIT_SUCCESS;\n     }\n     if (StringUtils.isEmpty(report.getHost())) {\n       throw new YarnException(serviceName + \" AM hostname is empty\");\n     }\n     LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n     try {\n       ClientAMProtocol proxy \u003d\n           createAMProxy(serviceName, report);\n       cachedAppInfo.remove(serviceName);\n       if (proxy !\u003d null) {\n         // try to stop the app gracefully.\n         StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n         proxy.stop(request);\n         LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n       } else {\n         yarnClient.killApplication(currentAppId,\n             serviceName + \" is forcefully killed by user!\");\n         LOG.info(\"Forcefully kill the service: \" + serviceName);\n+        cleanUpRegistry(serviceName);\n         return EXIT_SUCCESS;\n       }\n \n       if (!waitForAppStopped) {\n+        cleanUpRegistry(serviceName);\n         return EXIT_SUCCESS;\n       }\n       // Wait until the app is killed.\n       long startTime \u003d System.currentTimeMillis();\n       int pollCount \u003d 0;\n       while (true) {\n         Thread.sleep(2000);\n         report \u003d yarnClient.getApplicationReport(currentAppId);\n         if (terminatedStates.contains(report.getYarnApplicationState())) {\n           LOG.info(\"Service \" + serviceName + \" is stopped.\");\n           break;\n         }\n         // Forcefully kill after 10 seconds.\n         if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n           LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n               + serviceName);\n           yarnClient.killApplication(currentAppId,\n               \"Forcefully kill the app by user\");\n           break;\n         }\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n         }\n       }\n     } catch (IOException | YarnException | InterruptedException e) {\n       LOG.info(\"Failed to stop \" + serviceName + \" gracefully due to: \"\n           + e.getMessage() + \", forcefully kill the app.\");\n       yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n     }\n+    cleanUpRegistry(serviceName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStop(String serviceName, boolean waitForAppStopped)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    if (currentAppId \u003d\u003d null) {\n      LOG.info(\"Application ID doesn\u0027t exist for service {}\", serviceName);\n      cleanUpRegistry(serviceName);\n      return EXIT_COMMAND_ARGUMENT_ERROR;\n    }\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n          report.getYarnApplicationState());\n      cleanUpRegistry(serviceName);\n      return EXIT_COMMAND_ARGUMENT_ERROR;\n    }\n    if (preRunningStates.contains(report.getYarnApplicationState())) {\n      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n          + \", forcefully killed by user!\";\n      yarnClient.killApplication(currentAppId, msg);\n      LOG.info(msg);\n      cleanUpRegistry(serviceName);\n      return EXIT_SUCCESS;\n    }\n    if (StringUtils.isEmpty(report.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n    try {\n      ClientAMProtocol proxy \u003d\n          createAMProxy(serviceName, report);\n      cachedAppInfo.remove(serviceName);\n      if (proxy !\u003d null) {\n        // try to stop the app gracefully.\n        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n        proxy.stop(request);\n        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n      } else {\n        yarnClient.killApplication(currentAppId,\n            serviceName + \" is forcefully killed by user!\");\n        LOG.info(\"Forcefully kill the service: \" + serviceName);\n        cleanUpRegistry(serviceName);\n        return EXIT_SUCCESS;\n      }\n\n      if (!waitForAppStopped) {\n        cleanUpRegistry(serviceName);\n        return EXIT_SUCCESS;\n      }\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(2000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + serviceName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + serviceName + \" gracefully due to: \"\n          + e.getMessage() + \", forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    cleanUpRegistry(serviceName);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "315f48e791790ce56d4f9ed220180aaa00bbc5fa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7955. Improve result of calling stop on an already stopped service. Contributed by Gour Saha\n",
      "commitDate": "28/02/18 3:01 PM",
      "commitName": "315f48e791790ce56d4f9ed220180aaa00bbc5fa",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "31/01/18 5:51 PM",
      "commitNameOld": "0bee3849e323bf71925024992f9e655aee2d75f9",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 27.88,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   public int actionStop(String serviceName, boolean waitForAppStopped)\n       throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n     if (terminatedStates.contains(report.getYarnApplicationState())) {\n       LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n           report.getYarnApplicationState());\n-      return EXIT_SUCCESS;\n+      return EXIT_COMMAND_ARGUMENT_ERROR;\n     }\n     if (preRunningStates.contains(report.getYarnApplicationState())) {\n       String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n           + \", forcefully killed by user!\";\n       yarnClient.killApplication(currentAppId, msg);\n       LOG.info(msg);\n       return EXIT_SUCCESS;\n     }\n     if (StringUtils.isEmpty(report.getHost())) {\n       throw new YarnException(serviceName + \" AM hostname is empty\");\n     }\n     LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n     try {\n       ClientAMProtocol proxy \u003d\n           createAMProxy(serviceName, report);\n       cachedAppInfo.remove(serviceName);\n       if (proxy !\u003d null) {\n         // try to stop the app gracefully.\n         StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n         proxy.stop(request);\n         LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n       } else {\n         yarnClient.killApplication(currentAppId,\n             serviceName + \" is forcefully killed by user!\");\n         LOG.info(\"Forcefully kill the service: \" + serviceName);\n         return EXIT_SUCCESS;\n       }\n \n       if (!waitForAppStopped) {\n         return EXIT_SUCCESS;\n       }\n       // Wait until the app is killed.\n       long startTime \u003d System.currentTimeMillis();\n       int pollCount \u003d 0;\n       while (true) {\n         Thread.sleep(2000);\n         report \u003d yarnClient.getApplicationReport(currentAppId);\n         if (terminatedStates.contains(report.getYarnApplicationState())) {\n           LOG.info(\"Service \" + serviceName + \" is stopped.\");\n           break;\n         }\n         // Forcefully kill after 10 seconds.\n         if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n           LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n               + serviceName);\n           yarnClient.killApplication(currentAppId,\n               \"Forcefully kill the app by user\");\n           break;\n         }\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n         }\n       }\n     } catch (IOException | YarnException | InterruptedException e) {\n       LOG.info(\"Failed to stop \" + serviceName + \" gracefully due to: \"\n           + e.getMessage() + \", forcefully kill the app.\");\n       yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStop(String serviceName, boolean waitForAppStopped)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n          report.getYarnApplicationState());\n      return EXIT_COMMAND_ARGUMENT_ERROR;\n    }\n    if (preRunningStates.contains(report.getYarnApplicationState())) {\n      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n          + \", forcefully killed by user!\";\n      yarnClient.killApplication(currentAppId, msg);\n      LOG.info(msg);\n      return EXIT_SUCCESS;\n    }\n    if (StringUtils.isEmpty(report.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n    try {\n      ClientAMProtocol proxy \u003d\n          createAMProxy(serviceName, report);\n      cachedAppInfo.remove(serviceName);\n      if (proxy !\u003d null) {\n        // try to stop the app gracefully.\n        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n        proxy.stop(request);\n        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n      } else {\n        yarnClient.killApplication(currentAppId,\n            serviceName + \" is forcefully killed by user!\");\n        LOG.info(\"Forcefully kill the service: \" + serviceName);\n        return EXIT_SUCCESS;\n      }\n\n      if (!waitForAppStopped) {\n        return EXIT_SUCCESS;\n      }\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(2000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + serviceName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + serviceName + \" gracefully due to: \"\n          + e.getMessage() + \", forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 10:53 AM",
      "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   public int actionStop(String serviceName, boolean waitForAppStopped)\n       throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n     if (terminatedStates.contains(report.getYarnApplicationState())) {\n       LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n           report.getYarnApplicationState());\n       return EXIT_SUCCESS;\n     }\n     if (preRunningStates.contains(report.getYarnApplicationState())) {\n       String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n           + \", forcefully killed by user!\";\n       yarnClient.killApplication(currentAppId, msg);\n       LOG.info(msg);\n       return EXIT_SUCCESS;\n     }\n     if (StringUtils.isEmpty(report.getHost())) {\n       throw new YarnException(serviceName + \" AM hostname is empty\");\n     }\n     LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n     try {\n       ClientAMProtocol proxy \u003d\n-          createAMProxy(report.getHost(), report.getRpcPort());\n-      cachedAppIds.remove(serviceName);\n+          createAMProxy(serviceName, report);\n+      cachedAppInfo.remove(serviceName);\n       if (proxy !\u003d null) {\n         // try to stop the app gracefully.\n         StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n         proxy.stop(request);\n         LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n       } else {\n         yarnClient.killApplication(currentAppId,\n             serviceName + \" is forcefully killed by user!\");\n         LOG.info(\"Forcefully kill the service: \" + serviceName);\n         return EXIT_SUCCESS;\n       }\n \n       if (!waitForAppStopped) {\n         return EXIT_SUCCESS;\n       }\n       // Wait until the app is killed.\n       long startTime \u003d System.currentTimeMillis();\n       int pollCount \u003d 0;\n       while (true) {\n         Thread.sleep(2000);\n         report \u003d yarnClient.getApplicationReport(currentAppId);\n         if (terminatedStates.contains(report.getYarnApplicationState())) {\n           LOG.info(\"Service \" + serviceName + \" is stopped.\");\n           break;\n         }\n         // Forcefully kill after 10 seconds.\n         if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n           LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n               + serviceName);\n           yarnClient.killApplication(currentAppId,\n               \"Forcefully kill the app by user\");\n           break;\n         }\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n         }\n       }\n     } catch (IOException | YarnException | InterruptedException e) {\n-      LOG.info(\"Failed to stop \" + serviceName\n-          + \" gracefully, forcefully kill the app.\");\n+      LOG.info(\"Failed to stop \" + serviceName + \" gracefully due to: \"\n+          + e.getMessage() + \", forcefully kill the app.\");\n       yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStop(String serviceName, boolean waitForAppStopped)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n          report.getYarnApplicationState());\n      return EXIT_SUCCESS;\n    }\n    if (preRunningStates.contains(report.getYarnApplicationState())) {\n      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n          + \", forcefully killed by user!\";\n      yarnClient.killApplication(currentAppId, msg);\n      LOG.info(msg);\n      return EXIT_SUCCESS;\n    }\n    if (StringUtils.isEmpty(report.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n    try {\n      ClientAMProtocol proxy \u003d\n          createAMProxy(serviceName, report);\n      cachedAppInfo.remove(serviceName);\n      if (proxy !\u003d null) {\n        // try to stop the app gracefully.\n        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n        proxy.stop(request);\n        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n      } else {\n        yarnClient.killApplication(currentAppId,\n            serviceName + \" is forcefully killed by user!\");\n        LOG.info(\"Forcefully kill the service: \" + serviceName);\n        return EXIT_SUCCESS;\n      }\n\n      if (!waitForAppStopped) {\n        return EXIT_SUCCESS;\n      }\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(2000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + serviceName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + serviceName + \" gracefully due to: \"\n          + e.getMessage() + \", forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,69 @@\n-  public int actionStop(String appName, boolean waitForAppStopped)\n+  public int actionStop(String serviceName, boolean waitForAppStopped)\n       throws YarnException, IOException {\n-    validateClusterName(appName);\n-    getAppId(appName);\n-    ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n     if (terminatedStates.contains(report.getYarnApplicationState())) {\n-      LOG.info(\"Application {} is already in a terminated state {}\", appName,\n+      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n           report.getYarnApplicationState());\n       return EXIT_SUCCESS;\n     }\n-    LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n+    if (preRunningStates.contains(report.getYarnApplicationState())) {\n+      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n+          + \", forcefully killed by user!\";\n+      yarnClient.killApplication(currentAppId, msg);\n+      LOG.info(msg);\n+      return EXIT_SUCCESS;\n+    }\n+    if (StringUtils.isEmpty(report.getHost())) {\n+      throw new YarnException(serviceName + \" AM hostname is empty\");\n+    }\n+    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n     try {\n-      ClientAMProtocol proxy \u003d getAMProxy(appName, report);\n-      cachedAppIds.remove(appName);\n-      cachedAMProxies.remove(appName);\n+      ClientAMProtocol proxy \u003d\n+          createAMProxy(report.getHost(), report.getRpcPort());\n+      cachedAppIds.remove(serviceName);\n       if (proxy !\u003d null) {\n         // try to stop the app gracefully.\n         StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n         proxy.stop(request);\n-        LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n+        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n       } else {\n         yarnClient.killApplication(currentAppId,\n-            appName + \" is forcefully killed by user!\");\n-        LOG.info(\"Forcefully kill the application: \" + appName);\n+            serviceName + \" is forcefully killed by user!\");\n+        LOG.info(\"Forcefully kill the service: \" + serviceName);\n         return EXIT_SUCCESS;\n       }\n \n       if (!waitForAppStopped) {\n         return EXIT_SUCCESS;\n       }\n       // Wait until the app is killed.\n       long startTime \u003d System.currentTimeMillis();\n       int pollCount \u003d 0;\n       while (true) {\n         Thread.sleep(2000);\n         report \u003d yarnClient.getApplicationReport(currentAppId);\n         if (terminatedStates.contains(report.getYarnApplicationState())) {\n-          LOG.info(\"Application \" + appName + \" is stopped.\");\n+          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n           break;\n         }\n         // Forcefully kill after 10 seconds.\n         if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n           LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n-              + appName);\n+              + serviceName);\n           yarnClient.killApplication(currentAppId,\n               \"Forcefully kill the app by user\");\n           break;\n         }\n         if (++pollCount % 10 \u003d\u003d 0) {\n-          LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n+          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n         }\n       }\n     } catch (IOException | YarnException | InterruptedException e) {\n-      LOG.info(\"Failed to stop \" + appName\n+      LOG.info(\"Failed to stop \" + serviceName\n           + \" gracefully, forcefully kill the app.\");\n       yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionStop(String serviceName, boolean waitForAppStopped)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n          report.getYarnApplicationState());\n      return EXIT_SUCCESS;\n    }\n    if (preRunningStates.contains(report.getYarnApplicationState())) {\n      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n          + \", forcefully killed by user!\";\n      yarnClient.killApplication(currentAppId, msg);\n      LOG.info(msg);\n      return EXIT_SUCCESS;\n    }\n    if (StringUtils.isEmpty(report.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n    try {\n      ClientAMProtocol proxy \u003d\n          createAMProxy(report.getHost(), report.getRpcPort());\n      cachedAppIds.remove(serviceName);\n      if (proxy !\u003d null) {\n        // try to stop the app gracefully.\n        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n        proxy.stop(request);\n        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n      } else {\n        yarnClient.killApplication(currentAppId,\n            serviceName + \" is forcefully killed by user!\");\n        LOG.info(\"Forcefully kill the service: \" + serviceName);\n        return EXIT_SUCCESS;\n      }\n\n      if (!waitForAppStopped) {\n        return EXIT_SUCCESS;\n      }\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(2000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + serviceName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + serviceName\n          + \" gracefully, forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,69 @@\n-  public int actionStop(String appName, boolean waitForAppStopped)\n+  public int actionStop(String serviceName, boolean waitForAppStopped)\n       throws YarnException, IOException {\n-    validateClusterName(appName);\n-    getAppId(appName);\n-    ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n     if (terminatedStates.contains(report.getYarnApplicationState())) {\n-      LOG.info(\"Application {} is already in a terminated state {}\", appName,\n+      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n           report.getYarnApplicationState());\n       return EXIT_SUCCESS;\n     }\n-    LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n+    if (preRunningStates.contains(report.getYarnApplicationState())) {\n+      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n+          + \", forcefully killed by user!\";\n+      yarnClient.killApplication(currentAppId, msg);\n+      LOG.info(msg);\n+      return EXIT_SUCCESS;\n+    }\n+    if (StringUtils.isEmpty(report.getHost())) {\n+      throw new YarnException(serviceName + \" AM hostname is empty\");\n+    }\n+    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n     try {\n-      ClientAMProtocol proxy \u003d getAMProxy(appName, report);\n-      cachedAppIds.remove(appName);\n-      cachedAMProxies.remove(appName);\n+      ClientAMProtocol proxy \u003d\n+          createAMProxy(report.getHost(), report.getRpcPort());\n+      cachedAppIds.remove(serviceName);\n       if (proxy !\u003d null) {\n         // try to stop the app gracefully.\n         StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n         proxy.stop(request);\n-        LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n+        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n       } else {\n         yarnClient.killApplication(currentAppId,\n-            appName + \" is forcefully killed by user!\");\n-        LOG.info(\"Forcefully kill the application: \" + appName);\n+            serviceName + \" is forcefully killed by user!\");\n+        LOG.info(\"Forcefully kill the service: \" + serviceName);\n         return EXIT_SUCCESS;\n       }\n \n       if (!waitForAppStopped) {\n         return EXIT_SUCCESS;\n       }\n       // Wait until the app is killed.\n       long startTime \u003d System.currentTimeMillis();\n       int pollCount \u003d 0;\n       while (true) {\n         Thread.sleep(2000);\n         report \u003d yarnClient.getApplicationReport(currentAppId);\n         if (terminatedStates.contains(report.getYarnApplicationState())) {\n-          LOG.info(\"Application \" + appName + \" is stopped.\");\n+          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n           break;\n         }\n         // Forcefully kill after 10 seconds.\n         if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n           LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n-              + appName);\n+              + serviceName);\n           yarnClient.killApplication(currentAppId,\n               \"Forcefully kill the app by user\");\n           break;\n         }\n         if (++pollCount % 10 \u003d\u003d 0) {\n-          LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n+          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n         }\n       }\n     } catch (IOException | YarnException | InterruptedException e) {\n-      LOG.info(\"Failed to stop \" + appName\n+      LOG.info(\"Failed to stop \" + serviceName\n           + \" gracefully, forcefully kill the app.\");\n       yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionStop(String serviceName, boolean waitForAppStopped)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n          report.getYarnApplicationState());\n      return EXIT_SUCCESS;\n    }\n    if (preRunningStates.contains(report.getYarnApplicationState())) {\n      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n          + \", forcefully killed by user!\";\n      yarnClient.killApplication(currentAppId, msg);\n      LOG.info(msg);\n      return EXIT_SUCCESS;\n    }\n    if (StringUtils.isEmpty(report.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n    try {\n      ClientAMProtocol proxy \u003d\n          createAMProxy(report.getHost(), report.getRpcPort());\n      cachedAppIds.remove(serviceName);\n      if (proxy !\u003d null) {\n        // try to stop the app gracefully.\n        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n        proxy.stop(request);\n        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n      } else {\n        yarnClient.killApplication(currentAppId,\n            serviceName + \" is forcefully killed by user!\");\n        LOG.info(\"Forcefully kill the service: \" + serviceName);\n        return EXIT_SUCCESS;\n      }\n\n      if (!waitForAppStopped) {\n        return EXIT_SUCCESS;\n      }\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(2000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + serviceName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + serviceName\n          + \" gracefully, forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,69 @@\n-  public int actionStop(String appName, boolean waitForAppStopped)\n+  public int actionStop(String serviceName, boolean waitForAppStopped)\n       throws YarnException, IOException {\n-    validateClusterName(appName);\n-    getAppId(appName);\n-    ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n     if (terminatedStates.contains(report.getYarnApplicationState())) {\n-      LOG.info(\"Application {} is already in a terminated state {}\", appName,\n+      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n           report.getYarnApplicationState());\n       return EXIT_SUCCESS;\n     }\n-    LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n+    if (preRunningStates.contains(report.getYarnApplicationState())) {\n+      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n+          + \", forcefully killed by user!\";\n+      yarnClient.killApplication(currentAppId, msg);\n+      LOG.info(msg);\n+      return EXIT_SUCCESS;\n+    }\n+    if (StringUtils.isEmpty(report.getHost())) {\n+      throw new YarnException(serviceName + \" AM hostname is empty\");\n+    }\n+    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n     try {\n-      ClientAMProtocol proxy \u003d getAMProxy(appName, report);\n-      cachedAppIds.remove(appName);\n-      cachedAMProxies.remove(appName);\n+      ClientAMProtocol proxy \u003d\n+          createAMProxy(report.getHost(), report.getRpcPort());\n+      cachedAppIds.remove(serviceName);\n       if (proxy !\u003d null) {\n         // try to stop the app gracefully.\n         StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n         proxy.stop(request);\n-        LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n+        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n       } else {\n         yarnClient.killApplication(currentAppId,\n-            appName + \" is forcefully killed by user!\");\n-        LOG.info(\"Forcefully kill the application: \" + appName);\n+            serviceName + \" is forcefully killed by user!\");\n+        LOG.info(\"Forcefully kill the service: \" + serviceName);\n         return EXIT_SUCCESS;\n       }\n \n       if (!waitForAppStopped) {\n         return EXIT_SUCCESS;\n       }\n       // Wait until the app is killed.\n       long startTime \u003d System.currentTimeMillis();\n       int pollCount \u003d 0;\n       while (true) {\n         Thread.sleep(2000);\n         report \u003d yarnClient.getApplicationReport(currentAppId);\n         if (terminatedStates.contains(report.getYarnApplicationState())) {\n-          LOG.info(\"Application \" + appName + \" is stopped.\");\n+          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n           break;\n         }\n         // Forcefully kill after 10 seconds.\n         if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n           LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n-              + appName);\n+              + serviceName);\n           yarnClient.killApplication(currentAppId,\n               \"Forcefully kill the app by user\");\n           break;\n         }\n         if (++pollCount % 10 \u003d\u003d 0) {\n-          LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n+          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n         }\n       }\n     } catch (IOException | YarnException | InterruptedException e) {\n-      LOG.info(\"Failed to stop \" + appName\n+      LOG.info(\"Failed to stop \" + serviceName\n           + \" gracefully, forcefully kill the app.\");\n       yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionStop(String serviceName, boolean waitForAppStopped)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Service {} is already in a terminated state {}\", serviceName,\n          report.getYarnApplicationState());\n      return EXIT_SUCCESS;\n    }\n    if (preRunningStates.contains(report.getYarnApplicationState())) {\n      String msg \u003d serviceName + \" is at \" + report.getYarnApplicationState()\n          + \", forcefully killed by user!\";\n      yarnClient.killApplication(currentAppId, msg);\n      LOG.info(msg);\n      return EXIT_SUCCESS;\n    }\n    if (StringUtils.isEmpty(report.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    LOG.info(\"Stopping service {}, with appId \u003d {}\", serviceName, currentAppId);\n    try {\n      ClientAMProtocol proxy \u003d\n          createAMProxy(report.getHost(), report.getRpcPort());\n      cachedAppIds.remove(serviceName);\n      if (proxy !\u003d null) {\n        // try to stop the app gracefully.\n        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n        proxy.stop(request);\n        LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\n      } else {\n        yarnClient.killApplication(currentAppId,\n            serviceName + \" is forcefully killed by user!\");\n        LOG.info(\"Forcefully kill the service: \" + serviceName);\n        return EXIT_SUCCESS;\n      }\n\n      if (!waitForAppStopped) {\n        return EXIT_SUCCESS;\n      }\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(2000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Service \" + serviceName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + serviceName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + serviceName\n          + \" gracefully, forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String, waitForAppStopped-boolean]",
            "newValue": "[serviceName-String, waitForAppStopped-boolean]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,60 @@\n-  public int actionStop(String appName) throws YarnException, IOException {\n+  public int actionStop(String appName, boolean waitForAppStopped)\n+      throws YarnException, IOException {\n     validateClusterName(appName);\n-    getAppIdFromPersistedApp(appName);\n+    getAppId(appName);\n     ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n     ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n     if (terminatedStates.contains(report.getYarnApplicationState())) {\n       LOG.info(\"Application {} is already in a terminated state {}\", appName,\n           report.getYarnApplicationState());\n       return EXIT_SUCCESS;\n     }\n     LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n     try {\n-      // try to stop the app gracefully.\n-      ClientAMProtocol proxy \u003d connectToAM(appName);\n-      StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n-      proxy.stop(request);\n-      LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n+      ClientAMProtocol proxy \u003d getAMProxy(appName, report);\n+      cachedAppIds.remove(appName);\n+      cachedAMProxies.remove(appName);\n+      if (proxy !\u003d null) {\n+        // try to stop the app gracefully.\n+        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n+        proxy.stop(request);\n+        LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n+      } else {\n+        yarnClient.killApplication(currentAppId,\n+            appName + \" is forcefully killed by user!\");\n+        LOG.info(\"Forcefully kill the application: \" + appName);\n+        return EXIT_SUCCESS;\n+      }\n \n+      if (!waitForAppStopped) {\n+        return EXIT_SUCCESS;\n+      }\n       // Wait until the app is killed.\n       long startTime \u003d System.currentTimeMillis();\n       int pollCount \u003d 0;\n       while (true) {\n-        Thread.sleep(1000);\n+        Thread.sleep(2000);\n         report \u003d yarnClient.getApplicationReport(currentAppId);\n         if (terminatedStates.contains(report.getYarnApplicationState())) {\n           LOG.info(\"Application \" + appName + \" is stopped.\");\n           break;\n         }\n         // Forcefully kill after 10 seconds.\n         if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n           LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n               + appName);\n           yarnClient.killApplication(currentAppId,\n               \"Forcefully kill the app by user\");\n           break;\n         }\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n         }\n       }\n     } catch (IOException | YarnException | InterruptedException e) {\n       LOG.info(\"Failed to stop \" + appName\n           + \" gracefully, forcefully kill the app.\");\n       yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionStop(String appName, boolean waitForAppStopped)\n      throws YarnException, IOException {\n    validateClusterName(appName);\n    getAppId(appName);\n    ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Application {} is already in a terminated state {}\", appName,\n          report.getYarnApplicationState());\n      return EXIT_SUCCESS;\n    }\n    LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n    try {\n      ClientAMProtocol proxy \u003d getAMProxy(appName, report);\n      cachedAppIds.remove(appName);\n      cachedAMProxies.remove(appName);\n      if (proxy !\u003d null) {\n        // try to stop the app gracefully.\n        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n        proxy.stop(request);\n        LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n      } else {\n        yarnClient.killApplication(currentAppId,\n            appName + \" is forcefully killed by user!\");\n        LOG.info(\"Forcefully kill the application: \" + appName);\n        return EXIT_SUCCESS;\n      }\n\n      if (!waitForAppStopped) {\n        return EXIT_SUCCESS;\n      }\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(2000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Application \" + appName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + appName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + appName\n          + \" gracefully, forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String]",
            "newValue": "[appName-String, waitForAppStopped-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,60 @@\n-  public int actionStop(String appName) throws YarnException, IOException {\n+  public int actionStop(String appName, boolean waitForAppStopped)\n+      throws YarnException, IOException {\n     validateClusterName(appName);\n-    getAppIdFromPersistedApp(appName);\n+    getAppId(appName);\n     ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n     ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n     if (terminatedStates.contains(report.getYarnApplicationState())) {\n       LOG.info(\"Application {} is already in a terminated state {}\", appName,\n           report.getYarnApplicationState());\n       return EXIT_SUCCESS;\n     }\n     LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n     try {\n-      // try to stop the app gracefully.\n-      ClientAMProtocol proxy \u003d connectToAM(appName);\n-      StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n-      proxy.stop(request);\n-      LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n+      ClientAMProtocol proxy \u003d getAMProxy(appName, report);\n+      cachedAppIds.remove(appName);\n+      cachedAMProxies.remove(appName);\n+      if (proxy !\u003d null) {\n+        // try to stop the app gracefully.\n+        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n+        proxy.stop(request);\n+        LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n+      } else {\n+        yarnClient.killApplication(currentAppId,\n+            appName + \" is forcefully killed by user!\");\n+        LOG.info(\"Forcefully kill the application: \" + appName);\n+        return EXIT_SUCCESS;\n+      }\n \n+      if (!waitForAppStopped) {\n+        return EXIT_SUCCESS;\n+      }\n       // Wait until the app is killed.\n       long startTime \u003d System.currentTimeMillis();\n       int pollCount \u003d 0;\n       while (true) {\n-        Thread.sleep(1000);\n+        Thread.sleep(2000);\n         report \u003d yarnClient.getApplicationReport(currentAppId);\n         if (terminatedStates.contains(report.getYarnApplicationState())) {\n           LOG.info(\"Application \" + appName + \" is stopped.\");\n           break;\n         }\n         // Forcefully kill after 10 seconds.\n         if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n           LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n               + appName);\n           yarnClient.killApplication(currentAppId,\n               \"Forcefully kill the app by user\");\n           break;\n         }\n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n         }\n       }\n     } catch (IOException | YarnException | InterruptedException e) {\n       LOG.info(\"Failed to stop \" + appName\n           + \" gracefully, forcefully kill the app.\");\n       yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionStop(String appName, boolean waitForAppStopped)\n      throws YarnException, IOException {\n    validateClusterName(appName);\n    getAppId(appName);\n    ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Application {} is already in a terminated state {}\", appName,\n          report.getYarnApplicationState());\n      return EXIT_SUCCESS;\n    }\n    LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n    try {\n      ClientAMProtocol proxy \u003d getAMProxy(appName, report);\n      cachedAppIds.remove(appName);\n      cachedAMProxies.remove(appName);\n      if (proxy !\u003d null) {\n        // try to stop the app gracefully.\n        StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n        proxy.stop(request);\n        LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n      } else {\n        yarnClient.killApplication(currentAppId,\n            appName + \" is forcefully killed by user!\");\n        LOG.info(\"Forcefully kill the application: \" + appName);\n        return EXIT_SUCCESS;\n      }\n\n      if (!waitForAppStopped) {\n        return EXIT_SUCCESS;\n      }\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(2000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Application \" + appName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + appName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + appName\n          + \" gracefully, forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,47 @@\n+  public int actionStop(String appName) throws YarnException, IOException {\n+    validateClusterName(appName);\n+    getAppIdFromPersistedApp(appName);\n+    ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n+    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n+    if (terminatedStates.contains(report.getYarnApplicationState())) {\n+      LOG.info(\"Application {} is already in a terminated state {}\", appName,\n+          report.getYarnApplicationState());\n+      return EXIT_SUCCESS;\n+    }\n+    LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n+    try {\n+      // try to stop the app gracefully.\n+      ClientAMProtocol proxy \u003d connectToAM(appName);\n+      StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n+      proxy.stop(request);\n+      LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n+\n+      // Wait until the app is killed.\n+      long startTime \u003d System.currentTimeMillis();\n+      int pollCount \u003d 0;\n+      while (true) {\n+        Thread.sleep(1000);\n+        report \u003d yarnClient.getApplicationReport(currentAppId);\n+        if (terminatedStates.contains(report.getYarnApplicationState())) {\n+          LOG.info(\"Application \" + appName + \" is stopped.\");\n+          break;\n+        }\n+        // Forcefully kill after 10 seconds.\n+        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n+          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n+              + appName);\n+          yarnClient.killApplication(currentAppId,\n+              \"Forcefully kill the app by user\");\n+          break;\n+        }\n+        if (++pollCount % 10 \u003d\u003d 0) {\n+          LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n+        }\n+      }\n+    } catch (IOException | YarnException | InterruptedException e) {\n+      LOG.info(\"Failed to stop \" + appName\n+          + \" gracefully, forcefully kill the app.\");\n+      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n+    }\n+    return EXIT_SUCCESS;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionStop(String appName) throws YarnException, IOException {\n    validateClusterName(appName);\n    getAppIdFromPersistedApp(appName);\n    ApplicationId currentAppId \u003d cachedAppIds.get(appName);\n    ApplicationReport report \u003d yarnClient.getApplicationReport(currentAppId);\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\n      LOG.info(\"Application {} is already in a terminated state {}\", appName,\n          report.getYarnApplicationState());\n      return EXIT_SUCCESS;\n    }\n    LOG.info(\"Stopping application {}, with appId \u003d {}\", appName, currentAppId);\n    try {\n      // try to stop the app gracefully.\n      ClientAMProtocol proxy \u003d connectToAM(appName);\n      StopRequestProto request \u003d StopRequestProto.newBuilder().build();\n      proxy.stop(request);\n      LOG.info(\"Application \" + appName + \" is being gracefully stopped...\");\n\n      // Wait until the app is killed.\n      long startTime \u003d System.currentTimeMillis();\n      int pollCount \u003d 0;\n      while (true) {\n        Thread.sleep(1000);\n        report \u003d yarnClient.getApplicationReport(currentAppId);\n        if (terminatedStates.contains(report.getYarnApplicationState())) {\n          LOG.info(\"Application \" + appName + \" is stopped.\");\n          break;\n        }\n        // Forcefully kill after 10 seconds.\n        if ((System.currentTimeMillis() - startTime) \u003e 10000) {\n          LOG.info(\"Stop operation timeout stopping, forcefully kill the app \"\n              + appName);\n          yarnClient.killApplication(currentAppId,\n              \"Forcefully kill the app by user\");\n          break;\n        }\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\"Waiting for application \" + appName + \" to be stopped.\");\n        }\n      }\n    } catch (IOException | YarnException | InterruptedException e) {\n      LOG.info(\"Failed to stop \" + appName\n          + \" gracefully, forcefully kill the app.\");\n      yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\n    }\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}