{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InconsistentAmazonS3Client.java",
  "functionName": "addPrefixIfNotPresent",
  "functionId": "addPrefixIfNotPresent___prefixes-List__String____ancestor-String__child-String",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/InconsistentAmazonS3Client.java",
  "functionStartLine": 296,
  "functionEndLine": 314,
  "numCommitsSeen": 7,
  "timeTaken": 1592,
  "changeHistory": [
    "511df1e837b19ccb9271520589452d82d50ac69d",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "511df1e837b19ccb9271520589452d82d50ac69d": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "511df1e837b19ccb9271520589452d82d50ac69d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions\n\nContributed by Steve Loughran.\n\nThis overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.\nIt also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.\n\nFor path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.\n\nChange-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e\n",
      "commitDate": "05/09/19 6:25 AM",
      "commitName": "511df1e837b19ccb9271520589452d82d50ac69d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/02/19 1:07 PM",
      "commitNameOld": "6c999fe4b0181720c8e55be8388bd592196c8c87",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 205.68,
      "commitsBetweenForRepo": 1617,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   private void addPrefixIfNotPresent(List\u003cString\u003e prefixes, String ancestor,\n       String child) {\n     Path prefixCandidate \u003d new Path(child).getParent();\n     Path ancestorPath \u003d new Path(ancestor);\n     Preconditions.checkArgument(child.startsWith(ancestor), \"%s does not \" +\n         \"start with %s\", child, ancestor);\n     while (!prefixCandidate.isRoot()) {\n       Path nextParent \u003d prefixCandidate.getParent();\n       if (nextParent.equals(ancestorPath)) {\n         String prefix \u003d prefixCandidate.toString();\n         if (!prefixes.contains(prefix)) {\n+          LOG.debug(\"Reinstate prefix {}\", prefix);\n           prefixes.add(prefix);\n         }\n         return;\n       }\n       prefixCandidate \u003d nextParent;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addPrefixIfNotPresent(List\u003cString\u003e prefixes, String ancestor,\n      String child) {\n    Path prefixCandidate \u003d new Path(child).getParent();\n    Path ancestorPath \u003d new Path(ancestor);\n    Preconditions.checkArgument(child.startsWith(ancestor), \"%s does not \" +\n        \"start with %s\", child, ancestor);\n    while (!prefixCandidate.isRoot()) {\n      Path nextParent \u003d prefixCandidate.getParent();\n      if (nextParent.equals(ancestorPath)) {\n        String prefix \u003d prefixCandidate.toString();\n        if (!prefixes.contains(prefix)) {\n          LOG.debug(\"Reinstate prefix {}\", prefix);\n          prefixes.add(prefix);\n        }\n        return;\n      }\n      prefixCandidate \u003d nextParent;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/InconsistentAmazonS3Client.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,18 @@\n+  private void addPrefixIfNotPresent(List\u003cString\u003e prefixes, String ancestor,\n+      String child) {\n+    Path prefixCandidate \u003d new Path(child).getParent();\n+    Path ancestorPath \u003d new Path(ancestor);\n+    Preconditions.checkArgument(child.startsWith(ancestor), \"%s does not \" +\n+        \"start with %s\", child, ancestor);\n+    while (!prefixCandidate.isRoot()) {\n+      Path nextParent \u003d prefixCandidate.getParent();\n+      if (nextParent.equals(ancestorPath)) {\n+        String prefix \u003d prefixCandidate.toString();\n+        if (!prefixes.contains(prefix)) {\n+          prefixes.add(prefix);\n+        }\n+        return;\n+      }\n+      prefixCandidate \u003d nextParent;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addPrefixIfNotPresent(List\u003cString\u003e prefixes, String ancestor,\n      String child) {\n    Path prefixCandidate \u003d new Path(child).getParent();\n    Path ancestorPath \u003d new Path(ancestor);\n    Preconditions.checkArgument(child.startsWith(ancestor), \"%s does not \" +\n        \"start with %s\", child, ancestor);\n    while (!prefixCandidate.isRoot()) {\n      Path nextParent \u003d prefixCandidate.getParent();\n      if (nextParent.equals(ancestorPath)) {\n        String prefix \u003d prefixCandidate.toString();\n        if (!prefixes.contains(prefix)) {\n          prefixes.add(prefix);\n        }\n        return;\n      }\n      prefixCandidate \u003d nextParent;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/InconsistentAmazonS3Client.java"
    }
  }
}