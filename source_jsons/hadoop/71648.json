{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryDNS.java",
  "functionName": "addAnswer",
  "functionId": "addAnswer___response-Message__name-Name__type-int__dclass-int__iterations-int__flags-int",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
  "functionStartLine": 1348,
  "functionEndLine": 1435,
  "numCommitsSeen": 15,
  "timeTaken": 1750,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "501be9b4be7d549b23cc501b26fdfdce0a7aa911",
    "f934f62fc71b4776e88f86d4254de0ea12147511"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "501be9b4be7d549b23cc501b26fdfdce0a7aa911": "Ybodychange",
    "f934f62fc71b4776e88f86d4254de0ea12147511": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  byte addAnswer(Message response, Name name, int type, int dclass,\n      int iterations, int flags) {\n    SetResponse sr \u003d null;\n    byte rcode \u003d Rcode.NOERROR;\n\n    if (iterations \u003e 6) {\n      return Rcode.NOERROR;\n    }\n\n    if (type \u003d\u003d Type.SIG || type \u003d\u003d Type.RRSIG) {\n      type \u003d Type.ANY;\n      flags |\u003d FLAG_SIGONLY;\n    }\n\n    Zone zone \u003d findBestZone(name);\n\n    LOG.debug(\"finding record\");\n    try (CloseableLock lock \u003d readLock.lock()) {\n      if (zone !\u003d null) {\n        sr \u003d zone.findRecords(name, type);\n      } else {\n        rcode \u003d Rcode.NOTAUTH;\n      }\n    }\n    LOG.info(\"found local record? {}\", sr !\u003d null \u0026\u0026 sr.isSuccessful());\n\n    if (sr !\u003d null) {\n      if (sr.isCNAME()) {\n        CNAMERecord cname \u003d sr.getCNAME();\n        RRset rrset \u003d zone.findExactMatch(cname.getName(), Type.CNAME);\n        addRRset(name, response, rrset, Section.ANSWER, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n        rcode \u003d addAnswer(response, cname.getTarget(),\n            type, dclass, iterations + 1, flags);\n      }\n      if (sr.isNXDOMAIN()) {\n        response.getHeader().setRcode(Rcode.NXDOMAIN);\n        if (isDNSSECEnabled()) {\n          try {\n            addNXT(response, flags);\n          } catch (Exception e) {\n            LOG.warn(\"Unable to add NXTRecord to AUTHORITY Section\", e);\n          }\n        }\n        addSOA(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n        rcode \u003d Rcode.NXDOMAIN;\n      } else if (sr.isNXRRSET()) {\n        LOG.info(\"No data found the given name {} and type {}\", name, type);\n        addSOA(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n      } else if (sr.isSuccessful()) {\n        RRset[] rrsets \u003d sr.answers();\n        LOG.info(\"found answers {}\", rrsets);\n        for (int i \u003d 0; i \u003c rrsets.length; i++) {\n          addRRset(name, response, rrsets[i],\n              Section.ANSWER, flags);\n        }\n        addNS(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n      }\n    } else {\n      if (zone !\u003d null) {\n        Name defaultDomain \u003d null;\n        try {\n          defaultDomain \u003d Name.fromString(domainName);\n          zone \u003d zones.get(defaultDomain);\n          addNS(response, zone, flags);\n          if (iterations \u003d\u003d 0) {\n            response.getHeader().setFlag(Flags.AA);\n          }\n        } catch (TextParseException e) {\n          LOG.warn(\"Unable to obtain default zone for unknown name response\",\n              e);\n        }\n      }\n    }\n\n    return rcode;\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
      }
    },
    "501be9b4be7d549b23cc501b26fdfdce0a7aa911": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7326. Add recursion support and configure RegistryDNS to lookup upstream. Contributed by Eric Yang\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "501be9b4be7d549b23cc501b26fdfdce0a7aa911",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "92734800844b93bb19f3c0fca6be88d2801f7b1b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,88 @@\n   byte addAnswer(Message response, Name name, int type, int dclass,\n       int iterations, int flags) {\n     SetResponse sr \u003d null;\n     byte rcode \u003d Rcode.NOERROR;\n \n     if (iterations \u003e 6) {\n       return Rcode.NOERROR;\n     }\n \n     if (type \u003d\u003d Type.SIG || type \u003d\u003d Type.RRSIG) {\n       type \u003d Type.ANY;\n       flags |\u003d FLAG_SIGONLY;\n     }\n \n     Zone zone \u003d findBestZone(name);\n \n     LOG.debug(\"finding record\");\n     try (CloseableLock lock \u003d readLock.lock()) {\n       if (zone !\u003d null) {\n         sr \u003d zone.findRecords(name, type);\n       } else {\n         rcode \u003d Rcode.NOTAUTH;\n       }\n     }\n-    LOG.info(\"found record? {}\", sr !\u003d null \u0026\u0026 sr.isSuccessful());\n+    LOG.info(\"found local record? {}\", sr !\u003d null \u0026\u0026 sr.isSuccessful());\n \n     if (sr !\u003d null) {\n       if (sr.isCNAME()) {\n         CNAMERecord cname \u003d sr.getCNAME();\n         RRset rrset \u003d zone.findExactMatch(cname.getName(), Type.CNAME);\n         addRRset(name, response, rrset, Section.ANSWER, flags);\n         if (iterations \u003d\u003d 0) {\n           response.getHeader().setFlag(Flags.AA);\n         }\n         rcode \u003d addAnswer(response, cname.getTarget(),\n             type, dclass, iterations + 1, flags);\n       }\n       if (sr.isNXDOMAIN()) {\n         response.getHeader().setRcode(Rcode.NXDOMAIN);\n         if (isDNSSECEnabled()) {\n           try {\n             addNXT(response, flags);\n           } catch (Exception e) {\n             LOG.warn(\"Unable to add NXTRecord to AUTHORITY Section\", e);\n           }\n         }\n         addSOA(response, zone, flags);\n         if (iterations \u003d\u003d 0) {\n           response.getHeader().setFlag(Flags.AA);\n         }\n         rcode \u003d Rcode.NXDOMAIN;\n       } else if (sr.isNXRRSET()) {\n         LOG.info(\"No data found the given name {} and type {}\", name, type);\n         addSOA(response, zone, flags);\n         if (iterations \u003d\u003d 0) {\n           response.getHeader().setFlag(Flags.AA);\n         }\n       } else if (sr.isSuccessful()) {\n         RRset[] rrsets \u003d sr.answers();\n         LOG.info(\"found answers {}\", rrsets);\n         for (int i \u003d 0; i \u003c rrsets.length; i++) {\n           addRRset(name, response, rrsets[i],\n               Section.ANSWER, flags);\n         }\n         addNS(response, zone, flags);\n         if (iterations \u003d\u003d 0) {\n           response.getHeader().setFlag(Flags.AA);\n         }\n       }\n     } else {\n       if (zone !\u003d null) {\n         Name defaultDomain \u003d null;\n         try {\n           defaultDomain \u003d Name.fromString(domainName);\n           zone \u003d zones.get(defaultDomain);\n           addNS(response, zone, flags);\n           if (iterations \u003d\u003d 0) {\n             response.getHeader().setFlag(Flags.AA);\n           }\n         } catch (TextParseException e) {\n           LOG.warn(\"Unable to obtain default zone for unknown name response\",\n               e);\n         }\n       }\n     }\n+\n     return rcode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  byte addAnswer(Message response, Name name, int type, int dclass,\n      int iterations, int flags) {\n    SetResponse sr \u003d null;\n    byte rcode \u003d Rcode.NOERROR;\n\n    if (iterations \u003e 6) {\n      return Rcode.NOERROR;\n    }\n\n    if (type \u003d\u003d Type.SIG || type \u003d\u003d Type.RRSIG) {\n      type \u003d Type.ANY;\n      flags |\u003d FLAG_SIGONLY;\n    }\n\n    Zone zone \u003d findBestZone(name);\n\n    LOG.debug(\"finding record\");\n    try (CloseableLock lock \u003d readLock.lock()) {\n      if (zone !\u003d null) {\n        sr \u003d zone.findRecords(name, type);\n      } else {\n        rcode \u003d Rcode.NOTAUTH;\n      }\n    }\n    LOG.info(\"found local record? {}\", sr !\u003d null \u0026\u0026 sr.isSuccessful());\n\n    if (sr !\u003d null) {\n      if (sr.isCNAME()) {\n        CNAMERecord cname \u003d sr.getCNAME();\n        RRset rrset \u003d zone.findExactMatch(cname.getName(), Type.CNAME);\n        addRRset(name, response, rrset, Section.ANSWER, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n        rcode \u003d addAnswer(response, cname.getTarget(),\n            type, dclass, iterations + 1, flags);\n      }\n      if (sr.isNXDOMAIN()) {\n        response.getHeader().setRcode(Rcode.NXDOMAIN);\n        if (isDNSSECEnabled()) {\n          try {\n            addNXT(response, flags);\n          } catch (Exception e) {\n            LOG.warn(\"Unable to add NXTRecord to AUTHORITY Section\", e);\n          }\n        }\n        addSOA(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n        rcode \u003d Rcode.NXDOMAIN;\n      } else if (sr.isNXRRSET()) {\n        LOG.info(\"No data found the given name {} and type {}\", name, type);\n        addSOA(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n      } else if (sr.isSuccessful()) {\n        RRset[] rrsets \u003d sr.answers();\n        LOG.info(\"found answers {}\", rrsets);\n        for (int i \u003d 0; i \u003c rrsets.length; i++) {\n          addRRset(name, response, rrsets[i],\n              Section.ANSWER, flags);\n        }\n        addNS(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n      }\n    } else {\n      if (zone !\u003d null) {\n        Name defaultDomain \u003d null;\n        try {\n          defaultDomain \u003d Name.fromString(domainName);\n          zone \u003d zones.get(defaultDomain);\n          addNS(response, zone, flags);\n          if (iterations \u003d\u003d 0) {\n            response.getHeader().setFlag(Flags.AA);\n          }\n        } catch (TextParseException e) {\n          LOG.warn(\"Unable to obtain default zone for unknown name response\",\n              e);\n        }\n      }\n    }\n\n    return rcode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {}
    },
    "f934f62fc71b4776e88f86d4254de0ea12147511": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5218. Initial core change for DNS for YARN. Contributed by Jonathan Maron\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f934f62fc71b4776e88f86d4254de0ea12147511",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,87 @@\n+  byte addAnswer(Message response, Name name, int type, int dclass,\n+      int iterations, int flags) {\n+    SetResponse sr \u003d null;\n+    byte rcode \u003d Rcode.NOERROR;\n+\n+    if (iterations \u003e 6) {\n+      return Rcode.NOERROR;\n+    }\n+\n+    if (type \u003d\u003d Type.SIG || type \u003d\u003d Type.RRSIG) {\n+      type \u003d Type.ANY;\n+      flags |\u003d FLAG_SIGONLY;\n+    }\n+\n+    Zone zone \u003d findBestZone(name);\n+\n+    LOG.debug(\"finding record\");\n+    try (CloseableLock lock \u003d readLock.lock()) {\n+      if (zone !\u003d null) {\n+        sr \u003d zone.findRecords(name, type);\n+      } else {\n+        rcode \u003d Rcode.NOTAUTH;\n+      }\n+    }\n+    LOG.info(\"found record? {}\", sr !\u003d null \u0026\u0026 sr.isSuccessful());\n+\n+    if (sr !\u003d null) {\n+      if (sr.isCNAME()) {\n+        CNAMERecord cname \u003d sr.getCNAME();\n+        RRset rrset \u003d zone.findExactMatch(cname.getName(), Type.CNAME);\n+        addRRset(name, response, rrset, Section.ANSWER, flags);\n+        if (iterations \u003d\u003d 0) {\n+          response.getHeader().setFlag(Flags.AA);\n+        }\n+        rcode \u003d addAnswer(response, cname.getTarget(),\n+            type, dclass, iterations + 1, flags);\n+      }\n+      if (sr.isNXDOMAIN()) {\n+        response.getHeader().setRcode(Rcode.NXDOMAIN);\n+        if (isDNSSECEnabled()) {\n+          try {\n+            addNXT(response, flags);\n+          } catch (Exception e) {\n+            LOG.warn(\"Unable to add NXTRecord to AUTHORITY Section\", e);\n+          }\n+        }\n+        addSOA(response, zone, flags);\n+        if (iterations \u003d\u003d 0) {\n+          response.getHeader().setFlag(Flags.AA);\n+        }\n+        rcode \u003d Rcode.NXDOMAIN;\n+      } else if (sr.isNXRRSET()) {\n+        LOG.info(\"No data found the given name {} and type {}\", name, type);\n+        addSOA(response, zone, flags);\n+        if (iterations \u003d\u003d 0) {\n+          response.getHeader().setFlag(Flags.AA);\n+        }\n+      } else if (sr.isSuccessful()) {\n+        RRset[] rrsets \u003d sr.answers();\n+        LOG.info(\"found answers {}\", rrsets);\n+        for (int i \u003d 0; i \u003c rrsets.length; i++) {\n+          addRRset(name, response, rrsets[i],\n+              Section.ANSWER, flags);\n+        }\n+        addNS(response, zone, flags);\n+        if (iterations \u003d\u003d 0) {\n+          response.getHeader().setFlag(Flags.AA);\n+        }\n+      }\n+    } else {\n+      if (zone !\u003d null) {\n+        Name defaultDomain \u003d null;\n+        try {\n+          defaultDomain \u003d Name.fromString(domainName);\n+          zone \u003d zones.get(defaultDomain);\n+          addNS(response, zone, flags);\n+          if (iterations \u003d\u003d 0) {\n+            response.getHeader().setFlag(Flags.AA);\n+          }\n+        } catch (TextParseException e) {\n+          LOG.warn(\"Unable to obtain default zone for unknown name response\",\n+              e);\n+        }\n+      }\n+    }\n+    return rcode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  byte addAnswer(Message response, Name name, int type, int dclass,\n      int iterations, int flags) {\n    SetResponse sr \u003d null;\n    byte rcode \u003d Rcode.NOERROR;\n\n    if (iterations \u003e 6) {\n      return Rcode.NOERROR;\n    }\n\n    if (type \u003d\u003d Type.SIG || type \u003d\u003d Type.RRSIG) {\n      type \u003d Type.ANY;\n      flags |\u003d FLAG_SIGONLY;\n    }\n\n    Zone zone \u003d findBestZone(name);\n\n    LOG.debug(\"finding record\");\n    try (CloseableLock lock \u003d readLock.lock()) {\n      if (zone !\u003d null) {\n        sr \u003d zone.findRecords(name, type);\n      } else {\n        rcode \u003d Rcode.NOTAUTH;\n      }\n    }\n    LOG.info(\"found record? {}\", sr !\u003d null \u0026\u0026 sr.isSuccessful());\n\n    if (sr !\u003d null) {\n      if (sr.isCNAME()) {\n        CNAMERecord cname \u003d sr.getCNAME();\n        RRset rrset \u003d zone.findExactMatch(cname.getName(), Type.CNAME);\n        addRRset(name, response, rrset, Section.ANSWER, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n        rcode \u003d addAnswer(response, cname.getTarget(),\n            type, dclass, iterations + 1, flags);\n      }\n      if (sr.isNXDOMAIN()) {\n        response.getHeader().setRcode(Rcode.NXDOMAIN);\n        if (isDNSSECEnabled()) {\n          try {\n            addNXT(response, flags);\n          } catch (Exception e) {\n            LOG.warn(\"Unable to add NXTRecord to AUTHORITY Section\", e);\n          }\n        }\n        addSOA(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n        rcode \u003d Rcode.NXDOMAIN;\n      } else if (sr.isNXRRSET()) {\n        LOG.info(\"No data found the given name {} and type {}\", name, type);\n        addSOA(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n      } else if (sr.isSuccessful()) {\n        RRset[] rrsets \u003d sr.answers();\n        LOG.info(\"found answers {}\", rrsets);\n        for (int i \u003d 0; i \u003c rrsets.length; i++) {\n          addRRset(name, response, rrsets[i],\n              Section.ANSWER, flags);\n        }\n        addNS(response, zone, flags);\n        if (iterations \u003d\u003d 0) {\n          response.getHeader().setFlag(Flags.AA);\n        }\n      }\n    } else {\n      if (zone !\u003d null) {\n        Name defaultDomain \u003d null;\n        try {\n          defaultDomain \u003d Name.fromString(domainName);\n          zone \u003d zones.get(defaultDomain);\n          addNS(response, zone, flags);\n          if (iterations \u003d\u003d 0) {\n            response.getHeader().setFlag(Flags.AA);\n          }\n        } catch (TextParseException e) {\n          LOG.warn(\"Unable to obtain default zone for unknown name response\",\n              e);\n        }\n      }\n    }\n    return rcode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
    }
  }
}