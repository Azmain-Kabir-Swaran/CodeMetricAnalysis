{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServicesResourceTransformer.java",
  "functionName": "modifyOutputStream",
  "functionId": "modifyOutputStream___jos-JarOutputStream",
  "sourceFilePath": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/shade/resource/ServicesResourceTransformer.java",
  "functionStartLine": 94,
  "functionEndLine": 143,
  "numCommitsSeen": 2,
  "timeTaken": 381,
  "changeHistory": [
    "70ca1f1e3a328b18eb4e27f7d0f328ae403342d5"
  ],
  "changeHistoryShort": {
    "70ca1f1e3a328b18eb4e27f7d0f328ae403342d5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "70ca1f1e3a328b18eb4e27f7d0f328ae403342d5": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11804. Shaded Hadoop client artifacts and minicluster. Contributed by Sean Busbey.\n",
      "commitDate": "15/12/16 11:44 AM",
      "commitName": "70ca1f1e3a328b18eb4e27f7d0f328ae403342d5",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,50 @@\n+  public void modifyOutputStream(JarOutputStream jos)\n+      throws IOException {\n+    for (Map.Entry\u003cString, ServiceStream\u003e entry : serviceEntries.entrySet()) {\n+      String key \u003d entry.getKey();\n+      ServiceStream data \u003d entry.getValue();\n+\n+      if (relocators !\u003d null) {\n+        key \u003d key.substring(SERVICES_PATH.length() + 1);\n+        for (Relocator relocator : relocators) {\n+          if (relocator.canRelocateClass(key)) {\n+            key \u003d relocator.relocateClass(key);\n+            break;\n+          }\n+        }\n+\n+        key \u003d SERVICES_PATH + \u0027/\u0027 + key;\n+      }\n+\n+      jos.putNextEntry(new JarEntry(key));\n+\n+      //read the content of service file for candidate classes for relocation\n+      //presume everything is UTF8, because Findbugs barfs on default\n+      //charset and this seems no worse a choice ￂﾯ\\_(￣ﾃﾄ)_/ￂﾯ\n+      PrintWriter writer \u003d new PrintWriter(new OutputStreamWriter(jos,\n+          StandardCharsets.UTF_8));\n+      InputStreamReader streamReader \u003d\n+          new InputStreamReader(data.toInputStream(), StandardCharsets.UTF_8);\n+      BufferedReader reader \u003d new BufferedReader(streamReader);\n+      String className;\n+\n+      while ((className \u003d reader.readLine()) !\u003d null) {\n+\n+        if (relocators !\u003d null) {\n+          for (Relocator relocator : relocators) {\n+            //if the class can be relocated then relocate it\n+            if (relocator.canRelocateClass(className)) {\n+              className \u003d relocator.applyToSourceContent(className);\n+              break;\n+            }\n+          }\n+        }\n+\n+        writer.println(className);\n+        writer.flush();\n+      }\n+\n+      reader.close();\n+      data.reset();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void modifyOutputStream(JarOutputStream jos)\n      throws IOException {\n    for (Map.Entry\u003cString, ServiceStream\u003e entry : serviceEntries.entrySet()) {\n      String key \u003d entry.getKey();\n      ServiceStream data \u003d entry.getValue();\n\n      if (relocators !\u003d null) {\n        key \u003d key.substring(SERVICES_PATH.length() + 1);\n        for (Relocator relocator : relocators) {\n          if (relocator.canRelocateClass(key)) {\n            key \u003d relocator.relocateClass(key);\n            break;\n          }\n        }\n\n        key \u003d SERVICES_PATH + \u0027/\u0027 + key;\n      }\n\n      jos.putNextEntry(new JarEntry(key));\n\n      //read the content of service file for candidate classes for relocation\n      //presume everything is UTF8, because Findbugs barfs on default\n      //charset and this seems no worse a choice ￂﾯ\\_(￣ﾃﾄ)_/ￂﾯ\n      PrintWriter writer \u003d new PrintWriter(new OutputStreamWriter(jos,\n          StandardCharsets.UTF_8));\n      InputStreamReader streamReader \u003d\n          new InputStreamReader(data.toInputStream(), StandardCharsets.UTF_8);\n      BufferedReader reader \u003d new BufferedReader(streamReader);\n      String className;\n\n      while ((className \u003d reader.readLine()) !\u003d null) {\n\n        if (relocators !\u003d null) {\n          for (Relocator relocator : relocators) {\n            //if the class can be relocated then relocate it\n            if (relocator.canRelocateClass(className)) {\n              className \u003d relocator.applyToSourceContent(className);\n              break;\n            }\n          }\n        }\n\n        writer.println(className);\n        writer.flush();\n      }\n\n      reader.close();\n      data.reset();\n    }\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/shade/resource/ServicesResourceTransformer.java"
    }
  }
}