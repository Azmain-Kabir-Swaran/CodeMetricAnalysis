{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileJournalManager.java",
  "functionName": "selectInputStreams",
  "functionId": "selectInputStreams___streams-Collection__EditLogInputStream____fromTxnId-long__inProgressOk-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
  "functionStartLine": 368,
  "functionEndLine": 372,
  "numCommitsSeen": 179,
  "timeTaken": 5481,
  "changeHistory": [
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
    "53c38cc89ab979ec47557dcfa7affbad20578c0a",
    "ed72daa5df97669906234e8ac9a406d78136b206",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
    "8c62c46046656c01b327c378e89d57b4bf37e16e",
    "557ffe2101325438f15dbb218128d327984ecb11",
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
    "7accbabdee0b7619ff83514c173e815d290b33bf",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e",
    "706394d03992b394e9f907aff2155df493e4ea4e",
    "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
    "a339836bbc747324807b9690c6cb5bb13b1fdc0b",
    "9a07ba8945407cd8f63169faf9e0faa4311d38c7",
    "f87a4b40bc99e76602a75906df31747cfdbff78a",
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15"
  ],
  "changeHistoryShort": {
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": "Ymultichange(Yparameterchange,Ybodychange)",
    "53c38cc89ab979ec47557dcfa7affbad20578c0a": "Ybodychange",
    "ed72daa5df97669906234e8ac9a406d78136b206": "Ybodychange",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": "Yparameterchange",
    "8c62c46046656c01b327c378e89d57b4bf37e16e": "Yparameterchange",
    "557ffe2101325438f15dbb218128d327984ecb11": "Ybodychange",
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97": "Ymultichange(Yexceptionschange,Ybodychange)",
    "7accbabdee0b7619ff83514c173e815d290b33bf": "Ybodychange",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
    "706394d03992b394e9f907aff2155df493e4ea4e": "Ybodychange",
    "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926": "Ymultichange(Yparameterchange,Ybodychange)",
    "a339836bbc747324807b9690c6cb5bb13b1fdc0b": "Ybodychange",
    "9a07ba8945407cd8f63169faf9e0faa4311d38c7": "Ybodychange",
    "f87a4b40bc99e76602a75906df31747cfdbff78a": "Ybodychange",
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15": "Yintroduced"
  },
  "changeHistoryDetails": {
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
      "commitDate": "27/07/16 5:55 PM",
      "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
          "commitDate": "27/07/16 5:55 PM",
          "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "14/09/15 3:22 PM",
          "commitNameOld": "53bad4eb008ec553dcdbe01e7ae975dcecde6590",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 317.11,
          "commitsBetweenForRepo": 2253,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,5 @@\n   synchronized public void selectInputStreams(\n-      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n-      boolean inProgressOk) throws IOException {\n-    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(this + \": selecting input streams starting at \" + fromTxId +\n-          (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n-          \"from among \" + elfs.size() + \" candidate file(s)\");\n-    }\n-    addStreamsToCollectionFromFiles(elfs, streams, fromTxId,\n-        getLastReadableTxId(), inProgressOk);\n+      Collection\u003cEditLogInputStream\u003e streams,\n+      long fromTxnId, boolean inProgressOk) throws IOException {\n+    selectInputStreams(streams, fromTxnId, inProgressOk, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxnId, boolean inProgressOk) throws IOException {\n    selectInputStreams(streams, fromTxnId, inProgressOk, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {
            "oldValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean]",
            "newValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxnId-long, inProgressOk-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
          "commitDate": "27/07/16 5:55 PM",
          "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "14/09/15 3:22 PM",
          "commitNameOld": "53bad4eb008ec553dcdbe01e7ae975dcecde6590",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 317.11,
          "commitsBetweenForRepo": 2253,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,5 @@\n   synchronized public void selectInputStreams(\n-      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n-      boolean inProgressOk) throws IOException {\n-    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(this + \": selecting input streams starting at \" + fromTxId +\n-          (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n-          \"from among \" + elfs.size() + \" candidate file(s)\");\n-    }\n-    addStreamsToCollectionFromFiles(elfs, streams, fromTxId,\n-        getLastReadableTxId(), inProgressOk);\n+      Collection\u003cEditLogInputStream\u003e streams,\n+      long fromTxnId, boolean inProgressOk) throws IOException {\n+    selectInputStreams(streams, fromTxnId, inProgressOk, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxnId, boolean inProgressOk) throws IOException {\n    selectInputStreams(streams, fromTxnId, inProgressOk, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "53c38cc89ab979ec47557dcfa7affbad20578c0a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8964. When validating the edit log, do not read at or beyond the file offset that is being written (Zhe Zhang via Colin P. McCabe)\n",
      "commitDate": "03/09/15 11:22 AM",
      "commitName": "53c38cc89ab979ec47557dcfa7affbad20578c0a",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 124.06,
      "commitsBetweenForRepo": 888,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,12 @@\n   synchronized public void selectInputStreams(\n       Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n       boolean inProgressOk) throws IOException {\n     List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(this + \": selecting input streams starting at \" + fromTxId +\n           (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n           \"from among \" + elfs.size() + \" candidate file(s)\");\n     }\n-    addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n+    addStreamsToCollectionFromFiles(elfs, streams, fromTxId,\n+        getLastReadableTxId(), inProgressOk);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(this + \": selecting input streams starting at \" + fromTxId +\n          (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n          \"from among \" + elfs.size() + \" candidate file(s)\");\n    }\n    addStreamsToCollectionFromFiles(elfs, streams, fromTxId,\n        getLastReadableTxId(), inProgressOk);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "ed72daa5df97669906234e8ac9a406d78136b206": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7978. Add LOG.isDebugEnabled() guard for some LOG.debug(..). Contributed by Walter Su.\n",
      "commitDate": "01/04/15 12:54 PM",
      "commitName": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "18/03/15 6:48 PM",
      "commitNameOld": "43b41f22411439c5e23629197fb2fde45dcf0f0f",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 13.75,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,11 @@\n   synchronized public void selectInputStreams(\n       Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n       boolean inProgressOk) throws IOException {\n     List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n-    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n-        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n-        \"from among \" + elfs.size() + \" candidate file(s)\");\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(this + \": selecting input streams starting at \" + fromTxId +\n+          (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n+          \"from among \" + elfs.size() + \" candidate file(s)\");\n+    }\n     addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(this + \": selecting input streams starting at \" + fromTxId +\n          (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n          \"from among \" + elfs.size() + \" candidate file(s)\");\n    }\n    addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/13 5:32 PM",
      "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "15/08/13 10:19 AM",
      "commitNameOld": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 117.34,
      "commitsBetweenForRepo": 711,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n   synchronized public void selectInputStreams(\n       Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n-      boolean inProgressOk, boolean forReading) throws IOException {\n+      boolean inProgressOk) throws IOException {\n     List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n     LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n         (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n         \"from among \" + elfs.size() + \" candidate file(s)\");\n     addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {
        "oldValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean, forReading-boolean]",
        "newValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean]"
      }
    },
    "8c62c46046656c01b327c378e89d57b4bf37e16e": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/13 12:37 PM",
      "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "15/10/12 6:59 PM",
      "commitNameOld": "557ffe2101325438f15dbb218128d327984ecb11",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 218.73,
      "commitsBetweenForRepo": 1215,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n   synchronized public void selectInputStreams(\n       Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n-      boolean inProgressOk) throws IOException {\n+      boolean inProgressOk, boolean forReading) throws IOException {\n     List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n     LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n         (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n         \"from among \" + elfs.size() + \" candidate file(s)\");\n     addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk, boolean forReading) throws IOException {\n    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {
        "oldValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean]",
        "newValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean, forReading-boolean]"
      }
    },
    "557ffe2101325438f15dbb218128d327984ecb11": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2946. HA: Put a cap on the number of completed edits files retained by the NN. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1398609 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/10/12 6:59 PM",
      "commitName": "557ffe2101325438f15dbb218128d327984ecb11",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "05/09/12 11:57 PM",
      "commitNameOld": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 39.79,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,9 @@\n   synchronized public void selectInputStreams(\n       Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n       boolean inProgressOk) throws IOException {\n     List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n     LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n         (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n         \"from among \" + elfs.size() + \" candidate file(s)\");\n-    for (EditLogFile elf : elfs) {\n-      if (elf.isInProgress()) {\n-        if (!inProgressOk) {\n-          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n-              \"and we are ignoring in-progress logs.\");\n-          continue;\n-        }\n-        try {\n-          elf.validateLog();\n-        } catch (IOException e) {\n-          LOG.error(\"got IOException while trying to validate header of \" +\n-              elf + \".  Skipping.\", e);\n-          continue;\n-        }\n-      }\n-      if (elf.lastTxId \u003c fromTxId) {\n-        assert elf.lastTxId !\u003d HdfsConstants.INVALID_TXID;\n-        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n-            elf.lastTxId + \", but we only care about transactions \" +\n-            \"as new as \" + fromTxId);\n-        continue;\n-      }\n-      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n-            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n-      LOG.debug(\"selecting edit log stream \" + elf);\n-      streams.add(elfis);\n-    }\n+    addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    addStreamsToCollectionFromFiles(elfs, streams, fromTxId, inProgressOk);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-3891. Make selectInputStreams throw IOE instead of RTE. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381481 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/12 11:57 PM",
      "commitName": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-3891. Make selectInputStreams throw IOE instead of RTE. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381481 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/09/12 11:57 PM",
          "commitName": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "14/08/12 5:57 PM",
          "commitNameOld": "c95a1674b61ef2a6963dc64604986ef90a8c636d",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 22.25,
          "commitsBetweenForRepo": 152,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,35 @@\n   synchronized public void selectInputStreams(\n       Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n-      boolean inProgressOk) {\n-    List\u003cEditLogFile\u003e elfs;\n-    try {\n-      elfs \u003d matchEditLogs(sd.getCurrentDir());\n-    } catch (IOException e) {\n-      LOG.error(\"error listing files in \" + this + \". \" +\n-          \"Skipping all edit logs in this directory.\", e);\n-      return;\n-    }\n+      boolean inProgressOk) throws IOException {\n+    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n     LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n         (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n         \"from among \" + elfs.size() + \" candidate file(s)\");\n     for (EditLogFile elf : elfs) {\n       if (elf.isInProgress()) {\n         if (!inProgressOk) {\n           LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n               \"and we are ignoring in-progress logs.\");\n           continue;\n         }\n         try {\n           elf.validateLog();\n         } catch (IOException e) {\n           LOG.error(\"got IOException while trying to validate header of \" +\n               elf + \".  Skipping.\", e);\n           continue;\n         }\n       }\n       if (elf.lastTxId \u003c fromTxId) {\n         assert elf.lastTxId !\u003d HdfsConstants.INVALID_TXID;\n         LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n             elf.lastTxId + \", but we only care about transactions \" +\n             \"as new as \" + fromTxId);\n         continue;\n       }\n       EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n             elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n       LOG.debug(\"selecting edit log stream \" + elf);\n       streams.add(elfis);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    for (EditLogFile elf : elfs) {\n      if (elf.isInProgress()) {\n        if (!inProgressOk) {\n          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n              \"and we are ignoring in-progress logs.\");\n          continue;\n        }\n        try {\n          elf.validateLog();\n        } catch (IOException e) {\n          LOG.error(\"got IOException while trying to validate header of \" +\n              elf + \".  Skipping.\", e);\n          continue;\n        }\n      }\n      if (elf.lastTxId \u003c fromTxId) {\n        assert elf.lastTxId !\u003d HdfsConstants.INVALID_TXID;\n        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n            elf.lastTxId + \", but we only care about transactions \" +\n            \"as new as \" + fromTxId);\n        continue;\n      }\n      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      LOG.debug(\"selecting edit log stream \" + elf);\n      streams.add(elfis);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3891. Make selectInputStreams throw IOE instead of RTE. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381481 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/09/12 11:57 PM",
          "commitName": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "14/08/12 5:57 PM",
          "commitNameOld": "c95a1674b61ef2a6963dc64604986ef90a8c636d",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 22.25,
          "commitsBetweenForRepo": 152,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,35 @@\n   synchronized public void selectInputStreams(\n       Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n-      boolean inProgressOk) {\n-    List\u003cEditLogFile\u003e elfs;\n-    try {\n-      elfs \u003d matchEditLogs(sd.getCurrentDir());\n-    } catch (IOException e) {\n-      LOG.error(\"error listing files in \" + this + \". \" +\n-          \"Skipping all edit logs in this directory.\", e);\n-      return;\n-    }\n+      boolean inProgressOk) throws IOException {\n+    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n     LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n         (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n         \"from among \" + elfs.size() + \" candidate file(s)\");\n     for (EditLogFile elf : elfs) {\n       if (elf.isInProgress()) {\n         if (!inProgressOk) {\n           LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n               \"and we are ignoring in-progress logs.\");\n           continue;\n         }\n         try {\n           elf.validateLog();\n         } catch (IOException e) {\n           LOG.error(\"got IOException while trying to validate header of \" +\n               elf + \".  Skipping.\", e);\n           continue;\n         }\n       }\n       if (elf.lastTxId \u003c fromTxId) {\n         assert elf.lastTxId !\u003d HdfsConstants.INVALID_TXID;\n         LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n             elf.lastTxId + \", but we only care about transactions \" +\n             \"as new as \" + fromTxId);\n         continue;\n       }\n       EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n             elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n       LOG.debug(\"selecting edit log stream \" + elf);\n       streams.add(elfis);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogFile\u003e elfs \u003d matchEditLogs(sd.getCurrentDir());\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    for (EditLogFile elf : elfs) {\n      if (elf.isInProgress()) {\n        if (!inProgressOk) {\n          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n              \"and we are ignoring in-progress logs.\");\n          continue;\n        }\n        try {\n          elf.validateLog();\n        } catch (IOException e) {\n          LOG.error(\"got IOException while trying to validate header of \" +\n              elf + \".  Skipping.\", e);\n          continue;\n        }\n      }\n      if (elf.lastTxId \u003c fromTxId) {\n        assert elf.lastTxId !\u003d HdfsConstants.INVALID_TXID;\n        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n            elf.lastTxId + \", but we only care about transactions \" +\n            \"as new as \" + fromTxId);\n        continue;\n      }\n      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      LOG.debug(\"selecting edit log stream \" + elf);\n      streams.add(elfis);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "7accbabdee0b7619ff83514c173e815d290b33bf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3573. Supply NamespaceInfo when instantiating JournalManagers. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1356388 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/12 11:21 AM",
      "commitName": "7accbabdee0b7619ff83514c173e815d290b33bf",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "23/05/12 1:42 PM",
      "commitNameOld": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 39.9,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   synchronized public void selectInputStreams(\n       Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n       boolean inProgressOk) {\n     List\u003cEditLogFile\u003e elfs;\n     try {\n       elfs \u003d matchEditLogs(sd.getCurrentDir());\n     } catch (IOException e) {\n       LOG.error(\"error listing files in \" + this + \". \" +\n           \"Skipping all edit logs in this directory.\", e);\n       return;\n     }\n     LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n         (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n         \"from among \" + elfs.size() + \" candidate file(s)\");\n     for (EditLogFile elf : elfs) {\n-      if (elf.lastTxId \u003c fromTxId) {\n-        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n-            elf.lastTxId + \", but we only care about transactions \" +\n-            \"as new as \" + fromTxId);\n-        continue;\n-      }\n       if (elf.isInProgress()) {\n         if (!inProgressOk) {\n           LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n               \"and we are ignoring in-progress logs.\");\n           continue;\n         }\n         try {\n           elf.validateLog();\n         } catch (IOException e) {\n           LOG.error(\"got IOException while trying to validate header of \" +\n               elf + \".  Skipping.\", e);\n           continue;\n         }\n       }\n+      if (elf.lastTxId \u003c fromTxId) {\n+        assert elf.lastTxId !\u003d HdfsConstants.INVALID_TXID;\n+        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n+            elf.lastTxId + \", but we only care about transactions \" +\n+            \"as new as \" + fromTxId);\n+        continue;\n+      }\n       EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n             elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n       LOG.debug(\"selecting edit log stream \" + elf);\n       streams.add(elfis);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) {\n    List\u003cEditLogFile\u003e elfs;\n    try {\n      elfs \u003d matchEditLogs(sd.getCurrentDir());\n    } catch (IOException e) {\n      LOG.error(\"error listing files in \" + this + \". \" +\n          \"Skipping all edit logs in this directory.\", e);\n      return;\n    }\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    for (EditLogFile elf : elfs) {\n      if (elf.isInProgress()) {\n        if (!inProgressOk) {\n          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n              \"and we are ignoring in-progress logs.\");\n          continue;\n        }\n        try {\n          elf.validateLog();\n        } catch (IOException e) {\n          LOG.error(\"got IOException while trying to validate header of \" +\n              elf + \".  Skipping.\", e);\n          continue;\n        }\n      }\n      if (elf.lastTxId \u003c fromTxId) {\n        assert elf.lastTxId !\u003d HdfsConstants.INVALID_TXID;\n        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n            elf.lastTxId + \", but we only care about transactions \" +\n            \"as new as \" + fromTxId);\n        continue;\n      }\n      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      LOG.debug(\"selecting edit log stream \" + elf);\n      streams.add(elfis);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/12 1:42 PM",
      "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/05/12 1:42 PM",
          "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "12/04/12 2:11 PM",
          "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 40.98,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,41 @@\n-  synchronized public EditLogInputStream getInputStream(long fromTxId,\n-      boolean inProgressOk) throws IOException {\n-    for (EditLogFile elf : getLogFiles(fromTxId)) {\n-      if (elf.containsTxId(fromTxId)) {\n-        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n+  synchronized public void selectInputStreams(\n+      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n+      boolean inProgressOk) {\n+    List\u003cEditLogFile\u003e elfs;\n+    try {\n+      elfs \u003d matchEditLogs(sd.getCurrentDir());\n+    } catch (IOException e) {\n+      LOG.error(\"error listing files in \" + this + \". \" +\n+          \"Skipping all edit logs in this directory.\", e);\n+      return;\n+    }\n+    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n+        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n+        \"from among \" + elfs.size() + \" candidate file(s)\");\n+    for (EditLogFile elf : elfs) {\n+      if (elf.lastTxId \u003c fromTxId) {\n+        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n+            elf.lastTxId + \", but we only care about transactions \" +\n+            \"as new as \" + fromTxId);\n+        continue;\n+      }\n+      if (elf.isInProgress()) {\n+        if (!inProgressOk) {\n+          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n+              \"and we are ignoring in-progress logs.\");\n           continue;\n         }\n-        if (elf.isInProgress()) {\n+        try {\n           elf.validateLog();\n+        } catch (IOException e) {\n+          LOG.error(\"got IOException while trying to validate header of \" +\n+              elf + \".  Skipping.\", e);\n+          continue;\n         }\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(\"Returning edit stream reading from \" + elf);\n-        }\n-        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n-            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n-        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n-        if (transactionsToSkip \u003e 0) {\n-          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n-              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n-              transactionsToSkip));\n-        }\n-        if (elfis.skipUntil(fromTxId) \u003d\u003d false) {\n-          throw new IOException(\"failed to advance input stream to txid \" +\n-              fromTxId);\n-        }\n-        return elfis;\n       }\n+      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n+            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n+      LOG.debug(\"selecting edit log stream \" + elf);\n+      streams.add(elfis);\n     }\n-\n-    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) {\n    List\u003cEditLogFile\u003e elfs;\n    try {\n      elfs \u003d matchEditLogs(sd.getCurrentDir());\n    } catch (IOException e) {\n      LOG.error(\"error listing files in \" + this + \". \" +\n          \"Skipping all edit logs in this directory.\", e);\n      return;\n    }\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    for (EditLogFile elf : elfs) {\n      if (elf.lastTxId \u003c fromTxId) {\n        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n            elf.lastTxId + \", but we only care about transactions \" +\n            \"as new as \" + fromTxId);\n        continue;\n      }\n      if (elf.isInProgress()) {\n        if (!inProgressOk) {\n          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n              \"and we are ignoring in-progress logs.\");\n          continue;\n        }\n        try {\n          elf.validateLog();\n        } catch (IOException e) {\n          LOG.error(\"got IOException while trying to validate header of \" +\n              elf + \".  Skipping.\", e);\n          continue;\n        }\n      }\n      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      LOG.debug(\"selecting edit log stream \" + elf);\n      streams.add(elfis);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {
            "oldValue": "getInputStream",
            "newValue": "selectInputStreams"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/05/12 1:42 PM",
          "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "12/04/12 2:11 PM",
          "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 40.98,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,41 @@\n-  synchronized public EditLogInputStream getInputStream(long fromTxId,\n-      boolean inProgressOk) throws IOException {\n-    for (EditLogFile elf : getLogFiles(fromTxId)) {\n-      if (elf.containsTxId(fromTxId)) {\n-        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n+  synchronized public void selectInputStreams(\n+      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n+      boolean inProgressOk) {\n+    List\u003cEditLogFile\u003e elfs;\n+    try {\n+      elfs \u003d matchEditLogs(sd.getCurrentDir());\n+    } catch (IOException e) {\n+      LOG.error(\"error listing files in \" + this + \". \" +\n+          \"Skipping all edit logs in this directory.\", e);\n+      return;\n+    }\n+    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n+        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n+        \"from among \" + elfs.size() + \" candidate file(s)\");\n+    for (EditLogFile elf : elfs) {\n+      if (elf.lastTxId \u003c fromTxId) {\n+        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n+            elf.lastTxId + \", but we only care about transactions \" +\n+            \"as new as \" + fromTxId);\n+        continue;\n+      }\n+      if (elf.isInProgress()) {\n+        if (!inProgressOk) {\n+          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n+              \"and we are ignoring in-progress logs.\");\n           continue;\n         }\n-        if (elf.isInProgress()) {\n+        try {\n           elf.validateLog();\n+        } catch (IOException e) {\n+          LOG.error(\"got IOException while trying to validate header of \" +\n+              elf + \".  Skipping.\", e);\n+          continue;\n         }\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(\"Returning edit stream reading from \" + elf);\n-        }\n-        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n-            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n-        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n-        if (transactionsToSkip \u003e 0) {\n-          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n-              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n-              transactionsToSkip));\n-        }\n-        if (elfis.skipUntil(fromTxId) \u003d\u003d false) {\n-          throw new IOException(\"failed to advance input stream to txid \" +\n-              fromTxId);\n-        }\n-        return elfis;\n       }\n+      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n+            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n+      LOG.debug(\"selecting edit log stream \" + elf);\n+      streams.add(elfis);\n     }\n-\n-    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) {\n    List\u003cEditLogFile\u003e elfs;\n    try {\n      elfs \u003d matchEditLogs(sd.getCurrentDir());\n    } catch (IOException e) {\n      LOG.error(\"error listing files in \" + this + \". \" +\n          \"Skipping all edit logs in this directory.\", e);\n      return;\n    }\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    for (EditLogFile elf : elfs) {\n      if (elf.lastTxId \u003c fromTxId) {\n        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n            elf.lastTxId + \", but we only care about transactions \" +\n            \"as new as \" + fromTxId);\n        continue;\n      }\n      if (elf.isInProgress()) {\n        if (!inProgressOk) {\n          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n              \"and we are ignoring in-progress logs.\");\n          continue;\n        }\n        try {\n          elf.validateLog();\n        } catch (IOException e) {\n          LOG.error(\"got IOException while trying to validate header of \" +\n              elf + \".  Skipping.\", e);\n          continue;\n        }\n      }\n      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      LOG.debug(\"selecting edit log stream \" + elf);\n      streams.add(elfis);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {
            "oldValue": "[fromTxId-long, inProgressOk-boolean]",
            "newValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/05/12 1:42 PM",
          "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "12/04/12 2:11 PM",
          "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 40.98,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,41 @@\n-  synchronized public EditLogInputStream getInputStream(long fromTxId,\n-      boolean inProgressOk) throws IOException {\n-    for (EditLogFile elf : getLogFiles(fromTxId)) {\n-      if (elf.containsTxId(fromTxId)) {\n-        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n+  synchronized public void selectInputStreams(\n+      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n+      boolean inProgressOk) {\n+    List\u003cEditLogFile\u003e elfs;\n+    try {\n+      elfs \u003d matchEditLogs(sd.getCurrentDir());\n+    } catch (IOException e) {\n+      LOG.error(\"error listing files in \" + this + \". \" +\n+          \"Skipping all edit logs in this directory.\", e);\n+      return;\n+    }\n+    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n+        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n+        \"from among \" + elfs.size() + \" candidate file(s)\");\n+    for (EditLogFile elf : elfs) {\n+      if (elf.lastTxId \u003c fromTxId) {\n+        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n+            elf.lastTxId + \", but we only care about transactions \" +\n+            \"as new as \" + fromTxId);\n+        continue;\n+      }\n+      if (elf.isInProgress()) {\n+        if (!inProgressOk) {\n+          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n+              \"and we are ignoring in-progress logs.\");\n           continue;\n         }\n-        if (elf.isInProgress()) {\n+        try {\n           elf.validateLog();\n+        } catch (IOException e) {\n+          LOG.error(\"got IOException while trying to validate header of \" +\n+              elf + \".  Skipping.\", e);\n+          continue;\n         }\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(\"Returning edit stream reading from \" + elf);\n-        }\n-        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n-            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n-        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n-        if (transactionsToSkip \u003e 0) {\n-          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n-              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n-              transactionsToSkip));\n-        }\n-        if (elfis.skipUntil(fromTxId) \u003d\u003d false) {\n-          throw new IOException(\"failed to advance input stream to txid \" +\n-              fromTxId);\n-        }\n-        return elfis;\n       }\n+      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n+            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n+      LOG.debug(\"selecting edit log stream \" + elf);\n+      streams.add(elfis);\n     }\n-\n-    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) {\n    List\u003cEditLogFile\u003e elfs;\n    try {\n      elfs \u003d matchEditLogs(sd.getCurrentDir());\n    } catch (IOException e) {\n      LOG.error(\"error listing files in \" + this + \". \" +\n          \"Skipping all edit logs in this directory.\", e);\n      return;\n    }\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    for (EditLogFile elf : elfs) {\n      if (elf.lastTxId \u003c fromTxId) {\n        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n            elf.lastTxId + \", but we only care about transactions \" +\n            \"as new as \" + fromTxId);\n        continue;\n      }\n      if (elf.isInProgress()) {\n        if (!inProgressOk) {\n          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n              \"and we are ignoring in-progress logs.\");\n          continue;\n        }\n        try {\n          elf.validateLog();\n        } catch (IOException e) {\n          LOG.error(\"got IOException while trying to validate header of \" +\n              elf + \".  Skipping.\", e);\n          continue;\n        }\n      }\n      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      LOG.debug(\"selecting edit log stream \" + elf);\n      streams.add(elfis);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {
            "oldValue": "EditLogInputStream",
            "newValue": "void"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/05/12 1:42 PM",
          "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "12/04/12 2:11 PM",
          "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 40.98,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,41 @@\n-  synchronized public EditLogInputStream getInputStream(long fromTxId,\n-      boolean inProgressOk) throws IOException {\n-    for (EditLogFile elf : getLogFiles(fromTxId)) {\n-      if (elf.containsTxId(fromTxId)) {\n-        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n+  synchronized public void selectInputStreams(\n+      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n+      boolean inProgressOk) {\n+    List\u003cEditLogFile\u003e elfs;\n+    try {\n+      elfs \u003d matchEditLogs(sd.getCurrentDir());\n+    } catch (IOException e) {\n+      LOG.error(\"error listing files in \" + this + \". \" +\n+          \"Skipping all edit logs in this directory.\", e);\n+      return;\n+    }\n+    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n+        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n+        \"from among \" + elfs.size() + \" candidate file(s)\");\n+    for (EditLogFile elf : elfs) {\n+      if (elf.lastTxId \u003c fromTxId) {\n+        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n+            elf.lastTxId + \", but we only care about transactions \" +\n+            \"as new as \" + fromTxId);\n+        continue;\n+      }\n+      if (elf.isInProgress()) {\n+        if (!inProgressOk) {\n+          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n+              \"and we are ignoring in-progress logs.\");\n           continue;\n         }\n-        if (elf.isInProgress()) {\n+        try {\n           elf.validateLog();\n+        } catch (IOException e) {\n+          LOG.error(\"got IOException while trying to validate header of \" +\n+              elf + \".  Skipping.\", e);\n+          continue;\n         }\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(\"Returning edit stream reading from \" + elf);\n-        }\n-        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n-            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n-        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n-        if (transactionsToSkip \u003e 0) {\n-          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n-              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n-              transactionsToSkip));\n-        }\n-        if (elfis.skipUntil(fromTxId) \u003d\u003d false) {\n-          throw new IOException(\"failed to advance input stream to txid \" +\n-              fromTxId);\n-        }\n-        return elfis;\n       }\n+      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n+            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n+      LOG.debug(\"selecting edit log stream \" + elf);\n+      streams.add(elfis);\n     }\n-\n-    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) {\n    List\u003cEditLogFile\u003e elfs;\n    try {\n      elfs \u003d matchEditLogs(sd.getCurrentDir());\n    } catch (IOException e) {\n      LOG.error(\"error listing files in \" + this + \". \" +\n          \"Skipping all edit logs in this directory.\", e);\n      return;\n    }\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    for (EditLogFile elf : elfs) {\n      if (elf.lastTxId \u003c fromTxId) {\n        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n            elf.lastTxId + \", but we only care about transactions \" +\n            \"as new as \" + fromTxId);\n        continue;\n      }\n      if (elf.isInProgress()) {\n        if (!inProgressOk) {\n          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n              \"and we are ignoring in-progress logs.\");\n          continue;\n        }\n        try {\n          elf.validateLog();\n        } catch (IOException e) {\n          LOG.error(\"got IOException while trying to validate header of \" +\n              elf + \".  Skipping.\", e);\n          continue;\n        }\n      }\n      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      LOG.debug(\"selecting edit log stream \" + elf);\n      streams.add(elfis);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/05/12 1:42 PM",
          "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "12/04/12 2:11 PM",
          "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 40.98,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,41 @@\n-  synchronized public EditLogInputStream getInputStream(long fromTxId,\n-      boolean inProgressOk) throws IOException {\n-    for (EditLogFile elf : getLogFiles(fromTxId)) {\n-      if (elf.containsTxId(fromTxId)) {\n-        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n+  synchronized public void selectInputStreams(\n+      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n+      boolean inProgressOk) {\n+    List\u003cEditLogFile\u003e elfs;\n+    try {\n+      elfs \u003d matchEditLogs(sd.getCurrentDir());\n+    } catch (IOException e) {\n+      LOG.error(\"error listing files in \" + this + \". \" +\n+          \"Skipping all edit logs in this directory.\", e);\n+      return;\n+    }\n+    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n+        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n+        \"from among \" + elfs.size() + \" candidate file(s)\");\n+    for (EditLogFile elf : elfs) {\n+      if (elf.lastTxId \u003c fromTxId) {\n+        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n+            elf.lastTxId + \", but we only care about transactions \" +\n+            \"as new as \" + fromTxId);\n+        continue;\n+      }\n+      if (elf.isInProgress()) {\n+        if (!inProgressOk) {\n+          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n+              \"and we are ignoring in-progress logs.\");\n           continue;\n         }\n-        if (elf.isInProgress()) {\n+        try {\n           elf.validateLog();\n+        } catch (IOException e) {\n+          LOG.error(\"got IOException while trying to validate header of \" +\n+              elf + \".  Skipping.\", e);\n+          continue;\n         }\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(\"Returning edit stream reading from \" + elf);\n-        }\n-        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n-            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n-        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n-        if (transactionsToSkip \u003e 0) {\n-          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n-              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n-              transactionsToSkip));\n-        }\n-        if (elfis.skipUntil(fromTxId) \u003d\u003d false) {\n-          throw new IOException(\"failed to advance input stream to txid \" +\n-              fromTxId);\n-        }\n-        return elfis;\n       }\n+      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n+            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n+      LOG.debug(\"selecting edit log stream \" + elf);\n+      streams.add(elfis);\n     }\n-\n-    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public void selectInputStreams(\n      Collection\u003cEditLogInputStream\u003e streams, long fromTxId,\n      boolean inProgressOk) {\n    List\u003cEditLogFile\u003e elfs;\n    try {\n      elfs \u003d matchEditLogs(sd.getCurrentDir());\n    } catch (IOException e) {\n      LOG.error(\"error listing files in \" + this + \". \" +\n          \"Skipping all edit logs in this directory.\", e);\n      return;\n    }\n    LOG.debug(this + \": selecting input streams starting at \" + fromTxId + \n        (inProgressOk ? \" (inProgress ok) \" : \" (excluding inProgress) \") +\n        \"from among \" + elfs.size() + \" candidate file(s)\");\n    for (EditLogFile elf : elfs) {\n      if (elf.lastTxId \u003c fromTxId) {\n        LOG.debug(\"passing over \" + elf + \" because it ends at \" +\n            elf.lastTxId + \", but we only care about transactions \" +\n            \"as new as \" + fromTxId);\n        continue;\n      }\n      if (elf.isInProgress()) {\n        if (!inProgressOk) {\n          LOG.debug(\"passing over \" + elf + \" because it is in progress \" +\n              \"and we are ignoring in-progress logs.\");\n          continue;\n        }\n        try {\n          elf.validateLog();\n        } catch (IOException e) {\n          LOG.error(\"got IOException while trying to validate header of \" +\n              elf + \".  Skipping.\", e);\n          continue;\n        }\n      }\n      EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      LOG.debug(\"selecting edit log stream \" + elf);\n      streams.add(elfis);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "706394d03992b394e9f907aff2155df493e4ea4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3004. Implement Recovery Mode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311394 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/12 12:39 PM",
      "commitName": "706394d03992b394e9f907aff2155df493e4ea4e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "01/03/12 5:32 PM",
      "commitNameOld": "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 38.75,
      "commitsBetweenForRepo": 261,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   synchronized public EditLogInputStream getInputStream(long fromTxId,\n       boolean inProgressOk) throws IOException {\n     for (EditLogFile elf : getLogFiles(fromTxId)) {\n       if (elf.containsTxId(fromTxId)) {\n         if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n           continue;\n         }\n         if (elf.isInProgress()) {\n           elf.validateLog();\n         }\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(\"Returning edit stream reading from \" + elf);\n         }\n         EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n             elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n         long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n         if (transactionsToSkip \u003e 0) {\n           LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n               + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n               transactionsToSkip));\n-          elfis.skipTransactions(transactionsToSkip);\n+        }\n+        if (elfis.skipUntil(fromTxId) \u003d\u003d false) {\n+          throw new IOException(\"failed to advance input stream to txid \" +\n+              fromTxId);\n         }\n         return elfis;\n       }\n     }\n \n     throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public EditLogInputStream getInputStream(long fromTxId,\n      boolean inProgressOk) throws IOException {\n    for (EditLogFile elf : getLogFiles(fromTxId)) {\n      if (elf.containsTxId(fromTxId)) {\n        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n          continue;\n        }\n        if (elf.isInProgress()) {\n          elf.validateLog();\n        }\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Returning edit stream reading from \" + elf);\n        }\n        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n        if (transactionsToSkip \u003e 0) {\n          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n              transactionsToSkip));\n        }\n        if (elfis.skipUntil(fromTxId) \u003d\u003d false) {\n          throw new IOException(\"failed to advance input stream to txid \" +\n              fromTxId);\n        }\n        return elfis;\n      }\n    }\n\n    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2738. FSEditLog.selectinputStreams is reading through in-progress streams even when non-in-progress are requested. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1229931 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/01/12 12:32 AM",
      "commitName": "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2738. FSEditLog.selectinputStreams is reading through in-progress streams even when non-in-progress are requested. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1229931 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/01/12 12:32 AM",
          "commitName": "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "11/01/12 12:26 AM",
          "commitNameOld": "a339836bbc747324807b9690c6cb5bb13b1fdc0b",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,28 @@\n-  synchronized public EditLogInputStream getInputStream(long fromTxId)\n-      throws IOException {\n+  synchronized public EditLogInputStream getInputStream(long fromTxId,\n+      boolean inProgressOk) throws IOException {\n     for (EditLogFile elf : getLogFiles(fromTxId)) {\n       if (elf.containsTxId(fromTxId)) {\n+        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n+          continue;\n+        }\n         if (elf.isInProgress()) {\n           elf.validateLog();\n         }\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(\"Returning edit stream reading from \" + elf);\n         }\n         EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n             elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n         long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n         if (transactionsToSkip \u003e 0) {\n           LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n               + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n               transactionsToSkip));\n           elfis.skipTransactions(transactionsToSkip);\n         }\n         return elfis;\n       }\n     }\n \n     throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public EditLogInputStream getInputStream(long fromTxId,\n      boolean inProgressOk) throws IOException {\n    for (EditLogFile elf : getLogFiles(fromTxId)) {\n      if (elf.containsTxId(fromTxId)) {\n        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n          continue;\n        }\n        if (elf.isInProgress()) {\n          elf.validateLog();\n        }\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Returning edit stream reading from \" + elf);\n        }\n        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n        if (transactionsToSkip \u003e 0) {\n          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n              transactionsToSkip));\n          elfis.skipTransactions(transactionsToSkip);\n        }\n        return elfis;\n      }\n    }\n\n    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {
            "oldValue": "[fromTxId-long]",
            "newValue": "[fromTxId-long, inProgressOk-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2738. FSEditLog.selectinputStreams is reading through in-progress streams even when non-in-progress are requested. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1229931 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/01/12 12:32 AM",
          "commitName": "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "11/01/12 12:26 AM",
          "commitNameOld": "a339836bbc747324807b9690c6cb5bb13b1fdc0b",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,28 @@\n-  synchronized public EditLogInputStream getInputStream(long fromTxId)\n-      throws IOException {\n+  synchronized public EditLogInputStream getInputStream(long fromTxId,\n+      boolean inProgressOk) throws IOException {\n     for (EditLogFile elf : getLogFiles(fromTxId)) {\n       if (elf.containsTxId(fromTxId)) {\n+        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n+          continue;\n+        }\n         if (elf.isInProgress()) {\n           elf.validateLog();\n         }\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(\"Returning edit stream reading from \" + elf);\n         }\n         EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n             elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n         long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n         if (transactionsToSkip \u003e 0) {\n           LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n               + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n               transactionsToSkip));\n           elfis.skipTransactions(transactionsToSkip);\n         }\n         return elfis;\n       }\n     }\n \n     throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized public EditLogInputStream getInputStream(long fromTxId,\n      boolean inProgressOk) throws IOException {\n    for (EditLogFile elf : getLogFiles(fromTxId)) {\n      if (elf.containsTxId(fromTxId)) {\n        if (!inProgressOk \u0026\u0026 elf.isInProgress()) {\n          continue;\n        }\n        if (elf.isInProgress()) {\n          elf.validateLog();\n        }\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Returning edit stream reading from \" + elf);\n        }\n        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n        if (transactionsToSkip \u003e 0) {\n          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n              transactionsToSkip));\n          elfis.skipTransactions(transactionsToSkip);\n        }\n        return elfis;\n      }\n    }\n\n    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a339836bbc747324807b9690c6cb5bb13b1fdc0b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2766. Test for case where standby partially reads log and then performs checkpoint. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1229929 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/01/12 12:26 AM",
      "commitName": "a339836bbc747324807b9690c6cb5bb13b1fdc0b",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "06/01/12 12:44 PM",
      "commitNameOld": "9a07ba8945407cd8f63169faf9e0faa4311d38c7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 4.49,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,25 @@\n   synchronized public EditLogInputStream getInputStream(long fromTxId)\n       throws IOException {\n     for (EditLogFile elf : getLogFiles(fromTxId)) {\n       if (elf.containsTxId(fromTxId)) {\n         if (elf.isInProgress()) {\n           elf.validateLog();\n         }\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(\"Returning edit stream reading from \" + elf);\n         }\n         EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n             elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n-        elfis.skipTransactions(fromTxId - elf.getFirstTxId());\n+        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n+        if (transactionsToSkip \u003e 0) {\n+          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n+              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n+              transactionsToSkip));\n+          elfis.skipTransactions(transactionsToSkip);\n+        }\n         return elfis;\n       }\n     }\n \n     throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public EditLogInputStream getInputStream(long fromTxId)\n      throws IOException {\n    for (EditLogFile elf : getLogFiles(fromTxId)) {\n      if (elf.containsTxId(fromTxId)) {\n        if (elf.isInProgress()) {\n          elf.validateLog();\n        }\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Returning edit stream reading from \" + elf);\n        }\n        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n        long transactionsToSkip \u003d fromTxId - elf.getFirstTxId();\n        if (transactionsToSkip \u003e 0) {\n          LOG.info(String.format(\"Log begins at txid %d, but requested start \"\n              + \"txid is %d. Skipping %d edits.\", elf.getFirstTxId(), fromTxId,\n              transactionsToSkip));\n          elfis.skipTransactions(transactionsToSkip);\n        }\n        return elfis;\n      }\n    }\n\n    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "9a07ba8945407cd8f63169faf9e0faa4311d38c7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2709. Appropriately handle error conditions in EditLogTailer. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1228390 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/12 12:44 PM",
      "commitName": "9a07ba8945407cd8f63169faf9e0faa4311d38c7",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "15/12/11 8:25 PM",
      "commitNameOld": "cdb9f01ad4e6084ddf83e40eb3ec18a89fbbae42",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 21.68,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   synchronized public EditLogInputStream getInputStream(long fromTxId)\n       throws IOException {\n     for (EditLogFile elf : getLogFiles(fromTxId)) {\n-      if (elf.getFirstTxId() \u003d\u003d fromTxId) {\n+      if (elf.containsTxId(fromTxId)) {\n         if (elf.isInProgress()) {\n           elf.validateLog();\n         }\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(\"Returning edit stream reading from \" + elf);\n         }\n-        return new EditLogFileInputStream(elf.getFile(), \n+        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n             elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n+        elfis.skipTransactions(fromTxId - elf.getFirstTxId());\n+        return elfis;\n       }\n     }\n \n-    throw new IOException(\"Cannot find editlog file with \" + fromTxId\n-        + \" as first first txid\");\n+    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public EditLogInputStream getInputStream(long fromTxId)\n      throws IOException {\n    for (EditLogFile elf : getLogFiles(fromTxId)) {\n      if (elf.containsTxId(fromTxId)) {\n        if (elf.isInProgress()) {\n          elf.validateLog();\n        }\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Returning edit stream reading from \" + elf);\n        }\n        EditLogFileInputStream elfis \u003d new EditLogFileInputStream(elf.getFile(),\n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n        elfis.skipTransactions(fromTxId - elf.getFirstTxId());\n        return elfis;\n      }\n    }\n\n    throw new IOException(\"Cannot find editlog file containing \" + fromTxId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "f87a4b40bc99e76602a75906df31747cfdbff78a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1975. Support for sharing the namenode state from active to standby. Contributed by Jitendra Nath Pandey, Aaron T Myers, and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208813 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/11 1:46 PM",
      "commitName": "f87a4b40bc99e76602a75906df31747cfdbff78a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "31/10/11 12:03 PM",
      "commitNameOld": "7cb77a3b1bf9e41384a1f74a60d34214199755d8",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 30.11,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n-  synchronized public EditLogInputStream getInputStream(long fromTxId) \n+  synchronized public EditLogInputStream getInputStream(long fromTxId)\n       throws IOException {\n     for (EditLogFile elf : getLogFiles(fromTxId)) {\n       if (elf.getFirstTxId() \u003d\u003d fromTxId) {\n         if (elf.isInProgress()) {\n           elf.validateLog();\n         }\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(\"Returning edit stream reading from \" + elf);\n         }\n         return new EditLogFileInputStream(elf.getFile(), \n-            elf.getFirstTxId(), elf.getLastTxId());\n+            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n       }\n     }\n \n     throw new IOException(\"Cannot find editlog file with \" + fromTxId\n         + \" as first first txid\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public EditLogInputStream getInputStream(long fromTxId)\n      throws IOException {\n    for (EditLogFile elf : getLogFiles(fromTxId)) {\n      if (elf.getFirstTxId() \u003d\u003d fromTxId) {\n        if (elf.isInProgress()) {\n          elf.validateLog();\n        }\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Returning edit stream reading from \" + elf);\n        }\n        return new EditLogFileInputStream(elf.getFile(), \n            elf.getFirstTxId(), elf.getLastTxId(), elf.isInProgress());\n      }\n    }\n\n    throw new IOException(\"Cannot find editlog file with \" + fromTxId\n        + \" as first first txid\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2018. Move all journal stream management code into one place. Contributed by Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 1:27 PM",
      "commitName": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,18 @@\n+  synchronized public EditLogInputStream getInputStream(long fromTxId) \n+      throws IOException {\n+    for (EditLogFile elf : getLogFiles(fromTxId)) {\n+      if (elf.getFirstTxId() \u003d\u003d fromTxId) {\n+        if (elf.isInProgress()) {\n+          elf.validateLog();\n+        }\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(\"Returning edit stream reading from \" + elf);\n+        }\n+        return new EditLogFileInputStream(elf.getFile(), \n+            elf.getFirstTxId(), elf.getLastTxId());\n+      }\n+    }\n+\n+    throw new IOException(\"Cannot find editlog file with \" + fromTxId\n+        + \" as first first txid\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public EditLogInputStream getInputStream(long fromTxId) \n      throws IOException {\n    for (EditLogFile elf : getLogFiles(fromTxId)) {\n      if (elf.getFirstTxId() \u003d\u003d fromTxId) {\n        if (elf.isInProgress()) {\n          elf.validateLog();\n        }\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Returning edit stream reading from \" + elf);\n        }\n        return new EditLogFileInputStream(elf.getFile(), \n            elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n\n    throw new IOException(\"Cannot find editlog file with \" + fromTxId\n        + \" as first first txid\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java"
    }
  }
}