{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GreedyPlanner.java",
  "functionName": "balanceVolumeSet",
  "functionId": "balanceVolumeSet___node-DiskBalancerDataNode__vSet-DiskBalancerVolumeSet__plan-NodePlan",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java",
  "functionStartLine": 92,
  "functionEndLine": 131,
  "numCommitsSeen": 8,
  "timeTaken": 1475,
  "changeHistory": [
    "69489ff2d18a26be9c56d632672079e134f1cd99",
    "747227e9dea10ac6b5f601b7cf4dcc418b10d9c8",
    "0501d430e2f6111ad8b65dc36f4a98d94cb9589b",
    "5724a103161424f4b293ba937f0d0540179f36ac"
  ],
  "changeHistoryShort": {
    "69489ff2d18a26be9c56d632672079e134f1cd99": "Ybodychange",
    "747227e9dea10ac6b5f601b7cf4dcc418b10d9c8": "Ybodychange",
    "0501d430e2f6111ad8b65dc36f4a98d94cb9589b": "Ybodychange",
    "5724a103161424f4b293ba937f0d0540179f36ac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "69489ff2d18a26be9c56d632672079e134f1cd99": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14119. Improve GreedyPlanner Parameter Logging. Contributed by Beluga Behr.\n",
      "commitDate": "03/12/18 12:55 PM",
      "commitName": "69489ff2d18a26be9c56d632672079e134f1cd99",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "30/10/18 10:43 PM",
      "commitNameOld": "fac9f91b2944cee641049fffcafa6b65e0cf68f2",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 33.63,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n   public void balanceVolumeSet(DiskBalancerDataNode node,\n                                DiskBalancerVolumeSet vSet, NodePlan plan)\n       throws Exception {\n     Preconditions.checkNotNull(vSet);\n     Preconditions.checkNotNull(plan);\n     Preconditions.checkNotNull(node);\n     DiskBalancerVolumeSet currentSet \u003d new DiskBalancerVolumeSet(vSet);\n \n     while (currentSet.isBalancingNeeded(this.threshold)) {\n       removeSkipVolumes(currentSet);\n \n       DiskBalancerVolume lowVolume \u003d currentSet.getSortedQueue().first();\n       DiskBalancerVolume highVolume \u003d currentSet.getSortedQueue().last();\n \n       Step nextStep \u003d null;\n       // ok both volumes bytes used are in the range that we expect\n       // Then we create a move request.\n       if (!lowVolume.isSkip() \u0026\u0026 !highVolume.isSkip()) {\n         nextStep \u003d computeMove(currentSet, lowVolume, highVolume);\n       } else {\n         LOG.debug(\"Skipping compute move. lowVolume: {} highVolume: {}\",\n             lowVolume.getPath(), highVolume.getPath());\n       }\n \n       applyStep(nextStep, currentSet, lowVolume, highVolume);\n       if (nextStep !\u003d null) {\n-        LOG.debug(\"Step : {} \",  nextStep.toString());\n+        LOG.debug(\"Step : {} \", nextStep);\n         plan.addStep(nextStep);\n       }\n     }\n \n-    String message \u003d String\n-        .format(\"Disk Volume set %s Type : %s plan completed.\",\n-            currentSet.getSetID(),\n-            currentSet.getVolumes().get(0).getStorageType());\n+    LOG.info(\"Disk Volume set {} - Type : {} plan completed.\",\n+        currentSet.getSetID(),\n+        currentSet.getVolumes().get(0).getStorageType());\n \n     plan.setNodeName(node.getDataNodeName());\n     plan.setNodeUUID(node.getDataNodeUUID());\n     plan.setTimeStamp(Time.now());\n     plan.setPort(node.getDataNodePort());\n-    LOG.info(message);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void balanceVolumeSet(DiskBalancerDataNode node,\n                               DiskBalancerVolumeSet vSet, NodePlan plan)\n      throws Exception {\n    Preconditions.checkNotNull(vSet);\n    Preconditions.checkNotNull(plan);\n    Preconditions.checkNotNull(node);\n    DiskBalancerVolumeSet currentSet \u003d new DiskBalancerVolumeSet(vSet);\n\n    while (currentSet.isBalancingNeeded(this.threshold)) {\n      removeSkipVolumes(currentSet);\n\n      DiskBalancerVolume lowVolume \u003d currentSet.getSortedQueue().first();\n      DiskBalancerVolume highVolume \u003d currentSet.getSortedQueue().last();\n\n      Step nextStep \u003d null;\n      // ok both volumes bytes used are in the range that we expect\n      // Then we create a move request.\n      if (!lowVolume.isSkip() \u0026\u0026 !highVolume.isSkip()) {\n        nextStep \u003d computeMove(currentSet, lowVolume, highVolume);\n      } else {\n        LOG.debug(\"Skipping compute move. lowVolume: {} highVolume: {}\",\n            lowVolume.getPath(), highVolume.getPath());\n      }\n\n      applyStep(nextStep, currentSet, lowVolume, highVolume);\n      if (nextStep !\u003d null) {\n        LOG.debug(\"Step : {} \", nextStep);\n        plan.addStep(nextStep);\n      }\n    }\n\n    LOG.info(\"Disk Volume set {} - Type : {} plan completed.\",\n        currentSet.getSetID(),\n        currentSet.getVolumes().get(0).getStorageType());\n\n    plan.setNodeName(node.getDataNodeName());\n    plan.setNodeUUID(node.getDataNodeUUID());\n    plan.setTimeStamp(Time.now());\n    plan.setPort(node.getDataNodePort());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java",
      "extendedDetails": {}
    },
    "747227e9dea10ac6b5f601b7cf4dcc418b10d9c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9817. Use SLF4J in new classes. Contributed by Anu Engineer\n",
      "commitDate": "23/06/16 6:18 PM",
      "commitName": "747227e9dea10ac6b5f601b7cf4dcc418b10d9c8",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:18 PM",
      "commitNameOld": "0501d430e2f6111ad8b65dc36f4a98d94cb9589b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public void balanceVolumeSet(DiskBalancerDataNode node,\n                                DiskBalancerVolumeSet vSet, NodePlan plan)\n       throws Exception {\n     Preconditions.checkNotNull(vSet);\n     Preconditions.checkNotNull(plan);\n     Preconditions.checkNotNull(node);\n     DiskBalancerVolumeSet currentSet \u003d new DiskBalancerVolumeSet(vSet);\n \n     while (currentSet.isBalancingNeeded(this.threshold)) {\n       removeSkipVolumes(currentSet);\n \n       DiskBalancerVolume lowVolume \u003d currentSet.getSortedQueue().first();\n       DiskBalancerVolume highVolume \u003d currentSet.getSortedQueue().last();\n \n       Step nextStep \u003d null;\n       // ok both volumes bytes used are in the range that we expect\n       // Then we create a move request.\n       if (!lowVolume.isSkip() \u0026\u0026 !highVolume.isSkip()) {\n         nextStep \u003d computeMove(currentSet, lowVolume, highVolume);\n       } else {\n-        LOG.debug(\"Skipping compute move. lowVolume :\" + lowVolume.getPath());\n-        LOG.debug(\"Skipping compute move. highVolume :\" + highVolume.getPath());\n+        LOG.debug(\"Skipping compute move. lowVolume: {} highVolume: {}\",\n+            lowVolume.getPath(), highVolume.getPath());\n       }\n \n       applyStep(nextStep, currentSet, lowVolume, highVolume);\n       if (nextStep !\u003d null) {\n-        LOG.debug(\"Step : \" + nextStep.toString());\n+        LOG.debug(\"Step : {} \",  nextStep.toString());\n         plan.addStep(nextStep);\n       }\n     }\n \n     String message \u003d String\n         .format(\"Disk Volume set %s Type : %s plan completed.\",\n             currentSet.getSetID(),\n             currentSet.getVolumes().get(0).getStorageType());\n \n     plan.setNodeName(node.getDataNodeName());\n     plan.setNodeUUID(node.getDataNodeUUID());\n     plan.setTimeStamp(Time.now());\n     plan.setPort(node.getDataNodePort());\n     LOG.info(message);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void balanceVolumeSet(DiskBalancerDataNode node,\n                               DiskBalancerVolumeSet vSet, NodePlan plan)\n      throws Exception {\n    Preconditions.checkNotNull(vSet);\n    Preconditions.checkNotNull(plan);\n    Preconditions.checkNotNull(node);\n    DiskBalancerVolumeSet currentSet \u003d new DiskBalancerVolumeSet(vSet);\n\n    while (currentSet.isBalancingNeeded(this.threshold)) {\n      removeSkipVolumes(currentSet);\n\n      DiskBalancerVolume lowVolume \u003d currentSet.getSortedQueue().first();\n      DiskBalancerVolume highVolume \u003d currentSet.getSortedQueue().last();\n\n      Step nextStep \u003d null;\n      // ok both volumes bytes used are in the range that we expect\n      // Then we create a move request.\n      if (!lowVolume.isSkip() \u0026\u0026 !highVolume.isSkip()) {\n        nextStep \u003d computeMove(currentSet, lowVolume, highVolume);\n      } else {\n        LOG.debug(\"Skipping compute move. lowVolume: {} highVolume: {}\",\n            lowVolume.getPath(), highVolume.getPath());\n      }\n\n      applyStep(nextStep, currentSet, lowVolume, highVolume);\n      if (nextStep !\u003d null) {\n        LOG.debug(\"Step : {} \",  nextStep.toString());\n        plan.addStep(nextStep);\n      }\n    }\n\n    String message \u003d String\n        .format(\"Disk Volume set %s Type : %s plan completed.\",\n            currentSet.getSetID(),\n            currentSet.getVolumes().get(0).getStorageType());\n\n    plan.setNodeName(node.getDataNodeName());\n    plan.setNodeUUID(node.getDataNodeUUID());\n    plan.setTimeStamp(Time.now());\n    plan.setPort(node.getDataNodePort());\n    LOG.info(message);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java",
      "extendedDetails": {}
    },
    "0501d430e2f6111ad8b65dc36f4a98d94cb9589b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9595. DiskBalancer: Add cancelPlan RPC. (Contributed by Anu Engineer)\n",
      "commitDate": "23/06/16 6:18 PM",
      "commitName": "0501d430e2f6111ad8b65dc36f4a98d94cb9589b",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "23/06/16 6:18 PM",
      "commitNameOld": "5724a103161424f4b293ba937f0d0540179f36ac",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n   public void balanceVolumeSet(DiskBalancerDataNode node,\n                                DiskBalancerVolumeSet vSet, NodePlan plan)\n       throws Exception {\n+    Preconditions.checkNotNull(vSet);\n+    Preconditions.checkNotNull(plan);\n+    Preconditions.checkNotNull(node);\n     DiskBalancerVolumeSet currentSet \u003d new DiskBalancerVolumeSet(vSet);\n \n     while (currentSet.isBalancingNeeded(this.threshold)) {\n       removeSkipVolumes(currentSet);\n \n       DiskBalancerVolume lowVolume \u003d currentSet.getSortedQueue().first();\n       DiskBalancerVolume highVolume \u003d currentSet.getSortedQueue().last();\n \n       Step nextStep \u003d null;\n       // ok both volumes bytes used are in the range that we expect\n       // Then we create a move request.\n       if (!lowVolume.isSkip() \u0026\u0026 !highVolume.isSkip()) {\n         nextStep \u003d computeMove(currentSet, lowVolume, highVolume);\n       } else {\n         LOG.debug(\"Skipping compute move. lowVolume :\" + lowVolume.getPath());\n         LOG.debug(\"Skipping compute move. highVolume :\" + highVolume.getPath());\n       }\n \n       applyStep(nextStep, currentSet, lowVolume, highVolume);\n       if (nextStep !\u003d null) {\n         LOG.debug(\"Step : \" + nextStep.toString());\n         plan.addStep(nextStep);\n       }\n     }\n \n     String message \u003d String\n         .format(\"Disk Volume set %s Type : %s plan completed.\",\n             currentSet.getSetID(),\n             currentSet.getVolumes().get(0).getStorageType());\n \n     plan.setNodeName(node.getDataNodeName());\n     plan.setNodeUUID(node.getDataNodeUUID());\n     plan.setTimeStamp(Time.now());\n     plan.setPort(node.getDataNodePort());\n     LOG.info(message);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void balanceVolumeSet(DiskBalancerDataNode node,\n                               DiskBalancerVolumeSet vSet, NodePlan plan)\n      throws Exception {\n    Preconditions.checkNotNull(vSet);\n    Preconditions.checkNotNull(plan);\n    Preconditions.checkNotNull(node);\n    DiskBalancerVolumeSet currentSet \u003d new DiskBalancerVolumeSet(vSet);\n\n    while (currentSet.isBalancingNeeded(this.threshold)) {\n      removeSkipVolumes(currentSet);\n\n      DiskBalancerVolume lowVolume \u003d currentSet.getSortedQueue().first();\n      DiskBalancerVolume highVolume \u003d currentSet.getSortedQueue().last();\n\n      Step nextStep \u003d null;\n      // ok both volumes bytes used are in the range that we expect\n      // Then we create a move request.\n      if (!lowVolume.isSkip() \u0026\u0026 !highVolume.isSkip()) {\n        nextStep \u003d computeMove(currentSet, lowVolume, highVolume);\n      } else {\n        LOG.debug(\"Skipping compute move. lowVolume :\" + lowVolume.getPath());\n        LOG.debug(\"Skipping compute move. highVolume :\" + highVolume.getPath());\n      }\n\n      applyStep(nextStep, currentSet, lowVolume, highVolume);\n      if (nextStep !\u003d null) {\n        LOG.debug(\"Step : \" + nextStep.toString());\n        plan.addStep(nextStep);\n      }\n    }\n\n    String message \u003d String\n        .format(\"Disk Volume set %s Type : %s plan completed.\",\n            currentSet.getSetID(),\n            currentSet.getVolumes().get(0).getStorageType());\n\n    plan.setNodeName(node.getDataNodeName());\n    plan.setNodeUUID(node.getDataNodeUUID());\n    plan.setTimeStamp(Time.now());\n    plan.setPort(node.getDataNodePort());\n    LOG.info(message);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java",
      "extendedDetails": {}
    },
    "5724a103161424f4b293ba937f0d0540179f36ac": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9469. DiskBalancer: Add Planner. (Contributed by Anu Engineer)\n",
      "commitDate": "23/06/16 6:18 PM",
      "commitName": "5724a103161424f4b293ba937f0d0540179f36ac",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,39 @@\n+  public void balanceVolumeSet(DiskBalancerDataNode node,\n+                               DiskBalancerVolumeSet vSet, NodePlan plan)\n+      throws Exception {\n+    DiskBalancerVolumeSet currentSet \u003d new DiskBalancerVolumeSet(vSet);\n+\n+    while (currentSet.isBalancingNeeded(this.threshold)) {\n+      removeSkipVolumes(currentSet);\n+\n+      DiskBalancerVolume lowVolume \u003d currentSet.getSortedQueue().first();\n+      DiskBalancerVolume highVolume \u003d currentSet.getSortedQueue().last();\n+\n+      Step nextStep \u003d null;\n+      // ok both volumes bytes used are in the range that we expect\n+      // Then we create a move request.\n+      if (!lowVolume.isSkip() \u0026\u0026 !highVolume.isSkip()) {\n+        nextStep \u003d computeMove(currentSet, lowVolume, highVolume);\n+      } else {\n+        LOG.debug(\"Skipping compute move. lowVolume :\" + lowVolume.getPath());\n+        LOG.debug(\"Skipping compute move. highVolume :\" + highVolume.getPath());\n+      }\n+\n+      applyStep(nextStep, currentSet, lowVolume, highVolume);\n+      if (nextStep !\u003d null) {\n+        LOG.debug(\"Step : \" + nextStep.toString());\n+        plan.addStep(nextStep);\n+      }\n+    }\n+\n+    String message \u003d String\n+        .format(\"Disk Volume set %s Type : %s plan completed.\",\n+            currentSet.getSetID(),\n+            currentSet.getVolumes().get(0).getStorageType());\n+\n+    plan.setNodeName(node.getDataNodeName());\n+    plan.setNodeUUID(node.getDataNodeUUID());\n+    plan.setTimeStamp(Time.now());\n+    plan.setPort(node.getDataNodePort());\n+    LOG.info(message);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void balanceVolumeSet(DiskBalancerDataNode node,\n                               DiskBalancerVolumeSet vSet, NodePlan plan)\n      throws Exception {\n    DiskBalancerVolumeSet currentSet \u003d new DiskBalancerVolumeSet(vSet);\n\n    while (currentSet.isBalancingNeeded(this.threshold)) {\n      removeSkipVolumes(currentSet);\n\n      DiskBalancerVolume lowVolume \u003d currentSet.getSortedQueue().first();\n      DiskBalancerVolume highVolume \u003d currentSet.getSortedQueue().last();\n\n      Step nextStep \u003d null;\n      // ok both volumes bytes used are in the range that we expect\n      // Then we create a move request.\n      if (!lowVolume.isSkip() \u0026\u0026 !highVolume.isSkip()) {\n        nextStep \u003d computeMove(currentSet, lowVolume, highVolume);\n      } else {\n        LOG.debug(\"Skipping compute move. lowVolume :\" + lowVolume.getPath());\n        LOG.debug(\"Skipping compute move. highVolume :\" + highVolume.getPath());\n      }\n\n      applyStep(nextStep, currentSet, lowVolume, highVolume);\n      if (nextStep !\u003d null) {\n        LOG.debug(\"Step : \" + nextStep.toString());\n        plan.addStep(nextStep);\n      }\n    }\n\n    String message \u003d String\n        .format(\"Disk Volume set %s Type : %s plan completed.\",\n            currentSet.getSetID(),\n            currentSet.getVolumes().get(0).getStorageType());\n\n    plan.setNodeName(node.getDataNodeName());\n    plan.setNodeUUID(node.getDataNodeUUID());\n    plan.setTimeStamp(Time.now());\n    plan.setPort(node.getDataNodePort());\n    LOG.info(message);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java"
    }
  }
}