{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCSQueue.java",
  "functionName": "updateConfigurableResourceRequirement",
  "functionId": "updateConfigurableResourceRequirement___queuePath-String__clusterResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
  "functionStartLine": 539,
  "functionEndLine": 601,
  "numCommitsSeen": 76,
  "timeTaken": 5095,
  "changeHistory": [
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f",
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "d52627a7cbddfd981db973e223aefffde1ebf82d",
    "5e798b1a0ddceeaf54703b94052501867156e979"
  ],
  "changeHistoryShort": {
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f": "Ybodychange",
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "d52627a7cbddfd981db973e223aefffde1ebf82d": "Ybodychange",
    "5e798b1a0ddceeaf54703b94052501867156e979": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10154. CS Dynamic Queues cannot be configured with absolute resources. Contributed by Manikandan R.\n",
      "commitDate": "17/04/20 6:21 AM",
      "commitName": "2fe122e322afd35dfae6e45b3e7fdaddd20a411f",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/03/20 4:20 AM",
      "commitNameOld": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 23.08,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,63 @@\n   protected void updateConfigurableResourceRequirement(String queuePath,\n       Resource clusterResource) {\n     CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n     Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n \n     for (String label : configuredNodelabels) {\n-      Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n-          queuePath, resourceTypes);\n-      Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n-          queuePath, resourceTypes);\n+      Resource minResource \u003d getMinimumAbsoluteResource(queuePath, label);\n+      Resource maxResource \u003d getMaximumAbsoluteResource(queuePath, label);\n \n       LOG.debug(\"capacityConfigType is \u0027{}\u0027 for queue {}\",\n           capacityConfigType, getQueuePath());\n \n       if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n         this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n             \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                 ? CapacityConfigType.ABSOLUTE_RESOURCE\n                 : CapacityConfigType.PERCENTAGE;\n         LOG.debug(\"capacityConfigType is updated as \u0027{}\u0027 for queue {}\",\n             capacityConfigType, getQueuePath());\n       }\n \n       validateAbsoluteVsPercentageCapacityConfig(minResource);\n \n       // If min resource for a resource type is greater than its max resource,\n       // throw exception to handle such error configs.\n       if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n           resourceCalculator, clusterResource, minResource, maxResource)) {\n         throw new IllegalArgumentException(\"Min resource configuration \"\n             + minResource + \" is greater than its max value:\" + maxResource\n             + \" in queue:\" + getQueuePath());\n       }\n \n       // If parent\u0027s max resource is lesser to a specific child\u0027s max\n       // resource, throw exception to handle such error configs.\n       if (parent !\u003d null) {\n         Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n             .getConfiguredMaxResource(label);\n         if (Resources.greaterThan(resourceCalculator, clusterResource,\n             parentMaxRes, Resources.none())) {\n           if (Resources.greaterThan(resourceCalculator, clusterResource,\n               maxResource, parentMaxRes)) {\n             throw new IllegalArgumentException(\"Max resource configuration \"\n                 + maxResource + \" is greater than parents max value:\"\n                 + parentMaxRes + \" in queue:\" + getQueuePath());\n           }\n \n           // If child\u0027s max resource is not set, but its parent max resource is\n           // set, we must set child max resource to its parent\u0027s.\n           if (maxResource.equals(Resources.none())\n               \u0026\u0026 !minResource.equals(Resources.none())) {\n             maxResource \u003d Resources.clone(parentMaxRes);\n           }\n         }\n       }\n \n       LOG.debug(\"Updating absolute resource configuration for queue:{} as\"\n           + \" minResource\u003d{} and maxResource\u003d{}\", getQueuePath(), minResource,\n           maxResource);\n \n       queueResourceQuotas.setConfiguredMinResource(label, minResource);\n       queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void updateConfigurableResourceRequirement(String queuePath,\n      Resource clusterResource) {\n    CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n    Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n\n    for (String label : configuredNodelabels) {\n      Resource minResource \u003d getMinimumAbsoluteResource(queuePath, label);\n      Resource maxResource \u003d getMaximumAbsoluteResource(queuePath, label);\n\n      LOG.debug(\"capacityConfigType is \u0027{}\u0027 for queue {}\",\n          capacityConfigType, getQueuePath());\n\n      if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n        this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n            \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                ? CapacityConfigType.ABSOLUTE_RESOURCE\n                : CapacityConfigType.PERCENTAGE;\n        LOG.debug(\"capacityConfigType is updated as \u0027{}\u0027 for queue {}\",\n            capacityConfigType, getQueuePath());\n      }\n\n      validateAbsoluteVsPercentageCapacityConfig(minResource);\n\n      // If min resource for a resource type is greater than its max resource,\n      // throw exception to handle such error configs.\n      if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n          resourceCalculator, clusterResource, minResource, maxResource)) {\n        throw new IllegalArgumentException(\"Min resource configuration \"\n            + minResource + \" is greater than its max value:\" + maxResource\n            + \" in queue:\" + getQueuePath());\n      }\n\n      // If parent\u0027s max resource is lesser to a specific child\u0027s max\n      // resource, throw exception to handle such error configs.\n      if (parent !\u003d null) {\n        Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n            .getConfiguredMaxResource(label);\n        if (Resources.greaterThan(resourceCalculator, clusterResource,\n            parentMaxRes, Resources.none())) {\n          if (Resources.greaterThan(resourceCalculator, clusterResource,\n              maxResource, parentMaxRes)) {\n            throw new IllegalArgumentException(\"Max resource configuration \"\n                + maxResource + \" is greater than parents max value:\"\n                + parentMaxRes + \" in queue:\" + getQueuePath());\n          }\n\n          // If child\u0027s max resource is not set, but its parent max resource is\n          // set, we must set child max resource to its parent\u0027s.\n          if (maxResource.equals(Resources.none())\n              \u0026\u0026 !minResource.equals(Resources.none())) {\n            maxResource \u003d Resources.clone(parentMaxRes);\n          }\n        }\n      }\n\n      LOG.debug(\"Updating absolute resource configuration for queue:{} as\"\n          + \" minResource\u003d{} and maxResource\u003d{}\", getQueuePath(), minResource,\n          maxResource);\n\n      queueResourceQuotas.setConfiguredMinResource(label, minResource);\n      queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/01/20 7:54 PM",
      "commitNameOld": "e578e52aae01248507e089b406fe038ab8e84207",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 56.31,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   protected void updateConfigurableResourceRequirement(String queuePath,\n       Resource clusterResource) {\n     CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n     Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n \n     for (String label : configuredNodelabels) {\n       Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n           queuePath, resourceTypes);\n       Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n           queuePath, resourceTypes);\n \n       LOG.debug(\"capacityConfigType is \u0027{}\u0027 for queue {}\",\n-          capacityConfigType, getQueueName());\n+          capacityConfigType, getQueuePath());\n \n       if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n         this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n             \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                 ? CapacityConfigType.ABSOLUTE_RESOURCE\n                 : CapacityConfigType.PERCENTAGE;\n         LOG.debug(\"capacityConfigType is updated as \u0027{}\u0027 for queue {}\",\n-            capacityConfigType, getQueueName());\n+            capacityConfigType, getQueuePath());\n       }\n \n       validateAbsoluteVsPercentageCapacityConfig(minResource);\n \n       // If min resource for a resource type is greater than its max resource,\n       // throw exception to handle such error configs.\n       if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n           resourceCalculator, clusterResource, minResource, maxResource)) {\n         throw new IllegalArgumentException(\"Min resource configuration \"\n             + minResource + \" is greater than its max value:\" + maxResource\n-            + \" in queue:\" + getQueueName());\n+            + \" in queue:\" + getQueuePath());\n       }\n \n       // If parent\u0027s max resource is lesser to a specific child\u0027s max\n       // resource, throw exception to handle such error configs.\n       if (parent !\u003d null) {\n         Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n             .getConfiguredMaxResource(label);\n         if (Resources.greaterThan(resourceCalculator, clusterResource,\n             parentMaxRes, Resources.none())) {\n           if (Resources.greaterThan(resourceCalculator, clusterResource,\n               maxResource, parentMaxRes)) {\n             throw new IllegalArgumentException(\"Max resource configuration \"\n                 + maxResource + \" is greater than parents max value:\"\n-                + parentMaxRes + \" in queue:\" + getQueueName());\n+                + parentMaxRes + \" in queue:\" + getQueuePath());\n           }\n \n           // If child\u0027s max resource is not set, but its parent max resource is\n           // set, we must set child max resource to its parent\u0027s.\n           if (maxResource.equals(Resources.none())\n               \u0026\u0026 !minResource.equals(Resources.none())) {\n             maxResource \u003d Resources.clone(parentMaxRes);\n           }\n         }\n       }\n \n       LOG.debug(\"Updating absolute resource configuration for queue:{} as\"\n-          + \" minResource\u003d{} and maxResource\u003d{}\", getQueueName(), minResource,\n+          + \" minResource\u003d{} and maxResource\u003d{}\", getQueuePath(), minResource,\n           maxResource);\n \n       queueResourceQuotas.setConfiguredMinResource(label, minResource);\n       queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void updateConfigurableResourceRequirement(String queuePath,\n      Resource clusterResource) {\n    CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n    Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n\n    for (String label : configuredNodelabels) {\n      Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n          queuePath, resourceTypes);\n      Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n          queuePath, resourceTypes);\n\n      LOG.debug(\"capacityConfigType is \u0027{}\u0027 for queue {}\",\n          capacityConfigType, getQueuePath());\n\n      if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n        this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n            \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                ? CapacityConfigType.ABSOLUTE_RESOURCE\n                : CapacityConfigType.PERCENTAGE;\n        LOG.debug(\"capacityConfigType is updated as \u0027{}\u0027 for queue {}\",\n            capacityConfigType, getQueuePath());\n      }\n\n      validateAbsoluteVsPercentageCapacityConfig(minResource);\n\n      // If min resource for a resource type is greater than its max resource,\n      // throw exception to handle such error configs.\n      if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n          resourceCalculator, clusterResource, minResource, maxResource)) {\n        throw new IllegalArgumentException(\"Min resource configuration \"\n            + minResource + \" is greater than its max value:\" + maxResource\n            + \" in queue:\" + getQueuePath());\n      }\n\n      // If parent\u0027s max resource is lesser to a specific child\u0027s max\n      // resource, throw exception to handle such error configs.\n      if (parent !\u003d null) {\n        Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n            .getConfiguredMaxResource(label);\n        if (Resources.greaterThan(resourceCalculator, clusterResource,\n            parentMaxRes, Resources.none())) {\n          if (Resources.greaterThan(resourceCalculator, clusterResource,\n              maxResource, parentMaxRes)) {\n            throw new IllegalArgumentException(\"Max resource configuration \"\n                + maxResource + \" is greater than parents max value:\"\n                + parentMaxRes + \" in queue:\" + getQueuePath());\n          }\n\n          // If child\u0027s max resource is not set, but its parent max resource is\n          // set, we must set child max resource to its parent\u0027s.\n          if (maxResource.equals(Resources.none())\n              \u0026\u0026 !minResource.equals(Resources.none())) {\n            maxResource \u003d Resources.clone(parentMaxRes);\n          }\n        }\n      }\n\n      LOG.debug(\"Updating absolute resource configuration for queue:{} as\"\n          + \" minResource\u003d{} and maxResource\u003d{}\", getQueuePath(), minResource,\n          maxResource);\n\n      queueResourceQuotas.setConfiguredMinResource(label, minResource);\n      queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,65 @@\n   protected void updateConfigurableResourceRequirement(String queuePath,\n       Resource clusterResource) {\n     CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n     Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n \n     for (String label : configuredNodelabels) {\n       Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n           queuePath, resourceTypes);\n       Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n           queuePath, resourceTypes);\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"capacityConfigType is \u0027\" + capacityConfigType\n-            + \"\u0027 for queue \u0027\" + getQueueName());\n-      }\n+      LOG.debug(\"capacityConfigType is \u0027{}\u0027 for queue {}\",\n+          capacityConfigType, getQueueName());\n+\n       if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n         this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n             \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                 ? CapacityConfigType.ABSOLUTE_RESOURCE\n                 : CapacityConfigType.PERCENTAGE;\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"capacityConfigType is updated as \u0027\" + capacityConfigType\n-              + \"\u0027 for queue \u0027\" + getQueueName());\n-        }\n+        LOG.debug(\"capacityConfigType is updated as \u0027{}\u0027 for queue {}\",\n+            capacityConfigType, getQueueName());\n       }\n \n       validateAbsoluteVsPercentageCapacityConfig(minResource);\n \n       // If min resource for a resource type is greater than its max resource,\n       // throw exception to handle such error configs.\n       if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n           resourceCalculator, clusterResource, minResource, maxResource)) {\n         throw new IllegalArgumentException(\"Min resource configuration \"\n             + minResource + \" is greater than its max value:\" + maxResource\n             + \" in queue:\" + getQueueName());\n       }\n \n       // If parent\u0027s max resource is lesser to a specific child\u0027s max\n       // resource, throw exception to handle such error configs.\n       if (parent !\u003d null) {\n         Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n             .getConfiguredMaxResource(label);\n         if (Resources.greaterThan(resourceCalculator, clusterResource,\n             parentMaxRes, Resources.none())) {\n           if (Resources.greaterThan(resourceCalculator, clusterResource,\n               maxResource, parentMaxRes)) {\n             throw new IllegalArgumentException(\"Max resource configuration \"\n                 + maxResource + \" is greater than parents max value:\"\n                 + parentMaxRes + \" in queue:\" + getQueueName());\n           }\n \n           // If child\u0027s max resource is not set, but its parent max resource is\n           // set, we must set child max resource to its parent\u0027s.\n           if (maxResource.equals(Resources.none())\n               \u0026\u0026 !minResource.equals(Resources.none())) {\n             maxResource \u003d Resources.clone(parentMaxRes);\n           }\n         }\n       }\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Updating absolute resource configuration for queue:\"\n-            + getQueueName() + \" as minResource\u003d\" + minResource\n-            + \" and maxResource\u003d\" + maxResource);\n-      }\n+      LOG.debug(\"Updating absolute resource configuration for queue:{} as\"\n+          + \" minResource\u003d{} and maxResource\u003d{}\", getQueueName(), minResource,\n+          maxResource);\n \n       queueResourceQuotas.setConfiguredMinResource(label, minResource);\n       queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void updateConfigurableResourceRequirement(String queuePath,\n      Resource clusterResource) {\n    CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n    Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n\n    for (String label : configuredNodelabels) {\n      Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n          queuePath, resourceTypes);\n      Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n          queuePath, resourceTypes);\n\n      LOG.debug(\"capacityConfigType is \u0027{}\u0027 for queue {}\",\n          capacityConfigType, getQueueName());\n\n      if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n        this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n            \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                ? CapacityConfigType.ABSOLUTE_RESOURCE\n                : CapacityConfigType.PERCENTAGE;\n        LOG.debug(\"capacityConfigType is updated as \u0027{}\u0027 for queue {}\",\n            capacityConfigType, getQueueName());\n      }\n\n      validateAbsoluteVsPercentageCapacityConfig(minResource);\n\n      // If min resource for a resource type is greater than its max resource,\n      // throw exception to handle such error configs.\n      if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n          resourceCalculator, clusterResource, minResource, maxResource)) {\n        throw new IllegalArgumentException(\"Min resource configuration \"\n            + minResource + \" is greater than its max value:\" + maxResource\n            + \" in queue:\" + getQueueName());\n      }\n\n      // If parent\u0027s max resource is lesser to a specific child\u0027s max\n      // resource, throw exception to handle such error configs.\n      if (parent !\u003d null) {\n        Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n            .getConfiguredMaxResource(label);\n        if (Resources.greaterThan(resourceCalculator, clusterResource,\n            parentMaxRes, Resources.none())) {\n          if (Resources.greaterThan(resourceCalculator, clusterResource,\n              maxResource, parentMaxRes)) {\n            throw new IllegalArgumentException(\"Max resource configuration \"\n                + maxResource + \" is greater than parents max value:\"\n                + parentMaxRes + \" in queue:\" + getQueueName());\n          }\n\n          // If child\u0027s max resource is not set, but its parent max resource is\n          // set, we must set child max resource to its parent\u0027s.\n          if (maxResource.equals(Resources.none())\n              \u0026\u0026 !minResource.equals(Resources.none())) {\n            maxResource \u003d Resources.clone(parentMaxRes);\n          }\n        }\n      }\n\n      LOG.debug(\"Updating absolute resource configuration for queue:{} as\"\n          + \" minResource\u003d{} and maxResource\u003d{}\", getQueueName(), minResource,\n          maxResource);\n\n      queueResourceQuotas.setConfiguredMinResource(label, minResource);\n      queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "d52627a7cbddfd981db973e223aefffde1ebf82d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7254. UI and metrics changes related to absolute resource configuration. (Sunil G via wangda)\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "d52627a7cbddfd981db973e223aefffde1ebf82d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,70 @@\n   protected void updateConfigurableResourceRequirement(String queuePath,\n       Resource clusterResource) {\n     CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n     Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n \n     for (String label : configuredNodelabels) {\n       Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n           queuePath, resourceTypes);\n       Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n           queuePath, resourceTypes);\n \n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"capacityConfigType is \u0027\" + capacityConfigType\n+            + \"\u0027 for queue \u0027\" + getQueueName());\n+      }\n       if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n         this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n             \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                 ? CapacityConfigType.ABSOLUTE_RESOURCE\n                 : CapacityConfigType.PERCENTAGE;\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"capacityConfigType is updated as \u0027\" + capacityConfigType\n               + \"\u0027 for queue \u0027\" + getQueueName());\n         }\n       }\n \n       validateAbsoluteVsPercentageCapacityConfig(minResource);\n \n       // If min resource for a resource type is greater than its max resource,\n       // throw exception to handle such error configs.\n       if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n           resourceCalculator, clusterResource, minResource, maxResource)) {\n         throw new IllegalArgumentException(\"Min resource configuration \"\n             + minResource + \" is greater than its max value:\" + maxResource\n             + \" in queue:\" + getQueueName());\n       }\n \n       // If parent\u0027s max resource is lesser to a specific child\u0027s max\n       // resource, throw exception to handle such error configs.\n       if (parent !\u003d null) {\n         Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n             .getConfiguredMaxResource(label);\n         if (Resources.greaterThan(resourceCalculator, clusterResource,\n             parentMaxRes, Resources.none())) {\n           if (Resources.greaterThan(resourceCalculator, clusterResource,\n               maxResource, parentMaxRes)) {\n             throw new IllegalArgumentException(\"Max resource configuration \"\n                 + maxResource + \" is greater than parents max value:\"\n                 + parentMaxRes + \" in queue:\" + getQueueName());\n           }\n \n           // If child\u0027s max resource is not set, but its parent max resource is\n           // set, we must set child max resource to its parent\u0027s.\n           if (maxResource.equals(Resources.none())\n               \u0026\u0026 !minResource.equals(Resources.none())) {\n             maxResource \u003d Resources.clone(parentMaxRes);\n           }\n         }\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Updating absolute resource configuration for queue:\"\n             + getQueueName() + \" as minResource\u003d\" + minResource\n             + \" and maxResource\u003d\" + maxResource);\n       }\n \n       queueResourceQuotas.setConfiguredMinResource(label, minResource);\n       queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void updateConfigurableResourceRequirement(String queuePath,\n      Resource clusterResource) {\n    CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n    Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n\n    for (String label : configuredNodelabels) {\n      Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n          queuePath, resourceTypes);\n      Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n          queuePath, resourceTypes);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"capacityConfigType is \u0027\" + capacityConfigType\n            + \"\u0027 for queue \u0027\" + getQueueName());\n      }\n      if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n        this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n            \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                ? CapacityConfigType.ABSOLUTE_RESOURCE\n                : CapacityConfigType.PERCENTAGE;\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"capacityConfigType is updated as \u0027\" + capacityConfigType\n              + \"\u0027 for queue \u0027\" + getQueueName());\n        }\n      }\n\n      validateAbsoluteVsPercentageCapacityConfig(minResource);\n\n      // If min resource for a resource type is greater than its max resource,\n      // throw exception to handle such error configs.\n      if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n          resourceCalculator, clusterResource, minResource, maxResource)) {\n        throw new IllegalArgumentException(\"Min resource configuration \"\n            + minResource + \" is greater than its max value:\" + maxResource\n            + \" in queue:\" + getQueueName());\n      }\n\n      // If parent\u0027s max resource is lesser to a specific child\u0027s max\n      // resource, throw exception to handle such error configs.\n      if (parent !\u003d null) {\n        Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n            .getConfiguredMaxResource(label);\n        if (Resources.greaterThan(resourceCalculator, clusterResource,\n            parentMaxRes, Resources.none())) {\n          if (Resources.greaterThan(resourceCalculator, clusterResource,\n              maxResource, parentMaxRes)) {\n            throw new IllegalArgumentException(\"Max resource configuration \"\n                + maxResource + \" is greater than parents max value:\"\n                + parentMaxRes + \" in queue:\" + getQueueName());\n          }\n\n          // If child\u0027s max resource is not set, but its parent max resource is\n          // set, we must set child max resource to its parent\u0027s.\n          if (maxResource.equals(Resources.none())\n              \u0026\u0026 !minResource.equals(Resources.none())) {\n            maxResource \u003d Resources.clone(parentMaxRes);\n          }\n        }\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updating absolute resource configuration for queue:\"\n            + getQueueName() + \" as minResource\u003d\" + minResource\n            + \" and maxResource\u003d\" + maxResource);\n      }\n\n      queueResourceQuotas.setConfiguredMinResource(label, minResource);\n      queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "5e798b1a0ddceeaf54703b94052501867156e979": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6471. Support to add min/max resource configuration for a queue. (Sunil G via wangda)\n\nChange-Id: I9213f5297a6841fab5c573e85ee4c4e5f4a0b7ff\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,66 @@\n+  protected void updateConfigurableResourceRequirement(String queuePath,\n+      Resource clusterResource) {\n+    CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n+    Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n+\n+    for (String label : configuredNodelabels) {\n+      Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n+          queuePath, resourceTypes);\n+      Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n+          queuePath, resourceTypes);\n+\n+      if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n+        this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n+            \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n+                ? CapacityConfigType.ABSOLUTE_RESOURCE\n+                : CapacityConfigType.PERCENTAGE;\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"capacityConfigType is updated as \u0027\" + capacityConfigType\n+              + \"\u0027 for queue \u0027\" + getQueueName());\n+        }\n+      }\n+\n+      validateAbsoluteVsPercentageCapacityConfig(minResource);\n+\n+      // If min resource for a resource type is greater than its max resource,\n+      // throw exception to handle such error configs.\n+      if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n+          resourceCalculator, clusterResource, minResource, maxResource)) {\n+        throw new IllegalArgumentException(\"Min resource configuration \"\n+            + minResource + \" is greater than its max value:\" + maxResource\n+            + \" in queue:\" + getQueueName());\n+      }\n+\n+      // If parent\u0027s max resource is lesser to a specific child\u0027s max\n+      // resource, throw exception to handle such error configs.\n+      if (parent !\u003d null) {\n+        Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n+            .getConfiguredMaxResource(label);\n+        if (Resources.greaterThan(resourceCalculator, clusterResource,\n+            parentMaxRes, Resources.none())) {\n+          if (Resources.greaterThan(resourceCalculator, clusterResource,\n+              maxResource, parentMaxRes)) {\n+            throw new IllegalArgumentException(\"Max resource configuration \"\n+                + maxResource + \" is greater than parents max value:\"\n+                + parentMaxRes + \" in queue:\" + getQueueName());\n+          }\n+\n+          // If child\u0027s max resource is not set, but its parent max resource is\n+          // set, we must set child max resource to its parent\u0027s.\n+          if (maxResource.equals(Resources.none())\n+              \u0026\u0026 !minResource.equals(Resources.none())) {\n+            maxResource \u003d Resources.clone(parentMaxRes);\n+          }\n+        }\n+      }\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Updating absolute resource configuration for queue:\"\n+            + getQueueName() + \" as minResource\u003d\" + minResource\n+            + \" and maxResource\u003d\" + maxResource);\n+      }\n+\n+      queueResourceQuotas.setConfiguredMinResource(label, minResource);\n+      queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void updateConfigurableResourceRequirement(String queuePath,\n      Resource clusterResource) {\n    CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n    Set\u003cString\u003e configuredNodelabels \u003d conf.getConfiguredNodeLabels(queuePath);\n\n    for (String label : configuredNodelabels) {\n      Resource minResource \u003d conf.getMinimumResourceRequirement(label,\n          queuePath, resourceTypes);\n      Resource maxResource \u003d conf.getMaximumResourceRequirement(label,\n          queuePath, resourceTypes);\n\n      if (this.capacityConfigType.equals(CapacityConfigType.NONE)) {\n        this.capacityConfigType \u003d (!minResource.equals(Resources.none())\n            \u0026\u0026 queueCapacities.getAbsoluteCapacity(label) \u003d\u003d 0f)\n                ? CapacityConfigType.ABSOLUTE_RESOURCE\n                : CapacityConfigType.PERCENTAGE;\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"capacityConfigType is updated as \u0027\" + capacityConfigType\n              + \"\u0027 for queue \u0027\" + getQueueName());\n        }\n      }\n\n      validateAbsoluteVsPercentageCapacityConfig(minResource);\n\n      // If min resource for a resource type is greater than its max resource,\n      // throw exception to handle such error configs.\n      if (!maxResource.equals(Resources.none()) \u0026\u0026 Resources.greaterThan(\n          resourceCalculator, clusterResource, minResource, maxResource)) {\n        throw new IllegalArgumentException(\"Min resource configuration \"\n            + minResource + \" is greater than its max value:\" + maxResource\n            + \" in queue:\" + getQueueName());\n      }\n\n      // If parent\u0027s max resource is lesser to a specific child\u0027s max\n      // resource, throw exception to handle such error configs.\n      if (parent !\u003d null) {\n        Resource parentMaxRes \u003d parent.getQueueResourceQuotas()\n            .getConfiguredMaxResource(label);\n        if (Resources.greaterThan(resourceCalculator, clusterResource,\n            parentMaxRes, Resources.none())) {\n          if (Resources.greaterThan(resourceCalculator, clusterResource,\n              maxResource, parentMaxRes)) {\n            throw new IllegalArgumentException(\"Max resource configuration \"\n                + maxResource + \" is greater than parents max value:\"\n                + parentMaxRes + \" in queue:\" + getQueueName());\n          }\n\n          // If child\u0027s max resource is not set, but its parent max resource is\n          // set, we must set child max resource to its parent\u0027s.\n          if (maxResource.equals(Resources.none())\n              \u0026\u0026 !minResource.equals(Resources.none())) {\n            maxResource \u003d Resources.clone(parentMaxRes);\n          }\n        }\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updating absolute resource configuration for queue:\"\n            + getQueueName() + \" as minResource\u003d\" + minResource\n            + \" and maxResource\u003d\" + maxResource);\n      }\n\n      queueResourceQuotas.setConfiguredMinResource(label, minResource);\n      queueResourceQuotas.setConfiguredMaxResource(label, maxResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java"
    }
  }
}