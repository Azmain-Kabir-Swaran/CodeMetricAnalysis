{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskAttemptImpl.java",
  "functionName": "configureJobJar",
  "functionId": "configureJobJar___conf-Configuration__localResources-Map__String,LocalResource__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
  "functionStartLine": 971,
  "functionEndLine": 1004,
  "numCommitsSeen": 108,
  "timeTaken": 1915,
  "changeHistory": [
    "e46d5bb962b0c942f993afc505b165b1cd96e51b",
    "845529b3ab338e759665a687eb525fb2cccde7bf"
  ],
  "changeHistoryShort": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": "Ybodychange",
    "845529b3ab338e759665a687eb525fb2cccde7bf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
      "commitDate": "12/10/17 10:59 AM",
      "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
      "commitAuthor": "Chris Trezzo",
      "commitDateOld": "02/10/17 8:14 PM",
      "commitNameOld": "453d48bdfbb67ed3e66c33c4aef239c3d7bdd3bc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 9.61,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,34 @@\n   private static void configureJobJar(Configuration conf,\n       Map\u003cString, LocalResource\u003e localResources) throws IOException {\n     // Set up JobJar to be localized properly on the remote NM.\n     String jobJar \u003d conf.get(MRJobConfig.JAR);\n     if (jobJar !\u003d null) {\n       final Path jobJarPath \u003d new Path(jobJar);\n       final FileSystem jobJarFs \u003d FileSystem.get(jobJarPath.toUri(), conf);\n       Path remoteJobJar \u003d jobJarPath.makeQualified(jobJarFs.getUri(),\n           jobJarFs.getWorkingDirectory());\n-      LocalResource rc \u003d createLocalResource(jobJarFs, remoteJobJar,\n-          LocalResourceType.PATTERN, LocalResourceVisibility.APPLICATION);\n+      LocalResourceVisibility jobJarViz \u003d\n+          conf.getBoolean(MRJobConfig.JOBJAR_VISIBILITY,\n+              MRJobConfig.JOBJAR_VISIBILITY_DEFAULT)\n+                  ? LocalResourceVisibility.PUBLIC\n+                  : LocalResourceVisibility.APPLICATION;\n+      // We hard code the job.jar localized symlink in the container directory.\n+      // This is because the mapreduce app expects the job.jar to be named\n+      // accordingly. Additionally we set the shared cache upload policy to\n+      // false. Resources are uploaded by the AM if necessary.\n+      LocalResource rc \u003d\n+          createLocalResource(jobJarFs, remoteJobJar, MRJobConfig.JOB_JAR,\n+              LocalResourceType.PATTERN, jobJarViz);\n       String pattern \u003d conf.getPattern(JobContext.JAR_UNPACK_PATTERN,\n           JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern();\n       rc.setPattern(pattern);\n       localResources.put(MRJobConfig.JOB_JAR, rc);\n       LOG.info(\"The job-jar file on the remote FS is \"\n           + remoteJobJar.toUri().toASCIIString());\n     } else {\n       // Job jar may be null. For e.g, for pipes, the job jar is the hadoop\n       // mapreduce jar itself which is already on the classpath.\n       LOG.info(\"Job jar is not present. \"\n           + \"Not adding any jar to the list of resources.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void configureJobJar(Configuration conf,\n      Map\u003cString, LocalResource\u003e localResources) throws IOException {\n    // Set up JobJar to be localized properly on the remote NM.\n    String jobJar \u003d conf.get(MRJobConfig.JAR);\n    if (jobJar !\u003d null) {\n      final Path jobJarPath \u003d new Path(jobJar);\n      final FileSystem jobJarFs \u003d FileSystem.get(jobJarPath.toUri(), conf);\n      Path remoteJobJar \u003d jobJarPath.makeQualified(jobJarFs.getUri(),\n          jobJarFs.getWorkingDirectory());\n      LocalResourceVisibility jobJarViz \u003d\n          conf.getBoolean(MRJobConfig.JOBJAR_VISIBILITY,\n              MRJobConfig.JOBJAR_VISIBILITY_DEFAULT)\n                  ? LocalResourceVisibility.PUBLIC\n                  : LocalResourceVisibility.APPLICATION;\n      // We hard code the job.jar localized symlink in the container directory.\n      // This is because the mapreduce app expects the job.jar to be named\n      // accordingly. Additionally we set the shared cache upload policy to\n      // false. Resources are uploaded by the AM if necessary.\n      LocalResource rc \u003d\n          createLocalResource(jobJarFs, remoteJobJar, MRJobConfig.JOB_JAR,\n              LocalResourceType.PATTERN, jobJarViz);\n      String pattern \u003d conf.getPattern(JobContext.JAR_UNPACK_PATTERN,\n          JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern();\n      rc.setPattern(pattern);\n      localResources.put(MRJobConfig.JOB_JAR, rc);\n      LOG.info(\"The job-jar file on the remote FS is \"\n          + remoteJobJar.toUri().toASCIIString());\n    } else {\n      // Job jar may be null. For e.g, for pipes, the job jar is the hadoop\n      // mapreduce jar itself which is already on the classpath.\n      LOG.info(\"Job jar is not present. \"\n          + \"Not adding any jar to the list of resources.\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "845529b3ab338e759665a687eb525fb2cccde7bf": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6824. TaskAttemptImpl#createCommonContainerLaunchContext is longer than 150 lines. Contributed by Chris Trezzo.\n",
      "commitDate": "02/04/17 9:06 PM",
      "commitName": "845529b3ab338e759665a687eb525fb2cccde7bf",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,24 @@\n+  private static void configureJobJar(Configuration conf,\n+      Map\u003cString, LocalResource\u003e localResources) throws IOException {\n+    // Set up JobJar to be localized properly on the remote NM.\n+    String jobJar \u003d conf.get(MRJobConfig.JAR);\n+    if (jobJar !\u003d null) {\n+      final Path jobJarPath \u003d new Path(jobJar);\n+      final FileSystem jobJarFs \u003d FileSystem.get(jobJarPath.toUri(), conf);\n+      Path remoteJobJar \u003d jobJarPath.makeQualified(jobJarFs.getUri(),\n+          jobJarFs.getWorkingDirectory());\n+      LocalResource rc \u003d createLocalResource(jobJarFs, remoteJobJar,\n+          LocalResourceType.PATTERN, LocalResourceVisibility.APPLICATION);\n+      String pattern \u003d conf.getPattern(JobContext.JAR_UNPACK_PATTERN,\n+          JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern();\n+      rc.setPattern(pattern);\n+      localResources.put(MRJobConfig.JOB_JAR, rc);\n+      LOG.info(\"The job-jar file on the remote FS is \"\n+          + remoteJobJar.toUri().toASCIIString());\n+    } else {\n+      // Job jar may be null. For e.g, for pipes, the job jar is the hadoop\n+      // mapreduce jar itself which is already on the classpath.\n+      LOG.info(\"Job jar is not present. \"\n+          + \"Not adding any jar to the list of resources.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void configureJobJar(Configuration conf,\n      Map\u003cString, LocalResource\u003e localResources) throws IOException {\n    // Set up JobJar to be localized properly on the remote NM.\n    String jobJar \u003d conf.get(MRJobConfig.JAR);\n    if (jobJar !\u003d null) {\n      final Path jobJarPath \u003d new Path(jobJar);\n      final FileSystem jobJarFs \u003d FileSystem.get(jobJarPath.toUri(), conf);\n      Path remoteJobJar \u003d jobJarPath.makeQualified(jobJarFs.getUri(),\n          jobJarFs.getWorkingDirectory());\n      LocalResource rc \u003d createLocalResource(jobJarFs, remoteJobJar,\n          LocalResourceType.PATTERN, LocalResourceVisibility.APPLICATION);\n      String pattern \u003d conf.getPattern(JobContext.JAR_UNPACK_PATTERN,\n          JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern();\n      rc.setPattern(pattern);\n      localResources.put(MRJobConfig.JOB_JAR, rc);\n      LOG.info(\"The job-jar file on the remote FS is \"\n          + remoteJobJar.toUri().toASCIIString());\n    } else {\n      // Job jar may be null. For e.g, for pipes, the job jar is the hadoop\n      // mapreduce jar itself which is already on the classpath.\n      LOG.info(\"Job jar is not present. \"\n          + \"Not adding any jar to the list of resources.\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java"
    }
  }
}