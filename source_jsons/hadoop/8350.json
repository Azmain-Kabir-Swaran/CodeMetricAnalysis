{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirErasureCodingOp.java",
  "functionName": "getErasureCodingPolicy",
  "functionId": "getErasureCodingPolicy___fsn-FSNamesystem(modifiers-final)__src-String(modifiers-final)__pc-FSPermissionChecker",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
  "functionStartLine": 352,
  "functionEndLine": 380,
  "numCommitsSeen": 56,
  "timeTaken": 5353,
  "changeHistory": [
    "ae2177d296a322d13708b85aaa8a971b8dcce128",
    "96b3a6b9721e922d33fadc2459b561a85dbf9b8e",
    "3085a604300ed76d06a0011bd5555e419897b6cd",
    "5b714a2819c5d5e0196471f289820ddd18fbaff9",
    "f62237bc2f02afe11ce185e13aa51a60b5960037",
    "98d340745be682fb251677bb4830aca76119868f"
  ],
  "changeHistoryShort": {
    "ae2177d296a322d13708b85aaa8a971b8dcce128": "Ybodychange",
    "96b3a6b9721e922d33fadc2459b561a85dbf9b8e": "Ybodychange",
    "3085a604300ed76d06a0011bd5555e419897b6cd": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "5b714a2819c5d5e0196471f289820ddd18fbaff9": "Ybodychange",
    "f62237bc2f02afe11ce185e13aa51a60b5960037": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "98d340745be682fb251677bb4830aca76119868f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ae2177d296a322d13708b85aaa8a971b8dcce128": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12897. getErasureCodingPolicy should handle .snapshot dir better. Contributed by LiXin Ge.\n",
      "commitDate": "31/01/18 10:50 PM",
      "commitName": "ae2177d296a322d13708b85aaa8a971b8dcce128",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "02/11/17 9:27 PM",
      "commitNameOld": "e565b5277d5b890dad107fe85e295a3907e4bfc1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 90.1,
      "commitsBetweenForRepo": 614,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,29 @@\n   static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n       final String src, FSPermissionChecker pc)\n       throws IOException, AccessControlException {\n     assert fsn.hasReadLock();\n \n+    if (FSDirectory.isExactReservedName(src)) {\n+      return null;\n+    }\n+\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n     if (fsn.isPermissionEnabled()) {\n       fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n     }\n \n-    if (iip.getLastINode() \u003d\u003d null) {\n-      throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n+    ErasureCodingPolicy ecPolicy;\n+    if (iip.isDotSnapshotDir()) {\n+      ecPolicy \u003d null;\n+    } else if (iip.getLastINode() \u003d\u003d null) {\n+      throw new FileNotFoundException(\"Path not found: \" + src);\n+    } else {\n+      ecPolicy \u003d getErasureCodingPolicyForPath(fsd, iip);\n     }\n \n-    ErasureCodingPolicy ecPolicy \u003d getErasureCodingPolicyForPath(fsd, iip);\n     if (ecPolicy !\u003d null \u0026\u0026 ecPolicy.isReplicationPolicy()) {\n       ecPolicy \u003d null;\n     }\n     return ecPolicy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src, FSPermissionChecker pc)\n      throws IOException, AccessControlException {\n    assert fsn.hasReadLock();\n\n    if (FSDirectory.isExactReservedName(src)) {\n      return null;\n    }\n\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n    if (fsn.isPermissionEnabled()) {\n      fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n    }\n\n    ErasureCodingPolicy ecPolicy;\n    if (iip.isDotSnapshotDir()) {\n      ecPolicy \u003d null;\n    } else if (iip.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"Path not found: \" + src);\n    } else {\n      ecPolicy \u003d getErasureCodingPolicyForPath(fsd, iip);\n    }\n\n    if (ecPolicy !\u003d null \u0026\u0026 ecPolicy.isReplicationPolicy()) {\n      ecPolicy \u003d null;\n    }\n    return ecPolicy;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "96b3a6b9721e922d33fadc2459b561a85dbf9b8e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11082. Provide replicated EC policy to replicate files. Contributed by SammiChen.\n",
      "commitDate": "16/08/17 10:17 PM",
      "commitName": "96b3a6b9721e922d33fadc2459b561a85dbf9b8e",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/08/17 9:20 PM",
      "commitNameOld": "08aaa4b36fab44c3f47878b3c487db3b373ffccf",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,21 @@\n   static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n       final String src, FSPermissionChecker pc)\n       throws IOException, AccessControlException {\n     assert fsn.hasReadLock();\n \n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n     if (fsn.isPermissionEnabled()) {\n       fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n     }\n \n     if (iip.getLastINode() \u003d\u003d null) {\n       throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n     }\n-    return getErasureCodingPolicyForPath(fsd, iip);\n+\n+    ErasureCodingPolicy ecPolicy \u003d getErasureCodingPolicyForPath(fsd, iip);\n+    if (ecPolicy !\u003d null \u0026\u0026 ecPolicy.isReplicationPolicy()) {\n+      ecPolicy \u003d null;\n+    }\n+    return ecPolicy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src, FSPermissionChecker pc)\n      throws IOException, AccessControlException {\n    assert fsn.hasReadLock();\n\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n    if (fsn.isPermissionEnabled()) {\n      fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n    }\n\n    if (iip.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n    }\n\n    ErasureCodingPolicy ecPolicy \u003d getErasureCodingPolicyForPath(fsd, iip);\n    if (ecPolicy !\u003d null \u0026\u0026 ecPolicy.isReplicationPolicy()) {\n      ecPolicy \u003d null;\n    }\n    return ecPolicy;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "3085a604300ed76d06a0011bd5555e419897b6cd": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
      "commitDate": "03/03/17 1:00 PM",
      "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
          "commitDate": "03/03/17 1:00 PM",
          "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/03/17 7:58 PM",
          "commitNameOld": "3749152b661d0359b3b941ab1d17177230f3b8dc",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,16 @@\n   static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n-      final String src) throws IOException {\n+      final String src, FSPermissionChecker pc)\n+      throws IOException, AccessControlException {\n     assert fsn.hasReadLock();\n \n-    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n+    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n+    if (fsn.isPermissionEnabled()) {\n+      fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n+    }\n+\n     if (iip.getLastINode() \u003d\u003d null) {\n       throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n     }\n-    return getErasureCodingPolicyForPath(fsn, iip);\n+    return getErasureCodingPolicyForPath(fsd, iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src, FSPermissionChecker pc)\n      throws IOException, AccessControlException {\n    assert fsn.hasReadLock();\n\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n    if (fsn.isPermissionEnabled()) {\n      fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n    }\n\n    if (iip.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n    }\n    return getErasureCodingPolicyForPath(fsd, iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "[fsn-FSNamesystem(modifiers-final), src-String(modifiers-final)]",
            "newValue": "[fsn-FSNamesystem(modifiers-final), src-String(modifiers-final), pc-FSPermissionChecker]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
          "commitDate": "03/03/17 1:00 PM",
          "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/03/17 7:58 PM",
          "commitNameOld": "3749152b661d0359b3b941ab1d17177230f3b8dc",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,16 @@\n   static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n-      final String src) throws IOException {\n+      final String src, FSPermissionChecker pc)\n+      throws IOException, AccessControlException {\n     assert fsn.hasReadLock();\n \n-    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n+    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n+    if (fsn.isPermissionEnabled()) {\n+      fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n+    }\n+\n     if (iip.getLastINode() \u003d\u003d null) {\n       throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n     }\n-    return getErasureCodingPolicyForPath(fsn, iip);\n+    return getErasureCodingPolicyForPath(fsd, iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src, FSPermissionChecker pc)\n      throws IOException, AccessControlException {\n    assert fsn.hasReadLock();\n\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n    if (fsn.isPermissionEnabled()) {\n      fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n    }\n\n    if (iip.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n    }\n    return getErasureCodingPolicyForPath(fsd, iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, AccessControlException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
          "commitDate": "03/03/17 1:00 PM",
          "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/03/17 7:58 PM",
          "commitNameOld": "3749152b661d0359b3b941ab1d17177230f3b8dc",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,16 @@\n   static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n-      final String src) throws IOException {\n+      final String src, FSPermissionChecker pc)\n+      throws IOException, AccessControlException {\n     assert fsn.hasReadLock();\n \n-    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n+    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n+    if (fsn.isPermissionEnabled()) {\n+      fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n+    }\n+\n     if (iip.getLastINode() \u003d\u003d null) {\n       throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n     }\n-    return getErasureCodingPolicyForPath(fsn, iip);\n+    return getErasureCodingPolicyForPath(fsd, iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src, FSPermissionChecker pc)\n      throws IOException, AccessControlException {\n    assert fsn.hasReadLock();\n\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n    if (fsn.isPermissionEnabled()) {\n      fsn.getFSDirectory().checkPathAccess(pc, iip, FsAction.READ);\n    }\n\n    if (iip.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n    }\n    return getErasureCodingPolicyForPath(fsd, iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "5b714a2819c5d5e0196471f289820ddd18fbaff9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9348. Erasure Coding: DFS GetErasureCodingPolicy API on a non-existent file should be handled properly. (Rakesh R via umamahesh)\n",
      "commitDate": "21/11/15 10:38 PM",
      "commitName": "5b714a2819c5d5e0196471f289820ddd18fbaff9",
      "commitAuthor": "Uma Mahesh",
      "commitDateOld": "10/09/15 4:31 PM",
      "commitNameOld": "96d6b516b2468fce346490e0b95931d1759b3d33",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 72.3,
      "commitsBetweenForRepo": 547,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,10 @@\n   static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n       final String src) throws IOException {\n     assert fsn.hasReadLock();\n \n     final INodesInPath iip \u003d getINodesInPath(fsn, src);\n+    if (iip.getLastINode() \u003d\u003d null) {\n+      throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n+    }\n     return getErasureCodingPolicyForPath(fsn, iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src) throws IOException {\n    assert fsn.hasReadLock();\n\n    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n    if (iip.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"Path not found: \" + iip.getPath());\n    }\n    return getErasureCodingPolicyForPath(fsn, iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "f62237bc2f02afe11ce185e13aa51a60b5960037": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
      "commitDate": "09/09/15 11:07 PM",
      "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
          "commitDate": "09/09/15 11:07 PM",
          "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "13/08/15 10:04 AM",
          "commitNameOld": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 27.54,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,7 @@\n-  static ErasureCodingZone getErasureCodingZone(final FSNamesystem fsn,\n+  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n       final String src) throws IOException {\n     assert fsn.hasReadLock();\n \n     final INodesInPath iip \u003d getINodesInPath(fsn, src);\n-    return getErasureCodingZoneForPath(fsn, iip);\n+    return getErasureCodingPolicyForPath(fsn, iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src) throws IOException {\n    assert fsn.hasReadLock();\n\n    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n    return getErasureCodingPolicyForPath(fsn, iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "getErasureCodingZone",
            "newValue": "getErasureCodingPolicy"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
          "commitDate": "09/09/15 11:07 PM",
          "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "13/08/15 10:04 AM",
          "commitNameOld": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 27.54,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,7 @@\n-  static ErasureCodingZone getErasureCodingZone(final FSNamesystem fsn,\n+  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n       final String src) throws IOException {\n     assert fsn.hasReadLock();\n \n     final INodesInPath iip \u003d getINodesInPath(fsn, src);\n-    return getErasureCodingZoneForPath(fsn, iip);\n+    return getErasureCodingPolicyForPath(fsn, iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src) throws IOException {\n    assert fsn.hasReadLock();\n\n    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n    return getErasureCodingPolicyForPath(fsn, iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "ErasureCodingZone",
            "newValue": "ErasureCodingPolicy"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
          "commitDate": "09/09/15 11:07 PM",
          "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "13/08/15 10:04 AM",
          "commitNameOld": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 27.54,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,7 @@\n-  static ErasureCodingZone getErasureCodingZone(final FSNamesystem fsn,\n+  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n       final String src) throws IOException {\n     assert fsn.hasReadLock();\n \n     final INodesInPath iip \u003d getINodesInPath(fsn, src);\n-    return getErasureCodingZoneForPath(fsn, iip);\n+    return getErasureCodingPolicyForPath(fsn, iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ErasureCodingPolicy getErasureCodingPolicy(final FSNamesystem fsn,\n      final String src) throws IOException {\n    assert fsn.hasReadLock();\n\n    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n    return getErasureCodingPolicyForPath(fsn, iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "98d340745be682fb251677bb4830aca76119868f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8450. Erasure Coding: Consolidate erasure coding zone related implementation into a single class (Contributed by Rakesh R)\n",
      "commitDate": "10/06/15 10:18 PM",
      "commitName": "98d340745be682fb251677bb4830aca76119868f",
      "commitAuthor": "Vinayakumar B",
      "diff": "@@ -0,0 +1,7 @@\n+  static ErasureCodingZone getErasureCodingZone(final FSNamesystem fsn,\n+      final String src) throws IOException {\n+    assert fsn.hasReadLock();\n+\n+    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n+    return getErasureCodingZoneForPath(fsn, iip);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static ErasureCodingZone getErasureCodingZone(final FSNamesystem fsn,\n      final String src) throws IOException {\n    assert fsn.hasReadLock();\n\n    final INodesInPath iip \u003d getINodesInPath(fsn, src);\n    return getErasureCodingZoneForPath(fsn, iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java"
    }
  }
}