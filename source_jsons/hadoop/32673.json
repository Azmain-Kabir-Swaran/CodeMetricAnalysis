{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeStatusUpdaterImpl.java",
  "functionName": "getNMContainerStatuses",
  "functionId": "getNMContainerStatuses",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
  "functionStartLine": 645,
  "functionEndLine": 669,
  "numCommitsSeen": 117,
  "timeTaken": 3060,
  "changeHistory": [
    "cc2a745f7e82c9fa6de03242952347c54c52dccc",
    "3ef1cf187faeb530e74606dd7113fd1ba08140d7",
    "0a641496c706fc175e7bf66d69ebf71c7d078e84",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b",
    "23c325ad47e305989b7f2cf172bd709f73dd26d1"
  ],
  "changeHistoryShort": {
    "cc2a745f7e82c9fa6de03242952347c54c52dccc": "Ybodychange",
    "3ef1cf187faeb530e74606dd7113fd1ba08140d7": "Ybodychange",
    "0a641496c706fc175e7bf66d69ebf71c7d078e84": "Ymultichange(Yexceptionschange,Ybodychange)",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": "Ybodychange",
    "23c325ad47e305989b7f2cf172bd709f73dd26d1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cc2a745f7e82c9fa6de03242952347c54c52dccc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2997. Fixed NodeStatusUpdater to not send alreay-sent completed container statuses on heartbeat. Contributed by Chengbing Liu\n",
      "commitDate": "08/01/15 11:12 AM",
      "commitName": "cc2a745f7e82c9fa6de03242952347c54c52dccc",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/11/14 11:07 AM",
      "commitNameOld": "be7bf956e96dd0fd9b521ca71df9124b9cc5ebd0",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 57.0,
      "commitsBetweenForRepo": 342,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private List\u003cNMContainerStatus\u003e getNMContainerStatuses() throws IOException {\n     List\u003cNMContainerStatus\u003e containerStatuses \u003d\n         new ArrayList\u003cNMContainerStatus\u003e();\n     for (Container container : this.context.getContainers().values()) {\n       ContainerId containerId \u003d container.getContainerId();\n-      ApplicationId applicationId \u003d container.getContainerId()\n-          .getApplicationAttemptId().getApplicationId();\n+      ApplicationId applicationId \u003d containerId.getApplicationAttemptId()\n+          .getApplicationId();\n       if (!this.context.getApplications().containsKey(applicationId)) {\n         context.getContainers().remove(containerId);\n         continue;\n       }\n       NMContainerStatus status \u003d\n           container.getNMContainerStatus();\n       containerStatuses.add(status);\n       if (status.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n         // Adding to finished containers cache. Cache will keep it around at\n         // least for #durationToTrackStoppedContainers duration. In the\n         // subsequent call to stop container it will get removed from cache.\n-        addCompletedContainer(container.getContainerId());\n+        addCompletedContainer(containerId);\n       }\n     }\n     LOG.info(\"Sending out \" + containerStatuses.size()\n       + \" NM container statuses: \" + containerStatuses);\n     return containerStatuses;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() throws IOException {\n    List\u003cNMContainerStatus\u003e containerStatuses \u003d\n        new ArrayList\u003cNMContainerStatus\u003e();\n    for (Container container : this.context.getContainers().values()) {\n      ContainerId containerId \u003d container.getContainerId();\n      ApplicationId applicationId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      if (!this.context.getApplications().containsKey(applicationId)) {\n        context.getContainers().remove(containerId);\n        continue;\n      }\n      NMContainerStatus status \u003d\n          container.getNMContainerStatus();\n      containerStatuses.add(status);\n      if (status.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n        // Adding to finished containers cache. Cache will keep it around at\n        // least for #durationToTrackStoppedContainers duration. In the\n        // subsequent call to stop container it will get removed from cache.\n        addCompletedContainer(containerId);\n      }\n    }\n    LOG.info(\"Sending out \" + containerStatuses.size()\n      + \" NM container statuses: \" + containerStatuses);\n    return containerStatuses;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "3ef1cf187faeb530e74606dd7113fd1ba08140d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2617. Fixed NM to not send duplicate container status whose app is not running. Contributed by Jun Gong\n",
      "commitDate": "02/10/14 10:04 AM",
      "commitName": "3ef1cf187faeb530e74606dd7113fd1ba08140d7",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/10/14 3:38 PM",
      "commitNameOld": "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private List\u003cNMContainerStatus\u003e getNMContainerStatuses() throws IOException {\n     List\u003cNMContainerStatus\u003e containerStatuses \u003d\n         new ArrayList\u003cNMContainerStatus\u003e();\n     for (Container container : this.context.getContainers().values()) {\n       ContainerId containerId \u003d container.getContainerId();\n       ApplicationId applicationId \u003d container.getContainerId()\n           .getApplicationAttemptId().getApplicationId();\n       if (!this.context.getApplications().containsKey(applicationId)) {\n         context.getContainers().remove(containerId);\n         continue;\n       }\n       NMContainerStatus status \u003d\n           container.getNMContainerStatus();\n       containerStatuses.add(status);\n-      if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n+      if (status.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n         // Adding to finished containers cache. Cache will keep it around at\n         // least for #durationToTrackStoppedContainers duration. In the\n         // subsequent call to stop container it will get removed from cache.\n         addCompletedContainer(container.getContainerId());\n       }\n     }\n     LOG.info(\"Sending out \" + containerStatuses.size()\n       + \" NM container statuses: \" + containerStatuses);\n     return containerStatuses;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() throws IOException {\n    List\u003cNMContainerStatus\u003e containerStatuses \u003d\n        new ArrayList\u003cNMContainerStatus\u003e();\n    for (Container container : this.context.getContainers().values()) {\n      ContainerId containerId \u003d container.getContainerId();\n      ApplicationId applicationId \u003d container.getContainerId()\n          .getApplicationAttemptId().getApplicationId();\n      if (!this.context.getApplications().containsKey(applicationId)) {\n        context.getContainers().remove(containerId);\n        continue;\n      }\n      NMContainerStatus status \u003d\n          container.getNMContainerStatus();\n      containerStatuses.add(status);\n      if (status.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n        // Adding to finished containers cache. Cache will keep it around at\n        // least for #durationToTrackStoppedContainers duration. In the\n        // subsequent call to stop container it will get removed from cache.\n        addCompletedContainer(container.getContainerId());\n      }\n    }\n    LOG.info(\"Sending out \" + containerStatuses.size()\n      + \" NM container statuses: \" + containerStatuses);\n    return containerStatuses;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "0a641496c706fc175e7bf66d69ebf71c7d078e84": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-1372. Ensure all completed containers are reported to the AMs across RM restart. Contributed by Anubhav Dhoot\n",
      "commitDate": "22/09/14 10:30 AM",
      "commitName": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-1372. Ensure all completed containers are reported to the AMs across RM restart. Contributed by Anubhav Dhoot\n",
          "commitDate": "22/09/14 10:30 AM",
          "commitName": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/08/14 3:56 AM",
          "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 41.27,
          "commitsBetweenForRepo": 399,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,25 @@\n-  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() {\n+  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() throws IOException {\n     List\u003cNMContainerStatus\u003e containerStatuses \u003d\n         new ArrayList\u003cNMContainerStatus\u003e();\n     for (Container container : this.context.getContainers().values()) {\n+      ContainerId containerId \u003d container.getContainerId();\n+      ApplicationId applicationId \u003d container.getContainerId()\n+          .getApplicationAttemptId().getApplicationId();\n+      if (!this.context.getApplications().containsKey(applicationId)) {\n+        context.getContainers().remove(containerId);\n+        continue;\n+      }\n       NMContainerStatus status \u003d\n           container.getNMContainerStatus();\n       containerStatuses.add(status);\n       if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n         // Adding to finished containers cache. Cache will keep it around at\n         // least for #durationToTrackStoppedContainers duration. In the\n         // subsequent call to stop container it will get removed from cache.\n         addCompletedContainer(container.getContainerId());\n       }\n     }\n     LOG.info(\"Sending out \" + containerStatuses.size()\n       + \" NM container statuses: \" + containerStatuses);\n     return containerStatuses;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() throws IOException {\n    List\u003cNMContainerStatus\u003e containerStatuses \u003d\n        new ArrayList\u003cNMContainerStatus\u003e();\n    for (Container container : this.context.getContainers().values()) {\n      ContainerId containerId \u003d container.getContainerId();\n      ApplicationId applicationId \u003d container.getContainerId()\n          .getApplicationAttemptId().getApplicationId();\n      if (!this.context.getApplications().containsKey(applicationId)) {\n        context.getContainers().remove(containerId);\n        continue;\n      }\n      NMContainerStatus status \u003d\n          container.getNMContainerStatus();\n      containerStatuses.add(status);\n      if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n        // Adding to finished containers cache. Cache will keep it around at\n        // least for #durationToTrackStoppedContainers duration. In the\n        // subsequent call to stop container it will get removed from cache.\n        addCompletedContainer(container.getContainerId());\n      }\n    }\n    LOG.info(\"Sending out \" + containerStatuses.size()\n      + \" NM container statuses: \" + containerStatuses);\n    return containerStatuses;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1372. Ensure all completed containers are reported to the AMs across RM restart. Contributed by Anubhav Dhoot\n",
          "commitDate": "22/09/14 10:30 AM",
          "commitName": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/08/14 3:56 AM",
          "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 41.27,
          "commitsBetweenForRepo": 399,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,25 @@\n-  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() {\n+  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() throws IOException {\n     List\u003cNMContainerStatus\u003e containerStatuses \u003d\n         new ArrayList\u003cNMContainerStatus\u003e();\n     for (Container container : this.context.getContainers().values()) {\n+      ContainerId containerId \u003d container.getContainerId();\n+      ApplicationId applicationId \u003d container.getContainerId()\n+          .getApplicationAttemptId().getApplicationId();\n+      if (!this.context.getApplications().containsKey(applicationId)) {\n+        context.getContainers().remove(containerId);\n+        continue;\n+      }\n       NMContainerStatus status \u003d\n           container.getNMContainerStatus();\n       containerStatuses.add(status);\n       if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n         // Adding to finished containers cache. Cache will keep it around at\n         // least for #durationToTrackStoppedContainers duration. In the\n         // subsequent call to stop container it will get removed from cache.\n         addCompletedContainer(container.getContainerId());\n       }\n     }\n     LOG.info(\"Sending out \" + containerStatuses.size()\n       + \" NM container statuses: \" + containerStatuses);\n     return containerStatuses;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() throws IOException {\n    List\u003cNMContainerStatus\u003e containerStatuses \u003d\n        new ArrayList\u003cNMContainerStatus\u003e();\n    for (Container container : this.context.getContainers().values()) {\n      ContainerId containerId \u003d container.getContainerId();\n      ApplicationId applicationId \u003d container.getContainerId()\n          .getApplicationAttemptId().getApplicationId();\n      if (!this.context.getApplications().containsKey(applicationId)) {\n        context.getContainers().remove(containerId);\n        continue;\n      }\n      NMContainerStatus status \u003d\n          container.getNMContainerStatus();\n      containerStatuses.add(status);\n      if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n        // Adding to finished containers cache. Cache will keep it around at\n        // least for #durationToTrackStoppedContainers duration. In the\n        // subsequent call to stop container it will get removed from cache.\n        addCompletedContainer(container.getContainerId());\n      }\n    }\n    LOG.info(\"Sending out \" + containerStatuses.size()\n      + \" NM container statuses: \" + containerStatuses);\n    return containerStatuses;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 3:56 AM",
      "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthor": "Junping Du",
      "commitDateOld": "16/06/14 4:56 PM",
      "commitNameOld": "95897ca14b7abd7fe047fdcf150473a8a2cbb024",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 56.46,
      "commitsBetweenForRepo": 399,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,18 @@\n   private List\u003cNMContainerStatus\u003e getNMContainerStatuses() {\n     List\u003cNMContainerStatus\u003e containerStatuses \u003d\n         new ArrayList\u003cNMContainerStatus\u003e();\n     for (Container container : this.context.getContainers().values()) {\n       NMContainerStatus status \u003d\n           container.getNMContainerStatus();\n       containerStatuses.add(status);\n       if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n         // Adding to finished containers cache. Cache will keep it around at\n         // least for #durationToTrackStoppedContainers duration. In the\n         // subsequent call to stop container it will get removed from cache.\n-        updateStoppedContainersInCache(container.getContainerId());\n-        addCompletedContainer(container);\n+        addCompletedContainer(container.getContainerId());\n       }\n     }\n     LOG.info(\"Sending out \" + containerStatuses.size()\n       + \" NM container statuses: \" + containerStatuses);\n     return containerStatuses;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() {\n    List\u003cNMContainerStatus\u003e containerStatuses \u003d\n        new ArrayList\u003cNMContainerStatus\u003e();\n    for (Container container : this.context.getContainers().values()) {\n      NMContainerStatus status \u003d\n          container.getNMContainerStatus();\n      containerStatuses.add(status);\n      if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n        // Adding to finished containers cache. Cache will keep it around at\n        // least for #durationToTrackStoppedContainers duration. In the\n        // subsequent call to stop container it will get removed from cache.\n        addCompletedContainer(container.getContainerId());\n      }\n    }\n    LOG.info(\"Sending out \" + containerStatuses.size()\n      + \" NM container statuses: \" + containerStatuses);\n    return containerStatuses;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "23c325ad47e305989b7f2cf172bd709f73dd26d1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2115. Replaced RegisterNodeManagerRequest\u0027s ContainerStatus with a new NMContainerStatus which has more information that is needed for work-preserving RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 5:20 PM",
      "commitName": "23c325ad47e305989b7f2cf172bd709f73dd26d1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,19 @@\n+  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() {\n+    List\u003cNMContainerStatus\u003e containerStatuses \u003d\n+        new ArrayList\u003cNMContainerStatus\u003e();\n+    for (Container container : this.context.getContainers().values()) {\n+      NMContainerStatus status \u003d\n+          container.getNMContainerStatus();\n+      containerStatuses.add(status);\n+      if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n+        // Adding to finished containers cache. Cache will keep it around at\n+        // least for #durationToTrackStoppedContainers duration. In the\n+        // subsequent call to stop container it will get removed from cache.\n+        updateStoppedContainersInCache(container.getContainerId());\n+        addCompletedContainer(container);\n+      }\n+    }\n+    LOG.info(\"Sending out \" + containerStatuses.size()\n+      + \" NM container statuses: \" + containerStatuses);\n+    return containerStatuses;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cNMContainerStatus\u003e getNMContainerStatuses() {\n    List\u003cNMContainerStatus\u003e containerStatuses \u003d\n        new ArrayList\u003cNMContainerStatus\u003e();\n    for (Container container : this.context.getContainers().values()) {\n      NMContainerStatus status \u003d\n          container.getNMContainerStatus();\n      containerStatuses.add(status);\n      if (status.getContainerState().equals(ContainerState.COMPLETE)) {\n        // Adding to finished containers cache. Cache will keep it around at\n        // least for #durationToTrackStoppedContainers duration. In the\n        // subsequent call to stop container it will get removed from cache.\n        updateStoppedContainersInCache(container.getContainerId());\n        addCompletedContainer(container);\n      }\n    }\n    LOG.info(\"Sending out \" + containerStatuses.size()\n      + \" NM container statuses: \" + containerStatuses);\n    return containerStatuses;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
    }
  }
}