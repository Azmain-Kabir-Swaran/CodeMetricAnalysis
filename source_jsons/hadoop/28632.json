{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnmanagedApplicationManager.java",
  "functionName": "allocateAsync",
  "functionId": "allocateAsync___request-AllocateRequest__callback-AsyncCallback__AllocateResponse__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
  "functionStartLine": 306,
  "functionEndLine": 325,
  "numCommitsSeen": 13,
  "timeTaken": 2439,
  "changeHistory": [
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
    "f1525825623a1307b5aa55c456b6afa3e0c61135",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "859aa1f9d621d07693825e610bdc0149f7a2770a"
  ],
  "changeHistoryShort": {
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": "Ybodychange",
    "f1525825623a1307b5aa55c456b6afa3e0c61135": "Ybodychange",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "859aa1f9d621d07693825e610bdc0149f7a2770a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8658. [AMRMProxy] Metrics for AMRMClientRelayer inside FederationInterceptor. Contributed by Young Chen.\n",
      "commitDate": "12/09/18 11:46 AM",
      "commitName": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "27/08/18 10:32 AM",
      "commitNameOld": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 16.05,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public void allocateAsync(AllocateRequest request,\n       AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n     this.heartbeatHandler.allocateAsync(request, callback);\n \n     // Two possible cases why the UAM is not successfully registered yet:\n     // 1. launchUAM is not called at all. Should throw here.\n     // 2. launchUAM is called but hasn\u0027t successfully returned.\n     //\n     // In case 2, we have already save the allocate request above, so if the\n     // registration succeed later, no request is lost.\n-    if (this.rmProxyRelayer \u003d\u003d null) {\n+    if (this.userUgi \u003d\u003d null) {\n       if (this.connectionInitiated) {\n         LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n             + \" Saving the allocate request and send later.\");\n       } else {\n         throw new YarnException(\n             \"AllocateAsync should not be called before launchUAM\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void allocateAsync(AllocateRequest request,\n      AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n    this.heartbeatHandler.allocateAsync(request, callback);\n\n    // Two possible cases why the UAM is not successfully registered yet:\n    // 1. launchUAM is not called at all. Should throw here.\n    // 2. launchUAM is called but hasn\u0027t successfully returned.\n    //\n    // In case 2, we have already save the allocate request above, so if the\n    // registration succeed later, no request is lost.\n    if (this.userUgi \u003d\u003d null) {\n      if (this.connectionInitiated) {\n        LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n            + \" Saving the allocate request and send later.\");\n      } else {\n        throw new YarnException(\n            \"AllocateAsync should not be called before launchUAM\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "f1525825623a1307b5aa55c456b6afa3e0c61135": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
      "commitDate": "27/08/18 10:32 AM",
      "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/08/18 12:22 PM",
      "commitNameOld": "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,20 @@\n   public void allocateAsync(AllocateRequest request,\n       AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n-    try {\n-      this.requestQueue.put(new AsyncAllocateRequestInfo(request, callback));\n-    } catch (InterruptedException ex) {\n-      // Should not happen as we have MAX_INT queue length\n-      LOG.debug(\"Interrupted while waiting to put on response queue\", ex);\n-    }\n+    this.heartbeatHandler.allocateAsync(request, callback);\n+\n     // Two possible cases why the UAM is not successfully registered yet:\n     // 1. launchUAM is not called at all. Should throw here.\n     // 2. launchUAM is called but hasn\u0027t successfully returned.\n     //\n     // In case 2, we have already save the allocate request above, so if the\n     // registration succeed later, no request is lost.\n     if (this.rmProxyRelayer \u003d\u003d null) {\n       if (this.connectionInitiated) {\n         LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n             + \" Saving the allocate request and send later.\");\n       } else {\n         throw new YarnException(\n             \"AllocateAsync should not be called before launchUAM\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void allocateAsync(AllocateRequest request,\n      AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n    this.heartbeatHandler.allocateAsync(request, callback);\n\n    // Two possible cases why the UAM is not successfully registered yet:\n    // 1. launchUAM is not called at all. Should throw here.\n    // 2. launchUAM is called but hasn\u0027t successfully returned.\n    //\n    // In case 2, we have already save the allocate request above, so if the\n    // registration succeed later, no request is lost.\n    if (this.rmProxyRelayer \u003d\u003d null) {\n      if (this.connectionInitiated) {\n        LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n            + \" Saving the allocate request and send later.\");\n      } else {\n        throw new YarnException(\n            \"AllocateAsync should not be called before launchUAM\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7899. [AMRMProxy] Stateful FederationInterceptor for pending requests. Contributed by Botong Huang.\n",
      "commitDate": "09/07/18 12:27 PM",
      "commitName": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 27.16,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void allocateAsync(AllocateRequest request,\n       AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n     try {\n       this.requestQueue.put(new AsyncAllocateRequestInfo(request, callback));\n     } catch (InterruptedException ex) {\n       // Should not happen as we have MAX_INT queue length\n       LOG.debug(\"Interrupted while waiting to put on response queue\", ex);\n     }\n     // Two possible cases why the UAM is not successfully registered yet:\n     // 1. launchUAM is not called at all. Should throw here.\n     // 2. launchUAM is called but hasn\u0027t successfully returned.\n     //\n     // In case 2, we have already save the allocate request above, so if the\n     // registration succeed later, no request is lost.\n-    if (this.rmProxy \u003d\u003d null) {\n+    if (this.rmProxyRelayer \u003d\u003d null) {\n       if (this.connectionInitiated) {\n         LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n             + \" Saving the allocate request and send later.\");\n       } else {\n         throw new YarnException(\n             \"AllocateAsync should not be called before launchUAM\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void allocateAsync(AllocateRequest request,\n      AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n    try {\n      this.requestQueue.put(new AsyncAllocateRequestInfo(request, callback));\n    } catch (InterruptedException ex) {\n      // Should not happen as we have MAX_INT queue length\n      LOG.debug(\"Interrupted while waiting to put on response queue\", ex);\n    }\n    // Two possible cases why the UAM is not successfully registered yet:\n    // 1. launchUAM is not called at all. Should throw here.\n    // 2. launchUAM is called but hasn\u0027t successfully returned.\n    //\n    // In case 2, we have already save the allocate request above, so if the\n    // registration succeed later, no request is lost.\n    if (this.rmProxyRelayer \u003d\u003d null) {\n      if (this.connectionInitiated) {\n        LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n            + \" Saving the allocate request and send later.\");\n      } else {\n        throw new YarnException(\n            \"AllocateAsync should not be called before launchUAM\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "29/08/17 2:53 PM",
      "commitNameOld": "cc8893edc0b7960e958723c81062986c12f06ade",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 80.16,
      "commitsBetweenForRepo": 783,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void allocateAsync(AllocateRequest request,\n       AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n     try {\n       this.requestQueue.put(new AsyncAllocateRequestInfo(request, callback));\n     } catch (InterruptedException ex) {\n       // Should not happen as we have MAX_INT queue length\n       LOG.debug(\"Interrupted while waiting to put on response queue\", ex);\n     }\n     // Two possible cases why the UAM is not successfully registered yet:\n-    // 1. registerApplicationMaster is not called at all. Should throw here.\n-    // 2. registerApplicationMaster is called but hasn\u0027t successfully returned.\n+    // 1. launchUAM is not called at all. Should throw here.\n+    // 2. launchUAM is called but hasn\u0027t successfully returned.\n     //\n     // In case 2, we have already save the allocate request above, so if the\n     // registration succeed later, no request is lost.\n     if (this.rmProxy \u003d\u003d null) {\n-      if (this.registerRequest !\u003d null) {\n+      if (this.connectionInitiated) {\n         LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n             + \" Saving the allocate request and send later.\");\n       } else {\n         throw new YarnException(\n-            \"AllocateAsync should not be called before createAndRegister\");\n+            \"AllocateAsync should not be called before launchUAM\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void allocateAsync(AllocateRequest request,\n      AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n    try {\n      this.requestQueue.put(new AsyncAllocateRequestInfo(request, callback));\n    } catch (InterruptedException ex) {\n      // Should not happen as we have MAX_INT queue length\n      LOG.debug(\"Interrupted while waiting to put on response queue\", ex);\n    }\n    // Two possible cases why the UAM is not successfully registered yet:\n    // 1. launchUAM is not called at all. Should throw here.\n    // 2. launchUAM is called but hasn\u0027t successfully returned.\n    //\n    // In case 2, we have already save the allocate request above, so if the\n    // registration succeed later, no request is lost.\n    if (this.rmProxy \u003d\u003d null) {\n      if (this.connectionInitiated) {\n        LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n            + \" Saving the allocate request and send later.\");\n      } else {\n        throw new YarnException(\n            \"AllocateAsync should not be called before launchUAM\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java",
      "extendedDetails": {}
    },
    "859aa1f9d621d07693825e610bdc0149f7a2770a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "859aa1f9d621d07693825e610bdc0149f7a2770a",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,24 @@\n+  public void allocateAsync(AllocateRequest request,\n+      AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n+    try {\n+      this.requestQueue.put(new AsyncAllocateRequestInfo(request, callback));\n+    } catch (InterruptedException ex) {\n+      // Should not happen as we have MAX_INT queue length\n+      LOG.debug(\"Interrupted while waiting to put on response queue\", ex);\n+    }\n+    // Two possible cases why the UAM is not successfully registered yet:\n+    // 1. registerApplicationMaster is not called at all. Should throw here.\n+    // 2. registerApplicationMaster is called but hasn\u0027t successfully returned.\n+    //\n+    // In case 2, we have already save the allocate request above, so if the\n+    // registration succeed later, no request is lost.\n+    if (this.rmProxy \u003d\u003d null) {\n+      if (this.registerRequest !\u003d null) {\n+        LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n+            + \" Saving the allocate request and send later.\");\n+      } else {\n+        throw new YarnException(\n+            \"AllocateAsync should not be called before createAndRegister\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void allocateAsync(AllocateRequest request,\n      AsyncCallback\u003cAllocateResponse\u003e callback) throws YarnException {\n    try {\n      this.requestQueue.put(new AsyncAllocateRequestInfo(request, callback));\n    } catch (InterruptedException ex) {\n      // Should not happen as we have MAX_INT queue length\n      LOG.debug(\"Interrupted while waiting to put on response queue\", ex);\n    }\n    // Two possible cases why the UAM is not successfully registered yet:\n    // 1. registerApplicationMaster is not called at all. Should throw here.\n    // 2. registerApplicationMaster is called but hasn\u0027t successfully returned.\n    //\n    // In case 2, we have already save the allocate request above, so if the\n    // registration succeed later, no request is lost.\n    if (this.rmProxy \u003d\u003d null) {\n      if (this.registerRequest !\u003d null) {\n        LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\"\n            + \" Saving the allocate request and send later.\");\n      } else {\n        throw new YarnException(\n            \"AllocateAsync should not be called before createAndRegister\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/uam/UnmanagedApplicationManager.java"
    }
  }
}