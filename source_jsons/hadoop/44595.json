{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "getMatchedLogFiles",
  "functionId": "getMatchedLogFiles___options-ContainerLogsRequest__candidate-Collection__ContainerLogFileInfo____useRegex-boolean__ignoreSizeLimit-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 1231,
  "functionEndLine": 1269,
  "numCommitsSeen": 140,
  "timeTaken": 4564,
  "changeHistory": [
    "ec2ae3060a807c8754826af2135a68c08b2e4f13",
    "e605d47df05619c6b1c18aca59f709899498da75",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1"
  ],
  "changeHistoryShort": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": "Ymultichange(Yparameterchange,Ybodychange)",
    "e605d47df05619c6b1c18aca59f709899498da75": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": "Ymultichange(Yparameterchange,Ybodychange)",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
      "commitDate": "29/09/17 4:42 PM",
      "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,39 @@\n   private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n-      Collection\u003cString\u003e candidate, boolean useRegex) throws IOException {\n+      Collection\u003cContainerLogFileInfo\u003e candidate, boolean useRegex,\n+      boolean ignoreSizeLimit) throws IOException {\n     Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n     Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n-    if (options.getLogTypes().contains(\"ALL\")) {\n-      return new HashSet\u003cString\u003e(candidate);\n-    }\n-    for (String file : candidate) {\n-      if (useRegex) {\n-        if (isFileMatching(file, filePattern)) {\n-          matchedFiles.add(file);\n+    long size \u003d options.getBytes();\n+    boolean getAll \u003d options.getLogTypes().contains(\"ALL\");\n+    Iterator\u003cContainerLogFileInfo\u003e iterator \u003d candidate.iterator();\n+    while(iterator.hasNext()) {\n+      boolean matchedFile \u003d false;\n+      ContainerLogFileInfo logInfo \u003d iterator.next();\n+      if (getAll) {\n+        matchedFile \u003d true;\n+      } else if (useRegex) {\n+        if (isFileMatching(logInfo.getFileName(), filePattern)) {\n+          matchedFile \u003d true;\n         }\n       } else {\n-        if (filePattern.contains(file)) {\n-          matchedFiles.add(file);\n+        if (filePattern.contains(logInfo.getFileName())) {\n+          matchedFile \u003d true;\n+        }\n+      }\n+      if (matchedFile) {\n+        matchedFiles.add(logInfo.getFileName());\n+        if (!ignoreSizeLimit) {\n+          decrLogSizeLimit(Math.min(\n+              Long.parseLong(logInfo.getFileSize()), size));\n+          if (getLogSizeLimitLeft() \u003c 0) {\n+            throw new RuntimeException(\"The total log size is too large.\"\n+                + \"The log size limit is \" + specifedLogLimits + \"MB. \"\n+                + \"Please specify a proper value --size option or if you \"\n+                + \"really want to fetch all, please \"\n+                + \"specify -1 for --size_limit_mb option.\");\n+          }\n         }\n       }\n     }\n     return matchedFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n      Collection\u003cContainerLogFileInfo\u003e candidate, boolean useRegex,\n      boolean ignoreSizeLimit) throws IOException {\n    Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n    Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n    long size \u003d options.getBytes();\n    boolean getAll \u003d options.getLogTypes().contains(\"ALL\");\n    Iterator\u003cContainerLogFileInfo\u003e iterator \u003d candidate.iterator();\n    while(iterator.hasNext()) {\n      boolean matchedFile \u003d false;\n      ContainerLogFileInfo logInfo \u003d iterator.next();\n      if (getAll) {\n        matchedFile \u003d true;\n      } else if (useRegex) {\n        if (isFileMatching(logInfo.getFileName(), filePattern)) {\n          matchedFile \u003d true;\n        }\n      } else {\n        if (filePattern.contains(logInfo.getFileName())) {\n          matchedFile \u003d true;\n        }\n      }\n      if (matchedFile) {\n        matchedFiles.add(logInfo.getFileName());\n        if (!ignoreSizeLimit) {\n          decrLogSizeLimit(Math.min(\n              Long.parseLong(logInfo.getFileSize()), size));\n          if (getLogSizeLimitLeft() \u003c 0) {\n            throw new RuntimeException(\"The total log size is too large.\"\n                + \"The log size limit is \" + specifedLogLimits + \"MB. \"\n                + \"Please specify a proper value --size option or if you \"\n                + \"really want to fetch all, please \"\n                + \"specify -1 for --size_limit_mb option.\");\n          }\n        }\n      }\n    }\n    return matchedFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[options-ContainerLogsRequest, candidate-Collection\u003cString\u003e, useRegex-boolean]",
            "newValue": "[options-ContainerLogsRequest, candidate-Collection\u003cContainerLogFileInfo\u003e, useRegex-boolean, ignoreSizeLimit-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,39 @@\n   private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n-      Collection\u003cString\u003e candidate, boolean useRegex) throws IOException {\n+      Collection\u003cContainerLogFileInfo\u003e candidate, boolean useRegex,\n+      boolean ignoreSizeLimit) throws IOException {\n     Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n     Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n-    if (options.getLogTypes().contains(\"ALL\")) {\n-      return new HashSet\u003cString\u003e(candidate);\n-    }\n-    for (String file : candidate) {\n-      if (useRegex) {\n-        if (isFileMatching(file, filePattern)) {\n-          matchedFiles.add(file);\n+    long size \u003d options.getBytes();\n+    boolean getAll \u003d options.getLogTypes().contains(\"ALL\");\n+    Iterator\u003cContainerLogFileInfo\u003e iterator \u003d candidate.iterator();\n+    while(iterator.hasNext()) {\n+      boolean matchedFile \u003d false;\n+      ContainerLogFileInfo logInfo \u003d iterator.next();\n+      if (getAll) {\n+        matchedFile \u003d true;\n+      } else if (useRegex) {\n+        if (isFileMatching(logInfo.getFileName(), filePattern)) {\n+          matchedFile \u003d true;\n         }\n       } else {\n-        if (filePattern.contains(file)) {\n-          matchedFiles.add(file);\n+        if (filePattern.contains(logInfo.getFileName())) {\n+          matchedFile \u003d true;\n+        }\n+      }\n+      if (matchedFile) {\n+        matchedFiles.add(logInfo.getFileName());\n+        if (!ignoreSizeLimit) {\n+          decrLogSizeLimit(Math.min(\n+              Long.parseLong(logInfo.getFileSize()), size));\n+          if (getLogSizeLimitLeft() \u003c 0) {\n+            throw new RuntimeException(\"The total log size is too large.\"\n+                + \"The log size limit is \" + specifedLogLimits + \"MB. \"\n+                + \"Please specify a proper value --size option or if you \"\n+                + \"really want to fetch all, please \"\n+                + \"specify -1 for --size_limit_mb option.\");\n+          }\n         }\n       }\n     }\n     return matchedFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n      Collection\u003cContainerLogFileInfo\u003e candidate, boolean useRegex,\n      boolean ignoreSizeLimit) throws IOException {\n    Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n    Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n    long size \u003d options.getBytes();\n    boolean getAll \u003d options.getLogTypes().contains(\"ALL\");\n    Iterator\u003cContainerLogFileInfo\u003e iterator \u003d candidate.iterator();\n    while(iterator.hasNext()) {\n      boolean matchedFile \u003d false;\n      ContainerLogFileInfo logInfo \u003d iterator.next();\n      if (getAll) {\n        matchedFile \u003d true;\n      } else if (useRegex) {\n        if (isFileMatching(logInfo.getFileName(), filePattern)) {\n          matchedFile \u003d true;\n        }\n      } else {\n        if (filePattern.contains(logInfo.getFileName())) {\n          matchedFile \u003d true;\n        }\n      }\n      if (matchedFile) {\n        matchedFiles.add(logInfo.getFileName());\n        if (!ignoreSizeLimit) {\n          decrLogSizeLimit(Math.min(\n              Long.parseLong(logInfo.getFileSize()), size));\n          if (getLogSizeLimitLeft() \u003c 0) {\n            throw new RuntimeException(\"The total log size is too large.\"\n                + \"The log size limit is \" + specifedLogLimits + \"MB. \"\n                + \"Please specify a proper value --size option or if you \"\n                + \"really want to fetch all, please \"\n                + \"specify -1 for --size_limit_mb option.\");\n          }\n        }\n      }\n    }\n    return matchedFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "e605d47df05619c6b1c18aca59f709899498da75": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
      "commitDate": "05/08/16 10:55 AM",
      "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,20 @@\n-  private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n-      Collection\u003cString\u003e candidate) throws IOException {\n-    List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n-    List\u003cString\u003e filePattern \u003d options.getLogTypes();\n+  private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n+      Collection\u003cString\u003e candidate, boolean useRegex) throws IOException {\n+    Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n+    Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n+    if (options.getLogTypes().contains(\"ALL\")) {\n+      return new HashSet\u003cString\u003e(candidate);\n+    }\n     for (String file : candidate) {\n-      if (isFileMatching(file, filePattern)) {\n-        matchedFiles.add(file);\n+      if (useRegex) {\n+        if (isFileMatching(file, filePattern)) {\n+          matchedFiles.add(file);\n+        }\n+      } else {\n+        if (filePattern.contains(file)) {\n+          matchedFiles.add(file);\n+        }\n       }\n     }\n     return matchedFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n      Collection\u003cString\u003e candidate, boolean useRegex) throws IOException {\n    Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n    Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n    if (options.getLogTypes().contains(\"ALL\")) {\n      return new HashSet\u003cString\u003e(candidate);\n    }\n    for (String file : candidate) {\n      if (useRegex) {\n        if (isFileMatching(file, filePattern)) {\n          matchedFiles.add(file);\n        }\n      } else {\n        if (filePattern.contains(file)) {\n          matchedFiles.add(file);\n        }\n      }\n    }\n    return matchedFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[options-ContainerLogsRequest, candidate-Collection\u003cString\u003e]",
            "newValue": "[options-ContainerLogsRequest, candidate-Collection\u003cString\u003e, useRegex-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,20 @@\n-  private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n-      Collection\u003cString\u003e candidate) throws IOException {\n-    List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n-    List\u003cString\u003e filePattern \u003d options.getLogTypes();\n+  private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n+      Collection\u003cString\u003e candidate, boolean useRegex) throws IOException {\n+    Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n+    Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n+    if (options.getLogTypes().contains(\"ALL\")) {\n+      return new HashSet\u003cString\u003e(candidate);\n+    }\n     for (String file : candidate) {\n-      if (isFileMatching(file, filePattern)) {\n-        matchedFiles.add(file);\n+      if (useRegex) {\n+        if (isFileMatching(file, filePattern)) {\n+          matchedFiles.add(file);\n+        }\n+      } else {\n+        if (filePattern.contains(file)) {\n+          matchedFiles.add(file);\n+        }\n       }\n     }\n     return matchedFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n      Collection\u003cString\u003e candidate, boolean useRegex) throws IOException {\n    Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n    Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n    if (options.getLogTypes().contains(\"ALL\")) {\n      return new HashSet\u003cString\u003e(candidate);\n    }\n    for (String file : candidate) {\n      if (useRegex) {\n        if (isFileMatching(file, filePattern)) {\n          matchedFiles.add(file);\n        }\n      } else {\n        if (filePattern.contains(file)) {\n          matchedFiles.add(file);\n        }\n      }\n    }\n    return matchedFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "List\u003cString\u003e",
            "newValue": "Set\u003cString\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,20 @@\n-  private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n-      Collection\u003cString\u003e candidate) throws IOException {\n-    List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n-    List\u003cString\u003e filePattern \u003d options.getLogTypes();\n+  private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n+      Collection\u003cString\u003e candidate, boolean useRegex) throws IOException {\n+    Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n+    Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n+    if (options.getLogTypes().contains(\"ALL\")) {\n+      return new HashSet\u003cString\u003e(candidate);\n+    }\n     for (String file : candidate) {\n-      if (isFileMatching(file, filePattern)) {\n-        matchedFiles.add(file);\n+      if (useRegex) {\n+        if (isFileMatching(file, filePattern)) {\n+          matchedFiles.add(file);\n+        }\n+      } else {\n+        if (filePattern.contains(file)) {\n+          matchedFiles.add(file);\n+        }\n       }\n     }\n     return matchedFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Set\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n      Collection\u003cString\u003e candidate, boolean useRegex) throws IOException {\n    Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n    Set\u003cString\u003e filePattern \u003d options.getLogTypes();\n    if (options.getLogTypes().contains(\"ALL\")) {\n      return new HashSet\u003cString\u003e(candidate);\n    }\n    for (String file : candidate) {\n      if (useRegex) {\n        if (isFileMatching(file, filePattern)) {\n          matchedFiles.add(file);\n        }\n      } else {\n        if (filePattern.contains(file)) {\n          matchedFiles.add(file);\n        }\n      }\n    }\n    return matchedFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
      "commitDate": "22/06/16 9:48 PM",
      "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
          "commitDate": "22/06/16 9:48 PM",
          "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthor": "Xuan",
          "commitDateOld": "20/06/16 4:05 PM",
          "commitNameOld": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
          "commitAuthorOld": "Tsuyoshi Ozawa",
          "daysBetweenCommits": 2.24,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,11 @@\n   private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n-      Collection\u003cString\u003e candidate, boolean printError) throws IOException {\n+      Collection\u003cString\u003e candidate) throws IOException {\n     List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n     List\u003cString\u003e filePattern \u003d options.getLogTypes();\n     for (String file : candidate) {\n       if (isFileMatching(file, filePattern)) {\n         matchedFiles.add(file);\n       }\n     }\n-    if (matchedFiles.isEmpty()) {\n-      if (printError) {\n-        System.err.println(\"Can not find any log file matching the pattern: \"\n-            + options.getLogTypes() + \" for the application: \"\n-            + options.getAppId());\n-      }\n-    }\n     return matchedFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n      Collection\u003cString\u003e candidate) throws IOException {\n    List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n    List\u003cString\u003e filePattern \u003d options.getLogTypes();\n    for (String file : candidate) {\n      if (isFileMatching(file, filePattern)) {\n        matchedFiles.add(file);\n      }\n    }\n    return matchedFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[options-ContainerLogsRequest, candidate-Collection\u003cString\u003e, printError-boolean]",
            "newValue": "[options-ContainerLogsRequest, candidate-Collection\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
          "commitDate": "22/06/16 9:48 PM",
          "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthor": "Xuan",
          "commitDateOld": "20/06/16 4:05 PM",
          "commitNameOld": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
          "commitAuthorOld": "Tsuyoshi Ozawa",
          "daysBetweenCommits": 2.24,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,11 @@\n   private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n-      Collection\u003cString\u003e candidate, boolean printError) throws IOException {\n+      Collection\u003cString\u003e candidate) throws IOException {\n     List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n     List\u003cString\u003e filePattern \u003d options.getLogTypes();\n     for (String file : candidate) {\n       if (isFileMatching(file, filePattern)) {\n         matchedFiles.add(file);\n       }\n     }\n-    if (matchedFiles.isEmpty()) {\n-      if (printError) {\n-        System.err.println(\"Can not find any log file matching the pattern: \"\n-            + options.getLogTypes() + \" for the application: \"\n-            + options.getAppId());\n-      }\n-    }\n     return matchedFiles;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n      Collection\u003cString\u003e candidate) throws IOException {\n    List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n    List\u003cString\u003e filePattern \u003d options.getLogTypes();\n    for (String file : candidate) {\n      if (isFileMatching(file, filePattern)) {\n        matchedFiles.add(file);\n      }\n    }\n    return matchedFiles;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,18 @@\n+  private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n+      Collection\u003cString\u003e candidate, boolean printError) throws IOException {\n+    List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n+    List\u003cString\u003e filePattern \u003d options.getLogTypes();\n+    for (String file : candidate) {\n+      if (isFileMatching(file, filePattern)) {\n+        matchedFiles.add(file);\n+      }\n+    }\n+    if (matchedFiles.isEmpty()) {\n+      if (printError) {\n+        System.err.println(\"Can not find any log file matching the pattern: \"\n+            + options.getLogTypes() + \" for the application: \"\n+            + options.getAppId());\n+      }\n+    }\n+    return matchedFiles;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cString\u003e getMatchedLogFiles(ContainerLogsRequest options,\n      Collection\u003cString\u003e candidate, boolean printError) throws IOException {\n    List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n    List\u003cString\u003e filePattern \u003d options.getLogTypes();\n    for (String file : candidate) {\n      if (isFileMatching(file, filePattern)) {\n        matchedFiles.add(file);\n      }\n    }\n    if (matchedFiles.isEmpty()) {\n      if (printError) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + options.getLogTypes() + \" for the application: \"\n            + options.getAppId());\n      }\n    }\n    return matchedFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}