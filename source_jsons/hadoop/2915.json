{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockTokenIdentifier.java",
  "functionName": "readFieldsLegacy",
  "functionId": "readFieldsLegacy___in-DataInput",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenIdentifier.java",
  "functionStartLine": 239,
  "functionEndLine": 279,
  "numCommitsSeen": 8,
  "timeTaken": 3064,
  "changeHistory": [
    "f531a4a487c9133bce20d08e09da4d4a35bff13d",
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1",
    "a3954ccab148bddc290cb96528e63ff19799bcc9",
    "2f73396b5901fd5fe29f6cd76fc1b3134b854b37",
    "4ed33e9ca3d85568e3904753a3ef61a85f801838"
  ],
  "changeHistoryShort": {
    "f531a4a487c9133bce20d08e09da4d4a35bff13d": "Ybodychange",
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1": "Ybodychange",
    "a3954ccab148bddc290cb96528e63ff19799bcc9": "Ybodychange",
    "2f73396b5901fd5fe29f6cd76fc1b3134b854b37": "Ybodychange",
    "4ed33e9ca3d85568e3904753a3ef61a85f801838": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f531a4a487c9133bce20d08e09da4d4a35bff13d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15191. EOF when reading legacy buffer in BlockTokenIdentifier. Contributed by Steven Rand.\n",
      "commitDate": "27/03/20 12:55 PM",
      "commitName": "f531a4a487c9133bce20d08e09da4d4a35bff13d",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "08/10/19 11:56 AM",
      "commitNameOld": "72ae371e7a6695f45f0d9cea5ae9aae83941d360",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 171.04,
      "commitsBetweenForRepo": 606,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n   void readFieldsLegacy(DataInput in) throws IOException {\n     expiryDate \u003d WritableUtils.readVLong(in);\n     keyId \u003d WritableUtils.readVInt(in);\n     userId \u003d WritableUtils.readString(in);\n     blockPoolId \u003d WritableUtils.readString(in);\n     blockId \u003d WritableUtils.readVLong(in);\n     int length \u003d WritableUtils.readVIntInRange(in, 0,\n         AccessMode.class.getEnumConstants().length);\n     for (int i \u003d 0; i \u003c length; i++) {\n       modes.add(WritableUtils.readEnum(in, AccessMode.class));\n     }\n \n-    length \u003d WritableUtils.readVInt(in);\n-    StorageType[] readStorageTypes \u003d new StorageType[length];\n-    for (int i \u003d 0; i \u003c length; i++) {\n-      readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n-    }\n-    storageTypes \u003d readStorageTypes;\n-\n-    length \u003d WritableUtils.readVInt(in);\n-    String[] readStorageIds \u003d new String[length];\n-    for (int i \u003d 0; i \u003c length; i++) {\n-      readStorageIds[i] \u003d WritableUtils.readString(in);\n-    }\n-    storageIds \u003d readStorageIds;\n-\n-    useProto \u003d false;\n-\n     try {\n+      length \u003d WritableUtils.readVInt(in);\n+      StorageType[] readStorageTypes \u003d new StorageType[length];\n+      for (int i \u003d 0; i \u003c length; i++) {\n+        readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n+      }\n+      storageTypes \u003d readStorageTypes;\n+\n+      length \u003d WritableUtils.readVInt(in);\n+      String[] readStorageIds \u003d new String[length];\n+      for (int i \u003d 0; i \u003c length; i++) {\n+        readStorageIds[i] \u003d WritableUtils.readString(in);\n+      }\n+      storageIds \u003d readStorageIds;\n+\n       int handshakeMsgLen \u003d WritableUtils.readVInt(in);\n       if (handshakeMsgLen !\u003d 0) {\n         handshakeMsg \u003d new byte[handshakeMsgLen];\n         in.readFully(handshakeMsg);\n       }\n     } catch (EOFException eof) {\n-\n+      // If the NameNode is on a version before HDFS-6708 and HDFS-9807, then\n+      // the block token won\u0027t have storage types or storage IDs. For backward\n+      // compatibility, swallow the EOF that we get when we try to read those\n+      // fields. Same for the handshake secret field from HDFS-14611.\n     }\n+\n+    useProto \u003d false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void readFieldsLegacy(DataInput in) throws IOException {\n    expiryDate \u003d WritableUtils.readVLong(in);\n    keyId \u003d WritableUtils.readVInt(in);\n    userId \u003d WritableUtils.readString(in);\n    blockPoolId \u003d WritableUtils.readString(in);\n    blockId \u003d WritableUtils.readVLong(in);\n    int length \u003d WritableUtils.readVIntInRange(in, 0,\n        AccessMode.class.getEnumConstants().length);\n    for (int i \u003d 0; i \u003c length; i++) {\n      modes.add(WritableUtils.readEnum(in, AccessMode.class));\n    }\n\n    try {\n      length \u003d WritableUtils.readVInt(in);\n      StorageType[] readStorageTypes \u003d new StorageType[length];\n      for (int i \u003d 0; i \u003c length; i++) {\n        readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n      }\n      storageTypes \u003d readStorageTypes;\n\n      length \u003d WritableUtils.readVInt(in);\n      String[] readStorageIds \u003d new String[length];\n      for (int i \u003d 0; i \u003c length; i++) {\n        readStorageIds[i] \u003d WritableUtils.readString(in);\n      }\n      storageIds \u003d readStorageIds;\n\n      int handshakeMsgLen \u003d WritableUtils.readVInt(in);\n      if (handshakeMsgLen !\u003d 0) {\n        handshakeMsg \u003d new byte[handshakeMsgLen];\n        in.readFully(handshakeMsg);\n      }\n    } catch (EOFException eof) {\n      // If the NameNode is on a version before HDFS-6708 and HDFS-9807, then\n      // the block token won\u0027t have storage types or storage IDs. For backward\n      // compatibility, swallow the EOF that we get when we try to read those\n      // fields. Same for the handshake secret field from HDFS-14611.\n    }\n\n    useProto \u003d false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenIdentifier.java",
      "extendedDetails": {}
    },
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14611. Move handshake secret field from Token to BlockAccessToken. Contributed by Chen Liang.\n",
      "commitDate": "11/07/19 1:23 PM",
      "commitName": "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "01/10/18 5:49 PM",
      "commitNameOld": "f6c5ef9903dba5eb268997110ef169125327c2c8",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 282.82,
      "commitsBetweenForRepo": 2103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,38 @@\n   void readFieldsLegacy(DataInput in) throws IOException {\n     expiryDate \u003d WritableUtils.readVLong(in);\n     keyId \u003d WritableUtils.readVInt(in);\n     userId \u003d WritableUtils.readString(in);\n     blockPoolId \u003d WritableUtils.readString(in);\n     blockId \u003d WritableUtils.readVLong(in);\n     int length \u003d WritableUtils.readVIntInRange(in, 0,\n         AccessMode.class.getEnumConstants().length);\n     for (int i \u003d 0; i \u003c length; i++) {\n       modes.add(WritableUtils.readEnum(in, AccessMode.class));\n     }\n \n     length \u003d WritableUtils.readVInt(in);\n     StorageType[] readStorageTypes \u003d new StorageType[length];\n     for (int i \u003d 0; i \u003c length; i++) {\n       readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n     }\n     storageTypes \u003d readStorageTypes;\n \n     length \u003d WritableUtils.readVInt(in);\n     String[] readStorageIds \u003d new String[length];\n     for (int i \u003d 0; i \u003c length; i++) {\n       readStorageIds[i] \u003d WritableUtils.readString(in);\n     }\n     storageIds \u003d readStorageIds;\n \n     useProto \u003d false;\n+\n+    try {\n+      int handshakeMsgLen \u003d WritableUtils.readVInt(in);\n+      if (handshakeMsgLen !\u003d 0) {\n+        handshakeMsg \u003d new byte[handshakeMsgLen];\n+        in.readFully(handshakeMsg);\n+      }\n+    } catch (EOFException eof) {\n+\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void readFieldsLegacy(DataInput in) throws IOException {\n    expiryDate \u003d WritableUtils.readVLong(in);\n    keyId \u003d WritableUtils.readVInt(in);\n    userId \u003d WritableUtils.readString(in);\n    blockPoolId \u003d WritableUtils.readString(in);\n    blockId \u003d WritableUtils.readVLong(in);\n    int length \u003d WritableUtils.readVIntInRange(in, 0,\n        AccessMode.class.getEnumConstants().length);\n    for (int i \u003d 0; i \u003c length; i++) {\n      modes.add(WritableUtils.readEnum(in, AccessMode.class));\n    }\n\n    length \u003d WritableUtils.readVInt(in);\n    StorageType[] readStorageTypes \u003d new StorageType[length];\n    for (int i \u003d 0; i \u003c length; i++) {\n      readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n    }\n    storageTypes \u003d readStorageTypes;\n\n    length \u003d WritableUtils.readVInt(in);\n    String[] readStorageIds \u003d new String[length];\n    for (int i \u003d 0; i \u003c length; i++) {\n      readStorageIds[i] \u003d WritableUtils.readString(in);\n    }\n    storageIds \u003d readStorageIds;\n\n    useProto \u003d false;\n\n    try {\n      int handshakeMsgLen \u003d WritableUtils.readVInt(in);\n      if (handshakeMsgLen !\u003d 0) {\n        handshakeMsg \u003d new byte[handshakeMsgLen];\n        in.readFully(handshakeMsg);\n      }\n    } catch (EOFException eof) {\n\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenIdentifier.java",
      "extendedDetails": {}
    },
    "a3954ccab148bddc290cb96528e63ff19799bcc9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9807. Add an optional StorageID to writes. Contributed by Ewan Higgs\n",
      "commitDate": "05/05/17 12:01 PM",
      "commitName": "a3954ccab148bddc290cb96528e63ff19799bcc9",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "25/04/17 11:57 PM",
      "commitNameOld": "2f73396b5901fd5fe29f6cd76fc1b3134b854b37",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 9.5,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,28 @@\n   void readFieldsLegacy(DataInput in) throws IOException {\n     expiryDate \u003d WritableUtils.readVLong(in);\n     keyId \u003d WritableUtils.readVInt(in);\n     userId \u003d WritableUtils.readString(in);\n     blockPoolId \u003d WritableUtils.readString(in);\n     blockId \u003d WritableUtils.readVLong(in);\n     int length \u003d WritableUtils.readVIntInRange(in, 0,\n         AccessMode.class.getEnumConstants().length);\n     for (int i \u003d 0; i \u003c length; i++) {\n       modes.add(WritableUtils.readEnum(in, AccessMode.class));\n     }\n \n     length \u003d WritableUtils.readVInt(in);\n     StorageType[] readStorageTypes \u003d new StorageType[length];\n     for (int i \u003d 0; i \u003c length; i++) {\n       readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n     }\n     storageTypes \u003d readStorageTypes;\n+\n+    length \u003d WritableUtils.readVInt(in);\n+    String[] readStorageIds \u003d new String[length];\n+    for (int i \u003d 0; i \u003c length; i++) {\n+      readStorageIds[i] \u003d WritableUtils.readString(in);\n+    }\n+    storageIds \u003d readStorageIds;\n+\n     useProto \u003d false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void readFieldsLegacy(DataInput in) throws IOException {\n    expiryDate \u003d WritableUtils.readVLong(in);\n    keyId \u003d WritableUtils.readVInt(in);\n    userId \u003d WritableUtils.readString(in);\n    blockPoolId \u003d WritableUtils.readString(in);\n    blockId \u003d WritableUtils.readVLong(in);\n    int length \u003d WritableUtils.readVIntInRange(in, 0,\n        AccessMode.class.getEnumConstants().length);\n    for (int i \u003d 0; i \u003c length; i++) {\n      modes.add(WritableUtils.readEnum(in, AccessMode.class));\n    }\n\n    length \u003d WritableUtils.readVInt(in);\n    StorageType[] readStorageTypes \u003d new StorageType[length];\n    for (int i \u003d 0; i \u003c length; i++) {\n      readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n    }\n    storageTypes \u003d readStorageTypes;\n\n    length \u003d WritableUtils.readVInt(in);\n    String[] readStorageIds \u003d new String[length];\n    for (int i \u003d 0; i \u003c length; i++) {\n      readStorageIds[i] \u003d WritableUtils.readString(in);\n    }\n    storageIds \u003d readStorageIds;\n\n    useProto \u003d false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenIdentifier.java",
      "extendedDetails": {}
    },
    "2f73396b5901fd5fe29f6cd76fc1b3134b854b37": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6708. StorageType should be encoded in the block token. Contributed by Ewan Higgs\n",
      "commitDate": "25/04/17 11:57 PM",
      "commitName": "2f73396b5901fd5fe29f6cd76fc1b3134b854b37",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "13/02/17 11:29 AM",
      "commitNameOld": "4ed33e9ca3d85568e3904753a3ef61a85f801838",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 71.48,
      "commitsBetweenForRepo": 422,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,20 @@\n   void readFieldsLegacy(DataInput in) throws IOException {\n     expiryDate \u003d WritableUtils.readVLong(in);\n     keyId \u003d WritableUtils.readVInt(in);\n     userId \u003d WritableUtils.readString(in);\n     blockPoolId \u003d WritableUtils.readString(in);\n     blockId \u003d WritableUtils.readVLong(in);\n     int length \u003d WritableUtils.readVIntInRange(in, 0,\n         AccessMode.class.getEnumConstants().length);\n     for (int i \u003d 0; i \u003c length; i++) {\n       modes.add(WritableUtils.readEnum(in, AccessMode.class));\n     }\n+\n+    length \u003d WritableUtils.readVInt(in);\n+    StorageType[] readStorageTypes \u003d new StorageType[length];\n+    for (int i \u003d 0; i \u003c length; i++) {\n+      readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n+    }\n+    storageTypes \u003d readStorageTypes;\n     useProto \u003d false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void readFieldsLegacy(DataInput in) throws IOException {\n    expiryDate \u003d WritableUtils.readVLong(in);\n    keyId \u003d WritableUtils.readVInt(in);\n    userId \u003d WritableUtils.readString(in);\n    blockPoolId \u003d WritableUtils.readString(in);\n    blockId \u003d WritableUtils.readVLong(in);\n    int length \u003d WritableUtils.readVIntInRange(in, 0,\n        AccessMode.class.getEnumConstants().length);\n    for (int i \u003d 0; i \u003c length; i++) {\n      modes.add(WritableUtils.readEnum(in, AccessMode.class));\n    }\n\n    length \u003d WritableUtils.readVInt(in);\n    StorageType[] readStorageTypes \u003d new StorageType[length];\n    for (int i \u003d 0; i \u003c length; i++) {\n      readStorageTypes[i] \u003d WritableUtils.readEnum(in, StorageType.class);\n    }\n    storageTypes \u003d readStorageTypes;\n    useProto \u003d false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenIdentifier.java",
      "extendedDetails": {}
    },
    "4ed33e9ca3d85568e3904753a3ef61a85f801838": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11026. Convert BlockTokenIdentifier to use Protobuf. Contributed by Ewan Higgs.\n",
      "commitDate": "13/02/17 11:29 AM",
      "commitName": "4ed33e9ca3d85568e3904753a3ef61a85f801838",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,13 @@\n+  void readFieldsLegacy(DataInput in) throws IOException {\n+    expiryDate \u003d WritableUtils.readVLong(in);\n+    keyId \u003d WritableUtils.readVInt(in);\n+    userId \u003d WritableUtils.readString(in);\n+    blockPoolId \u003d WritableUtils.readString(in);\n+    blockId \u003d WritableUtils.readVLong(in);\n+    int length \u003d WritableUtils.readVIntInRange(in, 0,\n+        AccessMode.class.getEnumConstants().length);\n+    for (int i \u003d 0; i \u003c length; i++) {\n+      modes.add(WritableUtils.readEnum(in, AccessMode.class));\n+    }\n+    useProto \u003d false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void readFieldsLegacy(DataInput in) throws IOException {\n    expiryDate \u003d WritableUtils.readVLong(in);\n    keyId \u003d WritableUtils.readVInt(in);\n    userId \u003d WritableUtils.readString(in);\n    blockPoolId \u003d WritableUtils.readString(in);\n    blockId \u003d WritableUtils.readVLong(in);\n    int length \u003d WritableUtils.readVIntInRange(in, 0,\n        AccessMode.class.getEnumConstants().length);\n    for (int i \u003d 0; i \u003c length; i++) {\n      modes.add(WritableUtils.readEnum(in, AccessMode.class));\n    }\n    useProto \u003d false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/security/token/block/BlockTokenIdentifier.java"
    }
  }
}