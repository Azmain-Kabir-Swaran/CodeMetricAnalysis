{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeRuntime.java",
  "functionName": "reportStatus",
  "functionId": "reportStatus___reporter-TaskReporter",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/NativeRuntime.java",
  "functionStartLine": 117,
  "functionEndLine": 146,
  "numCommitsSeen": 7,
  "timeTaken": 702,
  "changeHistory": [
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139"
  ],
  "changeHistoryShort": {
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139": {
      "type": "Yintroduced",
      "commitMessage": "Import initial code for MAPREDUCE-2841 (native output collector)\n\nContributed by:\n  Binglin Chang\n  Yang Dong\n  Sean Zhong\n  Manu Zhang\n  Zhongliang Zhu\n  Vincent Wang\n  Yan Dong\n  Cheng Lian\n  Xusen Yin\n  Fangqin Dai\n  Jiang Weihua\n  Gansha Wu\n  Avik Dey\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1611413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 10:44 AM",
      "commitName": "b2551c06a09fb80a9e69adbc01c4c34b93ad0139",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,30 @@\n+  public static void reportStatus(TaskReporter reporter) throws IOException {\n+    assertNativeLibraryLoaded();\n+    synchronized (reporter) {\n+      final byte[] statusBytes \u003d JNIUpdateStatus();\n+      final DataInputBuffer ib \u003d new DataInputBuffer();\n+      ib.reset(statusBytes, statusBytes.length);\n+      final FloatWritable progress \u003d new FloatWritable();\n+      progress.readFields(ib);\n+      reporter.setProgress(progress.get());\n+      final Text status \u003d new Text();\n+      status.readFields(ib);\n+      if (status.getLength() \u003e 0) {\n+        reporter.setStatus(status.toString());\n+      }\n+      final IntWritable numCounters \u003d new IntWritable();\n+      numCounters.readFields(ib);\n+      if (numCounters.get() \u003d\u003d 0) {\n+        return;\n+      }\n+      final Text group \u003d new Text();\n+      final Text name \u003d new Text();\n+      final LongWritable amount \u003d new LongWritable();\n+      for (int i \u003d 0; i \u003c numCounters.get(); i++) {\n+        group.readFields(ib);\n+        name.readFields(ib);\n+        amount.readFields(ib);\n+        reporter.incrCounter(group.toString(), name.toString(), amount.get());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void reportStatus(TaskReporter reporter) throws IOException {\n    assertNativeLibraryLoaded();\n    synchronized (reporter) {\n      final byte[] statusBytes \u003d JNIUpdateStatus();\n      final DataInputBuffer ib \u003d new DataInputBuffer();\n      ib.reset(statusBytes, statusBytes.length);\n      final FloatWritable progress \u003d new FloatWritable();\n      progress.readFields(ib);\n      reporter.setProgress(progress.get());\n      final Text status \u003d new Text();\n      status.readFields(ib);\n      if (status.getLength() \u003e 0) {\n        reporter.setStatus(status.toString());\n      }\n      final IntWritable numCounters \u003d new IntWritable();\n      numCounters.readFields(ib);\n      if (numCounters.get() \u003d\u003d 0) {\n        return;\n      }\n      final Text group \u003d new Text();\n      final Text name \u003d new Text();\n      final LongWritable amount \u003d new LongWritable();\n      for (int i \u003d 0; i \u003c numCounters.get(); i++) {\n        group.readFields(ib);\n        name.readFields(ib);\n        amount.readFields(ib);\n        reporter.incrCounter(group.toString(), name.toString(), amount.get());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/NativeRuntime.java"
    }
  }
}