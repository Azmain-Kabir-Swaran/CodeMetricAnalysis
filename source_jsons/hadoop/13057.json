{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyWithNodeGroup.java",
  "functionName": "chooseLocalNodeGroup",
  "functionId": "chooseLocalNodeGroup___clusterMap-NetworkTopologyWithNodeGroup__localMachine-Node__excludedNodes-Set__Node____blocksize-long__maxNodesPerRack-int__results-List__DatanodeStorageInfo____avoidStaleNodes-boolean__storageTypes-EnumMap__StorageType,Integer__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
  "functionStartLine": 233,
  "functionEndLine": 268,
  "numCommitsSeen": 60,
  "timeTaken": 3530,
  "changeHistory": [
    "c7156503856e24faf844c5c647157b310d8b537f",
    "e08701ec71f7c10d8f15122d90c35f9f22e40837",
    "abf09f090f77a7e54e331b7a07354e7926b60dc9",
    "f98c343c7f11c165bcc0f7cdbaa2a3998b12cfd2",
    "d01caeee77f4ea00173db7f20a945f6cbfd0c9f7",
    "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7",
    "4d0cab2729e2bdb1742b62dba69bd30ab69c868e"
  ],
  "changeHistoryShort": {
    "c7156503856e24faf844c5c647157b310d8b537f": "Ybodychange",
    "e08701ec71f7c10d8f15122d90c35f9f22e40837": "Ymultichange(Yparameterchange,Ybodychange)",
    "abf09f090f77a7e54e331b7a07354e7926b60dc9": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "f98c343c7f11c165bcc0f7cdbaa2a3998b12cfd2": "Yparameterchange",
    "d01caeee77f4ea00173db7f20a945f6cbfd0c9f7": "Ymultichange(Yparameterchange,Ybodychange)",
    "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7": "Ymultichange(Yparameterchange,Ybodychange)",
    "4d0cab2729e2bdb1742b62dba69bd30ab69c868e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c7156503856e24faf844c5c647157b310d8b537f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9036. In BlockPlacementPolicyWithNodeGroup#chooseLocalStorage , random node is selected eventhough fallbackToLocalRack is true. (Contributed by J.Andreina)\n",
      "commitDate": "12/09/15 5:10 AM",
      "commitName": "c7156503856e24faf844c5c647157b310d8b537f",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "20/08/15 5:07 AM",
      "commitNameOld": "80a29906bcd718bbba223fa099e523281d9f3369",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 23.0,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,36 @@\n   private DatanodeStorageInfo chooseLocalNodeGroup(\n       NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n       Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n       List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n       EnumMap\u003cStorageType, Integer\u003e storageTypes) throws\n       NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n       return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n           maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n           excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n           storageTypes);\n     } catch (NotEnoughReplicasException e1) {\n       final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n               avoidStaleNodes, storageTypes);\n         } catch(NotEnoughReplicasException e2) {\n-          //otherwise randomly choose one from the network\n-          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-              maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n+          //otherwise return null\n+          return null;\n         }\n       } else {\n-        //otherwise randomly choose one from the network\n-        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-            maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n+        //otherwise return null\n+        return null;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeStorageInfo chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      EnumMap\u003cStorageType, Integer\u003e storageTypes) throws\n      NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n          maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n          storageTypes);\n    } catch (NotEnoughReplicasException e1) {\n      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes, storageTypes);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise return null\n          return null;\n        }\n      } else {\n        //otherwise return null\n        return null;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
      "extendedDetails": {}
    },
    "e08701ec71f7c10d8f15122d90c35f9f22e40837": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6961. Archival Storage: BlockPlacementPolicy#chooseTarget should check each valid storage type in each choosing round.\n",
      "commitDate": "04/09/14 2:19 PM",
      "commitName": "e08701ec71f7c10d8f15122d90c35f9f22e40837",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6961. Archival Storage: BlockPlacementPolicy#chooseTarget should check each valid storage type in each choosing round.\n",
          "commitDate": "04/09/14 2:19 PM",
          "commitName": "e08701ec71f7c10d8f15122d90c35f9f22e40837",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/07/14 4:21 PM",
          "commitNameOld": "44d9bb26d640ca5c1de651563c7993b4ecd6b653",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 44.92,
          "commitsBetweenForRepo": 367,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n   private DatanodeStorageInfo chooseLocalNodeGroup(\n       NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n       Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n       List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n-      StorageType storageType) throws NotEnoughReplicasException {\n+      EnumMap\u003cStorageType, Integer\u003e storageTypes) throws\n+      NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n       return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-          maxNodesPerRack, results, avoidStaleNodes, storageType);\n+          maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n           excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n-          storageType);\n+          storageTypes);\n     } catch (NotEnoughReplicasException e1) {\n       final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n-              avoidStaleNodes, storageType);\n+              avoidStaleNodes, storageTypes);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n           return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-              maxNodesPerRack, results, avoidStaleNodes, storageType);\n+              maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n         return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-            maxNodesPerRack, results, avoidStaleNodes, storageType);\n+            maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeStorageInfo chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      EnumMap\u003cStorageType, Integer\u003e storageTypes) throws\n      NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n          maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n          storageTypes);\n    } catch (NotEnoughReplicasException e1) {\n      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes, storageTypes);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {
            "oldValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-Node, excludedNodes-Set\u003cNode\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeStorageInfo\u003e, avoidStaleNodes-boolean, storageType-StorageType]",
            "newValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-Node, excludedNodes-Set\u003cNode\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeStorageInfo\u003e, avoidStaleNodes-boolean, storageTypes-EnumMap\u003cStorageType,Integer\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6961. Archival Storage: BlockPlacementPolicy#chooseTarget should check each valid storage type in each choosing round.\n",
          "commitDate": "04/09/14 2:19 PM",
          "commitName": "e08701ec71f7c10d8f15122d90c35f9f22e40837",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/07/14 4:21 PM",
          "commitNameOld": "44d9bb26d640ca5c1de651563c7993b4ecd6b653",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 44.92,
          "commitsBetweenForRepo": 367,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n   private DatanodeStorageInfo chooseLocalNodeGroup(\n       NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n       Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n       List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n-      StorageType storageType) throws NotEnoughReplicasException {\n+      EnumMap\u003cStorageType, Integer\u003e storageTypes) throws\n+      NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n       return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-          maxNodesPerRack, results, avoidStaleNodes, storageType);\n+          maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n           excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n-          storageType);\n+          storageTypes);\n     } catch (NotEnoughReplicasException e1) {\n       final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n-              avoidStaleNodes, storageType);\n+              avoidStaleNodes, storageTypes);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n           return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-              maxNodesPerRack, results, avoidStaleNodes, storageType);\n+              maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n         return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-            maxNodesPerRack, results, avoidStaleNodes, storageType);\n+            maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeStorageInfo chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      EnumMap\u003cStorageType, Integer\u003e storageTypes) throws\n      NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n          maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n          storageTypes);\n    } catch (NotEnoughReplicasException e1) {\n      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes, storageTypes);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes, storageTypes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {}
        }
      ]
    },
    "abf09f090f77a7e54e331b7a07354e7926b60dc9": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-4990. Change BlockPlacementPolicy to choose storages instead of datanodes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1524444 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/13 8:12 AM",
      "commitName": "abf09f090f77a7e54e331b7a07354e7926b60dc9",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4990. Change BlockPlacementPolicy to choose storages instead of datanodes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1524444 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 8:12 AM",
          "commitName": "abf09f090f77a7e54e331b7a07354e7926b60dc9",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/09/13 7:38 PM",
          "commitNameOld": "f98c343c7f11c165bcc0f7cdbaa2a3998b12cfd2",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.52,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,37 @@\n-  private DatanodeDescriptor chooseLocalNodeGroup(\n+  private DatanodeStorageInfo chooseLocalNodeGroup(\n       NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n       Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n-      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n-      throws NotEnoughReplicasException {\n+      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n+      StorageType storageType) throws NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n-      return chooseRandom(NodeBase.ROOT, excludedNodes, \n-      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n+      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n+          maxNodesPerRack, results, avoidStaleNodes, storageType);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n-          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n+          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n+          storageType);\n     } catch (NotEnoughReplicasException e1) {\n-      // find the second replica\n-      DatanodeDescriptor newLocal\u003dnull;\n-      for(DatanodeDescriptor nextNode : results) {\n-        if (nextNode !\u003d localMachine) {\n-          newLocal \u003d nextNode;\n-          break;\n-        }\n-      }\n+      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n-              avoidStaleNodes);\n+              avoidStaleNodes, storageType);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n           return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-              maxNodesPerRack, results, avoidStaleNodes);\n+              maxNodesPerRack, results, avoidStaleNodes, storageType);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n         return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-            maxNodesPerRack, results, avoidStaleNodes);\n+            maxNodesPerRack, results, avoidStaleNodes, storageType);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeStorageInfo chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      StorageType storageType) throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n          maxNodesPerRack, results, avoidStaleNodes, storageType);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n          storageType);\n    } catch (NotEnoughReplicasException e1) {\n      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes, storageType);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes, storageType);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes, storageType);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {
            "oldValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-Node, excludedNodes-Set\u003cNode\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeDescriptor\u003e, avoidStaleNodes-boolean]",
            "newValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-Node, excludedNodes-Set\u003cNode\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeStorageInfo\u003e, avoidStaleNodes-boolean, storageType-StorageType]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4990. Change BlockPlacementPolicy to choose storages instead of datanodes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1524444 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 8:12 AM",
          "commitName": "abf09f090f77a7e54e331b7a07354e7926b60dc9",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/09/13 7:38 PM",
          "commitNameOld": "f98c343c7f11c165bcc0f7cdbaa2a3998b12cfd2",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.52,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,37 @@\n-  private DatanodeDescriptor chooseLocalNodeGroup(\n+  private DatanodeStorageInfo chooseLocalNodeGroup(\n       NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n       Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n-      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n-      throws NotEnoughReplicasException {\n+      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n+      StorageType storageType) throws NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n-      return chooseRandom(NodeBase.ROOT, excludedNodes, \n-      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n+      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n+          maxNodesPerRack, results, avoidStaleNodes, storageType);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n-          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n+          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n+          storageType);\n     } catch (NotEnoughReplicasException e1) {\n-      // find the second replica\n-      DatanodeDescriptor newLocal\u003dnull;\n-      for(DatanodeDescriptor nextNode : results) {\n-        if (nextNode !\u003d localMachine) {\n-          newLocal \u003d nextNode;\n-          break;\n-        }\n-      }\n+      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n-              avoidStaleNodes);\n+              avoidStaleNodes, storageType);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n           return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-              maxNodesPerRack, results, avoidStaleNodes);\n+              maxNodesPerRack, results, avoidStaleNodes, storageType);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n         return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-            maxNodesPerRack, results, avoidStaleNodes);\n+            maxNodesPerRack, results, avoidStaleNodes, storageType);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeStorageInfo chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      StorageType storageType) throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n          maxNodesPerRack, results, avoidStaleNodes, storageType);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n          storageType);\n    } catch (NotEnoughReplicasException e1) {\n      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes, storageType);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes, storageType);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes, storageType);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {
            "oldValue": "DatanodeDescriptor",
            "newValue": "DatanodeStorageInfo"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4990. Change BlockPlacementPolicy to choose storages instead of datanodes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1524444 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 8:12 AM",
          "commitName": "abf09f090f77a7e54e331b7a07354e7926b60dc9",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/09/13 7:38 PM",
          "commitNameOld": "f98c343c7f11c165bcc0f7cdbaa2a3998b12cfd2",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.52,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,37 @@\n-  private DatanodeDescriptor chooseLocalNodeGroup(\n+  private DatanodeStorageInfo chooseLocalNodeGroup(\n       NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n       Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n-      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n-      throws NotEnoughReplicasException {\n+      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n+      StorageType storageType) throws NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n-      return chooseRandom(NodeBase.ROOT, excludedNodes, \n-      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n+      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n+          maxNodesPerRack, results, avoidStaleNodes, storageType);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n-          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n+          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n+          storageType);\n     } catch (NotEnoughReplicasException e1) {\n-      // find the second replica\n-      DatanodeDescriptor newLocal\u003dnull;\n-      for(DatanodeDescriptor nextNode : results) {\n-        if (nextNode !\u003d localMachine) {\n-          newLocal \u003d nextNode;\n-          break;\n-        }\n-      }\n+      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n-              avoidStaleNodes);\n+              avoidStaleNodes, storageType);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n           return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-              maxNodesPerRack, results, avoidStaleNodes);\n+              maxNodesPerRack, results, avoidStaleNodes, storageType);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n         return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n-            maxNodesPerRack, results, avoidStaleNodes);\n+            maxNodesPerRack, results, avoidStaleNodes, storageType);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeStorageInfo chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      StorageType storageType) throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n          maxNodesPerRack, results, avoidStaleNodes, storageType);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes,\n          storageType);\n    } catch (NotEnoughReplicasException e1) {\n      final DatanodeDescriptor newLocal \u003d secondNode(localMachine, results);\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes, storageType);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes, storageType);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes, storageType);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {}
        }
      ]
    },
    "f98c343c7f11c165bcc0f7cdbaa2a3998b12cfd2": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5207. In BlockPlacementPolicy.chooseTarget(..), change the writer and the excludedNodes parameter types respectively to Node and Set.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523875 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/09/13 7:38 PM",
      "commitName": "f98c343c7f11c165bcc0f7cdbaa2a3998b12cfd2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/09/13 9:15 PM",
      "commitNameOld": "d01caeee77f4ea00173db7f20a945f6cbfd0c9f7",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private DatanodeDescriptor chooseLocalNodeGroup(\n-      NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n-      Map\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n+      NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n+      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n       List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n       throws NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n       return chooseRandom(NodeBase.ROOT, excludedNodes, \n       blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n           excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     } catch (NotEnoughReplicasException e1) {\n       // find the second replica\n       DatanodeDescriptor newLocal\u003dnull;\n       for(DatanodeDescriptor nextNode : results) {\n         if (nextNode !\u003d localMachine) {\n           newLocal \u003d nextNode;\n           break;\n         }\n       }\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n               avoidStaleNodes);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n           return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n               maxNodesPerRack, results, avoidStaleNodes);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n         return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n             maxNodesPerRack, results, avoidStaleNodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeDescriptor chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, Node localMachine,\n      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n      throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, \n      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    } catch (NotEnoughReplicasException e1) {\n      // find the second replica\n      DatanodeDescriptor newLocal\u003dnull;\n      for(DatanodeDescriptor nextNode : results) {\n        if (nextNode !\u003d localMachine) {\n          newLocal \u003d nextNode;\n          break;\n        }\n      }\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
      "extendedDetails": {
        "oldValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-DatanodeDescriptor, excludedNodes-Map\u003cNode,Node\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeDescriptor\u003e, avoidStaleNodes-boolean]",
        "newValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-Node, excludedNodes-Set\u003cNode\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeDescriptor\u003e, avoidStaleNodes-boolean]"
      }
    },
    "d01caeee77f4ea00173db7f20a945f6cbfd0c9f7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5188. In BlockPlacementPolicy, reduce the number of chooseTarget(..) methods; replace HashMap with Map in parameter declarations and cleanup some related code.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523400 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/13 9:15 PM",
      "commitName": "d01caeee77f4ea00173db7f20a945f6cbfd0c9f7",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5188. In BlockPlacementPolicy, reduce the number of chooseTarget(..) methods; replace HashMap with Map in parameter declarations and cleanup some related code.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523400 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/09/13 9:15 PM",
          "commitName": "d01caeee77f4ea00173db7f20a945f6cbfd0c9f7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/08/13 9:52 PM",
          "commitNameOld": "0182ea16d359b41c065bf9cbf740f8b23f6381e3",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 30.97,
          "commitsBetweenForRepo": 162,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n   private DatanodeDescriptor chooseLocalNodeGroup(\n       NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n-      HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n+      Map\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n       List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n       throws NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n       return chooseRandom(NodeBase.ROOT, excludedNodes, \n       blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n           excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     } catch (NotEnoughReplicasException e1) {\n       // find the second replica\n       DatanodeDescriptor newLocal\u003dnull;\n-      for(Iterator\u003cDatanodeDescriptor\u003e iter\u003dresults.iterator();\n-        iter.hasNext();) {\n-        DatanodeDescriptor nextNode \u003d iter.next();\n+      for(DatanodeDescriptor nextNode : results) {\n         if (nextNode !\u003d localMachine) {\n           newLocal \u003d nextNode;\n           break;\n         }\n       }\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n               avoidStaleNodes);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n           return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n               maxNodesPerRack, results, avoidStaleNodes);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n         return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n             maxNodesPerRack, results, avoidStaleNodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeDescriptor chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n      Map\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n      throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, \n      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    } catch (NotEnoughReplicasException e1) {\n      // find the second replica\n      DatanodeDescriptor newLocal\u003dnull;\n      for(DatanodeDescriptor nextNode : results) {\n        if (nextNode !\u003d localMachine) {\n          newLocal \u003d nextNode;\n          break;\n        }\n      }\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {
            "oldValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-DatanodeDescriptor, excludedNodes-HashMap\u003cNode,Node\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeDescriptor\u003e, avoidStaleNodes-boolean]",
            "newValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-DatanodeDescriptor, excludedNodes-Map\u003cNode,Node\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeDescriptor\u003e, avoidStaleNodes-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5188. In BlockPlacementPolicy, reduce the number of chooseTarget(..) methods; replace HashMap with Map in parameter declarations and cleanup some related code.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523400 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/09/13 9:15 PM",
          "commitName": "d01caeee77f4ea00173db7f20a945f6cbfd0c9f7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/08/13 9:52 PM",
          "commitNameOld": "0182ea16d359b41c065bf9cbf740f8b23f6381e3",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 30.97,
          "commitsBetweenForRepo": 162,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n   private DatanodeDescriptor chooseLocalNodeGroup(\n       NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n-      HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n+      Map\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n       List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n       throws NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n       return chooseRandom(NodeBase.ROOT, excludedNodes, \n       blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     }\n \n     // choose one from the local node group\n     try {\n       return chooseRandom(\n           clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n           excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     } catch (NotEnoughReplicasException e1) {\n       // find the second replica\n       DatanodeDescriptor newLocal\u003dnull;\n-      for(Iterator\u003cDatanodeDescriptor\u003e iter\u003dresults.iterator();\n-        iter.hasNext();) {\n-        DatanodeDescriptor nextNode \u003d iter.next();\n+      for(DatanodeDescriptor nextNode : results) {\n         if (nextNode !\u003d localMachine) {\n           newLocal \u003d nextNode;\n           break;\n         }\n       }\n       if (newLocal !\u003d null) {\n         try {\n           return chooseRandom(\n               clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n               excludedNodes, blocksize, maxNodesPerRack, results,\n               avoidStaleNodes);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n           return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n               maxNodesPerRack, results, avoidStaleNodes);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n         return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n             maxNodesPerRack, results, avoidStaleNodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeDescriptor chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n      Map\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n      throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, \n      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    } catch (NotEnoughReplicasException e1) {\n      // find the second replica\n      DatanodeDescriptor newLocal\u003dnull;\n      for(DatanodeDescriptor nextNode : results) {\n        if (nextNode !\u003d localMachine) {\n          newLocal \u003d nextNode;\n          break;\n        }\n      }\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {}
        }
      ]
    },
    "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3912. Detect and avoid stale datanodes for writes. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1397211 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/10/12 11:08 AM",
      "commitName": "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3912. Detect and avoid stale datanodes for writes. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1397211 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/10/12 11:08 AM",
          "commitName": "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "24/08/12 6:03 PM",
          "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 47.71,
          "commitsBetweenForRepo": 284,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,45 @@\n-  private DatanodeDescriptor chooseLocalNodeGroup(NetworkTopologyWithNodeGroup clusterMap,\n-      DatanodeDescriptor localMachine, HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, \n-      int maxNodesPerRack, List\u003cDatanodeDescriptor\u003e results) throws NotEnoughReplicasException {\n+  private DatanodeDescriptor chooseLocalNodeGroup(\n+      NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n+      HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n+      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n+      throws NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n       return chooseRandom(NodeBase.ROOT, excludedNodes, \n-      blocksize, maxNodesPerRack, results);\n+      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     }\n \n     // choose one from the local node group\n     try {\n-      return chooseRandom(clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n-      excludedNodes, blocksize, maxNodesPerRack, results);\n+      return chooseRandom(\n+          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n+          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     } catch (NotEnoughReplicasException e1) {\n       // find the second replica\n       DatanodeDescriptor newLocal\u003dnull;\n       for(Iterator\u003cDatanodeDescriptor\u003e iter\u003dresults.iterator();\n         iter.hasNext();) {\n         DatanodeDescriptor nextNode \u003d iter.next();\n         if (nextNode !\u003d localMachine) {\n           newLocal \u003d nextNode;\n           break;\n         }\n       }\n       if (newLocal !\u003d null) {\n         try {\n-          return chooseRandom(clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n-            excludedNodes, blocksize, maxNodesPerRack, results);\n+          return chooseRandom(\n+              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n+              excludedNodes, blocksize, maxNodesPerRack, results,\n+              avoidStaleNodes);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n-          return chooseRandom(NodeBase.ROOT, excludedNodes,\n-              blocksize, maxNodesPerRack, results);\n+          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n+              maxNodesPerRack, results, avoidStaleNodes);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n-        return chooseRandom(NodeBase.ROOT, excludedNodes,\n-            blocksize, maxNodesPerRack, results);\n+        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n+            maxNodesPerRack, results, avoidStaleNodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeDescriptor chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n      HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n      throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, \n      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    } catch (NotEnoughReplicasException e1) {\n      // find the second replica\n      DatanodeDescriptor newLocal\u003dnull;\n      for(Iterator\u003cDatanodeDescriptor\u003e iter\u003dresults.iterator();\n        iter.hasNext();) {\n        DatanodeDescriptor nextNode \u003d iter.next();\n        if (nextNode !\u003d localMachine) {\n          newLocal \u003d nextNode;\n          break;\n        }\n      }\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {
            "oldValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-DatanodeDescriptor, excludedNodes-HashMap\u003cNode,Node\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeDescriptor\u003e]",
            "newValue": "[clusterMap-NetworkTopologyWithNodeGroup, localMachine-DatanodeDescriptor, excludedNodes-HashMap\u003cNode,Node\u003e, blocksize-long, maxNodesPerRack-int, results-List\u003cDatanodeDescriptor\u003e, avoidStaleNodes-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3912. Detect and avoid stale datanodes for writes. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1397211 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/10/12 11:08 AM",
          "commitName": "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "24/08/12 6:03 PM",
          "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 47.71,
          "commitsBetweenForRepo": 284,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,45 @@\n-  private DatanodeDescriptor chooseLocalNodeGroup(NetworkTopologyWithNodeGroup clusterMap,\n-      DatanodeDescriptor localMachine, HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, \n-      int maxNodesPerRack, List\u003cDatanodeDescriptor\u003e results) throws NotEnoughReplicasException {\n+  private DatanodeDescriptor chooseLocalNodeGroup(\n+      NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n+      HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n+      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n+      throws NotEnoughReplicasException {\n     // no local machine, so choose a random machine\n     if (localMachine \u003d\u003d null) {\n       return chooseRandom(NodeBase.ROOT, excludedNodes, \n-      blocksize, maxNodesPerRack, results);\n+      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     }\n \n     // choose one from the local node group\n     try {\n-      return chooseRandom(clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n-      excludedNodes, blocksize, maxNodesPerRack, results);\n+      return chooseRandom(\n+          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n+          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n     } catch (NotEnoughReplicasException e1) {\n       // find the second replica\n       DatanodeDescriptor newLocal\u003dnull;\n       for(Iterator\u003cDatanodeDescriptor\u003e iter\u003dresults.iterator();\n         iter.hasNext();) {\n         DatanodeDescriptor nextNode \u003d iter.next();\n         if (nextNode !\u003d localMachine) {\n           newLocal \u003d nextNode;\n           break;\n         }\n       }\n       if (newLocal !\u003d null) {\n         try {\n-          return chooseRandom(clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n-            excludedNodes, blocksize, maxNodesPerRack, results);\n+          return chooseRandom(\n+              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n+              excludedNodes, blocksize, maxNodesPerRack, results,\n+              avoidStaleNodes);\n         } catch(NotEnoughReplicasException e2) {\n           //otherwise randomly choose one from the network\n-          return chooseRandom(NodeBase.ROOT, excludedNodes,\n-              blocksize, maxNodesPerRack, results);\n+          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n+              maxNodesPerRack, results, avoidStaleNodes);\n         }\n       } else {\n         //otherwise randomly choose one from the network\n-        return chooseRandom(NodeBase.ROOT, excludedNodes,\n-            blocksize, maxNodesPerRack, results);\n+        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n+            maxNodesPerRack, results, avoidStaleNodes);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DatanodeDescriptor chooseLocalNodeGroup(\n      NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine,\n      HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeDescriptor\u003e results, boolean avoidStaleNodes)\n      throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, \n      blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(\n          clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n          excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes);\n    } catch (NotEnoughReplicasException e1) {\n      // find the second replica\n      DatanodeDescriptor newLocal\u003dnull;\n      for(Iterator\u003cDatanodeDescriptor\u003e iter\u003dresults.iterator();\n        iter.hasNext();) {\n        DatanodeDescriptor nextNode \u003d iter.next();\n        if (nextNode !\u003d localMachine) {\n          newLocal \u003d nextNode;\n          break;\n        }\n      }\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(\n              clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n              excludedNodes, blocksize, maxNodesPerRack, results,\n              avoidStaleNodes);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n              maxNodesPerRack, results, avoidStaleNodes);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,\n            maxNodesPerRack, results, avoidStaleNodes);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java",
          "extendedDetails": {}
        }
      ]
    },
    "4d0cab2729e2bdb1742b62dba69bd30ab69c868e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3601. Add BlockPlacementPolicyWithNodeGroup to support block placement with 4-layer network topology.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1357442 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/07/12 6:31 PM",
      "commitName": "4d0cab2729e2bdb1742b62dba69bd30ab69c868e",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,40 @@\n+  private DatanodeDescriptor chooseLocalNodeGroup(NetworkTopologyWithNodeGroup clusterMap,\n+      DatanodeDescriptor localMachine, HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, \n+      int maxNodesPerRack, List\u003cDatanodeDescriptor\u003e results) throws NotEnoughReplicasException {\n+    // no local machine, so choose a random machine\n+    if (localMachine \u003d\u003d null) {\n+      return chooseRandom(NodeBase.ROOT, excludedNodes, \n+      blocksize, maxNodesPerRack, results);\n+    }\n+\n+    // choose one from the local node group\n+    try {\n+      return chooseRandom(clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n+      excludedNodes, blocksize, maxNodesPerRack, results);\n+    } catch (NotEnoughReplicasException e1) {\n+      // find the second replica\n+      DatanodeDescriptor newLocal\u003dnull;\n+      for(Iterator\u003cDatanodeDescriptor\u003e iter\u003dresults.iterator();\n+        iter.hasNext();) {\n+        DatanodeDescriptor nextNode \u003d iter.next();\n+        if (nextNode !\u003d localMachine) {\n+          newLocal \u003d nextNode;\n+          break;\n+        }\n+      }\n+      if (newLocal !\u003d null) {\n+        try {\n+          return chooseRandom(clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n+            excludedNodes, blocksize, maxNodesPerRack, results);\n+        } catch(NotEnoughReplicasException e2) {\n+          //otherwise randomly choose one from the network\n+          return chooseRandom(NodeBase.ROOT, excludedNodes,\n+              blocksize, maxNodesPerRack, results);\n+        }\n+      } else {\n+        //otherwise randomly choose one from the network\n+        return chooseRandom(NodeBase.ROOT, excludedNodes,\n+            blocksize, maxNodesPerRack, results);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeDescriptor chooseLocalNodeGroup(NetworkTopologyWithNodeGroup clusterMap,\n      DatanodeDescriptor localMachine, HashMap\u003cNode, Node\u003e excludedNodes, long blocksize, \n      int maxNodesPerRack, List\u003cDatanodeDescriptor\u003e results) throws NotEnoughReplicasException {\n    // no local machine, so choose a random machine\n    if (localMachine \u003d\u003d null) {\n      return chooseRandom(NodeBase.ROOT, excludedNodes, \n      blocksize, maxNodesPerRack, results);\n    }\n\n    // choose one from the local node group\n    try {\n      return chooseRandom(clusterMap.getNodeGroup(localMachine.getNetworkLocation()),\n      excludedNodes, blocksize, maxNodesPerRack, results);\n    } catch (NotEnoughReplicasException e1) {\n      // find the second replica\n      DatanodeDescriptor newLocal\u003dnull;\n      for(Iterator\u003cDatanodeDescriptor\u003e iter\u003dresults.iterator();\n        iter.hasNext();) {\n        DatanodeDescriptor nextNode \u003d iter.next();\n        if (nextNode !\u003d localMachine) {\n          newLocal \u003d nextNode;\n          break;\n        }\n      }\n      if (newLocal !\u003d null) {\n        try {\n          return chooseRandom(clusterMap.getNodeGroup(newLocal.getNetworkLocation()),\n            excludedNodes, blocksize, maxNodesPerRack, results);\n        } catch(NotEnoughReplicasException e2) {\n          //otherwise randomly choose one from the network\n          return chooseRandom(NodeBase.ROOT, excludedNodes,\n              blocksize, maxNodesPerRack, results);\n        }\n      } else {\n        //otherwise randomly choose one from the network\n        return chooseRandom(NodeBase.ROOT, excludedNodes,\n            blocksize, maxNodesPerRack, results);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithNodeGroup.java"
    }
  }
}