{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JvmPauseMonitor.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/JvmPauseMonitor.java",
  "functionStartLine": 185,
  "functionEndLine": 211,
  "numCommitsSeen": 11,
  "timeTaken": 1752,
  "changeHistory": [
    "2ec438e8f7cd77cb48fd1264781e60a48e331908",
    "a6ed4894b518351bf1b3290e725a475570a21296",
    "988639640024933448f822b48119dc832ebd2af3",
    "2eba7eb9aff5f7a1bf63ff1ebbe28d21fd37065b",
    "af6c91a80c299f87af8c42fa685448b596b7615a",
    "32076136f7734cb5ca008f10c2088ccd81c2ca99"
  ],
  "changeHistoryShort": {
    "2ec438e8f7cd77cb48fd1264781e60a48e331908": "Ybodychange",
    "a6ed4894b518351bf1b3290e725a475570a21296": "Ybodychange",
    "988639640024933448f822b48119dc832ebd2af3": "Ybodychange",
    "2eba7eb9aff5f7a1bf63ff1ebbe28d21fd37065b": "Ybodychange",
    "af6c91a80c299f87af8c42fa685448b596b7615a": "Ybodychange",
    "32076136f7734cb5ca008f10c2088ccd81c2ca99": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2ec438e8f7cd77cb48fd1264781e60a48e331908": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9655. NN should start JVM pause monitor before loading fsimage. (John Zhuge via Lei (Eddy) Xu)\n",
      "commitDate": "20/01/16 2:26 PM",
      "commitName": "2ec438e8f7cd77cb48fd1264781e60a48e331908",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "06/12/15 9:43 AM",
      "commitNameOld": "65f395226ba6cc3750a268a308e288b916f8df1e",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 45.2,
      "commitsBetweenForRepo": 252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n     public void run() {\n       StopWatch sw \u003d new StopWatch();\n       Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n+      LOG.info(\"Starting JVM pause monitor\");\n       while (shouldRun) {\n         sw.reset().start();\n         try {\n           Thread.sleep(SLEEP_INTERVAL_MS);\n         } catch (InterruptedException ie) {\n           return;\n         }\n         long extraSleepTime \u003d sw.now(TimeUnit.MILLISECONDS) - SLEEP_INTERVAL_MS;\n         Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n \n         if (extraSleepTime \u003e warnThresholdMs) {\n           ++numGcWarnThresholdExceeded;\n           LOG.warn(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         } else if (extraSleepTime \u003e infoThresholdMs) {\n           ++numGcInfoThresholdExceeded;\n           LOG.info(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         }\n         totalGcExtraSleepTime +\u003d extraSleepTime;\n         gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      StopWatch sw \u003d new StopWatch();\n      Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n      LOG.info(\"Starting JVM pause monitor\");\n      while (shouldRun) {\n        sw.reset().start();\n        try {\n          Thread.sleep(SLEEP_INTERVAL_MS);\n        } catch (InterruptedException ie) {\n          return;\n        }\n        long extraSleepTime \u003d sw.now(TimeUnit.MILLISECONDS) - SLEEP_INTERVAL_MS;\n        Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n\n        if (extraSleepTime \u003e warnThresholdMs) {\n          ++numGcWarnThresholdExceeded;\n          LOG.warn(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        } else if (extraSleepTime \u003e infoThresholdMs) {\n          ++numGcInfoThresholdExceeded;\n          LOG.info(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        }\n        totalGcExtraSleepTime +\u003d extraSleepTime;\n        gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/JvmPauseMonitor.java",
      "extendedDetails": {}
    },
    "a6ed4894b518351bf1b3290e725a475570a21296": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11032. Replace use of Guava\u0027s Stopwatch with Hadoop\u0027s StopWatch. (ozawa)\n",
      "commitDate": "07/01/15 9:51 PM",
      "commitName": "a6ed4894b518351bf1b3290e725a475570a21296",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "07/01/15 9:35 PM",
      "commitNameOld": "988639640024933448f822b48119dc832ebd2af3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     public void run() {\n-      Stopwatch sw \u003d new Stopwatch();\n+      StopWatch sw \u003d new StopWatch();\n       Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n       while (shouldRun) {\n         sw.reset().start();\n         try {\n           Thread.sleep(SLEEP_INTERVAL_MS);\n         } catch (InterruptedException ie) {\n           return;\n         }\n-        long extraSleepTime \u003d sw.elapsedMillis() - SLEEP_INTERVAL_MS;\n+        long extraSleepTime \u003d sw.now(TimeUnit.MILLISECONDS) - SLEEP_INTERVAL_MS;\n         Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n \n         if (extraSleepTime \u003e warnThresholdMs) {\n           ++numGcWarnThresholdExceeded;\n           LOG.warn(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         } else if (extraSleepTime \u003e infoThresholdMs) {\n           ++numGcInfoThresholdExceeded;\n           LOG.info(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         }\n         totalGcExtraSleepTime +\u003d extraSleepTime;\n         gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      StopWatch sw \u003d new StopWatch();\n      Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n      while (shouldRun) {\n        sw.reset().start();\n        try {\n          Thread.sleep(SLEEP_INTERVAL_MS);\n        } catch (InterruptedException ie) {\n          return;\n        }\n        long extraSleepTime \u003d sw.now(TimeUnit.MILLISECONDS) - SLEEP_INTERVAL_MS;\n        Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n\n        if (extraSleepTime \u003e warnThresholdMs) {\n          ++numGcWarnThresholdExceeded;\n          LOG.warn(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        } else if (extraSleepTime \u003e infoThresholdMs) {\n          ++numGcInfoThresholdExceeded;\n          LOG.info(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        }\n        totalGcExtraSleepTime +\u003d extraSleepTime;\n        gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/JvmPauseMonitor.java",
      "extendedDetails": {}
    },
    "988639640024933448f822b48119dc832ebd2af3": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Replace use of Guava\u0027s Stopwatch with Hadoop\u0027s StopWatch. (ozawa)\" because of missing JIRA\u0027s number.\n\nThis reverts commit 2eba7eb9aff5f7a1bf63ff1ebbe28d21fd37065b.\n",
      "commitDate": "07/01/15 9:35 PM",
      "commitName": "988639640024933448f822b48119dc832ebd2af3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "07/01/15 9:21 PM",
      "commitNameOld": "2eba7eb9aff5f7a1bf63ff1ebbe28d21fd37065b",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     public void run() {\n-      StopWatch sw \u003d new StopWatch();\n+      Stopwatch sw \u003d new Stopwatch();\n       Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n       while (shouldRun) {\n         sw.reset().start();\n         try {\n           Thread.sleep(SLEEP_INTERVAL_MS);\n         } catch (InterruptedException ie) {\n           return;\n         }\n-        long extraSleepTime \u003d sw.now(TimeUnit.MILLISECONDS) - SLEEP_INTERVAL_MS;\n+        long extraSleepTime \u003d sw.elapsedMillis() - SLEEP_INTERVAL_MS;\n         Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n \n         if (extraSleepTime \u003e warnThresholdMs) {\n           ++numGcWarnThresholdExceeded;\n           LOG.warn(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         } else if (extraSleepTime \u003e infoThresholdMs) {\n           ++numGcInfoThresholdExceeded;\n           LOG.info(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         }\n         totalGcExtraSleepTime +\u003d extraSleepTime;\n         gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      Stopwatch sw \u003d new Stopwatch();\n      Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n      while (shouldRun) {\n        sw.reset().start();\n        try {\n          Thread.sleep(SLEEP_INTERVAL_MS);\n        } catch (InterruptedException ie) {\n          return;\n        }\n        long extraSleepTime \u003d sw.elapsedMillis() - SLEEP_INTERVAL_MS;\n        Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n\n        if (extraSleepTime \u003e warnThresholdMs) {\n          ++numGcWarnThresholdExceeded;\n          LOG.warn(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        } else if (extraSleepTime \u003e infoThresholdMs) {\n          ++numGcInfoThresholdExceeded;\n          LOG.info(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        }\n        totalGcExtraSleepTime +\u003d extraSleepTime;\n        gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/JvmPauseMonitor.java",
      "extendedDetails": {}
    },
    "2eba7eb9aff5f7a1bf63ff1ebbe28d21fd37065b": {
      "type": "Ybodychange",
      "commitMessage": "Replace use of Guava\u0027s Stopwatch with Hadoop\u0027s StopWatch. (ozawa)\n",
      "commitDate": "07/01/15 9:21 PM",
      "commitName": "2eba7eb9aff5f7a1bf63ff1ebbe28d21fd37065b",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "19/06/14 7:38 PM",
      "commitNameOld": "af6c91a80c299f87af8c42fa685448b596b7615a",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 202.11,
      "commitsBetweenForRepo": 1711,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     public void run() {\n-      Stopwatch sw \u003d new Stopwatch();\n+      StopWatch sw \u003d new StopWatch();\n       Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n       while (shouldRun) {\n         sw.reset().start();\n         try {\n           Thread.sleep(SLEEP_INTERVAL_MS);\n         } catch (InterruptedException ie) {\n           return;\n         }\n-        long extraSleepTime \u003d sw.elapsedMillis() - SLEEP_INTERVAL_MS;\n+        long extraSleepTime \u003d sw.now(TimeUnit.MILLISECONDS) - SLEEP_INTERVAL_MS;\n         Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n \n         if (extraSleepTime \u003e warnThresholdMs) {\n           ++numGcWarnThresholdExceeded;\n           LOG.warn(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         } else if (extraSleepTime \u003e infoThresholdMs) {\n           ++numGcInfoThresholdExceeded;\n           LOG.info(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         }\n         totalGcExtraSleepTime +\u003d extraSleepTime;\n         gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      StopWatch sw \u003d new StopWatch();\n      Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n      while (shouldRun) {\n        sw.reset().start();\n        try {\n          Thread.sleep(SLEEP_INTERVAL_MS);\n        } catch (InterruptedException ie) {\n          return;\n        }\n        long extraSleepTime \u003d sw.now(TimeUnit.MILLISECONDS) - SLEEP_INTERVAL_MS;\n        Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n\n        if (extraSleepTime \u003e warnThresholdMs) {\n          ++numGcWarnThresholdExceeded;\n          LOG.warn(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        } else if (extraSleepTime \u003e infoThresholdMs) {\n          ++numGcInfoThresholdExceeded;\n          LOG.info(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        }\n        totalGcExtraSleepTime +\u003d extraSleepTime;\n        gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/JvmPauseMonitor.java",
      "extendedDetails": {}
    },
    "af6c91a80c299f87af8c42fa685448b596b7615a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6403. Add metrics for log warnings reported by JVM pauses. Contributed by Yongjun Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604074 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 7:38 PM",
      "commitName": "af6c91a80c299f87af8c42fa685448b596b7615a",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "16/07/13 10:48 AM",
      "commitNameOld": "32076136f7734cb5ca008f10c2088ccd81c2ca99",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 338.37,
      "commitsBetweenForRepo": 2261,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n     public void run() {\n       Stopwatch sw \u003d new Stopwatch();\n       Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n       while (shouldRun) {\n         sw.reset().start();\n         try {\n           Thread.sleep(SLEEP_INTERVAL_MS);\n         } catch (InterruptedException ie) {\n           return;\n         }\n         long extraSleepTime \u003d sw.elapsedMillis() - SLEEP_INTERVAL_MS;\n         Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n \n         if (extraSleepTime \u003e warnThresholdMs) {\n+          ++numGcWarnThresholdExceeded;\n           LOG.warn(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         } else if (extraSleepTime \u003e infoThresholdMs) {\n+          ++numGcInfoThresholdExceeded;\n           LOG.info(formatMessage(\n               extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n         }\n-        \n+        totalGcExtraSleepTime +\u003d extraSleepTime;\n         gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      Stopwatch sw \u003d new Stopwatch();\n      Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n      while (shouldRun) {\n        sw.reset().start();\n        try {\n          Thread.sleep(SLEEP_INTERVAL_MS);\n        } catch (InterruptedException ie) {\n          return;\n        }\n        long extraSleepTime \u003d sw.elapsedMillis() - SLEEP_INTERVAL_MS;\n        Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n\n        if (extraSleepTime \u003e warnThresholdMs) {\n          ++numGcWarnThresholdExceeded;\n          LOG.warn(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        } else if (extraSleepTime \u003e infoThresholdMs) {\n          ++numGcInfoThresholdExceeded;\n          LOG.info(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        }\n        totalGcExtraSleepTime +\u003d extraSleepTime;\n        gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/JvmPauseMonitor.java",
      "extendedDetails": {}
    },
    "32076136f7734cb5ca008f10c2088ccd81c2ca99": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9618.  thread which detects GC pauses (Todd Lipcon via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503806 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 10:48 AM",
      "commitName": "32076136f7734cb5ca008f10c2088ccd81c2ca99",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,24 @@\n+    public void run() {\n+      Stopwatch sw \u003d new Stopwatch();\n+      Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n+      while (shouldRun) {\n+        sw.reset().start();\n+        try {\n+          Thread.sleep(SLEEP_INTERVAL_MS);\n+        } catch (InterruptedException ie) {\n+          return;\n+        }\n+        long extraSleepTime \u003d sw.elapsedMillis() - SLEEP_INTERVAL_MS;\n+        Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n+\n+        if (extraSleepTime \u003e warnThresholdMs) {\n+          LOG.warn(formatMessage(\n+              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n+        } else if (extraSleepTime \u003e infoThresholdMs) {\n+          LOG.info(formatMessage(\n+              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n+        }\n+        \n+        gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      Stopwatch sw \u003d new Stopwatch();\n      Map\u003cString, GcTimes\u003e gcTimesBeforeSleep \u003d getGcTimes();\n      while (shouldRun) {\n        sw.reset().start();\n        try {\n          Thread.sleep(SLEEP_INTERVAL_MS);\n        } catch (InterruptedException ie) {\n          return;\n        }\n        long extraSleepTime \u003d sw.elapsedMillis() - SLEEP_INTERVAL_MS;\n        Map\u003cString, GcTimes\u003e gcTimesAfterSleep \u003d getGcTimes();\n\n        if (extraSleepTime \u003e warnThresholdMs) {\n          LOG.warn(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        } else if (extraSleepTime \u003e infoThresholdMs) {\n          LOG.info(formatMessage(\n              extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));\n        }\n        \n        gcTimesBeforeSleep \u003d gcTimesAfterSleep;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/JvmPauseMonitor.java"
    }
  }
}