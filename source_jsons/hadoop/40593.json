{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalAllocationTagsManager.java",
  "functionName": "cleanTempContainers",
  "functionId": "cleanTempContainers___applicationId-ApplicationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/LocalAllocationTagsManager.java",
  "functionStartLine": 100,
  "functionEndLine": 114,
  "numCommitsSeen": 8,
  "timeTaken": 2671,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "adbe87abf8b2814e0e2988d09ef8a8569190c80e",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "adbe87abf8b2814e0e2988d09ef8a8569190c80e": "Ymultichange(Ymovefromfile,Ybodychange)",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 276.32,
      "commitsBetweenForRepo": 2155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,15 @@\n   public void cleanTempContainers(ApplicationId applicationId) {\n \n     if (!appTempMappings.get(applicationId).isEmpty()) {\n       appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -\u003e {\n         nodeE.getValue().entrySet().stream().forEach(tagE -\u003e {\n           for (int i \u003d 0; i \u003c tagE.getValue().get(); i++) {\n             removeTags(nodeE.getKey(), applicationId,\n                 Collections.singleton(tagE.getKey()));\n           }\n         });\n       });\n       appTempMappings.remove(applicationId);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n-      }\n+      LOG.debug(\"Removed TEMP containers of app\u003d{}\", applicationId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void cleanTempContainers(ApplicationId applicationId) {\n\n    if (!appTempMappings.get(applicationId).isEmpty()) {\n      appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -\u003e {\n        nodeE.getValue().entrySet().stream().forEach(tagE -\u003e {\n          for (int i \u003d 0; i \u003c tagE.getValue().get(); i++) {\n            removeTags(nodeE.getKey(), applicationId,\n                Collections.singleton(tagE.getKey()));\n          }\n        });\n      });\n      appTempMappings.remove(applicationId);\n      LOG.debug(\"Removed TEMP containers of app\u003d{}\", applicationId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/LocalAllocationTagsManager.java",
      "extendedDetails": {}
    },
    "adbe87abf8b2814e0e2988d09ef8a8569190c80e": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-7788. Factor out management of temp tags from AllocationTagsManager. (Arun Suresh via kkaranasos)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "adbe87abf8b2814e0e2988d09ef8a8569190c80e",
      "commitAuthor": "Konstantinos Karanasos",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7788. Factor out management of temp tags from AllocationTagsManager. (Arun Suresh via kkaranasos)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "adbe87abf8b2814e0e2988d09ef8a8569190c80e",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "8bf7c444368f48f63f8011cf155f551c6b51ee21",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,17 @@\n   public void cleanTempContainers(ApplicationId applicationId) {\n \n     if (!appTempMappings.get(applicationId).isEmpty()) {\n       appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -\u003e {\n-        nodeE.getValue().entrySet().stream().forEach(containerE -\u003e {\n-          removeContainer(nodeE.getKey(), containerE.getKey(),\n-              containerE.getValue());\n+        nodeE.getValue().entrySet().stream().forEach(tagE -\u003e {\n+          for (int i \u003d 0; i \u003c tagE.getValue().get(); i++) {\n+            removeTags(nodeE.getKey(), applicationId,\n+                Collections.singleton(tagE.getKey()));\n+          }\n         });\n       });\n-      writeLock.lock();\n-      try {\n-        appTempMappings.remove(applicationId);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n-        }\n-      } finally {\n-        writeLock.unlock();\n+      appTempMappings.remove(applicationId);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cleanTempContainers(ApplicationId applicationId) {\n\n    if (!appTempMappings.get(applicationId).isEmpty()) {\n      appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -\u003e {\n        nodeE.getValue().entrySet().stream().forEach(tagE -\u003e {\n          for (int i \u003d 0; i \u003c tagE.getValue().get(); i++) {\n            removeTags(nodeE.getKey(), applicationId,\n                Collections.singleton(tagE.getKey()));\n          }\n        });\n      });\n      appTempMappings.remove(applicationId);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/LocalAllocationTagsManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/LocalAllocationTagsManager.java",
            "oldMethodName": "cleanTempContainers",
            "newMethodName": "cleanTempContainers"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7788. Factor out management of temp tags from AllocationTagsManager. (Arun Suresh via kkaranasos)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "adbe87abf8b2814e0e2988d09ef8a8569190c80e",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "8bf7c444368f48f63f8011cf155f551c6b51ee21",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,17 @@\n   public void cleanTempContainers(ApplicationId applicationId) {\n \n     if (!appTempMappings.get(applicationId).isEmpty()) {\n       appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -\u003e {\n-        nodeE.getValue().entrySet().stream().forEach(containerE -\u003e {\n-          removeContainer(nodeE.getKey(), containerE.getKey(),\n-              containerE.getValue());\n+        nodeE.getValue().entrySet().stream().forEach(tagE -\u003e {\n+          for (int i \u003d 0; i \u003c tagE.getValue().get(); i++) {\n+            removeTags(nodeE.getKey(), applicationId,\n+                Collections.singleton(tagE.getKey()));\n+          }\n         });\n       });\n-      writeLock.lock();\n-      try {\n-        appTempMappings.remove(applicationId);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n-        }\n-      } finally {\n-        writeLock.unlock();\n+      appTempMappings.remove(applicationId);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cleanTempContainers(ApplicationId applicationId) {\n\n    if (!appTempMappings.get(applicationId).isEmpty()) {\n      appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -\u003e {\n        nodeE.getValue().entrySet().stream().forEach(tagE -\u003e {\n          for (int i \u003d 0; i \u003c tagE.getValue().get(); i++) {\n            removeTags(nodeE.getKey(), applicationId,\n                Collections.singleton(tagE.getKey()));\n          }\n        });\n      });\n      appTempMappings.remove(applicationId);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/algorithm/LocalAllocationTagsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7613. Implement Basic algorithm for constraint based placement. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,20 @@\n+  public void cleanTempContainers(ApplicationId applicationId) {\n+\n+    if (!appTempMappings.get(applicationId).isEmpty()) {\n+      appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -\u003e {\n+        nodeE.getValue().entrySet().stream().forEach(containerE -\u003e {\n+          removeContainer(nodeE.getKey(), containerE.getKey(),\n+              containerE.getValue());\n+        });\n+      });\n+      writeLock.lock();\n+      try {\n+        appTempMappings.remove(applicationId);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n+        }\n+      } finally {\n+        writeLock.unlock();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void cleanTempContainers(ApplicationId applicationId) {\n\n    if (!appTempMappings.get(applicationId).isEmpty()) {\n      appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -\u003e {\n        nodeE.getValue().entrySet().stream().forEach(containerE -\u003e {\n          removeContainer(nodeE.getKey(), containerE.getKey(),\n              containerE.getValue());\n        });\n      });\n      writeLock.lock();\n      try {\n        appTempMappings.remove(applicationId);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Removed TEMP containers of app\u003d\" + applicationId);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java"
    }
  }
}