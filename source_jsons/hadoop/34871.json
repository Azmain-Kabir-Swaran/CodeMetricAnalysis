{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 1232,
  "functionEndLine": 1290,
  "numCommitsSeen": 21,
  "timeTaken": 1300,
  "changeHistory": [
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de"
  ],
  "changeHistoryShort": {
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7652. Handle AM register requests asynchronously in FederationInterceptor. Contributed by Botong Huang.\n",
      "commitDate": "09/10/18 10:29 AM",
      "commitName": "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,59 @@\n+        public void run() {\n+          String subClusterId \u003d scId.getId();\n+\n+          // Create a config loaded with federation on and subclusterId\n+          // for each UAM\n+          YarnConfiguration config \u003d new YarnConfiguration(getConf());\n+          FederationProxyProviderUtil.updateConfForFederation(config,\n+              subClusterId);\n+\n+          RegisterApplicationMasterResponse uamResponse \u003d null;\n+          Token\u003cAMRMTokenIdentifier\u003e token \u003d null;\n+          try {\n+            // For appNameSuffix, use subClusterId of the home sub-cluster\n+            token \u003d uamPool.launchUAM(subClusterId, config,\n+                attemptId.getApplicationId(), amRegistrationResponse.getQueue(),\n+                getApplicationContext().getUser(), homeSubClusterId.toString(),\n+                true, subClusterId);\n+\n+            secondaryRelayers.put(subClusterId,\n+                uamPool.getAMRMClientRelayer(subClusterId));\n+\n+            uamResponse \u003d uamPool.registerApplicationMaster(subClusterId,\n+                amRegistrationRequest);\n+          } catch (Throwable e) {\n+            LOG.error(\"Failed to register application master: \" + subClusterId\n+                + \" Application: \" + attemptId, e);\n+            // TODO: UAM registration for this sub-cluster RM\n+            // failed. For now, we ignore the resource requests and continue\n+            // but we need to fix this and handle this situation. One way would\n+            // be to send the request to another RM by consulting the policy.\n+            return;\n+          }\n+          uamRegistrations.put(scId, uamResponse);\n+          LOG.info(\"Successfully registered unmanaged application master: \"\n+              + subClusterId + \" ApplicationId: \" + attemptId);\n+\n+          try {\n+            uamPool.allocateAsync(subClusterId, requests.get(scId),\n+                new HeartbeatCallBack(scId, true));\n+          } catch (Throwable e) {\n+            LOG.error(\"Failed to allocate async to \" + subClusterId\n+                + \" Application: \" + attemptId, e);\n+          }\n+\n+          // Save the UAM token in registry or NMSS\n+          try {\n+            if (registryClient !\u003d null) {\n+              registryClient.writeAMRMTokenForUAM(attemptId.getApplicationId(),\n+                  subClusterId, token);\n+            } else if (getNMStateStore() !\u003d null) {\n+              getNMStateStore().storeAMRMProxyAppContextEntry(attemptId,\n+                  NMSS_SECONDARY_SC_PREFIX + subClusterId,\n+                  token.encodeToUrlString().getBytes(STRING_TO_BYTE_FORMAT));\n+            }\n+          } catch (Throwable e) {\n+            LOG.error(\"Failed to persist UAM token from \" + subClusterId\n+                + \" Application: \" + attemptId, e);\n+          }\n+        }\n\\ No newline at end of file\n",
      "actualSource": "        public void run() {\n          String subClusterId \u003d scId.getId();\n\n          // Create a config loaded with federation on and subclusterId\n          // for each UAM\n          YarnConfiguration config \u003d new YarnConfiguration(getConf());\n          FederationProxyProviderUtil.updateConfForFederation(config,\n              subClusterId);\n\n          RegisterApplicationMasterResponse uamResponse \u003d null;\n          Token\u003cAMRMTokenIdentifier\u003e token \u003d null;\n          try {\n            // For appNameSuffix, use subClusterId of the home sub-cluster\n            token \u003d uamPool.launchUAM(subClusterId, config,\n                attemptId.getApplicationId(), amRegistrationResponse.getQueue(),\n                getApplicationContext().getUser(), homeSubClusterId.toString(),\n                true, subClusterId);\n\n            secondaryRelayers.put(subClusterId,\n                uamPool.getAMRMClientRelayer(subClusterId));\n\n            uamResponse \u003d uamPool.registerApplicationMaster(subClusterId,\n                amRegistrationRequest);\n          } catch (Throwable e) {\n            LOG.error(\"Failed to register application master: \" + subClusterId\n                + \" Application: \" + attemptId, e);\n            // TODO: UAM registration for this sub-cluster RM\n            // failed. For now, we ignore the resource requests and continue\n            // but we need to fix this and handle this situation. One way would\n            // be to send the request to another RM by consulting the policy.\n            return;\n          }\n          uamRegistrations.put(scId, uamResponse);\n          LOG.info(\"Successfully registered unmanaged application master: \"\n              + subClusterId + \" ApplicationId: \" + attemptId);\n\n          try {\n            uamPool.allocateAsync(subClusterId, requests.get(scId),\n                new HeartbeatCallBack(scId, true));\n          } catch (Throwable e) {\n            LOG.error(\"Failed to allocate async to \" + subClusterId\n                + \" Application: \" + attemptId, e);\n          }\n\n          // Save the UAM token in registry or NMSS\n          try {\n            if (registryClient !\u003d null) {\n              registryClient.writeAMRMTokenForUAM(attemptId.getApplicationId(),\n                  subClusterId, token);\n            } else if (getNMStateStore() !\u003d null) {\n              getNMStateStore().storeAMRMProxyAppContextEntry(attemptId,\n                  NMSS_SECONDARY_SC_PREFIX + subClusterId,\n                  token.encodeToUrlString().getBytes(STRING_TO_BYTE_FORMAT));\n            }\n          } catch (Throwable e) {\n            LOG.error(\"Failed to persist UAM token from \" + subClusterId\n                + \" Application: \" + attemptId, e);\n          }\n        }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}