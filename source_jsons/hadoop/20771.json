{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobResourceUploader.java",
  "functionName": "validateFilePath",
  "functionId": "validateFilePath___file-String__conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
  "functionStartLine": 865,
  "functionEndLine": 900,
  "numCommitsSeen": 42,
  "timeTaken": 2190,
  "changeHistory": [
    "230d90c5b9cc0d6e74bf16b1cf6685a163a24d48",
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "c66c3ac6bf9f63177279feec3f2917e4b882e2bc",
    "ed63b116465290fdb0acdf89170025f47b307599"
  ],
  "changeHistoryShort": {
    "230d90c5b9cc0d6e74bf16b1cf6685a163a24d48": "Ybodychange",
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "c66c3ac6bf9f63177279feec3f2917e4b882e2bc": "Ymovefromfile",
    "ed63b116465290fdb0acdf89170025f47b307599": "Yintroduced"
  },
  "changeHistoryDetails": {
    "230d90c5b9cc0d6e74bf16b1cf6685a163a24d48": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7125. JobResourceUploader creates LocalFileSystem when it\u0027s not necessary. (Peter Cseh via wangda)\n\nChange-Id: I1aa720ed03739f6f4abeec46f6068e2ab332987a\n",
      "commitDate": "24/09/18 1:52 PM",
      "commitName": "230d90c5b9cc0d6e74bf16b1cf6685a163a24d48",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/02/18 6:18 PM",
      "commitNameOld": "6e6945cd78d76c6beaec85c963f27e28bf96c0f2",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 207.77,
      "commitsBetweenForRepo": 2207,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private String validateFilePath(String file, Configuration conf)\n       throws IOException {\n     if (file \u003d\u003d null) {\n       return null;\n     }\n     if (file.isEmpty()) {\n       throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n     }\n     String finalPath;\n     URI pathURI;\n     try {\n       pathURI \u003d new URI(file);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }\n     Path path \u003d new Path(pathURI);\n-    FileSystem localFs \u003d FileSystem.getLocal(conf);\n     if (pathURI.getScheme() \u003d\u003d null) {\n+      FileSystem localFs \u003d FileSystem.getLocal(conf);\n       // default to the local file system\n       // check if the file exists or not first\n       localFs.getFileStatus(path);\n       finalPath \u003d\n           path.makeQualified(localFs.getUri(), localFs.getWorkingDirectory())\n               .toString();\n     } else {\n       // check if the file exists in this file system\n       // we need to recreate this filesystem object to copy\n       // these files to the file system ResourceManager is running\n       // on.\n       FileSystem fs \u003d path.getFileSystem(conf);\n       fs.getFileStatus(path);\n       finalPath \u003d\n           path.makeQualified(fs.getUri(), fs.getWorkingDirectory()).toString();\n     }\n     return finalPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFilePath(String file, Configuration conf)\n      throws IOException {\n    if (file \u003d\u003d null) {\n      return null;\n    }\n    if (file.isEmpty()) {\n      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n    }\n    String finalPath;\n    URI pathURI;\n    try {\n      pathURI \u003d new URI(file);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n    Path path \u003d new Path(pathURI);\n    if (pathURI.getScheme() \u003d\u003d null) {\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      // default to the local file system\n      // check if the file exists or not first\n      localFs.getFileStatus(path);\n      finalPath \u003d\n          path.makeQualified(localFs.getUri(), localFs.getWorkingDirectory())\n              .toString();\n    } else {\n      // check if the file exists in this file system\n      // we need to recreate this filesystem object to copy\n      // these files to the file system ResourceManager is running\n      // on.\n      FileSystem fs \u003d path.getFileSystem(conf);\n      fs.getFileStatus(path);\n      finalPath \u003d\n          path.makeQualified(fs.getUri(), fs.getWorkingDirectory()).toString();\n    }\n    return finalPath;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
      "extendedDetails": {}
    },
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "17/08/16 9:22 AM",
      "commitNameOld": "f80a7298325a4626638ee24467e2012442e480d4",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 90.11,
      "commitsBetweenForRepo": 677,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,36 @@\n   private String validateFilePath(String file, Configuration conf)\n       throws IOException {\n     if (file \u003d\u003d null) {\n       return null;\n     }\n     if (file.isEmpty()) {\n       throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n     }\n     String finalPath;\n     URI pathURI;\n     try {\n       pathURI \u003d new URI(file);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }\n     Path path \u003d new Path(pathURI);\n     FileSystem localFs \u003d FileSystem.getLocal(conf);\n     if (pathURI.getScheme() \u003d\u003d null) {\n       // default to the local file system\n       // check if the file exists or not first\n-      if (!localFs.exists(path)) {\n-        throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n-      }\n+      localFs.getFileStatus(path);\n       finalPath \u003d\n           path.makeQualified(localFs.getUri(), localFs.getWorkingDirectory())\n               .toString();\n     } else {\n       // check if the file exists in this file system\n       // we need to recreate this filesystem object to copy\n       // these files to the file system ResourceManager is running\n       // on.\n       FileSystem fs \u003d path.getFileSystem(conf);\n-      if (!fs.exists(path)) {\n-        throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n-      }\n+      fs.getFileStatus(path);\n       finalPath \u003d\n           path.makeQualified(fs.getUri(), fs.getWorkingDirectory()).toString();\n     }\n     return finalPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFilePath(String file, Configuration conf)\n      throws IOException {\n    if (file \u003d\u003d null) {\n      return null;\n    }\n    if (file.isEmpty()) {\n      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n    }\n    String finalPath;\n    URI pathURI;\n    try {\n      pathURI \u003d new URI(file);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n    Path path \u003d new Path(pathURI);\n    FileSystem localFs \u003d FileSystem.getLocal(conf);\n    if (pathURI.getScheme() \u003d\u003d null) {\n      // default to the local file system\n      // check if the file exists or not first\n      localFs.getFileStatus(path);\n      finalPath \u003d\n          path.makeQualified(localFs.getUri(), localFs.getWorkingDirectory())\n              .toString();\n    } else {\n      // check if the file exists in this file system\n      // we need to recreate this filesystem object to copy\n      // these files to the file system ResourceManager is running\n      // on.\n      FileSystem fs \u003d path.getFileSystem(conf);\n      fs.getFileStatus(path);\n      finalPath \u003d\n          path.makeQualified(fs.getUri(), fs.getWorkingDirectory()).toString();\n    }\n    return finalPath;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
      "extendedDetails": {}
    },
    "c66c3ac6bf9f63177279feec3f2917e4b882e2bc": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-6267. Refactor JobSubmitter#copyAndConfigureFiles into it\u0027s own class. (Chris Trezzo via kasha)\n",
      "commitDate": "04/03/15 2:42 PM",
      "commitName": "c66c3ac6bf9f63177279feec3f2917e4b882e2bc",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/03/15 10:30 AM",
      "commitNameOld": "ed70fa142cabdbc1065e4dbbc95e99c8850c4751",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  private String validateFilePath(String file, Configuration conf) \n-      throws IOException  {\n+  private String validateFilePath(String file, Configuration conf)\n+      throws IOException {\n     if (file \u003d\u003d null) {\n       return null;\n     }\n     if (file.isEmpty()) {\n       throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n     }\n     String finalPath;\n     URI pathURI;\n     try {\n       pathURI \u003d new URI(file);\n     } catch (URISyntaxException e) {\n       throw new IllegalArgumentException(e);\n     }\n     Path path \u003d new Path(pathURI);\n     FileSystem localFs \u003d FileSystem.getLocal(conf);\n     if (pathURI.getScheme() \u003d\u003d null) {\n-      //default to the local file system\n-      //check if the file exists or not first\n+      // default to the local file system\n+      // check if the file exists or not first\n       if (!localFs.exists(path)) {\n         throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n       }\n-      finalPath \u003d path.makeQualified(localFs.getUri(),\n-          localFs.getWorkingDirectory()).toString();\n-    }\n-    else {\n+      finalPath \u003d\n+          path.makeQualified(localFs.getUri(), localFs.getWorkingDirectory())\n+              .toString();\n+    } else {\n       // check if the file exists in this file system\n       // we need to recreate this filesystem object to copy\n       // these files to the file system ResourceManager is running\n       // on.\n       FileSystem fs \u003d path.getFileSystem(conf);\n       if (!fs.exists(path)) {\n         throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n       }\n-      finalPath \u003d path.makeQualified(fs.getUri(),\n-          fs.getWorkingDirectory()).toString();\n+      finalPath \u003d\n+          path.makeQualified(fs.getUri(), fs.getWorkingDirectory()).toString();\n     }\n     return finalPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFilePath(String file, Configuration conf)\n      throws IOException {\n    if (file \u003d\u003d null) {\n      return null;\n    }\n    if (file.isEmpty()) {\n      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n    }\n    String finalPath;\n    URI pathURI;\n    try {\n      pathURI \u003d new URI(file);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n    Path path \u003d new Path(pathURI);\n    FileSystem localFs \u003d FileSystem.getLocal(conf);\n    if (pathURI.getScheme() \u003d\u003d null) {\n      // default to the local file system\n      // check if the file exists or not first\n      if (!localFs.exists(path)) {\n        throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n      }\n      finalPath \u003d\n          path.makeQualified(localFs.getUri(), localFs.getWorkingDirectory())\n              .toString();\n    } else {\n      // check if the file exists in this file system\n      // we need to recreate this filesystem object to copy\n      // these files to the file system ResourceManager is running\n      // on.\n      FileSystem fs \u003d path.getFileSystem(conf);\n      if (!fs.exists(path)) {\n        throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n      }\n      finalPath \u003d\n          path.makeQualified(fs.getUri(), fs.getWorkingDirectory()).toString();\n    }\n    return finalPath;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
        "oldMethodName": "validateFilePath",
        "newMethodName": "validateFilePath"
      }
    },
    "ed63b116465290fdb0acdf89170025f47b307599": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6052. Supported overriding the default container-log4j.properties file per job. Contributed by Junping Du.\n",
      "commitDate": "01/11/14 12:47 AM",
      "commitName": "ed63b116465290fdb0acdf89170025f47b307599",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,40 @@\n+  private String validateFilePath(String file, Configuration conf) \n+      throws IOException  {\n+    if (file \u003d\u003d null) {\n+      return null;\n+    }\n+    if (file.isEmpty()) {\n+      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n+    }\n+    String finalPath;\n+    URI pathURI;\n+    try {\n+      pathURI \u003d new URI(file);\n+    } catch (URISyntaxException e) {\n+      throw new IllegalArgumentException(e);\n+    }\n+    Path path \u003d new Path(pathURI);\n+    FileSystem localFs \u003d FileSystem.getLocal(conf);\n+    if (pathURI.getScheme() \u003d\u003d null) {\n+      //default to the local file system\n+      //check if the file exists or not first\n+      if (!localFs.exists(path)) {\n+        throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n+      }\n+      finalPath \u003d path.makeQualified(localFs.getUri(),\n+          localFs.getWorkingDirectory()).toString();\n+    }\n+    else {\n+      // check if the file exists in this file system\n+      // we need to recreate this filesystem object to copy\n+      // these files to the file system ResourceManager is running\n+      // on.\n+      FileSystem fs \u003d path.getFileSystem(conf);\n+      if (!fs.exists(path)) {\n+        throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n+      }\n+      finalPath \u003d path.makeQualified(fs.getUri(),\n+          fs.getWorkingDirectory()).toString();\n+    }\n+    return finalPath;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFilePath(String file, Configuration conf) \n      throws IOException  {\n    if (file \u003d\u003d null) {\n      return null;\n    }\n    if (file.isEmpty()) {\n      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n    }\n    String finalPath;\n    URI pathURI;\n    try {\n      pathURI \u003d new URI(file);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n    Path path \u003d new Path(pathURI);\n    FileSystem localFs \u003d FileSystem.getLocal(conf);\n    if (pathURI.getScheme() \u003d\u003d null) {\n      //default to the local file system\n      //check if the file exists or not first\n      if (!localFs.exists(path)) {\n        throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n      }\n      finalPath \u003d path.makeQualified(localFs.getUri(),\n          localFs.getWorkingDirectory()).toString();\n    }\n    else {\n      // check if the file exists in this file system\n      // we need to recreate this filesystem object to copy\n      // these files to the file system ResourceManager is running\n      // on.\n      FileSystem fs \u003d path.getFileSystem(conf);\n      if (!fs.exists(path)) {\n        throw new FileNotFoundException(\"File \" + file + \" does not exist.\");\n      }\n      finalPath \u003d path.makeQualified(fs.getUri(),\n          fs.getWorkingDirectory()).toString();\n    }\n    return finalPath;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java"
    }
  }
}