{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityOverTimePolicy.java",
  "functionName": "normalizeToResource",
  "functionId": "normalizeToResource___runningTot-IntegralResource__window-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacityOverTimePolicy.java",
  "functionStartLine": 208,
  "functionEndLine": 216,
  "numCommitsSeen": 11,
  "timeTaken": 1090,
  "changeHistory": [
    "d383bfdcd40c2315197fa5f85c3e5cb3bb83167f"
  ],
  "changeHistoryShort": {
    "d383bfdcd40c2315197fa5f85c3e5cb3bb83167f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d383bfdcd40c2315197fa5f85c3e5cb3bb83167f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5164. Use plan RLE to improve CapacityOverTimePolicy efficiency\n",
      "commitDate": "25/07/16 4:37 PM",
      "commitName": "d383bfdcd40c2315197fa5f85c3e5cb3bb83167f",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,9 @@\n+  private Resource normalizeToResource(IntegralResource runningTot,\n+      long window) {\n+    // normalize to fit in windows. Rounding should not impact more than\n+    // sub 1 core average allocations. This will all be removed once\n+    // Resource moves to long.\n+    int memory \u003d (int) Math.round((double) runningTot.memory / window);\n+    int vcores \u003d (int) Math.round((double) runningTot.vcores / window);\n+    return Resource.newInstance(memory, vcores);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource normalizeToResource(IntegralResource runningTot,\n      long window) {\n    // normalize to fit in windows. Rounding should not impact more than\n    // sub 1 core average allocations. This will all be removed once\n    // Resource moves to long.\n    int memory \u003d (int) Math.round((double) runningTot.memory / window);\n    int vcores \u003d (int) Math.round((double) runningTot.vcores / window);\n    return Resource.newInstance(memory, vcores);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacityOverTimePolicy.java"
    }
  }
}