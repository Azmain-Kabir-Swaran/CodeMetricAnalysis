{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeviceResourceDockerRuntimePluginImpl.java",
  "functionName": "updateDockerRunCommand",
  "functionId": "updateDockerRunCommand___dockerRunCommand-DockerRunCommand__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceDockerRuntimePluginImpl.java",
  "functionStartLine": 73,
  "functionEndLine": 120,
  "numCommitsSeen": 2,
  "timeTaken": 1210,
  "changeHistory": [
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0"
  ],
  "changeHistoryShort": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/02/19 2:28 AM",
      "commitNameOld": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 28.31,
      "commitsBetweenForRepo": 261,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,48 @@\n   public void updateDockerRunCommand(DockerRunCommand dockerRunCommand,\n       Container container) throws ContainerExecutionException {\n     String containerId \u003d container.getContainerId().toString();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Try to update docker run command for: \" + containerId);\n-    }\n+    LOG.debug(\"Try to update docker run command for: {}\", containerId);\n     if(!requestedDevice(resourceName, container)) {\n       return;\n     }\n     DeviceRuntimeSpec deviceRuntimeSpec \u003d getRuntimeSpec(container);\n     if (deviceRuntimeSpec \u003d\u003d null) {\n       LOG.warn(\"The device plugin: \"\n           + devicePlugin.getClass().getCanonicalName()\n           + \" returns null device runtime spec value for container: \"\n           + containerId);\n       return;\n     }\n     // handle runtime\n     dockerRunCommand.addRuntime(deviceRuntimeSpec.getContainerRuntime());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Handle docker container runtime type: \"\n-          + deviceRuntimeSpec.getContainerRuntime() + \" for container: \"\n-          + containerId);\n-    }\n+    LOG.debug(\"Handle docker container runtime type: {} for container: {}\",\n+        deviceRuntimeSpec.getContainerRuntime(), containerId);\n     // handle device mounts\n     Set\u003cMountDeviceSpec\u003e deviceMounts \u003d deviceRuntimeSpec.getDeviceMounts();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Handle device mounts: \" + deviceMounts + \" for container: \"\n-          + containerId);\n-    }\n+    LOG.debug(\"Handle device mounts: {} for container: {}\", deviceMounts,\n+        containerId);\n     for (MountDeviceSpec mountDeviceSpec : deviceMounts) {\n       dockerRunCommand.addDevice(\n           mountDeviceSpec.getDevicePathInHost(),\n           mountDeviceSpec.getDevicePathInContainer());\n     }\n     // handle volume mounts\n     Set\u003cMountVolumeSpec\u003e mountVolumeSpecs \u003d deviceRuntimeSpec.getVolumeMounts();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Handle volume mounts: \" + mountVolumeSpecs + \" for container: \"\n-          + containerId);\n-    }\n+    LOG.debug(\"Handle volume mounts: {} for container: {}\", mountVolumeSpecs,\n+        containerId);\n     for (MountVolumeSpec mountVolumeSpec : mountVolumeSpecs) {\n       if (mountVolumeSpec.getReadOnly()) {\n         dockerRunCommand.addReadOnlyMountLocation(\n             mountVolumeSpec.getHostPath(),\n             mountVolumeSpec.getMountPath());\n       } else {\n         dockerRunCommand.addReadWriteMountLocation(\n             mountVolumeSpec.getHostPath(),\n             mountVolumeSpec.getMountPath());\n       }\n     }\n     // handle envs\n     dockerRunCommand.addEnv(deviceRuntimeSpec.getEnvs());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Handle envs: \" + deviceRuntimeSpec.getEnvs()\n-          + \" for container: \" + containerId);\n-    }\n+    LOG.debug(\"Handle envs: {} for container: {}\",\n+        deviceRuntimeSpec.getEnvs(), containerId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDockerRunCommand(DockerRunCommand dockerRunCommand,\n      Container container) throws ContainerExecutionException {\n    String containerId \u003d container.getContainerId().toString();\n    LOG.debug(\"Try to update docker run command for: {}\", containerId);\n    if(!requestedDevice(resourceName, container)) {\n      return;\n    }\n    DeviceRuntimeSpec deviceRuntimeSpec \u003d getRuntimeSpec(container);\n    if (deviceRuntimeSpec \u003d\u003d null) {\n      LOG.warn(\"The device plugin: \"\n          + devicePlugin.getClass().getCanonicalName()\n          + \" returns null device runtime spec value for container: \"\n          + containerId);\n      return;\n    }\n    // handle runtime\n    dockerRunCommand.addRuntime(deviceRuntimeSpec.getContainerRuntime());\n    LOG.debug(\"Handle docker container runtime type: {} for container: {}\",\n        deviceRuntimeSpec.getContainerRuntime(), containerId);\n    // handle device mounts\n    Set\u003cMountDeviceSpec\u003e deviceMounts \u003d deviceRuntimeSpec.getDeviceMounts();\n    LOG.debug(\"Handle device mounts: {} for container: {}\", deviceMounts,\n        containerId);\n    for (MountDeviceSpec mountDeviceSpec : deviceMounts) {\n      dockerRunCommand.addDevice(\n          mountDeviceSpec.getDevicePathInHost(),\n          mountDeviceSpec.getDevicePathInContainer());\n    }\n    // handle volume mounts\n    Set\u003cMountVolumeSpec\u003e mountVolumeSpecs \u003d deviceRuntimeSpec.getVolumeMounts();\n    LOG.debug(\"Handle volume mounts: {} for container: {}\", mountVolumeSpecs,\n        containerId);\n    for (MountVolumeSpec mountVolumeSpec : mountVolumeSpecs) {\n      if (mountVolumeSpec.getReadOnly()) {\n        dockerRunCommand.addReadOnlyMountLocation(\n            mountVolumeSpec.getHostPath(),\n            mountVolumeSpec.getMountPath());\n      } else {\n        dockerRunCommand.addReadWriteMountLocation(\n            mountVolumeSpec.getHostPath(),\n            mountVolumeSpec.getMountPath());\n      }\n    }\n    // handle envs\n    dockerRunCommand.addEnv(deviceRuntimeSpec.getEnvs());\n    LOG.debug(\"Handle envs: {} for container: {}\",\n        deviceRuntimeSpec.getEnvs(), containerId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceDockerRuntimePluginImpl.java",
      "extendedDetails": {}
    },
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9060. [YARN-8851] Phase 1 - Support device isolation and use the Nvidia GPU plugin as an example. Contributed by Zhankun Tang.\n",
      "commitDate": "18/02/19 2:28 AM",
      "commitName": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,59 @@\n+  public void updateDockerRunCommand(DockerRunCommand dockerRunCommand,\n+      Container container) throws ContainerExecutionException {\n+    String containerId \u003d container.getContainerId().toString();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Try to update docker run command for: \" + containerId);\n+    }\n+    if(!requestedDevice(resourceName, container)) {\n+      return;\n+    }\n+    DeviceRuntimeSpec deviceRuntimeSpec \u003d getRuntimeSpec(container);\n+    if (deviceRuntimeSpec \u003d\u003d null) {\n+      LOG.warn(\"The device plugin: \"\n+          + devicePlugin.getClass().getCanonicalName()\n+          + \" returns null device runtime spec value for container: \"\n+          + containerId);\n+      return;\n+    }\n+    // handle runtime\n+    dockerRunCommand.addRuntime(deviceRuntimeSpec.getContainerRuntime());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Handle docker container runtime type: \"\n+          + deviceRuntimeSpec.getContainerRuntime() + \" for container: \"\n+          + containerId);\n+    }\n+    // handle device mounts\n+    Set\u003cMountDeviceSpec\u003e deviceMounts \u003d deviceRuntimeSpec.getDeviceMounts();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Handle device mounts: \" + deviceMounts + \" for container: \"\n+          + containerId);\n+    }\n+    for (MountDeviceSpec mountDeviceSpec : deviceMounts) {\n+      dockerRunCommand.addDevice(\n+          mountDeviceSpec.getDevicePathInHost(),\n+          mountDeviceSpec.getDevicePathInContainer());\n+    }\n+    // handle volume mounts\n+    Set\u003cMountVolumeSpec\u003e mountVolumeSpecs \u003d deviceRuntimeSpec.getVolumeMounts();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Handle volume mounts: \" + mountVolumeSpecs + \" for container: \"\n+          + containerId);\n+    }\n+    for (MountVolumeSpec mountVolumeSpec : mountVolumeSpecs) {\n+      if (mountVolumeSpec.getReadOnly()) {\n+        dockerRunCommand.addReadOnlyMountLocation(\n+            mountVolumeSpec.getHostPath(),\n+            mountVolumeSpec.getMountPath());\n+      } else {\n+        dockerRunCommand.addReadWriteMountLocation(\n+            mountVolumeSpec.getHostPath(),\n+            mountVolumeSpec.getMountPath());\n+      }\n+    }\n+    // handle envs\n+    dockerRunCommand.addEnv(deviceRuntimeSpec.getEnvs());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Handle envs: \" + deviceRuntimeSpec.getEnvs()\n+          + \" for container: \" + containerId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDockerRunCommand(DockerRunCommand dockerRunCommand,\n      Container container) throws ContainerExecutionException {\n    String containerId \u003d container.getContainerId().toString();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to update docker run command for: \" + containerId);\n    }\n    if(!requestedDevice(resourceName, container)) {\n      return;\n    }\n    DeviceRuntimeSpec deviceRuntimeSpec \u003d getRuntimeSpec(container);\n    if (deviceRuntimeSpec \u003d\u003d null) {\n      LOG.warn(\"The device plugin: \"\n          + devicePlugin.getClass().getCanonicalName()\n          + \" returns null device runtime spec value for container: \"\n          + containerId);\n      return;\n    }\n    // handle runtime\n    dockerRunCommand.addRuntime(deviceRuntimeSpec.getContainerRuntime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Handle docker container runtime type: \"\n          + deviceRuntimeSpec.getContainerRuntime() + \" for container: \"\n          + containerId);\n    }\n    // handle device mounts\n    Set\u003cMountDeviceSpec\u003e deviceMounts \u003d deviceRuntimeSpec.getDeviceMounts();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Handle device mounts: \" + deviceMounts + \" for container: \"\n          + containerId);\n    }\n    for (MountDeviceSpec mountDeviceSpec : deviceMounts) {\n      dockerRunCommand.addDevice(\n          mountDeviceSpec.getDevicePathInHost(),\n          mountDeviceSpec.getDevicePathInContainer());\n    }\n    // handle volume mounts\n    Set\u003cMountVolumeSpec\u003e mountVolumeSpecs \u003d deviceRuntimeSpec.getVolumeMounts();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Handle volume mounts: \" + mountVolumeSpecs + \" for container: \"\n          + containerId);\n    }\n    for (MountVolumeSpec mountVolumeSpec : mountVolumeSpecs) {\n      if (mountVolumeSpec.getReadOnly()) {\n        dockerRunCommand.addReadOnlyMountLocation(\n            mountVolumeSpec.getHostPath(),\n            mountVolumeSpec.getMountPath());\n      } else {\n        dockerRunCommand.addReadWriteMountLocation(\n            mountVolumeSpec.getHostPath(),\n            mountVolumeSpec.getMountPath());\n      }\n    }\n    // handle envs\n    dockerRunCommand.addEnv(deviceRuntimeSpec.getEnvs());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Handle envs: \" + deviceRuntimeSpec.getEnvs()\n          + \" for container: \" + containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceDockerRuntimePluginImpl.java"
    }
  }
}