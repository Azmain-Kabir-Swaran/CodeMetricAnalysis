{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ImageServlet.java",
  "functionName": "validateRequest",
  "functionId": "validateRequest___context-ServletContext__conf-Configuration__request-HttpServletRequest__response-HttpServletResponse__nnImage-FSImage__theirStorageInfoString-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java",
  "functionStartLine": 215,
  "functionEndLine": 242,
  "numCommitsSeen": 20,
  "timeTaken": 1033,
  "changeHistory": [
    "94a1632fcb677fda6f4d812614026417f1d0a360"
  ],
  "changeHistoryShort": {
    "94a1632fcb677fda6f4d812614026417f1d0a360": "Yintroduced"
  },
  "changeHistoryDetails": {
    "94a1632fcb677fda6f4d812614026417f1d0a360": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/14 1:25 PM",
      "commitName": "94a1632fcb677fda6f4d812614026417f1d0a360",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,28 @@\n+  private void validateRequest(ServletContext context, Configuration conf,\n+      HttpServletRequest request, HttpServletResponse response,\n+      FSImage nnImage, String theirStorageInfoString) throws IOException {\n+\n+    if (UserGroupInformation.isSecurityEnabled()\n+        \u0026\u0026 !isValidRequestor(context, request.getUserPrincipal().getName(),\n+            conf)) {\n+      String errorMsg \u003d \"Only Namenode, Secondary Namenode, and administrators may access \"\n+          + \"this servlet\";\n+      response.sendError(HttpServletResponse.SC_FORBIDDEN, errorMsg);\n+      LOG.warn(\"Received non-NN/SNN/administrator request for image or edits from \"\n+          + request.getUserPrincipal().getName()\n+          + \" at \"\n+          + request.getRemoteHost());\n+      throw new IOException(errorMsg);\n+    }\n+\n+    String myStorageInfoString \u003d nnImage.getStorage().toColonSeparatedString();\n+    if (theirStorageInfoString !\u003d null\n+        \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n+      String errorMsg \u003d \"This namenode has storage info \" + myStorageInfoString\n+          + \" but the secondary expected \" + theirStorageInfoString;\n+      response.sendError(HttpServletResponse.SC_FORBIDDEN, errorMsg);\n+      LOG.warn(\"Received an invalid request file transfer request \"\n+          + \"from a secondary with storage info \" + theirStorageInfoString);\n+      throw new IOException(errorMsg);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateRequest(ServletContext context, Configuration conf,\n      HttpServletRequest request, HttpServletResponse response,\n      FSImage nnImage, String theirStorageInfoString) throws IOException {\n\n    if (UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 !isValidRequestor(context, request.getUserPrincipal().getName(),\n            conf)) {\n      String errorMsg \u003d \"Only Namenode, Secondary Namenode, and administrators may access \"\n          + \"this servlet\";\n      response.sendError(HttpServletResponse.SC_FORBIDDEN, errorMsg);\n      LOG.warn(\"Received non-NN/SNN/administrator request for image or edits from \"\n          + request.getUserPrincipal().getName()\n          + \" at \"\n          + request.getRemoteHost());\n      throw new IOException(errorMsg);\n    }\n\n    String myStorageInfoString \u003d nnImage.getStorage().toColonSeparatedString();\n    if (theirStorageInfoString !\u003d null\n        \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n      String errorMsg \u003d \"This namenode has storage info \" + myStorageInfoString\n          + \" but the secondary expected \" + theirStorageInfoString;\n      response.sendError(HttpServletResponse.SC_FORBIDDEN, errorMsg);\n      LOG.warn(\"Received an invalid request file transfer request \"\n          + \"from a secondary with storage info \" + theirStorageInfoString);\n      throw new IOException(errorMsg);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ImageServlet.java"
    }
  }
}