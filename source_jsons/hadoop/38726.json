{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FiCaSchedulerApp.java",
  "functionName": "moveReservation",
  "functionId": "moveReservation___reservedContainer-RMContainer__sourceNode-FiCaSchedulerNode__targetNode-FiCaSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
  "functionStartLine": 1164,
  "functionEndLine": 1221,
  "numCommitsSeen": 93,
  "timeTaken": 3529,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "ce832059db077fa95922198b066a737ed4f609fe"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "ce832059db077fa95922198b066a737ed4f609fe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,58 @@\n   public boolean moveReservation(RMContainer reservedContainer,\n       FiCaSchedulerNode sourceNode, FiCaSchedulerNode targetNode) {\n     writeLock.lock();\n     try {\n       if (!sourceNode.getPartition().equals(targetNode.getPartition())) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\n-              \"Failed to move reservation, two nodes are in different partition\");\n-        }\n+        LOG.debug(\"Failed to move reservation, two nodes are in\"\n+            + \" different partition\");\n         return false;\n       }\n \n       // Update reserved container to node map\n       Map\u003cNodeId, RMContainer\u003e map \u003d reservedContainers.get(\n           reservedContainer.getReservedSchedulerKey());\n       if (null \u003d\u003d map) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Cannot find reserved container map.\");\n-        }\n+        LOG.debug(\"Cannot find reserved container map.\");\n         return false;\n       }\n \n       // Check if reserved container changed\n       if (sourceNode.getReservedContainer() !\u003d reservedContainer) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"To-be-moved container already updated.\");\n-        }\n+        LOG.debug(\"To-be-moved container already updated.\");\n         return false;\n       }\n \n       // Check if target node is empty, acquires lock of target node to make sure\n       // reservation happens transactional\n       synchronized (targetNode){\n         if (targetNode.getReservedContainer() !\u003d null) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Target node is already occupied before moving\");\n-          }\n+          LOG.debug(\"Target node is already occupied before moving\");\n         }\n \n         try {\n           targetNode.reserveResource(this,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n         } catch (IllegalStateException e) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Reserve on target node failed, e\u003d\", e);\n-          }\n+          LOG.debug(\"Reserve on target node failed, e\u003d{}\", e);\n           return false;\n         }\n \n         // Set source node\u0027s reserved container to null\n         sourceNode.setReservedContainer(null);\n         map.remove(sourceNode.getNodeID());\n \n         // Update reserved container\n         reservedContainer.handle(\n             new RMContainerReservedEvent(reservedContainer.getContainerId(),\n                 reservedContainer.getReservedResource(), targetNode.getNodeID(),\n                 reservedContainer.getReservedSchedulerKey()));\n \n         // Add to target node\n         map.put(targetNode.getNodeID(), reservedContainer);\n \n         return true;\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveReservation(RMContainer reservedContainer,\n      FiCaSchedulerNode sourceNode, FiCaSchedulerNode targetNode) {\n    writeLock.lock();\n    try {\n      if (!sourceNode.getPartition().equals(targetNode.getPartition())) {\n        LOG.debug(\"Failed to move reservation, two nodes are in\"\n            + \" different partition\");\n        return false;\n      }\n\n      // Update reserved container to node map\n      Map\u003cNodeId, RMContainer\u003e map \u003d reservedContainers.get(\n          reservedContainer.getReservedSchedulerKey());\n      if (null \u003d\u003d map) {\n        LOG.debug(\"Cannot find reserved container map.\");\n        return false;\n      }\n\n      // Check if reserved container changed\n      if (sourceNode.getReservedContainer() !\u003d reservedContainer) {\n        LOG.debug(\"To-be-moved container already updated.\");\n        return false;\n      }\n\n      // Check if target node is empty, acquires lock of target node to make sure\n      // reservation happens transactional\n      synchronized (targetNode){\n        if (targetNode.getReservedContainer() !\u003d null) {\n          LOG.debug(\"Target node is already occupied before moving\");\n        }\n\n        try {\n          targetNode.reserveResource(this,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n        } catch (IllegalStateException e) {\n          LOG.debug(\"Reserve on target node failed, e\u003d{}\", e);\n          return false;\n        }\n\n        // Set source node\u0027s reserved container to null\n        sourceNode.setReservedContainer(null);\n        map.remove(sourceNode.getNodeID());\n\n        // Update reserved container\n        reservedContainer.handle(\n            new RMContainerReservedEvent(reservedContainer.getContainerId(),\n                reservedContainer.getReservedResource(), targetNode.getNodeID(),\n                reservedContainer.getReservedSchedulerKey()));\n\n        // Add to target node\n        map.put(targetNode.getNodeID(), reservedContainer);\n\n        return true;\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   public boolean moveReservation(RMContainer reservedContainer,\n       FiCaSchedulerNode sourceNode, FiCaSchedulerNode targetNode) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       if (!sourceNode.getPartition().equals(targetNode.getPartition())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"Failed to move reservation, two nodes are in different partition\");\n         }\n         return false;\n       }\n \n       // Update reserved container to node map\n       Map\u003cNodeId, RMContainer\u003e map \u003d reservedContainers.get(\n           reservedContainer.getReservedSchedulerKey());\n       if (null \u003d\u003d map) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Cannot find reserved container map.\");\n         }\n         return false;\n       }\n \n       // Check if reserved container changed\n       if (sourceNode.getReservedContainer() !\u003d reservedContainer) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"To-be-moved container already updated.\");\n         }\n         return false;\n       }\n \n       // Check if target node is empty, acquires lock of target node to make sure\n       // reservation happens transactional\n       synchronized (targetNode){\n         if (targetNode.getReservedContainer() !\u003d null) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Target node is already occupied before moving\");\n           }\n         }\n \n         try {\n           targetNode.reserveResource(this,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n         } catch (IllegalStateException e) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Reserve on target node failed, e\u003d\", e);\n           }\n           return false;\n         }\n \n         // Set source node\u0027s reserved container to null\n         sourceNode.setReservedContainer(null);\n         map.remove(sourceNode.getNodeID());\n \n         // Update reserved container\n         reservedContainer.handle(\n             new RMContainerReservedEvent(reservedContainer.getContainerId(),\n                 reservedContainer.getReservedResource(), targetNode.getNodeID(),\n                 reservedContainer.getReservedSchedulerKey()));\n \n         // Add to target node\n         map.put(targetNode.getNodeID(), reservedContainer);\n \n         return true;\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveReservation(RMContainer reservedContainer,\n      FiCaSchedulerNode sourceNode, FiCaSchedulerNode targetNode) {\n    writeLock.lock();\n    try {\n      if (!sourceNode.getPartition().equals(targetNode.getPartition())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Failed to move reservation, two nodes are in different partition\");\n        }\n        return false;\n      }\n\n      // Update reserved container to node map\n      Map\u003cNodeId, RMContainer\u003e map \u003d reservedContainers.get(\n          reservedContainer.getReservedSchedulerKey());\n      if (null \u003d\u003d map) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cannot find reserved container map.\");\n        }\n        return false;\n      }\n\n      // Check if reserved container changed\n      if (sourceNode.getReservedContainer() !\u003d reservedContainer) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"To-be-moved container already updated.\");\n        }\n        return false;\n      }\n\n      // Check if target node is empty, acquires lock of target node to make sure\n      // reservation happens transactional\n      synchronized (targetNode){\n        if (targetNode.getReservedContainer() !\u003d null) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Target node is already occupied before moving\");\n          }\n        }\n\n        try {\n          targetNode.reserveResource(this,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n        } catch (IllegalStateException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Reserve on target node failed, e\u003d\", e);\n          }\n          return false;\n        }\n\n        // Set source node\u0027s reserved container to null\n        sourceNode.setReservedContainer(null);\n        map.remove(sourceNode.getNodeID());\n\n        // Update reserved container\n        reservedContainer.handle(\n            new RMContainerReservedEvent(reservedContainer.getContainerId(),\n                reservedContainer.getReservedResource(), targetNode.getNodeID(),\n                reservedContainer.getReservedSchedulerKey()));\n\n        // Add to target node\n        map.put(targetNode.getNodeID(), reservedContainer);\n\n        return true;\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "ce832059db077fa95922198b066a737ed4f609fe": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5864. Capacity Scheduler - Queue Priorities. (wangda)\n",
      "commitDate": "23/01/17 10:52 AM",
      "commitName": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,68 @@\n+  public boolean moveReservation(RMContainer reservedContainer,\n+      FiCaSchedulerNode sourceNode, FiCaSchedulerNode targetNode) {\n+    try {\n+      writeLock.lock();\n+      if (!sourceNode.getPartition().equals(targetNode.getPartition())) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+              \"Failed to move reservation, two nodes are in different partition\");\n+        }\n+        return false;\n+      }\n+\n+      // Update reserved container to node map\n+      Map\u003cNodeId, RMContainer\u003e map \u003d reservedContainers.get(\n+          reservedContainer.getReservedSchedulerKey());\n+      if (null \u003d\u003d map) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Cannot find reserved container map.\");\n+        }\n+        return false;\n+      }\n+\n+      // Check if reserved container changed\n+      if (sourceNode.getReservedContainer() !\u003d reservedContainer) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"To-be-moved container already updated.\");\n+        }\n+        return false;\n+      }\n+\n+      // Check if target node is empty, acquires lock of target node to make sure\n+      // reservation happens transactional\n+      synchronized (targetNode){\n+        if (targetNode.getReservedContainer() !\u003d null) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Target node is already occupied before moving\");\n+          }\n+        }\n+\n+        try {\n+          targetNode.reserveResource(this,\n+              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n+        } catch (IllegalStateException e) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Reserve on target node failed, e\u003d\", e);\n+          }\n+          return false;\n+        }\n+\n+        // Set source node\u0027s reserved container to null\n+        sourceNode.setReservedContainer(null);\n+        map.remove(sourceNode.getNodeID());\n+\n+        // Update reserved container\n+        reservedContainer.handle(\n+            new RMContainerReservedEvent(reservedContainer.getContainerId(),\n+                reservedContainer.getReservedResource(), targetNode.getNodeID(),\n+                reservedContainer.getReservedSchedulerKey()));\n+\n+        // Add to target node\n+        map.put(targetNode.getNodeID(), reservedContainer);\n+\n+        return true;\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean moveReservation(RMContainer reservedContainer,\n      FiCaSchedulerNode sourceNode, FiCaSchedulerNode targetNode) {\n    try {\n      writeLock.lock();\n      if (!sourceNode.getPartition().equals(targetNode.getPartition())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Failed to move reservation, two nodes are in different partition\");\n        }\n        return false;\n      }\n\n      // Update reserved container to node map\n      Map\u003cNodeId, RMContainer\u003e map \u003d reservedContainers.get(\n          reservedContainer.getReservedSchedulerKey());\n      if (null \u003d\u003d map) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cannot find reserved container map.\");\n        }\n        return false;\n      }\n\n      // Check if reserved container changed\n      if (sourceNode.getReservedContainer() !\u003d reservedContainer) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"To-be-moved container already updated.\");\n        }\n        return false;\n      }\n\n      // Check if target node is empty, acquires lock of target node to make sure\n      // reservation happens transactional\n      synchronized (targetNode){\n        if (targetNode.getReservedContainer() !\u003d null) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Target node is already occupied before moving\");\n          }\n        }\n\n        try {\n          targetNode.reserveResource(this,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n        } catch (IllegalStateException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Reserve on target node failed, e\u003d\", e);\n          }\n          return false;\n        }\n\n        // Set source node\u0027s reserved container to null\n        sourceNode.setReservedContainer(null);\n        map.remove(sourceNode.getNodeID());\n\n        // Update reserved container\n        reservedContainer.handle(\n            new RMContainerReservedEvent(reservedContainer.getContainerId(),\n                reservedContainer.getReservedResource(), targetNode.getNodeID(),\n                reservedContainer.getReservedSchedulerKey()));\n\n        // Add to target node\n        map.put(targetNode.getNodeID(), reservedContainer);\n\n        return true;\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
    }
  }
}