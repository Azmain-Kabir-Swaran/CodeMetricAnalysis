{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "submitReservation",
  "functionId": "submitReservation___request-ReservationSubmissionRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 1316,
  "functionEndLine": 1372,
  "numCommitsSeen": 128,
  "timeTaken": 4414,
  "changeHistory": [
    "b63ae854f9f5a900ca860dcb26c30785af32bde0",
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "013532a95e63d7c53e601be530021d6d5a15ab7f",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e"
  ],
  "changeHistoryShort": {
    "b63ae854f9f5a900ca860dcb26c30785af32bde0": "Ybodychange",
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "013532a95e63d7c53e601be530021d6d5a15ab7f": "Ybodychange",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": "Ybodychange",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b63ae854f9f5a900ca860dcb26c30785af32bde0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6379. Remove unused argument in ClientRMService. Contributed by Kai Sasaki.\n",
      "commitDate": "26/03/17 7:23 PM",
      "commitName": "b63ae854f9f5a900ca860dcb26c30785af32bde0",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/03/17 9:56 AM",
      "commitNameOld": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 1.39,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public ReservationSubmissionResponse submitReservation(\n       ReservationSubmissionRequest request) throws YarnException, IOException {\n     // Check if reservation system is enabled\n-    checkReservationSystem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n+    checkReservationSystem();\n     ReservationSubmissionResponse response \u003d\n         recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n     ReservationId reservationId \u003d request.getReservationId();\n     // Validate the input\n     Plan plan \u003d\n         rValidator.validateReservationSubmissionRequest(reservationSystem,\n             request, reservationId);\n \n     ReservationAllocation allocation \u003d plan.getReservationById(reservationId);\n \n     if (allocation !\u003d null) {\n       boolean isNewDefinition \u003d !allocation.getReservationDefinition().equals(\n           request.getReservationDefinition());\n       if (isNewDefinition) {\n         String message \u003d \"Reservation allocation already exists with the \" +\n             \"reservation id \" + reservationId.toString() + \", but a different\" +\n             \" reservation definition was provided. Please try again with a \" +\n             \"new reservation id, or consider updating the reservation instead.\";\n         throw RPCUtil.getRemoteException(message);\n       } else {\n         return response;\n       }\n     }\n \n     // Check ACLs\n     String queueName \u003d request.getQueue();\n     String user \u003d\n         checkReservationACLs(queueName,\n             AuditConstants.SUBMIT_RESERVATION_REQUEST, null);\n     try {\n       // Try to place the reservation using the agent\n       boolean result \u003d\n           plan.getReservationAgent().createReservation(reservationId, user,\n               plan, request.getReservationDefinition());\n       if (result) {\n         // add the reservation id to valid ones maintained by reservation\n         // system\n         reservationSystem.setQueueForReservation(reservationId, queueName);\n         // create the reservation synchronously if required\n         refreshScheduler(queueName, request.getReservationDefinition(),\n             reservationId.toString());\n         // return the reservation id\n       }\n     } catch (PlanningException e) {\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Unable to create the reservation: \" + reservationId);\n       throw RPCUtil.getRemoteException(e);\n     }\n     RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n         \"ClientRMService: \" + reservationId);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationSubmissionResponse submitReservation(\n      ReservationSubmissionRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSystem();\n    ReservationSubmissionResponse response \u003d\n        recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n    ReservationId reservationId \u003d request.getReservationId();\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationSubmissionRequest(reservationSystem,\n            request, reservationId);\n\n    ReservationAllocation allocation \u003d plan.getReservationById(reservationId);\n\n    if (allocation !\u003d null) {\n      boolean isNewDefinition \u003d !allocation.getReservationDefinition().equals(\n          request.getReservationDefinition());\n      if (isNewDefinition) {\n        String message \u003d \"Reservation allocation already exists with the \" +\n            \"reservation id \" + reservationId.toString() + \", but a different\" +\n            \" reservation definition was provided. Please try again with a \" +\n            \"new reservation id, or consider updating the reservation instead.\";\n        throw RPCUtil.getRemoteException(message);\n      } else {\n        return response;\n      }\n    }\n\n    // Check ACLs\n    String queueName \u003d request.getQueue();\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.SUBMIT_RESERVATION_REQUEST, null);\n    try {\n      // Try to place the reservation using the agent\n      boolean result \u003d\n          plan.getReservationAgent().createReservation(reservationId, user,\n              plan, request.getReservationDefinition());\n      if (result) {\n        // add the reservation id to valid ones maintained by reservation\n        // system\n        reservationSystem.setQueueForReservation(reservationId, queueName);\n        // create the reservation synchronously if required\n        refreshScheduler(queueName, request.getReservationDefinition(),\n            reservationId.toString());\n        // return the reservation id\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to create the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public ReservationSubmissionResponse submitReservation(\n       ReservationSubmissionRequest request) throws YarnException, IOException {\n     // Check if reservation system is enabled\n-    checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n+    checkReservationSystem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n     ReservationSubmissionResponse response \u003d\n         recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n     ReservationId reservationId \u003d request.getReservationId();\n     // Validate the input\n     Plan plan \u003d\n         rValidator.validateReservationSubmissionRequest(reservationSystem,\n             request, reservationId);\n \n     ReservationAllocation allocation \u003d plan.getReservationById(reservationId);\n \n     if (allocation !\u003d null) {\n       boolean isNewDefinition \u003d !allocation.getReservationDefinition().equals(\n           request.getReservationDefinition());\n       if (isNewDefinition) {\n         String message \u003d \"Reservation allocation already exists with the \" +\n             \"reservation id \" + reservationId.toString() + \", but a different\" +\n             \" reservation definition was provided. Please try again with a \" +\n             \"new reservation id, or consider updating the reservation instead.\";\n         throw RPCUtil.getRemoteException(message);\n       } else {\n         return response;\n       }\n     }\n \n     // Check ACLs\n     String queueName \u003d request.getQueue();\n     String user \u003d\n         checkReservationACLs(queueName,\n             AuditConstants.SUBMIT_RESERVATION_REQUEST, null);\n     try {\n       // Try to place the reservation using the agent\n       boolean result \u003d\n           plan.getReservationAgent().createReservation(reservationId, user,\n               plan, request.getReservationDefinition());\n       if (result) {\n         // add the reservation id to valid ones maintained by reservation\n         // system\n         reservationSystem.setQueueForReservation(reservationId, queueName);\n         // create the reservation synchronously if required\n         refreshScheduler(queueName, request.getReservationDefinition(),\n             reservationId.toString());\n         // return the reservation id\n       }\n     } catch (PlanningException e) {\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Unable to create the reservation: \" + reservationId);\n       throw RPCUtil.getRemoteException(e);\n     }\n     RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n         \"ClientRMService: \" + reservationId);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationSubmissionResponse submitReservation(\n      ReservationSubmissionRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSystem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n    ReservationSubmissionResponse response \u003d\n        recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n    ReservationId reservationId \u003d request.getReservationId();\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationSubmissionRequest(reservationSystem,\n            request, reservationId);\n\n    ReservationAllocation allocation \u003d plan.getReservationById(reservationId);\n\n    if (allocation !\u003d null) {\n      boolean isNewDefinition \u003d !allocation.getReservationDefinition().equals(\n          request.getReservationDefinition());\n      if (isNewDefinition) {\n        String message \u003d \"Reservation allocation already exists with the \" +\n            \"reservation id \" + reservationId.toString() + \", but a different\" +\n            \" reservation definition was provided. Please try again with a \" +\n            \"new reservation id, or consider updating the reservation instead.\";\n        throw RPCUtil.getRemoteException(message);\n      } else {\n        return response;\n      }\n    }\n\n    // Check ACLs\n    String queueName \u003d request.getQueue();\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.SUBMIT_RESERVATION_REQUEST, null);\n    try {\n      // Try to place the reservation using the agent\n      boolean result \u003d\n          plan.getReservationAgent().createReservation(reservationId, user,\n              plan, request.getReservationDefinition());\n      if (result) {\n        // add the reservation id to valid ones maintained by reservation\n        // system\n        reservationSystem.setQueueForReservation(reservationId, queueName);\n        // create the reservation synchronously if required\n        refreshScheduler(queueName, request.getReservationDefinition(),\n            reservationId.toString());\n        // return the reservation id\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to create the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "013532a95e63d7c53e601be530021d6d5a15ab7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4957. Add getNewReservation in ApplicationClientProtocol (Sean Po via curino)\n",
      "commitDate": "25/05/16 4:55 PM",
      "commitName": "013532a95e63d7c53e601be530021d6d5a15ab7f",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "12/05/16 1:28 PM",
      "commitNameOld": "013000fbc2081c2b7e78b790fc6d847de92b9384",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 13.14,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,57 @@\n   public ReservationSubmissionResponse submitReservation(\n       ReservationSubmissionRequest request) throws YarnException, IOException {\n     // Check if reservation system is enabled\n     checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n     ReservationSubmissionResponse response \u003d\n         recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n-    // Create a new Reservation Id\n-    ReservationId reservationId \u003d reservationSystem.getNewReservationId();\n+    ReservationId reservationId \u003d request.getReservationId();\n     // Validate the input\n     Plan plan \u003d\n         rValidator.validateReservationSubmissionRequest(reservationSystem,\n             request, reservationId);\n+\n+    ReservationAllocation allocation \u003d plan.getReservationById(reservationId);\n+\n+    if (allocation !\u003d null) {\n+      boolean isNewDefinition \u003d !allocation.getReservationDefinition().equals(\n+          request.getReservationDefinition());\n+      if (isNewDefinition) {\n+        String message \u003d \"Reservation allocation already exists with the \" +\n+            \"reservation id \" + reservationId.toString() + \", but a different\" +\n+            \" reservation definition was provided. Please try again with a \" +\n+            \"new reservation id, or consider updating the reservation instead.\";\n+        throw RPCUtil.getRemoteException(message);\n+      } else {\n+        return response;\n+      }\n+    }\n+\n     // Check ACLs\n     String queueName \u003d request.getQueue();\n     String user \u003d\n         checkReservationACLs(queueName,\n             AuditConstants.SUBMIT_RESERVATION_REQUEST, null);\n     try {\n       // Try to place the reservation using the agent\n       boolean result \u003d\n           plan.getReservationAgent().createReservation(reservationId, user,\n               plan, request.getReservationDefinition());\n       if (result) {\n         // add the reservation id to valid ones maintained by reservation\n         // system\n         reservationSystem.setQueueForReservation(reservationId, queueName);\n         // create the reservation synchronously if required\n         refreshScheduler(queueName, request.getReservationDefinition(),\n             reservationId.toString());\n         // return the reservation id\n-        response.setReservationId(reservationId);\n       }\n     } catch (PlanningException e) {\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Unable to create the reservation: \" + reservationId);\n       throw RPCUtil.getRemoteException(e);\n     }\n     RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n         \"ClientRMService: \" + reservationId);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationSubmissionResponse submitReservation(\n      ReservationSubmissionRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n    ReservationSubmissionResponse response \u003d\n        recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n    ReservationId reservationId \u003d request.getReservationId();\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationSubmissionRequest(reservationSystem,\n            request, reservationId);\n\n    ReservationAllocation allocation \u003d plan.getReservationById(reservationId);\n\n    if (allocation !\u003d null) {\n      boolean isNewDefinition \u003d !allocation.getReservationDefinition().equals(\n          request.getReservationDefinition());\n      if (isNewDefinition) {\n        String message \u003d \"Reservation allocation already exists with the \" +\n            \"reservation id \" + reservationId.toString() + \", but a different\" +\n            \" reservation definition was provided. Please try again with a \" +\n            \"new reservation id, or consider updating the reservation instead.\";\n        throw RPCUtil.getRemoteException(message);\n      } else {\n        return response;\n      }\n    }\n\n    // Check ACLs\n    String queueName \u003d request.getQueue();\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.SUBMIT_RESERVATION_REQUEST, null);\n    try {\n      // Try to place the reservation using the agent\n      boolean result \u003d\n          plan.getReservationAgent().createReservation(reservationId, user,\n              plan, request.getReservationDefinition());\n      if (result) {\n        // add the reservation id to valid ones maintained by reservation\n        // system\n        reservationSystem.setQueueForReservation(reservationId, queueName);\n        // create the reservation synchronously if required\n        refreshScheduler(queueName, request.getReservationDefinition(),\n            reservationId.toString());\n        // return the reservation id\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to create the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
      "commitDate": "11/02/16 10:47 AM",
      "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/02/16 6:17 PM",
      "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.69,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public ReservationSubmissionResponse submitReservation(\n       ReservationSubmissionRequest request) throws YarnException, IOException {\n     // Check if reservation system is enabled\n     checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n     ReservationSubmissionResponse response \u003d\n         recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n     // Create a new Reservation Id\n     ReservationId reservationId \u003d reservationSystem.getNewReservationId();\n     // Validate the input\n     Plan plan \u003d\n         rValidator.validateReservationSubmissionRequest(reservationSystem,\n             request, reservationId);\n     // Check ACLs\n     String queueName \u003d request.getQueue();\n     String user \u003d\n         checkReservationACLs(queueName,\n-            AuditConstants.SUBMIT_RESERVATION_REQUEST);\n+            AuditConstants.SUBMIT_RESERVATION_REQUEST, null);\n     try {\n       // Try to place the reservation using the agent\n       boolean result \u003d\n           plan.getReservationAgent().createReservation(reservationId, user,\n               plan, request.getReservationDefinition());\n       if (result) {\n         // add the reservation id to valid ones maintained by reservation\n         // system\n         reservationSystem.setQueueForReservation(reservationId, queueName);\n         // create the reservation synchronously if required\n         refreshScheduler(queueName, request.getReservationDefinition(),\n             reservationId.toString());\n         // return the reservation id\n         response.setReservationId(reservationId);\n       }\n     } catch (PlanningException e) {\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Unable to create the reservation: \" + reservationId);\n       throw RPCUtil.getRemoteException(e);\n     }\n     RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n         \"ClientRMService: \" + reservationId);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationSubmissionResponse submitReservation(\n      ReservationSubmissionRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n    ReservationSubmissionResponse response \u003d\n        recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n    // Create a new Reservation Id\n    ReservationId reservationId \u003d reservationSystem.getNewReservationId();\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationSubmissionRequest(reservationSystem,\n            request, reservationId);\n    // Check ACLs\n    String queueName \u003d request.getQueue();\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.SUBMIT_RESERVATION_REQUEST, null);\n    try {\n      // Try to place the reservation using the agent\n      boolean result \u003d\n          plan.getReservationAgent().createReservation(reservationId, user,\n              plan, request.getReservationDefinition());\n      if (result) {\n        // add the reservation id to valid ones maintained by reservation\n        // system\n        reservationSystem.setQueueForReservation(reservationId, queueName);\n        // create the reservation synchronously if required\n        refreshScheduler(queueName, request.getReservationDefinition(),\n            reservationId.toString());\n        // return the reservation id\n        response.setReservationId(reservationId);\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to create the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2080. Integrating reservation system with ResourceManager and client-RM protocol. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 8baeaead8532898163f1006276b731a237b1a559)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,42 @@\n+  public ReservationSubmissionResponse submitReservation(\n+      ReservationSubmissionRequest request) throws YarnException, IOException {\n+    // Check if reservation system is enabled\n+    checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n+    ReservationSubmissionResponse response \u003d\n+        recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n+    // Create a new Reservation Id\n+    ReservationId reservationId \u003d reservationSystem.getNewReservationId();\n+    // Validate the input\n+    Plan plan \u003d\n+        rValidator.validateReservationSubmissionRequest(reservationSystem,\n+            request, reservationId);\n+    // Check ACLs\n+    String queueName \u003d request.getQueue();\n+    String user \u003d\n+        checkReservationACLs(queueName,\n+            AuditConstants.SUBMIT_RESERVATION_REQUEST);\n+    try {\n+      // Try to place the reservation using the agent\n+      boolean result \u003d\n+          plan.getReservationAgent().createReservation(reservationId, user,\n+              plan, request.getReservationDefinition());\n+      if (result) {\n+        // add the reservation id to valid ones maintained by reservation\n+        // system\n+        reservationSystem.setQueueForReservation(reservationId, queueName);\n+        // create the reservation synchronously if required\n+        refreshScheduler(queueName, request.getReservationDefinition(),\n+            reservationId.toString());\n+        // return the reservation id\n+        response.setReservationId(reservationId);\n+      }\n+    } catch (PlanningException e) {\n+      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n+          e.getMessage(), \"ClientRMService\",\n+          \"Unable to create the reservation: \" + reservationId);\n+      throw RPCUtil.getRemoteException(e);\n+    }\n+    RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n+        \"ClientRMService: \" + reservationId);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationSubmissionResponse submitReservation(\n      ReservationSubmissionRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);\n    ReservationSubmissionResponse response \u003d\n        recordFactory.newRecordInstance(ReservationSubmissionResponse.class);\n    // Create a new Reservation Id\n    ReservationId reservationId \u003d reservationSystem.getNewReservationId();\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationSubmissionRequest(reservationSystem,\n            request, reservationId);\n    // Check ACLs\n    String queueName \u003d request.getQueue();\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.SUBMIT_RESERVATION_REQUEST);\n    try {\n      // Try to place the reservation using the agent\n      boolean result \u003d\n          plan.getReservationAgent().createReservation(reservationId, user,\n              plan, request.getReservationDefinition());\n      if (result) {\n        // add the reservation id to valid ones maintained by reservation\n        // system\n        reservationSystem.setQueueForReservation(reservationId, queueName);\n        // create the reservation synchronously if required\n        refreshScheduler(queueName, request.getReservationDefinition(),\n            reservationId.toString());\n        // return the reservation id\n        response.setReservationId(reservationId);\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to create the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}