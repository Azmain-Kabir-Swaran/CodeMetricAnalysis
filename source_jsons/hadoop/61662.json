{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Log4jWarningErrorMetricsAppender.java",
  "functionName": "getElementsAndCounts",
  "functionId": "getElementsAndCounts___map-Map__String,SortedMap__Long,Integer______cutoffs-List__Long____purgeInformation-SortedSet__PurgeElement__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Log4jWarningErrorMetricsAppender.java",
  "functionStartLine": 320,
  "functionEndLine": 351,
  "numCommitsSeen": 2,
  "timeTaken": 529,
  "changeHistory": [
    "bad070fe15a642cc6f3a165612fbd272187e03cb"
  ],
  "changeHistoryShort": {
    "bad070fe15a642cc6f3a165612fbd272187e03cb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bad070fe15a642cc6f3a165612fbd272187e03cb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2901. Add errors and warning metrics page to RM, NM web UI. (Varun Vasudev via wangda)\n",
      "commitDate": "02/04/15 5:23 PM",
      "commitName": "bad070fe15a642cc6f3a165612fbd272187e03cb",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,32 @@\n+  private List\u003cMap\u003cString, Element\u003e\u003e getElementsAndCounts(\n+      Map\u003cString, SortedMap\u003cLong, Integer\u003e\u003e map, List\u003cLong\u003e cutoffs,\n+      SortedSet\u003cPurgeElement\u003e purgeInformation) {\n+    if (purgeInformation.size() \u003e maxUniqueMessages) {\n+      ErrorAndWarningsCleanup cleanup \u003d new ErrorAndWarningsCleanup();\n+      long cutoff \u003d Time.now() - (messageAgeLimitSeconds * 1000);\n+      cutoff \u003d (cutoff / 1000);\n+      cleanup.cleanupMessages(map, purgeInformation, cutoff, maxUniqueMessages);\n+    }\n+    List\u003cMap\u003cString, Element\u003e\u003e ret \u003d new ArrayList\u003c\u003e(cutoffs.size());\n+    for (int i \u003d 0; i \u003c cutoffs.size(); ++i) {\n+      ret.add(new HashMap\u003cString, Element\u003e());\n+    }\n+    synchronized (lock) {\n+      for (Map.Entry\u003cString, SortedMap\u003cLong, Integer\u003e\u003e element : map.entrySet()) {\n+        for (int i \u003d 0; i \u003c cutoffs.size(); ++i) {\n+          Map\u003cString, Element\u003e retMap \u003d ret.get(i);\n+          SortedMap\u003cLong, Integer\u003e qualifyingTimes \u003d\n+              element.getValue().tailMap(cutoffs.get(i));\n+          long count \u003d 0;\n+          for (Map.Entry\u003cLong, Integer\u003e entry : qualifyingTimes.entrySet()) {\n+            count +\u003d entry.getValue();\n+          }\n+          if (!qualifyingTimes.isEmpty()) {\n+            retMap.put(element.getKey(),\n+              new Element(count, qualifyingTimes.lastKey()));\n+          }\n+        }\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cMap\u003cString, Element\u003e\u003e getElementsAndCounts(\n      Map\u003cString, SortedMap\u003cLong, Integer\u003e\u003e map, List\u003cLong\u003e cutoffs,\n      SortedSet\u003cPurgeElement\u003e purgeInformation) {\n    if (purgeInformation.size() \u003e maxUniqueMessages) {\n      ErrorAndWarningsCleanup cleanup \u003d new ErrorAndWarningsCleanup();\n      long cutoff \u003d Time.now() - (messageAgeLimitSeconds * 1000);\n      cutoff \u003d (cutoff / 1000);\n      cleanup.cleanupMessages(map, purgeInformation, cutoff, maxUniqueMessages);\n    }\n    List\u003cMap\u003cString, Element\u003e\u003e ret \u003d new ArrayList\u003c\u003e(cutoffs.size());\n    for (int i \u003d 0; i \u003c cutoffs.size(); ++i) {\n      ret.add(new HashMap\u003cString, Element\u003e());\n    }\n    synchronized (lock) {\n      for (Map.Entry\u003cString, SortedMap\u003cLong, Integer\u003e\u003e element : map.entrySet()) {\n        for (int i \u003d 0; i \u003c cutoffs.size(); ++i) {\n          Map\u003cString, Element\u003e retMap \u003d ret.get(i);\n          SortedMap\u003cLong, Integer\u003e qualifyingTimes \u003d\n              element.getValue().tailMap(cutoffs.get(i));\n          long count \u003d 0;\n          for (Map.Entry\u003cLong, Integer\u003e entry : qualifyingTimes.entrySet()) {\n            count +\u003d entry.getValue();\n          }\n          if (!qualifyingTimes.isEmpty()) {\n            retMap.put(element.getKey(),\n              new Element(count, qualifyingTimes.lastKey()));\n          }\n        }\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Log4jWarningErrorMetricsAppender.java"
    }
  }
}