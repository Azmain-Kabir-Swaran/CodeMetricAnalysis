{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileUtil.java",
  "functionName": "compareFs",
  "functionId": "compareFs___srcFs-FileSystem__destFs-FileSystem",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
  "functionStartLine": 1603,
  "functionEndLine": 1640,
  "numCommitsSeen": 64,
  "timeTaken": 2258,
  "changeHistory": [
    "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67"
  ],
  "changeHistoryShort": {
    "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc": "Ymultichange(Ymovefromfile,Ybodychange)",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-12159. Move DistCpUtils#compareFs() to org.apache.hadoop.fs.FileUtil and fix for HA namespaces (rchiang via rkanter)\n",
      "commitDate": "30/06/15 4:49 PM",
      "commitName": "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-12159. Move DistCpUtils#compareFs() to org.apache.hadoop.fs.FileUtil and fix for HA namespaces (rchiang via rkanter)\n",
          "commitDate": "30/06/15 4:49 PM",
          "commitName": "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "30/06/15 4:46 PM",
          "commitNameOld": "ad60807238c4f7779cb0685e7d39ca0c50e01b2f",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n   public static boolean compareFs(FileSystem srcFs, FileSystem destFs) {\n+    if (srcFs\u003d\u003dnull || destFs\u003d\u003dnull) {\n+      return false;\n+    }\n     URI srcUri \u003d srcFs.getUri();\n     URI dstUri \u003d destFs.getUri();\n-    if (srcUri.getScheme() \u003d\u003d null) {\n+    if (srcUri.getScheme()\u003d\u003dnull) {\n       return false;\n     }\n     if (!srcUri.getScheme().equals(dstUri.getScheme())) {\n       return false;\n     }\n     String srcHost \u003d srcUri.getHost();\n     String dstHost \u003d dstUri.getHost();\n-    if ((srcHost !\u003d null) \u0026\u0026 (dstHost !\u003d null)) {\n+    if ((srcHost!\u003dnull) \u0026\u0026 (dstHost!\u003dnull)) {\n+      if (srcHost.equals(dstHost)) {\n+        return srcUri.getPort()\u003d\u003ddstUri.getPort();\n+      }\n       try {\n         srcHost \u003d InetAddress.getByName(srcHost).getCanonicalHostName();\n         dstHost \u003d InetAddress.getByName(dstHost).getCanonicalHostName();\n-      } catch(UnknownHostException ue) {\n-        if (LOG.isDebugEnabled())\n+      } catch (UnknownHostException ue) {\n+        if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Could not compare file-systems. Unknown host: \", ue);\n+        }\n         return false;\n       }\n       if (!srcHost.equals(dstHost)) {\n         return false;\n       }\n-    }\n-    else if (srcHost \u003d\u003d null \u0026\u0026 dstHost !\u003d null) {\n+    } else if (srcHost\u003d\u003dnull \u0026\u0026 dstHost!\u003dnull) {\n+      return false;\n+    } else if (srcHost!\u003dnull) {\n       return false;\n     }\n-    else if (srcHost !\u003d null) {\n-      return false;\n-    }\n-\n-    //check for ports\n-\n-    return srcUri.getPort() \u003d\u003d dstUri.getPort();\n+    // check for ports\n+    return srcUri.getPort()\u003d\u003ddstUri.getPort();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean compareFs(FileSystem srcFs, FileSystem destFs) {\n    if (srcFs\u003d\u003dnull || destFs\u003d\u003dnull) {\n      return false;\n    }\n    URI srcUri \u003d srcFs.getUri();\n    URI dstUri \u003d destFs.getUri();\n    if (srcUri.getScheme()\u003d\u003dnull) {\n      return false;\n    }\n    if (!srcUri.getScheme().equals(dstUri.getScheme())) {\n      return false;\n    }\n    String srcHost \u003d srcUri.getHost();\n    String dstHost \u003d dstUri.getHost();\n    if ((srcHost!\u003dnull) \u0026\u0026 (dstHost!\u003dnull)) {\n      if (srcHost.equals(dstHost)) {\n        return srcUri.getPort()\u003d\u003ddstUri.getPort();\n      }\n      try {\n        srcHost \u003d InetAddress.getByName(srcHost).getCanonicalHostName();\n        dstHost \u003d InetAddress.getByName(dstHost).getCanonicalHostName();\n      } catch (UnknownHostException ue) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Could not compare file-systems. Unknown host: \", ue);\n        }\n        return false;\n      }\n      if (!srcHost.equals(dstHost)) {\n        return false;\n      }\n    } else if (srcHost\u003d\u003dnull \u0026\u0026 dstHost!\u003dnull) {\n      return false;\n    } else if (srcHost!\u003dnull) {\n      return false;\n    }\n    // check for ports\n    return srcUri.getPort()\u003d\u003ddstUri.getPort();\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "oldMethodName": "compareFs",
            "newMethodName": "compareFs"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12159. Move DistCpUtils#compareFs() to org.apache.hadoop.fs.FileUtil and fix for HA namespaces (rchiang via rkanter)\n",
          "commitDate": "30/06/15 4:49 PM",
          "commitName": "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "30/06/15 4:46 PM",
          "commitNameOld": "ad60807238c4f7779cb0685e7d39ca0c50e01b2f",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n   public static boolean compareFs(FileSystem srcFs, FileSystem destFs) {\n+    if (srcFs\u003d\u003dnull || destFs\u003d\u003dnull) {\n+      return false;\n+    }\n     URI srcUri \u003d srcFs.getUri();\n     URI dstUri \u003d destFs.getUri();\n-    if (srcUri.getScheme() \u003d\u003d null) {\n+    if (srcUri.getScheme()\u003d\u003dnull) {\n       return false;\n     }\n     if (!srcUri.getScheme().equals(dstUri.getScheme())) {\n       return false;\n     }\n     String srcHost \u003d srcUri.getHost();\n     String dstHost \u003d dstUri.getHost();\n-    if ((srcHost !\u003d null) \u0026\u0026 (dstHost !\u003d null)) {\n+    if ((srcHost!\u003dnull) \u0026\u0026 (dstHost!\u003dnull)) {\n+      if (srcHost.equals(dstHost)) {\n+        return srcUri.getPort()\u003d\u003ddstUri.getPort();\n+      }\n       try {\n         srcHost \u003d InetAddress.getByName(srcHost).getCanonicalHostName();\n         dstHost \u003d InetAddress.getByName(dstHost).getCanonicalHostName();\n-      } catch(UnknownHostException ue) {\n-        if (LOG.isDebugEnabled())\n+      } catch (UnknownHostException ue) {\n+        if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Could not compare file-systems. Unknown host: \", ue);\n+        }\n         return false;\n       }\n       if (!srcHost.equals(dstHost)) {\n         return false;\n       }\n-    }\n-    else if (srcHost \u003d\u003d null \u0026\u0026 dstHost !\u003d null) {\n+    } else if (srcHost\u003d\u003dnull \u0026\u0026 dstHost!\u003dnull) {\n+      return false;\n+    } else if (srcHost!\u003dnull) {\n       return false;\n     }\n-    else if (srcHost !\u003d null) {\n-      return false;\n-    }\n-\n-    //check for ports\n-\n-    return srcUri.getPort() \u003d\u003d dstUri.getPort();\n+    // check for ports\n+    return srcUri.getPort()\u003d\u003ddstUri.getPort();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean compareFs(FileSystem srcFs, FileSystem destFs) {\n    if (srcFs\u003d\u003dnull || destFs\u003d\u003dnull) {\n      return false;\n    }\n    URI srcUri \u003d srcFs.getUri();\n    URI dstUri \u003d destFs.getUri();\n    if (srcUri.getScheme()\u003d\u003dnull) {\n      return false;\n    }\n    if (!srcUri.getScheme().equals(dstUri.getScheme())) {\n      return false;\n    }\n    String srcHost \u003d srcUri.getHost();\n    String dstHost \u003d dstUri.getHost();\n    if ((srcHost!\u003dnull) \u0026\u0026 (dstHost!\u003dnull)) {\n      if (srcHost.equals(dstHost)) {\n        return srcUri.getPort()\u003d\u003ddstUri.getPort();\n      }\n      try {\n        srcHost \u003d InetAddress.getByName(srcHost).getCanonicalHostName();\n        dstHost \u003d InetAddress.getByName(dstHost).getCanonicalHostName();\n      } catch (UnknownHostException ue) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Could not compare file-systems. Unknown host: \", ue);\n        }\n        return false;\n      }\n      if (!srcHost.equals(dstHost)) {\n        return false;\n      }\n    } else if (srcHost\u003d\u003dnull \u0026\u0026 dstHost!\u003dnull) {\n      return false;\n    } else if (srcHost!\u003dnull) {\n      return false;\n    }\n    // check for ports\n    return srcUri.getPort()\u003d\u003ddstUri.getPort();\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2765. DistCp Rewrite. (Mithun Radhakrishnan via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:36 PM",
      "commitName": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,35 @@\n+  public static boolean compareFs(FileSystem srcFs, FileSystem destFs) {\n+    URI srcUri \u003d srcFs.getUri();\n+    URI dstUri \u003d destFs.getUri();\n+    if (srcUri.getScheme() \u003d\u003d null) {\n+      return false;\n+    }\n+    if (!srcUri.getScheme().equals(dstUri.getScheme())) {\n+      return false;\n+    }\n+    String srcHost \u003d srcUri.getHost();\n+    String dstHost \u003d dstUri.getHost();\n+    if ((srcHost !\u003d null) \u0026\u0026 (dstHost !\u003d null)) {\n+      try {\n+        srcHost \u003d InetAddress.getByName(srcHost).getCanonicalHostName();\n+        dstHost \u003d InetAddress.getByName(dstHost).getCanonicalHostName();\n+      } catch(UnknownHostException ue) {\n+        if (LOG.isDebugEnabled())\n+          LOG.debug(\"Could not compare file-systems. Unknown host: \", ue);\n+        return false;\n+      }\n+      if (!srcHost.equals(dstHost)) {\n+        return false;\n+      }\n+    }\n+    else if (srcHost \u003d\u003d null \u0026\u0026 dstHost !\u003d null) {\n+      return false;\n+    }\n+    else if (srcHost !\u003d null) {\n+      return false;\n+    }\n+\n+    //check for ports\n+\n+    return srcUri.getPort() \u003d\u003d dstUri.getPort();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean compareFs(FileSystem srcFs, FileSystem destFs) {\n    URI srcUri \u003d srcFs.getUri();\n    URI dstUri \u003d destFs.getUri();\n    if (srcUri.getScheme() \u003d\u003d null) {\n      return false;\n    }\n    if (!srcUri.getScheme().equals(dstUri.getScheme())) {\n      return false;\n    }\n    String srcHost \u003d srcUri.getHost();\n    String dstHost \u003d dstUri.getHost();\n    if ((srcHost !\u003d null) \u0026\u0026 (dstHost !\u003d null)) {\n      try {\n        srcHost \u003d InetAddress.getByName(srcHost).getCanonicalHostName();\n        dstHost \u003d InetAddress.getByName(dstHost).getCanonicalHostName();\n      } catch(UnknownHostException ue) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Could not compare file-systems. Unknown host: \", ue);\n        return false;\n      }\n      if (!srcHost.equals(dstHost)) {\n        return false;\n      }\n    }\n    else if (srcHost \u003d\u003d null \u0026\u0026 dstHost !\u003d null) {\n      return false;\n    }\n    else if (srcHost !\u003d null) {\n      return false;\n    }\n\n    //check for ports\n\n    return srcUri.getPort() \u003d\u003d dstUri.getPort();\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java"
    }
  }
}