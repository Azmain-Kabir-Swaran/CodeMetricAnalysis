{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "applyChildDefaults",
  "functionId": "applyChildDefaults",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1705,
  "functionEndLine": 1725,
  "numCommitsSeen": 226,
  "timeTaken": 3578,
  "changeHistory": [
    "99292adcefdc6b8f280b8e100605fb39f755c38a",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57",
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b"
  ],
  "changeHistoryShort": {
    "99292adcefdc6b8f280b8e100605fb39f755c38a": "Ybodychange",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": "Ybodychange",
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "99292adcefdc6b8f280b8e100605fb39f755c38a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2162. Add ability in Fair Scheduler to optionally configure maxResources in terms of percentage. (Yufei Gu)\n",
      "commitDate": "05/10/17 11:51 PM",
      "commitName": "99292adcefdc6b8f280b8e100605fb39f755c38a",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "14/09/17 11:23 AM",
      "commitNameOld": "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 21.52,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   private void applyChildDefaults() {\n     Collection\u003cFSQueue\u003e queues \u003d queueMgr.getQueues();\n     Set\u003cString\u003e configuredLeafQueues \u003d\n         allocConf.getConfiguredQueues().get(FSQueueType.LEAF);\n     Set\u003cString\u003e configuredParentQueues \u003d\n         allocConf.getConfiguredQueues().get(FSQueueType.PARENT);\n \n     for (FSQueue queue : queues) {\n       // If the queue is ad hoc and not root, apply the child defaults\n       if ((queue.getParent() !\u003d null) \u0026\u0026\n           !configuredLeafQueues.contains(queue.getName()) \u0026\u0026\n           !configuredParentQueues.contains(queue.getName())) {\n-        Resource max \u003d queue.getParent().getMaxChildQueueResource();\n+        ConfigurableResource max \u003d queue.getParent().\n+            getMaxChildQueueResource();\n \n         if (max !\u003d null) {\n           queue.setMaxShare(max);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyChildDefaults() {\n    Collection\u003cFSQueue\u003e queues \u003d queueMgr.getQueues();\n    Set\u003cString\u003e configuredLeafQueues \u003d\n        allocConf.getConfiguredQueues().get(FSQueueType.LEAF);\n    Set\u003cString\u003e configuredParentQueues \u003d\n        allocConf.getConfiguredQueues().get(FSQueueType.PARENT);\n\n    for (FSQueue queue : queues) {\n      // If the queue is ad hoc and not root, apply the child defaults\n      if ((queue.getParent() !\u003d null) \u0026\u0026\n          !configuredLeafQueues.contains(queue.getName()) \u0026\u0026\n          !configuredParentQueues.contains(queue.getName())) {\n        ConfigurableResource max \u003d queue.getParent().\n            getMaxChildQueueResource();\n\n        if (max !\u003d null) {\n          queue.setMaxShare(max);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5264. Store all queue-specific information in FSQueue. (Yufei Gu via kasha)\n",
      "commitDate": "02/09/16 2:56 PM",
      "commitName": "f6ea9be5473ab66798b0536317d2f32c5348eb57",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/08/16 3:52 PM",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n   private void applyChildDefaults() {\n     Collection\u003cFSQueue\u003e queues \u003d queueMgr.getQueues();\n     Set\u003cString\u003e configuredLeafQueues \u003d\n         allocConf.getConfiguredQueues().get(FSQueueType.LEAF);\n     Set\u003cString\u003e configuredParentQueues \u003d\n         allocConf.getConfiguredQueues().get(FSQueueType.PARENT);\n \n     for (FSQueue queue : queues) {\n       // If the queue is ad hoc and not root, apply the child defaults\n       if ((queue.getParent() !\u003d null) \u0026\u0026\n           !configuredLeafQueues.contains(queue.getName()) \u0026\u0026\n           !configuredParentQueues.contains(queue.getName())) {\n-        Resource max \u003d\n-            allocConf.getMaxChildResources(queue.getParent().getName());\n+        Resource max \u003d queue.getParent().getMaxChildQueueResource();\n \n         if (max !\u003d null) {\n-          allocConf.setMaxResources(queue.getName(), max);\n+          queue.setMaxShare(max);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyChildDefaults() {\n    Collection\u003cFSQueue\u003e queues \u003d queueMgr.getQueues();\n    Set\u003cString\u003e configuredLeafQueues \u003d\n        allocConf.getConfiguredQueues().get(FSQueueType.LEAF);\n    Set\u003cString\u003e configuredParentQueues \u003d\n        allocConf.getConfiguredQueues().get(FSQueueType.PARENT);\n\n    for (FSQueue queue : queues) {\n      // If the queue is ad hoc and not root, apply the child defaults\n      if ((queue.getParent() !\u003d null) \u0026\u0026\n          !configuredLeafQueues.contains(queue.getName()) \u0026\u0026\n          !configuredParentQueues.contains(queue.getName())) {\n        Resource max \u003d queue.getParent().getMaxChildQueueResource();\n\n        if (max !\u003d null) {\n          queue.setMaxShare(max);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4702. FairScheduler: Allow setting maxResources for ad hoc queues. (Daniel Templeton via kasha)\n",
      "commitDate": "17/08/16 5:40 PM",
      "commitName": "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,21 @@\n+  private void applyChildDefaults() {\n+    Collection\u003cFSQueue\u003e queues \u003d queueMgr.getQueues();\n+    Set\u003cString\u003e configuredLeafQueues \u003d\n+        allocConf.getConfiguredQueues().get(FSQueueType.LEAF);\n+    Set\u003cString\u003e configuredParentQueues \u003d\n+        allocConf.getConfiguredQueues().get(FSQueueType.PARENT);\n+\n+    for (FSQueue queue : queues) {\n+      // If the queue is ad hoc and not root, apply the child defaults\n+      if ((queue.getParent() !\u003d null) \u0026\u0026\n+          !configuredLeafQueues.contains(queue.getName()) \u0026\u0026\n+          !configuredParentQueues.contains(queue.getName())) {\n+        Resource max \u003d\n+            allocConf.getMaxChildResources(queue.getParent().getName());\n+\n+        if (max !\u003d null) {\n+          allocConf.setMaxResources(queue.getName(), max);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyChildDefaults() {\n    Collection\u003cFSQueue\u003e queues \u003d queueMgr.getQueues();\n    Set\u003cString\u003e configuredLeafQueues \u003d\n        allocConf.getConfiguredQueues().get(FSQueueType.LEAF);\n    Set\u003cString\u003e configuredParentQueues \u003d\n        allocConf.getConfiguredQueues().get(FSQueueType.PARENT);\n\n    for (FSQueue queue : queues) {\n      // If the queue is ad hoc and not root, apply the child defaults\n      if ((queue.getParent() !\u003d null) \u0026\u0026\n          !configuredLeafQueues.contains(queue.getName()) \u0026\u0026\n          !configuredParentQueues.contains(queue.getName())) {\n        Resource max \u003d\n            allocConf.getMaxChildResources(queue.getParent().getName());\n\n        if (max !\u003d null) {\n          allocConf.setMaxResources(queue.getName(), max);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}