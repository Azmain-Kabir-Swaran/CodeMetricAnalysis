{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMSimulator.java",
  "functionName": "lastStep",
  "functionId": "lastStep",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
  "functionStartLine": 223,
  "functionEndLine": 272,
  "numCommitsSeen": 19,
  "timeTaken": 2184,
  "changeHistory": [
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b",
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "b32ffa2753e83615b980721b6067fcc35ce54372",
    "b0c2c856192e71145c012504511fad172436131b",
    "e07f3c87cd3542760efcf713f909375b69eec00f",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Ybodychange",
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ybodychange",
    "b32ffa2753e83615b980721b6067fcc35ce54372": "Ybodychange",
    "b0c2c856192e71145c012504511fad172436131b": "Ymultichange(Yexceptionschange,Ybodychange)",
    "e07f3c87cd3542760efcf713f909375b69eec00f": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "04/05/17 5:21 PM",
      "commitNameOld": "3082552b3b991df846caf572b58e44308ddf8eeb",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 46.16,
      "commitsBetweenForRepo": 219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void lastStep() throws Exception {\n-    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n+    LOG.info(\"Application {} is shutting down.\", appId);\n     // unregister tracking\n     if (isTracked) {\n       untrackApp();\n     }\n \n     // Finish AM container\n     if (amContainer !\u003d null) {\n-      LOG.info(\"AM container \u003d \" + amContainer.getId() + \" reported to finish\");\n+      LOG.info(\"AM container \u003d {} reported to finish\", amContainer.getId());\n       se.getNmMap().get(amContainer.getNodeId()).cleanupContainer(\n           amContainer.getId());\n     } else {\n       LOG.info(\"AM container is null\");\n     }\n \n     if (null \u003d\u003d appAttemptId) {\n       // If appAttemptId \u003d\u003d null, AM is not launched from RM\u0027s perspective, so\n       // it\u0027s unnecessary to finish am as well\n       return;\n     }\n \n     // unregister application master\n     final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                   .newRecordInstance(FinishApplicationMasterRequest.class);\n     finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n \n     UserGroupInformation ugi \u003d\n         UserGroupInformation.createRemoteUser(appAttemptId.toString());\n     Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n         .getRMAppAttempt(appAttemptId).getAMRMToken();\n     ugi.addTokenIdentifier(token.decodeIdentifier());\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws Exception {\n         rm.getApplicationMasterService()\n             .finishApplicationMaster(finishAMRequest);\n         return null;\n       }\n     });\n \n     simulateFinishTimeMS \u003d System.currentTimeMillis() - baselineTimeMS;\n     // record job running information\n     SchedulerMetrics schedulerMetrics \u003d\n             ((SchedulerWrapper)rm.getResourceScheduler()).getSchedulerMetrics();\n     if (schedulerMetrics !\u003d null) {\n       schedulerMetrics.addAMRuntime(appId, traceStartTimeMS, traceFinishTimeMS,\n               simulateStartTimeMS, simulateFinishTimeMS);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void lastStep() throws Exception {\n    LOG.info(\"Application {} is shutting down.\", appId);\n    // unregister tracking\n    if (isTracked) {\n      untrackApp();\n    }\n\n    // Finish AM container\n    if (amContainer !\u003d null) {\n      LOG.info(\"AM container \u003d {} reported to finish\", amContainer.getId());\n      se.getNmMap().get(amContainer.getNodeId()).cleanupContainer(\n          amContainer.getId());\n    } else {\n      LOG.info(\"AM container is null\");\n    }\n\n    if (null \u003d\u003d appAttemptId) {\n      // If appAttemptId \u003d\u003d null, AM is not launched from RM\u0027s perspective, so\n      // it\u0027s unnecessary to finish am as well\n      return;\n    }\n\n    // unregister application master\n    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                  .newRecordInstance(FinishApplicationMasterRequest.class);\n    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n\n    UserGroupInformation ugi \u003d\n        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n        .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws Exception {\n        rm.getApplicationMasterService()\n            .finishApplicationMaster(finishAMRequest);\n        return null;\n      }\n    });\n\n    simulateFinishTimeMS \u003d System.currentTimeMillis() - baselineTimeMS;\n    // record job running information\n    SchedulerMetrics schedulerMetrics \u003d\n            ((SchedulerWrapper)rm.getResourceScheduler()).getSchedulerMetrics();\n    if (schedulerMetrics !\u003d null) {\n      schedulerMetrics.addAMRuntime(appId, traceStartTimeMS, traceFinishTimeMS,\n              simulateStartTimeMS, simulateFinishTimeMS);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/03/17 4:18 PM",
      "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 22.23,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,50 @@\n   public void lastStep() throws Exception {\n     LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n     // unregister tracking\n     if (isTracked) {\n       untrackApp();\n     }\n \n     // Finish AM container\n     if (amContainer !\u003d null) {\n       LOG.info(\"AM container \u003d \" + amContainer.getId() + \" reported to finish\");\n       se.getNmMap().get(amContainer.getNodeId()).cleanupContainer(\n           amContainer.getId());\n     } else {\n       LOG.info(\"AM container is null\");\n     }\n \n     if (null \u003d\u003d appAttemptId) {\n       // If appAttemptId \u003d\u003d null, AM is not launched from RM\u0027s perspective, so\n       // it\u0027s unnecessary to finish am as well\n       return;\n     }\n \n     // unregister application master\n     final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                   .newRecordInstance(FinishApplicationMasterRequest.class);\n     finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n \n     UserGroupInformation ugi \u003d\n         UserGroupInformation.createRemoteUser(appAttemptId.toString());\n     Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n         .getRMAppAttempt(appAttemptId).getAMRMToken();\n     ugi.addTokenIdentifier(token.decodeIdentifier());\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws Exception {\n         rm.getApplicationMasterService()\n             .finishApplicationMaster(finishAMRequest);\n         return null;\n       }\n     });\n \n-    simulateFinishTimeMS \u003d System.currentTimeMillis() -\n-        SLSRunner.getRunner().getStartTimeMS();\n+    simulateFinishTimeMS \u003d System.currentTimeMillis() - baselineTimeMS;\n     // record job running information\n     SchedulerMetrics schedulerMetrics \u003d\n-        ((SchedulerWrapper)rm.getResourceScheduler()).getSchedulerMetrics();\n+            ((SchedulerWrapper)rm.getResourceScheduler()).getSchedulerMetrics();\n     if (schedulerMetrics !\u003d null) {\n       schedulerMetrics.addAMRuntime(appId, traceStartTimeMS, traceFinishTimeMS,\n-          simulateStartTimeMS, simulateFinishTimeMS);\n+              simulateStartTimeMS, simulateFinishTimeMS);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void lastStep() throws Exception {\n    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n    // unregister tracking\n    if (isTracked) {\n      untrackApp();\n    }\n\n    // Finish AM container\n    if (amContainer !\u003d null) {\n      LOG.info(\"AM container \u003d \" + amContainer.getId() + \" reported to finish\");\n      se.getNmMap().get(amContainer.getNodeId()).cleanupContainer(\n          amContainer.getId());\n    } else {\n      LOG.info(\"AM container is null\");\n    }\n\n    if (null \u003d\u003d appAttemptId) {\n      // If appAttemptId \u003d\u003d null, AM is not launched from RM\u0027s perspective, so\n      // it\u0027s unnecessary to finish am as well\n      return;\n    }\n\n    // unregister application master\n    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                  .newRecordInstance(FinishApplicationMasterRequest.class);\n    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n\n    UserGroupInformation ugi \u003d\n        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n        .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws Exception {\n        rm.getApplicationMasterService()\n            .finishApplicationMaster(finishAMRequest);\n        return null;\n      }\n    });\n\n    simulateFinishTimeMS \u003d System.currentTimeMillis() - baselineTimeMS;\n    // record job running information\n    SchedulerMetrics schedulerMetrics \u003d\n            ((SchedulerWrapper)rm.getResourceScheduler()).getSchedulerMetrics();\n    if (schedulerMetrics !\u003d null) {\n      schedulerMetrics.addAMRuntime(appId, traceStartTimeMS, traceFinishTimeMS,\n              simulateStartTimeMS, simulateFinishTimeMS);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "21/03/17 3:21 PM",
      "commitNameOld": "cc938e99ec0904824c8072184eff75619fcaf040",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 8.04,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,51 @@\n   public void lastStep() throws Exception {\n     LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n     // unregister tracking\n     if (isTracked) {\n       untrackApp();\n     }\n \n     // Finish AM container\n     if (amContainer !\u003d null) {\n       LOG.info(\"AM container \u003d \" + amContainer.getId() + \" reported to finish\");\n       se.getNmMap().get(amContainer.getNodeId()).cleanupContainer(\n           amContainer.getId());\n     } else {\n       LOG.info(\"AM container is null\");\n     }\n \n     if (null \u003d\u003d appAttemptId) {\n       // If appAttemptId \u003d\u003d null, AM is not launched from RM\u0027s perspective, so\n       // it\u0027s unnecessary to finish am as well\n       return;\n     }\n \n     // unregister application master\n     final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                   .newRecordInstance(FinishApplicationMasterRequest.class);\n     finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n \n     UserGroupInformation ugi \u003d\n         UserGroupInformation.createRemoteUser(appAttemptId.toString());\n     Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n         .getRMAppAttempt(appAttemptId).getAMRMToken();\n     ugi.addTokenIdentifier(token.decodeIdentifier());\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws Exception {\n         rm.getApplicationMasterService()\n             .finishApplicationMaster(finishAMRequest);\n         return null;\n       }\n     });\n \n     simulateFinishTimeMS \u003d System.currentTimeMillis() -\n         SLSRunner.getRunner().getStartTimeMS();\n     // record job running information\n-    ((SchedulerWrapper)rm.getResourceScheduler())\n-         .addAMRuntime(appId, \n-                      traceStartTimeMS, traceFinishTimeMS, \n-                      simulateStartTimeMS, simulateFinishTimeMS);\n+    SchedulerMetrics schedulerMetrics \u003d\n+        ((SchedulerWrapper)rm.getResourceScheduler()).getSchedulerMetrics();\n+    if (schedulerMetrics !\u003d null) {\n+      schedulerMetrics.addAMRuntime(appId, traceStartTimeMS, traceFinishTimeMS,\n+          simulateStartTimeMS, simulateFinishTimeMS);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void lastStep() throws Exception {\n    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n    // unregister tracking\n    if (isTracked) {\n      untrackApp();\n    }\n\n    // Finish AM container\n    if (amContainer !\u003d null) {\n      LOG.info(\"AM container \u003d \" + amContainer.getId() + \" reported to finish\");\n      se.getNmMap().get(amContainer.getNodeId()).cleanupContainer(\n          amContainer.getId());\n    } else {\n      LOG.info(\"AM container is null\");\n    }\n\n    if (null \u003d\u003d appAttemptId) {\n      // If appAttemptId \u003d\u003d null, AM is not launched from RM\u0027s perspective, so\n      // it\u0027s unnecessary to finish am as well\n      return;\n    }\n\n    // unregister application master\n    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                  .newRecordInstance(FinishApplicationMasterRequest.class);\n    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n\n    UserGroupInformation ugi \u003d\n        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n        .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws Exception {\n        rm.getApplicationMasterService()\n            .finishApplicationMaster(finishAMRequest);\n        return null;\n      }\n    });\n\n    simulateFinishTimeMS \u003d System.currentTimeMillis() -\n        SLSRunner.getRunner().getStartTimeMS();\n    // record job running information\n    SchedulerMetrics schedulerMetrics \u003d\n        ((SchedulerWrapper)rm.getResourceScheduler()).getSchedulerMetrics();\n    if (schedulerMetrics !\u003d null) {\n      schedulerMetrics.addAMRuntime(appId, traceStartTimeMS, traceFinishTimeMS,\n          simulateStartTimeMS, simulateFinishTimeMS);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "b32ffa2753e83615b980721b6067fcc35ce54372": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4779. Fix AM container allocation logic in SLS. Contributed by Wangda Tan.\n",
      "commitDate": "24/02/17 8:09 AM",
      "commitName": "b32ffa2753e83615b980721b6067fcc35ce54372",
      "commitAuthor": "Sunil G",
      "commitDateOld": "30/12/15 3:30 PM",
      "commitNameOld": "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 421.69,
      "commitsBetweenForRepo": 2829,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,49 @@\n   public void lastStep() throws Exception {\n     LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n     // unregister tracking\n     if (isTracked) {\n       untrackApp();\n     }\n+\n+    // Finish AM container\n+    if (amContainer !\u003d null) {\n+      LOG.info(\"AM container \u003d \" + amContainer.getId() + \" reported to finish\");\n+      se.getNmMap().get(amContainer.getNodeId()).cleanupContainer(\n+          amContainer.getId());\n+    } else {\n+      LOG.info(\"AM container is null\");\n+    }\n+\n+    if (null \u003d\u003d appAttemptId) {\n+      // If appAttemptId \u003d\u003d null, AM is not launched from RM\u0027s perspective, so\n+      // it\u0027s unnecessary to finish am as well\n+      return;\n+    }\n+\n     // unregister application master\n     final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                   .newRecordInstance(FinishApplicationMasterRequest.class);\n     finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n \n     UserGroupInformation ugi \u003d\n         UserGroupInformation.createRemoteUser(appAttemptId.toString());\n     Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n         .getRMAppAttempt(appAttemptId).getAMRMToken();\n     ugi.addTokenIdentifier(token.decodeIdentifier());\n     ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n       @Override\n       public Object run() throws Exception {\n         rm.getApplicationMasterService()\n             .finishApplicationMaster(finishAMRequest);\n         return null;\n       }\n     });\n \n     simulateFinishTimeMS \u003d System.currentTimeMillis() -\n         SLSRunner.getRunner().getStartTimeMS();\n     // record job running information\n     ((SchedulerWrapper)rm.getResourceScheduler())\n          .addAMRuntime(appId, \n                       traceStartTimeMS, traceFinishTimeMS, \n                       simulateStartTimeMS, simulateFinishTimeMS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void lastStep() throws Exception {\n    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n    // unregister tracking\n    if (isTracked) {\n      untrackApp();\n    }\n\n    // Finish AM container\n    if (amContainer !\u003d null) {\n      LOG.info(\"AM container \u003d \" + amContainer.getId() + \" reported to finish\");\n      se.getNmMap().get(amContainer.getNodeId()).cleanupContainer(\n          amContainer.getId());\n    } else {\n      LOG.info(\"AM container is null\");\n    }\n\n    if (null \u003d\u003d appAttemptId) {\n      // If appAttemptId \u003d\u003d null, AM is not launched from RM\u0027s perspective, so\n      // it\u0027s unnecessary to finish am as well\n      return;\n    }\n\n    // unregister application master\n    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                  .newRecordInstance(FinishApplicationMasterRequest.class);\n    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n\n    UserGroupInformation ugi \u003d\n        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n        .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws Exception {\n        rm.getApplicationMasterService()\n            .finishApplicationMaster(finishAMRequest);\n        return null;\n      }\n    });\n\n    simulateFinishTimeMS \u003d System.currentTimeMillis() -\n        SLSRunner.getRunner().getStartTimeMS();\n    // record job running information\n    ((SchedulerWrapper)rm.getResourceScheduler())\n         .addAMRuntime(appId, \n                      traceStartTimeMS, traceFinishTimeMS, \n                      simulateStartTimeMS, simulateFinishTimeMS);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "b0c2c856192e71145c012504511fad172436131b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-1726. ResourceSchedulerWrapper broken due to AbstractYarnScheduler. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613547 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/14 6:29 PM",
      "commitName": "b0c2c856192e71145c012504511fad172436131b",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-1726. ResourceSchedulerWrapper broken due to AbstractYarnScheduler. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613547 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/14 6:29 PM",
          "commitName": "b0c2c856192e71145c012504511fad172436131b",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/07/14 10:12 AM",
          "commitNameOld": "77363b9d839e47bef2325b8682eabe00d4c83354",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.35,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,33 @@\n-  public void lastStep() {\n+  public void lastStep() throws Exception {\n     LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n     // unregister tracking\n     if (isTracked) {\n       untrackApp();\n     }\n     // unregister application master\n     final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                   .newRecordInstance(FinishApplicationMasterRequest.class);\n     finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n \n-    try {\n-      UserGroupInformation ugi \u003d\n-              UserGroupInformation.createRemoteUser(appAttemptId.toString());\n-      Token\u003cAMRMTokenIdentifier\u003e token \u003d\n-              rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n-                .getRMAppAttempt(appAttemptId).getAMRMToken();\n-      ugi.addTokenIdentifier(token.decodeIdentifier());\n-      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n-        @Override\n-        public Object run() throws Exception {\n-          rm.getApplicationMasterService()\n-                  .finishApplicationMaster(finishAMRequest);\n-          return null;\n-        }\n-      });\n-    } catch (IOException e) {\n-      e.printStackTrace();\n-    } catch (InterruptedException e) {\n-      e.printStackTrace();\n-    }\n+    UserGroupInformation ugi \u003d\n+        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n+    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n+        .getRMAppAttempt(appAttemptId).getAMRMToken();\n+    ugi.addTokenIdentifier(token.decodeIdentifier());\n+    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n+      @Override\n+      public Object run() throws Exception {\n+        rm.getApplicationMasterService()\n+            .finishApplicationMaster(finishAMRequest);\n+        return null;\n+      }\n+    });\n \n     simulateFinishTimeMS \u003d System.currentTimeMillis() -\n         SLSRunner.getRunner().getStartTimeMS();\n     // record job running information\n     ((SchedulerWrapper)rm.getResourceScheduler())\n          .addAMRuntime(appId, \n                       traceStartTimeMS, traceFinishTimeMS, \n                       simulateStartTimeMS, simulateFinishTimeMS);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void lastStep() throws Exception {\n    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n    // unregister tracking\n    if (isTracked) {\n      untrackApp();\n    }\n    // unregister application master\n    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                  .newRecordInstance(FinishApplicationMasterRequest.class);\n    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n\n    UserGroupInformation ugi \u003d\n        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n        .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws Exception {\n        rm.getApplicationMasterService()\n            .finishApplicationMaster(finishAMRequest);\n        return null;\n      }\n    });\n\n    simulateFinishTimeMS \u003d System.currentTimeMillis() -\n        SLSRunner.getRunner().getStartTimeMS();\n    // record job running information\n    ((SchedulerWrapper)rm.getResourceScheduler())\n         .addAMRuntime(appId, \n                      traceStartTimeMS, traceFinishTimeMS, \n                      simulateStartTimeMS, simulateFinishTimeMS);\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1726. ResourceSchedulerWrapper broken due to AbstractYarnScheduler. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613547 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/14 6:29 PM",
          "commitName": "b0c2c856192e71145c012504511fad172436131b",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/07/14 10:12 AM",
          "commitNameOld": "77363b9d839e47bef2325b8682eabe00d4c83354",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.35,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,33 @@\n-  public void lastStep() {\n+  public void lastStep() throws Exception {\n     LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n     // unregister tracking\n     if (isTracked) {\n       untrackApp();\n     }\n     // unregister application master\n     final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                   .newRecordInstance(FinishApplicationMasterRequest.class);\n     finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n \n-    try {\n-      UserGroupInformation ugi \u003d\n-              UserGroupInformation.createRemoteUser(appAttemptId.toString());\n-      Token\u003cAMRMTokenIdentifier\u003e token \u003d\n-              rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n-                .getRMAppAttempt(appAttemptId).getAMRMToken();\n-      ugi.addTokenIdentifier(token.decodeIdentifier());\n-      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n-        @Override\n-        public Object run() throws Exception {\n-          rm.getApplicationMasterService()\n-                  .finishApplicationMaster(finishAMRequest);\n-          return null;\n-        }\n-      });\n-    } catch (IOException e) {\n-      e.printStackTrace();\n-    } catch (InterruptedException e) {\n-      e.printStackTrace();\n-    }\n+    UserGroupInformation ugi \u003d\n+        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n+    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n+        .getRMAppAttempt(appAttemptId).getAMRMToken();\n+    ugi.addTokenIdentifier(token.decodeIdentifier());\n+    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n+      @Override\n+      public Object run() throws Exception {\n+        rm.getApplicationMasterService()\n+            .finishApplicationMaster(finishAMRequest);\n+        return null;\n+      }\n+    });\n \n     simulateFinishTimeMS \u003d System.currentTimeMillis() -\n         SLSRunner.getRunner().getStartTimeMS();\n     // record job running information\n     ((SchedulerWrapper)rm.getResourceScheduler())\n          .addAMRuntime(appId, \n                       traceStartTimeMS, traceFinishTimeMS, \n                       simulateStartTimeMS, simulateFinishTimeMS);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void lastStep() throws Exception {\n    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n    // unregister tracking\n    if (isTracked) {\n      untrackApp();\n    }\n    // unregister application master\n    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                  .newRecordInstance(FinishApplicationMasterRequest.class);\n    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n\n    UserGroupInformation ugi \u003d\n        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps().get(appId)\n        .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n      @Override\n      public Object run() throws Exception {\n        rm.getApplicationMasterService()\n            .finishApplicationMaster(finishAMRequest);\n        return null;\n      }\n    });\n\n    simulateFinishTimeMS \u003d System.currentTimeMillis() -\n        SLSRunner.getRunner().getStartTimeMS();\n    // record job running information\n    ((SchedulerWrapper)rm.getResourceScheduler())\n         .addAMRuntime(appId, \n                      traceStartTimeMS, traceFinishTimeMS, \n                      simulateStartTimeMS, simulateFinishTimeMS);\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "e07f3c87cd3542760efcf713f909375b69eec00f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1471. Preserve scheduler typeinfo in simulator to work with resource monitors.\nContributed by Carlo Curino.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 4:07 PM",
      "commitName": "e07f3c87cd3542760efcf713f909375b69eec00f",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "27/09/13 1:23 PM",
      "commitNameOld": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 82.16,
      "commitsBetweenForRepo": 548,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void lastStep() {\n     LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n     // unregister tracking\n     if (isTracked) {\n       untrackApp();\n     }\n     // unregister application master\n     final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                   .newRecordInstance(FinishApplicationMasterRequest.class);\n     finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n \n     try {\n       UserGroupInformation ugi \u003d\n               UserGroupInformation.createRemoteUser(appAttemptId.toString());\n       Token\u003cAMRMTokenIdentifier\u003e token \u003d\n               rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n                 .getRMAppAttempt(appAttemptId).getAMRMToken();\n       ugi.addTokenIdentifier(token.decodeIdentifier());\n       ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           rm.getApplicationMasterService()\n                   .finishApplicationMaster(finishAMRequest);\n           return null;\n         }\n       });\n     } catch (IOException e) {\n       e.printStackTrace();\n     } catch (InterruptedException e) {\n       e.printStackTrace();\n     }\n \n     simulateFinishTimeMS \u003d System.currentTimeMillis() -\n         SLSRunner.getRunner().getStartTimeMS();\n     // record job running information\n-    ((ResourceSchedulerWrapper)rm.getResourceScheduler())\n+    ((SchedulerWrapper)rm.getResourceScheduler())\n          .addAMRuntime(appId, \n                       traceStartTimeMS, traceFinishTimeMS, \n                       simulateStartTimeMS, simulateFinishTimeMS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void lastStep() {\n    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n    // unregister tracking\n    if (isTracked) {\n      untrackApp();\n    }\n    // unregister application master\n    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                  .newRecordInstance(FinishApplicationMasterRequest.class);\n    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n\n    try {\n      UserGroupInformation ugi \u003d\n              UserGroupInformation.createRemoteUser(appAttemptId.toString());\n      Token\u003cAMRMTokenIdentifier\u003e token \u003d\n              rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n                .getRMAppAttempt(appAttemptId).getAMRMToken();\n      ugi.addTokenIdentifier(token.decodeIdentifier());\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          rm.getApplicationMasterService()\n                  .finishApplicationMaster(finishAMRequest);\n          return null;\n        }\n      });\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n\n    simulateFinishTimeMS \u003d System.currentTimeMillis() -\n        SLSRunner.getRunner().getStartTimeMS();\n    // record job running information\n    ((SchedulerWrapper)rm.getResourceScheduler())\n         .addAMRuntime(appId, \n                      traceStartTimeMS, traceFinishTimeMS, \n                      simulateStartTimeMS, simulateFinishTimeMS);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,40 @@\n+  public void lastStep() {\n+    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n+    // unregister tracking\n+    if (isTracked) {\n+      untrackApp();\n+    }\n+    // unregister application master\n+    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n+                  .newRecordInstance(FinishApplicationMasterRequest.class);\n+    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n+\n+    try {\n+      UserGroupInformation ugi \u003d\n+              UserGroupInformation.createRemoteUser(appAttemptId.toString());\n+      Token\u003cAMRMTokenIdentifier\u003e token \u003d\n+              rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n+                .getRMAppAttempt(appAttemptId).getAMRMToken();\n+      ugi.addTokenIdentifier(token.decodeIdentifier());\n+      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n+        @Override\n+        public Object run() throws Exception {\n+          rm.getApplicationMasterService()\n+                  .finishApplicationMaster(finishAMRequest);\n+          return null;\n+        }\n+      });\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+\n+    simulateFinishTimeMS \u003d System.currentTimeMillis() -\n+        SLSRunner.getRunner().getStartTimeMS();\n+    // record job running information\n+    ((ResourceSchedulerWrapper)rm.getResourceScheduler())\n+         .addAMRuntime(appId, \n+                      traceStartTimeMS, traceFinishTimeMS, \n+                      simulateStartTimeMS, simulateFinishTimeMS);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void lastStep() {\n    LOG.info(MessageFormat.format(\"Application {0} is shutting down.\", appId));\n    // unregister tracking\n    if (isTracked) {\n      untrackApp();\n    }\n    // unregister application master\n    final FinishApplicationMasterRequest finishAMRequest \u003d recordFactory\n                  .newRecordInstance(FinishApplicationMasterRequest.class);\n    finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\n\n    try {\n      UserGroupInformation ugi \u003d\n              UserGroupInformation.createRemoteUser(appAttemptId.toString());\n      Token\u003cAMRMTokenIdentifier\u003e token \u003d\n              rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n                .getRMAppAttempt(appAttemptId).getAMRMToken();\n      ugi.addTokenIdentifier(token.decodeIdentifier());\n      ugi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          rm.getApplicationMasterService()\n                  .finishApplicationMaster(finishAMRequest);\n          return null;\n        }\n      });\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n\n    simulateFinishTimeMS \u003d System.currentTimeMillis() -\n        SLSRunner.getRunner().getStartTimeMS();\n    // record job running information\n    ((ResourceSchedulerWrapper)rm.getResourceScheduler())\n         .addAMRuntime(appId, \n                      traceStartTimeMS, traceFinishTimeMS, \n                      simulateStartTimeMS, simulateFinishTimeMS);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/AMSimulator.java"
    }
  }
}