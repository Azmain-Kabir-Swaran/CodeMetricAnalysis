{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SFTPFileSystem.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___client-ChannelSftp__file-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/sftp/SFTPFileSystem.java",
  "functionStartLine": 203,
  "functionEndLine": 247,
  "numCommitsSeen": 7,
  "timeTaken": 1158,
  "changeHistory": [
    "6934a654024b8b696a68c50f2b90c8c1e1051486",
    "559425dcb9302861c3c28b759492a68f8d597092"
  ],
  "changeHistoryShort": {
    "6934a654024b8b696a68c50f2b90c8c1e1051486": "Ybodychange",
    "559425dcb9302861c3c28b759492a68f8d597092": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6934a654024b8b696a68c50f2b90c8c1e1051486": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15358. SFTPConnectionPool connections leakage. Contributed by Mikhail Pryakhin.\n",
      "commitDate": "23/11/18 12:48 AM",
      "commitName": "6934a654024b8b696a68c50f2b90c8c1e1051486",
      "commitAuthor": "MÃ¡rton Elek",
      "commitDateOld": "21/08/17 11:48 AM",
      "commitNameOld": "736ceab2f58fb9ab5907c5b5110bd44384038e6b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 458.58,
      "commitsBetweenForRepo": 4148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private FileStatus getFileStatus(ChannelSftp client, Path file)\n       throws IOException {\n     FileStatus fileStat \u003d null;\n     Path workDir;\n     try {\n       workDir \u003d new Path(client.pwd());\n     } catch (SftpException e) {\n       throw new IOException(e);\n     }\n     Path absolute \u003d makeAbsolute(workDir, file);\n     Path parentPath \u003d absolute.getParent();\n     if (parentPath \u003d\u003d null) { // root directory\n       long length \u003d -1; // Length of root directory on server not known\n       boolean isDir \u003d true;\n       int blockReplication \u003d 1;\n       long blockSize \u003d DEFAULT_BLOCK_SIZE; // Block Size not known.\n       long modTime \u003d -1; // Modification time of root directory not known.\n       Path root \u003d new Path(\"/\");\n       return new FileStatus(length, isDir, blockReplication, blockSize,\n           modTime,\n-          root.makeQualified(this.getUri(), this.getWorkingDirectory()));\n+          root.makeQualified(this.getUri(), this.getWorkingDirectory(client)));\n     }\n     String pathName \u003d parentPath.toUri().getPath();\n     Vector\u003cLsEntry\u003e sftpFiles;\n     try {\n       sftpFiles \u003d (Vector\u003cLsEntry\u003e) client.ls(pathName);\n     } catch (SftpException e) {\n       throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n     }\n     if (sftpFiles !\u003d null) {\n       for (LsEntry sftpFile : sftpFiles) {\n         if (sftpFile.getFilename().equals(file.getName())) {\n           // file found in directory\n           fileStat \u003d getFileStatus(client, sftpFile, parentPath);\n           break;\n         }\n       }\n       if (fileStat \u003d\u003d null) {\n         throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n       }\n     } else {\n       throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n     }\n     return fileStat;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus getFileStatus(ChannelSftp client, Path file)\n      throws IOException {\n    FileStatus fileStat \u003d null;\n    Path workDir;\n    try {\n      workDir \u003d new Path(client.pwd());\n    } catch (SftpException e) {\n      throw new IOException(e);\n    }\n    Path absolute \u003d makeAbsolute(workDir, file);\n    Path parentPath \u003d absolute.getParent();\n    if (parentPath \u003d\u003d null) { // root directory\n      long length \u003d -1; // Length of root directory on server not known\n      boolean isDir \u003d true;\n      int blockReplication \u003d 1;\n      long blockSize \u003d DEFAULT_BLOCK_SIZE; // Block Size not known.\n      long modTime \u003d -1; // Modification time of root directory not known.\n      Path root \u003d new Path(\"/\");\n      return new FileStatus(length, isDir, blockReplication, blockSize,\n          modTime,\n          root.makeQualified(this.getUri(), this.getWorkingDirectory(client)));\n    }\n    String pathName \u003d parentPath.toUri().getPath();\n    Vector\u003cLsEntry\u003e sftpFiles;\n    try {\n      sftpFiles \u003d (Vector\u003cLsEntry\u003e) client.ls(pathName);\n    } catch (SftpException e) {\n      throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n    }\n    if (sftpFiles !\u003d null) {\n      for (LsEntry sftpFile : sftpFiles) {\n        if (sftpFile.getFilename().equals(file.getName())) {\n          // file found in directory\n          fileStat \u003d getFileStatus(client, sftpFile, parentPath);\n          break;\n        }\n      }\n      if (fileStat \u003d\u003d null) {\n        throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n      }\n    } else {\n      throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n    }\n    return fileStat;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/sftp/SFTPFileSystem.java",
      "extendedDetails": {}
    },
    "559425dcb9302861c3c28b759492a68f8d597092": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-5732. Add SFTPFileSystem. Contributed by Ramtin Boustani and Inigo Goiri\n",
      "commitDate": "07/07/15 10:08 AM",
      "commitName": "559425dcb9302861c3c28b759492a68f8d597092",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,45 @@\n+  private FileStatus getFileStatus(ChannelSftp client, Path file)\n+      throws IOException {\n+    FileStatus fileStat \u003d null;\n+    Path workDir;\n+    try {\n+      workDir \u003d new Path(client.pwd());\n+    } catch (SftpException e) {\n+      throw new IOException(e);\n+    }\n+    Path absolute \u003d makeAbsolute(workDir, file);\n+    Path parentPath \u003d absolute.getParent();\n+    if (parentPath \u003d\u003d null) { // root directory\n+      long length \u003d -1; // Length of root directory on server not known\n+      boolean isDir \u003d true;\n+      int blockReplication \u003d 1;\n+      long blockSize \u003d DEFAULT_BLOCK_SIZE; // Block Size not known.\n+      long modTime \u003d -1; // Modification time of root directory not known.\n+      Path root \u003d new Path(\"/\");\n+      return new FileStatus(length, isDir, blockReplication, blockSize,\n+          modTime,\n+          root.makeQualified(this.getUri(), this.getWorkingDirectory()));\n+    }\n+    String pathName \u003d parentPath.toUri().getPath();\n+    Vector\u003cLsEntry\u003e sftpFiles;\n+    try {\n+      sftpFiles \u003d (Vector\u003cLsEntry\u003e) client.ls(pathName);\n+    } catch (SftpException e) {\n+      throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n+    }\n+    if (sftpFiles !\u003d null) {\n+      for (LsEntry sftpFile : sftpFiles) {\n+        if (sftpFile.getFilename().equals(file.getName())) {\n+          // file found in directory\n+          fileStat \u003d getFileStatus(client, sftpFile, parentPath);\n+          break;\n+        }\n+      }\n+      if (fileStat \u003d\u003d null) {\n+        throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n+      }\n+    } else {\n+      throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n+    }\n+    return fileStat;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus getFileStatus(ChannelSftp client, Path file)\n      throws IOException {\n    FileStatus fileStat \u003d null;\n    Path workDir;\n    try {\n      workDir \u003d new Path(client.pwd());\n    } catch (SftpException e) {\n      throw new IOException(e);\n    }\n    Path absolute \u003d makeAbsolute(workDir, file);\n    Path parentPath \u003d absolute.getParent();\n    if (parentPath \u003d\u003d null) { // root directory\n      long length \u003d -1; // Length of root directory on server not known\n      boolean isDir \u003d true;\n      int blockReplication \u003d 1;\n      long blockSize \u003d DEFAULT_BLOCK_SIZE; // Block Size not known.\n      long modTime \u003d -1; // Modification time of root directory not known.\n      Path root \u003d new Path(\"/\");\n      return new FileStatus(length, isDir, blockReplication, blockSize,\n          modTime,\n          root.makeQualified(this.getUri(), this.getWorkingDirectory()));\n    }\n    String pathName \u003d parentPath.toUri().getPath();\n    Vector\u003cLsEntry\u003e sftpFiles;\n    try {\n      sftpFiles \u003d (Vector\u003cLsEntry\u003e) client.ls(pathName);\n    } catch (SftpException e) {\n      throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n    }\n    if (sftpFiles !\u003d null) {\n      for (LsEntry sftpFile : sftpFiles) {\n        if (sftpFile.getFilename().equals(file.getName())) {\n          // file found in directory\n          fileStat \u003d getFileStatus(client, sftpFile, parentPath);\n          break;\n        }\n      }\n      if (fileStat \u003d\u003d null) {\n        throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n      }\n    } else {\n      throw new FileNotFoundException(String.format(E_FILE_NOTFOUND, file));\n    }\n    return fileStat;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/sftp/SFTPFileSystem.java"
    }
  }
}