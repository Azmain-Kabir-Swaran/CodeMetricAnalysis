{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcfsBasedProcessTree.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
  "functionStartLine": 1007,
  "functionEndLine": 1044,
  "numCommitsSeen": 30,
  "timeTaken": 1739,
  "changeHistory": [
    "c358368f511963ad8e35f030b9babee541e1bd01",
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385"
  ],
  "changeHistoryShort": {
    "c358368f511963ad8e35f030b9babee541e1bd01": "Ybodychange",
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c358368f511963ad8e35f030b9babee541e1bd01": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3304. Cleaning up ResourceCalculatorProcessTree APIs for public use and removing inconsistencies in the default values. Contributed by Junping Du and Karthik Kambatla.\n",
      "commitDate": "30/03/15 10:09 AM",
      "commitName": "c358368f511963ad8e35f030b9babee541e1bd01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/03/15 5:33 PM",
      "commitNameOld": "53947f37c7a84a84ef4ab1a3cab63ff27c078385",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 25.65,
      "commitsBetweenForRepo": 213,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public static void main(String[] args) {\n     if (args.length !\u003d 1) {\n       System.out.println(\"Provide \u003cpid of process to monitor\u003e\");\n       return;\n     }\n \n     int numprocessors \u003d\n         ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, null)\n             .getNumProcessors();\n     System.out.println(\"Number of processors \" + numprocessors);\n \n     System.out.println(\"Creating ProcfsBasedProcessTree for process \" +\n         args[0]);\n     ProcfsBasedProcessTree procfsBasedProcessTree \u003d new\n         ProcfsBasedProcessTree(args[0]);\n     procfsBasedProcessTree.updateProcessTree();\n \n     System.out.println(procfsBasedProcessTree.getProcessTreeDump());\n     System.out.println(\"Get cpu usage \" + procfsBasedProcessTree\n         .getCpuUsagePercent());\n \n     try {\n       // Sleep so we can compute the CPU usage\n       Thread.sleep(500L);\n     } catch (InterruptedException e) {\n       // do nothing\n     }\n \n     procfsBasedProcessTree.updateProcessTree();\n \n     System.out.println(procfsBasedProcessTree.getProcessTreeDump());\n     System.out.println(\"Cpu usage  \" + procfsBasedProcessTree\n         .getCpuUsagePercent());\n     System.out.println(\"Vmem usage in bytes \" + procfsBasedProcessTree\n-        .getCumulativeVmem());\n+        .getVirtualMemorySize());\n     System.out.println(\"Rss mem usage in bytes \" + procfsBasedProcessTree\n-        .getCumulativeRssmem());\n+        .getRssMemorySize());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    if (args.length !\u003d 1) {\n      System.out.println(\"Provide \u003cpid of process to monitor\u003e\");\n      return;\n    }\n\n    int numprocessors \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, null)\n            .getNumProcessors();\n    System.out.println(\"Number of processors \" + numprocessors);\n\n    System.out.println(\"Creating ProcfsBasedProcessTree for process \" +\n        args[0]);\n    ProcfsBasedProcessTree procfsBasedProcessTree \u003d new\n        ProcfsBasedProcessTree(args[0]);\n    procfsBasedProcessTree.updateProcessTree();\n\n    System.out.println(procfsBasedProcessTree.getProcessTreeDump());\n    System.out.println(\"Get cpu usage \" + procfsBasedProcessTree\n        .getCpuUsagePercent());\n\n    try {\n      // Sleep so we can compute the CPU usage\n      Thread.sleep(500L);\n    } catch (InterruptedException e) {\n      // do nothing\n    }\n\n    procfsBasedProcessTree.updateProcessTree();\n\n    System.out.println(procfsBasedProcessTree.getProcessTreeDump());\n    System.out.println(\"Cpu usage  \" + procfsBasedProcessTree\n        .getCpuUsagePercent());\n    System.out.println(\"Vmem usage in bytes \" + procfsBasedProcessTree\n        .getVirtualMemorySize());\n    System.out.println(\"Rss mem usage in bytes \" + procfsBasedProcessTree\n        .getRssMemorySize());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "53947f37c7a84a84ef4ab1a3cab63ff27c078385": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3122. Metrics for container\u0027s actual CPU usage. (Anubhav Dhoot via kasha)\n",
      "commitDate": "04/03/15 5:33 PM",
      "commitName": "53947f37c7a84a84ef4ab1a3cab63ff27c078385",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,38 @@\n+  public static void main(String[] args) {\n+    if (args.length !\u003d 1) {\n+      System.out.println(\"Provide \u003cpid of process to monitor\u003e\");\n+      return;\n+    }\n+\n+    int numprocessors \u003d\n+        ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, null)\n+            .getNumProcessors();\n+    System.out.println(\"Number of processors \" + numprocessors);\n+\n+    System.out.println(\"Creating ProcfsBasedProcessTree for process \" +\n+        args[0]);\n+    ProcfsBasedProcessTree procfsBasedProcessTree \u003d new\n+        ProcfsBasedProcessTree(args[0]);\n+    procfsBasedProcessTree.updateProcessTree();\n+\n+    System.out.println(procfsBasedProcessTree.getProcessTreeDump());\n+    System.out.println(\"Get cpu usage \" + procfsBasedProcessTree\n+        .getCpuUsagePercent());\n+\n+    try {\n+      // Sleep so we can compute the CPU usage\n+      Thread.sleep(500L);\n+    } catch (InterruptedException e) {\n+      // do nothing\n+    }\n+\n+    procfsBasedProcessTree.updateProcessTree();\n+\n+    System.out.println(procfsBasedProcessTree.getProcessTreeDump());\n+    System.out.println(\"Cpu usage  \" + procfsBasedProcessTree\n+        .getCpuUsagePercent());\n+    System.out.println(\"Vmem usage in bytes \" + procfsBasedProcessTree\n+        .getCumulativeVmem());\n+    System.out.println(\"Rss mem usage in bytes \" + procfsBasedProcessTree\n+        .getCumulativeRssmem());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    if (args.length !\u003d 1) {\n      System.out.println(\"Provide \u003cpid of process to monitor\u003e\");\n      return;\n    }\n\n    int numprocessors \u003d\n        ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, null)\n            .getNumProcessors();\n    System.out.println(\"Number of processors \" + numprocessors);\n\n    System.out.println(\"Creating ProcfsBasedProcessTree for process \" +\n        args[0]);\n    ProcfsBasedProcessTree procfsBasedProcessTree \u003d new\n        ProcfsBasedProcessTree(args[0]);\n    procfsBasedProcessTree.updateProcessTree();\n\n    System.out.println(procfsBasedProcessTree.getProcessTreeDump());\n    System.out.println(\"Get cpu usage \" + procfsBasedProcessTree\n        .getCpuUsagePercent());\n\n    try {\n      // Sleep so we can compute the CPU usage\n      Thread.sleep(500L);\n    } catch (InterruptedException e) {\n      // do nothing\n    }\n\n    procfsBasedProcessTree.updateProcessTree();\n\n    System.out.println(procfsBasedProcessTree.getProcessTreeDump());\n    System.out.println(\"Cpu usage  \" + procfsBasedProcessTree\n        .getCpuUsagePercent());\n    System.out.println(\"Vmem usage in bytes \" + procfsBasedProcessTree\n        .getCumulativeVmem());\n    System.out.println(\"Rss mem usage in bytes \" + procfsBasedProcessTree\n        .getCumulativeRssmem());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
    }
  }
}