{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWebServices.java",
  "functionName": "getEntityTypes",
  "functionId": "getEntityTypes___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__clusterId-String(annotations-@PathParam(\"clusterid\"))__appId-String(annotations-@PathParam(\"appid\"))__flowName-String(annotations-@QueryParam(\"flowname\"))__flowRunId-String(annotations-@QueryParam(\"flowrunid\"))__userId-String(annotations-@QueryParam(\"userid\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
  "functionStartLine": 3340,
  "functionEndLine": 3376,
  "numCommitsSeen": 36,
  "timeTaken": 2153,
  "changeHistory": [
    "bc27f7fb6da76b1b83e410de2bb8c1ecbd11b7f9",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684",
    "02a9710a099fc9572122d87dd3e90c78522f5836",
    "4481561e4a3433197dd8e73f38856eef84f0fd03"
  ],
  "changeHistoryShort": {
    "bc27f7fb6da76b1b83e410de2bb8c1ecbd11b7f9": "Ybodychange",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": "Ybodychange",
    "02a9710a099fc9572122d87dd3e90c78522f5836": "Ybodychange",
    "4481561e4a3433197dd8e73f38856eef84f0fd03": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc27f7fb6da76b1b83e410de2bb8c1ecbd11b7f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7982. Do ACLs check while retrieving entity-types per application. Contribued by Prabhu Joseph.\n",
      "commitDate": "01/09/19 9:45 PM",
      "commitName": "bc27f7fb6da76b1b83e410de2bb8c1ecbd11b7f9",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "30/05/19 9:58 PM",
      "commitNameOld": "e49162f4b3791dbf51079e3b19dd0c8bc2a85158",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 93.99,
      "commitsBetweenForRepo": 823,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   public Set\u003cString\u003e getEntityTypes(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"userid\") String userId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cString\u003e results \u003d null;\n     try {\n-      results \u003d timelineReaderManager.getEntityTypes(\n-          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n-          clusterId, userId, flowName, flowRunId, appId,\n-              null, null, null));\n+      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils.\n+          createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n+          appId, null, null, null);\n+      results \u003d timelineReaderManager.getEntityTypes(context);\n+      checkAccess(getTimelineReaderManager(), callerUGI, context.getUserId());\n       succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     } finally {\n       long latency \u003d Time.monotonicNow() - startTime;\n       METRICS.addGetEntityTypesLatency(latency, succeeded);\n       LOG.info(\"Processed URL \" + url +\n           \" (Took \" + latency + \" ms.)\");\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e getEntityTypes(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"userid\") String userId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cString\u003e results \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils.\n          createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n          appId, null, null, null);\n      results \u003d timelineReaderManager.getEntityTypes(context);\n      checkAccess(getTimelineReaderManager(), callerUGI, context.getUserId());\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntityTypesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8270 Adding JMX Metrics for Timeline Collector and Reader. Contributed by Sushil Ks.\n",
      "commitDate": "27/09/18 3:53 PM",
      "commitName": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "13/09/18 5:17 AM",
      "commitNameOld": "f4bda5e8e9fee6c5a0dda7c79ef14e73aec20e7e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 14.44,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   public Set\u003cString\u003e getEntityTypes(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"userid\") String userId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n+    boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cString\u003e results \u003d null;\n     try {\n       results \u003d timelineReaderManager.getEntityTypes(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, userId, flowName, flowRunId, appId,\n               null, null, null));\n+      succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n+    } finally {\n+      long latency \u003d Time.monotonicNow() - startTime;\n+      METRICS.addGetEntityTypesLatency(latency, succeeded);\n+      LOG.info(\"Processed URL \" + url +\n+          \" (Took \" + latency + \" ms.)\");\n     }\n-    long endTime \u003d Time.monotonicNow();\n-    LOG.info(\"Processed URL \" + url +\n-        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e getEntityTypes(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"userid\") String userId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cString\u003e results \u003d null;\n    try {\n      results \u003d timelineReaderManager.getEntityTypes(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, userId, flowName, flowRunId, appId,\n              null, null, null));\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntityTypesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "02a9710a099fc9572122d87dd3e90c78522f5836": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public Set\u003cString\u003e getEntityTypes(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"userid\") String userId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cString\u003e results \u003d null;\n     try {\n       results \u003d timelineReaderManager.getEntityTypes(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, userId, flowName, flowRunId, appId,\n-          null, null));\n+              null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e getEntityTypes(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"userid\") String userId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cString\u003e results \u003d null;\n    try {\n      results \u003d timelineReaderManager.getEntityTypes(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, userId, flowName, flowRunId, appId,\n              null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "4481561e4a3433197dd8e73f38856eef84f0fd03": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5739. Provide timeline reader API to list available timeline entity types for one application. Contributed by Li Lu.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "4481561e4a3433197dd8e73f38856eef84f0fd03",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,32 @@\n+  public Set\u003cString\u003e getEntityTypes(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"clusterid\") String clusterId,\n+      @PathParam(\"appid\") String appId,\n+      @QueryParam(\"flowname\") String flowName,\n+      @QueryParam(\"flowrunid\") String flowRunId,\n+      @QueryParam(\"userid\") String userId) {\n+    String url \u003d req.getRequestURI() +\n+        (req.getQueryString() \u003d\u003d null ? \"\" :\n+            QUERY_STRING_SEP + req.getQueryString());\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n+    long startTime \u003d Time.monotonicNow();\n+    init(res);\n+    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n+    Set\u003cString\u003e results \u003d null;\n+    try {\n+      results \u003d timelineReaderManager.getEntityTypes(\n+          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n+          clusterId, userId, flowName, flowRunId, appId,\n+          null, null));\n+    } catch (Exception e) {\n+      handleException(e, url, startTime, \"flowrunid\");\n+    }\n+    long endTime \u003d Time.monotonicNow();\n+    LOG.info(\"Processed URL \" + url +\n+        \" (Took \" + (endTime - startTime) + \" ms.)\");\n+    return results;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cString\u003e getEntityTypes(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"userid\") String userId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cString\u003e results \u003d null;\n    try {\n      results \u003d timelineReaderManager.getEntityTypes(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, userId, flowName, flowRunId, appId,\n          null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java"
    }
  }
}