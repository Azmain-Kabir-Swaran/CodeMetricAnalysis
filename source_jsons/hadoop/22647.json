{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CompositeRecordReader.java",
  "functionName": "initialize",
  "functionId": "initialize___split-InputSplit__context-TaskAttemptContext",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java",
  "functionStartLine": 96,
  "functionEndLine": 132,
  "numCommitsSeen": 4,
  "timeTaken": 4520,
  "changeHistory": [
    "fc7c8f9bf2588fd25f8b457ee4a9b444e619519c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "fc7c8f9bf2588fd25f8b457ee4a9b444e619519c": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fc7c8f9bf2588fd25f8b457ee4a9b444e619519c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10686. Writables are not always configured. (Abraham Elmahrek via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1602079 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/14 12:23 AM",
      "commitName": "fc7c8f9bf2588fd25f8b457ee4a9b444e619519c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1022.3,
      "commitsBetweenForRepo": 6515,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public void initialize(InputSplit split, TaskAttemptContext context) \n       throws IOException, InterruptedException {\n     if (kids !\u003d null) {\n       for (int i \u003d 0; i \u003c kids.length; ++i) {\n         kids[i].initialize(((CompositeInputSplit)split).get(i), context);\n         if (kids[i].key() \u003d\u003d null) {\n           continue;\n         }\n         \n         // get keyclass\n         if (keyclass \u003d\u003d null) {\n           keyclass \u003d kids[i].createKey().getClass().\n             asSubclass(WritableComparable.class);\n         }\n         // create priority queue\n         if (null \u003d\u003d q) {\n-          cmp \u003d WritableComparator.get(keyclass);\n+          cmp \u003d WritableComparator.get(keyclass, conf);\n           q \u003d new PriorityQueue\u003cComposableRecordReader\u003cK,?\u003e\u003e(3,\n                 new Comparator\u003cComposableRecordReader\u003cK,?\u003e\u003e() {\n                   public int compare(ComposableRecordReader\u003cK,?\u003e o1,\n                                      ComposableRecordReader\u003cK,?\u003e o2) {\n                     return cmp.compare(o1.key(), o2.key());\n                   }\n                 });\n         }\n         // Explicit check for key class agreement\n         if (!keyclass.equals(kids[i].key().getClass())) {\n           throw new ClassCastException(\"Child key classes fail to agree\");\n         }\n         \n         // add the kid to priority queue if it has any elements\n         if (kids[i].hasNext()) {\n           q.add(kids[i]);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(InputSplit split, TaskAttemptContext context) \n      throws IOException, InterruptedException {\n    if (kids !\u003d null) {\n      for (int i \u003d 0; i \u003c kids.length; ++i) {\n        kids[i].initialize(((CompositeInputSplit)split).get(i), context);\n        if (kids[i].key() \u003d\u003d null) {\n          continue;\n        }\n        \n        // get keyclass\n        if (keyclass \u003d\u003d null) {\n          keyclass \u003d kids[i].createKey().getClass().\n            asSubclass(WritableComparable.class);\n        }\n        // create priority queue\n        if (null \u003d\u003d q) {\n          cmp \u003d WritableComparator.get(keyclass, conf);\n          q \u003d new PriorityQueue\u003cComposableRecordReader\u003cK,?\u003e\u003e(3,\n                new Comparator\u003cComposableRecordReader\u003cK,?\u003e\u003e() {\n                  public int compare(ComposableRecordReader\u003cK,?\u003e o1,\n                                     ComposableRecordReader\u003cK,?\u003e o2) {\n                    return cmp.compare(o1.key(), o2.key());\n                  }\n                });\n        }\n        // Explicit check for key class agreement\n        if (!keyclass.equals(kids[i].key().getClass())) {\n          throw new ClassCastException(\"Child key classes fail to agree\");\n        }\n        \n        // add the kid to priority queue if it has any elements\n        if (kids[i].hasNext()) {\n          q.add(kids[i]);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(InputSplit split, TaskAttemptContext context) \n      throws IOException, InterruptedException {\n    if (kids !\u003d null) {\n      for (int i \u003d 0; i \u003c kids.length; ++i) {\n        kids[i].initialize(((CompositeInputSplit)split).get(i), context);\n        if (kids[i].key() \u003d\u003d null) {\n          continue;\n        }\n        \n        // get keyclass\n        if (keyclass \u003d\u003d null) {\n          keyclass \u003d kids[i].createKey().getClass().\n            asSubclass(WritableComparable.class);\n        }\n        // create priority queue\n        if (null \u003d\u003d q) {\n          cmp \u003d WritableComparator.get(keyclass);\n          q \u003d new PriorityQueue\u003cComposableRecordReader\u003cK,?\u003e\u003e(3,\n                new Comparator\u003cComposableRecordReader\u003cK,?\u003e\u003e() {\n                  public int compare(ComposableRecordReader\u003cK,?\u003e o1,\n                                     ComposableRecordReader\u003cK,?\u003e o2) {\n                    return cmp.compare(o1.key(), o2.key());\n                  }\n                });\n        }\n        // Explicit check for key class agreement\n        if (!keyclass.equals(kids[i].key().getClass())) {\n          throw new ClassCastException(\"Child key classes fail to agree\");\n        }\n        \n        // add the kid to priority queue if it has any elements\n        if (kids[i].hasNext()) {\n          q.add(kids[i]);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(InputSplit split, TaskAttemptContext context) \n      throws IOException, InterruptedException {\n    if (kids !\u003d null) {\n      for (int i \u003d 0; i \u003c kids.length; ++i) {\n        kids[i].initialize(((CompositeInputSplit)split).get(i), context);\n        if (kids[i].key() \u003d\u003d null) {\n          continue;\n        }\n        \n        // get keyclass\n        if (keyclass \u003d\u003d null) {\n          keyclass \u003d kids[i].createKey().getClass().\n            asSubclass(WritableComparable.class);\n        }\n        // create priority queue\n        if (null \u003d\u003d q) {\n          cmp \u003d WritableComparator.get(keyclass);\n          q \u003d new PriorityQueue\u003cComposableRecordReader\u003cK,?\u003e\u003e(3,\n                new Comparator\u003cComposableRecordReader\u003cK,?\u003e\u003e() {\n                  public int compare(ComposableRecordReader\u003cK,?\u003e o1,\n                                     ComposableRecordReader\u003cK,?\u003e o2) {\n                    return cmp.compare(o1.key(), o2.key());\n                  }\n                });\n        }\n        // Explicit check for key class agreement\n        if (!keyclass.equals(kids[i].key().getClass())) {\n          throw new ClassCastException(\"Child key classes fail to agree\");\n        }\n        \n        // add the kid to priority queue if it has any elements\n        if (kids[i].hasNext()) {\n          q.add(kids[i]);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,37 @@\n+  public void initialize(InputSplit split, TaskAttemptContext context) \n+      throws IOException, InterruptedException {\n+    if (kids !\u003d null) {\n+      for (int i \u003d 0; i \u003c kids.length; ++i) {\n+        kids[i].initialize(((CompositeInputSplit)split).get(i), context);\n+        if (kids[i].key() \u003d\u003d null) {\n+          continue;\n+        }\n+        \n+        // get keyclass\n+        if (keyclass \u003d\u003d null) {\n+          keyclass \u003d kids[i].createKey().getClass().\n+            asSubclass(WritableComparable.class);\n+        }\n+        // create priority queue\n+        if (null \u003d\u003d q) {\n+          cmp \u003d WritableComparator.get(keyclass);\n+          q \u003d new PriorityQueue\u003cComposableRecordReader\u003cK,?\u003e\u003e(3,\n+                new Comparator\u003cComposableRecordReader\u003cK,?\u003e\u003e() {\n+                  public int compare(ComposableRecordReader\u003cK,?\u003e o1,\n+                                     ComposableRecordReader\u003cK,?\u003e o2) {\n+                    return cmp.compare(o1.key(), o2.key());\n+                  }\n+                });\n+        }\n+        // Explicit check for key class agreement\n+        if (!keyclass.equals(kids[i].key().getClass())) {\n+          throw new ClassCastException(\"Child key classes fail to agree\");\n+        }\n+        \n+        // add the kid to priority queue if it has any elements\n+        if (kids[i].hasNext()) {\n+          q.add(kids[i]);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(InputSplit split, TaskAttemptContext context) \n      throws IOException, InterruptedException {\n    if (kids !\u003d null) {\n      for (int i \u003d 0; i \u003c kids.length; ++i) {\n        kids[i].initialize(((CompositeInputSplit)split).get(i), context);\n        if (kids[i].key() \u003d\u003d null) {\n          continue;\n        }\n        \n        // get keyclass\n        if (keyclass \u003d\u003d null) {\n          keyclass \u003d kids[i].createKey().getClass().\n            asSubclass(WritableComparable.class);\n        }\n        // create priority queue\n        if (null \u003d\u003d q) {\n          cmp \u003d WritableComparator.get(keyclass);\n          q \u003d new PriorityQueue\u003cComposableRecordReader\u003cK,?\u003e\u003e(3,\n                new Comparator\u003cComposableRecordReader\u003cK,?\u003e\u003e() {\n                  public int compare(ComposableRecordReader\u003cK,?\u003e o1,\n                                     ComposableRecordReader\u003cK,?\u003e o2) {\n                    return cmp.compare(o1.key(), o2.key());\n                  }\n                });\n        }\n        // Explicit check for key class agreement\n        if (!keyclass.equals(kids[i].key().getClass())) {\n          throw new ClassCastException(\"Child key classes fail to agree\");\n        }\n        \n        // add the kid to priority queue if it has any elements\n        if (kids[i].hasNext()) {\n          q.add(kids[i]);\n        }\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/join/CompositeRecordReader.java"
    }
  }
}