{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommonNodeLabelsManager.java",
  "functionName": "addToCluserNodeLabels",
  "functionId": "addToCluserNodeLabels___labels-Collection__NodeLabel__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
  "functionStartLine": 303,
  "functionEndLine": 335,
  "numCommitsSeen": 62,
  "timeTaken": 3862,
  "changeHistory": [
    "2f7712be09d5b68978547f95b1be2352cdd46266",
    "8acb30b0167e498991aef6993df7e36020428844",
    "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d",
    "e1feb4ea1a532d680d6ca69b55ffcae1552d64f0",
    "24aa462673d392fed859f8088acf9679ae62a129",
    "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5",
    "746ad6e989683fe1dfc61a611702c9be7b5cd264",
    "5f57b904f550515693d93a2959e663b0d0260696",
    "4cfd5bc7c18bb9a828f573b5c4d2b13fa28e732a",
    "db7f1653198b950e89567c06898d64f6b930a0ee"
  ],
  "changeHistoryShort": {
    "2f7712be09d5b68978547f95b1be2352cdd46266": "Ybodychange",
    "8acb30b0167e498991aef6993df7e36020428844": "Ybodychange",
    "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1feb4ea1a532d680d6ca69b55ffcae1552d64f0": "Ybodychange",
    "24aa462673d392fed859f8088acf9679ae62a129": "Ybodychange",
    "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5": "Ybodychange",
    "746ad6e989683fe1dfc61a611702c9be7b5cd264": "Ybodychange",
    "5f57b904f550515693d93a2959e663b0d0260696": "Ybodychange",
    "4cfd5bc7c18bb9a828f573b5c4d2b13fa28e732a": "Ybodychange",
    "db7f1653198b950e89567c06898d64f6b930a0ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2f7712be09d5b68978547f95b1be2352cdd46266": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6858. Attribute Manager to store and provide node attributes in RM. Contributed by Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "2f7712be09d5b68978547f95b1be2352cdd46266",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 91.79,
      "commitsBetweenForRepo": 642,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public void addToCluserNodeLabels(Collection\u003cNodeLabel\u003e labels)\n       throws IOException {\n     if (!nodeLabelsEnabled) {\n       LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n       throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n     }\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n     List\u003cNodeLabel\u003e newLabels \u003d new ArrayList\u003cNodeLabel\u003e();\n     normalizeNodeLabels(labels);\n     // check any mismatch in exclusivity no mismatch with skip\n     checkExclusivityMatch(labels);\n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n     for (NodeLabel label : labels) {\n-      checkAndThrowLabelName(label.getName());\n+      NodeLabelUtil.checkAndThrowLabelName(label.getName());\n     }\n \n     for (NodeLabel label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n       if (this.labelCollections.get(label.getName()) \u003d\u003d null) {\n         this.labelCollections.put(label.getName(), new RMNodeLabel(label));\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Collection\u003cNodeLabel\u003e labels)\n      throws IOException {\n    if (!nodeLabelsEnabled) {\n      LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n      throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n    }\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    List\u003cNodeLabel\u003e newLabels \u003d new ArrayList\u003cNodeLabel\u003e();\n    normalizeNodeLabels(labels);\n    // check any mismatch in exclusivity no mismatch with skip\n    checkExclusivityMatch(labels);\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (NodeLabel label : labels) {\n      NodeLabelUtil.checkAndThrowLabelName(label.getName());\n    }\n\n    for (NodeLabel label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label.getName()) \u003d\u003d null) {\n        this.labelCollections.put(label.getName(), new RMNodeLabel(label));\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "8acb30b0167e498991aef6993df7e36020428844": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3963. AddNodeLabel on duplicate label addition shows success. (Bibin A Chundatt via wangda)\n",
      "commitDate": "30/07/15 9:42 AM",
      "commitName": "8acb30b0167e498991aef6993df7e36020428844",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/05/15 12:51 PM",
      "commitNameOld": "ec0a852a37d5c91a62d3d0ff3ddbd9d58235b312",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 63.87,
      "commitsBetweenForRepo": 431,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   public void addToCluserNodeLabels(Collection\u003cNodeLabel\u003e labels)\n       throws IOException {\n     if (!nodeLabelsEnabled) {\n       LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n       throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n     }\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n     List\u003cNodeLabel\u003e newLabels \u003d new ArrayList\u003cNodeLabel\u003e();\n     normalizeNodeLabels(labels);\n-\n+    // check any mismatch in exclusivity no mismatch with skip\n+    checkExclusivityMatch(labels);\n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n     for (NodeLabel label : labels) {\n       checkAndThrowLabelName(label.getName());\n     }\n \n     for (NodeLabel label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n       if (this.labelCollections.get(label.getName()) \u003d\u003d null) {\n         this.labelCollections.put(label.getName(), new RMNodeLabel(label));\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Collection\u003cNodeLabel\u003e labels)\n      throws IOException {\n    if (!nodeLabelsEnabled) {\n      LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n      throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n    }\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    List\u003cNodeLabel\u003e newLabels \u003d new ArrayList\u003cNodeLabel\u003e();\n    normalizeNodeLabels(labels);\n    // check any mismatch in exclusivity no mismatch with skip\n    checkExclusivityMatch(labels);\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (NodeLabel label : labels) {\n      checkAndThrowLabelName(label.getName());\n    }\n\n    for (NodeLabel label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label.getName()) \u003d\u003d null) {\n        this.labelCollections.put(label.getName(), new RMNodeLabel(label));\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3413. Changed Nodelabel attributes (like exclusivity) to be settable only via addToClusterNodeLabels but not changeable at runtime. (Wangda Tan via vinodkv)\n",
      "commitDate": "23/04/15 11:19 AM",
      "commitName": "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3413. Changed Nodelabel attributes (like exclusivity) to be settable only via addToClusterNodeLabels but not changeable at runtime. (Wangda Tan via vinodkv)\n",
          "commitDate": "23/04/15 11:19 AM",
          "commitName": "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "01/04/15 10:14 AM",
          "commitNameOld": "492239424a3ace9868b6154f44a0f18fa5318235",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 22.05,
          "commitsBetweenForRepo": 185,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n+  public void addToCluserNodeLabels(Collection\u003cNodeLabel\u003e labels)\n+      throws IOException {\n     if (!nodeLabelsEnabled) {\n       LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n       throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n     }\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n-    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n-    labels \u003d normalizeLabels(labels);\n+    List\u003cNodeLabel\u003e newLabels \u003d new ArrayList\u003cNodeLabel\u003e();\n+    normalizeNodeLabels(labels);\n \n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n-    for (String label : labels) {\n-      checkAndThrowLabelName(label);\n+    for (NodeLabel label : labels) {\n+      checkAndThrowLabelName(label.getName());\n     }\n \n-    for (String label : labels) {\n+    for (NodeLabel label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n-      if (this.labelCollections.get(label) \u003d\u003d null) {\n-        this.labelCollections.put(label, new RMNodeLabel(label));\n+      if (this.labelCollections.get(label.getName()) \u003d\u003d null) {\n+        this.labelCollections.put(label.getName(), new RMNodeLabel(label));\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addToCluserNodeLabels(Collection\u003cNodeLabel\u003e labels)\n      throws IOException {\n    if (!nodeLabelsEnabled) {\n      LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n      throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n    }\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    List\u003cNodeLabel\u003e newLabels \u003d new ArrayList\u003cNodeLabel\u003e();\n    normalizeNodeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (NodeLabel label : labels) {\n      checkAndThrowLabelName(label.getName());\n    }\n\n    for (NodeLabel label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label.getName()) \u003d\u003d null) {\n        this.labelCollections.put(label.getName(), new RMNodeLabel(label));\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {
            "oldValue": "[labels-Set\u003cString\u003e]",
            "newValue": "[labels-Collection\u003cNodeLabel\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3413. Changed Nodelabel attributes (like exclusivity) to be settable only via addToClusterNodeLabels but not changeable at runtime. (Wangda Tan via vinodkv)\n",
          "commitDate": "23/04/15 11:19 AM",
          "commitName": "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "01/04/15 10:14 AM",
          "commitNameOld": "492239424a3ace9868b6154f44a0f18fa5318235",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 22.05,
          "commitsBetweenForRepo": 185,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n+  public void addToCluserNodeLabels(Collection\u003cNodeLabel\u003e labels)\n+      throws IOException {\n     if (!nodeLabelsEnabled) {\n       LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n       throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n     }\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n-    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n-    labels \u003d normalizeLabels(labels);\n+    List\u003cNodeLabel\u003e newLabels \u003d new ArrayList\u003cNodeLabel\u003e();\n+    normalizeNodeLabels(labels);\n \n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n-    for (String label : labels) {\n-      checkAndThrowLabelName(label);\n+    for (NodeLabel label : labels) {\n+      checkAndThrowLabelName(label.getName());\n     }\n \n-    for (String label : labels) {\n+    for (NodeLabel label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n-      if (this.labelCollections.get(label) \u003d\u003d null) {\n-        this.labelCollections.put(label, new RMNodeLabel(label));\n+      if (this.labelCollections.get(label.getName()) \u003d\u003d null) {\n+        this.labelCollections.put(label.getName(), new RMNodeLabel(label));\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addToCluserNodeLabels(Collection\u003cNodeLabel\u003e labels)\n      throws IOException {\n    if (!nodeLabelsEnabled) {\n      LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n      throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n    }\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    List\u003cNodeLabel\u003e newLabels \u003d new ArrayList\u003cNodeLabel\u003e();\n    normalizeNodeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (NodeLabel label : labels) {\n      checkAndThrowLabelName(label.getName());\n    }\n\n    for (NodeLabel label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label.getName()) \u003d\u003d null) {\n        this.labelCollections.put(label.getName(), new RMNodeLabel(label));\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1feb4ea1a532d680d6ca69b55ffcae1552d64f0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3345. Add non-exclusive node label API. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 7:04 PM",
      "commitName": "e1feb4ea1a532d680d6ca69b55ffcae1552d64f0",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/03/15 7:19 AM",
      "commitNameOld": "3da9a97cfbcc3a1c50aaf85b1a129d4d269cd5fd",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 4.49,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n     if (!nodeLabelsEnabled) {\n       LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n       throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n     }\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n     Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n     labels \u003d normalizeLabels(labels);\n \n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n     for (String label : labels) {\n       checkAndThrowLabelName(label);\n     }\n \n     for (String label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n       if (this.labelCollections.get(label) \u003d\u003d null) {\n-        this.labelCollections.put(label, new NodeLabel(label));\n+        this.labelCollections.put(label, new RMNodeLabel(label));\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n    if (!nodeLabelsEnabled) {\n      LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n      throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n    }\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n    labels \u003d normalizeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (String label : labels) {\n      checkAndThrowLabelName(label);\n    }\n\n    for (String label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label) \u003d\u003d null) {\n        this.labelCollections.put(label, new RMNodeLabel(label));\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "24aa462673d392fed859f8088acf9679ae62a129": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2800. Remove MemoryNodeLabelsStore and add a way to enable/disable node labels feature. Contributed by Wangda Tan.\n",
      "commitDate": "23/01/15 3:37 AM",
      "commitName": "24aa462673d392fed859f8088acf9679ae62a129",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "09/01/15 5:49 PM",
      "commitNameOld": "a2604062681230442eefae79815db5d77ccc4c2e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.41,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n   public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n+    if (!nodeLabelsEnabled) {\n+      LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n+      throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n+    }\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n     Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n     labels \u003d normalizeLabels(labels);\n \n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n     for (String label : labels) {\n       checkAndThrowLabelName(label);\n     }\n \n     for (String label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n       if (this.labelCollections.get(label) \u003d\u003d null) {\n         this.labelCollections.put(label, new NodeLabel(label));\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n    if (!nodeLabelsEnabled) {\n      LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\n      throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\n    }\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n    labels \u003d normalizeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (String label : labels) {\n      checkAndThrowLabelName(label);\n    }\n\n    for (String label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label) \u003d\u003d null) {\n        this.labelCollections.put(label, new NodeLabel(label));\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2493. Added node-labels page on RM web UI. Contributed by Wangda Tan\n",
      "commitDate": "30/12/14 4:49 PM",
      "commitName": "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/12/14 4:48 PM",
      "commitNameOld": "746ad6e989683fe1dfc61a611702c9be7b5cd264",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n     Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n     labels \u003d normalizeLabels(labels);\n \n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n     for (String label : labels) {\n       checkAndThrowLabelName(label);\n     }\n \n     for (String label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n       if (this.labelCollections.get(label) \u003d\u003d null) {\n-        this.labelCollections.put(label, new Label());\n+        this.labelCollections.put(label, new NodeLabel(label));\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n    labels \u003d normalizeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (String label : labels) {\n      checkAndThrowLabelName(label);\n    }\n\n    for (String label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label) \u003d\u003d null) {\n        this.labelCollections.put(label, new NodeLabel(label));\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "746ad6e989683fe1dfc61a611702c9be7b5cd264": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-2492(wrong jira number). Added node-labels page on RM web UI. Contributed by Wangda Tan\"\n\nThis reverts commit 5f57b904f550515693d93a2959e663b0d0260696.\n",
      "commitDate": "30/12/14 4:48 PM",
      "commitName": "746ad6e989683fe1dfc61a611702c9be7b5cd264",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/12/14 3:38 PM",
      "commitNameOld": "5f57b904f550515693d93a2959e663b0d0260696",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n     Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n     labels \u003d normalizeLabels(labels);\n \n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n     for (String label : labels) {\n       checkAndThrowLabelName(label);\n     }\n \n     for (String label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n       if (this.labelCollections.get(label) \u003d\u003d null) {\n-        this.labelCollections.put(label, new NodeLabel(label));\n+        this.labelCollections.put(label, new Label());\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n    labels \u003d normalizeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (String label : labels) {\n      checkAndThrowLabelName(label);\n    }\n\n    for (String label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label) \u003d\u003d null) {\n        this.labelCollections.put(label, new Label());\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "5f57b904f550515693d93a2959e663b0d0260696": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2492. Added node-labels page on RM web UI. Contributed by Wangda Tan\n",
      "commitDate": "30/12/14 3:38 PM",
      "commitName": "5f57b904f550515693d93a2959e663b0d0260696",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/12/14 3:06 AM",
      "commitNameOld": "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 8.52,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n     Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n     labels \u003d normalizeLabels(labels);\n \n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n     for (String label : labels) {\n       checkAndThrowLabelName(label);\n     }\n \n     for (String label : labels) {\n       // shouldn\u0027t overwrite it to avoid changing the Label.resource\n       if (this.labelCollections.get(label) \u003d\u003d null) {\n-        this.labelCollections.put(label, new Label());\n+        this.labelCollections.put(label, new NodeLabel(label));\n         newLabels.add(label);\n       }\n     }\n     if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n           new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n    labels \u003d normalizeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (String label : labels) {\n      checkAndThrowLabelName(label);\n    }\n\n    for (String label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label) \u003d\u003d null) {\n        this.labelCollections.put(label, new NodeLabel(label));\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "4cfd5bc7c18bb9a828f573b5c4d2b13fa28e732a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2753. Fixed a bunch of bugs in the NodeLabelsManager classes. Contributed by Zhihai xu.\n",
      "commitDate": "07/11/14 2:15 PM",
      "commitName": "4cfd5bc7c18bb9a828f573b5c4d2b13fa28e732a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/10/14 12:07 PM",
      "commitNameOld": "82567664988b673f1b819a42a4baf31cb0dcb331",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.13,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n     if (null \u003d\u003d labels || labels.isEmpty()) {\n       return;\n     }\n-\n+    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n     labels \u003d normalizeLabels(labels);\n \n     // do a check before actual adding them, will throw exception if any of them\n     // doesn\u0027t meet label name requirement\n     for (String label : labels) {\n       checkAndThrowLabelName(label);\n     }\n \n     for (String label : labels) {\n-      this.labelCollections.put(label, new Label());\n+      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n+      if (this.labelCollections.get(label) \u003d\u003d null) {\n+        this.labelCollections.put(label, new Label());\n+        newLabels.add(label);\n+      }\n     }\n-    if (null !\u003d dispatcher) {\n+    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n       dispatcher.getEventHandler().handle(\n-          new StoreNewClusterNodeLabels(labels));\n+          new StoreNewClusterNodeLabels(newLabels));\n     }\n \n     LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n    Set\u003cString\u003e newLabels \u003d new HashSet\u003cString\u003e();\n    labels \u003d normalizeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (String label : labels) {\n      checkAndThrowLabelName(label);\n    }\n\n    for (String label : labels) {\n      // shouldn\u0027t overwrite it to avoid changing the Label.resource\n      if (this.labelCollections.get(label) \u003d\u003d null) {\n        this.labelCollections.put(label, new Label());\n        newLabels.add(label);\n      }\n    }\n    if (null !\u003d dispatcher \u0026\u0026 !newLabels.isEmpty()) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(newLabels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "db7f1653198b950e89567c06898d64f6b930a0ee": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2494. Added NodeLabels Manager internal API and implementation. Contributed by Wangda Tan.\n",
      "commitDate": "10/10/14 11:44 AM",
      "commitName": "db7f1653198b950e89567c06898d64f6b930a0ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,23 @@\n+  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n+    if (null \u003d\u003d labels || labels.isEmpty()) {\n+      return;\n+    }\n+\n+    labels \u003d normalizeLabels(labels);\n+\n+    // do a check before actual adding them, will throw exception if any of them\n+    // doesn\u0027t meet label name requirement\n+    for (String label : labels) {\n+      checkAndThrowLabelName(label);\n+    }\n+\n+    for (String label : labels) {\n+      this.labelCollections.put(label, new Label());\n+    }\n+    if (null !\u003d dispatcher) {\n+      dispatcher.getEventHandler().handle(\n+          new StoreNewClusterNodeLabels(labels));\n+    }\n+\n+    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void addToCluserNodeLabels(Set\u003cString\u003e labels) throws IOException {\n    if (null \u003d\u003d labels || labels.isEmpty()) {\n      return;\n    }\n\n    labels \u003d normalizeLabels(labels);\n\n    // do a check before actual adding them, will throw exception if any of them\n    // doesn\u0027t meet label name requirement\n    for (String label : labels) {\n      checkAndThrowLabelName(label);\n    }\n\n    for (String label : labels) {\n      this.labelCollections.put(label, new Label());\n    }\n    if (null !\u003d dispatcher) {\n      dispatcher.getEventHandler().handle(\n          new StoreNewClusterNodeLabels(labels));\n    }\n\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java"
    }
  }
}