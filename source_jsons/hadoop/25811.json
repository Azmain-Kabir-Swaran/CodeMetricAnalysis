{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerAllocator.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
  "functionStartLine": 248,
  "functionEndLine": 281,
  "numCommitsSeen": 112,
  "timeTaken": 2655,
  "changeHistory": [
    "0928502029ef141759008997335ea2cd836a7154",
    "1e45b1f1fd38543b0b1233f57fdee1ac4a365332",
    "08f8abf5639d39167952dc5120b44fe35c63ff7a"
  ],
  "changeHistoryShort": {
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "1e45b1f1fd38543b0b1233f57fdee1ac4a365332": "Ybodychange",
    "08f8abf5639d39167952dc5120b44fe35c63ff7a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/06/13 4:33 PM",
          "commitNameOld": "9fcfbf5f51f2557566694377f94a556226585d68",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 6.68,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     this.eventHandlingThread \u003d new Thread() {\n       @SuppressWarnings(\"unchecked\")\n       @Override\n       public void run() {\n \n         ContainerAllocatorEvent event;\n \n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d RMContainerAllocator.this.eventQueue.take();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.error(\"Returning, interrupted : \" + e);\n             }\n             return;\n           }\n \n           try {\n             handleEvent(event);\n           } catch (Throwable t) {\n             LOG.error(\"Error in handling event type \" + event.getType()\n                 + \" to the ContainreAllocator\", t);\n             // Kill the AM\n             eventHandler.handle(new JobEvent(getJob().getID(),\n               JobEventType.INTERNAL_ERROR));\n             return;\n           }\n         }\n       }\n     };\n     this.eventHandlingThread.start();\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    this.eventHandlingThread \u003d new Thread() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public void run() {\n\n        ContainerAllocatorEvent event;\n\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d RMContainerAllocator.this.eventQueue.take();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.error(\"Returning, interrupted : \" + e);\n            }\n            return;\n          }\n\n          try {\n            handleEvent(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the ContainreAllocator\", t);\n            // Kill the AM\n            eventHandler.handle(new JobEvent(getJob().getID(),\n              JobEventType.INTERNAL_ERROR));\n            return;\n          }\n        }\n      }\n    };\n    this.eventHandlingThread.start();\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/06/13 4:33 PM",
          "commitNameOld": "9fcfbf5f51f2557566694377f94a556226585d68",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 6.68,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     this.eventHandlingThread \u003d new Thread() {\n       @SuppressWarnings(\"unchecked\")\n       @Override\n       public void run() {\n \n         ContainerAllocatorEvent event;\n \n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d RMContainerAllocator.this.eventQueue.take();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.error(\"Returning, interrupted : \" + e);\n             }\n             return;\n           }\n \n           try {\n             handleEvent(event);\n           } catch (Throwable t) {\n             LOG.error(\"Error in handling event type \" + event.getType()\n                 + \" to the ContainreAllocator\", t);\n             // Kill the AM\n             eventHandler.handle(new JobEvent(getJob().getID(),\n               JobEventType.INTERNAL_ERROR));\n             return;\n           }\n         }\n       }\n     };\n     this.eventHandlingThread.start();\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    this.eventHandlingThread \u003d new Thread() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public void run() {\n\n        ContainerAllocatorEvent event;\n\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d RMContainerAllocator.this.eventQueue.take();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.error(\"Returning, interrupted : \" + e);\n            }\n            return;\n          }\n\n          try {\n            handleEvent(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the ContainreAllocator\", t);\n            // Kill the AM\n            eventHandler.handle(new JobEvent(getJob().getID(),\n              JobEventType.INTERNAL_ERROR));\n            return;\n          }\n        }\n      }\n    };\n    this.eventHandlingThread.start();\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/06/13 4:33 PM",
          "commitNameOld": "9fcfbf5f51f2557566694377f94a556226585d68",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 6.68,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     this.eventHandlingThread \u003d new Thread() {\n       @SuppressWarnings(\"unchecked\")\n       @Override\n       public void run() {\n \n         ContainerAllocatorEvent event;\n \n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d RMContainerAllocator.this.eventQueue.take();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.error(\"Returning, interrupted : \" + e);\n             }\n             return;\n           }\n \n           try {\n             handleEvent(event);\n           } catch (Throwable t) {\n             LOG.error(\"Error in handling event type \" + event.getType()\n                 + \" to the ContainreAllocator\", t);\n             // Kill the AM\n             eventHandler.handle(new JobEvent(getJob().getID(),\n               JobEventType.INTERNAL_ERROR));\n             return;\n           }\n         }\n       }\n     };\n     this.eventHandlingThread.start();\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    this.eventHandlingThread \u003d new Thread() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public void run() {\n\n        ContainerAllocatorEvent event;\n\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d RMContainerAllocator.this.eventQueue.take();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.error(\"Returning, interrupted : \" + e);\n            }\n            return;\n          }\n\n          try {\n            handleEvent(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the ContainreAllocator\", t);\n            // Kill the AM\n            eventHandler.handle(new JobEvent(getJob().getID(),\n              JobEventType.INTERNAL_ERROR));\n            return;\n          }\n        }\n      }\n    };\n    this.eventHandlingThread.start();\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/06/13 4:33 PM",
          "commitNameOld": "9fcfbf5f51f2557566694377f94a556226585d68",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 6.68,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     this.eventHandlingThread \u003d new Thread() {\n       @SuppressWarnings(\"unchecked\")\n       @Override\n       public void run() {\n \n         ContainerAllocatorEvent event;\n \n         while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d RMContainerAllocator.this.eventQueue.take();\n           } catch (InterruptedException e) {\n             if (!stopped.get()) {\n               LOG.error(\"Returning, interrupted : \" + e);\n             }\n             return;\n           }\n \n           try {\n             handleEvent(event);\n           } catch (Throwable t) {\n             LOG.error(\"Error in handling event type \" + event.getType()\n                 + \" to the ContainreAllocator\", t);\n             // Kill the AM\n             eventHandler.handle(new JobEvent(getJob().getID(),\n               JobEventType.INTERNAL_ERROR));\n             return;\n           }\n         }\n       }\n     };\n     this.eventHandlingThread.start();\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    this.eventHandlingThread \u003d new Thread() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public void run() {\n\n        ContainerAllocatorEvent event;\n\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d RMContainerAllocator.this.eventQueue.take();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.error(\"Returning, interrupted : \" + e);\n            }\n            return;\n          }\n\n          try {\n            handleEvent(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the ContainreAllocator\", t);\n            // Kill the AM\n            eventHandler.handle(new JobEvent(getJob().getID(),\n              JobEventType.INTERNAL_ERROR));\n            return;\n          }\n        }\n      }\n    };\n    this.eventHandlingThread.start();\n    super.serviceStart();\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "1e45b1f1fd38543b0b1233f57fdee1ac4a365332": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4741. WARN and ERROR messages logged during normal AM shutdown. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401738 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 8:45 AM",
      "commitName": "1e45b1f1fd38543b0b1233f57fdee1ac4a365332",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "16/07/12 12:11 PM",
      "commitNameOld": "e1c5e7dd2b304651eee692442b2e82ada35b164d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 99.86,
      "commitsBetweenForRepo": 601,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public void start() {\n     this.eventHandlingThread \u003d new Thread() {\n       @SuppressWarnings(\"unchecked\")\n       @Override\n       public void run() {\n \n         ContainerAllocatorEvent event;\n \n-        while (!stopEventHandling \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           try {\n             event \u003d RMContainerAllocator.this.eventQueue.take();\n           } catch (InterruptedException e) {\n-            LOG.error(\"Returning, interrupted : \" + e);\n+            if (!stopped.get()) {\n+              LOG.error(\"Returning, interrupted : \" + e);\n+            }\n             return;\n           }\n \n           try {\n             handleEvent(event);\n           } catch (Throwable t) {\n             LOG.error(\"Error in handling event type \" + event.getType()\n                 + \" to the ContainreAllocator\", t);\n             // Kill the AM\n             eventHandler.handle(new JobEvent(getJob().getID(),\n               JobEventType.INTERNAL_ERROR));\n             return;\n           }\n         }\n       }\n     };\n     this.eventHandlingThread.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    this.eventHandlingThread \u003d new Thread() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public void run() {\n\n        ContainerAllocatorEvent event;\n\n        while (!stopped.get() \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d RMContainerAllocator.this.eventQueue.take();\n          } catch (InterruptedException e) {\n            if (!stopped.get()) {\n              LOG.error(\"Returning, interrupted : \" + e);\n            }\n            return;\n          }\n\n          try {\n            handleEvent(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the ContainreAllocator\", t);\n            // Kill the AM\n            eventHandler.handle(new JobEvent(getJob().getID(),\n              JobEventType.INTERNAL_ERROR));\n            return;\n          }\n        }\n      }\n    };\n    this.eventHandlingThread.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "08f8abf5639d39167952dc5120b44fe35c63ff7a": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3572. Moved AM event dispatcher to a separate thread for performance reasons. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227426 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/12 5:37 PM",
      "commitName": "08f8abf5639d39167952dc5120b44fe35c63ff7a",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,32 @@\n+  public void start() {\n+    this.eventHandlingThread \u003d new Thread() {\n+      @SuppressWarnings(\"unchecked\")\n+      @Override\n+      public void run() {\n+\n+        ContainerAllocatorEvent event;\n+\n+        while (!stopEventHandling \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+          try {\n+            event \u003d RMContainerAllocator.this.eventQueue.take();\n+          } catch (InterruptedException e) {\n+            LOG.error(\"Returning, interrupted : \" + e);\n+            return;\n+          }\n+\n+          try {\n+            handleEvent(event);\n+          } catch (Throwable t) {\n+            LOG.error(\"Error in handling event type \" + event.getType()\n+                + \" to the ContainreAllocator\", t);\n+            // Kill the AM\n+            eventHandler.handle(new JobEvent(getJob().getID(),\n+              JobEventType.INTERNAL_ERROR));\n+            return;\n+          }\n+        }\n+      }\n+    };\n+    this.eventHandlingThread.start();\n+    super.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    this.eventHandlingThread \u003d new Thread() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public void run() {\n\n        ContainerAllocatorEvent event;\n\n        while (!stopEventHandling \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          try {\n            event \u003d RMContainerAllocator.this.eventQueue.take();\n          } catch (InterruptedException e) {\n            LOG.error(\"Returning, interrupted : \" + e);\n            return;\n          }\n\n          try {\n            handleEvent(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" to the ContainreAllocator\", t);\n            // Kill the AM\n            eventHandler.handle(new JobEvent(getJob().getID(),\n              JobEventType.INTERNAL_ERROR));\n            return;\n          }\n        }\n      }\n    };\n    this.eventHandlingThread.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
    }
  }
}