{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServerRMProxy.java",
  "functionName": "getRMAddress",
  "functionId": "getRMAddress___conf-YarnConfiguration__protocol-Class__?__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/ServerRMProxy.java",
  "functionStartLine": 80,
  "functionEndLine": 98,
  "numCommitsSeen": 14,
  "timeTaken": 2413,
  "changeHistory": [
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
    "ca125153b319a8f5d75585d25cb0f37ae717be01",
    "cbab04727bf24ec77f34677d0060cfa54263faf5",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19"
  ],
  "changeHistoryShort": {
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": "Ymodifierchange",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Ybodychange",
    "ca125153b319a8f5d75585d25cb0f37ae717be01": "Ymodifierchange",
    "cbab04727bf24ec77f34677d0060cfa54263faf5": "Yparameterchange",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3673. Create a FailoverProxy for Federation services. Contributed by Subru Krishnan\n\n(cherry picked from commit 3307564a5f8c8abc5fe84efcd05ee0f7dfdd921c)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/05/17 3:43 PM",
      "commitNameOld": "9855225a790e66835c79816712f432ffa8c599b4",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 74.07,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n+  public InetSocketAddress getRMAddress(YarnConfiguration conf,\n                                            Class\u003c?\u003e protocol) {\n     if (protocol \u003d\u003d ResourceTracker.class) {\n       return conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n     } else if (protocol \u003d\u003d DistributedSchedulingAMProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public InetSocketAddress getRMAddress(YarnConfiguration conf,\n                                           Class\u003c?\u003e protocol) {\n    if (protocol \u003d\u003d ResourceTracker.class) {\n      return conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    } else if (protocol \u003d\u003d DistributedSchedulingAMProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/ServerRMProxy.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[public]"
      }
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 97.55,
      "commitsBetweenForRepo": 769,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n                                            Class\u003c?\u003e protocol) {\n     if (protocol \u003d\u003d ResourceTracker.class) {\n       return conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n-    } else if (protocol \u003d\u003d DistributedSchedulerProtocol.class) {\n+    } else if (protocol \u003d\u003d DistributedSchedulingAMProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n                                           Class\u003c?\u003e protocol) {\n    if (protocol \u003d\u003d ResourceTracker.class) {\n      return conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    } else if (protocol \u003d\u003d DistributedSchedulingAMProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/ServerRMProxy.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/11/15 2:35 PM",
      "commitNameOld": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 152.29,
      "commitsBetweenForRepo": 928,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,19 @@\n   protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n                                            Class\u003c?\u003e protocol) {\n     if (protocol \u003d\u003d ResourceTracker.class) {\n       return conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n+    } else if (protocol \u003d\u003d DistributedSchedulerProtocol.class) {\n+      return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n                                           Class\u003c?\u003e protocol) {\n    if (protocol \u003d\u003d ResourceTracker.class) {\n      return conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    } else if (protocol \u003d\u003d DistributedSchedulerProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/ServerRMProxy.java",
      "extendedDetails": {}
    },
    "ca125153b319a8f5d75585d25cb0f37ae717be01": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-1028. Added FailoverProxyProvider capability to ResourceManager to help with RM failover. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551739 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 2:32 PM",
      "commitName": "ca125153b319a8f5d75585d25cb0f37ae717be01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/10/13 11:40 AM",
      "commitNameOld": "cbab04727bf24ec77f34677d0060cfa54263faf5",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 74.16,
      "commitsBetweenForRepo": 479,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-  private static InetSocketAddress getRMAddress(YarnConfiguration conf,\n-                                                Class\u003c?\u003e protocol) {\n+  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n+                                           Class\u003c?\u003e protocol) {\n     if (protocol \u003d\u003d ResourceTracker.class) {\n       return conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n                                           Class\u003c?\u003e protocol) {\n    if (protocol \u003d\u003d ResourceTracker.class) {\n      return conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/ServerRMProxy.java",
      "extendedDetails": {
        "oldValue": "[private, static]",
        "newValue": "[protected]"
      }
    },
    "cbab04727bf24ec77f34677d0060cfa54263faf5": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-1232. Configuration to support multiple RMs (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 11:40 AM",
      "commitName": "cbab04727bf24ec77f34677d0060cfa54263faf5",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "29/07/13 4:17 PM",
      "commitNameOld": "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 66.81,
      "commitsBetweenForRepo": 397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n-  private static InetSocketAddress getRMAddress(Configuration conf, Class\u003c?\u003e protocol) {\n+  private static InetSocketAddress getRMAddress(YarnConfiguration conf,\n+                                                Class\u003c?\u003e protocol) {\n     if (protocol \u003d\u003d ResourceTracker.class) {\n       return conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static InetSocketAddress getRMAddress(YarnConfiguration conf,\n                                                Class\u003c?\u003e protocol) {\n    if (protocol \u003d\u003d ResourceTracker.class) {\n      return conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/ServerRMProxy.java",
      "extendedDetails": {
        "oldValue": "[conf-Configuration, protocol-Class\u003c?\u003e]",
        "newValue": "[conf-YarnConfiguration, protocol-Class\u003c?\u003e]"
      }
    },
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": {
      "type": "Yintroduced",
      "commitMessage": "YARN-513. Create common proxy client for communicating with RM (Xuan Gong \u0026 Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 3:47 PM",
      "commitName": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,15 @@\n+  private static InetSocketAddress getRMAddress(Configuration conf, Class\u003c?\u003e protocol) {\n+    if (protocol \u003d\u003d ResourceTracker.class) {\n+      return conf.getSocketAddr(\n+        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n+    }\n+    else {\n+      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n+          \"connection to ResourceManager: \" +\n+          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n+      LOG.error(message);\n+      throw new IllegalStateException(message);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static InetSocketAddress getRMAddress(Configuration conf, Class\u003c?\u003e protocol) {\n    if (protocol \u003d\u003d ResourceTracker.class) {\n      return conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    }\n    else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/ServerRMProxy.java"
    }
  }
}