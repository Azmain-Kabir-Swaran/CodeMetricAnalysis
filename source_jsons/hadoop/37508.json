{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 905,
  "functionEndLine": 937,
  "numCommitsSeen": 242,
  "timeTaken": 12508,
  "changeHistory": [
    "7d06806dfdeb3252ac0defe23e8c468eabfa8b5e",
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
    "c85cc3b56ebc63010fb22eb1bfa5849d591f4bcc",
    "89022f8d4bac0e9d0b848fd91e9c4d700fe1cdbe",
    "ec6cbece8e7772868ce8ad996135d3136bd32245",
    "4931545f76f6c76e80e65c3bf6773e1983248044",
    "94e2e78ab751d1da775d0acf6e5ee6c0694ed746",
    "bcb865314f8ce89fc03a3e3de487fb6d75ddddd8",
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
    "18e805677d00616997ad7e9c6991bbfb26d73ef4",
    "ad0011a3405fee6c6e45996d39557e0f8d420633",
    "7d0c43d7cff6d250613a04fea9449f139988e901",
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb",
    "0928502029ef141759008997335ea2cd836a7154",
    "25946da4133a3784f1ec280cccac36b24db273a6",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
    "fe7711df98b9dd16259f6534e8461a29f24caadc",
    "a98b756c736ae5f7b6b4bab21d0d85be42ff7c03",
    "774f809f15f9093ee3e842aa564ebd7aaeeca867",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "7d06806dfdeb3252ac0defe23e8c468eabfa8b5e": "Ybodychange",
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2": "Ybodychange",
    "c85cc3b56ebc63010fb22eb1bfa5849d591f4bcc": "Ybodychange",
    "89022f8d4bac0e9d0b848fd91e9c4d700fe1cdbe": "Ybodychange",
    "ec6cbece8e7772868ce8ad996135d3136bd32245": "Ybodychange",
    "4931545f76f6c76e80e65c3bf6773e1983248044": "Ybodychange",
    "94e2e78ab751d1da775d0acf6e5ee6c0694ed746": "Ybodychange",
    "bcb865314f8ce89fc03a3e3de487fb6d75ddddd8": "Ybodychange",
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e": "Ybodychange",
    "18e805677d00616997ad7e9c6991bbfb26d73ef4": "Ybodychange",
    "ad0011a3405fee6c6e45996d39557e0f8d420633": "Ybodychange",
    "7d0c43d7cff6d250613a04fea9449f139988e901": "Ybodychange",
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "25946da4133a3784f1ec280cccac36b24db273a6": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": "Ybodychange",
    "fe7711df98b9dd16259f6534e8461a29f24caadc": "Ybodychange",
    "a98b756c736ae5f7b6b4bab21d0d85be42ff7c03": "Ybodychange",
    "774f809f15f9093ee3e842aa564ebd7aaeeca867": "Ybodychange",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7d06806dfdeb3252ac0defe23e8c468eabfa8b5e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6827. [ATS1/1.5] NPE exception while publishing recovering applications into ATS during RM restart. Contributed by Rohith Sharma K S.\n",
      "commitDate": "19/04/18 11:35 AM",
      "commitName": "7d06806dfdeb3252ac0defe23e8c468eabfa8b5e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/04/18 1:09 AM",
      "commitNameOld": "241d985467c4a318fa22a3f3007ee1827c94389c",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 1.43,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,18 @@\n   protected void serviceStart() throws Exception {\n     if (this.rmContext.isHAEnabled()) {\n       transitionToStandby(false);\n-    } else {\n-      transitionToActive();\n     }\n \n     startWepApp();\n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n         false)) {\n       int port \u003d webApp.port();\n       WebAppUtils.setRMWebAppPort(conf, port);\n     }\n     super.serviceStart();\n+\n+    // Non HA case, start after RM services are started.\n+    if (!this.rmContext.isHAEnabled()) {\n+      transitionToActive();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    if (this.rmContext.isHAEnabled()) {\n      transitionToStandby(false);\n    }\n\n    startWepApp();\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n        false)) {\n      int port \u003d webApp.port();\n      WebAppUtils.setRMWebAppPort(conf, port);\n    }\n    super.serviceStart();\n\n    // Non HA case, start after RM services are started.\n    if (!this.rmContext.isHAEnabled()) {\n      transitionToActive();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5698. [YARN-3368] Launch new YARN UI under hadoop web app port. (Sunil G via wangda)\n",
      "commitDate": "06/11/16 1:13 PM",
      "commitName": "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/11/16 1:13 PM",
      "commitNameOld": "817d5f4c9697a38383a34e00e3933b8a8513c9f3",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,15 @@\n   protected void serviceStart() throws Exception {\n     if (this.rmContext.isHAEnabled()) {\n       transitionToStandby(false);\n     } else {\n       transitionToActive();\n     }\n \n-    if (getConfig().getBoolean(YarnConfiguration.RM_WEBAPP_UI2_ENABLE,\n-        YarnConfiguration.DEFAULT_RM_WEBAPP_UI2_ENABLE)) {\n-      try {\n-        startWebAppV2();\n-        LOG.info(\"Yarn WebApp UI 2 is started\");\n-      } catch (Exception e) {\n-        LOG.error(\"Failed to start Yarn web app v2:\" + e.getMessage());\n-      }\n-    }\n-\n     startWepApp();\n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n         false)) {\n       int port \u003d webApp.port();\n       WebAppUtils.setRMWebAppPort(conf, port);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    if (this.rmContext.isHAEnabled()) {\n      transitionToStandby(false);\n    } else {\n      transitionToActive();\n    }\n\n    startWepApp();\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n        false)) {\n      int port \u003d webApp.port();\n      WebAppUtils.setRMWebAppPort(conf, port);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "c85cc3b56ebc63010fb22eb1bfa5849d591f4bcc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4515. [YARN-3368] Support hosting web UI framework inside YARN RM. (Sunil G via wangda)\nYARN-5000. [YARN-3368] App attempt page is not loading when timeline server is not started (Sunil G via wangda)\nYARN-5038. [YARN-3368] Application and Container pages shows wrong values when RM is stopped. (Sunil G via wangda)\n",
      "commitDate": "06/11/16 1:13 PM",
      "commitName": "c85cc3b56ebc63010fb22eb1bfa5849d591f4bcc",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/09/16 3:11 PM",
      "commitNameOld": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 37.96,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,25 @@\n   protected void serviceStart() throws Exception {\n     if (this.rmContext.isHAEnabled()) {\n       transitionToStandby(false);\n     } else {\n       transitionToActive();\n     }\n \n+    if (getConfig().getBoolean(YarnConfiguration.RM_WEBAPP_UI2_ENABLE,\n+        YarnConfiguration.DEFAULT_RM_WEBAPP_UI2_ENABLE)) {\n+      try {\n+        startWebAppV2();\n+        LOG.info(\"Yarn WebApp UI 2 is started\");\n+      } catch (Exception e) {\n+        LOG.error(\"Failed to start Yarn web app v2:\" + e.getMessage());\n+      }\n+    }\n+\n     startWepApp();\n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n         false)) {\n       int port \u003d webApp.port();\n       WebAppUtils.setRMWebAppPort(conf, port);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    if (this.rmContext.isHAEnabled()) {\n      transitionToStandby(false);\n    } else {\n      transitionToActive();\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.RM_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_UI2_ENABLE)) {\n      try {\n        startWebAppV2();\n        LOG.info(\"Yarn WebApp UI 2 is started\");\n      } catch (Exception e) {\n        LOG.error(\"Failed to start Yarn web app v2:\" + e.getMessage());\n      }\n    }\n\n    startWepApp();\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n        false)) {\n      int port \u003d webApp.port();\n      WebAppUtils.setRMWebAppPort(conf, port);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "89022f8d4bac0e9d0b848fd91e9c4d700fe1cdbe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4438. Implement RM leader election with curator. Contributed by Jian He\n",
      "commitDate": "07/01/16 2:33 PM",
      "commitName": "89022f8d4bac0e9d0b848fd91e9c4d700fe1cdbe",
      "commitAuthor": "Xuan",
      "commitDateOld": "29/12/15 3:58 PM",
      "commitNameOld": "52734134116eb4b18686e308d00e71e7e903383e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.94,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   protected void serviceStart() throws Exception {\n     if (this.rmContext.isHAEnabled()) {\n-      transitionToStandby(true);\n+      transitionToStandby(false);\n     } else {\n       transitionToActive();\n     }\n \n     startWepApp();\n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n         false)) {\n       int port \u003d webApp.port();\n       WebAppUtils.setRMWebAppPort(conf, port);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    if (this.rmContext.isHAEnabled()) {\n      transitionToStandby(false);\n    } else {\n      transitionToActive();\n    }\n\n    startWepApp();\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n        false)) {\n      int port \u003d webApp.port();\n      WebAppUtils.setRMWebAppPort(conf, port);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "ec6cbece8e7772868ce8ad996135d3136bd32245": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2795. Fixed ResourceManager to not crash loading node-label data from HDFS in secure mode. Contributed by Wangda Tan.\n",
      "commitDate": "03/11/14 1:44 PM",
      "commitName": "ec6cbece8e7772868ce8ad996135d3136bd32245",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/10/14 8:09 PM",
      "commitNameOld": "c0e034336c85296be6f549d88d137fb2b2b79a15",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.77,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,15 @@\n   protected void serviceStart() throws Exception {\n-    try {\n-      doSecureLogin();\n-    } catch(IOException ie) {\n-      throw new YarnRuntimeException(\"Failed to login\", ie);\n-    }\n-\n     if (this.rmContext.isHAEnabled()) {\n       transitionToStandby(true);\n     } else {\n       transitionToActive();\n     }\n \n     startWepApp();\n-    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n+    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n+        false)) {\n       int port \u003d webApp.port();\n       WebAppUtils.setRMWebAppPort(conf, port);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    if (this.rmContext.isHAEnabled()) {\n      transitionToStandby(true);\n    } else {\n      transitionToActive();\n    }\n\n    startWepApp();\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,\n        false)) {\n      int port \u003d webApp.port();\n      WebAppUtils.setRMWebAppPort(conf, port);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "4931545f76f6c76e80e65c3bf6773e1983248044": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1482. Modified WebApplicationProxy to make it work across ResourceManager fail-over. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556380 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 2:16 PM",
      "commitName": "4931545f76f6c76e80e65c3bf6773e1983248044",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/01/14 5:56 PM",
      "commitNameOld": "c3cc855d27470edca7ca0bdc0aa8907b544b636e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,20 @@\n   protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     if (this.rmContext.isHAEnabled()) {\n       transitionToStandby(true);\n     } else {\n       transitionToActive();\n     }\n \n+    startWepApp();\n+    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n+      int port \u003d webApp.port();\n+      WebAppUtils.setRMWebAppPort(conf, port);\n+    }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    if (this.rmContext.isHAEnabled()) {\n      transitionToStandby(true);\n    } else {\n      transitionToActive();\n    }\n\n    startWepApp();\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      int port \u003d webApp.port();\n      WebAppUtils.setRMWebAppPort(conf, port);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "94e2e78ab751d1da775d0acf6e5ee6c0694ed746": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1481. Move internal services logic from AdminService to ResourceManager. (vinodkv via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550167 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/12/13 7:13 AM",
      "commitName": "94e2e78ab751d1da775d0acf6e5ee6c0694ed746",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "07/12/13 8:30 PM",
      "commitNameOld": "48fb53bc4966acf42851a54df80f54ab27f8ac70",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.45,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,15 @@\n   protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n+\n+    if (this.rmContext.isHAEnabled()) {\n+      transitionToStandby(true);\n+    } else {\n+      transitionToActive();\n+    }\n+\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    if (this.rmContext.isHAEnabled()) {\n      transitionToStandby(true);\n    } else {\n      transitionToActive();\n    }\n\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "bcb865314f8ce89fc03a3e3de487fb6d75ddddd8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1098. Separate out RM services into Always On and Active (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 10:43 AM",
      "commitName": "bcb865314f8ce89fc03a3e3de487fb6d75ddddd8",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "06/09/13 10:43 PM",
      "commitNameOld": "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.5,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,9 @@\n   protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n-    this.amRmTokenSecretManager.start();\n-    this.containerTokenSecretManager.start();\n-    this.nmTokenSecretManager.start();\n-\n-    RMStateStore rmStore \u003d rmContext.getStateStore();\n-    // The state store needs to start irrespective of recoveryEnabled as apps\n-    // need events to move to further states.\n-    rmStore.start();\n-\n-    if(recoveryEnabled) {\n-      try {\n-        RMState state \u003d rmStore.loadState();\n-        recover(state);\n-      } catch (Exception e) {\n-        // the Exception from loadState() needs to be handled for \n-        // HA and we need to give up master status if we got fenced\n-        LOG.error(\"Failed to load/recover state\", e);\n-        ExitUtil.terminate(1, e);\n-      }\n-    }\n-\n-    startWepApp();\n-    try {\n-      rmDTSecretManager.startThreads();\n-    } catch(IOException ie) {\n-      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n-    }\n-\n-    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n-      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n-                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n-      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n-      int port \u003d webApp.port();\n-      String resolvedAddress \u003d hostname + \":\" + port;\n-      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n-    }\n-    \n     super.serviceStart();\n-\n-    /*synchronized(shutdown) {\n-      try {\n-        while(!shutdown.get()) {\n-          shutdown.wait();\n-        }\n-      } catch(InterruptedException ie) {\n-        LOG.info(\"Interrupted while waiting\", ie);\n-      }\n-    }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1107. Fixed a bug in ResourceManager because of which RM in secure mode fails to restart. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1520726 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/13 10:43 PM",
      "commitName": "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/08/13 7:09 PM",
      "commitNameOld": "236b8530bd05015d3b8a8131b111454c54c9e55d",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 7.15,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,56 @@\n   protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.amRmTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n     this.nmTokenSecretManager.start();\n \n-    // Explicitly start DTRenewer too in secure mode before kicking recovery as\n-    // tokens will start getting added for renewal as part of the recovery\n-    // process itself.\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      this.delegationTokenRenewer.start();\n-    }\n-\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     // The state store needs to start irrespective of recoveryEnabled as apps\n     // need events to move to further states.\n     rmStore.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.amRmTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n    this.nmTokenSecretManager.start();\n\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    // The state store needs to start irrespective of recoveryEnabled as apps\n    // need events to move to further states.\n    rmStore.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "18e805677d00616997ad7e9c6991bbfb26d73ef4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1094. Fixed a blocker with RM restart code because of which RM crashes when try to recover an existing app. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517215 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/13 4:32 PM",
      "commitName": "18e805677d00616997ad7e9c6991bbfb26d73ef4",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/08/13 7:47 PM",
      "commitNameOld": "e86036662c139cd7e67e69a0215471b1ec724a05",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,63 @@\n   protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.amRmTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n     this.nmTokenSecretManager.start();\n \n+    // Explicitly start DTRenewer too in secure mode before kicking recovery as\n+    // tokens will start getting added for renewal as part of the recovery\n+    // process itself.\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      this.delegationTokenRenewer.start();\n+    }\n+\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     // The state store needs to start irrespective of recoveryEnabled as apps\n     // need events to move to further states.\n     rmStore.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.amRmTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n    this.nmTokenSecretManager.start();\n\n    // Explicitly start DTRenewer too in secure mode before kicking recovery as\n    // tokens will start getting added for renewal as part of the recovery\n    // process itself.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenRenewer.start();\n    }\n\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    // The state store needs to start irrespective of recoveryEnabled as apps\n    // need events to move to further states.\n    rmStore.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "ad0011a3405fee6c6e45996d39557e0f8d420633": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1082. Create base directories on HDFS after RM login to ensure RM recovery doesn\u0027t fail in secure mode. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516337 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/13 4:55 PM",
      "commitName": "ad0011a3405fee6c6e45996d39557e0f8d420633",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/13 6:20 PM",
      "commitNameOld": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 41.94,
      "commitsBetweenForRepo": 269,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,56 @@\n   protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.amRmTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n     this.nmTokenSecretManager.start();\n \n+    RMStateStore rmStore \u003d rmContext.getStateStore();\n+    // The state store needs to start irrespective of recoveryEnabled as apps\n+    // need events to move to further states.\n+    rmStore.start();\n+\n     if(recoveryEnabled) {\n       try {\n-        RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.amRmTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n    this.nmTokenSecretManager.start();\n\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    // The state store needs to start irrespective of recoveryEnabled as apps\n    // need events to move to further states.\n    rmStore.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "7d0c43d7cff6d250613a04fea9449f139988e901": {
      "type": "Ybodychange",
      "commitMessage": "YARN-822. Renamed ApplicationToken to be AMRMToken, and similarly the corresponding TokenSelector and SecretManager. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 12:11 PM",
      "commitName": "7d0c43d7cff6d250613a04fea9449f139988e901",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n-    this.appTokenSecretManager.start();\n+    this.amRmTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n     this.nmTokenSecretManager.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.amRmTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n    this.nmTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-692. Creating NMToken master key on RM and sharing it with NM as a part of RM-NM heartbeat. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492907 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 5:06 PM",
      "commitName": "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/06/13 4:25 PM",
      "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n   protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n+    this.nmTokenSecretManager.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n    this.nmTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 3:15 PM",
          "commitNameOld": "25946da4133a3784f1ec280cccac36b24db273a6",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.74,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n-    super.start();\n+    super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 3:15 PM",
          "commitNameOld": "25946da4133a3784f1ec280cccac36b24db273a6",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.74,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n-    super.start();\n+    super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 3:15 PM",
          "commitNameOld": "25946da4133a3784f1ec280cccac36b24db273a6",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.74,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n-    super.start();\n+    super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 3:15 PM",
          "commitNameOld": "25946da4133a3784f1ec280cccac36b24db273a6",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.74,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n-    super.start();\n+    super.serviceStart();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.serviceStart();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "25946da4133a3784f1ec280cccac36b24db273a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-767. Initialize application metrics at RM bootup. Contributed by Jian He.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491989 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/13 3:15 PM",
      "commitName": "25946da4133a3784f1ec280cccac36b24db273a6",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.76,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n-    DefaultMetricsSystem.initialize(\"ResourceManager\");\n-    JvmMetrics.initSingleton(\"ResourceManager\", null);\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/05/13 9:14 PM",
      "commitNameOld": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n-      throw new YarnException(\"Failed to login\", ie);\n+      throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n \n     if(recoveryEnabled) {\n       try {\n         RMStateStore rmStore \u003d rmContext.getStateStore();\n         RMState state \u003d rmStore.loadState();\n         recover(state);\n       } catch (Exception e) {\n         // the Exception from loadState() needs to be handled for \n         // HA and we need to give up master status if we got fenced\n         LOG.error(\"Failed to load/recover state\", e);\n         ExitUtil.terminate(1, e);\n       }\n     }\n \n     startWepApp();\n     DefaultMetricsSystem.initialize(\"ResourceManager\");\n     JvmMetrics.initSingleton(\"ResourceManager\", null);\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n-      throw new YarnException(\"Failed to start secret manager threads\", ie);\n+      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n    JvmMetrics.initSingleton(\"ResourceManager\", null);\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": {
      "type": "Ybodychange",
      "commitMessage": "YARN-230. RM Restart phase 1 - includes support for saving/restarting all applications on an RM bounce. Contributed by Bikas Saha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423758 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/12 8:21 PM",
      "commitName": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/11/12 5:56 PM",
      "commitNameOld": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 20.1,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,53 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n     this.containerTokenSecretManager.start();\n \n+    if(recoveryEnabled) {\n+      try {\n+        RMStateStore rmStore \u003d rmContext.getStateStore();\n+        RMState state \u003d rmStore.loadState();\n+        recover(state);\n+      } catch (Exception e) {\n+        // the Exception from loadState() needs to be handled for \n+        // HA and we need to give up master status if we got fenced\n+        LOG.error(\"Failed to load/recover state\", e);\n+        ExitUtil.terminate(1, e);\n+      }\n+    }\n+\n     startWepApp();\n     DefaultMetricsSystem.initialize(\"ResourceManager\");\n     JvmMetrics.initSingleton(\"ResourceManager\", null);\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n\n    if(recoveryEnabled) {\n      try {\n        RMStateStore rmStore \u003d rmContext.getStateStore();\n        RMState state \u003d rmStore.loadState();\n        recover(state);\n      } catch (Exception e) {\n        // the Exception from loadState() needs to be handled for \n        // HA and we need to give up master status if we got fenced\n        LOG.error(\"Failed to load/recover state\", e);\n        ExitUtil.terminate(1, e);\n      }\n    }\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n    JvmMetrics.initSingleton(\"ResourceManager\", null);\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 16.87,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n+    this.containerTokenSecretManager.start();\n \n     startWepApp();\n     DefaultMetricsSystem.initialize(\"ResourceManager\");\n     JvmMetrics.initSingleton(\"ResourceManager\", null);\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to start secret manager threads\", ie);\n     }\n \n     if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n       hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n       int port \u003d webApp.port();\n       String resolvedAddress \u003d hostname + \":\" + port;\n       conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n     }\n     \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n    this.containerTokenSecretManager.start();\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n    JvmMetrics.initSingleton(\"ResourceManager\", null);\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n    JvmMetrics.initSingleton(\"ResourceManager\", null);\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3867. MiniMRYarn/MiniYarn uses fixed ports (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328109 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/12 1:33 PM",
      "commitName": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "19/04/12 12:42 PM",
      "commitNameOld": "d09cf903abcc6af9f9bc77cc79467b859861430a",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,39 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to login\", ie);\n     }\n \n     this.appTokenSecretManager.start();\n \n     startWepApp();\n     DefaultMetricsSystem.initialize(\"ResourceManager\");\n     JvmMetrics.initSingleton(\"ResourceManager\", null);\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to start secret manager threads\", ie);\n     }\n+\n+    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n+      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n+                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n+      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n+      int port \u003d webApp.port();\n+      String resolvedAddress \u003d hostname + \":\" + port;\n+      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n+    }\n     \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n    JvmMetrics.initSingleton(\"ResourceManager\", null);\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to start secret manager threads\", ie);\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String hostname \u003d getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n                                        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\n      hostname \u003d (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\n      int port \u003d webApp.port();\n      String resolvedAddress \u003d hostname + \":\" + port;\n      conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "fe7711df98b9dd16259f6534e8461a29f24caadc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3942. Randomize master key generation for ApplicationTokenSecretManager and roll it every so often. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327220 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 11:48 AM",
      "commitName": "fe7711df98b9dd16259f6534e8461a29f24caadc",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "25/03/12 10:45 PM",
      "commitNameOld": "606114d6029758f2be130960b8fc3102457406ba",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 22.54,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to login\", ie);\n     }\n \n+    this.appTokenSecretManager.start();\n+\n     startWepApp();\n     DefaultMetricsSystem.initialize(\"ResourceManager\");\n     JvmMetrics.initSingleton(\"ResourceManager\", null);\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to start secret manager threads\", ie);\n     }\n     \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    this.appTokenSecretManager.start();\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n    JvmMetrics.initSingleton(\"ResourceManager\", null);\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to start secret manager threads\", ie);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a98b756c736ae5f7b6b4bab21d0d85be42ff7c03": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3976. TestRMContainerAllocator failing (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297557 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/12 8:17 AM",
      "commitName": "a98b756c736ae5f7b6b4bab21d0d85be42ff7c03",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "05/03/12 2:03 PM",
      "commitNameOld": "774f809f15f9093ee3e842aa564ebd7aaeeca867",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to login\", ie);\n     }\n \n     startWepApp();\n-    MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n-    JvmMetrics.create(\"ResourceManager\", null, ms);\n+    DefaultMetricsSystem.initialize(\"ResourceManager\");\n+    JvmMetrics.initSingleton(\"ResourceManager\", null);\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to start secret manager threads\", ie);\n     }\n     \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n    JvmMetrics.initSingleton(\"ResourceManager\", null);\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to start secret manager threads\", ie);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "774f809f15f9093ee3e842aa564ebd7aaeeca867": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3964. ResourceManager does not have JVM metrics (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297248 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/12 2:03 PM",
      "commitName": "774f809f15f9093ee3e842aa564ebd7aaeeca867",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "04/03/12 1:14 PM",
      "commitNameOld": "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to login\", ie);\n     }\n \n     startWepApp();\n-    DefaultMetricsSystem.initialize(\"ResourceManager\");\n+    MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n+    JvmMetrics.create(\"ResourceManager\", null, ms);\n     try {\n       rmDTSecretManager.startThreads();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to start secret manager threads\", ie);\n     }\n     \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    startWepApp();\n    MetricsSystem ms \u003d DefaultMetricsSystem.initialize(\"ResourceManager\");\n    JvmMetrics.create(\"ResourceManager\", null, ms);\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to start secret manager threads\", ie);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3380. Token infrastructure for running clients which are not kerberos authenticated. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/12 5:50 PM",
      "commitName": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.11,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,27 @@\n   public void start() {\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnException(\"Failed to login\", ie);\n     }\n \n     startWepApp();\n     DefaultMetricsSystem.initialize(\"ResourceManager\");\n-\n+    try {\n+      rmDTSecretManager.startThreads();\n+    } catch(IOException ie) {\n+      throw new YarnException(\"Failed to start secret manager threads\", ie);\n+    }\n+    \n     super.start();\n \n     /*synchronized(shutdown) {\n       try {\n         while(!shutdown.get()) {\n           shutdown.wait();\n         }\n       } catch(InterruptedException ie) {\n         LOG.info(\"Interrupted while waiting\", ie);\n       }\n     }*/\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n    try {\n      rmDTSecretManager.startThreads();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to start secret manager threads\", ie);\n    }\n    \n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n\n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+  public void start() {\n+    try {\n+      doSecureLogin();\n+    } catch(IOException ie) {\n+      throw new YarnException(\"Failed to login\", ie);\n+    }\n+\n+    startWepApp();\n+    DefaultMetricsSystem.initialize(\"ResourceManager\");\n+\n+    super.start();\n+\n+    /*synchronized(shutdown) {\n+      try {\n+        while(!shutdown.get()) {\n+          shutdown.wait();\n+        }\n+      } catch(InterruptedException ie) {\n+        LOG.info(\"Interrupted while waiting\", ie);\n+      }\n+    }*/\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnException(\"Failed to login\", ie);\n    }\n\n    startWepApp();\n    DefaultMetricsSystem.initialize(\"ResourceManager\");\n\n    super.start();\n\n    /*synchronized(shutdown) {\n      try {\n        while(!shutdown.get()) {\n          shutdown.wait();\n        }\n      } catch(InterruptedException ie) {\n        LOG.info(\"Interrupted while waiting\", ie);\n      }\n    }*/\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}