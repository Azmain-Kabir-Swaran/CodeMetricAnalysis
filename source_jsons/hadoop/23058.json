{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TextOutputFormat.java",
  "functionName": "getRecordWriter",
  "functionId": "getRecordWriter___job-TaskAttemptContext",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java",
  "functionStartLine": 111,
  "functionEndLine": 134,
  "numCommitsSeen": 6,
  "timeTaken": 5053,
  "changeHistory": [
    "7297e82cb4ab1dff06da48acdb76e3d568f998f2",
    "0b8a7c18ddbe73b356b3c9baf4460659ccaee095",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "7297e82cb4ab1dff06da48acdb76e3d568f998f2": "Ybodychange",
    "0b8a7c18ddbe73b356b3c9baf4460659ccaee095": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7297e82cb4ab1dff06da48acdb76e3d568f998f2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14250. Correct spelling of \u0027separate\u0027 and variants. Contributed by Doris Gu\n",
      "commitDate": "30/03/17 10:17 AM",
      "commitName": "7297e82cb4ab1dff06da48acdb76e3d568f998f2",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "05/01/17 5:56 PM",
      "commitNameOld": "0b8a7c18ddbe73b356b3c9baf4460659ccaee095",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 83.64,
      "commitsBetweenForRepo": 457,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n          getRecordWriter(TaskAttemptContext job\n                          ) throws IOException, InterruptedException {\n     Configuration conf \u003d job.getConfiguration();\n     boolean isCompressed \u003d getCompressOutput(job);\n-    String keyValueSeparator\u003d conf.get(SEPERATOR, \"\\t\");\n+    String keyValueSeparator\u003d conf.get(SEPARATOR, \"\\t\");\n     CompressionCodec codec \u003d null;\n     String extension \u003d \"\";\n     if (isCompressed) {\n       Class\u003c? extends CompressionCodec\u003e codecClass \u003d \n         getOutputCompressorClass(job, GzipCodec.class);\n       codec \u003d ReflectionUtils.newInstance(codecClass, conf);\n       extension \u003d codec.getDefaultExtension();\n     }\n     Path file \u003d getDefaultWorkFile(job, extension);\n     FileSystem fs \u003d file.getFileSystem(conf);\n     FSDataOutputStream fileOut \u003d fs.create(file, false);\n     if (isCompressed) {\n       return new LineRecordWriter\u003c\u003e(\n           new DataOutputStream(codec.createOutputStream(fileOut)),\n           keyValueSeparator);\n     } else {\n       return new LineRecordWriter\u003c\u003e(fileOut, keyValueSeparator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "         getRecordWriter(TaskAttemptContext job\n                         ) throws IOException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    boolean isCompressed \u003d getCompressOutput(job);\n    String keyValueSeparator\u003d conf.get(SEPARATOR, \"\\t\");\n    CompressionCodec codec \u003d null;\n    String extension \u003d \"\";\n    if (isCompressed) {\n      Class\u003c? extends CompressionCodec\u003e codecClass \u003d \n        getOutputCompressorClass(job, GzipCodec.class);\n      codec \u003d ReflectionUtils.newInstance(codecClass, conf);\n      extension \u003d codec.getDefaultExtension();\n    }\n    Path file \u003d getDefaultWorkFile(job, extension);\n    FileSystem fs \u003d file.getFileSystem(conf);\n    FSDataOutputStream fileOut \u003d fs.create(file, false);\n    if (isCompressed) {\n      return new LineRecordWriter\u003c\u003e(\n          new DataOutputStream(codec.createOutputStream(fileOut)),\n          keyValueSeparator);\n    } else {\n      return new LineRecordWriter\u003c\u003e(fileOut, keyValueSeparator);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java",
      "extendedDetails": {}
    },
    "0b8a7c18ddbe73b356b3c9baf4460659ccaee095": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6715. Fix Several Unsafe Practices (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "05/01/17 5:56 PM",
      "commitName": "0b8a7c18ddbe73b356b3c9baf4460659ccaee095",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "04/08/16 4:13 AM",
      "commitNameOld": "70c278115249898132490a89a548fd936c09f54b",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 154.61,
      "commitsBetweenForRepo": 1040,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n          getRecordWriter(TaskAttemptContext job\n                          ) throws IOException, InterruptedException {\n     Configuration conf \u003d job.getConfiguration();\n     boolean isCompressed \u003d getCompressOutput(job);\n     String keyValueSeparator\u003d conf.get(SEPERATOR, \"\\t\");\n     CompressionCodec codec \u003d null;\n     String extension \u003d \"\";\n     if (isCompressed) {\n       Class\u003c? extends CompressionCodec\u003e codecClass \u003d \n         getOutputCompressorClass(job, GzipCodec.class);\n-      codec \u003d (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);\n+      codec \u003d ReflectionUtils.newInstance(codecClass, conf);\n       extension \u003d codec.getDefaultExtension();\n     }\n     Path file \u003d getDefaultWorkFile(job, extension);\n     FileSystem fs \u003d file.getFileSystem(conf);\n-    if (!isCompressed) {\n-      FSDataOutputStream fileOut \u003d fs.create(file, false);\n-      return new LineRecordWriter\u003cK, V\u003e(fileOut, keyValueSeparator);\n+    FSDataOutputStream fileOut \u003d fs.create(file, false);\n+    if (isCompressed) {\n+      return new LineRecordWriter\u003c\u003e(\n+          new DataOutputStream(codec.createOutputStream(fileOut)),\n+          keyValueSeparator);\n     } else {\n-      FSDataOutputStream fileOut \u003d fs.create(file, false);\n-      return new LineRecordWriter\u003cK, V\u003e(new DataOutputStream\n-                                        (codec.createOutputStream(fileOut)),\n-                                        keyValueSeparator);\n+      return new LineRecordWriter\u003c\u003e(fileOut, keyValueSeparator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "         getRecordWriter(TaskAttemptContext job\n                         ) throws IOException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    boolean isCompressed \u003d getCompressOutput(job);\n    String keyValueSeparator\u003d conf.get(SEPERATOR, \"\\t\");\n    CompressionCodec codec \u003d null;\n    String extension \u003d \"\";\n    if (isCompressed) {\n      Class\u003c? extends CompressionCodec\u003e codecClass \u003d \n        getOutputCompressorClass(job, GzipCodec.class);\n      codec \u003d ReflectionUtils.newInstance(codecClass, conf);\n      extension \u003d codec.getDefaultExtension();\n    }\n    Path file \u003d getDefaultWorkFile(job, extension);\n    FileSystem fs \u003d file.getFileSystem(conf);\n    FSDataOutputStream fileOut \u003d fs.create(file, false);\n    if (isCompressed) {\n      return new LineRecordWriter\u003c\u003e(\n          new DataOutputStream(codec.createOutputStream(fileOut)),\n          keyValueSeparator);\n    } else {\n      return new LineRecordWriter\u003c\u003e(fileOut, keyValueSeparator);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "         getRecordWriter(TaskAttemptContext job\n                         ) throws IOException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    boolean isCompressed \u003d getCompressOutput(job);\n    String keyValueSeparator\u003d conf.get(SEPERATOR, \"\\t\");\n    CompressionCodec codec \u003d null;\n    String extension \u003d \"\";\n    if (isCompressed) {\n      Class\u003c? extends CompressionCodec\u003e codecClass \u003d \n        getOutputCompressorClass(job, GzipCodec.class);\n      codec \u003d (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);\n      extension \u003d codec.getDefaultExtension();\n    }\n    Path file \u003d getDefaultWorkFile(job, extension);\n    FileSystem fs \u003d file.getFileSystem(conf);\n    if (!isCompressed) {\n      FSDataOutputStream fileOut \u003d fs.create(file, false);\n      return new LineRecordWriter\u003cK, V\u003e(fileOut, keyValueSeparator);\n    } else {\n      FSDataOutputStream fileOut \u003d fs.create(file, false);\n      return new LineRecordWriter\u003cK, V\u003e(new DataOutputStream\n                                        (codec.createOutputStream(fileOut)),\n                                        keyValueSeparator);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "         getRecordWriter(TaskAttemptContext job\n                         ) throws IOException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    boolean isCompressed \u003d getCompressOutput(job);\n    String keyValueSeparator\u003d conf.get(SEPERATOR, \"\\t\");\n    CompressionCodec codec \u003d null;\n    String extension \u003d \"\";\n    if (isCompressed) {\n      Class\u003c? extends CompressionCodec\u003e codecClass \u003d \n        getOutputCompressorClass(job, GzipCodec.class);\n      codec \u003d (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);\n      extension \u003d codec.getDefaultExtension();\n    }\n    Path file \u003d getDefaultWorkFile(job, extension);\n    FileSystem fs \u003d file.getFileSystem(conf);\n    if (!isCompressed) {\n      FSDataOutputStream fileOut \u003d fs.create(file, false);\n      return new LineRecordWriter\u003cK, V\u003e(fileOut, keyValueSeparator);\n    } else {\n      FSDataOutputStream fileOut \u003d fs.create(file, false);\n      return new LineRecordWriter\u003cK, V\u003e(new DataOutputStream\n                                        (codec.createOutputStream(fileOut)),\n                                        keyValueSeparator);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,25 @@\n+         getRecordWriter(TaskAttemptContext job\n+                         ) throws IOException, InterruptedException {\n+    Configuration conf \u003d job.getConfiguration();\n+    boolean isCompressed \u003d getCompressOutput(job);\n+    String keyValueSeparator\u003d conf.get(SEPERATOR, \"\\t\");\n+    CompressionCodec codec \u003d null;\n+    String extension \u003d \"\";\n+    if (isCompressed) {\n+      Class\u003c? extends CompressionCodec\u003e codecClass \u003d \n+        getOutputCompressorClass(job, GzipCodec.class);\n+      codec \u003d (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);\n+      extension \u003d codec.getDefaultExtension();\n+    }\n+    Path file \u003d getDefaultWorkFile(job, extension);\n+    FileSystem fs \u003d file.getFileSystem(conf);\n+    if (!isCompressed) {\n+      FSDataOutputStream fileOut \u003d fs.create(file, false);\n+      return new LineRecordWriter\u003cK, V\u003e(fileOut, keyValueSeparator);\n+    } else {\n+      FSDataOutputStream fileOut \u003d fs.create(file, false);\n+      return new LineRecordWriter\u003cK, V\u003e(new DataOutputStream\n+                                        (codec.createOutputStream(fileOut)),\n+                                        keyValueSeparator);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "         getRecordWriter(TaskAttemptContext job\n                         ) throws IOException, InterruptedException {\n    Configuration conf \u003d job.getConfiguration();\n    boolean isCompressed \u003d getCompressOutput(job);\n    String keyValueSeparator\u003d conf.get(SEPERATOR, \"\\t\");\n    CompressionCodec codec \u003d null;\n    String extension \u003d \"\";\n    if (isCompressed) {\n      Class\u003c? extends CompressionCodec\u003e codecClass \u003d \n        getOutputCompressorClass(job, GzipCodec.class);\n      codec \u003d (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);\n      extension \u003d codec.getDefaultExtension();\n    }\n    Path file \u003d getDefaultWorkFile(job, extension);\n    FileSystem fs \u003d file.getFileSystem(conf);\n    if (!isCompressed) {\n      FSDataOutputStream fileOut \u003d fs.create(file, false);\n      return new LineRecordWriter\u003cK, V\u003e(fileOut, keyValueSeparator);\n    } else {\n      FSDataOutputStream fileOut \u003d fs.create(file, false);\n      return new LineRecordWriter\u003cK, V\u003e(new DataOutputStream\n                                        (codec.createOutputStream(fileOut)),\n                                        keyValueSeparator);\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/output/TextOutputFormat.java"
    }
  }
}