{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LdapAuthenticationHandler.java",
  "functionName": "authenticateWithTlsExtension",
  "functionId": "authenticateWithTlsExtension___userDN-String__password-String",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/LdapAuthenticationHandler.java",
  "functionStartLine": 242,
  "functionEndLine": 287,
  "numCommitsSeen": 2,
  "timeTaken": 551,
  "changeHistory": [
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492"
  ],
  "changeHistoryShort": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12082 Support multiple authentication schemes via AuthenticationFilter\n",
      "commitDate": "18/10/16 6:32 PM",
      "commitName": "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
      "commitAuthor": "Benoy Antony",
      "diff": "@@ -0,0 +1,46 @@\n+  private void authenticateWithTlsExtension(String userDN, String password)\n+      throws AuthenticationException {\n+    LdapContext ctx \u003d null;\n+    Hashtable\u003cString, Object\u003e env \u003d new Hashtable\u003cString, Object\u003e();\n+    env.put(Context.INITIAL_CONTEXT_FACTORY,\n+        \"com.sun.jndi.ldap.LdapCtxFactory\");\n+    env.put(Context.PROVIDER_URL, providerUrl);\n+\n+    try {\n+      // Create initial context\n+      ctx \u003d new InitialLdapContext(env, null);\n+      // Establish TLS session\n+      StartTlsResponse tls \u003d\n+          (StartTlsResponse) ctx.extendedOperation(new StartTlsRequest());\n+\n+      if (disableHostNameVerification) {\n+        tls.setHostnameVerifier(new HostnameVerifier() {\n+          @Override\n+          public boolean verify(String hostname, SSLSession session) {\n+            return true;\n+          }\n+        });\n+      }\n+\n+      tls.negotiate();\n+\n+      // Initialize security credentials \u0026 perform read operation for\n+      // verification.\n+      ctx.addToEnvironment(Context.SECURITY_AUTHENTICATION,\n+          SECURITY_AUTHENTICATION);\n+      ctx.addToEnvironment(Context.SECURITY_PRINCIPAL, userDN);\n+      ctx.addToEnvironment(Context.SECURITY_CREDENTIALS, password);\n+      ctx.lookup(userDN);\n+      logger.debug(\"Authentication successful for {}\", userDN);\n+\n+    } catch (NamingException | IOException ex) {\n+      throw new AuthenticationException(\"Error validating LDAP user\", ex);\n+    } finally {\n+      if (ctx !\u003d null) {\n+        try {\n+          ctx.close();\n+        } catch (NamingException e) { /* Ignore. */\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void authenticateWithTlsExtension(String userDN, String password)\n      throws AuthenticationException {\n    LdapContext ctx \u003d null;\n    Hashtable\u003cString, Object\u003e env \u003d new Hashtable\u003cString, Object\u003e();\n    env.put(Context.INITIAL_CONTEXT_FACTORY,\n        \"com.sun.jndi.ldap.LdapCtxFactory\");\n    env.put(Context.PROVIDER_URL, providerUrl);\n\n    try {\n      // Create initial context\n      ctx \u003d new InitialLdapContext(env, null);\n      // Establish TLS session\n      StartTlsResponse tls \u003d\n          (StartTlsResponse) ctx.extendedOperation(new StartTlsRequest());\n\n      if (disableHostNameVerification) {\n        tls.setHostnameVerifier(new HostnameVerifier() {\n          @Override\n          public boolean verify(String hostname, SSLSession session) {\n            return true;\n          }\n        });\n      }\n\n      tls.negotiate();\n\n      // Initialize security credentials \u0026 perform read operation for\n      // verification.\n      ctx.addToEnvironment(Context.SECURITY_AUTHENTICATION,\n          SECURITY_AUTHENTICATION);\n      ctx.addToEnvironment(Context.SECURITY_PRINCIPAL, userDN);\n      ctx.addToEnvironment(Context.SECURITY_CREDENTIALS, password);\n      ctx.lookup(userDN);\n      logger.debug(\"Authentication successful for {}\", userDN);\n\n    } catch (NamingException | IOException ex) {\n      throw new AuthenticationException(\"Error validating LDAP user\", ex);\n    } finally {\n      if (ctx !\u003d null) {\n        try {\n          ctx.close();\n        } catch (NamingException e) { /* Ignore. */\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/LdapAuthenticationHandler.java"
    }
  }
}