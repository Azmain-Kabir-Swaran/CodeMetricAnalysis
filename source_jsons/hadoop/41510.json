{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "verifyMoveDoesNotViolateConstraints",
  "functionId": "verifyMoveDoesNotViolateConstraints___app-FSAppAttempt__oldQueue-FSLeafQueue__targetQueue-FSLeafQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1828,
  "functionEndLine": 1859,
  "numCommitsSeen": 313,
  "timeTaken": 4494,
  "changeHistory": [
    "f6ea9be5473ab66798b0536317d2f32c5348eb57",
    "486e718fc1f5befd231494e2ec06bb360484f191",
    "e6eccf20defcaf84a9566482371c7be196779c0d"
  ],
  "changeHistoryShort": {
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yparameterchange",
    "e6eccf20defcaf84a9566482371c7be196779c0d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5264. Store all queue-specific information in FSQueue. (Yufei Gu via kasha)\n",
      "commitDate": "02/09/16 2:56 PM",
      "commitName": "f6ea9be5473ab66798b0536317d2f32c5348eb57",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/08/16 3:52 PM",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private void verifyMoveDoesNotViolateConstraints(FSAppAttempt app,\n       FSLeafQueue oldQueue, FSLeafQueue targetQueue) throws YarnException {\n     String queueName \u003d targetQueue.getQueueName();\n     ApplicationAttemptId appAttId \u003d app.getApplicationAttemptId();\n     // When checking maxResources and maxRunningApps, only need to consider\n     // queues before the lowest common ancestor of the two queues because the\n     // total running apps in queues above will not be changed.\n     FSQueue lowestCommonAncestor \u003d findLowestCommonAncestorQueue(oldQueue,\n         targetQueue);\n     Resource consumption \u003d app.getCurrentConsumption();\n     \n     // Check whether the move would go over maxRunningApps or maxShare\n     FSQueue cur \u003d targetQueue;\n     while (cur !\u003d lowestCommonAncestor) {\n       // maxRunningApps\n-      if (cur.getNumRunnableApps() \u003d\u003d allocConf.getQueueMaxApps(cur.getQueueName())) {\n+      if (cur.getNumRunnableApps() \u003d\u003d cur.getMaxRunningApps()) {\n         throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n             + queueName + \" would violate queue maxRunningApps constraints on\"\n             + \" queue \" + cur.getQueueName());\n       }\n       \n       // maxShare\n       if (!Resources.fitsIn(Resources.add(cur.getResourceUsage(), consumption),\n           cur.getMaxShare())) {\n         throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n             + queueName + \" would violate queue maxShare constraints on\"\n             + \" queue \" + cur.getQueueName());\n       }\n       \n       cur \u003d cur.getParent();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyMoveDoesNotViolateConstraints(FSAppAttempt app,\n      FSLeafQueue oldQueue, FSLeafQueue targetQueue) throws YarnException {\n    String queueName \u003d targetQueue.getQueueName();\n    ApplicationAttemptId appAttId \u003d app.getApplicationAttemptId();\n    // When checking maxResources and maxRunningApps, only need to consider\n    // queues before the lowest common ancestor of the two queues because the\n    // total running apps in queues above will not be changed.\n    FSQueue lowestCommonAncestor \u003d findLowestCommonAncestorQueue(oldQueue,\n        targetQueue);\n    Resource consumption \u003d app.getCurrentConsumption();\n    \n    // Check whether the move would go over maxRunningApps or maxShare\n    FSQueue cur \u003d targetQueue;\n    while (cur !\u003d lowestCommonAncestor) {\n      // maxRunningApps\n      if (cur.getNumRunnableApps() \u003d\u003d cur.getMaxRunningApps()) {\n        throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n            + queueName + \" would violate queue maxRunningApps constraints on\"\n            + \" queue \" + cur.getQueueName());\n      }\n      \n      // maxShare\n      if (!Resources.fitsIn(Resources.add(cur.getResourceUsage(), consumption),\n          cur.getMaxShare())) {\n        throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n            + queueName + \" would violate queue maxShare constraints on\"\n            + \" queue \" + cur.getQueueName());\n      }\n      \n      cur \u003d cur.getParent();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "08/08/14 7:17 AM",
      "commitNameOld": "14864e9c7c879c15b5fa2d1776614ec83152918f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 4.31,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-  private void verifyMoveDoesNotViolateConstraints(FSSchedulerApp app,\n+  private void verifyMoveDoesNotViolateConstraints(FSAppAttempt app,\n       FSLeafQueue oldQueue, FSLeafQueue targetQueue) throws YarnException {\n     String queueName \u003d targetQueue.getQueueName();\n     ApplicationAttemptId appAttId \u003d app.getApplicationAttemptId();\n     // When checking maxResources and maxRunningApps, only need to consider\n     // queues before the lowest common ancestor of the two queues because the\n     // total running apps in queues above will not be changed.\n     FSQueue lowestCommonAncestor \u003d findLowestCommonAncestorQueue(oldQueue,\n         targetQueue);\n     Resource consumption \u003d app.getCurrentConsumption();\n     \n     // Check whether the move would go over maxRunningApps or maxShare\n     FSQueue cur \u003d targetQueue;\n     while (cur !\u003d lowestCommonAncestor) {\n       // maxRunningApps\n       if (cur.getNumRunnableApps() \u003d\u003d allocConf.getQueueMaxApps(cur.getQueueName())) {\n         throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n             + queueName + \" would violate queue maxRunningApps constraints on\"\n             + \" queue \" + cur.getQueueName());\n       }\n       \n       // maxShare\n       if (!Resources.fitsIn(Resources.add(cur.getResourceUsage(), consumption),\n           cur.getMaxShare())) {\n         throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n             + queueName + \" would violate queue maxShare constraints on\"\n             + \" queue \" + cur.getQueueName());\n       }\n       \n       cur \u003d cur.getParent();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyMoveDoesNotViolateConstraints(FSAppAttempt app,\n      FSLeafQueue oldQueue, FSLeafQueue targetQueue) throws YarnException {\n    String queueName \u003d targetQueue.getQueueName();\n    ApplicationAttemptId appAttId \u003d app.getApplicationAttemptId();\n    // When checking maxResources and maxRunningApps, only need to consider\n    // queues before the lowest common ancestor of the two queues because the\n    // total running apps in queues above will not be changed.\n    FSQueue lowestCommonAncestor \u003d findLowestCommonAncestorQueue(oldQueue,\n        targetQueue);\n    Resource consumption \u003d app.getCurrentConsumption();\n    \n    // Check whether the move would go over maxRunningApps or maxShare\n    FSQueue cur \u003d targetQueue;\n    while (cur !\u003d lowestCommonAncestor) {\n      // maxRunningApps\n      if (cur.getNumRunnableApps() \u003d\u003d allocConf.getQueueMaxApps(cur.getQueueName())) {\n        throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n            + queueName + \" would violate queue maxRunningApps constraints on\"\n            + \" queue \" + cur.getQueueName());\n      }\n      \n      // maxShare\n      if (!Resources.fitsIn(Resources.add(cur.getResourceUsage(), consumption),\n          cur.getMaxShare())) {\n        throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n            + queueName + \" would violate queue maxShare constraints on\"\n            + \" queue \" + cur.getQueueName());\n      }\n      \n      cur \u003d cur.getParent();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {
        "oldValue": "[app-FSSchedulerApp, oldQueue-FSLeafQueue, targetQueue-FSLeafQueue]",
        "newValue": "[app-FSAppAttempt, oldQueue-FSLeafQueue, targetQueue-FSLeafQueue]"
      }
    },
    "e6eccf20defcaf84a9566482371c7be196779c0d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1499. Fair Scheduler changes for moving apps between queues (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/14 10:09 AM",
      "commitName": "e6eccf20defcaf84a9566482371c7be196779c0d",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,32 @@\n+  private void verifyMoveDoesNotViolateConstraints(FSSchedulerApp app,\n+      FSLeafQueue oldQueue, FSLeafQueue targetQueue) throws YarnException {\n+    String queueName \u003d targetQueue.getQueueName();\n+    ApplicationAttemptId appAttId \u003d app.getApplicationAttemptId();\n+    // When checking maxResources and maxRunningApps, only need to consider\n+    // queues before the lowest common ancestor of the two queues because the\n+    // total running apps in queues above will not be changed.\n+    FSQueue lowestCommonAncestor \u003d findLowestCommonAncestorQueue(oldQueue,\n+        targetQueue);\n+    Resource consumption \u003d app.getCurrentConsumption();\n+    \n+    // Check whether the move would go over maxRunningApps or maxShare\n+    FSQueue cur \u003d targetQueue;\n+    while (cur !\u003d lowestCommonAncestor) {\n+      // maxRunningApps\n+      if (cur.getNumRunnableApps() \u003d\u003d allocConf.getQueueMaxApps(cur.getQueueName())) {\n+        throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n+            + queueName + \" would violate queue maxRunningApps constraints on\"\n+            + \" queue \" + cur.getQueueName());\n+      }\n+      \n+      // maxShare\n+      if (!Resources.fitsIn(Resources.add(cur.getResourceUsage(), consumption),\n+          cur.getMaxShare())) {\n+        throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n+            + queueName + \" would violate queue maxShare constraints on\"\n+            + \" queue \" + cur.getQueueName());\n+      }\n+      \n+      cur \u003d cur.getParent();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyMoveDoesNotViolateConstraints(FSSchedulerApp app,\n      FSLeafQueue oldQueue, FSLeafQueue targetQueue) throws YarnException {\n    String queueName \u003d targetQueue.getQueueName();\n    ApplicationAttemptId appAttId \u003d app.getApplicationAttemptId();\n    // When checking maxResources and maxRunningApps, only need to consider\n    // queues before the lowest common ancestor of the two queues because the\n    // total running apps in queues above will not be changed.\n    FSQueue lowestCommonAncestor \u003d findLowestCommonAncestorQueue(oldQueue,\n        targetQueue);\n    Resource consumption \u003d app.getCurrentConsumption();\n    \n    // Check whether the move would go over maxRunningApps or maxShare\n    FSQueue cur \u003d targetQueue;\n    while (cur !\u003d lowestCommonAncestor) {\n      // maxRunningApps\n      if (cur.getNumRunnableApps() \u003d\u003d allocConf.getQueueMaxApps(cur.getQueueName())) {\n        throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n            + queueName + \" would violate queue maxRunningApps constraints on\"\n            + \" queue \" + cur.getQueueName());\n      }\n      \n      // maxShare\n      if (!Resources.fitsIn(Resources.add(cur.getResourceUsage(), consumption),\n          cur.getMaxShare())) {\n        throw new YarnException(\"Moving app attempt \" + appAttId + \" to queue \"\n            + queueName + \" would violate queue maxShare constraints on\"\n            + \" queue \" + cur.getQueueName());\n      }\n      \n      cur \u003d cur.getParent();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}