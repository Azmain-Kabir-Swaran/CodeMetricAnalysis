{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EncryptionZoneManager.java",
  "functionName": "listReencryptionStatus",
  "functionId": "listReencryptionStatus___prevId-long(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
  "functionStartLine": 705,
  "functionEndLine": 740,
  "numCommitsSeen": 42,
  "timeTaken": 1889,
  "changeHistory": [
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,36 @@\n+  BatchedListEntries\u003cZoneReencryptionStatus\u003e listReencryptionStatus(\n+      final long prevId) throws IOException {\n+    assert dir.hasReadLock();\n+    if (!hasCreatedEncryptionZone()) {\n+      return ReencryptionStatus.EMPTY_LIST;\n+    }\n+\n+    NavigableMap\u003cLong, ZoneReencryptionStatus\u003e stats \u003d\n+        reencryptionStatus.getZoneStatuses();\n+\n+    if (stats.isEmpty()) {\n+      return EMPTY_LIST;\n+    }\n+\n+    NavigableMap\u003cLong, ZoneReencryptionStatus\u003e tailMap \u003d\n+        stats.tailMap(prevId, false);\n+    final int numResp \u003d\n+        Math.min(maxListRecncryptionStatusResponses, tailMap.size());\n+    final List\u003cZoneReencryptionStatus\u003e ret \u003d\n+        Lists.newArrayListWithExpectedSize(numResp);\n+    int count \u003d 0;\n+    for (ZoneReencryptionStatus zs : tailMap.values()) {\n+      final String name \u003d getFullPathName(zs.getId());\n+      if (name \u003d\u003d null || !pathResolvesToId(zs.getId(), name)) {\n+        continue;\n+      }\n+      zs.setZoneName(name);\n+      ret.add(zs);\n+      ++count;\n+      if (count \u003e\u003d numResp) {\n+        break;\n+      }\n+    }\n+    final boolean hasMore \u003d (numResp \u003c tailMap.size());\n+    return new BatchedListEntries\u003c\u003e(ret, hasMore);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cZoneReencryptionStatus\u003e listReencryptionStatus(\n      final long prevId) throws IOException {\n    assert dir.hasReadLock();\n    if (!hasCreatedEncryptionZone()) {\n      return ReencryptionStatus.EMPTY_LIST;\n    }\n\n    NavigableMap\u003cLong, ZoneReencryptionStatus\u003e stats \u003d\n        reencryptionStatus.getZoneStatuses();\n\n    if (stats.isEmpty()) {\n      return EMPTY_LIST;\n    }\n\n    NavigableMap\u003cLong, ZoneReencryptionStatus\u003e tailMap \u003d\n        stats.tailMap(prevId, false);\n    final int numResp \u003d\n        Math.min(maxListRecncryptionStatusResponses, tailMap.size());\n    final List\u003cZoneReencryptionStatus\u003e ret \u003d\n        Lists.newArrayListWithExpectedSize(numResp);\n    int count \u003d 0;\n    for (ZoneReencryptionStatus zs : tailMap.values()) {\n      final String name \u003d getFullPathName(zs.getId());\n      if (name \u003d\u003d null || !pathResolvesToId(zs.getId(), name)) {\n        continue;\n      }\n      zs.setZoneName(name);\n      ret.add(zs);\n      ++count;\n      if (count \u003e\u003d numResp) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResp \u003c tailMap.size());\n    return new BatchedListEntries\u003c\u003e(ret, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java"
    }
  }
}