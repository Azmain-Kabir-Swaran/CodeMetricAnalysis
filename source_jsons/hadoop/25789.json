{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMCommunicator.java",
  "functionName": "unregister",
  "functionId": "unregister",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
  "functionStartLine": 187,
  "functionEndLine": 197,
  "numCommitsSeen": 52,
  "timeTaken": 8091,
  "changeHistory": [
    "64306aa1b5f280e5ffaf2186bef706acd93b1412",
    "f0799c55360e1e77224955f331892390e4361729",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
    "ec010a29362c6c5572f8681f4e7d0469176345e1",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7",
    "c2d0cf1b20489fada91c80d2da5c7fed757d6c27",
    "022f7b4a25c73b8c43985e8d1bac717b96373ac6",
    "5f52156aa2389e8583a699fb3ba7b78250390154",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "063e33a862f99ce93b8399924c35d39ccd880f01",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "64306aa1b5f280e5ffaf2186bef706acd93b1412": "Ybodychange",
    "f0799c55360e1e77224955f331892390e4361729": "Ybodychange",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": "Ybodychange",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": "Ybodychange",
    "ec010a29362c6c5572f8681f4e7d0469176345e1": "Ybodychange",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": "Ybodychange",
    "c2d0cf1b20489fada91c80d2da5c7fed757d6c27": "Ybodychange",
    "022f7b4a25c73b8c43985e8d1bac717b96373ac6": "Ybodychange",
    "5f52156aa2389e8583a699fb3ba7b78250390154": "Ybodychange",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "063e33a862f99ce93b8399924c35d39ccd880f01": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "64306aa1b5f280e5ffaf2186bef706acd93b1412": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5956. Made MR AM not use maxAttempts to determine if the current attempt is the last retry. Contributed by Wangda Tan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609649 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/14 1:45 AM",
      "commitName": "64306aa1b5f280e5ffaf2186bef706acd93b1412",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "14/03/14 11:15 AM",
      "commitNameOld": "d9f723ed74ce6ffdba02832dd5d2e45bd48b3c92",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 118.6,
      "commitsBetweenForRepo": 738,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   protected void unregister() {\n     try {\n       doUnregistration();\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n       // if unregistration failed, isLastAMRetry needs to be recalculated\n       // to see whether AM really has the chance to retry\n       RunningAppContext raContext \u003d (RunningAppContext) context;\n-      raContext.computeIsLastAMRetry();\n+      raContext.resetIsLastAMRetry();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      doUnregistration();\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n      // if unregistration failed, isLastAMRetry needs to be recalculated\n      // to see whether AM really has the chance to retry\n      RunningAppContext raContext \u003d (RunningAppContext) context;\n      raContext.resetIsLastAMRetry();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "f0799c55360e1e77224955f331892390e4361729": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5562. Fixed MR App Master to perform pending tasks like staging-dir cleanup, sending job-end notification correctly when unregister with RM fails. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 1:53 PM",
      "commitName": "f0799c55360e1e77224955f331892390e4361729",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/10/13 3:52 PM",
      "commitNameOld": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.92,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,11 @@\n   protected void unregister() {\n     try {\n-      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n-      JobImpl jobImpl \u003d (JobImpl)job;\n-      if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n-        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n-      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n-          || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n-        finishState \u003d FinalApplicationStatus.KILLED;\n-      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n-          || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n-        finishState \u003d FinalApplicationStatus.FAILED;\n-      }\n-      StringBuffer sb \u003d new StringBuffer();\n-      for (String s : job.getDiagnostics()) {\n-        sb.append(s).append(\"\\n\");\n-      }\n-      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n-\n-      String historyUrl \u003d\n-          MRWebAppUtil.getApplicationWebURLOnJHSWithScheme(getConfig(),\n-              context.getApplicationID());\n-      LOG.info(\"History url is \" + historyUrl);\n-      FinishApplicationMasterRequest request \u003d\n-          FinishApplicationMasterRequest.newInstance(finishState,\n-            sb.toString(), historyUrl);\n-      while (true) {\n-        FinishApplicationMasterResponse response \u003d\n-            scheduler.finishApplicationMaster(request);\n-        if (response.getIsUnregistered()) {\n-          break;\n-        }\n-        LOG.info(\"Waiting for application to be successfully unregistered.\");\n-        Thread.sleep(rmPollInterval);\n-      }\n+      doUnregistration();\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n+      // if unregistration failed, isLastAMRetry needs to be recalculated\n+      // to see whether AM really has the chance to retry\n+      RunningAppContext raContext \u003d (RunningAppContext) context;\n+      raContext.computeIsLastAMRetry();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      doUnregistration();\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n      // if unregistration failed, isLastAMRetry needs to be recalculated\n      // to see whether AM really has the chance to retry\n      RunningAppContext raContext \u003d (RunningAppContext) context;\n      raContext.computeIsLastAMRetry();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5536. Fixed MR AM and JHS to respect mapreduce.jobhistory.webapp.https.address. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:52 PM",
      "commitName": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/13 4:35 PM",
      "commitNameOld": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.97,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   protected void unregister() {\n     try {\n       FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n       JobImpl jobImpl \u003d (JobImpl)job;\n       if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n         finishState \u003d FinalApplicationStatus.SUCCEEDED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n           || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n         finishState \u003d FinalApplicationStatus.KILLED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n           || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n         finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n \n       String historyUrl \u003d\n-          WebAppUtil.getSchemePrefix()\n-              + JobHistoryUtils.getHistoryUrl(getConfig(),\n-                  context.getApplicationID());\n+          MRWebAppUtil.getApplicationWebURLOnJHSWithScheme(getConfig(),\n+              context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n       FinishApplicationMasterRequest request \u003d\n           FinishApplicationMasterRequest.newInstance(finishState,\n             sb.toString(), historyUrl);\n       while (true) {\n         FinishApplicationMasterResponse response \u003d\n             scheduler.finishApplicationMaster(request);\n         if (response.getIsUnregistered()) {\n           break;\n         }\n         LOG.info(\"Waiting for application to be successfully unregistered.\");\n         Thread.sleep(rmPollInterval);\n       }\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      JobImpl jobImpl \u003d (JobImpl)job;\n      if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n          || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n          || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d\n          MRWebAppUtil.getApplicationWebURLOnJHSWithScheme(getConfig(),\n              context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n      FinishApplicationMasterRequest request \u003d\n          FinishApplicationMasterRequest.newInstance(finishState,\n            sb.toString(), historyUrl);\n      while (true) {\n        FinishApplicationMasterResponse response \u003d\n            scheduler.finishApplicationMaster(request);\n        if (response.getIsUnregistered()) {\n          break;\n        }\n        LOG.info(\"Waiting for application to be successfully unregistered.\");\n        Thread.sleep(rmPollInterval);\n      }\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1203. Changed YARN web-app proxy to handle http and https URLs from AM registration and finish correctly. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5515. Fixed MR AM\u0027s webapp to depend on a new config mapreduce.ssl.enabled to enable https and disabling it by default as MR AM needs\nto set up its own certificates etc and not depend on clusters\u0027. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524864 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/13 4:35 PM",
      "commitName": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/09/13 6:01 PM",
      "commitNameOld": "ec010a29362c6c5572f8681f4e7d0469176345e1",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 4.94,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   protected void unregister() {\n     try {\n       FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n       JobImpl jobImpl \u003d (JobImpl)job;\n       if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n         finishState \u003d FinalApplicationStatus.SUCCEEDED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n           || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n         finishState \u003d FinalApplicationStatus.KILLED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n           || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n         finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n \n-      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n-          context.getApplicationID());\n+      String historyUrl \u003d\n+          WebAppUtil.getSchemePrefix()\n+              + JobHistoryUtils.getHistoryUrl(getConfig(),\n+                  context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n-\n       FinishApplicationMasterRequest request \u003d\n           FinishApplicationMasterRequest.newInstance(finishState,\n             sb.toString(), historyUrl);\n       while (true) {\n         FinishApplicationMasterResponse response \u003d\n             scheduler.finishApplicationMaster(request);\n         if (response.getIsUnregistered()) {\n           break;\n         }\n         LOG.info(\"Waiting for application to be successfully unregistered.\");\n         Thread.sleep(rmPollInterval);\n       }\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      JobImpl jobImpl \u003d (JobImpl)job;\n      if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n          || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n          || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d\n          WebAppUtil.getSchemePrefix()\n              + JobHistoryUtils.getHistoryUrl(getConfig(),\n                  context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n      FinishApplicationMasterRequest request \u003d\n          FinishApplicationMasterRequest.newInstance(finishState,\n            sb.toString(), historyUrl);\n      while (true) {\n        FinishApplicationMasterResponse response \u003d\n            scheduler.finishApplicationMaster(request);\n        if (response.getIsUnregistered()) {\n          break;\n        }\n        LOG.info(\"Waiting for application to be successfully unregistered.\");\n        Thread.sleep(rmPollInterval);\n      }\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "ec010a29362c6c5572f8681f4e7d0469176345e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-540. Race condition causing RM to potentially relaunch already unregistered AMs on RM restart (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523376 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/13 6:01 PM",
      "commitName": "ec010a29362c6c5572f8681f4e7d0469176345e1",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "13/09/13 4:51 PM",
      "commitNameOld": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,39 @@\n   protected void unregister() {\n     try {\n       FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n       JobImpl jobImpl \u003d (JobImpl)job;\n       if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n         finishState \u003d FinalApplicationStatus.SUCCEEDED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n           || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n         finishState \u003d FinalApplicationStatus.KILLED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n           || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n         finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n \n       String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n           context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n \n       FinishApplicationMasterRequest request \u003d\n           FinishApplicationMasterRequest.newInstance(finishState,\n             sb.toString(), historyUrl);\n-      scheduler.finishApplicationMaster(request);\n+      while (true) {\n+        FinishApplicationMasterResponse response \u003d\n+            scheduler.finishApplicationMaster(request);\n+        if (response.getIsUnregistered()) {\n+          break;\n+        }\n+        LOG.info(\"Waiting for application to be successfully unregistered.\");\n+        Thread.sleep(rmPollInterval);\n+      }\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      JobImpl jobImpl \u003d (JobImpl)job;\n      if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n          || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n          || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          FinishApplicationMasterRequest.newInstance(finishState,\n            sb.toString(), historyUrl);\n      while (true) {\n        FinishApplicationMasterResponse response \u003d\n            scheduler.finishApplicationMaster(request);\n        if (response.getIsUnregistered()) {\n          break;\n        }\n        LOG.info(\"Waiting for application to be successfully unregistered.\");\n        Thread.sleep(rmPollInterval);\n      }\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-918. Remove ApplicationAttemptId from RegisterApplicationMasterRequestProto. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:57 PM",
      "commitName": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/07/13 3:51 PM",
      "commitNameOld": "bf876f70fba1fbc61f4062255981684b992a56b6",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,31 @@\n   protected void unregister() {\n     try {\n       FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n       JobImpl jobImpl \u003d (JobImpl)job;\n       if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n         finishState \u003d FinalApplicationStatus.SUCCEEDED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n           || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n         finishState \u003d FinalApplicationStatus.KILLED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n           || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n         finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n \n       String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n           context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n \n       FinishApplicationMasterRequest request \u003d\n-          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n-      request.setAppAttemptId(this.applicationAttemptId);\n-      request.setFinalApplicationStatus(finishState);\n-      request.setDiagnostics(sb.toString());\n-      request.setTrackingUrl(historyUrl);\n+          FinishApplicationMasterRequest.newInstance(finishState,\n+            sb.toString(), historyUrl);\n       scheduler.finishApplicationMaster(request);\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      JobImpl jobImpl \u003d (JobImpl)job;\n      if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n          || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n          || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          FinishApplicationMasterRequest.newInstance(finishState,\n            sb.toString(), historyUrl);\n      scheduler.finishApplicationMaster(request);\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "c2d0cf1b20489fada91c80d2da5c7fed757d6c27": {
      "type": "Ybodychange",
      "commitMessage": "YARN-821. Renamed setFinishApplicationStatus to setFinalApplicationStatus in FinishApplicationMasterRequest for consistency. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493315 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/13 9:57 PM",
      "commitName": "c2d0cf1b20489fada91c80d2da5c7fed757d6c27",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/06/13 12:06 PM",
      "commitNameOld": "079ed1c9e1ab0a902e183dca2a5a9d79a7201264",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected void unregister() {\n     try {\n       FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n       JobImpl jobImpl \u003d (JobImpl)job;\n       if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n         finishState \u003d FinalApplicationStatus.SUCCEEDED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n           || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n         finishState \u003d FinalApplicationStatus.KILLED;\n       } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n           || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n         finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n \n       String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n           context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n \n       FinishApplicationMasterRequest request \u003d\n           recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n       request.setAppAttemptId(this.applicationAttemptId);\n-      request.setFinishApplicationStatus(finishState);\n+      request.setFinalApplicationStatus(finishState);\n       request.setDiagnostics(sb.toString());\n       request.setTrackingUrl(historyUrl);\n       scheduler.finishApplicationMaster(request);\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      JobImpl jobImpl \u003d (JobImpl)job;\n      if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n          || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n          || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n      request.setAppAttemptId(this.applicationAttemptId);\n      request.setFinalApplicationStatus(finishState);\n      request.setDiagnostics(sb.toString());\n      request.setTrackingUrl(historyUrl);\n      scheduler.finishApplicationMaster(request);\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "022f7b4a25c73b8c43985e8d1bac717b96373ac6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4596. Split StateMachine state from states seen by MRClientProtocol for Job, Task and TaskAttempt. Contributed by Siddarth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1399976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/12 10:57 PM",
      "commitName": "022f7b4a25c73b8c43985e8d1bac717b96373ac6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/08/12 1:43 PM",
      "commitNameOld": "25e96e455b3473387df865fbc1c3ad7ebf9ff1e4",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 48.38,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   protected void unregister() {\n     try {\n       FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n-      if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n+      JobImpl jobImpl \u003d (JobImpl)job;\n+      if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n         finishState \u003d FinalApplicationStatus.SUCCEEDED;\n-      } else if (job.getState() \u003d\u003d JobState.KILLED\n-          || (job.getState() \u003d\u003d JobState.RUNNING \u0026\u0026 isSignalled)) {\n+      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n+          || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n         finishState \u003d FinalApplicationStatus.KILLED;\n-      } else if (job.getState() \u003d\u003d JobState.FAILED\n-          || job.getState() \u003d\u003d JobState.ERROR) {\n+      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n+          || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n         finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n \n       String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n           context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n \n       FinishApplicationMasterRequest request \u003d\n           recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n       request.setAppAttemptId(this.applicationAttemptId);\n       request.setFinishApplicationStatus(finishState);\n       request.setDiagnostics(sb.toString());\n       request.setTrackingUrl(historyUrl);\n       scheduler.finishApplicationMaster(request);\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      JobImpl jobImpl \u003d (JobImpl)job;\n      if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.KILLED\n          || (jobImpl.getInternalState() \u003d\u003d JobStateInternal.RUNNING \u0026\u0026 isSignalled)) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (jobImpl.getInternalState() \u003d\u003d JobStateInternal.FAILED\n          || jobImpl.getInternalState() \u003d\u003d JobStateInternal.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n      request.setAppAttemptId(this.applicationAttemptId);\n      request.setFinishApplicationStatus(finishState);\n      request.setDiagnostics(sb.toString());\n      request.setTrackingUrl(historyUrl);\n      scheduler.finishApplicationMaster(request);\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "5f52156aa2389e8583a699fb3ba7b78250390154": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3614. Fixed MR AM to close history file quickly and send a correct final state to the RM when it is killed. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296747 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/12 9:23 PM",
      "commitName": "5f52156aa2389e8583a699fb3ba7b78250390154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/02/12 2:01 PM",
      "commitNameOld": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 26.31,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   protected void unregister() {\n     try {\n       FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n       if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n         finishState \u003d FinalApplicationStatus.SUCCEEDED;\n-      } else if (job.getState() \u003d\u003d JobState.KILLED) {\n+      } else if (job.getState() \u003d\u003d JobState.KILLED\n+          || (job.getState() \u003d\u003d JobState.RUNNING \u0026\u0026 isSignalled)) {\n         finishState \u003d FinalApplicationStatus.KILLED;\n       } else if (job.getState() \u003d\u003d JobState.FAILED\n           || job.getState() \u003d\u003d JobState.ERROR) {\n         finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n \n       String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n           context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n \n       FinishApplicationMasterRequest request \u003d\n           recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n       request.setAppAttemptId(this.applicationAttemptId);\n       request.setFinishApplicationStatus(finishState);\n       request.setDiagnostics(sb.toString());\n       request.setTrackingUrl(historyUrl);\n       scheduler.finishApplicationMaster(request);\n     } catch(Exception are) {\n       LOG.error(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (job.getState() \u003d\u003d JobState.KILLED\n          || (job.getState() \u003d\u003d JobState.RUNNING \u0026\u0026 isSignalled)) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (job.getState() \u003d\u003d JobState.FAILED\n          || job.getState() \u003d\u003d JobState.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n      request.setAppAttemptId(this.applicationAttemptId);\n      request.setFinishApplicationStatus(finishState);\n      request.setDiagnostics(sb.toString());\n      request.setTrackingUrl(historyUrl);\n      scheduler.finishApplicationMaster(request);\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "04/01/12 5:37 PM",
      "commitNameOld": "08f8abf5639d39167952dc5120b44fe35c63ff7a",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 32.85,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   protected void unregister() {\n     try {\n       FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n       if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n         finishState \u003d FinalApplicationStatus.SUCCEEDED;\n       } else if (job.getState() \u003d\u003d JobState.KILLED) {\n         finishState \u003d FinalApplicationStatus.KILLED;\n       } else if (job.getState() \u003d\u003d JobState.FAILED\n           || job.getState() \u003d\u003d JobState.ERROR) {\n         finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n \n       String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n           context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n \n       FinishApplicationMasterRequest request \u003d\n           recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n       request.setAppAttemptId(this.applicationAttemptId);\n       request.setFinishApplicationStatus(finishState);\n       request.setDiagnostics(sb.toString());\n       request.setTrackingUrl(historyUrl);\n       scheduler.finishApplicationMaster(request);\n     } catch(Exception are) {\n-      LOG.info(\"Exception while unregistering \", are);\n+      LOG.error(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (job.getState() \u003d\u003d JobState.KILLED) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (job.getState() \u003d\u003d JobState.FAILED\n          || job.getState() \u003d\u003d JobState.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n      request.setAppAttemptId(this.applicationAttemptId);\n      request.setFinishApplicationStatus(finishState);\n      request.setDiagnostics(sb.toString());\n      request.setTrackingUrl(historyUrl);\n      scheduler.finishApplicationMaster(request);\n    } catch(Exception are) {\n      LOG.error(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "063e33a862f99ce93b8399924c35d39ccd880f01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3098. Fixed RM and MR AM to report YarnApplicationState and application\u0027s FinalStatus separately. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177633 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/09/11 5:46 AM",
      "commitName": "063e33a862f99ce93b8399924c35d39ccd880f01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/09/11 12:31 AM",
      "commitNameOld": "312a7e71001d55f88781e56b331ab1b40a72a980",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.22,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   protected void unregister() {\n     try {\n-      String finalState \u003d \"RUNNING\";\n+      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n       if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n-        finalState \u003d \"SUCCEEDED\";\n+        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n       } else if (job.getState() \u003d\u003d JobState.KILLED) {\n-        finalState \u003d \"KILLED\";\n+        finishState \u003d FinalApplicationStatus.KILLED;\n       } else if (job.getState() \u003d\u003d JobState.FAILED\n           || job.getState() \u003d\u003d JobState.ERROR) {\n-        finalState \u003d \"FAILED\";\n+        finishState \u003d FinalApplicationStatus.FAILED;\n       }\n       StringBuffer sb \u003d new StringBuffer();\n       for (String s : job.getDiagnostics()) {\n         sb.append(s).append(\"\\n\");\n       }\n       LOG.info(\"Setting job diagnostics to \" + sb.toString());\n-      \n-      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(), \n+\n+      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n           context.getApplicationID());\n       LOG.info(\"History url is \" + historyUrl);\n \n       FinishApplicationMasterRequest request \u003d\n           recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n       request.setAppAttemptId(this.applicationAttemptId);\n-      request.setFinalState(finalState.toString());\n+      request.setFinishApplicationStatus(finishState);\n       request.setDiagnostics(sb.toString());\n       request.setTrackingUrl(historyUrl);\n       scheduler.finishApplicationMaster(request);\n     } catch(Exception are) {\n       LOG.info(\"Exception while unregistering \", are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      FinalApplicationStatus finishState \u003d FinalApplicationStatus.UNDEFINED;\n      if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n        finishState \u003d FinalApplicationStatus.SUCCEEDED;\n      } else if (job.getState() \u003d\u003d JobState.KILLED) {\n        finishState \u003d FinalApplicationStatus.KILLED;\n      } else if (job.getState() \u003d\u003d JobState.FAILED\n          || job.getState() \u003d\u003d JobState.ERROR) {\n        finishState \u003d FinalApplicationStatus.FAILED;\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n\n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(),\n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n      request.setAppAttemptId(this.applicationAttemptId);\n      request.setFinishApplicationStatus(finishState);\n      request.setDiagnostics(sb.toString());\n      request.setTrackingUrl(historyUrl);\n      scheduler.finishApplicationMaster(request);\n    } catch(Exception are) {\n      LOG.info(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void unregister() {\n    try {\n      String finalState \u003d \"RUNNING\";\n      if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n        finalState \u003d \"SUCCEEDED\";\n      } else if (job.getState() \u003d\u003d JobState.KILLED) {\n        finalState \u003d \"KILLED\";\n      } else if (job.getState() \u003d\u003d JobState.FAILED\n          || job.getState() \u003d\u003d JobState.ERROR) {\n        finalState \u003d \"FAILED\";\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n      \n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(), \n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n      request.setAppAttemptId(this.applicationAttemptId);\n      request.setFinalState(finalState.toString());\n      request.setDiagnostics(sb.toString());\n      request.setTrackingUrl(historyUrl);\n      scheduler.finishApplicationMaster(request);\n    } catch(Exception are) {\n      LOG.info(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,32 @@\n+  protected void unregister() {\n+    try {\n+      String finalState \u003d \"RUNNING\";\n+      if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n+        finalState \u003d \"SUCCEEDED\";\n+      } else if (job.getState() \u003d\u003d JobState.KILLED) {\n+        finalState \u003d \"KILLED\";\n+      } else if (job.getState() \u003d\u003d JobState.FAILED\n+          || job.getState() \u003d\u003d JobState.ERROR) {\n+        finalState \u003d \"FAILED\";\n+      }\n+      StringBuffer sb \u003d new StringBuffer();\n+      for (String s : job.getDiagnostics()) {\n+        sb.append(s).append(\"\\n\");\n+      }\n+      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n+      \n+      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(), \n+          context.getApplicationID());\n+      LOG.info(\"History url is \" + historyUrl);\n+\n+      FinishApplicationMasterRequest request \u003d\n+          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n+      request.setAppAttemptId(this.applicationAttemptId);\n+      request.setFinalState(finalState.toString());\n+      request.setDiagnostics(sb.toString());\n+      request.setTrackingUrl(historyUrl);\n+      scheduler.finishApplicationMaster(request);\n+    } catch(Exception are) {\n+      LOG.info(\"Exception while unregistering \", are);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void unregister() {\n    try {\n      String finalState \u003d \"RUNNING\";\n      if (job.getState() \u003d\u003d JobState.SUCCEEDED) {\n        finalState \u003d \"SUCCEEDED\";\n      } else if (job.getState() \u003d\u003d JobState.KILLED) {\n        finalState \u003d \"KILLED\";\n      } else if (job.getState() \u003d\u003d JobState.FAILED\n          || job.getState() \u003d\u003d JobState.ERROR) {\n        finalState \u003d \"FAILED\";\n      }\n      StringBuffer sb \u003d new StringBuffer();\n      for (String s : job.getDiagnostics()) {\n        sb.append(s).append(\"\\n\");\n      }\n      LOG.info(\"Setting job diagnostics to \" + sb.toString());\n      \n      String historyUrl \u003d JobHistoryUtils.getHistoryUrl(getConfig(), \n          context.getApplicationID());\n      LOG.info(\"History url is \" + historyUrl);\n\n      FinishApplicationMasterRequest request \u003d\n          recordFactory.newRecordInstance(FinishApplicationMasterRequest.class);\n      request.setAppAttemptId(this.applicationAttemptId);\n      request.setFinalState(finalState.toString());\n      request.setDiagnostics(sb.toString());\n      request.setTrackingUrl(historyUrl);\n      scheduler.finishApplicationMaster(request);\n    } catch(Exception are) {\n      LOG.info(\"Exception while unregistering \", are);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
    }
  }
}