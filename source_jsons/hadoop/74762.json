{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKDelegationTokenSecretManager.java",
  "functionName": "getTokenInfoFromZK",
  "functionId": "getTokenInfoFromZK___ident-TokenIdent__quiet-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java",
  "functionStartLine": 700,
  "functionEndLine": 730,
  "numCommitsSeen": 16,
  "timeTaken": 963,
  "changeHistory": [
    "db45f047ab6b19d8a3e7752bb2cde10827cd8dad"
  ],
  "changeHistoryShort": {
    "db45f047ab6b19d8a3e7752bb2cde10827cd8dad": "Yintroduced"
  },
  "changeHistoryDetails": {
    "db45f047ab6b19d8a3e7752bb2cde10827cd8dad": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11170. ZKDelegationTokenSecretManager fails to renewToken created by a peer. (Arun Suresh and Gregory Chanan via kasha)\n",
      "commitDate": "23/10/14 5:04 PM",
      "commitName": "db45f047ab6b19d8a3e7752bb2cde10827cd8dad",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,31 @@\n+  private DelegationTokenInformation getTokenInfoFromZK(TokenIdent ident,\n+      boolean quiet) throws IOException {\n+    String nodePath \u003d\n+        getNodePath(ZK_DTSM_TOKENS_ROOT,\n+            DELEGATION_TOKEN_PREFIX + ident.getSequenceNumber());\n+    try {\n+      byte[] data \u003d zkClient.getData().forPath(nodePath);\n+      if ((data \u003d\u003d null) || (data.length \u003d\u003d 0)) {\n+        return null;\n+      }\n+      ByteArrayInputStream bin \u003d new ByteArrayInputStream(data);\n+      DataInputStream din \u003d new DataInputStream(bin);\n+      createIdentifier().readFields(din);\n+      long renewDate \u003d din.readLong();\n+      int pwdLen \u003d din.readInt();\n+      byte[] password \u003d new byte[pwdLen];\n+      int numRead \u003d din.read(password, 0, pwdLen);\n+      if (numRead \u003e -1) {\n+        DelegationTokenInformation tokenInfo \u003d\n+            new DelegationTokenInformation(renewDate, password);\n+        return tokenInfo;\n+      }\n+    } catch (KeeperException.NoNodeException e) {\n+      if (!quiet) {\n+        LOG.error(\"No node in path [\" + nodePath + \"]\");\n+      }\n+    } catch (Exception ex) {\n+      throw new IOException(ex);\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private DelegationTokenInformation getTokenInfoFromZK(TokenIdent ident,\n      boolean quiet) throws IOException {\n    String nodePath \u003d\n        getNodePath(ZK_DTSM_TOKENS_ROOT,\n            DELEGATION_TOKEN_PREFIX + ident.getSequenceNumber());\n    try {\n      byte[] data \u003d zkClient.getData().forPath(nodePath);\n      if ((data \u003d\u003d null) || (data.length \u003d\u003d 0)) {\n        return null;\n      }\n      ByteArrayInputStream bin \u003d new ByteArrayInputStream(data);\n      DataInputStream din \u003d new DataInputStream(bin);\n      createIdentifier().readFields(din);\n      long renewDate \u003d din.readLong();\n      int pwdLen \u003d din.readInt();\n      byte[] password \u003d new byte[pwdLen];\n      int numRead \u003d din.read(password, 0, pwdLen);\n      if (numRead \u003e -1) {\n        DelegationTokenInformation tokenInfo \u003d\n            new DelegationTokenInformation(renewDate, password);\n        return tokenInfo;\n      }\n    } catch (KeeperException.NoNodeException e) {\n      if (!quiet) {\n        LOG.error(\"No node in path [\" + nodePath + \"]\");\n      }\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java"
    }
  }
}